
Time Circuit Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007258  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  080073e8  080073e8  000083e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007514  08007514  0000909c  2**0
                  CONTENTS
  4 .ARM          00000008  08007514  08007514  00008514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800751c  0800751c  0000909c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800751c  0800751c  0000851c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007520  08007520  00008520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08007524  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000909c  2**0
                  CONTENTS
 10 .bss          00000458  2000009c  2000009c  0000909c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004f4  200004f4  0000909c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000177d4  00000000  00000000  000090cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000403a  00000000  00000000  000208a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001350  00000000  00000000  000248e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ec9  00000000  00000000  00025c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002530e  00000000  00000000  00026af9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ecf8  00000000  00000000  0004be07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5637  00000000  00000000  0006aaff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00140136  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000052f4  00000000  00000000  0014017c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  00145470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000009c 	.word	0x2000009c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080073d0 	.word	0x080073d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	080073d0 	.word	0x080073d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000566:	463b      	mov	r3, r7
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000572:	4b21      	ldr	r3, [pc, #132]	@ (80005f8 <MX_ADC1_Init+0x98>)
 8000574:	4a21      	ldr	r2, [pc, #132]	@ (80005fc <MX_ADC1_Init+0x9c>)
 8000576:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000578:	4b1f      	ldr	r3, [pc, #124]	@ (80005f8 <MX_ADC1_Init+0x98>)
 800057a:	2200      	movs	r2, #0
 800057c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800057e:	4b1e      	ldr	r3, [pc, #120]	@ (80005f8 <MX_ADC1_Init+0x98>)
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000584:	4b1c      	ldr	r3, [pc, #112]	@ (80005f8 <MX_ADC1_Init+0x98>)
 8000586:	2200      	movs	r2, #0
 8000588:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800058a:	4b1b      	ldr	r3, [pc, #108]	@ (80005f8 <MX_ADC1_Init+0x98>)
 800058c:	2200      	movs	r2, #0
 800058e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000590:	4b19      	ldr	r3, [pc, #100]	@ (80005f8 <MX_ADC1_Init+0x98>)
 8000592:	2200      	movs	r2, #0
 8000594:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000598:	4b17      	ldr	r3, [pc, #92]	@ (80005f8 <MX_ADC1_Init+0x98>)
 800059a:	2200      	movs	r2, #0
 800059c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800059e:	4b16      	ldr	r3, [pc, #88]	@ (80005f8 <MX_ADC1_Init+0x98>)
 80005a0:	4a17      	ldr	r2, [pc, #92]	@ (8000600 <MX_ADC1_Init+0xa0>)
 80005a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005a4:	4b14      	ldr	r3, [pc, #80]	@ (80005f8 <MX_ADC1_Init+0x98>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005aa:	4b13      	ldr	r3, [pc, #76]	@ (80005f8 <MX_ADC1_Init+0x98>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005b0:	4b11      	ldr	r3, [pc, #68]	@ (80005f8 <MX_ADC1_Init+0x98>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005b8:	4b0f      	ldr	r3, [pc, #60]	@ (80005f8 <MX_ADC1_Init+0x98>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005be:	480e      	ldr	r0, [pc, #56]	@ (80005f8 <MX_ADC1_Init+0x98>)
 80005c0:	f000 ffb6 	bl	8001530 <HAL_ADC_Init>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80005ca:	f000 fc6d 	bl	8000ea8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005d2:	2301      	movs	r3, #1
 80005d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005da:	463b      	mov	r3, r7
 80005dc:	4619      	mov	r1, r3
 80005de:	4806      	ldr	r0, [pc, #24]	@ (80005f8 <MX_ADC1_Init+0x98>)
 80005e0:	f000 ffea 	bl	80015b8 <HAL_ADC_ConfigChannel>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80005ea:	f000 fc5d 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005ee:	bf00      	nop
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	200000b8 	.word	0x200000b8
 80005fc:	40012000 	.word	0x40012000
 8000600:	0f000001 	.word	0x0f000001

08000604 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08a      	sub	sp, #40	@ 0x28
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a17      	ldr	r2, [pc, #92]	@ (8000680 <HAL_ADC_MspInit+0x7c>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d127      	bne.n	8000676 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	613b      	str	r3, [r7, #16]
 800062a:	4b16      	ldr	r3, [pc, #88]	@ (8000684 <HAL_ADC_MspInit+0x80>)
 800062c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800062e:	4a15      	ldr	r2, [pc, #84]	@ (8000684 <HAL_ADC_MspInit+0x80>)
 8000630:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000634:	6453      	str	r3, [r2, #68]	@ 0x44
 8000636:	4b13      	ldr	r3, [pc, #76]	@ (8000684 <HAL_ADC_MspInit+0x80>)
 8000638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800063a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800063e:	613b      	str	r3, [r7, #16]
 8000640:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	4b0f      	ldr	r3, [pc, #60]	@ (8000684 <HAL_ADC_MspInit+0x80>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	4a0e      	ldr	r2, [pc, #56]	@ (8000684 <HAL_ADC_MspInit+0x80>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6313      	str	r3, [r2, #48]	@ 0x30
 8000652:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <HAL_ADC_MspInit+0x80>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = CAN_ID_SWITCH_4_Pin;
 800065e:	2301      	movs	r3, #1
 8000660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000662:	2303      	movs	r3, #3
 8000664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CAN_ID_SWITCH_4_GPIO_Port, &GPIO_InitStruct);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4619      	mov	r1, r3
 8000670:	4805      	ldr	r0, [pc, #20]	@ (8000688 <HAL_ADC_MspInit+0x84>)
 8000672:	f001 fbcd 	bl	8001e10 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000676:	bf00      	nop
 8000678:	3728      	adds	r7, #40	@ 0x28
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40012000 	.word	0x40012000
 8000684:	40023800 	.word	0x40023800
 8000688:	40020000 	.word	0x40020000

0800068c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000690:	4b16      	ldr	r3, [pc, #88]	@ (80006ec <MX_CAN1_Init+0x60>)
 8000692:	4a17      	ldr	r2, [pc, #92]	@ (80006f0 <MX_CAN1_Init+0x64>)
 8000694:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000696:	4b15      	ldr	r3, [pc, #84]	@ (80006ec <MX_CAN1_Init+0x60>)
 8000698:	2210      	movs	r2, #16
 800069a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800069c:	4b13      	ldr	r3, [pc, #76]	@ (80006ec <MX_CAN1_Init+0x60>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006a2:	4b12      	ldr	r3, [pc, #72]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80006a8:	4b10      	ldr	r3, [pc, #64]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80006ae:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006b4:	4b0d      	ldr	r3, [pc, #52]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006ba:	4b0c      	ldr	r3, [pc, #48]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006bc:	2200      	movs	r2, #0
 80006be:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006c0:	4b0a      	ldr	r3, [pc, #40]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006c6:	4b09      	ldr	r3, [pc, #36]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006cc:	4b07      	ldr	r3, [pc, #28]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006d2:	4b06      	ldr	r3, [pc, #24]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006d8:	4804      	ldr	r0, [pc, #16]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006da:	f001 f98b 	bl	80019f4 <HAL_CAN_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80006e4:	f000 fbe0 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000100 	.word	0x20000100
 80006f0:	40006400 	.word	0x40006400

080006f4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08a      	sub	sp, #40	@ 0x28
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a19      	ldr	r2, [pc, #100]	@ (8000778 <HAL_CAN_MspInit+0x84>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d12c      	bne.n	8000770 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
 800071a:	4b18      	ldr	r3, [pc, #96]	@ (800077c <HAL_CAN_MspInit+0x88>)
 800071c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800071e:	4a17      	ldr	r2, [pc, #92]	@ (800077c <HAL_CAN_MspInit+0x88>)
 8000720:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000724:	6413      	str	r3, [r2, #64]	@ 0x40
 8000726:	4b15      	ldr	r3, [pc, #84]	@ (800077c <HAL_CAN_MspInit+0x88>)
 8000728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800072a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	4b11      	ldr	r3, [pc, #68]	@ (800077c <HAL_CAN_MspInit+0x88>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a10      	ldr	r2, [pc, #64]	@ (800077c <HAL_CAN_MspInit+0x88>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <HAL_CAN_MspInit+0x88>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800074e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000754:	2302      	movs	r3, #2
 8000756:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075c:	2303      	movs	r3, #3
 800075e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000760:	2309      	movs	r3, #9
 8000762:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4619      	mov	r1, r3
 800076a:	4805      	ldr	r0, [pc, #20]	@ (8000780 <HAL_CAN_MspInit+0x8c>)
 800076c:	f001 fb50 	bl	8001e10 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000770:	bf00      	nop
 8000772:	3728      	adds	r7, #40	@ 0x28
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40006400 	.word	0x40006400
 800077c:	40023800 	.word	0x40023800
 8000780:	40020000 	.word	0x40020000

08000784 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	@ 0x28
 8000788:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	f107 0314 	add.w	r3, r7, #20
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	613b      	str	r3, [r7, #16]
 800079e:	4b6c      	ldr	r3, [pc, #432]	@ (8000950 <MX_GPIO_Init+0x1cc>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	4a6b      	ldr	r2, [pc, #428]	@ (8000950 <MX_GPIO_Init+0x1cc>)
 80007a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007aa:	4b69      	ldr	r3, [pc, #420]	@ (8000950 <MX_GPIO_Init+0x1cc>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	4b65      	ldr	r3, [pc, #404]	@ (8000950 <MX_GPIO_Init+0x1cc>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a64      	ldr	r2, [pc, #400]	@ (8000950 <MX_GPIO_Init+0x1cc>)
 80007c0:	f043 0304 	orr.w	r3, r3, #4
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b62      	ldr	r3, [pc, #392]	@ (8000950 <MX_GPIO_Init+0x1cc>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f003 0304 	and.w	r3, r3, #4
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	4b5e      	ldr	r3, [pc, #376]	@ (8000950 <MX_GPIO_Init+0x1cc>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a5d      	ldr	r2, [pc, #372]	@ (8000950 <MX_GPIO_Init+0x1cc>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b5b      	ldr	r3, [pc, #364]	@ (8000950 <MX_GPIO_Init+0x1cc>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b57      	ldr	r3, [pc, #348]	@ (8000950 <MX_GPIO_Init+0x1cc>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a56      	ldr	r2, [pc, #344]	@ (8000950 <MX_GPIO_Init+0x1cc>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b54      	ldr	r3, [pc, #336]	@ (8000950 <MX_GPIO_Init+0x1cc>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	4b50      	ldr	r3, [pc, #320]	@ (8000950 <MX_GPIO_Init+0x1cc>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a4f      	ldr	r2, [pc, #316]	@ (8000950 <MX_GPIO_Init+0x1cc>)
 8000814:	f043 0308 	orr.w	r3, r3, #8
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b4d      	ldr	r3, [pc, #308]	@ (8000950 <MX_GPIO_Init+0x1cc>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0308 	and.w	r3, r3, #8
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, KEYPAD_COL_2_Pin|KEYPAD_COL_1_Pin|SD_CS_Pin|DIAGNOSTIC_RGB_LED_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	f241 0125 	movw	r1, #4133	@ 0x1025
 800082c:	4849      	ldr	r0, [pc, #292]	@ (8000954 <MX_GPIO_Init+0x1d0>)
 800082e:	f001 fca3 	bl	8002178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(KEYPAD_COL_3_GPIO_Port, KEYPAD_COL_3_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2110      	movs	r1, #16
 8000836:	4848      	ldr	r0, [pc, #288]	@ (8000958 <MX_GPIO_Init+0x1d4>)
 8000838:	f001 fc9e 	bl	8002178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WHITE_LED_GPIO_Port, WHITE_LED_Pin, GPIO_PIN_RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000842:	4846      	ldr	r0, [pc, #280]	@ (800095c <MX_GPIO_Init+0x1d8>)
 8000844:	f001 fc98 	bl	8002178 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = KEYPAD_COL_2_Pin|KEYPAD_COL_1_Pin|SD_CS_Pin|DIAGNOSTIC_RGB_LED_Pin;
 8000848:	f241 0325 	movw	r3, #4133	@ 0x1025
 800084c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084e:	2301      	movs	r3, #1
 8000850:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	4619      	mov	r1, r3
 8000860:	483c      	ldr	r0, [pc, #240]	@ (8000954 <MX_GPIO_Init+0x1d0>)
 8000862:	f001 fad5 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = KEYPAD_ROW_1_Pin|KEYPAD_ROW_4_Pin|KEYPAD_ROW_3_Pin;
 8000866:	231a      	movs	r3, #26
 8000868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086a:	2300      	movs	r3, #0
 800086c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800086e:	2302      	movs	r3, #2
 8000870:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	4619      	mov	r1, r3
 8000878:	4836      	ldr	r0, [pc, #216]	@ (8000954 <MX_GPIO_Init+0x1d0>)
 800087a:	f001 fac9 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEYPAD_ROW_2_Pin;
 800087e:	2302      	movs	r3, #2
 8000880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000882:	2300      	movs	r3, #0
 8000884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000886:	2302      	movs	r3, #2
 8000888:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEYPAD_ROW_2_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4619      	mov	r1, r3
 8000890:	4831      	ldr	r0, [pc, #196]	@ (8000958 <MX_GPIO_Init+0x1d4>)
 8000892:	f001 fabd 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEYPAD_COL_3_Pin;
 8000896:	2310      	movs	r3, #16
 8000898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	2301      	movs	r3, #1
 800089c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KEYPAD_COL_3_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	4619      	mov	r1, r3
 80008ac:	482a      	ldr	r0, [pc, #168]	@ (8000958 <MX_GPIO_Init+0x1d4>)
 80008ae:	f001 faaf 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SD_CD_Pin|KEYPAD_ENTER_Pin|GLITCH_SWITCH_Pin;
 80008b2:	2323      	movs	r3, #35	@ 0x23
 80008b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	4619      	mov	r1, r3
 80008c4:	4825      	ldr	r0, [pc, #148]	@ (800095c <MX_GPIO_Init+0x1d8>)
 80008c6:	f001 faa3 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CAN_ID_SWITCH_1_Pin|CAN_ID_SWITCH_2_Pin|CAN_ID_SWITCH_3_Pin|MUTE_SWITCH_Pin;
 80008ca:	f44f 63b8 	mov.w	r3, #1472	@ 0x5c0
 80008ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	4619      	mov	r1, r3
 80008de:	481d      	ldr	r0, [pc, #116]	@ (8000954 <MX_GPIO_Init+0x1d0>)
 80008e0:	f001 fa96 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TIME_TRAVEL_SIM_Pin;
 80008e4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80008e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ea:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TIME_TRAVEL_SIM_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	4619      	mov	r1, r3
 80008fa:	4816      	ldr	r0, [pc, #88]	@ (8000954 <MX_GPIO_Init+0x1d0>)
 80008fc:	f001 fa88 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INTERRUPT_Pin;
 8000900:	2304      	movs	r3, #4
 8000902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000904:	2300      	movs	r3, #0
 8000906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4619      	mov	r1, r3
 8000912:	4813      	ldr	r0, [pc, #76]	@ (8000960 <MX_GPIO_Init+0x1dc>)
 8000914:	f001 fa7c 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WHITE_LED_Pin;
 8000918:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800091c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091e:	2301      	movs	r3, #1
 8000920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WHITE_LED_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	4619      	mov	r1, r3
 8000930:	480a      	ldr	r0, [pc, #40]	@ (800095c <MX_GPIO_Init+0x1d8>)
 8000932:	f001 fa6d 	bl	8001e10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	2100      	movs	r1, #0
 800093a:	2028      	movs	r0, #40	@ 0x28
 800093c:	f001 fa31 	bl	8001da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000940:	2028      	movs	r0, #40	@ 0x28
 8000942:	f001 fa4a 	bl	8001dda <HAL_NVIC_EnableIRQ>

}
 8000946:	bf00      	nop
 8000948:	3728      	adds	r7, #40	@ 0x28
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800
 8000954:	40020800 	.word	0x40020800
 8000958:	40020000 	.word	0x40020000
 800095c:	40020400 	.word	0x40020400
 8000960:	40020c00 	.word	0x40020c00

08000964 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000968:	4b12      	ldr	r3, [pc, #72]	@ (80009b4 <MX_I2C1_Init+0x50>)
 800096a:	4a13      	ldr	r2, [pc, #76]	@ (80009b8 <MX_I2C1_Init+0x54>)
 800096c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800096e:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <MX_I2C1_Init+0x50>)
 8000970:	4a12      	ldr	r2, [pc, #72]	@ (80009bc <MX_I2C1_Init+0x58>)
 8000972:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000974:	4b0f      	ldr	r3, [pc, #60]	@ (80009b4 <MX_I2C1_Init+0x50>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800097a:	4b0e      	ldr	r3, [pc, #56]	@ (80009b4 <MX_I2C1_Init+0x50>)
 800097c:	2200      	movs	r2, #0
 800097e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000980:	4b0c      	ldr	r3, [pc, #48]	@ (80009b4 <MX_I2C1_Init+0x50>)
 8000982:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000986:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000988:	4b0a      	ldr	r3, [pc, #40]	@ (80009b4 <MX_I2C1_Init+0x50>)
 800098a:	2200      	movs	r2, #0
 800098c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800098e:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <MX_I2C1_Init+0x50>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000994:	4b07      	ldr	r3, [pc, #28]	@ (80009b4 <MX_I2C1_Init+0x50>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800099a:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <MX_I2C1_Init+0x50>)
 800099c:	2200      	movs	r2, #0
 800099e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009a0:	4804      	ldr	r0, [pc, #16]	@ (80009b4 <MX_I2C1_Init+0x50>)
 80009a2:	f001 fc27 	bl	80021f4 <HAL_I2C_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009ac:	f000 fa7c 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000128 	.word	0x20000128
 80009b8:	40005400 	.word	0x40005400
 80009bc:	000186a0 	.word	0x000186a0

080009c0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009c4:	4b12      	ldr	r3, [pc, #72]	@ (8000a10 <MX_I2C2_Init+0x50>)
 80009c6:	4a13      	ldr	r2, [pc, #76]	@ (8000a14 <MX_I2C2_Init+0x54>)
 80009c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80009ca:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <MX_I2C2_Init+0x50>)
 80009cc:	4a12      	ldr	r2, [pc, #72]	@ (8000a18 <MX_I2C2_Init+0x58>)
 80009ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a10 <MX_I2C2_Init+0x50>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <MX_I2C2_Init+0x50>)
 80009d8:	2200      	movs	r2, #0
 80009da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <MX_I2C2_Init+0x50>)
 80009de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009e2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000a10 <MX_I2C2_Init+0x50>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80009ea:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <MX_I2C2_Init+0x50>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009f0:	4b07      	ldr	r3, [pc, #28]	@ (8000a10 <MX_I2C2_Init+0x50>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009f6:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <MX_I2C2_Init+0x50>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009fc:	4804      	ldr	r0, [pc, #16]	@ (8000a10 <MX_I2C2_Init+0x50>)
 80009fe:	f001 fbf9 	bl	80021f4 <HAL_I2C_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a08:	f000 fa4e 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	2000017c 	.word	0x2000017c
 8000a14:	40005800 	.word	0x40005800
 8000a18:	000186a0 	.word	0x000186a0

08000a1c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a20:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <MX_I2C3_Init+0x50>)
 8000a22:	4a13      	ldr	r2, [pc, #76]	@ (8000a70 <MX_I2C3_Init+0x54>)
 8000a24:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000a26:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <MX_I2C3_Init+0x50>)
 8000a28:	4a12      	ldr	r2, [pc, #72]	@ (8000a74 <MX_I2C3_Init+0x58>)
 8000a2a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a6c <MX_I2C3_Init+0x50>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	@ (8000a6c <MX_I2C3_Init+0x50>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <MX_I2C3_Init+0x50>)
 8000a3a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a3e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a40:	4b0a      	ldr	r3, [pc, #40]	@ (8000a6c <MX_I2C3_Init+0x50>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000a46:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <MX_I2C3_Init+0x50>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a4c:	4b07      	ldr	r3, [pc, #28]	@ (8000a6c <MX_I2C3_Init+0x50>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a52:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <MX_I2C3_Init+0x50>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a58:	4804      	ldr	r0, [pc, #16]	@ (8000a6c <MX_I2C3_Init+0x50>)
 8000a5a:	f001 fbcb 	bl	80021f4 <HAL_I2C_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000a64:	f000 fa20 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	200001d0 	.word	0x200001d0
 8000a70:	40005c00 	.word	0x40005c00
 8000a74:	000186a0 	.word	0x000186a0

08000a78 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08e      	sub	sp, #56	@ 0x38
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a5b      	ldr	r2, [pc, #364]	@ (8000c04 <HAL_I2C_MspInit+0x18c>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d12c      	bne.n	8000af4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	623b      	str	r3, [r7, #32]
 8000a9e:	4b5a      	ldr	r3, [pc, #360]	@ (8000c08 <HAL_I2C_MspInit+0x190>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	4a59      	ldr	r2, [pc, #356]	@ (8000c08 <HAL_I2C_MspInit+0x190>)
 8000aa4:	f043 0302 	orr.w	r3, r3, #2
 8000aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aaa:	4b57      	ldr	r3, [pc, #348]	@ (8000c08 <HAL_I2C_MspInit+0x190>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	623b      	str	r3, [r7, #32]
 8000ab4:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 8000ab6:	23c0      	movs	r3, #192	@ 0xc0
 8000ab8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aba:	2312      	movs	r3, #18
 8000abc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ac6:	2304      	movs	r3, #4
 8000ac8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ace:	4619      	mov	r1, r3
 8000ad0:	484e      	ldr	r0, [pc, #312]	@ (8000c0c <HAL_I2C_MspInit+0x194>)
 8000ad2:	f001 f99d 	bl	8001e10 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61fb      	str	r3, [r7, #28]
 8000ada:	4b4b      	ldr	r3, [pc, #300]	@ (8000c08 <HAL_I2C_MspInit+0x190>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ade:	4a4a      	ldr	r2, [pc, #296]	@ (8000c08 <HAL_I2C_MspInit+0x190>)
 8000ae0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ae4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ae6:	4b48      	ldr	r3, [pc, #288]	@ (8000c08 <HAL_I2C_MspInit+0x190>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000aee:	61fb      	str	r3, [r7, #28]
 8000af0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000af2:	e083      	b.n	8000bfc <HAL_I2C_MspInit+0x184>
  else if(i2cHandle->Instance==I2C2)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a45      	ldr	r2, [pc, #276]	@ (8000c10 <HAL_I2C_MspInit+0x198>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d12d      	bne.n	8000b5a <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	61bb      	str	r3, [r7, #24]
 8000b02:	4b41      	ldr	r3, [pc, #260]	@ (8000c08 <HAL_I2C_MspInit+0x190>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	4a40      	ldr	r2, [pc, #256]	@ (8000c08 <HAL_I2C_MspInit+0x190>)
 8000b08:	f043 0302 	orr.w	r3, r3, #2
 8000b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0e:	4b3e      	ldr	r3, [pc, #248]	@ (8000c08 <HAL_I2C_MspInit+0x190>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	61bb      	str	r3, [r7, #24]
 8000b18:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b1a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000b1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b20:	2312      	movs	r3, #18
 8000b22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b34:	4619      	mov	r1, r3
 8000b36:	4835      	ldr	r0, [pc, #212]	@ (8000c0c <HAL_I2C_MspInit+0x194>)
 8000b38:	f001 f96a 	bl	8001e10 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	4b31      	ldr	r3, [pc, #196]	@ (8000c08 <HAL_I2C_MspInit+0x190>)
 8000b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b44:	4a30      	ldr	r2, [pc, #192]	@ (8000c08 <HAL_I2C_MspInit+0x190>)
 8000b46:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b4c:	4b2e      	ldr	r3, [pc, #184]	@ (8000c08 <HAL_I2C_MspInit+0x190>)
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b54:	617b      	str	r3, [r7, #20]
 8000b56:	697b      	ldr	r3, [r7, #20]
}
 8000b58:	e050      	b.n	8000bfc <HAL_I2C_MspInit+0x184>
  else if(i2cHandle->Instance==I2C3)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a2d      	ldr	r2, [pc, #180]	@ (8000c14 <HAL_I2C_MspInit+0x19c>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d14b      	bne.n	8000bfc <HAL_I2C_MspInit+0x184>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b64:	2300      	movs	r3, #0
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	4b27      	ldr	r3, [pc, #156]	@ (8000c08 <HAL_I2C_MspInit+0x190>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6c:	4a26      	ldr	r2, [pc, #152]	@ (8000c08 <HAL_I2C_MspInit+0x190>)
 8000b6e:	f043 0304 	orr.w	r3, r3, #4
 8000b72:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b74:	4b24      	ldr	r3, [pc, #144]	@ (8000c08 <HAL_I2C_MspInit+0x190>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b78:	f003 0304 	and.w	r3, r3, #4
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	4b20      	ldr	r3, [pc, #128]	@ (8000c08 <HAL_I2C_MspInit+0x190>)
 8000b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b88:	4a1f      	ldr	r2, [pc, #124]	@ (8000c08 <HAL_I2C_MspInit+0x190>)
 8000b8a:	f043 0301 	orr.w	r3, r3, #1
 8000b8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b90:	4b1d      	ldr	r3, [pc, #116]	@ (8000c08 <HAL_I2C_MspInit+0x190>)
 8000b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TC_DISPLAY_SDA_Pin;
 8000b9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ba0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ba2:	2312      	movs	r3, #18
 8000ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bae:	2304      	movs	r3, #4
 8000bb0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(TC_DISPLAY_SDA_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4817      	ldr	r0, [pc, #92]	@ (8000c18 <HAL_I2C_MspInit+0x1a0>)
 8000bba:	f001 f929 	bl	8001e10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TC_DISPLAY_SCL_Pin;
 8000bbe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bc2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bc4:	2312      	movs	r3, #18
 8000bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bd0:	2304      	movs	r3, #4
 8000bd2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(TC_DISPLAY_SCL_GPIO_Port, &GPIO_InitStruct);
 8000bd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4810      	ldr	r0, [pc, #64]	@ (8000c1c <HAL_I2C_MspInit+0x1a4>)
 8000bdc:	f001 f918 	bl	8001e10 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000be0:	2300      	movs	r3, #0
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	4b08      	ldr	r3, [pc, #32]	@ (8000c08 <HAL_I2C_MspInit+0x190>)
 8000be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be8:	4a07      	ldr	r2, [pc, #28]	@ (8000c08 <HAL_I2C_MspInit+0x190>)
 8000bea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000bee:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bf0:	4b05      	ldr	r3, [pc, #20]	@ (8000c08 <HAL_I2C_MspInit+0x190>)
 8000bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	68bb      	ldr	r3, [r7, #8]
}
 8000bfc:	bf00      	nop
 8000bfe:	3738      	adds	r7, #56	@ 0x38
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40005400 	.word	0x40005400
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40020400 	.word	0x40020400
 8000c10:	40005800 	.word	0x40005800
 8000c14:	40005c00 	.word	0x40005c00
 8000c18:	40020800 	.word	0x40020800
 8000c1c:	40020000 	.word	0x40020000

08000c20 <MX_I2S2_Init>:

I2S_HandleTypeDef hi2s2;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000c24:	4b13      	ldr	r3, [pc, #76]	@ (8000c74 <MX_I2S2_Init+0x54>)
 8000c26:	4a14      	ldr	r2, [pc, #80]	@ (8000c78 <MX_I2S2_Init+0x58>)
 8000c28:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000c2a:	4b12      	ldr	r3, [pc, #72]	@ (8000c74 <MX_I2S2_Init+0x54>)
 8000c2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c30:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000c32:	4b10      	ldr	r3, [pc, #64]	@ (8000c74 <MX_I2S2_Init+0x54>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000c38:	4b0e      	ldr	r3, [pc, #56]	@ (8000c74 <MX_I2S2_Init+0x54>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c74 <MX_I2S2_Init+0x54>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000c44:	4b0b      	ldr	r3, [pc, #44]	@ (8000c74 <MX_I2S2_Init+0x54>)
 8000c46:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000c4a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000c4c:	4b09      	ldr	r3, [pc, #36]	@ (8000c74 <MX_I2S2_Init+0x54>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000c52:	4b08      	ldr	r3, [pc, #32]	@ (8000c74 <MX_I2S2_Init+0x54>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000c58:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <MX_I2S2_Init+0x54>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000c5e:	4805      	ldr	r0, [pc, #20]	@ (8000c74 <MX_I2S2_Init+0x54>)
 8000c60:	f002 fac2 	bl	80031e8 <HAL_I2S_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000c6a:	f000 f91d 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000224 	.word	0x20000224
 8000c78:	40003800 	.word	0x40003800

08000c7c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08e      	sub	sp, #56	@ 0x38
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI2)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a2a      	ldr	r2, [pc, #168]	@ (8000d50 <HAL_I2S_MspInit+0xd4>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d14d      	bne.n	8000d48 <HAL_I2S_MspInit+0xcc>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000cac:	2301      	movs	r3, #1
 8000cae:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 96;
 8000cb0:	2360      	movs	r3, #96	@ 0x60
 8000cb2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f003 fbcb 	bl	8004458 <HAL_RCCEx_PeriphCLKConfig>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000cc8:	f000 f8ee 	bl	8000ea8 <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ccc:	2300      	movs	r3, #0
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	4b20      	ldr	r3, [pc, #128]	@ (8000d54 <HAL_I2S_MspInit+0xd8>)
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd4:	4a1f      	ldr	r2, [pc, #124]	@ (8000d54 <HAL_I2S_MspInit+0xd8>)
 8000cd6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cda:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cdc:	4b1d      	ldr	r3, [pc, #116]	@ (8000d54 <HAL_I2S_MspInit+0xd8>)
 8000cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	4b19      	ldr	r3, [pc, #100]	@ (8000d54 <HAL_I2S_MspInit+0xd8>)
 8000cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf0:	4a18      	ldr	r2, [pc, #96]	@ (8000d54 <HAL_I2S_MspInit+0xd8>)
 8000cf2:	f043 0302 	orr.w	r3, r3, #2
 8000cf6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf8:	4b16      	ldr	r3, [pc, #88]	@ (8000d54 <HAL_I2S_MspInit+0xd8>)
 8000cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfc:	f003 0302 	and.w	r3, r3, #2
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB14     ------> I2S2_ext_SD
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000d04:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8000d08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	2300      	movs	r3, #0
 8000d14:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d16:	2305      	movs	r3, #5
 8000d18:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d1e:	4619      	mov	r1, r3
 8000d20:	480d      	ldr	r0, [pc, #52]	@ (8000d58 <HAL_I2S_MspInit+0xdc>)
 8000d22:	f001 f875 	bl	8001e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000d26:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000d2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000d38:	2306      	movs	r3, #6
 8000d3a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d40:	4619      	mov	r1, r3
 8000d42:	4805      	ldr	r0, [pc, #20]	@ (8000d58 <HAL_I2S_MspInit+0xdc>)
 8000d44:	f001 f864 	bl	8001e10 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000d48:	bf00      	nop
 8000d4a:	3738      	adds	r7, #56	@ 0x38
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40003800 	.word	0x40003800
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40020400 	.word	0x40020400

08000d5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	f5ad 6d8d 	sub.w	sp, sp, #1128	@ 0x468
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d64:	f000 fb4e 	bl	8001404 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d68:	f000 f82c 	bl	8000dc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d6c:	f7ff fd0a 	bl	8000784 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000d70:	f7ff fc8c 	bl	800068c <MX_CAN1_Init>
  MX_I2C1_Init();
 8000d74:	f7ff fdf6 	bl	8000964 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000d78:	f7ff fe22 	bl	80009c0 <MX_I2C2_Init>
  MX_I2S2_Init();
 8000d7c:	f7ff ff50 	bl	8000c20 <MX_I2S2_Init>
  MX_I2C3_Init();
 8000d80:	f7ff fe4c 	bl	8000a1c <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8000d84:	f000 fa44 	bl	8001210 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000d88:	f7ff fbea 	bl	8000560 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000d8c:	f000 fa6a 	bl	8001264 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8000d90:	f004 fafe 	bl	8005390 <MX_FATFS_Init>
  MX_RTC_Init();
 8000d94:	f000 f88e 	bl	8000eb4 <MX_RTC_Init>
  MX_SPI1_Init();
 8000d98:	f000 f914 	bl	8000fc4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  TimeCircuit_Control_Config_t* ptimeCircuitControl  = timeCircuit_control_init(&hi2c3, &hrtc);
 8000d9c:	4907      	ldr	r1, [pc, #28]	@ (8000dbc <main+0x60>)
 8000d9e:	4808      	ldr	r0, [pc, #32]	@ (8000dc0 <main+0x64>)
 8000da0:	f005 fa10 	bl	80061c4 <timeCircuit_control_init>
 8000da4:	f8c7 0464 	str.w	r0, [r7, #1124]	@ 0x464
  timeCircuit_control_setDefaultDisplays(ptimeCircuitControl);
 8000da8:	f8d7 0464 	ldr.w	r0, [r7, #1124]	@ 0x464
 8000dac:	f005 fbcb 	bl	8006546 <timeCircuit_control_setDefaultDisplays>


  while (1)
  {

    timeCircuit_control_update(ptimeCircuitControl);
 8000db0:	f8d7 0464 	ldr.w	r0, [r7, #1124]	@ 0x464
 8000db4:	f005 fd92 	bl	80068dc <timeCircuit_control_update>
 8000db8:	e7fa      	b.n	8000db0 <main+0x54>
 8000dba:	bf00      	nop
 8000dbc:	2000026c 	.word	0x2000026c
 8000dc0:	200001d0 	.word	0x200001d0

08000dc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b094      	sub	sp, #80	@ 0x50
 8000dc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dca:	f107 0320 	add.w	r3, r7, #32
 8000dce:	2230      	movs	r2, #48	@ 0x30
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f005 ff2a 	bl	8006c2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd8:	f107 030c 	add.w	r3, r7, #12
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(4);
 8000de8:	4b2d      	ldr	r3, [pc, #180]	@ (8000ea0 <SystemClock_Config+0xdc>)
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000df0:	4a2b      	ldr	r2, [pc, #172]	@ (8000ea0 <SystemClock_Config+0xdc>)
 8000df2:	f043 0304 	orr.w	r3, r3, #4
 8000df6:	6053      	str	r3, [r2, #4]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000df8:	4b29      	ldr	r3, [pc, #164]	@ (8000ea0 <SystemClock_Config+0xdc>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	4a28      	ldr	r2, [pc, #160]	@ (8000ea0 <SystemClock_Config+0xdc>)
 8000dfe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e02:	6053      	str	r3, [r2, #4]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e04:	2300      	movs	r3, #0
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	4b25      	ldr	r3, [pc, #148]	@ (8000ea0 <SystemClock_Config+0xdc>)
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0c:	4a24      	ldr	r2, [pc, #144]	@ (8000ea0 <SystemClock_Config+0xdc>)
 8000e0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e12:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e14:	4b22      	ldr	r3, [pc, #136]	@ (8000ea0 <SystemClock_Config+0xdc>)
 8000e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e20:	2300      	movs	r3, #0
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea4 <SystemClock_Config+0xe0>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a1e      	ldr	r2, [pc, #120]	@ (8000ea4 <SystemClock_Config+0xe0>)
 8000e2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea4 <SystemClock_Config+0xe0>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e40:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e44:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e46:	2301      	movs	r3, #1
 8000e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e4a:	2310      	movs	r3, #16
 8000e4c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e52:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e58:	f107 0320 	add.w	r3, r7, #32
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f002 fe63 	bl	8003b28 <HAL_RCC_OscConfig>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000e68:	f000 f81e 	bl	8000ea8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e6c:	230f      	movs	r3, #15
 8000e6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e70:	2300      	movs	r3, #0
 8000e72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e80:	f107 030c 	add.w	r3, r7, #12
 8000e84:	2100      	movs	r1, #0
 8000e86:	4618      	mov	r0, r3
 8000e88:	f003 f8c6 	bl	8004018 <HAL_RCC_ClockConfig>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000e92:	f000 f809 	bl	8000ea8 <Error_Handler>
  }
}
 8000e96:	bf00      	nop
 8000e98:	3750      	adds	r7, #80	@ 0x50
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40007000 	.word	0x40007000

08000ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eac:	b672      	cpsid	i
}
 8000eae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <Error_Handler+0x8>

08000eb4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000ec8:	2300      	movs	r3, #0
 8000eca:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ecc:	4b25      	ldr	r3, [pc, #148]	@ (8000f64 <MX_RTC_Init+0xb0>)
 8000ece:	4a26      	ldr	r2, [pc, #152]	@ (8000f68 <MX_RTC_Init+0xb4>)
 8000ed0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000ed2:	4b24      	ldr	r3, [pc, #144]	@ (8000f64 <MX_RTC_Init+0xb0>)
 8000ed4:	2240      	movs	r2, #64	@ 0x40
 8000ed6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 124;
 8000ed8:	4b22      	ldr	r3, [pc, #136]	@ (8000f64 <MX_RTC_Init+0xb0>)
 8000eda:	227c      	movs	r2, #124	@ 0x7c
 8000edc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 7999;
 8000ede:	4b21      	ldr	r3, [pc, #132]	@ (8000f64 <MX_RTC_Init+0xb0>)
 8000ee0:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000ee4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ee6:	4b1f      	ldr	r3, [pc, #124]	@ (8000f64 <MX_RTC_Init+0xb0>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000eec:	4b1d      	ldr	r3, [pc, #116]	@ (8000f64 <MX_RTC_Init+0xb0>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f64 <MX_RTC_Init+0xb0>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ef8:	481a      	ldr	r0, [pc, #104]	@ (8000f64 <MX_RTC_Init+0xb0>)
 8000efa:	f003 fbef 	bl	80046dc <HAL_RTC_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000f04:	f7ff ffd0 	bl	8000ea8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	71bb      	strb	r3, [r7, #6]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000f14:	2300      	movs	r3, #0
 8000f16:	71fb      	strb	r3, [r7, #7]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	2201      	movs	r2, #1
 8000f24:	4619      	mov	r1, r3
 8000f26:	480f      	ldr	r0, [pc, #60]	@ (8000f64 <MX_RTC_Init+0xb0>)
 8000f28:	f003 fc5b 	bl	80047e2 <HAL_RTC_SetTime>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000f32:	f7ff ffb9 	bl	8000ea8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000f36:	2301      	movs	r3, #1
 8000f38:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000f46:	463b      	mov	r3, r7
 8000f48:	2201      	movs	r2, #1
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4805      	ldr	r0, [pc, #20]	@ (8000f64 <MX_RTC_Init+0xb0>)
 8000f4e:	f003 fd40 	bl	80049d2 <HAL_RTC_SetDate>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000f58:	f7ff ffa6 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f5c:	bf00      	nop
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	2000026c 	.word	0x2000026c
 8000f68:	40002800 	.word	0x40002800

08000f6c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f74:	f107 0308 	add.w	r3, r7, #8
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a0c      	ldr	r2, [pc, #48]	@ (8000fb8 <HAL_RTC_MspInit+0x4c>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d110      	bne.n	8000fae <HAL_RTC_MspInit+0x42>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV8;
 8000f90:	4b0a      	ldr	r3, [pc, #40]	@ (8000fbc <HAL_RTC_MspInit+0x50>)
 8000f92:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f94:	f107 0308 	add.w	r3, r7, #8
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f003 fa5d 	bl	8004458 <HAL_RCCEx_PeriphCLKConfig>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <HAL_RTC_MspInit+0x3c>
    {
      Error_Handler();
 8000fa4:	f7ff ff80 	bl	8000ea8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000fa8:	4b05      	ldr	r3, [pc, #20]	@ (8000fc0 <HAL_RTC_MspInit+0x54>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000fae:	bf00      	nop
 8000fb0:	3718      	adds	r7, #24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40002800 	.word	0x40002800
 8000fbc:	00080300 	.word	0x00080300
 8000fc0:	42470e3c 	.word	0x42470e3c

08000fc4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000fc8:	4b17      	ldr	r3, [pc, #92]	@ (8001028 <MX_SPI1_Init+0x64>)
 8000fca:	4a18      	ldr	r2, [pc, #96]	@ (800102c <MX_SPI1_Init+0x68>)
 8000fcc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fce:	4b16      	ldr	r3, [pc, #88]	@ (8001028 <MX_SPI1_Init+0x64>)
 8000fd0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000fd4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fd6:	4b14      	ldr	r3, [pc, #80]	@ (8001028 <MX_SPI1_Init+0x64>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fdc:	4b12      	ldr	r3, [pc, #72]	@ (8001028 <MX_SPI1_Init+0x64>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fe2:	4b11      	ldr	r3, [pc, #68]	@ (8001028 <MX_SPI1_Init+0x64>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8001028 <MX_SPI1_Init+0x64>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	@ (8001028 <MX_SPI1_Init+0x64>)
 8000ff0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ff4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8001028 <MX_SPI1_Init+0x64>)
 8000ff8:	2230      	movs	r2, #48	@ 0x30
 8000ffa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8001028 <MX_SPI1_Init+0x64>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001002:	4b09      	ldr	r3, [pc, #36]	@ (8001028 <MX_SPI1_Init+0x64>)
 8001004:	2200      	movs	r2, #0
 8001006:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001008:	4b07      	ldr	r3, [pc, #28]	@ (8001028 <MX_SPI1_Init+0x64>)
 800100a:	2200      	movs	r2, #0
 800100c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800100e:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <MX_SPI1_Init+0x64>)
 8001010:	220a      	movs	r2, #10
 8001012:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001014:	4804      	ldr	r0, [pc, #16]	@ (8001028 <MX_SPI1_Init+0x64>)
 8001016:	f003 fe6d 	bl	8004cf4 <HAL_SPI_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001020:	f7ff ff42 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}
 8001028:	2000028c 	.word	0x2000028c
 800102c:	40013000 	.word	0x40013000

08001030 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	@ 0x28
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a19      	ldr	r2, [pc, #100]	@ (80010b4 <HAL_SPI_MspInit+0x84>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d12b      	bne.n	80010aa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
 8001056:	4b18      	ldr	r3, [pc, #96]	@ (80010b8 <HAL_SPI_MspInit+0x88>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800105a:	4a17      	ldr	r2, [pc, #92]	@ (80010b8 <HAL_SPI_MspInit+0x88>)
 800105c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001060:	6453      	str	r3, [r2, #68]	@ 0x44
 8001062:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <HAL_SPI_MspInit+0x88>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001066:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <HAL_SPI_MspInit+0x88>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	4a10      	ldr	r2, [pc, #64]	@ (80010b8 <HAL_SPI_MspInit+0x88>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	6313      	str	r3, [r2, #48]	@ 0x30
 800107e:	4b0e      	ldr	r3, [pc, #56]	@ (80010b8 <HAL_SPI_MspInit+0x88>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800108a:	23e0      	movs	r3, #224	@ 0xe0
 800108c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108e:	2302      	movs	r3, #2
 8001090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001096:	2303      	movs	r3, #3
 8001098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800109a:	2305      	movs	r3, #5
 800109c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	4619      	mov	r1, r3
 80010a4:	4805      	ldr	r0, [pc, #20]	@ (80010bc <HAL_SPI_MspInit+0x8c>)
 80010a6:	f000 feb3 	bl	8001e10 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80010aa:	bf00      	nop
 80010ac:	3728      	adds	r7, #40	@ 0x28
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40013000 	.word	0x40013000
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40020000 	.word	0x40020000

080010c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	4b10      	ldr	r3, [pc, #64]	@ (800110c <HAL_MspInit+0x4c>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ce:	4a0f      	ldr	r2, [pc, #60]	@ (800110c <HAL_MspInit+0x4c>)
 80010d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010d6:	4b0d      	ldr	r3, [pc, #52]	@ (800110c <HAL_MspInit+0x4c>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	603b      	str	r3, [r7, #0]
 80010e6:	4b09      	ldr	r3, [pc, #36]	@ (800110c <HAL_MspInit+0x4c>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ea:	4a08      	ldr	r2, [pc, #32]	@ (800110c <HAL_MspInit+0x4c>)
 80010ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010f2:	4b06      	ldr	r3, [pc, #24]	@ (800110c <HAL_MspInit+0x4c>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010fa:	603b      	str	r3, [r7, #0]
 80010fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	40023800 	.word	0x40023800

08001110 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <NMI_Handler+0x4>

08001118 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111c:	bf00      	nop
 800111e:	e7fd      	b.n	800111c <HardFault_Handler+0x4>

08001120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001124:	bf00      	nop
 8001126:	e7fd      	b.n	8001124 <MemManage_Handler+0x4>

08001128 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <BusFault_Handler+0x4>

08001130 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <UsageFault_Handler+0x4>

08001138 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001166:	f000 f99f 	bl	80014a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}

0800116e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TIME_TRAVEL_SIM_Pin);
 8001172:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001176:	f001 f819 	bl	80021ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001188:	4a14      	ldr	r2, [pc, #80]	@ (80011dc <_sbrk+0x5c>)
 800118a:	4b15      	ldr	r3, [pc, #84]	@ (80011e0 <_sbrk+0x60>)
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001194:	4b13      	ldr	r3, [pc, #76]	@ (80011e4 <_sbrk+0x64>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d102      	bne.n	80011a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800119c:	4b11      	ldr	r3, [pc, #68]	@ (80011e4 <_sbrk+0x64>)
 800119e:	4a12      	ldr	r2, [pc, #72]	@ (80011e8 <_sbrk+0x68>)
 80011a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011a2:	4b10      	ldr	r3, [pc, #64]	@ (80011e4 <_sbrk+0x64>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d207      	bcs.n	80011c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011b0:	f005 fd54 	bl	8006c5c <__errno>
 80011b4:	4603      	mov	r3, r0
 80011b6:	220c      	movs	r2, #12
 80011b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ba:	f04f 33ff 	mov.w	r3, #4294967295
 80011be:	e009      	b.n	80011d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011c0:	4b08      	ldr	r3, [pc, #32]	@ (80011e4 <_sbrk+0x64>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011c6:	4b07      	ldr	r3, [pc, #28]	@ (80011e4 <_sbrk+0x64>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	4a05      	ldr	r2, [pc, #20]	@ (80011e4 <_sbrk+0x64>)
 80011d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011d2:	68fb      	ldr	r3, [r7, #12]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20020000 	.word	0x20020000
 80011e0:	00000400 	.word	0x00000400
 80011e4:	200002e4 	.word	0x200002e4
 80011e8:	200004f8 	.word	0x200004f8

080011ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011f0:	4b06      	ldr	r3, [pc, #24]	@ (800120c <SystemInit+0x20>)
 80011f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011f6:	4a05      	ldr	r2, [pc, #20]	@ (800120c <SystemInit+0x20>)
 80011f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001214:	4b11      	ldr	r3, [pc, #68]	@ (800125c <MX_USART1_UART_Init+0x4c>)
 8001216:	4a12      	ldr	r2, [pc, #72]	@ (8001260 <MX_USART1_UART_Init+0x50>)
 8001218:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800121a:	4b10      	ldr	r3, [pc, #64]	@ (800125c <MX_USART1_UART_Init+0x4c>)
 800121c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001220:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001222:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <MX_USART1_UART_Init+0x4c>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001228:	4b0c      	ldr	r3, [pc, #48]	@ (800125c <MX_USART1_UART_Init+0x4c>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800122e:	4b0b      	ldr	r3, [pc, #44]	@ (800125c <MX_USART1_UART_Init+0x4c>)
 8001230:	2200      	movs	r2, #0
 8001232:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001234:	4b09      	ldr	r3, [pc, #36]	@ (800125c <MX_USART1_UART_Init+0x4c>)
 8001236:	220c      	movs	r2, #12
 8001238:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123a:	4b08      	ldr	r3, [pc, #32]	@ (800125c <MX_USART1_UART_Init+0x4c>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001240:	4b06      	ldr	r3, [pc, #24]	@ (800125c <MX_USART1_UART_Init+0x4c>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001246:	4805      	ldr	r0, [pc, #20]	@ (800125c <MX_USART1_UART_Init+0x4c>)
 8001248:	f003 fddd 	bl	8004e06 <HAL_UART_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001252:	f7ff fe29 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200002e8 	.word	0x200002e8
 8001260:	40011000 	.word	0x40011000

08001264 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001268:	4b11      	ldr	r3, [pc, #68]	@ (80012b0 <MX_USART2_UART_Init+0x4c>)
 800126a:	4a12      	ldr	r2, [pc, #72]	@ (80012b4 <MX_USART2_UART_Init+0x50>)
 800126c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800126e:	4b10      	ldr	r3, [pc, #64]	@ (80012b0 <MX_USART2_UART_Init+0x4c>)
 8001270:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001274:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001276:	4b0e      	ldr	r3, [pc, #56]	@ (80012b0 <MX_USART2_UART_Init+0x4c>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800127c:	4b0c      	ldr	r3, [pc, #48]	@ (80012b0 <MX_USART2_UART_Init+0x4c>)
 800127e:	2200      	movs	r2, #0
 8001280:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001282:	4b0b      	ldr	r3, [pc, #44]	@ (80012b0 <MX_USART2_UART_Init+0x4c>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001288:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <MX_USART2_UART_Init+0x4c>)
 800128a:	220c      	movs	r2, #12
 800128c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800128e:	4b08      	ldr	r3, [pc, #32]	@ (80012b0 <MX_USART2_UART_Init+0x4c>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001294:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <MX_USART2_UART_Init+0x4c>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800129a:	4805      	ldr	r0, [pc, #20]	@ (80012b0 <MX_USART2_UART_Init+0x4c>)
 800129c:	f003 fdb3 	bl	8004e06 <HAL_UART_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012a6:	f7ff fdff 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000330 	.word	0x20000330
 80012b4:	40004400 	.word	0x40004400

080012b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08c      	sub	sp, #48	@ 0x30
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 031c 	add.w	r3, r7, #28
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a32      	ldr	r2, [pc, #200]	@ (80013a0 <HAL_UART_MspInit+0xe8>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d12d      	bne.n	8001336 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	61bb      	str	r3, [r7, #24]
 80012de:	4b31      	ldr	r3, [pc, #196]	@ (80013a4 <HAL_UART_MspInit+0xec>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e2:	4a30      	ldr	r2, [pc, #192]	@ (80013a4 <HAL_UART_MspInit+0xec>)
 80012e4:	f043 0310 	orr.w	r3, r3, #16
 80012e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ea:	4b2e      	ldr	r3, [pc, #184]	@ (80013a4 <HAL_UART_MspInit+0xec>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ee:	f003 0310 	and.w	r3, r3, #16
 80012f2:	61bb      	str	r3, [r7, #24]
 80012f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	4b2a      	ldr	r3, [pc, #168]	@ (80013a4 <HAL_UART_MspInit+0xec>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	4a29      	ldr	r2, [pc, #164]	@ (80013a4 <HAL_UART_MspInit+0xec>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6313      	str	r3, [r2, #48]	@ 0x30
 8001306:	4b27      	ldr	r3, [pc, #156]	@ (80013a4 <HAL_UART_MspInit+0xec>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001312:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001318:	2302      	movs	r3, #2
 800131a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001320:	2303      	movs	r3, #3
 8001322:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001324:	2307      	movs	r3, #7
 8001326:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001328:	f107 031c 	add.w	r3, r7, #28
 800132c:	4619      	mov	r1, r3
 800132e:	481e      	ldr	r0, [pc, #120]	@ (80013a8 <HAL_UART_MspInit+0xf0>)
 8001330:	f000 fd6e 	bl	8001e10 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001334:	e030      	b.n	8001398 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a1c      	ldr	r2, [pc, #112]	@ (80013ac <HAL_UART_MspInit+0xf4>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d12b      	bne.n	8001398 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001340:	2300      	movs	r3, #0
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	4b17      	ldr	r3, [pc, #92]	@ (80013a4 <HAL_UART_MspInit+0xec>)
 8001346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001348:	4a16      	ldr	r2, [pc, #88]	@ (80013a4 <HAL_UART_MspInit+0xec>)
 800134a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800134e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001350:	4b14      	ldr	r3, [pc, #80]	@ (80013a4 <HAL_UART_MspInit+0xec>)
 8001352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001354:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135c:	2300      	movs	r3, #0
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	4b10      	ldr	r3, [pc, #64]	@ (80013a4 <HAL_UART_MspInit+0xec>)
 8001362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001364:	4a0f      	ldr	r2, [pc, #60]	@ (80013a4 <HAL_UART_MspInit+0xec>)
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	6313      	str	r3, [r2, #48]	@ 0x30
 800136c:	4b0d      	ldr	r3, [pc, #52]	@ (80013a4 <HAL_UART_MspInit+0xec>)
 800136e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001378:	230c      	movs	r3, #12
 800137a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	2302      	movs	r3, #2
 800137e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001384:	2303      	movs	r3, #3
 8001386:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001388:	2307      	movs	r3, #7
 800138a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138c:	f107 031c 	add.w	r3, r7, #28
 8001390:	4619      	mov	r1, r3
 8001392:	4805      	ldr	r0, [pc, #20]	@ (80013a8 <HAL_UART_MspInit+0xf0>)
 8001394:	f000 fd3c 	bl	8001e10 <HAL_GPIO_Init>
}
 8001398:	bf00      	nop
 800139a:	3730      	adds	r7, #48	@ 0x30
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40011000 	.word	0x40011000
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40020000 	.word	0x40020000
 80013ac:	40004400 	.word	0x40004400

080013b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013b4:	480d      	ldr	r0, [pc, #52]	@ (80013ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013b6:	490e      	ldr	r1, [pc, #56]	@ (80013f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013b8:	4a0e      	ldr	r2, [pc, #56]	@ (80013f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013bc:	e002      	b.n	80013c4 <LoopCopyDataInit>

080013be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013c2:	3304      	adds	r3, #4

080013c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c8:	d3f9      	bcc.n	80013be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ca:	4a0b      	ldr	r2, [pc, #44]	@ (80013f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013cc:	4c0b      	ldr	r4, [pc, #44]	@ (80013fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80013ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d0:	e001      	b.n	80013d6 <LoopFillZerobss>

080013d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d4:	3204      	adds	r2, #4

080013d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d8:	d3fb      	bcc.n	80013d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013da:	f7ff ff07 	bl	80011ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013de:	f005 fc43 	bl	8006c68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013e2:	f7ff fcbb 	bl	8000d5c <main>
  bx  lr    
 80013e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f0:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80013f4:	08007524 	.word	0x08007524
  ldr r2, =_sbss
 80013f8:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 80013fc:	200004f4 	.word	0x200004f4

08001400 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001400:	e7fe      	b.n	8001400 <ADC_IRQHandler>
	...

08001404 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001408:	4b0e      	ldr	r3, [pc, #56]	@ (8001444 <HAL_Init+0x40>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a0d      	ldr	r2, [pc, #52]	@ (8001444 <HAL_Init+0x40>)
 800140e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001412:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001414:	4b0b      	ldr	r3, [pc, #44]	@ (8001444 <HAL_Init+0x40>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a0a      	ldr	r2, [pc, #40]	@ (8001444 <HAL_Init+0x40>)
 800141a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800141e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001420:	4b08      	ldr	r3, [pc, #32]	@ (8001444 <HAL_Init+0x40>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a07      	ldr	r2, [pc, #28]	@ (8001444 <HAL_Init+0x40>)
 8001426:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800142a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800142c:	2003      	movs	r0, #3
 800142e:	f000 fcad 	bl	8001d8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001432:	200f      	movs	r0, #15
 8001434:	f000 f808 	bl	8001448 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001438:	f7ff fe42 	bl	80010c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40023c00 	.word	0x40023c00

08001448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001450:	4b12      	ldr	r3, [pc, #72]	@ (800149c <HAL_InitTick+0x54>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b12      	ldr	r3, [pc, #72]	@ (80014a0 <HAL_InitTick+0x58>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	4619      	mov	r1, r3
 800145a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800145e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001462:	fbb2 f3f3 	udiv	r3, r2, r3
 8001466:	4618      	mov	r0, r3
 8001468:	f000 fcc5 	bl	8001df6 <HAL_SYSTICK_Config>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e00e      	b.n	8001494 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2b0f      	cmp	r3, #15
 800147a:	d80a      	bhi.n	8001492 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800147c:	2200      	movs	r2, #0
 800147e:	6879      	ldr	r1, [r7, #4]
 8001480:	f04f 30ff 	mov.w	r0, #4294967295
 8001484:	f000 fc8d 	bl	8001da2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001488:	4a06      	ldr	r2, [pc, #24]	@ (80014a4 <HAL_InitTick+0x5c>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800148e:	2300      	movs	r3, #0
 8001490:	e000      	b.n	8001494 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000000 	.word	0x20000000
 80014a0:	20000008 	.word	0x20000008
 80014a4:	20000004 	.word	0x20000004

080014a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014ac:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <HAL_IncTick+0x20>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <HAL_IncTick+0x24>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4413      	add	r3, r2
 80014b8:	4a04      	ldr	r2, [pc, #16]	@ (80014cc <HAL_IncTick+0x24>)
 80014ba:	6013      	str	r3, [r2, #0]
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	20000008 	.word	0x20000008
 80014cc:	20000378 	.word	0x20000378

080014d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return uwTick;
 80014d4:	4b03      	ldr	r3, [pc, #12]	@ (80014e4 <HAL_GetTick+0x14>)
 80014d6:	681b      	ldr	r3, [r3, #0]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	20000378 	.word	0x20000378

080014e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f0:	f7ff ffee 	bl	80014d0 <HAL_GetTick>
 80014f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001500:	d005      	beq.n	800150e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001502:	4b0a      	ldr	r3, [pc, #40]	@ (800152c <HAL_Delay+0x44>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	461a      	mov	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4413      	add	r3, r2
 800150c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800150e:	bf00      	nop
 8001510:	f7ff ffde 	bl	80014d0 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	429a      	cmp	r2, r3
 800151e:	d8f7      	bhi.n	8001510 <HAL_Delay+0x28>
  {
  }
}
 8001520:	bf00      	nop
 8001522:	bf00      	nop
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000008 	.word	0x20000008

08001530 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001538:	2300      	movs	r3, #0
 800153a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d101      	bne.n	8001546 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e033      	b.n	80015ae <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154a:	2b00      	cmp	r3, #0
 800154c:	d109      	bne.n	8001562 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff f858 	bl	8000604 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001566:	f003 0310 	and.w	r3, r3, #16
 800156a:	2b00      	cmp	r3, #0
 800156c:	d118      	bne.n	80015a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001572:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001576:	f023 0302 	bic.w	r3, r3, #2
 800157a:	f043 0202 	orr.w	r2, r3, #2
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f000 f93a 	bl	80017fc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001592:	f023 0303 	bic.w	r3, r3, #3
 8001596:	f043 0201 	orr.w	r2, r3, #1
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	641a      	str	r2, [r3, #64]	@ 0x40
 800159e:	e001      	b.n	80015a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015c2:	2300      	movs	r3, #0
 80015c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d101      	bne.n	80015d4 <HAL_ADC_ConfigChannel+0x1c>
 80015d0:	2302      	movs	r3, #2
 80015d2:	e105      	b.n	80017e0 <HAL_ADC_ConfigChannel+0x228>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b09      	cmp	r3, #9
 80015e2:	d925      	bls.n	8001630 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68d9      	ldr	r1, [r3, #12]
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	461a      	mov	r2, r3
 80015f2:	4613      	mov	r3, r2
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	4413      	add	r3, r2
 80015f8:	3b1e      	subs	r3, #30
 80015fa:	2207      	movs	r2, #7
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	43da      	mvns	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	400a      	ands	r2, r1
 8001608:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68d9      	ldr	r1, [r3, #12]
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	b29b      	uxth	r3, r3
 800161a:	4618      	mov	r0, r3
 800161c:	4603      	mov	r3, r0
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	4403      	add	r3, r0
 8001622:	3b1e      	subs	r3, #30
 8001624:	409a      	lsls	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	430a      	orrs	r2, r1
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	e022      	b.n	8001676 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6919      	ldr	r1, [r3, #16]
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	b29b      	uxth	r3, r3
 800163c:	461a      	mov	r2, r3
 800163e:	4613      	mov	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4413      	add	r3, r2
 8001644:	2207      	movs	r2, #7
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43da      	mvns	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	400a      	ands	r2, r1
 8001652:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6919      	ldr	r1, [r3, #16]
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	689a      	ldr	r2, [r3, #8]
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	b29b      	uxth	r3, r3
 8001664:	4618      	mov	r0, r3
 8001666:	4603      	mov	r3, r0
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	4403      	add	r3, r0
 800166c:	409a      	lsls	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	430a      	orrs	r2, r1
 8001674:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b06      	cmp	r3, #6
 800167c:	d824      	bhi.n	80016c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	3b05      	subs	r3, #5
 8001690:	221f      	movs	r2, #31
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43da      	mvns	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	400a      	ands	r2, r1
 800169e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	4618      	mov	r0, r3
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	3b05      	subs	r3, #5
 80016ba:	fa00 f203 	lsl.w	r2, r0, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80016c6:	e04c      	b.n	8001762 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b0c      	cmp	r3, #12
 80016ce:	d824      	bhi.n	800171a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	4613      	mov	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	3b23      	subs	r3, #35	@ 0x23
 80016e2:	221f      	movs	r2, #31
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43da      	mvns	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	400a      	ands	r2, r1
 80016f0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	4618      	mov	r0, r3
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	3b23      	subs	r3, #35	@ 0x23
 800170c:	fa00 f203 	lsl.w	r2, r0, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	430a      	orrs	r2, r1
 8001716:	631a      	str	r2, [r3, #48]	@ 0x30
 8001718:	e023      	b.n	8001762 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	4613      	mov	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	3b41      	subs	r3, #65	@ 0x41
 800172c:	221f      	movs	r2, #31
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43da      	mvns	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	400a      	ands	r2, r1
 800173a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	b29b      	uxth	r3, r3
 8001748:	4618      	mov	r0, r3
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	3b41      	subs	r3, #65	@ 0x41
 8001756:	fa00 f203 	lsl.w	r2, r0, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	430a      	orrs	r2, r1
 8001760:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001762:	4b22      	ldr	r3, [pc, #136]	@ (80017ec <HAL_ADC_ConfigChannel+0x234>)
 8001764:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a21      	ldr	r2, [pc, #132]	@ (80017f0 <HAL_ADC_ConfigChannel+0x238>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d109      	bne.n	8001784 <HAL_ADC_ConfigChannel+0x1cc>
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b12      	cmp	r3, #18
 8001776:	d105      	bne.n	8001784 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a19      	ldr	r2, [pc, #100]	@ (80017f0 <HAL_ADC_ConfigChannel+0x238>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d123      	bne.n	80017d6 <HAL_ADC_ConfigChannel+0x21e>
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2b10      	cmp	r3, #16
 8001794:	d003      	beq.n	800179e <HAL_ADC_ConfigChannel+0x1e6>
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2b11      	cmp	r3, #17
 800179c:	d11b      	bne.n	80017d6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2b10      	cmp	r3, #16
 80017b0:	d111      	bne.n	80017d6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017b2:	4b10      	ldr	r3, [pc, #64]	@ (80017f4 <HAL_ADC_ConfigChannel+0x23c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a10      	ldr	r2, [pc, #64]	@ (80017f8 <HAL_ADC_ConfigChannel+0x240>)
 80017b8:	fba2 2303 	umull	r2, r3, r2, r3
 80017bc:	0c9a      	lsrs	r2, r3, #18
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80017c8:	e002      	b.n	80017d0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	3b01      	subs	r3, #1
 80017ce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f9      	bne.n	80017ca <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	40012300 	.word	0x40012300
 80017f0:	40012000 	.word	0x40012000
 80017f4:	20000000 	.word	0x20000000
 80017f8:	431bde83 	.word	0x431bde83

080017fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001804:	4b79      	ldr	r3, [pc, #484]	@ (80019ec <ADC_Init+0x1f0>)
 8001806:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	431a      	orrs	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001830:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6859      	ldr	r1, [r3, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	021a      	lsls	r2, r3, #8
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	430a      	orrs	r2, r1
 8001844:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001854:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6859      	ldr	r1, [r3, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	430a      	orrs	r2, r1
 8001866:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001876:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6899      	ldr	r1, [r3, #8]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68da      	ldr	r2, [r3, #12]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	430a      	orrs	r2, r1
 8001888:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800188e:	4a58      	ldr	r2, [pc, #352]	@ (80019f0 <ADC_Init+0x1f4>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d022      	beq.n	80018da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6899      	ldr	r1, [r3, #8]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	430a      	orrs	r2, r1
 80018b4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80018c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6899      	ldr	r1, [r3, #8]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	e00f      	b.n	80018fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80018f8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f022 0202 	bic.w	r2, r2, #2
 8001908:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6899      	ldr	r1, [r3, #8]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	7e1b      	ldrb	r3, [r3, #24]
 8001914:	005a      	lsls	r2, r3, #1
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	430a      	orrs	r2, r1
 800191c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d01b      	beq.n	8001960 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	685a      	ldr	r2, [r3, #4]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001936:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001946:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6859      	ldr	r1, [r3, #4]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001952:	3b01      	subs	r3, #1
 8001954:	035a      	lsls	r2, r3, #13
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	430a      	orrs	r2, r1
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	e007      	b.n	8001970 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800196e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800197e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	3b01      	subs	r3, #1
 800198c:	051a      	lsls	r2, r3, #20
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	430a      	orrs	r2, r1
 8001994:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80019a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6899      	ldr	r1, [r3, #8]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80019b2:	025a      	lsls	r2, r3, #9
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	430a      	orrs	r2, r1
 80019ba:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6899      	ldr	r1, [r3, #8]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	029a      	lsls	r2, r3, #10
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	609a      	str	r2, [r3, #8]
}
 80019e0:	bf00      	nop
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	40012300 	.word	0x40012300
 80019f0:	0f000001 	.word	0x0f000001

080019f4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e0ed      	b.n	8001be2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d102      	bne.n	8001a18 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7fe fe6e 	bl	80006f4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f042 0201 	orr.w	r2, r2, #1
 8001a26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a28:	f7ff fd52 	bl	80014d0 <HAL_GetTick>
 8001a2c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a2e:	e012      	b.n	8001a56 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a30:	f7ff fd4e 	bl	80014d0 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b0a      	cmp	r3, #10
 8001a3c:	d90b      	bls.n	8001a56 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a42:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2205      	movs	r2, #5
 8001a4e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e0c5      	b.n	8001be2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0e5      	beq.n	8001a30 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 0202 	bic.w	r2, r2, #2
 8001a72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a74:	f7ff fd2c 	bl	80014d0 <HAL_GetTick>
 8001a78:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a7a:	e012      	b.n	8001aa2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a7c:	f7ff fd28 	bl	80014d0 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b0a      	cmp	r3, #10
 8001a88:	d90b      	bls.n	8001aa2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a8e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2205      	movs	r2, #5
 8001a9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e09f      	b.n	8001be2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1e5      	bne.n	8001a7c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	7e1b      	ldrb	r3, [r3, #24]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d108      	bne.n	8001aca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	e007      	b.n	8001ada <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ad8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	7e5b      	ldrb	r3, [r3, #25]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d108      	bne.n	8001af4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	e007      	b.n	8001b04 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b02:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	7e9b      	ldrb	r3, [r3, #26]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d108      	bne.n	8001b1e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f042 0220 	orr.w	r2, r2, #32
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	e007      	b.n	8001b2e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 0220 	bic.w	r2, r2, #32
 8001b2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	7edb      	ldrb	r3, [r3, #27]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d108      	bne.n	8001b48 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0210 	bic.w	r2, r2, #16
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	e007      	b.n	8001b58 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f042 0210 	orr.w	r2, r2, #16
 8001b56:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	7f1b      	ldrb	r3, [r3, #28]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d108      	bne.n	8001b72 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f042 0208 	orr.w	r2, r2, #8
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	e007      	b.n	8001b82 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 0208 	bic.w	r2, r2, #8
 8001b80:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	7f5b      	ldrb	r3, [r3, #29]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d108      	bne.n	8001b9c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f042 0204 	orr.w	r2, r2, #4
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	e007      	b.n	8001bac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 0204 	bic.w	r2, r2, #4
 8001baa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	ea42 0103 	orr.w	r1, r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	1e5a      	subs	r2, r3, #1
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001c30 <__NVIC_SetPriorityGrouping+0x44>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c1e:	4a04      	ldr	r2, [pc, #16]	@ (8001c30 <__NVIC_SetPriorityGrouping+0x44>)
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	60d3      	str	r3, [r2, #12]
}
 8001c24:	bf00      	nop
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c38:	4b04      	ldr	r3, [pc, #16]	@ (8001c4c <__NVIC_GetPriorityGrouping+0x18>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	0a1b      	lsrs	r3, r3, #8
 8001c3e:	f003 0307 	and.w	r3, r3, #7
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	db0b      	blt.n	8001c7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	f003 021f 	and.w	r2, r3, #31
 8001c68:	4907      	ldr	r1, [pc, #28]	@ (8001c88 <__NVIC_EnableIRQ+0x38>)
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	095b      	lsrs	r3, r3, #5
 8001c70:	2001      	movs	r0, #1
 8001c72:	fa00 f202 	lsl.w	r2, r0, r2
 8001c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	e000e100 	.word	0xe000e100

08001c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	6039      	str	r1, [r7, #0]
 8001c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	db0a      	blt.n	8001cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	490c      	ldr	r1, [pc, #48]	@ (8001cd8 <__NVIC_SetPriority+0x4c>)
 8001ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001caa:	0112      	lsls	r2, r2, #4
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	440b      	add	r3, r1
 8001cb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb4:	e00a      	b.n	8001ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	4908      	ldr	r1, [pc, #32]	@ (8001cdc <__NVIC_SetPriority+0x50>)
 8001cbc:	79fb      	ldrb	r3, [r7, #7]
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	3b04      	subs	r3, #4
 8001cc4:	0112      	lsls	r2, r2, #4
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	440b      	add	r3, r1
 8001cca:	761a      	strb	r2, [r3, #24]
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000e100 	.word	0xe000e100
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b089      	sub	sp, #36	@ 0x24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f1c3 0307 	rsb	r3, r3, #7
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	bf28      	it	cs
 8001cfe:	2304      	movcs	r3, #4
 8001d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3304      	adds	r3, #4
 8001d06:	2b06      	cmp	r3, #6
 8001d08:	d902      	bls.n	8001d10 <NVIC_EncodePriority+0x30>
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3b03      	subs	r3, #3
 8001d0e:	e000      	b.n	8001d12 <NVIC_EncodePriority+0x32>
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d14:	f04f 32ff 	mov.w	r2, #4294967295
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43da      	mvns	r2, r3
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	401a      	ands	r2, r3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d28:	f04f 31ff 	mov.w	r1, #4294967295
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d32:	43d9      	mvns	r1, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d38:	4313      	orrs	r3, r2
         );
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3724      	adds	r7, #36	@ 0x24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
	...

08001d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d58:	d301      	bcc.n	8001d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e00f      	b.n	8001d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d88 <SysTick_Config+0x40>)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d66:	210f      	movs	r1, #15
 8001d68:	f04f 30ff 	mov.w	r0, #4294967295
 8001d6c:	f7ff ff8e 	bl	8001c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d70:	4b05      	ldr	r3, [pc, #20]	@ (8001d88 <SysTick_Config+0x40>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d76:	4b04      	ldr	r3, [pc, #16]	@ (8001d88 <SysTick_Config+0x40>)
 8001d78:	2207      	movs	r2, #7
 8001d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	e000e010 	.word	0xe000e010

08001d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff ff29 	bl	8001bec <__NVIC_SetPriorityGrouping>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b086      	sub	sp, #24
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4603      	mov	r3, r0
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
 8001dae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001db4:	f7ff ff3e 	bl	8001c34 <__NVIC_GetPriorityGrouping>
 8001db8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	68b9      	ldr	r1, [r7, #8]
 8001dbe:	6978      	ldr	r0, [r7, #20]
 8001dc0:	f7ff ff8e 	bl	8001ce0 <NVIC_EncodePriority>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dca:	4611      	mov	r1, r2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff5d 	bl	8001c8c <__NVIC_SetPriority>
}
 8001dd2:	bf00      	nop
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	4603      	mov	r3, r0
 8001de2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ff31 	bl	8001c50 <__NVIC_EnableIRQ>
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff ffa2 	bl	8001d48 <SysTick_Config>
 8001e04:	4603      	mov	r3, r0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
	...

08001e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b089      	sub	sp, #36	@ 0x24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e26:	2300      	movs	r3, #0
 8001e28:	61fb      	str	r3, [r7, #28]
 8001e2a:	e16b      	b.n	8002104 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	f040 815a 	bne.w	80020fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d005      	beq.n	8001e62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d130      	bne.n	8001ec4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	2203      	movs	r2, #3
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43db      	mvns	r3, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4013      	ands	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	68da      	ldr	r2, [r3, #12]
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e98:	2201      	movs	r2, #1
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	091b      	lsrs	r3, r3, #4
 8001eae:	f003 0201 	and.w	r2, r3, #1
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 0303 	and.w	r3, r3, #3
 8001ecc:	2b03      	cmp	r3, #3
 8001ece:	d017      	beq.n	8001f00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	2203      	movs	r2, #3
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 0303 	and.w	r3, r3, #3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d123      	bne.n	8001f54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	08da      	lsrs	r2, r3, #3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3208      	adds	r2, #8
 8001f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	220f      	movs	r2, #15
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	691a      	ldr	r2, [r3, #16]
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	08da      	lsrs	r2, r3, #3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3208      	adds	r2, #8
 8001f4e:	69b9      	ldr	r1, [r7, #24]
 8001f50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	2203      	movs	r2, #3
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 0203 	and.w	r2, r3, #3
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 80b4 	beq.w	80020fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	4b60      	ldr	r3, [pc, #384]	@ (800211c <HAL_GPIO_Init+0x30c>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f9e:	4a5f      	ldr	r2, [pc, #380]	@ (800211c <HAL_GPIO_Init+0x30c>)
 8001fa0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fa6:	4b5d      	ldr	r3, [pc, #372]	@ (800211c <HAL_GPIO_Init+0x30c>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001faa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fb2:	4a5b      	ldr	r2, [pc, #364]	@ (8002120 <HAL_GPIO_Init+0x310>)
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	089b      	lsrs	r3, r3, #2
 8001fb8:	3302      	adds	r3, #2
 8001fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	220f      	movs	r2, #15
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a52      	ldr	r2, [pc, #328]	@ (8002124 <HAL_GPIO_Init+0x314>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d02b      	beq.n	8002036 <HAL_GPIO_Init+0x226>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a51      	ldr	r2, [pc, #324]	@ (8002128 <HAL_GPIO_Init+0x318>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d025      	beq.n	8002032 <HAL_GPIO_Init+0x222>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a50      	ldr	r2, [pc, #320]	@ (800212c <HAL_GPIO_Init+0x31c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d01f      	beq.n	800202e <HAL_GPIO_Init+0x21e>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a4f      	ldr	r2, [pc, #316]	@ (8002130 <HAL_GPIO_Init+0x320>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d019      	beq.n	800202a <HAL_GPIO_Init+0x21a>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a4e      	ldr	r2, [pc, #312]	@ (8002134 <HAL_GPIO_Init+0x324>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d013      	beq.n	8002026 <HAL_GPIO_Init+0x216>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a4d      	ldr	r2, [pc, #308]	@ (8002138 <HAL_GPIO_Init+0x328>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d00d      	beq.n	8002022 <HAL_GPIO_Init+0x212>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a4c      	ldr	r2, [pc, #304]	@ (800213c <HAL_GPIO_Init+0x32c>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d007      	beq.n	800201e <HAL_GPIO_Init+0x20e>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a4b      	ldr	r2, [pc, #300]	@ (8002140 <HAL_GPIO_Init+0x330>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d101      	bne.n	800201a <HAL_GPIO_Init+0x20a>
 8002016:	2307      	movs	r3, #7
 8002018:	e00e      	b.n	8002038 <HAL_GPIO_Init+0x228>
 800201a:	2308      	movs	r3, #8
 800201c:	e00c      	b.n	8002038 <HAL_GPIO_Init+0x228>
 800201e:	2306      	movs	r3, #6
 8002020:	e00a      	b.n	8002038 <HAL_GPIO_Init+0x228>
 8002022:	2305      	movs	r3, #5
 8002024:	e008      	b.n	8002038 <HAL_GPIO_Init+0x228>
 8002026:	2304      	movs	r3, #4
 8002028:	e006      	b.n	8002038 <HAL_GPIO_Init+0x228>
 800202a:	2303      	movs	r3, #3
 800202c:	e004      	b.n	8002038 <HAL_GPIO_Init+0x228>
 800202e:	2302      	movs	r3, #2
 8002030:	e002      	b.n	8002038 <HAL_GPIO_Init+0x228>
 8002032:	2301      	movs	r3, #1
 8002034:	e000      	b.n	8002038 <HAL_GPIO_Init+0x228>
 8002036:	2300      	movs	r3, #0
 8002038:	69fa      	ldr	r2, [r7, #28]
 800203a:	f002 0203 	and.w	r2, r2, #3
 800203e:	0092      	lsls	r2, r2, #2
 8002040:	4093      	lsls	r3, r2
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002048:	4935      	ldr	r1, [pc, #212]	@ (8002120 <HAL_GPIO_Init+0x310>)
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	089b      	lsrs	r3, r3, #2
 800204e:	3302      	adds	r3, #2
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002056:	4b3b      	ldr	r3, [pc, #236]	@ (8002144 <HAL_GPIO_Init+0x334>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	43db      	mvns	r3, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4013      	ands	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800207a:	4a32      	ldr	r2, [pc, #200]	@ (8002144 <HAL_GPIO_Init+0x334>)
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002080:	4b30      	ldr	r3, [pc, #192]	@ (8002144 <HAL_GPIO_Init+0x334>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020a4:	4a27      	ldr	r2, [pc, #156]	@ (8002144 <HAL_GPIO_Init+0x334>)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020aa:	4b26      	ldr	r3, [pc, #152]	@ (8002144 <HAL_GPIO_Init+0x334>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	43db      	mvns	r3, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4013      	ands	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002144 <HAL_GPIO_Init+0x334>)
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002144 <HAL_GPIO_Init+0x334>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020f8:	4a12      	ldr	r2, [pc, #72]	@ (8002144 <HAL_GPIO_Init+0x334>)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	3301      	adds	r3, #1
 8002102:	61fb      	str	r3, [r7, #28]
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	2b0f      	cmp	r3, #15
 8002108:	f67f ae90 	bls.w	8001e2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800210c:	bf00      	nop
 800210e:	bf00      	nop
 8002110:	3724      	adds	r7, #36	@ 0x24
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	40023800 	.word	0x40023800
 8002120:	40013800 	.word	0x40013800
 8002124:	40020000 	.word	0x40020000
 8002128:	40020400 	.word	0x40020400
 800212c:	40020800 	.word	0x40020800
 8002130:	40020c00 	.word	0x40020c00
 8002134:	40021000 	.word	0x40021000
 8002138:	40021400 	.word	0x40021400
 800213c:	40021800 	.word	0x40021800
 8002140:	40021c00 	.word	0x40021c00
 8002144:	40013c00 	.word	0x40013c00

08002148 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691a      	ldr	r2, [r3, #16]
 8002158:	887b      	ldrh	r3, [r7, #2]
 800215a:	4013      	ands	r3, r2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d002      	beq.n	8002166 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002160:	2301      	movs	r3, #1
 8002162:	73fb      	strb	r3, [r7, #15]
 8002164:	e001      	b.n	800216a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002166:	2300      	movs	r3, #0
 8002168:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800216a:	7bfb      	ldrb	r3, [r7, #15]
}
 800216c:	4618      	mov	r0, r3
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	807b      	strh	r3, [r7, #2]
 8002184:	4613      	mov	r3, r2
 8002186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002188:	787b      	ldrb	r3, [r7, #1]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800218e:	887a      	ldrh	r2, [r7, #2]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002194:	e003      	b.n	800219e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002196:	887b      	ldrh	r3, [r7, #2]
 8002198:	041a      	lsls	r2, r3, #16
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	619a      	str	r2, [r3, #24]
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80021b6:	4b08      	ldr	r3, [pc, #32]	@ (80021d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021b8:	695a      	ldr	r2, [r3, #20]
 80021ba:	88fb      	ldrh	r3, [r7, #6]
 80021bc:	4013      	ands	r3, r2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d006      	beq.n	80021d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021c2:	4a05      	ldr	r2, [pc, #20]	@ (80021d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021c4:	88fb      	ldrh	r3, [r7, #6]
 80021c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021c8:	88fb      	ldrh	r3, [r7, #6]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f000 f806 	bl	80021dc <HAL_GPIO_EXTI_Callback>
  }
}
 80021d0:	bf00      	nop
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40013c00 	.word	0x40013c00

080021dc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
	...

080021f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e12b      	b.n	800245e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d106      	bne.n	8002220 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7fe fc2c 	bl	8000a78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2224      	movs	r2, #36	@ 0x24
 8002224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0201 	bic.w	r2, r2, #1
 8002236:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002246:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002256:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002258:	f002 f8d6 	bl	8004408 <HAL_RCC_GetPCLK1Freq>
 800225c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	4a81      	ldr	r2, [pc, #516]	@ (8002468 <HAL_I2C_Init+0x274>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d807      	bhi.n	8002278 <HAL_I2C_Init+0x84>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	4a80      	ldr	r2, [pc, #512]	@ (800246c <HAL_I2C_Init+0x278>)
 800226c:	4293      	cmp	r3, r2
 800226e:	bf94      	ite	ls
 8002270:	2301      	movls	r3, #1
 8002272:	2300      	movhi	r3, #0
 8002274:	b2db      	uxtb	r3, r3
 8002276:	e006      	b.n	8002286 <HAL_I2C_Init+0x92>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4a7d      	ldr	r2, [pc, #500]	@ (8002470 <HAL_I2C_Init+0x27c>)
 800227c:	4293      	cmp	r3, r2
 800227e:	bf94      	ite	ls
 8002280:	2301      	movls	r3, #1
 8002282:	2300      	movhi	r3, #0
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e0e7      	b.n	800245e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	4a78      	ldr	r2, [pc, #480]	@ (8002474 <HAL_I2C_Init+0x280>)
 8002292:	fba2 2303 	umull	r2, r3, r2, r3
 8002296:	0c9b      	lsrs	r3, r3, #18
 8002298:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68ba      	ldr	r2, [r7, #8]
 80022aa:	430a      	orrs	r2, r1
 80022ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	4a6a      	ldr	r2, [pc, #424]	@ (8002468 <HAL_I2C_Init+0x274>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d802      	bhi.n	80022c8 <HAL_I2C_Init+0xd4>
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	3301      	adds	r3, #1
 80022c6:	e009      	b.n	80022dc <HAL_I2C_Init+0xe8>
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80022ce:	fb02 f303 	mul.w	r3, r2, r3
 80022d2:	4a69      	ldr	r2, [pc, #420]	@ (8002478 <HAL_I2C_Init+0x284>)
 80022d4:	fba2 2303 	umull	r2, r3, r2, r3
 80022d8:	099b      	lsrs	r3, r3, #6
 80022da:	3301      	adds	r3, #1
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6812      	ldr	r2, [r2, #0]
 80022e0:	430b      	orrs	r3, r1
 80022e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80022ee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	495c      	ldr	r1, [pc, #368]	@ (8002468 <HAL_I2C_Init+0x274>)
 80022f8:	428b      	cmp	r3, r1
 80022fa:	d819      	bhi.n	8002330 <HAL_I2C_Init+0x13c>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	1e59      	subs	r1, r3, #1
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	fbb1 f3f3 	udiv	r3, r1, r3
 800230a:	1c59      	adds	r1, r3, #1
 800230c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002310:	400b      	ands	r3, r1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00a      	beq.n	800232c <HAL_I2C_Init+0x138>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	1e59      	subs	r1, r3, #1
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	fbb1 f3f3 	udiv	r3, r1, r3
 8002324:	3301      	adds	r3, #1
 8002326:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800232a:	e051      	b.n	80023d0 <HAL_I2C_Init+0x1dc>
 800232c:	2304      	movs	r3, #4
 800232e:	e04f      	b.n	80023d0 <HAL_I2C_Init+0x1dc>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d111      	bne.n	800235c <HAL_I2C_Init+0x168>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	1e58      	subs	r0, r3, #1
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6859      	ldr	r1, [r3, #4]
 8002340:	460b      	mov	r3, r1
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	440b      	add	r3, r1
 8002346:	fbb0 f3f3 	udiv	r3, r0, r3
 800234a:	3301      	adds	r3, #1
 800234c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002350:	2b00      	cmp	r3, #0
 8002352:	bf0c      	ite	eq
 8002354:	2301      	moveq	r3, #1
 8002356:	2300      	movne	r3, #0
 8002358:	b2db      	uxtb	r3, r3
 800235a:	e012      	b.n	8002382 <HAL_I2C_Init+0x18e>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	1e58      	subs	r0, r3, #1
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6859      	ldr	r1, [r3, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	0099      	lsls	r1, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002372:	3301      	adds	r3, #1
 8002374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002378:	2b00      	cmp	r3, #0
 800237a:	bf0c      	ite	eq
 800237c:	2301      	moveq	r3, #1
 800237e:	2300      	movne	r3, #0
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <HAL_I2C_Init+0x196>
 8002386:	2301      	movs	r3, #1
 8002388:	e022      	b.n	80023d0 <HAL_I2C_Init+0x1dc>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10e      	bne.n	80023b0 <HAL_I2C_Init+0x1bc>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	1e58      	subs	r0, r3, #1
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6859      	ldr	r1, [r3, #4]
 800239a:	460b      	mov	r3, r1
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	440b      	add	r3, r1
 80023a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80023a4:	3301      	adds	r3, #1
 80023a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023ae:	e00f      	b.n	80023d0 <HAL_I2C_Init+0x1dc>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	1e58      	subs	r0, r3, #1
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6859      	ldr	r1, [r3, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	0099      	lsls	r1, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023c6:	3301      	adds	r3, #1
 80023c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	6809      	ldr	r1, [r1, #0]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69da      	ldr	r2, [r3, #28]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	431a      	orrs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	430a      	orrs	r2, r1
 80023f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80023fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6911      	ldr	r1, [r2, #16]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	68d2      	ldr	r2, [r2, #12]
 800240a:	4311      	orrs	r1, r2
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6812      	ldr	r2, [r2, #0]
 8002410:	430b      	orrs	r3, r1
 8002412:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695a      	ldr	r2, [r3, #20]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	431a      	orrs	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 0201 	orr.w	r2, r2, #1
 800243e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2220      	movs	r2, #32
 800244a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	000186a0 	.word	0x000186a0
 800246c:	001e847f 	.word	0x001e847f
 8002470:	003d08ff 	.word	0x003d08ff
 8002474:	431bde83 	.word	0x431bde83
 8002478:	10624dd3 	.word	0x10624dd3

0800247c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b088      	sub	sp, #32
 8002480:	af02      	add	r7, sp, #8
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	607a      	str	r2, [r7, #4]
 8002486:	461a      	mov	r2, r3
 8002488:	460b      	mov	r3, r1
 800248a:	817b      	strh	r3, [r7, #10]
 800248c:	4613      	mov	r3, r2
 800248e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002490:	f7ff f81e 	bl	80014d0 <HAL_GetTick>
 8002494:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b20      	cmp	r3, #32
 80024a0:	f040 80e0 	bne.w	8002664 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	2319      	movs	r3, #25
 80024aa:	2201      	movs	r2, #1
 80024ac:	4970      	ldr	r1, [pc, #448]	@ (8002670 <HAL_I2C_Master_Transmit+0x1f4>)
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 fc64 	bl	8002d7c <I2C_WaitOnFlagUntilTimeout>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80024ba:	2302      	movs	r3, #2
 80024bc:	e0d3      	b.n	8002666 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d101      	bne.n	80024cc <HAL_I2C_Master_Transmit+0x50>
 80024c8:	2302      	movs	r3, #2
 80024ca:	e0cc      	b.n	8002666 <HAL_I2C_Master_Transmit+0x1ea>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d007      	beq.n	80024f2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f042 0201 	orr.w	r2, r2, #1
 80024f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002500:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2221      	movs	r2, #33	@ 0x21
 8002506:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2210      	movs	r2, #16
 800250e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	893a      	ldrh	r2, [r7, #8]
 8002522:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002528:	b29a      	uxth	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	4a50      	ldr	r2, [pc, #320]	@ (8002674 <HAL_I2C_Master_Transmit+0x1f8>)
 8002532:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002534:	8979      	ldrh	r1, [r7, #10]
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	6a3a      	ldr	r2, [r7, #32]
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 face 	bl	8002adc <I2C_MasterRequestWrite>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e08d      	b.n	8002666 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800254a:	2300      	movs	r3, #0
 800254c:	613b      	str	r3, [r7, #16]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002560:	e066      	b.n	8002630 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	6a39      	ldr	r1, [r7, #32]
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 fd22 	bl	8002fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00d      	beq.n	800258e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002576:	2b04      	cmp	r3, #4
 8002578:	d107      	bne.n	800258a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002588:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e06b      	b.n	8002666 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002592:	781a      	ldrb	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025b6:	3b01      	subs	r3, #1
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	695b      	ldr	r3, [r3, #20]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d11b      	bne.n	8002604 <HAL_I2C_Master_Transmit+0x188>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d017      	beq.n	8002604 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d8:	781a      	ldrb	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e4:	1c5a      	adds	r2, r3, #1
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	3b01      	subs	r3, #1
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025fc:	3b01      	subs	r3, #1
 80025fe:	b29a      	uxth	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	6a39      	ldr	r1, [r7, #32]
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 fd19 	bl	8003040 <I2C_WaitOnBTFFlagUntilTimeout>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00d      	beq.n	8002630 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002618:	2b04      	cmp	r3, #4
 800261a:	d107      	bne.n	800262c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800262a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e01a      	b.n	8002666 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002634:	2b00      	cmp	r3, #0
 8002636:	d194      	bne.n	8002562 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002646:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2220      	movs	r2, #32
 800264c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002660:	2300      	movs	r3, #0
 8002662:	e000      	b.n	8002666 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002664:	2302      	movs	r3, #2
  }
}
 8002666:	4618      	mov	r0, r3
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	00100002 	.word	0x00100002
 8002674:	ffff0000 	.word	0xffff0000

08002678 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08c      	sub	sp, #48	@ 0x30
 800267c:	af02      	add	r7, sp, #8
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	607a      	str	r2, [r7, #4]
 8002682:	461a      	mov	r2, r3
 8002684:	460b      	mov	r3, r1
 8002686:	817b      	strh	r3, [r7, #10]
 8002688:	4613      	mov	r3, r2
 800268a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800268c:	f7fe ff20 	bl	80014d0 <HAL_GetTick>
 8002690:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b20      	cmp	r3, #32
 800269c:	f040 8217 	bne.w	8002ace <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	2319      	movs	r3, #25
 80026a6:	2201      	movs	r2, #1
 80026a8:	497c      	ldr	r1, [pc, #496]	@ (800289c <HAL_I2C_Master_Receive+0x224>)
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 fb66 	bl	8002d7c <I2C_WaitOnFlagUntilTimeout>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80026b6:	2302      	movs	r3, #2
 80026b8:	e20a      	b.n	8002ad0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d101      	bne.n	80026c8 <HAL_I2C_Master_Receive+0x50>
 80026c4:	2302      	movs	r3, #2
 80026c6:	e203      	b.n	8002ad0 <HAL_I2C_Master_Receive+0x458>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d007      	beq.n	80026ee <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f042 0201 	orr.w	r2, r2, #1
 80026ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2222      	movs	r2, #34	@ 0x22
 8002702:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2210      	movs	r2, #16
 800270a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	893a      	ldrh	r2, [r7, #8]
 800271e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002724:	b29a      	uxth	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	4a5c      	ldr	r2, [pc, #368]	@ (80028a0 <HAL_I2C_Master_Receive+0x228>)
 800272e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002730:	8979      	ldrh	r1, [r7, #10]
 8002732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002734:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 fa52 	bl	8002be0 <I2C_MasterRequestRead>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e1c4      	b.n	8002ad0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800274a:	2b00      	cmp	r3, #0
 800274c:	d113      	bne.n	8002776 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800274e:	2300      	movs	r3, #0
 8002750:	623b      	str	r3, [r7, #32]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	623b      	str	r3, [r7, #32]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	623b      	str	r3, [r7, #32]
 8002762:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	e198      	b.n	8002aa8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800277a:	2b01      	cmp	r3, #1
 800277c:	d11b      	bne.n	80027b6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800278c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800278e:	2300      	movs	r3, #0
 8002790:	61fb      	str	r3, [r7, #28]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	61fb      	str	r3, [r7, #28]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	61fb      	str	r3, [r7, #28]
 80027a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	e178      	b.n	8002aa8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d11b      	bne.n	80027f6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027de:	2300      	movs	r3, #0
 80027e0:	61bb      	str	r3, [r7, #24]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	61bb      	str	r3, [r7, #24]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	61bb      	str	r3, [r7, #24]
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	e158      	b.n	8002aa8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002804:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002806:	2300      	movs	r3, #0
 8002808:	617b      	str	r3, [r7, #20]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	617b      	str	r3, [r7, #20]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800281c:	e144      	b.n	8002aa8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002822:	2b03      	cmp	r3, #3
 8002824:	f200 80f1 	bhi.w	8002a0a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800282c:	2b01      	cmp	r3, #1
 800282e:	d123      	bne.n	8002878 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002830:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002832:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f000 fc4b 	bl	80030d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e145      	b.n	8002ad0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	691a      	ldr	r2, [r3, #16]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002856:	1c5a      	adds	r2, r3, #1
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002860:	3b01      	subs	r3, #1
 8002862:	b29a      	uxth	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800286c:	b29b      	uxth	r3, r3
 800286e:	3b01      	subs	r3, #1
 8002870:	b29a      	uxth	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002876:	e117      	b.n	8002aa8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800287c:	2b02      	cmp	r3, #2
 800287e:	d14e      	bne.n	800291e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002882:	9300      	str	r3, [sp, #0]
 8002884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002886:	2200      	movs	r2, #0
 8002888:	4906      	ldr	r1, [pc, #24]	@ (80028a4 <HAL_I2C_Master_Receive+0x22c>)
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f000 fa76 	bl	8002d7c <I2C_WaitOnFlagUntilTimeout>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d008      	beq.n	80028a8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e11a      	b.n	8002ad0 <HAL_I2C_Master_Receive+0x458>
 800289a:	bf00      	nop
 800289c:	00100002 	.word	0x00100002
 80028a0:	ffff0000 	.word	0xffff0000
 80028a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	691a      	ldr	r2, [r3, #16]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ca:	1c5a      	adds	r2, r3, #1
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d4:	3b01      	subs	r3, #1
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	3b01      	subs	r3, #1
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	691a      	ldr	r2, [r3, #16]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002906:	3b01      	subs	r3, #1
 8002908:	b29a      	uxth	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002912:	b29b      	uxth	r3, r3
 8002914:	3b01      	subs	r3, #1
 8002916:	b29a      	uxth	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800291c:	e0c4      	b.n	8002aa8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800291e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002924:	2200      	movs	r2, #0
 8002926:	496c      	ldr	r1, [pc, #432]	@ (8002ad8 <HAL_I2C_Master_Receive+0x460>)
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f000 fa27 	bl	8002d7c <I2C_WaitOnFlagUntilTimeout>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e0cb      	b.n	8002ad0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002946:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	691a      	ldr	r2, [r3, #16]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295a:	1c5a      	adds	r2, r3, #1
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002964:	3b01      	subs	r3, #1
 8002966:	b29a      	uxth	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002970:	b29b      	uxth	r3, r3
 8002972:	3b01      	subs	r3, #1
 8002974:	b29a      	uxth	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800297a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002980:	2200      	movs	r2, #0
 8002982:	4955      	ldr	r1, [pc, #340]	@ (8002ad8 <HAL_I2C_Master_Receive+0x460>)
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 f9f9 	bl	8002d7c <I2C_WaitOnFlagUntilTimeout>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e09d      	b.n	8002ad0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	691a      	ldr	r2, [r3, #16]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b6:	1c5a      	adds	r2, r3, #1
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029c0:	3b01      	subs	r3, #1
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	3b01      	subs	r3, #1
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	691a      	ldr	r2, [r3, #16]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e8:	1c5a      	adds	r2, r3, #1
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f2:	3b01      	subs	r3, #1
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	3b01      	subs	r3, #1
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a08:	e04e      	b.n	8002aa8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a0c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 fb5e 	bl	80030d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e058      	b.n	8002ad0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	691a      	ldr	r2, [r3, #16]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a30:	1c5a      	adds	r2, r3, #1
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	f003 0304 	and.w	r3, r3, #4
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	d124      	bne.n	8002aa8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a62:	2b03      	cmp	r3, #3
 8002a64:	d107      	bne.n	8002a76 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a74:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	691a      	ldr	r2, [r3, #16]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a88:	1c5a      	adds	r2, r3, #1
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a92:	3b01      	subs	r3, #1
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f47f aeb6 	bne.w	800281e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	e000      	b.n	8002ad0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002ace:	2302      	movs	r3, #2
  }
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3728      	adds	r7, #40	@ 0x28
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	00010004 	.word	0x00010004

08002adc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b088      	sub	sp, #32
 8002ae0:	af02      	add	r7, sp, #8
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	607a      	str	r2, [r7, #4]
 8002ae6:	603b      	str	r3, [r7, #0]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d006      	beq.n	8002b06 <I2C_MasterRequestWrite+0x2a>
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d003      	beq.n	8002b06 <I2C_MasterRequestWrite+0x2a>
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b04:	d108      	bne.n	8002b18 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	e00b      	b.n	8002b30 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1c:	2b12      	cmp	r3, #18
 8002b1e:	d107      	bne.n	8002b30 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b2e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f000 f91d 	bl	8002d7c <I2C_WaitOnFlagUntilTimeout>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00d      	beq.n	8002b64 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b56:	d103      	bne.n	8002b60 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b5e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e035      	b.n	8002bd0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b6c:	d108      	bne.n	8002b80 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b6e:	897b      	ldrh	r3, [r7, #10]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	461a      	mov	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b7c:	611a      	str	r2, [r3, #16]
 8002b7e:	e01b      	b.n	8002bb8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b80:	897b      	ldrh	r3, [r7, #10]
 8002b82:	11db      	asrs	r3, r3, #7
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	f003 0306 	and.w	r3, r3, #6
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	f063 030f 	orn	r3, r3, #15
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	490e      	ldr	r1, [pc, #56]	@ (8002bd8 <I2C_MasterRequestWrite+0xfc>)
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f000 f966 	bl	8002e70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e010      	b.n	8002bd0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002bae:	897b      	ldrh	r3, [r7, #10]
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	4907      	ldr	r1, [pc, #28]	@ (8002bdc <I2C_MasterRequestWrite+0x100>)
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 f956 	bl	8002e70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e000      	b.n	8002bd0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3718      	adds	r7, #24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	00010008 	.word	0x00010008
 8002bdc:	00010002 	.word	0x00010002

08002be0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b088      	sub	sp, #32
 8002be4:	af02      	add	r7, sp, #8
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	607a      	str	r2, [r7, #4]
 8002bea:	603b      	str	r3, [r7, #0]
 8002bec:	460b      	mov	r3, r1
 8002bee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c04:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d006      	beq.n	8002c1a <I2C_MasterRequestRead+0x3a>
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d003      	beq.n	8002c1a <I2C_MasterRequestRead+0x3a>
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c18:	d108      	bne.n	8002c2c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	e00b      	b.n	8002c44 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c30:	2b11      	cmp	r3, #17
 8002c32:	d107      	bne.n	8002c44 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c42:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 f893 	bl	8002d7c <I2C_WaitOnFlagUntilTimeout>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00d      	beq.n	8002c78 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c6a:	d103      	bne.n	8002c74 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c72:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e079      	b.n	8002d6c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c80:	d108      	bne.n	8002c94 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c82:	897b      	ldrh	r3, [r7, #10]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	f043 0301 	orr.w	r3, r3, #1
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	611a      	str	r2, [r3, #16]
 8002c92:	e05f      	b.n	8002d54 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c94:	897b      	ldrh	r3, [r7, #10]
 8002c96:	11db      	asrs	r3, r3, #7
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	f003 0306 	and.w	r3, r3, #6
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	f063 030f 	orn	r3, r3, #15
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	4930      	ldr	r1, [pc, #192]	@ (8002d74 <I2C_MasterRequestRead+0x194>)
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 f8dc 	bl	8002e70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e054      	b.n	8002d6c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002cc2:	897b      	ldrh	r3, [r7, #10]
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	4929      	ldr	r1, [pc, #164]	@ (8002d78 <I2C_MasterRequestRead+0x198>)
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 f8cc 	bl	8002e70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e044      	b.n	8002d6c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	613b      	str	r3, [r7, #16]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	613b      	str	r3, [r7, #16]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d06:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f000 f831 	bl	8002d7c <I2C_WaitOnFlagUntilTimeout>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00d      	beq.n	8002d3c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d2e:	d103      	bne.n	8002d38 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d36:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e017      	b.n	8002d6c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002d3c:	897b      	ldrh	r3, [r7, #10]
 8002d3e:	11db      	asrs	r3, r3, #7
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	f003 0306 	and.w	r3, r3, #6
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	f063 030e 	orn	r3, r3, #14
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	4907      	ldr	r1, [pc, #28]	@ (8002d78 <I2C_MasterRequestRead+0x198>)
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 f888 	bl	8002e70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e000      	b.n	8002d6c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3718      	adds	r7, #24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	00010008 	.word	0x00010008
 8002d78:	00010002 	.word	0x00010002

08002d7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	603b      	str	r3, [r7, #0]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d8c:	e048      	b.n	8002e20 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d94:	d044      	beq.n	8002e20 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d96:	f7fe fb9b 	bl	80014d0 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d302      	bcc.n	8002dac <I2C_WaitOnFlagUntilTimeout+0x30>
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d139      	bne.n	8002e20 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	0c1b      	lsrs	r3, r3, #16
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d10d      	bne.n	8002dd2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	43da      	mvns	r2, r3
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	bf0c      	ite	eq
 8002dc8:	2301      	moveq	r3, #1
 8002dca:	2300      	movne	r3, #0
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	461a      	mov	r2, r3
 8002dd0:	e00c      	b.n	8002dec <I2C_WaitOnFlagUntilTimeout+0x70>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	43da      	mvns	r2, r3
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	bf0c      	ite	eq
 8002de4:	2301      	moveq	r3, #1
 8002de6:	2300      	movne	r3, #0
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	461a      	mov	r2, r3
 8002dec:	79fb      	ldrb	r3, [r7, #7]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d116      	bne.n	8002e20 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0c:	f043 0220 	orr.w	r2, r3, #32
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e023      	b.n	8002e68 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	0c1b      	lsrs	r3, r3, #16
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d10d      	bne.n	8002e46 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	43da      	mvns	r2, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	4013      	ands	r3, r2
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	bf0c      	ite	eq
 8002e3c:	2301      	moveq	r3, #1
 8002e3e:	2300      	movne	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	461a      	mov	r2, r3
 8002e44:	e00c      	b.n	8002e60 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	43da      	mvns	r2, r3
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	4013      	ands	r3, r2
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	bf0c      	ite	eq
 8002e58:	2301      	moveq	r3, #1
 8002e5a:	2300      	movne	r3, #0
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	461a      	mov	r2, r3
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d093      	beq.n	8002d8e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
 8002e7c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e7e:	e071      	b.n	8002f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e8e:	d123      	bne.n	8002ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e9e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ea8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec4:	f043 0204 	orr.w	r2, r3, #4
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e067      	b.n	8002fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ede:	d041      	beq.n	8002f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee0:	f7fe faf6 	bl	80014d0 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d302      	bcc.n	8002ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d136      	bne.n	8002f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	0c1b      	lsrs	r3, r3, #16
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d10c      	bne.n	8002f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	43da      	mvns	r2, r3
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	bf14      	ite	ne
 8002f12:	2301      	movne	r3, #1
 8002f14:	2300      	moveq	r3, #0
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	e00b      	b.n	8002f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	43da      	mvns	r2, r3
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	4013      	ands	r3, r2
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	bf14      	ite	ne
 8002f2c:	2301      	movne	r3, #1
 8002f2e:	2300      	moveq	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d016      	beq.n	8002f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f50:	f043 0220 	orr.w	r2, r3, #32
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e021      	b.n	8002fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	0c1b      	lsrs	r3, r3, #16
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d10c      	bne.n	8002f88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	43da      	mvns	r2, r3
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	bf14      	ite	ne
 8002f80:	2301      	movne	r3, #1
 8002f82:	2300      	moveq	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	e00b      	b.n	8002fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	43da      	mvns	r2, r3
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	4013      	ands	r3, r2
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	bf14      	ite	ne
 8002f9a:	2301      	movne	r3, #1
 8002f9c:	2300      	moveq	r3, #0
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f47f af6d 	bne.w	8002e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fbc:	e034      	b.n	8003028 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 f8e3 	bl	800318a <I2C_IsAcknowledgeFailed>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e034      	b.n	8003038 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd4:	d028      	beq.n	8003028 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd6:	f7fe fa7b 	bl	80014d0 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d302      	bcc.n	8002fec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d11d      	bne.n	8003028 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ff6:	2b80      	cmp	r3, #128	@ 0x80
 8002ff8:	d016      	beq.n	8003028 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2220      	movs	r2, #32
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003014:	f043 0220 	orr.w	r2, r3, #32
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e007      	b.n	8003038 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003032:	2b80      	cmp	r3, #128	@ 0x80
 8003034:	d1c3      	bne.n	8002fbe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800304c:	e034      	b.n	80030b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 f89b 	bl	800318a <I2C_IsAcknowledgeFailed>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e034      	b.n	80030c8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003064:	d028      	beq.n	80030b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003066:	f7fe fa33 	bl	80014d0 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	68ba      	ldr	r2, [r7, #8]
 8003072:	429a      	cmp	r2, r3
 8003074:	d302      	bcc.n	800307c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d11d      	bne.n	80030b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	f003 0304 	and.w	r3, r3, #4
 8003086:	2b04      	cmp	r3, #4
 8003088:	d016      	beq.n	80030b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2220      	movs	r2, #32
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a4:	f043 0220 	orr.w	r2, r3, #32
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e007      	b.n	80030c8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	f003 0304 	and.w	r3, r3, #4
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d1c3      	bne.n	800304e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030dc:	e049      	b.n	8003172 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	f003 0310 	and.w	r3, r3, #16
 80030e8:	2b10      	cmp	r3, #16
 80030ea:	d119      	bne.n	8003120 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f06f 0210 	mvn.w	r2, #16
 80030f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2220      	movs	r2, #32
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e030      	b.n	8003182 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003120:	f7fe f9d6 	bl	80014d0 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	429a      	cmp	r2, r3
 800312e:	d302      	bcc.n	8003136 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d11d      	bne.n	8003172 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003140:	2b40      	cmp	r3, #64	@ 0x40
 8003142:	d016      	beq.n	8003172 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2220      	movs	r2, #32
 800314e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315e:	f043 0220 	orr.w	r2, r3, #32
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e007      	b.n	8003182 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800317c:	2b40      	cmp	r3, #64	@ 0x40
 800317e:	d1ae      	bne.n	80030de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800319c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031a0:	d11b      	bne.n	80031da <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031aa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2220      	movs	r2, #32
 80031b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c6:	f043 0204 	orr.w	r2, r3, #4
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e000      	b.n	80031dc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b088      	sub	sp, #32
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e128      	b.n	800344c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d109      	bne.n	800321a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a90      	ldr	r2, [pc, #576]	@ (8003454 <HAL_I2S_Init+0x26c>)
 8003212:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7fd fd31 	bl	8000c7c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2202      	movs	r2, #2
 800321e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	69db      	ldr	r3, [r3, #28]
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	6812      	ldr	r2, [r2, #0]
 800322c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003230:	f023 030f 	bic.w	r3, r3, #15
 8003234:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2202      	movs	r2, #2
 800323c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	2b02      	cmp	r3, #2
 8003244:	d060      	beq.n	8003308 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d102      	bne.n	8003254 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800324e:	2310      	movs	r3, #16
 8003250:	617b      	str	r3, [r7, #20]
 8003252:	e001      	b.n	8003258 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003254:	2320      	movs	r3, #32
 8003256:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	2b20      	cmp	r3, #32
 800325e:	d802      	bhi.n	8003266 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003266:	2001      	movs	r0, #1
 8003268:	f001 f9d8 	bl	800461c <HAL_RCCEx_GetPeriphCLKFreq>
 800326c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003276:	d125      	bne.n	80032c4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d010      	beq.n	80032a2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	fbb2 f2f3 	udiv	r2, r2, r3
 800328a:	4613      	mov	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	461a      	mov	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	fbb2 f3f3 	udiv	r3, r2, r3
 800329c:	3305      	adds	r3, #5
 800329e:	613b      	str	r3, [r7, #16]
 80032a0:	e01f      	b.n	80032e2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80032ac:	4613      	mov	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	461a      	mov	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80032be:	3305      	adds	r3, #5
 80032c0:	613b      	str	r3, [r7, #16]
 80032c2:	e00e      	b.n	80032e2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80032cc:	4613      	mov	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	461a      	mov	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	fbb2 f3f3 	udiv	r3, r2, r3
 80032de:	3305      	adds	r3, #5
 80032e0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	4a5c      	ldr	r2, [pc, #368]	@ (8003458 <HAL_I2S_Init+0x270>)
 80032e6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ea:	08db      	lsrs	r3, r3, #3
 80032ec:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	085b      	lsrs	r3, r3, #1
 80032fe:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	021b      	lsls	r3, r3, #8
 8003304:	61bb      	str	r3, [r7, #24]
 8003306:	e003      	b.n	8003310 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003308:	2302      	movs	r3, #2
 800330a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800330c:	2300      	movs	r3, #0
 800330e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d902      	bls.n	800331c <HAL_I2S_Init+0x134>
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	2bff      	cmp	r3, #255	@ 0xff
 800331a:	d907      	bls.n	800332c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003320:	f043 0210 	orr.w	r2, r3, #16
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e08f      	b.n	800344c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	691a      	ldr	r2, [r3, #16]
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	ea42 0103 	orr.w	r1, r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	69fa      	ldr	r2, [r7, #28]
 800333c:	430a      	orrs	r2, r1
 800333e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800334a:	f023 030f 	bic.w	r3, r3, #15
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	6851      	ldr	r1, [r2, #4]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6892      	ldr	r2, [r2, #8]
 8003356:	4311      	orrs	r1, r2
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	68d2      	ldr	r2, [r2, #12]
 800335c:	4311      	orrs	r1, r2
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	6992      	ldr	r2, [r2, #24]
 8003362:	430a      	orrs	r2, r1
 8003364:	431a      	orrs	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800336e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d161      	bne.n	800343c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a38      	ldr	r2, [pc, #224]	@ (800345c <HAL_I2S_Init+0x274>)
 800337c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a37      	ldr	r2, [pc, #220]	@ (8003460 <HAL_I2S_Init+0x278>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d101      	bne.n	800338c <HAL_I2S_Init+0x1a4>
 8003388:	4b36      	ldr	r3, [pc, #216]	@ (8003464 <HAL_I2S_Init+0x27c>)
 800338a:	e001      	b.n	8003390 <HAL_I2S_Init+0x1a8>
 800338c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6812      	ldr	r2, [r2, #0]
 8003396:	4932      	ldr	r1, [pc, #200]	@ (8003460 <HAL_I2S_Init+0x278>)
 8003398:	428a      	cmp	r2, r1
 800339a:	d101      	bne.n	80033a0 <HAL_I2S_Init+0x1b8>
 800339c:	4a31      	ldr	r2, [pc, #196]	@ (8003464 <HAL_I2S_Init+0x27c>)
 800339e:	e001      	b.n	80033a4 <HAL_I2S_Init+0x1bc>
 80033a0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80033a4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80033a8:	f023 030f 	bic.w	r3, r3, #15
 80033ac:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a2b      	ldr	r2, [pc, #172]	@ (8003460 <HAL_I2S_Init+0x278>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d101      	bne.n	80033bc <HAL_I2S_Init+0x1d4>
 80033b8:	4b2a      	ldr	r3, [pc, #168]	@ (8003464 <HAL_I2S_Init+0x27c>)
 80033ba:	e001      	b.n	80033c0 <HAL_I2S_Init+0x1d8>
 80033bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80033c0:	2202      	movs	r2, #2
 80033c2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a25      	ldr	r2, [pc, #148]	@ (8003460 <HAL_I2S_Init+0x278>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d101      	bne.n	80033d2 <HAL_I2S_Init+0x1ea>
 80033ce:	4b25      	ldr	r3, [pc, #148]	@ (8003464 <HAL_I2S_Init+0x27c>)
 80033d0:	e001      	b.n	80033d6 <HAL_I2S_Init+0x1ee>
 80033d2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033e2:	d003      	beq.n	80033ec <HAL_I2S_Init+0x204>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d103      	bne.n	80033f4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80033ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80033f0:	613b      	str	r3, [r7, #16]
 80033f2:	e001      	b.n	80033f8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80033f4:	2300      	movs	r3, #0
 80033f6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003402:	4313      	orrs	r3, r2
 8003404:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800340c:	4313      	orrs	r3, r2
 800340e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003416:	4313      	orrs	r3, r2
 8003418:	b29a      	uxth	r2, r3
 800341a:	897b      	ldrh	r3, [r7, #10]
 800341c:	4313      	orrs	r3, r2
 800341e:	b29b      	uxth	r3, r3
 8003420:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003424:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a0d      	ldr	r2, [pc, #52]	@ (8003460 <HAL_I2S_Init+0x278>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d101      	bne.n	8003434 <HAL_I2S_Init+0x24c>
 8003430:	4b0c      	ldr	r3, [pc, #48]	@ (8003464 <HAL_I2S_Init+0x27c>)
 8003432:	e001      	b.n	8003438 <HAL_I2S_Init+0x250>
 8003434:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003438:	897a      	ldrh	r2, [r7, #10]
 800343a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3720      	adds	r7, #32
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	0800355f 	.word	0x0800355f
 8003458:	cccccccd 	.word	0xcccccccd
 800345c:	08003675 	.word	0x08003675
 8003460:	40003800 	.word	0x40003800
 8003464:	40003400 	.word	0x40003400

08003468 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b0:	881a      	ldrh	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034bc:	1c9a      	adds	r2, r3, #2
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10e      	bne.n	80034f8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80034e8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7ff ffb8 	bl	8003468 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80034f8:	bf00      	nop
 80034fa:	3708      	adds	r7, #8
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003512:	b292      	uxth	r2, r2
 8003514:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800351a:	1c9a      	adds	r2, r3, #2
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003524:	b29b      	uxth	r3, r3
 8003526:	3b01      	subs	r3, #1
 8003528:	b29a      	uxth	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003532:	b29b      	uxth	r3, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10e      	bne.n	8003556 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003546:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f7ff ff93 	bl	800347c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003556:	bf00      	nop
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b086      	sub	sp, #24
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b04      	cmp	r3, #4
 8003578:	d13a      	bne.n	80035f0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	2b01      	cmp	r3, #1
 8003582:	d109      	bne.n	8003598 <I2S_IRQHandler+0x3a>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800358e:	2b40      	cmp	r3, #64	@ 0x40
 8003590:	d102      	bne.n	8003598 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7ff ffb4 	bl	8003500 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800359e:	2b40      	cmp	r3, #64	@ 0x40
 80035a0:	d126      	bne.n	80035f0 <I2S_IRQHandler+0x92>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f003 0320 	and.w	r3, r3, #32
 80035ac:	2b20      	cmp	r3, #32
 80035ae:	d11f      	bne.n	80035f0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80035be:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80035c0:	2300      	movs	r3, #0
 80035c2:	613b      	str	r3, [r7, #16]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	613b      	str	r3, [r7, #16]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	613b      	str	r3, [r7, #16]
 80035d4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e2:	f043 0202 	orr.w	r2, r3, #2
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7ff ff50 	bl	8003490 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b03      	cmp	r3, #3
 80035fa:	d136      	bne.n	800366a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b02      	cmp	r3, #2
 8003604:	d109      	bne.n	800361a <I2S_IRQHandler+0xbc>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003610:	2b80      	cmp	r3, #128	@ 0x80
 8003612:	d102      	bne.n	800361a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f7ff ff45 	bl	80034a4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f003 0308 	and.w	r3, r3, #8
 8003620:	2b08      	cmp	r3, #8
 8003622:	d122      	bne.n	800366a <I2S_IRQHandler+0x10c>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f003 0320 	and.w	r3, r3, #32
 800362e:	2b20      	cmp	r3, #32
 8003630:	d11b      	bne.n	800366a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003640:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003642:	2300      	movs	r3, #0
 8003644:	60fb      	str	r3, [r7, #12]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800365c:	f043 0204 	orr.w	r2, r3, #4
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7ff ff13 	bl	8003490 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800366a:	bf00      	nop
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
	...

08003674 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b088      	sub	sp, #32
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a92      	ldr	r2, [pc, #584]	@ (80038d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d101      	bne.n	8003692 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800368e:	4b92      	ldr	r3, [pc, #584]	@ (80038d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003690:	e001      	b.n	8003696 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003692:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a8b      	ldr	r2, [pc, #556]	@ (80038d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d101      	bne.n	80036b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80036ac:	4b8a      	ldr	r3, [pc, #552]	@ (80038d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036ae:	e001      	b.n	80036b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80036b0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036c0:	d004      	beq.n	80036cc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f040 8099 	bne.w	80037fe <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d107      	bne.n	80036e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d002      	beq.n	80036e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 f925 	bl	8003930 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d107      	bne.n	8003700 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d002      	beq.n	8003700 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f9c8 	bl	8003a90 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003706:	2b40      	cmp	r3, #64	@ 0x40
 8003708:	d13a      	bne.n	8003780 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	f003 0320 	and.w	r3, r3, #32
 8003710:	2b00      	cmp	r3, #0
 8003712:	d035      	beq.n	8003780 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a6e      	ldr	r2, [pc, #440]	@ (80038d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d101      	bne.n	8003722 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800371e:	4b6e      	ldr	r3, [pc, #440]	@ (80038d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003720:	e001      	b.n	8003726 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003722:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4969      	ldr	r1, [pc, #420]	@ (80038d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800372e:	428b      	cmp	r3, r1
 8003730:	d101      	bne.n	8003736 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003732:	4b69      	ldr	r3, [pc, #420]	@ (80038d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003734:	e001      	b.n	800373a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003736:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800373a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800373e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800374e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003750:	2300      	movs	r3, #0
 8003752:	60fb      	str	r3, [r7, #12]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	60fb      	str	r3, [r7, #12]
 8003764:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003772:	f043 0202 	orr.w	r2, r3, #2
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7ff fe88 	bl	8003490 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b08      	cmp	r3, #8
 8003788:	f040 80c3 	bne.w	8003912 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 80bd 	beq.w	8003912 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80037a6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a49      	ldr	r2, [pc, #292]	@ (80038d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d101      	bne.n	80037b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80037b2:	4b49      	ldr	r3, [pc, #292]	@ (80038d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037b4:	e001      	b.n	80037ba <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80037b6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4944      	ldr	r1, [pc, #272]	@ (80038d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037c2:	428b      	cmp	r3, r1
 80037c4:	d101      	bne.n	80037ca <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80037c6:	4b44      	ldr	r3, [pc, #272]	@ (80038d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037c8:	e001      	b.n	80037ce <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80037ca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80037ce:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80037d2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80037d4:	2300      	movs	r3, #0
 80037d6:	60bb      	str	r3, [r7, #8]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	60bb      	str	r3, [r7, #8]
 80037e0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ee:	f043 0204 	orr.w	r2, r3, #4
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7ff fe4a 	bl	8003490 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037fc:	e089      	b.n	8003912 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b02      	cmp	r3, #2
 8003806:	d107      	bne.n	8003818 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f8be 	bl	8003994 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b01      	cmp	r3, #1
 8003820:	d107      	bne.n	8003832 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003828:	2b00      	cmp	r3, #0
 800382a:	d002      	beq.n	8003832 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 f8fd 	bl	8003a2c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003838:	2b40      	cmp	r3, #64	@ 0x40
 800383a:	d12f      	bne.n	800389c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	f003 0320 	and.w	r3, r3, #32
 8003842:	2b00      	cmp	r3, #0
 8003844:	d02a      	beq.n	800389c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003854:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a1e      	ldr	r2, [pc, #120]	@ (80038d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d101      	bne.n	8003864 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003860:	4b1d      	ldr	r3, [pc, #116]	@ (80038d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003862:	e001      	b.n	8003868 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003864:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4919      	ldr	r1, [pc, #100]	@ (80038d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003870:	428b      	cmp	r3, r1
 8003872:	d101      	bne.n	8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003874:	4b18      	ldr	r3, [pc, #96]	@ (80038d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003876:	e001      	b.n	800387c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003878:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800387c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003880:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800388e:	f043 0202 	orr.w	r2, r3, #2
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7ff fdfa 	bl	8003490 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	f003 0308 	and.w	r3, r3, #8
 80038a2:	2b08      	cmp	r3, #8
 80038a4:	d136      	bne.n	8003914 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	f003 0320 	and.w	r3, r3, #32
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d031      	beq.n	8003914 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a07      	ldr	r2, [pc, #28]	@ (80038d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d101      	bne.n	80038be <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80038ba:	4b07      	ldr	r3, [pc, #28]	@ (80038d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038bc:	e001      	b.n	80038c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80038be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4902      	ldr	r1, [pc, #8]	@ (80038d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038ca:	428b      	cmp	r3, r1
 80038cc:	d106      	bne.n	80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80038ce:	4b02      	ldr	r3, [pc, #8]	@ (80038d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038d0:	e006      	b.n	80038e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80038d2:	bf00      	nop
 80038d4:	40003800 	.word	0x40003800
 80038d8:	40003400 	.word	0x40003400
 80038dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80038e0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80038e4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80038f4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003902:	f043 0204 	orr.w	r2, r3, #4
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7ff fdc0 	bl	8003490 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003910:	e000      	b.n	8003914 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003912:	bf00      	nop
}
 8003914:	bf00      	nop
 8003916:	3720      	adds	r7, #32
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393c:	1c99      	adds	r1, r3, #2
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6251      	str	r1, [r2, #36]	@ 0x24
 8003942:	881a      	ldrh	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800394e:	b29b      	uxth	r3, r3
 8003950:	3b01      	subs	r3, #1
 8003952:	b29a      	uxth	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800395c:	b29b      	uxth	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d113      	bne.n	800398a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003970:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003976:	b29b      	uxth	r3, r3
 8003978:	2b00      	cmp	r3, #0
 800397a:	d106      	bne.n	800398a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f7ff ffc9 	bl	800391c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800398a:	bf00      	nop
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a0:	1c99      	adds	r1, r3, #2
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	6251      	str	r1, [r2, #36]	@ 0x24
 80039a6:	8819      	ldrh	r1, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a1d      	ldr	r2, [pc, #116]	@ (8003a24 <I2SEx_TxISR_I2SExt+0x90>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d101      	bne.n	80039b6 <I2SEx_TxISR_I2SExt+0x22>
 80039b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003a28 <I2SEx_TxISR_I2SExt+0x94>)
 80039b4:	e001      	b.n	80039ba <I2SEx_TxISR_I2SExt+0x26>
 80039b6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039ba:	460a      	mov	r2, r1
 80039bc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	3b01      	subs	r3, #1
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d121      	bne.n	8003a1a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a12      	ldr	r2, [pc, #72]	@ (8003a24 <I2SEx_TxISR_I2SExt+0x90>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d101      	bne.n	80039e4 <I2SEx_TxISR_I2SExt+0x50>
 80039e0:	4b11      	ldr	r3, [pc, #68]	@ (8003a28 <I2SEx_TxISR_I2SExt+0x94>)
 80039e2:	e001      	b.n	80039e8 <I2SEx_TxISR_I2SExt+0x54>
 80039e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	490d      	ldr	r1, [pc, #52]	@ (8003a24 <I2SEx_TxISR_I2SExt+0x90>)
 80039f0:	428b      	cmp	r3, r1
 80039f2:	d101      	bne.n	80039f8 <I2SEx_TxISR_I2SExt+0x64>
 80039f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003a28 <I2SEx_TxISR_I2SExt+0x94>)
 80039f6:	e001      	b.n	80039fc <I2SEx_TxISR_I2SExt+0x68>
 80039f8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039fc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003a00:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d106      	bne.n	8003a1a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7ff ff81 	bl	800391c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a1a:	bf00      	nop
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	40003800 	.word	0x40003800
 8003a28:	40003400 	.word	0x40003400

08003a2c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68d8      	ldr	r0, [r3, #12]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3e:	1c99      	adds	r1, r3, #2
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003a44:	b282      	uxth	r2, r0
 8003a46:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d113      	bne.n	8003a88 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003a6e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d106      	bne.n	8003a88 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7ff ff4a 	bl	800391c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a88:	bf00      	nop
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a20      	ldr	r2, [pc, #128]	@ (8003b20 <I2SEx_RxISR_I2SExt+0x90>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d101      	bne.n	8003aa6 <I2SEx_RxISR_I2SExt+0x16>
 8003aa2:	4b20      	ldr	r3, [pc, #128]	@ (8003b24 <I2SEx_RxISR_I2SExt+0x94>)
 8003aa4:	e001      	b.n	8003aaa <I2SEx_RxISR_I2SExt+0x1a>
 8003aa6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003aaa:	68d8      	ldr	r0, [r3, #12]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab0:	1c99      	adds	r1, r3, #2
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003ab6:	b282      	uxth	r2, r0
 8003ab8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d121      	bne.n	8003b16 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a12      	ldr	r2, [pc, #72]	@ (8003b20 <I2SEx_RxISR_I2SExt+0x90>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d101      	bne.n	8003ae0 <I2SEx_RxISR_I2SExt+0x50>
 8003adc:	4b11      	ldr	r3, [pc, #68]	@ (8003b24 <I2SEx_RxISR_I2SExt+0x94>)
 8003ade:	e001      	b.n	8003ae4 <I2SEx_RxISR_I2SExt+0x54>
 8003ae0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	490d      	ldr	r1, [pc, #52]	@ (8003b20 <I2SEx_RxISR_I2SExt+0x90>)
 8003aec:	428b      	cmp	r3, r1
 8003aee:	d101      	bne.n	8003af4 <I2SEx_RxISR_I2SExt+0x64>
 8003af0:	4b0c      	ldr	r3, [pc, #48]	@ (8003b24 <I2SEx_RxISR_I2SExt+0x94>)
 8003af2:	e001      	b.n	8003af8 <I2SEx_RxISR_I2SExt+0x68>
 8003af4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003af8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003afc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d106      	bne.n	8003b16 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f7ff ff03 	bl	800391c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b16:	bf00      	nop
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	40003800 	.word	0x40003800
 8003b24:	40003400 	.word	0x40003400

08003b28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e267      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d075      	beq.n	8003c32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b46:	4b88      	ldr	r3, [pc, #544]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 030c 	and.w	r3, r3, #12
 8003b4e:	2b04      	cmp	r3, #4
 8003b50:	d00c      	beq.n	8003b6c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b52:	4b85      	ldr	r3, [pc, #532]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b5a:	2b08      	cmp	r3, #8
 8003b5c:	d112      	bne.n	8003b84 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b5e:	4b82      	ldr	r3, [pc, #520]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b6a:	d10b      	bne.n	8003b84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b6c:	4b7e      	ldr	r3, [pc, #504]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d05b      	beq.n	8003c30 <HAL_RCC_OscConfig+0x108>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d157      	bne.n	8003c30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e242      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b8c:	d106      	bne.n	8003b9c <HAL_RCC_OscConfig+0x74>
 8003b8e:	4b76      	ldr	r3, [pc, #472]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a75      	ldr	r2, [pc, #468]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b98:	6013      	str	r3, [r2, #0]
 8003b9a:	e01d      	b.n	8003bd8 <HAL_RCC_OscConfig+0xb0>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ba4:	d10c      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x98>
 8003ba6:	4b70      	ldr	r3, [pc, #448]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a6f      	ldr	r2, [pc, #444]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003bac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	4b6d      	ldr	r3, [pc, #436]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a6c      	ldr	r2, [pc, #432]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003bb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bbc:	6013      	str	r3, [r2, #0]
 8003bbe:	e00b      	b.n	8003bd8 <HAL_RCC_OscConfig+0xb0>
 8003bc0:	4b69      	ldr	r3, [pc, #420]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a68      	ldr	r2, [pc, #416]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003bc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bca:	6013      	str	r3, [r2, #0]
 8003bcc:	4b66      	ldr	r3, [pc, #408]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a65      	ldr	r2, [pc, #404]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003bd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d013      	beq.n	8003c08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be0:	f7fd fc76 	bl	80014d0 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003be8:	f7fd fc72 	bl	80014d0 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b64      	cmp	r3, #100	@ 0x64
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e207      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bfa:	4b5b      	ldr	r3, [pc, #364]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d0f0      	beq.n	8003be8 <HAL_RCC_OscConfig+0xc0>
 8003c06:	e014      	b.n	8003c32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c08:	f7fd fc62 	bl	80014d0 <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c10:	f7fd fc5e 	bl	80014d0 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b64      	cmp	r3, #100	@ 0x64
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e1f3      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c22:	4b51      	ldr	r3, [pc, #324]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1f0      	bne.n	8003c10 <HAL_RCC_OscConfig+0xe8>
 8003c2e:	e000      	b.n	8003c32 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d063      	beq.n	8003d06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c3e:	4b4a      	ldr	r3, [pc, #296]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 030c 	and.w	r3, r3, #12
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00b      	beq.n	8003c62 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c4a:	4b47      	ldr	r3, [pc, #284]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c52:	2b08      	cmp	r3, #8
 8003c54:	d11c      	bne.n	8003c90 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c56:	4b44      	ldr	r3, [pc, #272]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d116      	bne.n	8003c90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c62:	4b41      	ldr	r3, [pc, #260]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d005      	beq.n	8003c7a <HAL_RCC_OscConfig+0x152>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d001      	beq.n	8003c7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e1c7      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c7a:	4b3b      	ldr	r3, [pc, #236]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	4937      	ldr	r1, [pc, #220]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c8e:	e03a      	b.n	8003d06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d020      	beq.n	8003cda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c98:	4b34      	ldr	r3, [pc, #208]	@ (8003d6c <HAL_RCC_OscConfig+0x244>)
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c9e:	f7fd fc17 	bl	80014d0 <HAL_GetTick>
 8003ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca4:	e008      	b.n	8003cb8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ca6:	f7fd fc13 	bl	80014d0 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e1a8      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb8:	4b2b      	ldr	r3, [pc, #172]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d0f0      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc4:	4b28      	ldr	r3, [pc, #160]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	4925      	ldr	r1, [pc, #148]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	600b      	str	r3, [r1, #0]
 8003cd8:	e015      	b.n	8003d06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cda:	4b24      	ldr	r3, [pc, #144]	@ (8003d6c <HAL_RCC_OscConfig+0x244>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce0:	f7fd fbf6 	bl	80014d0 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ce8:	f7fd fbf2 	bl	80014d0 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e187      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f0      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0308 	and.w	r3, r3, #8
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d036      	beq.n	8003d80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d016      	beq.n	8003d48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d1a:	4b15      	ldr	r3, [pc, #84]	@ (8003d70 <HAL_RCC_OscConfig+0x248>)
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d20:	f7fd fbd6 	bl	80014d0 <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d28:	f7fd fbd2 	bl	80014d0 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e167      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8003d68 <HAL_RCC_OscConfig+0x240>)
 8003d3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d0f0      	beq.n	8003d28 <HAL_RCC_OscConfig+0x200>
 8003d46:	e01b      	b.n	8003d80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d48:	4b09      	ldr	r3, [pc, #36]	@ (8003d70 <HAL_RCC_OscConfig+0x248>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d4e:	f7fd fbbf 	bl	80014d0 <HAL_GetTick>
 8003d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d54:	e00e      	b.n	8003d74 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d56:	f7fd fbbb 	bl	80014d0 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d907      	bls.n	8003d74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e150      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
 8003d68:	40023800 	.word	0x40023800
 8003d6c:	42470000 	.word	0x42470000
 8003d70:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d74:	4b88      	ldr	r3, [pc, #544]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003d76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1ea      	bne.n	8003d56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 8097 	beq.w	8003ebc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d92:	4b81      	ldr	r3, [pc, #516]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10f      	bne.n	8003dbe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60bb      	str	r3, [r7, #8]
 8003da2:	4b7d      	ldr	r3, [pc, #500]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da6:	4a7c      	ldr	r2, [pc, #496]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003da8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dac:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dae:	4b7a      	ldr	r3, [pc, #488]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003db6:	60bb      	str	r3, [r7, #8]
 8003db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dbe:	4b77      	ldr	r3, [pc, #476]	@ (8003f9c <HAL_RCC_OscConfig+0x474>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d118      	bne.n	8003dfc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dca:	4b74      	ldr	r3, [pc, #464]	@ (8003f9c <HAL_RCC_OscConfig+0x474>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a73      	ldr	r2, [pc, #460]	@ (8003f9c <HAL_RCC_OscConfig+0x474>)
 8003dd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dd6:	f7fd fb7b 	bl	80014d0 <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ddc:	e008      	b.n	8003df0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dde:	f7fd fb77 	bl	80014d0 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e10c      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df0:	4b6a      	ldr	r3, [pc, #424]	@ (8003f9c <HAL_RCC_OscConfig+0x474>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d0f0      	beq.n	8003dde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d106      	bne.n	8003e12 <HAL_RCC_OscConfig+0x2ea>
 8003e04:	4b64      	ldr	r3, [pc, #400]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003e06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e08:	4a63      	ldr	r2, [pc, #396]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003e0a:	f043 0301 	orr.w	r3, r3, #1
 8003e0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e10:	e01c      	b.n	8003e4c <HAL_RCC_OscConfig+0x324>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	2b05      	cmp	r3, #5
 8003e18:	d10c      	bne.n	8003e34 <HAL_RCC_OscConfig+0x30c>
 8003e1a:	4b5f      	ldr	r3, [pc, #380]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e1e:	4a5e      	ldr	r2, [pc, #376]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003e20:	f043 0304 	orr.w	r3, r3, #4
 8003e24:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e26:	4b5c      	ldr	r3, [pc, #368]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e2a:	4a5b      	ldr	r2, [pc, #364]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003e2c:	f043 0301 	orr.w	r3, r3, #1
 8003e30:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e32:	e00b      	b.n	8003e4c <HAL_RCC_OscConfig+0x324>
 8003e34:	4b58      	ldr	r3, [pc, #352]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e38:	4a57      	ldr	r2, [pc, #348]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003e3a:	f023 0301 	bic.w	r3, r3, #1
 8003e3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e40:	4b55      	ldr	r3, [pc, #340]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003e42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e44:	4a54      	ldr	r2, [pc, #336]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003e46:	f023 0304 	bic.w	r3, r3, #4
 8003e4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d015      	beq.n	8003e80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e54:	f7fd fb3c 	bl	80014d0 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e5a:	e00a      	b.n	8003e72 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e5c:	f7fd fb38 	bl	80014d0 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e0cb      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e72:	4b49      	ldr	r3, [pc, #292]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0ee      	beq.n	8003e5c <HAL_RCC_OscConfig+0x334>
 8003e7e:	e014      	b.n	8003eaa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e80:	f7fd fb26 	bl	80014d0 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e86:	e00a      	b.n	8003e9e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e88:	f7fd fb22 	bl	80014d0 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e0b5      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e9e:	4b3e      	ldr	r3, [pc, #248]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1ee      	bne.n	8003e88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003eaa:	7dfb      	ldrb	r3, [r7, #23]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d105      	bne.n	8003ebc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eb0:	4b39      	ldr	r3, [pc, #228]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb4:	4a38      	ldr	r2, [pc, #224]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003eb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003eba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 80a1 	beq.w	8004008 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ec6:	4b34      	ldr	r3, [pc, #208]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 030c 	and.w	r3, r3, #12
 8003ece:	2b08      	cmp	r3, #8
 8003ed0:	d05c      	beq.n	8003f8c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d141      	bne.n	8003f5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eda:	4b31      	ldr	r3, [pc, #196]	@ (8003fa0 <HAL_RCC_OscConfig+0x478>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee0:	f7fd faf6 	bl	80014d0 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee8:	f7fd faf2 	bl	80014d0 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e087      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003efa:	4b27      	ldr	r3, [pc, #156]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f0      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	69da      	ldr	r2, [r3, #28]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f14:	019b      	lsls	r3, r3, #6
 8003f16:	431a      	orrs	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f1c:	085b      	lsrs	r3, r3, #1
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	041b      	lsls	r3, r3, #16
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f28:	061b      	lsls	r3, r3, #24
 8003f2a:	491b      	ldr	r1, [pc, #108]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f30:	4b1b      	ldr	r3, [pc, #108]	@ (8003fa0 <HAL_RCC_OscConfig+0x478>)
 8003f32:	2201      	movs	r2, #1
 8003f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f36:	f7fd facb 	bl	80014d0 <HAL_GetTick>
 8003f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f3c:	e008      	b.n	8003f50 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f3e:	f7fd fac7 	bl	80014d0 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e05c      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f50:	4b11      	ldr	r3, [pc, #68]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d0f0      	beq.n	8003f3e <HAL_RCC_OscConfig+0x416>
 8003f5c:	e054      	b.n	8004008 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f5e:	4b10      	ldr	r3, [pc, #64]	@ (8003fa0 <HAL_RCC_OscConfig+0x478>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f64:	f7fd fab4 	bl	80014d0 <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f6c:	f7fd fab0 	bl	80014d0 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e045      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f7e:	4b06      	ldr	r3, [pc, #24]	@ (8003f98 <HAL_RCC_OscConfig+0x470>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1f0      	bne.n	8003f6c <HAL_RCC_OscConfig+0x444>
 8003f8a:	e03d      	b.n	8004008 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d107      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e038      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
 8003f98:	40023800 	.word	0x40023800
 8003f9c:	40007000 	.word	0x40007000
 8003fa0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fa4:	4b1b      	ldr	r3, [pc, #108]	@ (8004014 <HAL_RCC_OscConfig+0x4ec>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d028      	beq.n	8004004 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d121      	bne.n	8004004 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d11a      	bne.n	8004004 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003fda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d111      	bne.n	8004004 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fea:	085b      	lsrs	r3, r3, #1
 8003fec:	3b01      	subs	r3, #1
 8003fee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d107      	bne.n	8004004 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ffe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004000:	429a      	cmp	r2, r3
 8004002:	d001      	beq.n	8004008 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e000      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3718      	adds	r7, #24
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	40023800 	.word	0x40023800

08004018 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e0cc      	b.n	80041c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800402c:	4b68      	ldr	r3, [pc, #416]	@ (80041d0 <HAL_RCC_ClockConfig+0x1b8>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	429a      	cmp	r2, r3
 8004038:	d90c      	bls.n	8004054 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800403a:	4b65      	ldr	r3, [pc, #404]	@ (80041d0 <HAL_RCC_ClockConfig+0x1b8>)
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	b2d2      	uxtb	r2, r2
 8004040:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004042:	4b63      	ldr	r3, [pc, #396]	@ (80041d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0307 	and.w	r3, r3, #7
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	429a      	cmp	r2, r3
 800404e:	d001      	beq.n	8004054 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e0b8      	b.n	80041c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d020      	beq.n	80040a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0304 	and.w	r3, r3, #4
 8004068:	2b00      	cmp	r3, #0
 800406a:	d005      	beq.n	8004078 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800406c:	4b59      	ldr	r3, [pc, #356]	@ (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	4a58      	ldr	r2, [pc, #352]	@ (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004072:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004076:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0308 	and.w	r3, r3, #8
 8004080:	2b00      	cmp	r3, #0
 8004082:	d005      	beq.n	8004090 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004084:	4b53      	ldr	r3, [pc, #332]	@ (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	4a52      	ldr	r2, [pc, #328]	@ (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 800408a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800408e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004090:	4b50      	ldr	r3, [pc, #320]	@ (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	494d      	ldr	r1, [pc, #308]	@ (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d044      	beq.n	8004138 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d107      	bne.n	80040c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040b6:	4b47      	ldr	r3, [pc, #284]	@ (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d119      	bne.n	80040f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e07f      	b.n	80041c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d003      	beq.n	80040d6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040d2:	2b03      	cmp	r3, #3
 80040d4:	d107      	bne.n	80040e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040d6:	4b3f      	ldr	r3, [pc, #252]	@ (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d109      	bne.n	80040f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e06f      	b.n	80041c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e6:	4b3b      	ldr	r3, [pc, #236]	@ (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e067      	b.n	80041c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040f6:	4b37      	ldr	r3, [pc, #220]	@ (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f023 0203 	bic.w	r2, r3, #3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	4934      	ldr	r1, [pc, #208]	@ (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004104:	4313      	orrs	r3, r2
 8004106:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004108:	f7fd f9e2 	bl	80014d0 <HAL_GetTick>
 800410c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800410e:	e00a      	b.n	8004126 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004110:	f7fd f9de 	bl	80014d0 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800411e:	4293      	cmp	r3, r2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e04f      	b.n	80041c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004126:	4b2b      	ldr	r3, [pc, #172]	@ (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f003 020c 	and.w	r2, r3, #12
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	429a      	cmp	r2, r3
 8004136:	d1eb      	bne.n	8004110 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004138:	4b25      	ldr	r3, [pc, #148]	@ (80041d0 <HAL_RCC_ClockConfig+0x1b8>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0307 	and.w	r3, r3, #7
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	429a      	cmp	r2, r3
 8004144:	d20c      	bcs.n	8004160 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004146:	4b22      	ldr	r3, [pc, #136]	@ (80041d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	b2d2      	uxtb	r2, r2
 800414c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800414e:	4b20      	ldr	r3, [pc, #128]	@ (80041d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0307 	and.w	r3, r3, #7
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	429a      	cmp	r2, r3
 800415a:	d001      	beq.n	8004160 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e032      	b.n	80041c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b00      	cmp	r3, #0
 800416a:	d008      	beq.n	800417e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800416c:	4b19      	ldr	r3, [pc, #100]	@ (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	4916      	ldr	r1, [pc, #88]	@ (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 800417a:	4313      	orrs	r3, r2
 800417c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0308 	and.w	r3, r3, #8
 8004186:	2b00      	cmp	r3, #0
 8004188:	d009      	beq.n	800419e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800418a:	4b12      	ldr	r3, [pc, #72]	@ (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	490e      	ldr	r1, [pc, #56]	@ (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 800419a:	4313      	orrs	r3, r2
 800419c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800419e:	f000 f821 	bl	80041e4 <HAL_RCC_GetSysClockFreq>
 80041a2:	4602      	mov	r2, r0
 80041a4:	4b0b      	ldr	r3, [pc, #44]	@ (80041d4 <HAL_RCC_ClockConfig+0x1bc>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	091b      	lsrs	r3, r3, #4
 80041aa:	f003 030f 	and.w	r3, r3, #15
 80041ae:	490a      	ldr	r1, [pc, #40]	@ (80041d8 <HAL_RCC_ClockConfig+0x1c0>)
 80041b0:	5ccb      	ldrb	r3, [r1, r3]
 80041b2:	fa22 f303 	lsr.w	r3, r2, r3
 80041b6:	4a09      	ldr	r2, [pc, #36]	@ (80041dc <HAL_RCC_ClockConfig+0x1c4>)
 80041b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80041ba:	4b09      	ldr	r3, [pc, #36]	@ (80041e0 <HAL_RCC_ClockConfig+0x1c8>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4618      	mov	r0, r3
 80041c0:	f7fd f942 	bl	8001448 <HAL_InitTick>

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	40023c00 	.word	0x40023c00
 80041d4:	40023800 	.word	0x40023800
 80041d8:	080073f8 	.word	0x080073f8
 80041dc:	20000000 	.word	0x20000000
 80041e0:	20000004 	.word	0x20000004

080041e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041e8:	b094      	sub	sp, #80	@ 0x50
 80041ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80041ec:	2300      	movs	r3, #0
 80041ee:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80041f8:	2300      	movs	r3, #0
 80041fa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041fc:	4b79      	ldr	r3, [pc, #484]	@ (80043e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f003 030c 	and.w	r3, r3, #12
 8004204:	2b08      	cmp	r3, #8
 8004206:	d00d      	beq.n	8004224 <HAL_RCC_GetSysClockFreq+0x40>
 8004208:	2b08      	cmp	r3, #8
 800420a:	f200 80e1 	bhi.w	80043d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800420e:	2b00      	cmp	r3, #0
 8004210:	d002      	beq.n	8004218 <HAL_RCC_GetSysClockFreq+0x34>
 8004212:	2b04      	cmp	r3, #4
 8004214:	d003      	beq.n	800421e <HAL_RCC_GetSysClockFreq+0x3a>
 8004216:	e0db      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004218:	4b73      	ldr	r3, [pc, #460]	@ (80043e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800421a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800421c:	e0db      	b.n	80043d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800421e:	4b73      	ldr	r3, [pc, #460]	@ (80043ec <HAL_RCC_GetSysClockFreq+0x208>)
 8004220:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004222:	e0d8      	b.n	80043d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004224:	4b6f      	ldr	r3, [pc, #444]	@ (80043e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800422c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800422e:	4b6d      	ldr	r3, [pc, #436]	@ (80043e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d063      	beq.n	8004302 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800423a:	4b6a      	ldr	r3, [pc, #424]	@ (80043e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	099b      	lsrs	r3, r3, #6
 8004240:	2200      	movs	r2, #0
 8004242:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004244:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800424c:	633b      	str	r3, [r7, #48]	@ 0x30
 800424e:	2300      	movs	r3, #0
 8004250:	637b      	str	r3, [r7, #52]	@ 0x34
 8004252:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004256:	4622      	mov	r2, r4
 8004258:	462b      	mov	r3, r5
 800425a:	f04f 0000 	mov.w	r0, #0
 800425e:	f04f 0100 	mov.w	r1, #0
 8004262:	0159      	lsls	r1, r3, #5
 8004264:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004268:	0150      	lsls	r0, r2, #5
 800426a:	4602      	mov	r2, r0
 800426c:	460b      	mov	r3, r1
 800426e:	4621      	mov	r1, r4
 8004270:	1a51      	subs	r1, r2, r1
 8004272:	6139      	str	r1, [r7, #16]
 8004274:	4629      	mov	r1, r5
 8004276:	eb63 0301 	sbc.w	r3, r3, r1
 800427a:	617b      	str	r3, [r7, #20]
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	f04f 0300 	mov.w	r3, #0
 8004284:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004288:	4659      	mov	r1, fp
 800428a:	018b      	lsls	r3, r1, #6
 800428c:	4651      	mov	r1, sl
 800428e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004292:	4651      	mov	r1, sl
 8004294:	018a      	lsls	r2, r1, #6
 8004296:	4651      	mov	r1, sl
 8004298:	ebb2 0801 	subs.w	r8, r2, r1
 800429c:	4659      	mov	r1, fp
 800429e:	eb63 0901 	sbc.w	r9, r3, r1
 80042a2:	f04f 0200 	mov.w	r2, #0
 80042a6:	f04f 0300 	mov.w	r3, #0
 80042aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042b6:	4690      	mov	r8, r2
 80042b8:	4699      	mov	r9, r3
 80042ba:	4623      	mov	r3, r4
 80042bc:	eb18 0303 	adds.w	r3, r8, r3
 80042c0:	60bb      	str	r3, [r7, #8]
 80042c2:	462b      	mov	r3, r5
 80042c4:	eb49 0303 	adc.w	r3, r9, r3
 80042c8:	60fb      	str	r3, [r7, #12]
 80042ca:	f04f 0200 	mov.w	r2, #0
 80042ce:	f04f 0300 	mov.w	r3, #0
 80042d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80042d6:	4629      	mov	r1, r5
 80042d8:	024b      	lsls	r3, r1, #9
 80042da:	4621      	mov	r1, r4
 80042dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042e0:	4621      	mov	r1, r4
 80042e2:	024a      	lsls	r2, r1, #9
 80042e4:	4610      	mov	r0, r2
 80042e6:	4619      	mov	r1, r3
 80042e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042ea:	2200      	movs	r2, #0
 80042ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80042f4:	f7fb ffbc 	bl	8000270 <__aeabi_uldivmod>
 80042f8:	4602      	mov	r2, r0
 80042fa:	460b      	mov	r3, r1
 80042fc:	4613      	mov	r3, r2
 80042fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004300:	e058      	b.n	80043b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004302:	4b38      	ldr	r3, [pc, #224]	@ (80043e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	099b      	lsrs	r3, r3, #6
 8004308:	2200      	movs	r2, #0
 800430a:	4618      	mov	r0, r3
 800430c:	4611      	mov	r1, r2
 800430e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004312:	623b      	str	r3, [r7, #32]
 8004314:	2300      	movs	r3, #0
 8004316:	627b      	str	r3, [r7, #36]	@ 0x24
 8004318:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800431c:	4642      	mov	r2, r8
 800431e:	464b      	mov	r3, r9
 8004320:	f04f 0000 	mov.w	r0, #0
 8004324:	f04f 0100 	mov.w	r1, #0
 8004328:	0159      	lsls	r1, r3, #5
 800432a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800432e:	0150      	lsls	r0, r2, #5
 8004330:	4602      	mov	r2, r0
 8004332:	460b      	mov	r3, r1
 8004334:	4641      	mov	r1, r8
 8004336:	ebb2 0a01 	subs.w	sl, r2, r1
 800433a:	4649      	mov	r1, r9
 800433c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004340:	f04f 0200 	mov.w	r2, #0
 8004344:	f04f 0300 	mov.w	r3, #0
 8004348:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800434c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004350:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004354:	ebb2 040a 	subs.w	r4, r2, sl
 8004358:	eb63 050b 	sbc.w	r5, r3, fp
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	00eb      	lsls	r3, r5, #3
 8004366:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800436a:	00e2      	lsls	r2, r4, #3
 800436c:	4614      	mov	r4, r2
 800436e:	461d      	mov	r5, r3
 8004370:	4643      	mov	r3, r8
 8004372:	18e3      	adds	r3, r4, r3
 8004374:	603b      	str	r3, [r7, #0]
 8004376:	464b      	mov	r3, r9
 8004378:	eb45 0303 	adc.w	r3, r5, r3
 800437c:	607b      	str	r3, [r7, #4]
 800437e:	f04f 0200 	mov.w	r2, #0
 8004382:	f04f 0300 	mov.w	r3, #0
 8004386:	e9d7 4500 	ldrd	r4, r5, [r7]
 800438a:	4629      	mov	r1, r5
 800438c:	028b      	lsls	r3, r1, #10
 800438e:	4621      	mov	r1, r4
 8004390:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004394:	4621      	mov	r1, r4
 8004396:	028a      	lsls	r2, r1, #10
 8004398:	4610      	mov	r0, r2
 800439a:	4619      	mov	r1, r3
 800439c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800439e:	2200      	movs	r2, #0
 80043a0:	61bb      	str	r3, [r7, #24]
 80043a2:	61fa      	str	r2, [r7, #28]
 80043a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043a8:	f7fb ff62 	bl	8000270 <__aeabi_uldivmod>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	4613      	mov	r3, r2
 80043b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80043b4:	4b0b      	ldr	r3, [pc, #44]	@ (80043e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	0c1b      	lsrs	r3, r3, #16
 80043ba:	f003 0303 	and.w	r3, r3, #3
 80043be:	3301      	adds	r3, #1
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80043c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80043c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043ce:	e002      	b.n	80043d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043d0:	4b05      	ldr	r3, [pc, #20]	@ (80043e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80043d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3750      	adds	r7, #80	@ 0x50
 80043dc:	46bd      	mov	sp, r7
 80043de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043e2:	bf00      	nop
 80043e4:	40023800 	.word	0x40023800
 80043e8:	00f42400 	.word	0x00f42400
 80043ec:	007a1200 	.word	0x007a1200

080043f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043f4:	4b03      	ldr	r3, [pc, #12]	@ (8004404 <HAL_RCC_GetHCLKFreq+0x14>)
 80043f6:	681b      	ldr	r3, [r3, #0]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	20000000 	.word	0x20000000

08004408 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800440c:	f7ff fff0 	bl	80043f0 <HAL_RCC_GetHCLKFreq>
 8004410:	4602      	mov	r2, r0
 8004412:	4b05      	ldr	r3, [pc, #20]	@ (8004428 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	0a9b      	lsrs	r3, r3, #10
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	4903      	ldr	r1, [pc, #12]	@ (800442c <HAL_RCC_GetPCLK1Freq+0x24>)
 800441e:	5ccb      	ldrb	r3, [r1, r3]
 8004420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004424:	4618      	mov	r0, r3
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40023800 	.word	0x40023800
 800442c:	08007408 	.word	0x08007408

08004430 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004434:	f7ff ffdc 	bl	80043f0 <HAL_RCC_GetHCLKFreq>
 8004438:	4602      	mov	r2, r0
 800443a:	4b05      	ldr	r3, [pc, #20]	@ (8004450 <HAL_RCC_GetPCLK2Freq+0x20>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	0b5b      	lsrs	r3, r3, #13
 8004440:	f003 0307 	and.w	r3, r3, #7
 8004444:	4903      	ldr	r1, [pc, #12]	@ (8004454 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004446:	5ccb      	ldrb	r3, [r1, r3]
 8004448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800444c:	4618      	mov	r0, r3
 800444e:	bd80      	pop	{r7, pc}
 8004450:	40023800 	.word	0x40023800
 8004454:	08007408 	.word	0x08007408

08004458 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004460:	2300      	movs	r3, #0
 8004462:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004464:	2300      	movs	r3, #0
 8004466:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b00      	cmp	r3, #0
 8004472:	d105      	bne.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800447c:	2b00      	cmp	r3, #0
 800447e:	d035      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004480:	4b62      	ldr	r3, [pc, #392]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004482:	2200      	movs	r2, #0
 8004484:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004486:	f7fd f823 	bl	80014d0 <HAL_GetTick>
 800448a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800448c:	e008      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800448e:	f7fd f81f 	bl	80014d0 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b02      	cmp	r3, #2
 800449a:	d901      	bls.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e0b0      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044a0:	4b5b      	ldr	r3, [pc, #364]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1f0      	bne.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	019a      	lsls	r2, r3, #6
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	071b      	lsls	r3, r3, #28
 80044b8:	4955      	ldr	r1, [pc, #340]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044c0:	4b52      	ldr	r3, [pc, #328]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80044c2:	2201      	movs	r2, #1
 80044c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044c6:	f7fd f803 	bl	80014d0 <HAL_GetTick>
 80044ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044cc:	e008      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80044ce:	f7fc ffff 	bl	80014d0 <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d901      	bls.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e090      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044e0:	4b4b      	ldr	r3, [pc, #300]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0f0      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 8083 	beq.w	8004600 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044fa:	2300      	movs	r3, #0
 80044fc:	60fb      	str	r3, [r7, #12]
 80044fe:	4b44      	ldr	r3, [pc, #272]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004502:	4a43      	ldr	r2, [pc, #268]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004504:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004508:	6413      	str	r3, [r2, #64]	@ 0x40
 800450a:	4b41      	ldr	r3, [pc, #260]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800450c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004516:	4b3f      	ldr	r3, [pc, #252]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a3e      	ldr	r2, [pc, #248]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800451c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004520:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004522:	f7fc ffd5 	bl	80014d0 <HAL_GetTick>
 8004526:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004528:	e008      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800452a:	f7fc ffd1 	bl	80014d0 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d901      	bls.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e062      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800453c:	4b35      	ldr	r3, [pc, #212]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004544:	2b00      	cmp	r3, #0
 8004546:	d0f0      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004548:	4b31      	ldr	r3, [pc, #196]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800454a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800454c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004550:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d02f      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	429a      	cmp	r2, r3
 8004564:	d028      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004566:	4b2a      	ldr	r3, [pc, #168]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800456a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800456e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004570:	4b29      	ldr	r3, [pc, #164]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004572:	2201      	movs	r2, #1
 8004574:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004576:	4b28      	ldr	r3, [pc, #160]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800457c:	4a24      	ldr	r2, [pc, #144]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004582:	4b23      	ldr	r3, [pc, #140]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b01      	cmp	r3, #1
 800458c:	d114      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800458e:	f7fc ff9f 	bl	80014d0 <HAL_GetTick>
 8004592:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004594:	e00a      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004596:	f7fc ff9b 	bl	80014d0 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d901      	bls.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e02a      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ac:	4b18      	ldr	r3, [pc, #96]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d0ee      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045c4:	d10d      	bne.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80045c6:	4b12      	ldr	r3, [pc, #72]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80045d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045da:	490d      	ldr	r1, [pc, #52]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	608b      	str	r3, [r1, #8]
 80045e0:	e005      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x196>
 80045e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	4a0a      	ldr	r2, [pc, #40]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045e8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80045ec:	6093      	str	r3, [r2, #8]
 80045ee:	4b08      	ldr	r3, [pc, #32]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045f0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045fa:	4905      	ldr	r1, [pc, #20]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3718      	adds	r7, #24
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	42470068 	.word	0x42470068
 8004610:	40023800 	.word	0x40023800
 8004614:	40007000 	.word	0x40007000
 8004618:	42470e40 	.word	0x42470e40

0800461c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800461c:	b480      	push	{r7}
 800461e:	b087      	sub	sp, #28
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004624:	2300      	movs	r3, #0
 8004626:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004628:	2300      	movs	r3, #0
 800462a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800462c:	2300      	movs	r3, #0
 800462e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004630:	2300      	movs	r3, #0
 8004632:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d13f      	bne.n	80046ba <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800463a:	4b24      	ldr	r3, [pc, #144]	@ (80046cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d006      	beq.n	8004658 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004650:	d12f      	bne.n	80046b2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004652:	4b1f      	ldr	r3, [pc, #124]	@ (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004654:	617b      	str	r3, [r7, #20]
          break;
 8004656:	e02f      	b.n	80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004658:	4b1c      	ldr	r3, [pc, #112]	@ (80046cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004660:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004664:	d108      	bne.n	8004678 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004666:	4b19      	ldr	r3, [pc, #100]	@ (80046cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800466e:	4a19      	ldr	r2, [pc, #100]	@ (80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004670:	fbb2 f3f3 	udiv	r3, r2, r3
 8004674:	613b      	str	r3, [r7, #16]
 8004676:	e007      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004678:	4b14      	ldr	r3, [pc, #80]	@ (80046cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004680:	4a15      	ldr	r2, [pc, #84]	@ (80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004682:	fbb2 f3f3 	udiv	r3, r2, r3
 8004686:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004688:	4b10      	ldr	r3, [pc, #64]	@ (80046cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800468a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800468e:	099b      	lsrs	r3, r3, #6
 8004690:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	fb02 f303 	mul.w	r3, r2, r3
 800469a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800469c:	4b0b      	ldr	r3, [pc, #44]	@ (80046cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800469e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046a2:	0f1b      	lsrs	r3, r3, #28
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	68ba      	ldr	r2, [r7, #8]
 80046aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ae:	617b      	str	r3, [r7, #20]
          break;
 80046b0:	e002      	b.n	80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80046b2:	2300      	movs	r3, #0
 80046b4:	617b      	str	r3, [r7, #20]
          break;
 80046b6:	bf00      	nop
        }
      }
      break;
 80046b8:	e000      	b.n	80046bc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80046ba:	bf00      	nop
    }
  }
  return frequency;
 80046bc:	697b      	ldr	r3, [r7, #20]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	371c      	adds	r7, #28
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	40023800 	.word	0x40023800
 80046d0:	00bb8000 	.word	0x00bb8000
 80046d4:	007a1200 	.word	0x007a1200
 80046d8:	00f42400 	.word	0x00f42400

080046dc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e073      	b.n	80047da <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	7f5b      	ldrb	r3, [r3, #29]
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d105      	bne.n	8004708 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7fc fc32 	bl	8000f6c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f003 0310 	and.w	r3, r3, #16
 8004718:	2b10      	cmp	r3, #16
 800471a:	d055      	beq.n	80047c8 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	22ca      	movs	r2, #202	@ 0xca
 8004722:	625a      	str	r2, [r3, #36]	@ 0x24
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2253      	movs	r2, #83	@ 0x53
 800472a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 fa49 	bl	8004bc4 <RTC_EnterInitMode>
 8004732:	4603      	mov	r3, r0
 8004734:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004736:	7bfb      	ldrb	r3, [r7, #15]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d12c      	bne.n	8004796 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6812      	ldr	r2, [r2, #0]
 8004746:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800474a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800474e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6899      	ldr	r1, [r3, #8]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685a      	ldr	r2, [r3, #4]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	431a      	orrs	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	431a      	orrs	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	68d2      	ldr	r2, [r2, #12]
 8004776:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6919      	ldr	r1, [r3, #16]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	041a      	lsls	r2, r3, #16
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	430a      	orrs	r2, r1
 800478a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 fa50 	bl	8004c32 <RTC_ExitInitMode>
 8004792:	4603      	mov	r3, r0
 8004794:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004796:	7bfb      	ldrb	r3, [r7, #15]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d110      	bne.n	80047be <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80047aa:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	699a      	ldr	r2, [r3, #24]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	22ff      	movs	r2, #255	@ 0xff
 80047c4:	625a      	str	r2, [r3, #36]	@ 0x24
 80047c6:	e001      	b.n	80047cc <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80047c8:	2300      	movs	r3, #0
 80047ca:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80047cc:	7bfb      	ldrb	r3, [r7, #15]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d102      	bne.n	80047d8 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80047d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80047e2:	b590      	push	{r4, r7, lr}
 80047e4:	b087      	sub	sp, #28
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	60f8      	str	r0, [r7, #12]
 80047ea:	60b9      	str	r1, [r7, #8]
 80047ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80047ee:	2300      	movs	r3, #0
 80047f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	7f1b      	ldrb	r3, [r3, #28]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d101      	bne.n	80047fe <HAL_RTC_SetTime+0x1c>
 80047fa:	2302      	movs	r3, #2
 80047fc:	e087      	b.n	800490e <HAL_RTC_SetTime+0x12c>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2201      	movs	r2, #1
 8004802:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2202      	movs	r2, #2
 8004808:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d126      	bne.n	800485e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800481a:	2b00      	cmp	r3, #0
 800481c:	d102      	bne.n	8004824 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	2200      	movs	r2, #0
 8004822:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	4618      	mov	r0, r3
 800482a:	f000 fa27 	bl	8004c7c <RTC_ByteToBcd2>
 800482e:	4603      	mov	r3, r0
 8004830:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	785b      	ldrb	r3, [r3, #1]
 8004836:	4618      	mov	r0, r3
 8004838:	f000 fa20 	bl	8004c7c <RTC_ByteToBcd2>
 800483c:	4603      	mov	r3, r0
 800483e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004840:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	789b      	ldrb	r3, [r3, #2]
 8004846:	4618      	mov	r0, r3
 8004848:	f000 fa18 	bl	8004c7c <RTC_ByteToBcd2>
 800484c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800484e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	78db      	ldrb	r3, [r3, #3]
 8004856:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004858:	4313      	orrs	r3, r2
 800485a:	617b      	str	r3, [r7, #20]
 800485c:	e018      	b.n	8004890 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004868:	2b00      	cmp	r3, #0
 800486a:	d102      	bne.n	8004872 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	2200      	movs	r2, #0
 8004870:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	785b      	ldrb	r3, [r3, #1]
 800487c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800487e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004884:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	78db      	ldrb	r3, [r3, #3]
 800488a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800488c:	4313      	orrs	r3, r2
 800488e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	22ca      	movs	r2, #202	@ 0xca
 8004896:	625a      	str	r2, [r3, #36]	@ 0x24
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2253      	movs	r2, #83	@ 0x53
 800489e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f000 f98f 	bl	8004bc4 <RTC_EnterInitMode>
 80048a6:	4603      	mov	r3, r0
 80048a8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80048aa:	7cfb      	ldrb	r3, [r7, #19]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d120      	bne.n	80048f2 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80048ba:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80048be:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689a      	ldr	r2, [r3, #8]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80048ce:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6899      	ldr	r1, [r3, #8]
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	431a      	orrs	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	430a      	orrs	r2, r1
 80048e6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f000 f9a2 	bl	8004c32 <RTC_ExitInitMode>
 80048ee:	4603      	mov	r3, r0
 80048f0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80048f2:	7cfb      	ldrb	r3, [r7, #19]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d102      	bne.n	80048fe <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2201      	movs	r2, #1
 80048fc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	22ff      	movs	r2, #255	@ 0xff
 8004904:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	771a      	strb	r2, [r3, #28]

  return status;
 800490c:	7cfb      	ldrb	r3, [r7, #19]
}
 800490e:	4618      	mov	r0, r3
 8004910:	371c      	adds	r7, #28
 8004912:	46bd      	mov	sp, r7
 8004914:	bd90      	pop	{r4, r7, pc}

08004916 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b086      	sub	sp, #24
 800491a:	af00      	add	r7, sp, #0
 800491c:	60f8      	str	r0, [r7, #12]
 800491e:	60b9      	str	r1, [r7, #8]
 8004920:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004922:	2300      	movs	r3, #0
 8004924:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004948:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800494c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	0c1b      	lsrs	r3, r3, #16
 8004952:	b2db      	uxtb	r3, r3
 8004954:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004958:	b2da      	uxtb	r2, r3
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	0a1b      	lsrs	r3, r3, #8
 8004962:	b2db      	uxtb	r3, r3
 8004964:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004968:	b2da      	uxtb	r2, r3
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	b2db      	uxtb	r3, r3
 8004972:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004976:	b2da      	uxtb	r2, r3
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	0d9b      	lsrs	r3, r3, #22
 8004980:	b2db      	uxtb	r3, r3
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	b2da      	uxtb	r2, r3
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d11a      	bne.n	80049c8 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	4618      	mov	r0, r3
 8004998:	f000 f98e 	bl	8004cb8 <RTC_Bcd2ToByte>
 800499c:	4603      	mov	r3, r0
 800499e:	461a      	mov	r2, r3
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	785b      	ldrb	r3, [r3, #1]
 80049a8:	4618      	mov	r0, r3
 80049aa:	f000 f985 	bl	8004cb8 <RTC_Bcd2ToByte>
 80049ae:	4603      	mov	r3, r0
 80049b0:	461a      	mov	r2, r3
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	789b      	ldrb	r3, [r3, #2]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 f97c 	bl	8004cb8 <RTC_Bcd2ToByte>
 80049c0:	4603      	mov	r3, r0
 80049c2:	461a      	mov	r2, r3
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3718      	adds	r7, #24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80049d2:	b590      	push	{r4, r7, lr}
 80049d4:	b087      	sub	sp, #28
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	60f8      	str	r0, [r7, #12]
 80049da:	60b9      	str	r1, [r7, #8]
 80049dc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80049de:	2300      	movs	r3, #0
 80049e0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	7f1b      	ldrb	r3, [r3, #28]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d101      	bne.n	80049ee <HAL_RTC_SetDate+0x1c>
 80049ea:	2302      	movs	r3, #2
 80049ec:	e071      	b.n	8004ad2 <HAL_RTC_SetDate+0x100>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2201      	movs	r2, #1
 80049f2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2202      	movs	r2, #2
 80049f8:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d10e      	bne.n	8004a1e <HAL_RTC_SetDate+0x4c>
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	785b      	ldrb	r3, [r3, #1]
 8004a04:	f003 0310 	and.w	r3, r3, #16
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d008      	beq.n	8004a1e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	785b      	ldrb	r3, [r3, #1]
 8004a10:	f023 0310 	bic.w	r3, r3, #16
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	330a      	adds	r3, #10
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d11c      	bne.n	8004a5e <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	78db      	ldrb	r3, [r3, #3]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f000 f927 	bl	8004c7c <RTC_ByteToBcd2>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	785b      	ldrb	r3, [r3, #1]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 f920 	bl	8004c7c <RTC_ByteToBcd2>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004a40:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	789b      	ldrb	r3, [r3, #2]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 f918 	bl	8004c7c <RTC_ByteToBcd2>
 8004a4c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004a4e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	617b      	str	r3, [r7, #20]
 8004a5c:	e00e      	b.n	8004a7c <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	78db      	ldrb	r3, [r3, #3]
 8004a62:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	785b      	ldrb	r3, [r3, #1]
 8004a68:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004a6a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004a70:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	22ca      	movs	r2, #202	@ 0xca
 8004a82:	625a      	str	r2, [r3, #36]	@ 0x24
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2253      	movs	r2, #83	@ 0x53
 8004a8a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f000 f899 	bl	8004bc4 <RTC_EnterInitMode>
 8004a92:	4603      	mov	r3, r0
 8004a94:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004a96:	7cfb      	ldrb	r3, [r7, #19]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10c      	bne.n	8004ab6 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004aa6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004aaa:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f000 f8c0 	bl	8004c32 <RTC_ExitInitMode>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004ab6:	7cfb      	ldrb	r3, [r7, #19]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d102      	bne.n	8004ac2 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	22ff      	movs	r2, #255	@ 0xff
 8004ac8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	771a      	strb	r2, [r3, #28]

  return status;
 8004ad0:	7cfb      	ldrb	r3, [r7, #19]
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	371c      	adds	r7, #28
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd90      	pop	{r4, r7, pc}

08004ada <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b086      	sub	sp, #24
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	60f8      	str	r0, [r7, #12]
 8004ae2:	60b9      	str	r1, [r7, #8]
 8004ae4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004af4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004af8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	0c1b      	lsrs	r3, r3, #16
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	0a1b      	lsrs	r3, r3, #8
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	f003 031f 	and.w	r3, r3, #31
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b1c:	b2da      	uxtb	r2, r3
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	0b5b      	lsrs	r3, r3, #13
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	b2da      	uxtb	r2, r3
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d11a      	bne.n	8004b6e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	78db      	ldrb	r3, [r3, #3]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f000 f8bb 	bl	8004cb8 <RTC_Bcd2ToByte>
 8004b42:	4603      	mov	r3, r0
 8004b44:	461a      	mov	r2, r3
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	785b      	ldrb	r3, [r3, #1]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 f8b2 	bl	8004cb8 <RTC_Bcd2ToByte>
 8004b54:	4603      	mov	r3, r0
 8004b56:	461a      	mov	r2, r3
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	789b      	ldrb	r3, [r3, #2]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f000 f8a9 	bl	8004cb8 <RTC_Bcd2ToByte>
 8004b66:	4603      	mov	r3, r0
 8004b68:	461a      	mov	r2, r3
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3718      	adds	r7, #24
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a0d      	ldr	r2, [pc, #52]	@ (8004bc0 <HAL_RTC_WaitForSynchro+0x48>)
 8004b8a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b8c:	f7fc fca0 	bl	80014d0 <HAL_GetTick>
 8004b90:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004b92:	e009      	b.n	8004ba8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004b94:	f7fc fc9c 	bl	80014d0 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e007      	b.n	8004bb8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	f003 0320 	and.w	r3, r3, #32
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d0ee      	beq.n	8004b94 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	00017f5f 	.word	0x00017f5f

08004bc4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d122      	bne.n	8004c28 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68da      	ldr	r2, [r3, #12]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004bf0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004bf2:	f7fc fc6d 	bl	80014d0 <HAL_GetTick>
 8004bf6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004bf8:	e00c      	b.n	8004c14 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004bfa:	f7fc fc69 	bl	80014d0 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004c08:	d904      	bls.n	8004c14 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2204      	movs	r2, #4
 8004c0e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d102      	bne.n	8004c28 <RTC_EnterInitMode+0x64>
 8004c22:	7bfb      	ldrb	r3, [r7, #15]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d1e8      	bne.n	8004bfa <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b084      	sub	sp, #16
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68da      	ldr	r2, [r3, #12]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c4c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f003 0320 	and.w	r3, r3, #32
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10a      	bne.n	8004c72 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f7ff ff8b 	bl	8004b78 <HAL_RTC_WaitForSynchro>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d004      	beq.n	8004c72 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2204      	movs	r2, #4
 8004c6c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	4603      	mov	r3, r0
 8004c84:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004c8a:	e005      	b.n	8004c98 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004c92:	79fb      	ldrb	r3, [r7, #7]
 8004c94:	3b0a      	subs	r3, #10
 8004c96:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004c98:	79fb      	ldrb	r3, [r7, #7]
 8004c9a:	2b09      	cmp	r3, #9
 8004c9c:	d8f6      	bhi.n	8004c8c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	011b      	lsls	r3, r3, #4
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	79fb      	ldrb	r3, [r7, #7]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	b2db      	uxtb	r3, r3
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8004cc6:	79fb      	ldrb	r3, [r7, #7]
 8004cc8:	091b      	lsrs	r3, r3, #4
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	461a      	mov	r2, r3
 8004cce:	4613      	mov	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4413      	add	r3, r2
 8004cd4:	005b      	lsls	r3, r3, #1
 8004cd6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	b2da      	uxtb	r2, r3
 8004cdc:	79fb      	ldrb	r3, [r7, #7]
 8004cde:	f003 030f 	and.w	r3, r3, #15
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	4413      	add	r3, r2
 8004ce6:	b2db      	uxtb	r3, r3
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3714      	adds	r7, #20
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e07b      	b.n	8004dfe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d108      	bne.n	8004d20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d16:	d009      	beq.n	8004d2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	61da      	str	r2, [r3, #28]
 8004d1e:	e005      	b.n	8004d2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d106      	bne.n	8004d4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7fc f972 	bl	8001030 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004d74:	431a      	orrs	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	431a      	orrs	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	431a      	orrs	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004da6:	431a      	orrs	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004db0:	ea42 0103 	orr.w	r1, r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	0c1b      	lsrs	r3, r3, #16
 8004dca:	f003 0104 	and.w	r1, r3, #4
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd2:	f003 0210 	and.w	r2, r3, #16
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	69da      	ldr	r2, [r3, #28]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004dec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3708      	adds	r7, #8
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b082      	sub	sp, #8
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d101      	bne.n	8004e18 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e042      	b.n	8004e9e <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d106      	bne.n	8004e32 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f7fc fa43 	bl	80012b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2224      	movs	r2, #36	@ 0x24
 8004e36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68da      	ldr	r2, [r3, #12]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e48:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f82c 	bl	8004ea8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	691a      	ldr	r2, [r3, #16]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e5e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	695a      	ldr	r2, [r3, #20]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e6e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68da      	ldr	r2, [r3, #12]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e7e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2220      	movs	r2, #32
 8004e8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2220      	movs	r2, #32
 8004e92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3708      	adds	r7, #8
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
	...

08004ea8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004eac:	b0c0      	sub	sp, #256	@ 0x100
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ec4:	68d9      	ldr	r1, [r3, #12]
 8004ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	ea40 0301 	orr.w	r3, r0, r1
 8004ed0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ed6:	689a      	ldr	r2, [r3, #8]
 8004ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eec:	69db      	ldr	r3, [r3, #28]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004f00:	f021 010c 	bic.w	r1, r1, #12
 8004f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004f0e:	430b      	orrs	r3, r1
 8004f10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f22:	6999      	ldr	r1, [r3, #24]
 8004f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	ea40 0301 	orr.w	r3, r0, r1
 8004f2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	4b8f      	ldr	r3, [pc, #572]	@ (8005174 <UART_SetConfig+0x2cc>)
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d005      	beq.n	8004f48 <UART_SetConfig+0xa0>
 8004f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	4b8d      	ldr	r3, [pc, #564]	@ (8005178 <UART_SetConfig+0x2d0>)
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d104      	bne.n	8004f52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f48:	f7ff fa72 	bl	8004430 <HAL_RCC_GetPCLK2Freq>
 8004f4c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004f50:	e003      	b.n	8004f5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f52:	f7ff fa59 	bl	8004408 <HAL_RCC_GetPCLK1Freq>
 8004f56:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f5e:	69db      	ldr	r3, [r3, #28]
 8004f60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f64:	f040 810c 	bne.w	8005180 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004f72:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004f76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004f7a:	4622      	mov	r2, r4
 8004f7c:	462b      	mov	r3, r5
 8004f7e:	1891      	adds	r1, r2, r2
 8004f80:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004f82:	415b      	adcs	r3, r3
 8004f84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004f8a:	4621      	mov	r1, r4
 8004f8c:	eb12 0801 	adds.w	r8, r2, r1
 8004f90:	4629      	mov	r1, r5
 8004f92:	eb43 0901 	adc.w	r9, r3, r1
 8004f96:	f04f 0200 	mov.w	r2, #0
 8004f9a:	f04f 0300 	mov.w	r3, #0
 8004f9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fa2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fa6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004faa:	4690      	mov	r8, r2
 8004fac:	4699      	mov	r9, r3
 8004fae:	4623      	mov	r3, r4
 8004fb0:	eb18 0303 	adds.w	r3, r8, r3
 8004fb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004fb8:	462b      	mov	r3, r5
 8004fba:	eb49 0303 	adc.w	r3, r9, r3
 8004fbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004fce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004fd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	18db      	adds	r3, r3, r3
 8004fda:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fdc:	4613      	mov	r3, r2
 8004fde:	eb42 0303 	adc.w	r3, r2, r3
 8004fe2:	657b      	str	r3, [r7, #84]	@ 0x54
 8004fe4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004fe8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004fec:	f7fb f940 	bl	8000270 <__aeabi_uldivmod>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	4b61      	ldr	r3, [pc, #388]	@ (800517c <UART_SetConfig+0x2d4>)
 8004ff6:	fba3 2302 	umull	r2, r3, r3, r2
 8004ffa:	095b      	lsrs	r3, r3, #5
 8004ffc:	011c      	lsls	r4, r3, #4
 8004ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005002:	2200      	movs	r2, #0
 8005004:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005008:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800500c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005010:	4642      	mov	r2, r8
 8005012:	464b      	mov	r3, r9
 8005014:	1891      	adds	r1, r2, r2
 8005016:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005018:	415b      	adcs	r3, r3
 800501a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800501c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005020:	4641      	mov	r1, r8
 8005022:	eb12 0a01 	adds.w	sl, r2, r1
 8005026:	4649      	mov	r1, r9
 8005028:	eb43 0b01 	adc.w	fp, r3, r1
 800502c:	f04f 0200 	mov.w	r2, #0
 8005030:	f04f 0300 	mov.w	r3, #0
 8005034:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005038:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800503c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005040:	4692      	mov	sl, r2
 8005042:	469b      	mov	fp, r3
 8005044:	4643      	mov	r3, r8
 8005046:	eb1a 0303 	adds.w	r3, sl, r3
 800504a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800504e:	464b      	mov	r3, r9
 8005050:	eb4b 0303 	adc.w	r3, fp, r3
 8005054:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005064:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005068:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800506c:	460b      	mov	r3, r1
 800506e:	18db      	adds	r3, r3, r3
 8005070:	643b      	str	r3, [r7, #64]	@ 0x40
 8005072:	4613      	mov	r3, r2
 8005074:	eb42 0303 	adc.w	r3, r2, r3
 8005078:	647b      	str	r3, [r7, #68]	@ 0x44
 800507a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800507e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005082:	f7fb f8f5 	bl	8000270 <__aeabi_uldivmod>
 8005086:	4602      	mov	r2, r0
 8005088:	460b      	mov	r3, r1
 800508a:	4611      	mov	r1, r2
 800508c:	4b3b      	ldr	r3, [pc, #236]	@ (800517c <UART_SetConfig+0x2d4>)
 800508e:	fba3 2301 	umull	r2, r3, r3, r1
 8005092:	095b      	lsrs	r3, r3, #5
 8005094:	2264      	movs	r2, #100	@ 0x64
 8005096:	fb02 f303 	mul.w	r3, r2, r3
 800509a:	1acb      	subs	r3, r1, r3
 800509c:	00db      	lsls	r3, r3, #3
 800509e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80050a2:	4b36      	ldr	r3, [pc, #216]	@ (800517c <UART_SetConfig+0x2d4>)
 80050a4:	fba3 2302 	umull	r2, r3, r3, r2
 80050a8:	095b      	lsrs	r3, r3, #5
 80050aa:	005b      	lsls	r3, r3, #1
 80050ac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80050b0:	441c      	add	r4, r3
 80050b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050b6:	2200      	movs	r2, #0
 80050b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80050bc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80050c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80050c4:	4642      	mov	r2, r8
 80050c6:	464b      	mov	r3, r9
 80050c8:	1891      	adds	r1, r2, r2
 80050ca:	63b9      	str	r1, [r7, #56]	@ 0x38
 80050cc:	415b      	adcs	r3, r3
 80050ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80050d4:	4641      	mov	r1, r8
 80050d6:	1851      	adds	r1, r2, r1
 80050d8:	6339      	str	r1, [r7, #48]	@ 0x30
 80050da:	4649      	mov	r1, r9
 80050dc:	414b      	adcs	r3, r1
 80050de:	637b      	str	r3, [r7, #52]	@ 0x34
 80050e0:	f04f 0200 	mov.w	r2, #0
 80050e4:	f04f 0300 	mov.w	r3, #0
 80050e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80050ec:	4659      	mov	r1, fp
 80050ee:	00cb      	lsls	r3, r1, #3
 80050f0:	4651      	mov	r1, sl
 80050f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050f6:	4651      	mov	r1, sl
 80050f8:	00ca      	lsls	r2, r1, #3
 80050fa:	4610      	mov	r0, r2
 80050fc:	4619      	mov	r1, r3
 80050fe:	4603      	mov	r3, r0
 8005100:	4642      	mov	r2, r8
 8005102:	189b      	adds	r3, r3, r2
 8005104:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005108:	464b      	mov	r3, r9
 800510a:	460a      	mov	r2, r1
 800510c:	eb42 0303 	adc.w	r3, r2, r3
 8005110:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005120:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005124:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005128:	460b      	mov	r3, r1
 800512a:	18db      	adds	r3, r3, r3
 800512c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800512e:	4613      	mov	r3, r2
 8005130:	eb42 0303 	adc.w	r3, r2, r3
 8005134:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005136:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800513a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800513e:	f7fb f897 	bl	8000270 <__aeabi_uldivmod>
 8005142:	4602      	mov	r2, r0
 8005144:	460b      	mov	r3, r1
 8005146:	4b0d      	ldr	r3, [pc, #52]	@ (800517c <UART_SetConfig+0x2d4>)
 8005148:	fba3 1302 	umull	r1, r3, r3, r2
 800514c:	095b      	lsrs	r3, r3, #5
 800514e:	2164      	movs	r1, #100	@ 0x64
 8005150:	fb01 f303 	mul.w	r3, r1, r3
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	00db      	lsls	r3, r3, #3
 8005158:	3332      	adds	r3, #50	@ 0x32
 800515a:	4a08      	ldr	r2, [pc, #32]	@ (800517c <UART_SetConfig+0x2d4>)
 800515c:	fba2 2303 	umull	r2, r3, r2, r3
 8005160:	095b      	lsrs	r3, r3, #5
 8005162:	f003 0207 	and.w	r2, r3, #7
 8005166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4422      	add	r2, r4
 800516e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005170:	e106      	b.n	8005380 <UART_SetConfig+0x4d8>
 8005172:	bf00      	nop
 8005174:	40011000 	.word	0x40011000
 8005178:	40011400 	.word	0x40011400
 800517c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005180:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005184:	2200      	movs	r2, #0
 8005186:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800518a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800518e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005192:	4642      	mov	r2, r8
 8005194:	464b      	mov	r3, r9
 8005196:	1891      	adds	r1, r2, r2
 8005198:	6239      	str	r1, [r7, #32]
 800519a:	415b      	adcs	r3, r3
 800519c:	627b      	str	r3, [r7, #36]	@ 0x24
 800519e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051a2:	4641      	mov	r1, r8
 80051a4:	1854      	adds	r4, r2, r1
 80051a6:	4649      	mov	r1, r9
 80051a8:	eb43 0501 	adc.w	r5, r3, r1
 80051ac:	f04f 0200 	mov.w	r2, #0
 80051b0:	f04f 0300 	mov.w	r3, #0
 80051b4:	00eb      	lsls	r3, r5, #3
 80051b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051ba:	00e2      	lsls	r2, r4, #3
 80051bc:	4614      	mov	r4, r2
 80051be:	461d      	mov	r5, r3
 80051c0:	4643      	mov	r3, r8
 80051c2:	18e3      	adds	r3, r4, r3
 80051c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80051c8:	464b      	mov	r3, r9
 80051ca:	eb45 0303 	adc.w	r3, r5, r3
 80051ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80051d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80051de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80051e2:	f04f 0200 	mov.w	r2, #0
 80051e6:	f04f 0300 	mov.w	r3, #0
 80051ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80051ee:	4629      	mov	r1, r5
 80051f0:	008b      	lsls	r3, r1, #2
 80051f2:	4621      	mov	r1, r4
 80051f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051f8:	4621      	mov	r1, r4
 80051fa:	008a      	lsls	r2, r1, #2
 80051fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005200:	f7fb f836 	bl	8000270 <__aeabi_uldivmod>
 8005204:	4602      	mov	r2, r0
 8005206:	460b      	mov	r3, r1
 8005208:	4b60      	ldr	r3, [pc, #384]	@ (800538c <UART_SetConfig+0x4e4>)
 800520a:	fba3 2302 	umull	r2, r3, r3, r2
 800520e:	095b      	lsrs	r3, r3, #5
 8005210:	011c      	lsls	r4, r3, #4
 8005212:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005216:	2200      	movs	r2, #0
 8005218:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800521c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005220:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005224:	4642      	mov	r2, r8
 8005226:	464b      	mov	r3, r9
 8005228:	1891      	adds	r1, r2, r2
 800522a:	61b9      	str	r1, [r7, #24]
 800522c:	415b      	adcs	r3, r3
 800522e:	61fb      	str	r3, [r7, #28]
 8005230:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005234:	4641      	mov	r1, r8
 8005236:	1851      	adds	r1, r2, r1
 8005238:	6139      	str	r1, [r7, #16]
 800523a:	4649      	mov	r1, r9
 800523c:	414b      	adcs	r3, r1
 800523e:	617b      	str	r3, [r7, #20]
 8005240:	f04f 0200 	mov.w	r2, #0
 8005244:	f04f 0300 	mov.w	r3, #0
 8005248:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800524c:	4659      	mov	r1, fp
 800524e:	00cb      	lsls	r3, r1, #3
 8005250:	4651      	mov	r1, sl
 8005252:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005256:	4651      	mov	r1, sl
 8005258:	00ca      	lsls	r2, r1, #3
 800525a:	4610      	mov	r0, r2
 800525c:	4619      	mov	r1, r3
 800525e:	4603      	mov	r3, r0
 8005260:	4642      	mov	r2, r8
 8005262:	189b      	adds	r3, r3, r2
 8005264:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005268:	464b      	mov	r3, r9
 800526a:	460a      	mov	r2, r1
 800526c:	eb42 0303 	adc.w	r3, r2, r3
 8005270:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800527e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005280:	f04f 0200 	mov.w	r2, #0
 8005284:	f04f 0300 	mov.w	r3, #0
 8005288:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800528c:	4649      	mov	r1, r9
 800528e:	008b      	lsls	r3, r1, #2
 8005290:	4641      	mov	r1, r8
 8005292:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005296:	4641      	mov	r1, r8
 8005298:	008a      	lsls	r2, r1, #2
 800529a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800529e:	f7fa ffe7 	bl	8000270 <__aeabi_uldivmod>
 80052a2:	4602      	mov	r2, r0
 80052a4:	460b      	mov	r3, r1
 80052a6:	4611      	mov	r1, r2
 80052a8:	4b38      	ldr	r3, [pc, #224]	@ (800538c <UART_SetConfig+0x4e4>)
 80052aa:	fba3 2301 	umull	r2, r3, r3, r1
 80052ae:	095b      	lsrs	r3, r3, #5
 80052b0:	2264      	movs	r2, #100	@ 0x64
 80052b2:	fb02 f303 	mul.w	r3, r2, r3
 80052b6:	1acb      	subs	r3, r1, r3
 80052b8:	011b      	lsls	r3, r3, #4
 80052ba:	3332      	adds	r3, #50	@ 0x32
 80052bc:	4a33      	ldr	r2, [pc, #204]	@ (800538c <UART_SetConfig+0x4e4>)
 80052be:	fba2 2303 	umull	r2, r3, r2, r3
 80052c2:	095b      	lsrs	r3, r3, #5
 80052c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052c8:	441c      	add	r4, r3
 80052ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052ce:	2200      	movs	r2, #0
 80052d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80052d2:	677a      	str	r2, [r7, #116]	@ 0x74
 80052d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80052d8:	4642      	mov	r2, r8
 80052da:	464b      	mov	r3, r9
 80052dc:	1891      	adds	r1, r2, r2
 80052de:	60b9      	str	r1, [r7, #8]
 80052e0:	415b      	adcs	r3, r3
 80052e2:	60fb      	str	r3, [r7, #12]
 80052e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052e8:	4641      	mov	r1, r8
 80052ea:	1851      	adds	r1, r2, r1
 80052ec:	6039      	str	r1, [r7, #0]
 80052ee:	4649      	mov	r1, r9
 80052f0:	414b      	adcs	r3, r1
 80052f2:	607b      	str	r3, [r7, #4]
 80052f4:	f04f 0200 	mov.w	r2, #0
 80052f8:	f04f 0300 	mov.w	r3, #0
 80052fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005300:	4659      	mov	r1, fp
 8005302:	00cb      	lsls	r3, r1, #3
 8005304:	4651      	mov	r1, sl
 8005306:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800530a:	4651      	mov	r1, sl
 800530c:	00ca      	lsls	r2, r1, #3
 800530e:	4610      	mov	r0, r2
 8005310:	4619      	mov	r1, r3
 8005312:	4603      	mov	r3, r0
 8005314:	4642      	mov	r2, r8
 8005316:	189b      	adds	r3, r3, r2
 8005318:	66bb      	str	r3, [r7, #104]	@ 0x68
 800531a:	464b      	mov	r3, r9
 800531c:	460a      	mov	r2, r1
 800531e:	eb42 0303 	adc.w	r3, r2, r3
 8005322:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	663b      	str	r3, [r7, #96]	@ 0x60
 800532e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005330:	f04f 0200 	mov.w	r2, #0
 8005334:	f04f 0300 	mov.w	r3, #0
 8005338:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800533c:	4649      	mov	r1, r9
 800533e:	008b      	lsls	r3, r1, #2
 8005340:	4641      	mov	r1, r8
 8005342:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005346:	4641      	mov	r1, r8
 8005348:	008a      	lsls	r2, r1, #2
 800534a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800534e:	f7fa ff8f 	bl	8000270 <__aeabi_uldivmod>
 8005352:	4602      	mov	r2, r0
 8005354:	460b      	mov	r3, r1
 8005356:	4b0d      	ldr	r3, [pc, #52]	@ (800538c <UART_SetConfig+0x4e4>)
 8005358:	fba3 1302 	umull	r1, r3, r3, r2
 800535c:	095b      	lsrs	r3, r3, #5
 800535e:	2164      	movs	r1, #100	@ 0x64
 8005360:	fb01 f303 	mul.w	r3, r1, r3
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	011b      	lsls	r3, r3, #4
 8005368:	3332      	adds	r3, #50	@ 0x32
 800536a:	4a08      	ldr	r2, [pc, #32]	@ (800538c <UART_SetConfig+0x4e4>)
 800536c:	fba2 2303 	umull	r2, r3, r2, r3
 8005370:	095b      	lsrs	r3, r3, #5
 8005372:	f003 020f 	and.w	r2, r3, #15
 8005376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4422      	add	r2, r4
 800537e:	609a      	str	r2, [r3, #8]
}
 8005380:	bf00      	nop
 8005382:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005386:	46bd      	mov	sp, r7
 8005388:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800538c:	51eb851f 	.word	0x51eb851f

08005390 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005394:	4904      	ldr	r1, [pc, #16]	@ (80053a8 <MX_FATFS_Init+0x18>)
 8005396:	4805      	ldr	r0, [pc, #20]	@ (80053ac <MX_FATFS_Init+0x1c>)
 8005398:	f001 fb46 	bl	8006a28 <FATFS_LinkDriver>
 800539c:	4603      	mov	r3, r0
 800539e:	461a      	mov	r2, r3
 80053a0:	4b03      	ldr	r3, [pc, #12]	@ (80053b0 <MX_FATFS_Init+0x20>)
 80053a2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80053a4:	bf00      	nop
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	20000380 	.word	0x20000380
 80053ac:	2000000c 	.word	0x2000000c
 80053b0:	2000037c 	.word	0x2000037c

080053b4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	4603      	mov	r3, r0
 80053bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80053be:	4b06      	ldr	r3, [pc, #24]	@ (80053d8 <USER_initialize+0x24>)
 80053c0:	2201      	movs	r2, #1
 80053c2:	701a      	strb	r2, [r3, #0]
    return Stat;
 80053c4:	4b04      	ldr	r3, [pc, #16]	@ (80053d8 <USER_initialize+0x24>)
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	20000009 	.word	0x20000009

080053dc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	4603      	mov	r3, r0
 80053e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80053e6:	4b06      	ldr	r3, [pc, #24]	@ (8005400 <USER_status+0x24>)
 80053e8:	2201      	movs	r2, #1
 80053ea:	701a      	strb	r2, [r3, #0]
    return Stat;
 80053ec:	4b04      	ldr	r3, [pc, #16]	@ (8005400 <USER_status+0x24>)
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	20000009 	.word	0x20000009

08005404 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	60b9      	str	r1, [r7, #8]
 800540c:	607a      	str	r2, [r7, #4]
 800540e:	603b      	str	r3, [r7, #0]
 8005410:	4603      	mov	r3, r0
 8005412:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8005414:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8005416:	4618      	mov	r0, r3
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005422:	b480      	push	{r7}
 8005424:	b085      	sub	sp, #20
 8005426:	af00      	add	r7, sp, #0
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
 800542c:	603b      	str	r3, [r7, #0]
 800542e:	4603      	mov	r3, r0
 8005430:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8005432:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8005434:	4618      	mov	r0, r3
 8005436:	3714      	adds	r7, #20
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	4603      	mov	r3, r0
 8005448:	603a      	str	r2, [r7, #0]
 800544a:	71fb      	strb	r3, [r7, #7]
 800544c:	460b      	mov	r3, r1
 800544e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	73fb      	strb	r3, [r7, #15]
    return res;
 8005454:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8005456:	4618      	mov	r0, r3
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <ht16k33_init>:

} Ht16k33_Config;


Ht16k33_Config_t* ht16k33_init(I2C_HandleTypeDef* const hi2c, const uint8_t addrs)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b084      	sub	sp, #16
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
 800546a:	460b      	mov	r3, r1
 800546c:	70fb      	strb	r3, [r7, #3]
  Ht16k33_Config_t* pConfig = malloc(sizeof(Ht16k33_Config_t));
 800546e:	200c      	movs	r0, #12
 8005470:	f001 faea 	bl	8006a48 <malloc>
 8005474:	4603      	mov	r3, r0
 8005476:	60fb      	str	r3, [r7, #12]
  pConfig->i2cAddrs = addrs << 1;
 8005478:	78fb      	ldrb	r3, [r7, #3]
 800547a:	005b      	lsls	r3, r3, #1
 800547c:	b2da      	uxtb	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	711a      	strb	r2, [r3, #4]
  pConfig->hi2c = hi2c;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	601a      	str	r2, [r3, #0]

  pConfig->hSysSetupReg.regAddrs        = SYSTEM_SETUP_REG_ADDRESS;
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	7953      	ldrb	r3, [r2, #5]
 800548c:	2102      	movs	r1, #2
 800548e:	f361 1307 	bfi	r3, r1, #4, #4
 8005492:	7153      	strb	r3, [r2, #5]
  pConfig->hDisplayReg.regAddrs         = DISPLAY_SETUP_REG_ADDRESS;
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	7993      	ldrb	r3, [r2, #6]
 8005498:	2108      	movs	r1, #8
 800549a:	f361 1307 	bfi	r3, r1, #4, #4
 800549e:	7193      	strb	r3, [r2, #6]
  pConfig->hDimmingSetReg.regAddrs      = DIMMING_SET_REG_ADDRESS;
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	79d3      	ldrb	r3, [r2, #7]
 80054a4:	210e      	movs	r1, #14
 80054a6:	f361 1307 	bfi	r3, r1, #4, #4
 80054aa:	71d3      	strb	r3, [r2, #7]
  pConfig->hDisplayAddrsPtrReg.regAddrs = DISPLAY_DATA_REG_ADDRESS;
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	7a13      	ldrb	r3, [r2, #8]
 80054b0:	f36f 1307 	bfc	r3, #4, #4
 80054b4:	7213      	strb	r3, [r2, #8]
  return pConfig;
 80054b6:	68fb      	ldr	r3, [r7, #12]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <ht16k33_setSystemSetup>:

Ht16k33_Status_t ht16k33_setSystemSetup(Ht16k33_Config_t* const pConfig, const Ht16k33_DisplayStatus_e displayStatus)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af02      	add	r7, sp, #8
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	460b      	mov	r3, r1
 80054ca:	70fb      	strb	r3, [r7, #3]
  pConfig->hSysSetupReg.s = displayStatus;
 80054cc:	78fb      	ldrb	r3, [r7, #3]
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	b2d9      	uxtb	r1, r3
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	7953      	ldrb	r3, [r2, #5]
 80054d8:	f361 0300 	bfi	r3, r1, #0, #1
 80054dc:	7153      	strb	r3, [r2, #5]

  uint8_t sysSetupReg = 0;
 80054de:	2300      	movs	r3, #0
 80054e0:	73fb      	strb	r3, [r7, #15]
  sysSetupReg |= (pConfig->hSysSetupReg.s & 0x01) << 0;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	795b      	ldrb	r3, [r3, #5]
 80054e6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	b25b      	sxtb	r3, r3
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	b25a      	sxtb	r2, r3
 80054f4:	7bfb      	ldrb	r3, [r7, #15]
 80054f6:	b25b      	sxtb	r3, r3
 80054f8:	4313      	orrs	r3, r2
 80054fa:	b25b      	sxtb	r3, r3
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	73fb      	strb	r3, [r7, #15]
  sysSetupReg |= (pConfig->hSysSetupReg.regAddrs & 0x0F) << 4;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	795b      	ldrb	r3, [r3, #5]
 8005504:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005508:	b2db      	uxtb	r3, r3
 800550a:	011b      	lsls	r3, r3, #4
 800550c:	b25a      	sxtb	r2, r3
 800550e:	7bfb      	ldrb	r3, [r7, #15]
 8005510:	b25b      	sxtb	r3, r3
 8005512:	4313      	orrs	r3, r2
 8005514:	b25b      	sxtb	r3, r3
 8005516:	b2db      	uxtb	r3, r3
 8005518:	73fb      	strb	r3, [r7, #15]

  return
      HAL_I2C_Master_Transmit(pConfig->hi2c, pConfig->i2cAddrs, &sysSetupReg, sizeof(sysSetupReg),HAL_MAX_DELAY);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6818      	ldr	r0, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	791b      	ldrb	r3, [r3, #4]
 8005522:	4619      	mov	r1, r3
 8005524:	f107 020f 	add.w	r2, r7, #15
 8005528:	f04f 33ff 	mov.w	r3, #4294967295
 800552c:	9300      	str	r3, [sp, #0]
 800552e:	2301      	movs	r3, #1
 8005530:	f7fc ffa4 	bl	800247c <HAL_I2C_Master_Transmit>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	bf14      	ite	ne
 800553a:	2301      	movne	r3, #1
 800553c:	2300      	moveq	r3, #0
 800553e:	b2db      	uxtb	r3, r3
}
 8005540:	4618      	mov	r0, r3
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <ht16k33_setDisplaySetup>:

Ht16k33_Status_t ht16k33_setDisplaySetup(Ht16k33_Config_t* const pConfig, const Ht16k33_DisplayStatus_e dispStatus,
    const Ht16k33_BlinkingFreq_e frequency)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af02      	add	r7, sp, #8
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	460b      	mov	r3, r1
 8005552:	70fb      	strb	r3, [r7, #3]
 8005554:	4613      	mov	r3, r2
 8005556:	70bb      	strb	r3, [r7, #2]
  pConfig->hDisplayReg.d = dispStatus;
 8005558:	78fb      	ldrb	r3, [r7, #3]
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	b2d9      	uxtb	r1, r3
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	7993      	ldrb	r3, [r2, #6]
 8005564:	f361 0300 	bfi	r3, r1, #0, #1
 8005568:	7193      	strb	r3, [r2, #6]
  pConfig->hDisplayReg.b = frequency;
 800556a:	78bb      	ldrb	r3, [r7, #2]
 800556c:	f003 0303 	and.w	r3, r3, #3
 8005570:	b2d9      	uxtb	r1, r3
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	7993      	ldrb	r3, [r2, #6]
 8005576:	f361 0342 	bfi	r3, r1, #1, #2
 800557a:	7193      	strb	r3, [r2, #6]

  uint8_t dispSetupReg = 0;
 800557c:	2300      	movs	r3, #0
 800557e:	73fb      	strb	r3, [r7, #15]

  dispSetupReg |= (pConfig->hDisplayReg.d & 0x01) << 0;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	799b      	ldrb	r3, [r3, #6]
 8005584:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005588:	b2db      	uxtb	r3, r3
 800558a:	b25b      	sxtb	r3, r3
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	b25a      	sxtb	r2, r3
 8005592:	7bfb      	ldrb	r3, [r7, #15]
 8005594:	b25b      	sxtb	r3, r3
 8005596:	4313      	orrs	r3, r2
 8005598:	b25b      	sxtb	r3, r3
 800559a:	b2db      	uxtb	r3, r3
 800559c:	73fb      	strb	r3, [r7, #15]
  dispSetupReg |= (pConfig->hDisplayReg.b & 0x03) << 1;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	799b      	ldrb	r3, [r3, #6]
 80055a2:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	005b      	lsls	r3, r3, #1
 80055aa:	b25b      	sxtb	r3, r3
 80055ac:	f003 0306 	and.w	r3, r3, #6
 80055b0:	b25a      	sxtb	r2, r3
 80055b2:	7bfb      	ldrb	r3, [r7, #15]
 80055b4:	b25b      	sxtb	r3, r3
 80055b6:	4313      	orrs	r3, r2
 80055b8:	b25b      	sxtb	r3, r3
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	73fb      	strb	r3, [r7, #15]
  dispSetupReg |= (pConfig->hDisplayReg.regAddrs & 0x0F) << 4;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	799b      	ldrb	r3, [r3, #6]
 80055c2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	011b      	lsls	r3, r3, #4
 80055ca:	b25a      	sxtb	r2, r3
 80055cc:	7bfb      	ldrb	r3, [r7, #15]
 80055ce:	b25b      	sxtb	r3, r3
 80055d0:	4313      	orrs	r3, r2
 80055d2:	b25b      	sxtb	r3, r3
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	73fb      	strb	r3, [r7, #15]

  return
      HAL_I2C_Master_Transmit(pConfig->hi2c, pConfig->i2cAddrs, &dispSetupReg, sizeof(dispSetupReg),HAL_MAX_DELAY);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6818      	ldr	r0, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	791b      	ldrb	r3, [r3, #4]
 80055e0:	4619      	mov	r1, r3
 80055e2:	f107 020f 	add.w	r2, r7, #15
 80055e6:	f04f 33ff 	mov.w	r3, #4294967295
 80055ea:	9300      	str	r3, [sp, #0]
 80055ec:	2301      	movs	r3, #1
 80055ee:	f7fc ff45 	bl	800247c <HAL_I2C_Master_Transmit>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	bf14      	ite	ne
 80055f8:	2301      	movne	r3, #1
 80055fa:	2300      	moveq	r3, #0
 80055fc:	b2db      	uxtb	r3, r3
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <ht16k33_updateDisplayData>:
      HAL_I2C_Master_Transmit(pConfig->hi2c, pConfig->i2cAddrs, &dimmingSetReg, sizeof(dimmingSetReg),HAL_MAX_DELAY);
}

Ht16k33_Status_t ht16k33_updateDisplayData (Ht16k33_Config_t* const pConfig, const uint8_t ramAddrs,
    uint8_t* const dispDataBuffer, const uint8_t dispDataBufferSize)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b088      	sub	sp, #32
 800560a:	af02      	add	r7, sp, #8
 800560c:	60f8      	str	r0, [r7, #12]
 800560e:	607a      	str	r2, [r7, #4]
 8005610:	461a      	mov	r2, r3
 8005612:	460b      	mov	r3, r1
 8005614:	72fb      	strb	r3, [r7, #11]
 8005616:	4613      	mov	r3, r2
 8005618:	72bb      	strb	r3, [r7, #10]
  uint8_t* transmitBuffer     = malloc (dispDataBufferSize + 1);
 800561a:	7abb      	ldrb	r3, [r7, #10]
 800561c:	3301      	adds	r3, #1
 800561e:	4618      	mov	r0, r3
 8005620:	f001 fa12 	bl	8006a48 <malloc>
 8005624:	4603      	mov	r3, r0
 8005626:	617b      	str	r3, [r7, #20]
  Ht16k33_Status_t isSuccess   = 0;
 8005628:	2300      	movs	r3, #0
 800562a:	74fb      	strb	r3, [r7, #19]
  uint8_t dispDataAddrsPtrReg = 0;
 800562c:	2300      	movs	r3, #0
 800562e:	74bb      	strb	r3, [r7, #18]

  pConfig->hDisplayAddrsPtrReg.a = ramAddrs;
 8005630:	7afb      	ldrb	r3, [r7, #11]
 8005632:	f003 030f 	and.w	r3, r3, #15
 8005636:	b2d9      	uxtb	r1, r3
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	7a13      	ldrb	r3, [r2, #8]
 800563c:	f361 0303 	bfi	r3, r1, #0, #4
 8005640:	7213      	strb	r3, [r2, #8]

  dispDataAddrsPtrReg |= (pConfig->hDisplayAddrsPtrReg.a & 0x0F) << 0;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	7a1b      	ldrb	r3, [r3, #8]
 8005646:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800564a:	b2db      	uxtb	r3, r3
 800564c:	b25b      	sxtb	r3, r3
 800564e:	f003 030f 	and.w	r3, r3, #15
 8005652:	b25a      	sxtb	r2, r3
 8005654:	7cbb      	ldrb	r3, [r7, #18]
 8005656:	b25b      	sxtb	r3, r3
 8005658:	4313      	orrs	r3, r2
 800565a:	b25b      	sxtb	r3, r3
 800565c:	b2db      	uxtb	r3, r3
 800565e:	74bb      	strb	r3, [r7, #18]
  dispDataAddrsPtrReg |= (pConfig->hDisplayAddrsPtrReg.regAddrs & 0x0F) << 4;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	7a1b      	ldrb	r3, [r3, #8]
 8005664:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005668:	b2db      	uxtb	r3, r3
 800566a:	011b      	lsls	r3, r3, #4
 800566c:	b25a      	sxtb	r2, r3
 800566e:	7cbb      	ldrb	r3, [r7, #18]
 8005670:	b25b      	sxtb	r3, r3
 8005672:	4313      	orrs	r3, r2
 8005674:	b25b      	sxtb	r3, r3
 8005676:	b2db      	uxtb	r3, r3
 8005678:	74bb      	strb	r3, [r7, #18]

  memcpy(transmitBuffer, &dispDataAddrsPtrReg, sizeof(dispDataAddrsPtrReg));
 800567a:	7cba      	ldrb	r2, [r7, #18]
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	701a      	strb	r2, [r3, #0]
  memcpy(transmitBuffer + 1, dispDataBuffer, dispDataBufferSize);
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	3301      	adds	r3, #1
 8005684:	7aba      	ldrb	r2, [r7, #10]
 8005686:	6879      	ldr	r1, [r7, #4]
 8005688:	4618      	mov	r0, r3
 800568a:	f001 fb13 	bl	8006cb4 <memcpy>

  isSuccess = HAL_I2C_Master_Transmit(pConfig->hi2c, pConfig->i2cAddrs, transmitBuffer, (dispDataBufferSize + 1),
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6818      	ldr	r0, [r3, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	791b      	ldrb	r3, [r3, #4]
 8005696:	4619      	mov	r1, r3
 8005698:	7abb      	ldrb	r3, [r7, #10]
 800569a:	b29b      	uxth	r3, r3
 800569c:	3301      	adds	r3, #1
 800569e:	b29b      	uxth	r3, r3
 80056a0:	f04f 32ff 	mov.w	r2, #4294967295
 80056a4:	9200      	str	r2, [sp, #0]
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	f7fc fee8 	bl	800247c <HAL_I2C_Master_Transmit>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	bf14      	ite	ne
 80056b2:	2301      	movne	r3, #1
 80056b4:	2300      	moveq	r3, #0
 80056b6:	74fb      	strb	r3, [r7, #19]
      HAL_MAX_DELAY);

  free(transmitBuffer);
 80056b8:	6978      	ldr	r0, [r7, #20]
 80056ba:	f001 f9cd 	bl	8006a58 <free>

  return isSuccess;
 80056be:	7cfb      	ldrb	r3, [r7, #19]
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3718      	adds	r7, #24
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <keypad3x4w_init>:

} Keypad3x4w_Config;


Keypad3x4w_Config_t * keypad3x4w_init(Keypad3x4w_PinConfig_t * const pPinConfig)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  Keypad3x4w_Config_t * pConfig = malloc(sizeof(Keypad3x4w_Config_t));
 80056d0:	2008      	movs	r0, #8
 80056d2:	f001 f9b9 	bl	8006a48 <malloc>
 80056d6:	4603      	mov	r3, r0
 80056d8:	60fb      	str	r3, [r7, #12]

  pConfig->pkeypadPinConfig = pPinConfig;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	601a      	str	r2, [r3, #0]

  return pConfig;
 80056e0:	68fb      	ldr	r3, [r7, #12]
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
	...

080056ec <keypad3x4w_setColumnGpio>:

Keypad3x4w_Status_t keypad3x4w_setColumnGpio(Keypad3x4w_Config_t * pConfig, keypad3x4w_ColumnScanType_e columnScanType)
{
 80056ec:	b5b0      	push	{r4, r5, r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	460b      	mov	r3, r1
 80056f6:	70fb      	strb	r3, [r7, #3]

  for (uint8_t columnCount = 0; columnCount < KEYPAD_COLUMN_NUMBER; columnCount++)
 80056f8:	2300      	movs	r3, #0
 80056fa:	73fb      	strb	r3, [r7, #15]
 80056fc:	e01b      	b.n	8005736 <keypad3x4w_setColumnGpio+0x4a>
  {
    HAL_GPIO_WritePin(pConfig->pkeypadPinConfig->Column_Port[columnCount],
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	7bfa      	ldrb	r2, [r7, #15]
 8005704:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
        pConfig->pkeypadPinConfig->Column_Pin[columnCount], columnScanConfig[columnScanType][columnCount]);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681a      	ldr	r2, [r3, #0]
    HAL_GPIO_WritePin(pConfig->pkeypadPinConfig->Column_Port[columnCount],
 800570c:	7bfb      	ldrb	r3, [r7, #15]
 800570e:	3304      	adds	r3, #4
 8005710:	005b      	lsls	r3, r3, #1
 8005712:	4413      	add	r3, r2
 8005714:	889c      	ldrh	r4, [r3, #4]
        pConfig->pkeypadPinConfig->Column_Pin[columnCount], columnScanConfig[columnScanType][columnCount]);
 8005716:	78fa      	ldrb	r2, [r7, #3]
 8005718:	7bf9      	ldrb	r1, [r7, #15]
 800571a:	4d0b      	ldr	r5, [pc, #44]	@ (8005748 <keypad3x4w_setColumnGpio+0x5c>)
 800571c:	4613      	mov	r3, r2
 800571e:	005b      	lsls	r3, r3, #1
 8005720:	4413      	add	r3, r2
 8005722:	442b      	add	r3, r5
 8005724:	440b      	add	r3, r1
 8005726:	781b      	ldrb	r3, [r3, #0]
    HAL_GPIO_WritePin(pConfig->pkeypadPinConfig->Column_Port[columnCount],
 8005728:	461a      	mov	r2, r3
 800572a:	4621      	mov	r1, r4
 800572c:	f7fc fd24 	bl	8002178 <HAL_GPIO_WritePin>
  for (uint8_t columnCount = 0; columnCount < KEYPAD_COLUMN_NUMBER; columnCount++)
 8005730:	7bfb      	ldrb	r3, [r7, #15]
 8005732:	3301      	adds	r3, #1
 8005734:	73fb      	strb	r3, [r7, #15]
 8005736:	7bfb      	ldrb	r3, [r7, #15]
 8005738:	2b02      	cmp	r3, #2
 800573a:	d9e0      	bls.n	80056fe <keypad3x4w_setColumnGpio+0x12>
  }
  return 0;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bdb0      	pop	{r4, r5, r7, pc}
 8005746:	bf00      	nop
 8005748:	08007410 	.word	0x08007410

0800574c <keypad3x4w_readKeypad>:


Keypad3x4w_Status_t keypad3x4w_readKeypad(Keypad3x4w_Config_t * pConfig, uint8_t* pKey)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  Keypad3x4w_Status_t isPressed = false;
 8005756:	2300      	movs	r3, #0
 8005758:	73fb      	strb	r3, [r7, #15]

  //Turn on column GPIO outputs
  keypad3x4w_setColumnGpio(pConfig, keypad3x4w_ColumnScanType_Full);
 800575a:	2100      	movs	r1, #0
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f7ff ffc5 	bl	80056ec <keypad3x4w_setColumnGpio>

  //Check if a row has been activated
  for (uint8_t rowCount = 0; rowCount < KEYPAD_ROW_NUMBER; rowCount++)
 8005762:	2300      	movs	r3, #0
 8005764:	73bb      	strb	r3, [r7, #14]
 8005766:	e050      	b.n	800580a <keypad3x4w_readKeypad+0xbe>
  {
    if (HAL_GPIO_ReadPin (pConfig->pkeypadPinConfig->Row_Port[rowCount], pConfig->pkeypadPinConfig->Row_Pin[rowCount]))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	7bbb      	ldrb	r3, [r7, #14]
 800576e:	3304      	adds	r3, #4
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	4413      	add	r3, r2
 8005774:	6858      	ldr	r0, [r3, #4]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	7bbb      	ldrb	r3, [r7, #14]
 800577c:	3310      	adds	r3, #16
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	4413      	add	r3, r2
 8005782:	889b      	ldrh	r3, [r3, #4]
 8005784:	4619      	mov	r1, r3
 8005786:	f7fc fcdf 	bl	8002148 <HAL_GPIO_ReadPin>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d039      	beq.n	8005804 <keypad3x4w_readKeypad+0xb8>
    {
      //Determine Column Pressed
      for (uint8_t columnCount = 0; columnCount < KEYPAD_COLUMN_NUMBER; columnCount++)
 8005790:	2300      	movs	r3, #0
 8005792:	737b      	strb	r3, [r7, #13]
 8005794:	e033      	b.n	80057fe <keypad3x4w_readKeypad+0xb2>
      {
        keypad3x4w_setColumnGpio(pConfig, keypad3x4w_ColumnScanType_Col1 + columnCount);
 8005796:	7b7b      	ldrb	r3, [r7, #13]
 8005798:	3301      	adds	r3, #1
 800579a:	b2db      	uxtb	r3, r3
 800579c:	4619      	mov	r1, r3
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7ff ffa4 	bl	80056ec <keypad3x4w_setColumnGpio>

        for (uint8_t rowCount = 0; rowCount < KEYPAD_ROW_NUMBER; rowCount++)
 80057a4:	2300      	movs	r3, #0
 80057a6:	733b      	strb	r3, [r7, #12]
 80057a8:	e023      	b.n	80057f2 <keypad3x4w_readKeypad+0xa6>
        {
          if (HAL_GPIO_ReadPin (pConfig->pkeypadPinConfig->Row_Port[rowCount], pConfig->pkeypadPinConfig->Row_Pin[rowCount]))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	7b3b      	ldrb	r3, [r7, #12]
 80057b0:	3304      	adds	r3, #4
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	4413      	add	r3, r2
 80057b6:	6858      	ldr	r0, [r3, #4]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	7b3b      	ldrb	r3, [r7, #12]
 80057be:	3310      	adds	r3, #16
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	4413      	add	r3, r2
 80057c4:	889b      	ldrh	r3, [r3, #4]
 80057c6:	4619      	mov	r1, r3
 80057c8:	f7fc fcbe 	bl	8002148 <HAL_GPIO_ReadPin>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00c      	beq.n	80057ec <keypad3x4w_readKeypad+0xa0>
          {
            isPressed = true;
 80057d2:	2301      	movs	r3, #1
 80057d4:	73fb      	strb	r3, [r7, #15]
            *pKey = keypadNumberOrder[rowCount][columnCount];
 80057d6:	7b3a      	ldrb	r2, [r7, #12]
 80057d8:	7b79      	ldrb	r1, [r7, #13]
 80057da:	4810      	ldr	r0, [pc, #64]	@ (800581c <keypad3x4w_readKeypad+0xd0>)
 80057dc:	4613      	mov	r3, r2
 80057de:	005b      	lsls	r3, r3, #1
 80057e0:	4413      	add	r3, r2
 80057e2:	4403      	add	r3, r0
 80057e4:	440b      	add	r3, r1
 80057e6:	781a      	ldrb	r2, [r3, #0]
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	701a      	strb	r2, [r3, #0]
        for (uint8_t rowCount = 0; rowCount < KEYPAD_ROW_NUMBER; rowCount++)
 80057ec:	7b3b      	ldrb	r3, [r7, #12]
 80057ee:	3301      	adds	r3, #1
 80057f0:	733b      	strb	r3, [r7, #12]
 80057f2:	7b3b      	ldrb	r3, [r7, #12]
 80057f4:	2b03      	cmp	r3, #3
 80057f6:	d9d8      	bls.n	80057aa <keypad3x4w_readKeypad+0x5e>
      for (uint8_t columnCount = 0; columnCount < KEYPAD_COLUMN_NUMBER; columnCount++)
 80057f8:	7b7b      	ldrb	r3, [r7, #13]
 80057fa:	3301      	adds	r3, #1
 80057fc:	737b      	strb	r3, [r7, #13]
 80057fe:	7b7b      	ldrb	r3, [r7, #13]
 8005800:	2b02      	cmp	r3, #2
 8005802:	d9c8      	bls.n	8005796 <keypad3x4w_readKeypad+0x4a>
  for (uint8_t rowCount = 0; rowCount < KEYPAD_ROW_NUMBER; rowCount++)
 8005804:	7bbb      	ldrb	r3, [r7, #14]
 8005806:	3301      	adds	r3, #1
 8005808:	73bb      	strb	r3, [r7, #14]
 800580a:	7bbb      	ldrb	r3, [r7, #14]
 800580c:	2b03      	cmp	r3, #3
 800580e:	d9ab      	bls.n	8005768 <keypad3x4w_readKeypad+0x1c>
        }
      }
    }
  }

  return isPressed;
 8005810:	7bfb      	ldrb	r3, [r7, #15]
 }
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	0800741c 	.word	0x0800741c

08005820 <dateTime_display_init>:

} DateTime_Display_Config;


DateTime_Display_Config_t * dateTime_display_init(I2C_HandleTypeDef* const hi2c, const uint8_t addrs)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	460b      	mov	r3, r1
 800582a:	70fb      	strb	r3, [r7, #3]
  DateTime_Display_Config_t* pConfig = malloc(sizeof(DateTime_Display_Config_t));
 800582c:	2018      	movs	r0, #24
 800582e:	f001 f90b 	bl	8006a48 <malloc>
 8005832:	4603      	mov	r3, r0
 8005834:	60fb      	str	r3, [r7, #12]
  pConfig->i2cAddrs = addrs;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	78fa      	ldrb	r2, [r7, #3]
 800583a:	711a      	strb	r2, [r3, #4]
  pConfig->hi2c = hi2c;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	601a      	str	r2, [r3, #0]
  pConfig->hDisplayDriver = ht16k33_init(hi2c, addrs);
 8005842:	78fb      	ldrb	r3, [r7, #3]
 8005844:	4619      	mov	r1, r3
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f7ff fe0b 	bl	8005462 <ht16k33_init>
 800584c:	4602      	mov	r2, r0
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	609a      	str	r2, [r3, #8]

  ht16k33_setSystemSetup(pConfig->hDisplayDriver, Ht16k33_SystemOscillator_On);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	2101      	movs	r1, #1
 8005858:	4618      	mov	r0, r3
 800585a:	f7ff fe31 	bl	80054c0 <ht16k33_setSystemSetup>
  ht16k33_setDisplaySetup(pConfig->hDisplayDriver, Ht16k33_DisplayStatus_On, Ht16k33_BlinkingFrequency_Off);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	2200      	movs	r2, #0
 8005864:	2101      	movs	r1, #1
 8005866:	4618      	mov	r0, r3
 8005868:	f7ff fe6e 	bl	8005548 <ht16k33_setDisplaySetup>

  return pConfig;
 800586c:	68fb      	ldr	r3, [r7, #12]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <dateTime_setDateTimeMonth>:

DateTime_Display_Status_t dateTime_setDateTimeMonth(DateTime_Display_Config_t* const pConfig,
    const uint8_t* const inputDateTime)
{
 8005876:	b480      	push	{r7}
 8005878:	b083      	sub	sp, #12
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
 800587e:	6039      	str	r1, [r7, #0]
  //Extract and check input month
  pConfig->dateTimeData.Month = (inputDateTime[0]*10) + (inputDateTime[1]);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	461a      	mov	r2, r3
 8005886:	0092      	lsls	r2, r2, #2
 8005888:	4413      	add	r3, r2
 800588a:	005b      	lsls	r3, r3, #1
 800588c:	b2da      	uxtb	r2, r3
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	3301      	adds	r3, #1
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	4413      	add	r3, r2
 8005896:	b2da      	uxtb	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	731a      	strb	r2, [r3, #12]
  if ((pConfig->dateTimeData.Month >= 1) && (pConfig->dateTimeData.Month <= 12))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	7b1b      	ldrb	r3, [r3, #12]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d005      	beq.n	80058b0 <dateTime_setDateTimeMonth+0x3a>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	7b1b      	ldrb	r3, [r3, #12]
 80058a8:	2b0c      	cmp	r3, #12
 80058aa:	d801      	bhi.n	80058b0 <dateTime_setDateTimeMonth+0x3a>
  {
    return 1;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e000      	b.n	80058b2 <dateTime_setDateTimeMonth+0x3c>
  }
  else
  {
    return 0;
 80058b0:	2300      	movs	r3, #0
  }
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	370c      	adds	r7, #12
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
	...

080058c0 <dateTime_setDateTimeDay>:

DateTime_Display_Status_t dateTime_setDateTimeDay(DateTime_Display_Config_t* const pConfig,
    const uint8_t* const inputDateTime)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  bool leapYear = false;
 80058ca:	2300      	movs	r3, #0
 80058cc:	73fb      	strb	r3, [r7, #15]

  //Extract input day and check for days per month
  pConfig->dateTimeData.Day = (inputDateTime[2]*10) + (inputDateTime[3]);
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	3302      	adds	r3, #2
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	461a      	mov	r2, r3
 80058d6:	0092      	lsls	r2, r2, #2
 80058d8:	4413      	add	r3, r2
 80058da:	005b      	lsls	r3, r3, #1
 80058dc:	b2da      	uxtb	r2, r3
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	3303      	adds	r3, #3
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	4413      	add	r3, r2
 80058e6:	b2da      	uxtb	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	735a      	strb	r2, [r3, #13]

  //Check for leap year
  if ((((pConfig->dateTimeData.Year % 4) == 0) && ((pConfig->dateTimeData.Year % 100) != 0)) ||
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	89db      	ldrh	r3, [r3, #14]
 80058f0:	f003 0303 	and.w	r3, r3, #3
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10c      	bne.n	8005914 <dateTime_setDateTimeDay+0x54>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	89db      	ldrh	r3, [r3, #14]
 80058fe:	4a1a      	ldr	r2, [pc, #104]	@ (8005968 <dateTime_setDateTimeDay+0xa8>)
 8005900:	fba2 1203 	umull	r1, r2, r2, r3
 8005904:	0952      	lsrs	r2, r2, #5
 8005906:	2164      	movs	r1, #100	@ 0x64
 8005908:	fb01 f202 	mul.w	r2, r1, r2
 800590c:	1a9b      	subs	r3, r3, r2
 800590e:	b29b      	uxth	r3, r3
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10d      	bne.n	8005930 <dateTime_setDateTimeDay+0x70>
      ((pConfig->dateTimeData.Year % 400) == 0))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	89db      	ldrh	r3, [r3, #14]
 8005918:	4a13      	ldr	r2, [pc, #76]	@ (8005968 <dateTime_setDateTimeDay+0xa8>)
 800591a:	fba2 1203 	umull	r1, r2, r2, r3
 800591e:	09d2      	lsrs	r2, r2, #7
 8005920:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8005924:	fb01 f202 	mul.w	r2, r1, r2
 8005928:	1a9b      	subs	r3, r3, r2
 800592a:	b29b      	uxth	r3, r3
  if ((((pConfig->dateTimeData.Year % 4) == 0) && ((pConfig->dateTimeData.Year % 100) != 0)) ||
 800592c:	2b00      	cmp	r3, #0
 800592e:	d101      	bne.n	8005934 <dateTime_setDateTimeDay+0x74>
  {
    leapYear = true;
 8005930:	2301      	movs	r3, #1
 8005932:	73fb      	strb	r3, [r7, #15]
  }

  if (pConfig->dateTimeData.Day <= (monthDaysCount[pConfig->dateTimeData.Month-1] + leapYear) &&
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	7b5b      	ldrb	r3, [r3, #13]
 8005938:	4619      	mov	r1, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	7b1b      	ldrb	r3, [r3, #12]
 800593e:	3b01      	subs	r3, #1
 8005940:	4a0a      	ldr	r2, [pc, #40]	@ (800596c <dateTime_setDateTimeDay+0xac>)
 8005942:	5cd3      	ldrb	r3, [r2, r3]
 8005944:	461a      	mov	r2, r3
 8005946:	7bfb      	ldrb	r3, [r7, #15]
 8005948:	4413      	add	r3, r2
 800594a:	4299      	cmp	r1, r3
 800594c:	dc05      	bgt.n	800595a <dateTime_setDateTimeDay+0x9a>
      (pConfig->dateTimeData.Day > 0))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	7b5b      	ldrb	r3, [r3, #13]
  if (pConfig->dateTimeData.Day <= (monthDaysCount[pConfig->dateTimeData.Month-1] + leapYear) &&
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <dateTime_setDateTimeDay+0x9a>
  {
    return 1;
 8005956:	2301      	movs	r3, #1
 8005958:	e000      	b.n	800595c <dateTime_setDateTimeDay+0x9c>
  }
  else
  {
    return 0;
 800595a:	2300      	movs	r3, #0
  }
}
 800595c:	4618      	mov	r0, r3
 800595e:	3714      	adds	r7, #20
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr
 8005968:	51eb851f 	.word	0x51eb851f
 800596c:	08007498 	.word	0x08007498

08005970 <dateTime_setDateTimeYear>:

DateTime_Display_Status_t dateTime_setDateTimeYear(DateTime_Display_Config_t* const pConfig,
    const uint8_t* const inputDateTime)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  //Extract input year
  pConfig->dateTimeData.Year = (inputDateTime[4]*1000)+(inputDateTime[5]*100)
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	3304      	adds	r3, #4
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	461a      	mov	r2, r3
 8005982:	0152      	lsls	r2, r2, #5
 8005984:	1ad2      	subs	r2, r2, r3
 8005986:	0092      	lsls	r2, r2, #2
 8005988:	4413      	add	r3, r2
 800598a:	00db      	lsls	r3, r3, #3
 800598c:	b29a      	uxth	r2, r3
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	3305      	adds	r3, #5
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	4619      	mov	r1, r3
 8005996:	0089      	lsls	r1, r1, #2
 8005998:	440b      	add	r3, r1
 800599a:	4619      	mov	r1, r3
 800599c:	0088      	lsls	r0, r1, #2
 800599e:	4619      	mov	r1, r3
 80059a0:	4603      	mov	r3, r0
 80059a2:	440b      	add	r3, r1
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	4413      	add	r3, r2
 80059aa:	b29a      	uxth	r2, r3
      + (inputDateTime[6]*10) + (inputDateTime[7]);
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	3306      	adds	r3, #6
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	4619      	mov	r1, r3
 80059b4:	0089      	lsls	r1, r1, #2
 80059b6:	440b      	add	r3, r1
 80059b8:	005b      	lsls	r3, r3, #1
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	4413      	add	r3, r2
 80059be:	b29b      	uxth	r3, r3
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	3207      	adds	r2, #7
 80059c4:	7812      	ldrb	r2, [r2, #0]
 80059c6:	4413      	add	r3, r2
 80059c8:	b29a      	uxth	r2, r3
  pConfig->dateTimeData.Year = (inputDateTime[4]*1000)+(inputDateTime[5]*100)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	81da      	strh	r2, [r3, #14]

  return 1;
 80059ce:	2301      	movs	r3, #1
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <dateTime_setDateTimeHour>:

DateTime_Display_Status_t dateTime_setDateTimeHour(DateTime_Display_Config_t* const pConfig,
    const uint8_t* const inputDateTime)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  DateTime_Display_Status_t isSuccess = 1;
 80059e6:	2301      	movs	r3, #1
 80059e8:	73fb      	strb	r3, [r7, #15]

  //Extract and check input hour
  pConfig->dateTimeData.Hour = (inputDateTime[8]*10) + (inputDateTime[9]);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	3308      	adds	r3, #8
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	461a      	mov	r2, r3
 80059f2:	0092      	lsls	r2, r2, #2
 80059f4:	4413      	add	r3, r2
 80059f6:	005b      	lsls	r3, r3, #1
 80059f8:	b2da      	uxtb	r2, r3
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	3309      	adds	r3, #9
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	4413      	add	r3, r2
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	741a      	strb	r2, [r3, #16]

  if ((pConfig->dateTimeData.Hour >= 0) && (pConfig->dateTimeData.Hour <= 24))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	7c1b      	ldrb	r3, [r3, #16]
 8005a0c:	2b18      	cmp	r3, #24
 8005a0e:	d827      	bhi.n	8005a60 <dateTime_setDateTimeHour+0x84>
  {
    //Convert to 12 hour time and set meridiem
    if ((pConfig->dateTimeData.Hour > 12))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	7c1b      	ldrb	r3, [r3, #16]
 8005a14:	2b0c      	cmp	r3, #12
 8005a16:	d90f      	bls.n	8005a38 <dateTime_setDateTimeHour+0x5c>
    {
      pConfig->dateTimeData.Hour -= 12;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	7c1b      	ldrb	r3, [r3, #16]
 8005a1c:	3b0c      	subs	r3, #12
 8005a1e:	b2da      	uxtb	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	741a      	strb	r2, [r3, #16]
      pConfig->dateTimeData.Meridiem = (pConfig->dateTimeData.Hour == 12) ?
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	7c1b      	ldrb	r3, [r3, #16]
          DateTime_DisplayDataMeridiem_AM : DateTime_DisplayDataMeridiem_PM;
 8005a28:	2b0c      	cmp	r3, #12
 8005a2a:	d101      	bne.n	8005a30 <dateTime_setDateTimeHour+0x54>
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	e000      	b.n	8005a32 <dateTime_setDateTimeHour+0x56>
 8005a30:	2202      	movs	r2, #2
      pConfig->dateTimeData.Meridiem = (pConfig->dateTimeData.Hour == 12) ?
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	749a      	strb	r2, [r3, #18]
 8005a36:	e015      	b.n	8005a64 <dateTime_setDateTimeHour+0x88>
    }
    else
    {
      pConfig->dateTimeData.Meridiem = (pConfig->dateTimeData.Hour == 12) ?
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	7c1b      	ldrb	r3, [r3, #16]
          DateTime_DisplayDataMeridiem_PM : DateTime_DisplayDataMeridiem_AM;
 8005a3c:	2b0c      	cmp	r3, #12
 8005a3e:	d101      	bne.n	8005a44 <dateTime_setDateTimeHour+0x68>
 8005a40:	2202      	movs	r2, #2
 8005a42:	e000      	b.n	8005a46 <dateTime_setDateTimeHour+0x6a>
 8005a44:	2201      	movs	r2, #1
      pConfig->dateTimeData.Meridiem = (pConfig->dateTimeData.Hour == 12) ?
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	749a      	strb	r2, [r3, #18]
      pConfig->dateTimeData.Hour = (pConfig->dateTimeData.Hour == 0) ? 12 : pConfig->dateTimeData.Hour;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	7c1b      	ldrb	r3, [r3, #16]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d002      	beq.n	8005a58 <dateTime_setDateTimeHour+0x7c>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	7c1a      	ldrb	r2, [r3, #16]
 8005a56:	e000      	b.n	8005a5a <dateTime_setDateTimeHour+0x7e>
 8005a58:	220c      	movs	r2, #12
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	741a      	strb	r2, [r3, #16]
 8005a5e:	e001      	b.n	8005a64 <dateTime_setDateTimeHour+0x88>
    }
  }
  else
  {
    isSuccess = 0;
 8005a60:	2300      	movs	r3, #0
 8005a62:	73fb      	strb	r3, [r7, #15]
  }

  return isSuccess;
 8005a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3714      	adds	r7, #20
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <dateTime_setDateTimeMinute>:

DateTime_Display_Status_t dateTime_setDateTimeMinute(DateTime_Display_Config_t* const pConfig,
    const uint8_t* const inputDateTime)
{
 8005a72:	b480      	push	{r7}
 8005a74:	b083      	sub	sp, #12
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
 8005a7a:	6039      	str	r1, [r7, #0]
  //Extract and check input month
  pConfig->dateTimeData.Minute = (inputDateTime[10]*10) + (inputDateTime[11]);
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	330a      	adds	r3, #10
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	461a      	mov	r2, r3
 8005a84:	0092      	lsls	r2, r2, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	005b      	lsls	r3, r3, #1
 8005a8a:	b2da      	uxtb	r2, r3
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	330b      	adds	r3, #11
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	4413      	add	r3, r2
 8005a94:	b2da      	uxtb	r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	745a      	strb	r2, [r3, #17]
  if ((pConfig->dateTimeData.Minute >= 0) && (pConfig->dateTimeData.Minute < 60))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	7c5b      	ldrb	r3, [r3, #17]
 8005a9e:	2b3b      	cmp	r3, #59	@ 0x3b
 8005aa0:	d801      	bhi.n	8005aa6 <dateTime_setDateTimeMinute+0x34>
  {
    return 1;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e000      	b.n	8005aa8 <dateTime_setDateTimeMinute+0x36>
  }
  else
  {
    return 0;
 8005aa6:	2300      	movs	r3, #0

  }
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <dateTime_setDisplayData>:

DateTime_Display_Status_t dateTime_setDisplayData(DateTime_Display_Config_t* const pConfig,
    const uint8_t* const inputDateTime)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  DateTime_Display_Status_t isSuccess = 1;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	73fb      	strb	r3, [r7, #15]

  isSuccess &= dateTime_setDateTimeMonth(pConfig, inputDateTime);
 8005ac2:	6839      	ldr	r1, [r7, #0]
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f7ff fed6 	bl	8005876 <dateTime_setDateTimeMonth>
 8005aca:	4603      	mov	r3, r0
 8005acc:	461a      	mov	r2, r3
 8005ace:	7bfb      	ldrb	r3, [r7, #15]
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	bf14      	ite	ne
 8005ad6:	2301      	movne	r3, #1
 8005ad8:	2300      	moveq	r3, #0
 8005ada:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_setDateTimeYear(pConfig, inputDateTime);
 8005adc:	6839      	ldr	r1, [r7, #0]
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f7ff ff46 	bl	8005970 <dateTime_setDateTimeYear>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	7bfb      	ldrb	r3, [r7, #15]
 8005aea:	4013      	ands	r3, r2
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	bf14      	ite	ne
 8005af0:	2301      	movne	r3, #1
 8005af2:	2300      	moveq	r3, #0
 8005af4:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_setDateTimeDay(pConfig, inputDateTime);
 8005af6:	6839      	ldr	r1, [r7, #0]
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f7ff fee1 	bl	80058c0 <dateTime_setDateTimeDay>
 8005afe:	4603      	mov	r3, r0
 8005b00:	461a      	mov	r2, r3
 8005b02:	7bfb      	ldrb	r3, [r7, #15]
 8005b04:	4013      	ands	r3, r2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	bf14      	ite	ne
 8005b0a:	2301      	movne	r3, #1
 8005b0c:	2300      	moveq	r3, #0
 8005b0e:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_setDateTimeHour(pConfig, inputDateTime);
 8005b10:	6839      	ldr	r1, [r7, #0]
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7ff ff62 	bl	80059dc <dateTime_setDateTimeHour>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	7bfb      	ldrb	r3, [r7, #15]
 8005b1e:	4013      	ands	r3, r2
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	bf14      	ite	ne
 8005b24:	2301      	movne	r3, #1
 8005b26:	2300      	moveq	r3, #0
 8005b28:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_setDateTimeMinute(pConfig, inputDateTime);
 8005b2a:	6839      	ldr	r1, [r7, #0]
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f7ff ffa0 	bl	8005a72 <dateTime_setDateTimeMinute>
 8005b32:	4603      	mov	r3, r0
 8005b34:	461a      	mov	r2, r3
 8005b36:	7bfb      	ldrb	r3, [r7, #15]
 8005b38:	4013      	ands	r3, r2
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	bf14      	ite	ne
 8005b3e:	2301      	movne	r3, #1
 8005b40:	2300      	moveq	r3, #0
 8005b42:	73fb      	strb	r3, [r7, #15]

  return isSuccess;
 8005b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <dateTime_getRtcDateTimeData>:

DateTime_Display_Status_t   dateTime_getRtcDateTimeData(DateTime_Display_Config_t* const pConfig,
    RTC_DateTypeDef* const pRtcDate, RTC_TimeTypeDef* const pRtcTime)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b087      	sub	sp, #28
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	60f8      	str	r0, [r7, #12]
 8005b56:	60b9      	str	r1, [r7, #8]
 8005b58:	607a      	str	r2, [r7, #4]
  DateTime_Display_Status_t isSuccess = 1;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	75fb      	strb	r3, [r7, #23]

  pRtcDate->Date        = pConfig->dateTimeData.Day;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	7b5a      	ldrb	r2, [r3, #13]
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	709a      	strb	r2, [r3, #2]
  pRtcDate->Month       = pConfig->dateTimeData.Month;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	7b1a      	ldrb	r2, [r3, #12]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	705a      	strb	r2, [r3, #1]
  pRtcDate->Year        = 0;                            //Set to zero because maximum value from RTC is 99 years
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	2200      	movs	r2, #0
 8005b72:	70da      	strb	r2, [r3, #3]
  pRtcTime->Hours       = pConfig->dateTimeData.Hour;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	7c1a      	ldrb	r2, [r3, #16]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	701a      	strb	r2, [r3, #0]
  pRtcTime->Minutes     = pConfig->dateTimeData.Minute;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	7c5a      	ldrb	r2, [r3, #17]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	705a      	strb	r2, [r3, #1]
  pRtcTime->TimeFormat  = pConfig->dateTimeData.Meridiem - 1; //RTC AM = 0, RTC PM = 1;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	7c9b      	ldrb	r3, [r3, #18]
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	b2da      	uxtb	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	70da      	strb	r2, [r3, #3]
  pRtcTime->Seconds     = 0;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	709a      	strb	r2, [r3, #2]
  pRtcTime->SubSeconds  = 0;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	605a      	str	r2, [r3, #4]
  pConfig->orignalYear  = pConfig->dateTimeData.Year; //Hacky way to fix RTC year issue
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	89da      	ldrh	r2, [r3, #14]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	829a      	strh	r2, [r3, #20]
  return isSuccess;
 8005ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	371c      	adds	r7, #28
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <dateTime_setRtcDateTimeData>:

DateTime_Display_Status_t   dateTime_setRtcDateTimeData(DateTime_Display_Config_t* const pConfig,
    RTC_DateTypeDef* const pRtcDate, RTC_TimeTypeDef* const pRtcTime)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b087      	sub	sp, #28
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	60f8      	str	r0, [r7, #12]
 8005bba:	60b9      	str	r1, [r7, #8]
 8005bbc:	607a      	str	r2, [r7, #4]
  DateTime_Display_Status_t isSuccess = 1;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	75fb      	strb	r3, [r7, #23]

  pConfig->dateTimeData.Day       = pRtcDate->Date;
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	789a      	ldrb	r2, [r3, #2]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	735a      	strb	r2, [r3, #13]
  pConfig->dateTimeData.Month     = pRtcDate->Month;
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	785a      	ldrb	r2, [r3, #1]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	731a      	strb	r2, [r3, #12]
  pConfig->dateTimeData.Year      = pConfig->orignalYear + pRtcDate->Year;  //Add years because maximum value from RTC is 99 years
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	8a9b      	ldrh	r3, [r3, #20]
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	78d2      	ldrb	r2, [r2, #3]
 8005bda:	4413      	add	r3, r2
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	81da      	strh	r2, [r3, #14]
  pConfig->dateTimeData.Hour      = pRtcTime->Hours;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	781a      	ldrb	r2, [r3, #0]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	741a      	strb	r2, [r3, #16]
  pConfig->dateTimeData.Minute    = pRtcTime->Minutes;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	785a      	ldrb	r2, [r3, #1]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	745a      	strb	r2, [r3, #17]
  pConfig->dateTimeData.Meridiem  = pRtcTime->TimeFormat + 1; //RTC AM = 0, RTC PM = 1;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	78db      	ldrb	r3, [r3, #3]
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	b2da      	uxtb	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	749a      	strb	r2, [r3, #18]

  return isSuccess;
 8005bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	371c      	adds	r7, #28
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <dateTime_copyDateTime>:

DateTime_Display_Status_t dateTime_copyDateTime(DateTime_Display_Config_t* const pDestConfig,
    DateTime_Display_Config_t* const pSourceConfig)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  DateTime_Display_Status_t isSuccess = 1;
 8005c16:	2301      	movs	r3, #1
 8005c18:	73fb      	strb	r3, [r7, #15]

  memcpy(&pDestConfig->dateTimeData, &pSourceConfig->dateTimeData, sizeof(pDestConfig->dateTimeData));
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f103 000c 	add.w	r0, r3, #12
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	330c      	adds	r3, #12
 8005c24:	2208      	movs	r2, #8
 8005c26:	4619      	mov	r1, r3
 8005c28:	f001 f844 	bl	8006cb4 <memcpy>

  return isSuccess;
 8005c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <dateTime_clearDisplay>:

DateTime_Display_Status_t dateTime_clearDisplay(DateTime_Display_Config_t* const pConfig)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b086      	sub	sp, #24
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  uint8_t* clearBuffer = malloc (TOTAL_NUMBER_OF_ROWS);
 8005c3e:	2010      	movs	r0, #16
 8005c40:	f000 ff02 	bl	8006a48 <malloc>
 8005c44:	4603      	mov	r3, r0
 8005c46:	60fb      	str	r3, [r7, #12]
  DateTime_Display_Status_t isSuccess   = 0;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	75fb      	strb	r3, [r7, #23]

  for (int buffCount = 0; buffCount < TOTAL_NUMBER_OF_ROWS; buffCount++)
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	613b      	str	r3, [r7, #16]
 8005c50:	e007      	b.n	8005c62 <dateTime_clearDisplay+0x2c>
  {
    clearBuffer[buffCount] = 0x00;
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	4413      	add	r3, r2
 8005c58:	2200      	movs	r2, #0
 8005c5a:	701a      	strb	r2, [r3, #0]
  for (int buffCount = 0; buffCount < TOTAL_NUMBER_OF_ROWS; buffCount++)
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	613b      	str	r3, [r7, #16]
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	2b0f      	cmp	r3, #15
 8005c66:	ddf4      	ble.n	8005c52 <dateTime_clearDisplay+0x1c>
  }

  isSuccess = ht16k33_updateDisplayData (pConfig->hDisplayDriver,DISPLAY_DATA_REG_ADDRESS, clearBuffer,
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6898      	ldr	r0, [r3, #8]
 8005c6c:	2310      	movs	r3, #16
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	2100      	movs	r1, #0
 8005c72:	f7ff fcc8 	bl	8005606 <ht16k33_updateDisplayData>
 8005c76:	4603      	mov	r3, r0
 8005c78:	75fb      	strb	r3, [r7, #23]
      TOTAL_NUMBER_OF_ROWS);

  if (isSuccess)
 8005c7a:	7dfb      	ldrb	r3, [r7, #23]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d010      	beq.n	8005ca2 <dateTime_clearDisplay+0x6c>
  {
    isSuccess |= ht16k33_setDisplaySetup(pConfig->hDisplayDriver, Ht16k33_DisplayStatus_On,
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	2200      	movs	r2, #0
 8005c86:	2101      	movs	r1, #1
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7ff fc5d 	bl	8005548 <ht16k33_setDisplaySetup>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	461a      	mov	r2, r3
 8005c92:	7dfb      	ldrb	r3, [r7, #23]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	bf14      	ite	ne
 8005c9c:	2301      	movne	r3, #1
 8005c9e:	2300      	moveq	r3, #0
 8005ca0:	75fb      	strb	r3, [r7, #23]
        Ht16k33_BlinkingFrequency_Off);
  }

  free(clearBuffer);
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f000 fed8 	bl	8006a58 <free>

  return isSuccess;
 8005ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3718      	adds	r7, #24
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <dateTime_setLed>:
DateTime_Display_Status_t dateTime_setLed(DateTime_Display_Config_t* const pConfig, const uint8_t segmentNumber,
       const uint8_t ledState)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b086      	sub	sp, #24
 8005cb6:	af02      	add	r7, sp, #8
 8005cb8:	6078      	str	r0, [r7, #4]
 8005cba:	460b      	mov	r3, r1
 8005cbc:	70fb      	strb	r3, [r7, #3]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	70bb      	strb	r3, [r7, #2]
     DateTime_Display_Status_t isSuccess   = 0;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	73fb      	strb	r3, [r7, #15]
     uint8_t SegmentData = 0;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	73bb      	strb	r3, [r7, #14]
     uint8_t RequestData = segmentNumber;
 8005cca:	78fb      	ldrb	r3, [r7, #3]
 8005ccc:	737b      	strb	r3, [r7, #13]

     isSuccess |= HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->i2cAddrs)<<1, &RequestData,  1, HAL_MAX_DELAY);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6818      	ldr	r0, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	791b      	ldrb	r3, [r3, #4]
 8005cd6:	005b      	lsls	r3, r3, #1
 8005cd8:	b299      	uxth	r1, r3
 8005cda:	f107 020d 	add.w	r2, r7, #13
 8005cde:	f04f 33ff 	mov.w	r3, #4294967295
 8005ce2:	9300      	str	r3, [sp, #0]
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	f7fc fbc9 	bl	800247c <HAL_I2C_Master_Transmit>
 8005cea:	4603      	mov	r3, r0
 8005cec:	461a      	mov	r2, r3
 8005cee:	7bfb      	ldrb	r3, [r7, #15]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	bf14      	ite	ne
 8005cf6:	2301      	movne	r3, #1
 8005cf8:	2300      	moveq	r3, #0
 8005cfa:	73fb      	strb	r3, [r7, #15]
     isSuccess |= HAL_I2C_Master_Receive(pConfig->hi2c, ((pConfig->i2cAddrs)<<1)|0x01, &SegmentData, 1, HAL_MAX_DELAY);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6818      	ldr	r0, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	791b      	ldrb	r3, [r3, #4]
 8005d04:	005b      	lsls	r3, r3, #1
 8005d06:	b21b      	sxth	r3, r3
 8005d08:	f043 0301 	orr.w	r3, r3, #1
 8005d0c:	b21b      	sxth	r3, r3
 8005d0e:	b299      	uxth	r1, r3
 8005d10:	f107 020e 	add.w	r2, r7, #14
 8005d14:	f04f 33ff 	mov.w	r3, #4294967295
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	f7fc fcac 	bl	8002678 <HAL_I2C_Master_Receive>
 8005d20:	4603      	mov	r3, r0
 8005d22:	461a      	mov	r2, r3
 8005d24:	7bfb      	ldrb	r3, [r7, #15]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	bf14      	ite	ne
 8005d2c:	2301      	movne	r3, #1
 8005d2e:	2300      	moveq	r3, #0
 8005d30:	73fb      	strb	r3, [r7, #15]
     SegmentData &= 0b00111111;
 8005d32:	7bbb      	ldrb	r3, [r7, #14]
 8005d34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	73bb      	strb	r3, [r7, #14]
     SegmentData |= ledState;
 8005d3c:	7bba      	ldrb	r2, [r7, #14]
 8005d3e:	78bb      	ldrb	r3, [r7, #2]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	73bb      	strb	r3, [r7, #14]
     isSuccess |= ht16k33_updateDisplayData (pConfig->hDisplayDriver, RequestData, &SegmentData, 1);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6898      	ldr	r0, [r3, #8]
 8005d4a:	7b79      	ldrb	r1, [r7, #13]
 8005d4c:	f107 020e 	add.w	r2, r7, #14
 8005d50:	2301      	movs	r3, #1
 8005d52:	f7ff fc58 	bl	8005606 <ht16k33_updateDisplayData>
 8005d56:	4603      	mov	r3, r0
 8005d58:	461a      	mov	r2, r3
 8005d5a:	7bfb      	ldrb	r3, [r7, #15]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	bf14      	ite	ne
 8005d64:	2301      	movne	r3, #1
 8005d66:	2300      	moveq	r3, #0
 8005d68:	73fb      	strb	r3, [r7, #15]

     return isSuccess;
 8005d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <dateTime_toggleTimeColon>:

DateTime_Display_Status_t dateTime_toggleTimeColon(DateTime_Display_Config_t* const pConfig,
    DateTime_Display_Config_t* const pConfig1, DateTime_Display_Config_t* const pConfig2)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b086      	sub	sp, #24
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
  static uint8_t toogleStatus = 0;
  static uint32_t previousTime = 0;
  DateTime_Display_Status_t isSuccess   = 0;
 8005d80:	2300      	movs	r3, #0
 8005d82:	75fb      	strb	r3, [r7, #23]

  if ((HAL_GetTick()-previousTime) >= COLON_TIME_DELAY_MS)
 8005d84:	f7fb fba4 	bl	80014d0 <HAL_GetTick>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	4b29      	ldr	r3, [pc, #164]	@ (8005e30 <dateTime_toggleTimeColon+0xbc>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005d94:	d346      	bcc.n	8005e24 <dateTime_toggleTimeColon+0xb0>
  {
    toogleStatus = ((toogleStatus) == 0) ? 3 : 0;
 8005d96:	4b27      	ldr	r3, [pc, #156]	@ (8005e34 <dateTime_toggleTimeColon+0xc0>)
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <dateTime_toggleTimeColon+0x2e>
 8005d9e:	2203      	movs	r2, #3
 8005da0:	e000      	b.n	8005da4 <dateTime_toggleTimeColon+0x30>
 8005da2:	2200      	movs	r2, #0
 8005da4:	4b23      	ldr	r3, [pc, #140]	@ (8005e34 <dateTime_toggleTimeColon+0xc0>)
 8005da6:	701a      	strb	r2, [r3, #0]
    previousTime = HAL_GetTick();
 8005da8:	f7fb fb92 	bl	80014d0 <HAL_GetTick>
 8005dac:	4603      	mov	r3, r0
 8005dae:	4a20      	ldr	r2, [pc, #128]	@ (8005e30 <dateTime_toggleTimeColon+0xbc>)
 8005db0:	6013      	str	r3, [r2, #0]
    isSuccess |= dateTime_setLed(pConfig, COLON_LED_SEGMENT_ADDRESS, (toogleStatus<<6));
 8005db2:	4b20      	ldr	r3, [pc, #128]	@ (8005e34 <dateTime_toggleTimeColon+0xc0>)
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	019b      	lsls	r3, r3, #6
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	461a      	mov	r2, r3
 8005dbc:	2107      	movs	r1, #7
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f7ff ff77 	bl	8005cb2 <dateTime_setLed>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	7dfb      	ldrb	r3, [r7, #23]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	bf14      	ite	ne
 8005dd2:	2301      	movne	r3, #1
 8005dd4:	2300      	moveq	r3, #0
 8005dd6:	75fb      	strb	r3, [r7, #23]
    isSuccess |= dateTime_setLed(pConfig1, COLON_LED_SEGMENT_ADDRESS, (toogleStatus<<6));
 8005dd8:	4b16      	ldr	r3, [pc, #88]	@ (8005e34 <dateTime_toggleTimeColon+0xc0>)
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	019b      	lsls	r3, r3, #6
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	461a      	mov	r2, r3
 8005de2:	2107      	movs	r1, #7
 8005de4:	68b8      	ldr	r0, [r7, #8]
 8005de6:	f7ff ff64 	bl	8005cb2 <dateTime_setLed>
 8005dea:	4603      	mov	r3, r0
 8005dec:	461a      	mov	r2, r3
 8005dee:	7dfb      	ldrb	r3, [r7, #23]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	bf14      	ite	ne
 8005df8:	2301      	movne	r3, #1
 8005dfa:	2300      	moveq	r3, #0
 8005dfc:	75fb      	strb	r3, [r7, #23]
    isSuccess |= dateTime_setLed(pConfig2, COLON_LED_SEGMENT_ADDRESS, (toogleStatus<<6));
 8005dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8005e34 <dateTime_toggleTimeColon+0xc0>)
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	019b      	lsls	r3, r3, #6
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	461a      	mov	r2, r3
 8005e08:	2107      	movs	r1, #7
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f7ff ff51 	bl	8005cb2 <dateTime_setLed>
 8005e10:	4603      	mov	r3, r0
 8005e12:	461a      	mov	r2, r3
 8005e14:	7dfb      	ldrb	r3, [r7, #23]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	bf14      	ite	ne
 8005e1e:	2301      	movne	r3, #1
 8005e20:	2300      	moveq	r3, #0
 8005e22:	75fb      	strb	r3, [r7, #23]
  }

  return isSuccess;
 8005e24:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3718      	adds	r7, #24
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	20000384 	.word	0x20000384
 8005e34:	20000388 	.word	0x20000388

08005e38 <dateTime_setDigitSegments>:

//Hacky way of fixing wiring issue of LED numerical digits
DateTime_Display_Status_t dateTime_setDigitSegments(DateTime_Display_Config_t* const pConfig, const uint8_t segmentNum,
    const char dispDigit)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b088      	sub	sp, #32
 8005e3c:	af02      	add	r7, sp, #8
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	460b      	mov	r3, r1
 8005e42:	70fb      	strb	r3, [r7, #3]
 8005e44:	4613      	mov	r3, r2
 8005e46:	70bb      	strb	r3, [r7, #2]
  uint8_t* displayBuffer = malloc (2);
 8005e48:	2002      	movs	r0, #2
 8005e4a:	f000 fdfd 	bl	8006a48 <malloc>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	617b      	str	r3, [r7, #20]
  uint8_t test[] = {0,0};
 8005e52:	2300      	movs	r3, #0
 8005e54:	823b      	strh	r3, [r7, #16]
  uint8_t boo[] = {0x00};
 8005e56:	2300      	movs	r3, #0
 8005e58:	733b      	strb	r3, [r7, #12]

  if (segmentNum % 2)
 8005e5a:	78fb      	ldrb	r3, [r7, #3]
 8005e5c:	f003 0301 	and.w	r3, r3, #1
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d047      	beq.n	8005ef6 <dateTime_setDigitSegments+0xbe>
  {
    boo[0] = segmentNum - 0x01;
 8005e66:	78fb      	ldrb	r3, [r7, #3]
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->i2cAddrs)<<1, boo,  sizeof(boo), HAL_MAX_DELAY);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6818      	ldr	r0, [r3, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	791b      	ldrb	r3, [r3, #4]
 8005e76:	005b      	lsls	r3, r3, #1
 8005e78:	b299      	uxth	r1, r3
 8005e7a:	f107 020c 	add.w	r2, r7, #12
 8005e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e82:	9300      	str	r3, [sp, #0]
 8005e84:	2301      	movs	r3, #1
 8005e86:	f7fc faf9 	bl	800247c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(pConfig->hi2c, ((pConfig->i2cAddrs)<<1)|0x01, test, 1, HAL_MAX_DELAY);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6818      	ldr	r0, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	791b      	ldrb	r3, [r3, #4]
 8005e92:	005b      	lsls	r3, r3, #1
 8005e94:	b21b      	sxth	r3, r3
 8005e96:	f043 0301 	orr.w	r3, r3, #1
 8005e9a:	b21b      	sxth	r3, r3
 8005e9c:	b299      	uxth	r1, r3
 8005e9e:	f107 0210 	add.w	r2, r7, #16
 8005ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ea6:	9300      	str	r3, [sp, #0]
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	f7fc fbe5 	bl	8002678 <HAL_I2C_Master_Receive>
    test[0] = 0x7F & test[0];
 8005eae:	7c3b      	ldrb	r3, [r7, #16]
 8005eb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	743b      	strb	r3, [r7, #16]
    test[0] |= (sevenSegmentChars[(dispDigit-'0')] & 0x01 )<< 7;
 8005eb8:	7c3b      	ldrb	r3, [r7, #16]
 8005eba:	b25a      	sxtb	r2, r3
 8005ebc:	78bb      	ldrb	r3, [r7, #2]
 8005ebe:	3b30      	subs	r3, #48	@ 0x30
 8005ec0:	492c      	ldr	r1, [pc, #176]	@ (8005f74 <dateTime_setDigitSegments+0x13c>)
 8005ec2:	5ccb      	ldrb	r3, [r1, r3]
 8005ec4:	01db      	lsls	r3, r3, #7
 8005ec6:	b25b      	sxtb	r3, r3
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	b25b      	sxtb	r3, r3
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	743b      	strb	r3, [r7, #16]
    test[1] |= sevenSegmentChars[(dispDigit-'0')] >> 1;
 8005ed0:	7c7a      	ldrb	r2, [r7, #17]
 8005ed2:	78bb      	ldrb	r3, [r7, #2]
 8005ed4:	3b30      	subs	r3, #48	@ 0x30
 8005ed6:	4927      	ldr	r1, [pc, #156]	@ (8005f74 <dateTime_setDigitSegments+0x13c>)
 8005ed8:	5ccb      	ldrb	r3, [r1, r3]
 8005eda:	085b      	lsrs	r3, r3, #1
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	747b      	strb	r3, [r7, #17]
    ht16k33_updateDisplayData (pConfig->hDisplayDriver, boo[0], test, 2);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6898      	ldr	r0, [r3, #8]
 8005ee8:	7b39      	ldrb	r1, [r7, #12]
 8005eea:	f107 0210 	add.w	r2, r7, #16
 8005eee:	2302      	movs	r3, #2
 8005ef0:	f7ff fb89 	bl	8005606 <ht16k33_updateDisplayData>
 8005ef4:	e036      	b.n	8005f64 <dateTime_setDigitSegments+0x12c>
  }
  else
  {
    boo[0] = segmentNum;
 8005ef6:	78fb      	ldrb	r3, [r7, #3]
 8005ef8:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->i2cAddrs)<<1, boo,  1, HAL_MAX_DELAY);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6818      	ldr	r0, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	791b      	ldrb	r3, [r3, #4]
 8005f02:	005b      	lsls	r3, r3, #1
 8005f04:	b299      	uxth	r1, r3
 8005f06:	f107 020c 	add.w	r2, r7, #12
 8005f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f0e:	9300      	str	r3, [sp, #0]
 8005f10:	2301      	movs	r3, #1
 8005f12:	f7fc fab3 	bl	800247c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(pConfig->hi2c, ((pConfig->i2cAddrs)<<1)|0x01, test, 1, HAL_MAX_DELAY);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6818      	ldr	r0, [r3, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	791b      	ldrb	r3, [r3, #4]
 8005f1e:	005b      	lsls	r3, r3, #1
 8005f20:	b21b      	sxth	r3, r3
 8005f22:	f043 0301 	orr.w	r3, r3, #1
 8005f26:	b21b      	sxth	r3, r3
 8005f28:	b299      	uxth	r1, r3
 8005f2a:	f107 0210 	add.w	r2, r7, #16
 8005f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f32:	9300      	str	r3, [sp, #0]
 8005f34:	2301      	movs	r3, #1
 8005f36:	f7fc fb9f 	bl	8002678 <HAL_I2C_Master_Receive>
    test[0] = 0x80 & test[0];
 8005f3a:	7c3b      	ldrb	r3, [r7, #16]
 8005f3c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	743b      	strb	r3, [r7, #16]
    displayBuffer[0] = test[0] | sevenSegmentChars[(dispDigit-'0')];
 8005f44:	7c3a      	ldrb	r2, [r7, #16]
 8005f46:	78bb      	ldrb	r3, [r7, #2]
 8005f48:	3b30      	subs	r3, #48	@ 0x30
 8005f4a:	490a      	ldr	r1, [pc, #40]	@ (8005f74 <dateTime_setDigitSegments+0x13c>)
 8005f4c:	5ccb      	ldrb	r3, [r1, r3]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	b2da      	uxtb	r2, r3
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	701a      	strb	r2, [r3, #0]
    ht16k33_updateDisplayData (pConfig->hDisplayDriver, segmentNum, displayBuffer, 1);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6898      	ldr	r0, [r3, #8]
 8005f5a:	78f9      	ldrb	r1, [r7, #3]
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	697a      	ldr	r2, [r7, #20]
 8005f60:	f7ff fb51 	bl	8005606 <ht16k33_updateDisplayData>
  }

  free(displayBuffer);
 8005f64:	6978      	ldr	r0, [r7, #20]
 8005f66:	f000 fd77 	bl	8006a58 <free>
  return 1;
 8005f6a:	2301      	movs	r3, #1
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3718      	adds	r7, #24
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	08007468 	.word	0x08007468

08005f78 <dateTime_setAlphaSegments>:

DateTime_Display_Status_t dateTime_setAlphaSegments(DateTime_Display_Config_t* const pConfig, const uint8_t segmentNum,
    const char dispAlpha)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	460b      	mov	r3, r1
 8005f82:	70fb      	strb	r3, [r7, #3]
 8005f84:	4613      	mov	r3, r2
 8005f86:	70bb      	strb	r3, [r7, #2]
  uint8_t displayBuffer[2] = {0,0};
 8005f88:	2300      	movs	r3, #0
 8005f8a:	81bb      	strh	r3, [r7, #12]

  displayBuffer[0] = (uint8_t)((fourteenSegmentChars[(uint8_t)(dispAlpha-0x41)]>>0) & 0xFF);
 8005f8c:	78bb      	ldrb	r3, [r7, #2]
 8005f8e:	3b41      	subs	r3, #65	@ 0x41
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	461a      	mov	r2, r3
 8005f94:	4b10      	ldr	r3, [pc, #64]	@ (8005fd8 <dateTime_setAlphaSegments+0x60>)
 8005f96:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	733b      	strb	r3, [r7, #12]
  displayBuffer[1] = (uint8_t)((fourteenSegmentChars[(uint8_t)(dispAlpha-0x41)]>>8) & 0xFF);
 8005f9e:	78bb      	ldrb	r3, [r7, #2]
 8005fa0:	3b41      	subs	r3, #65	@ 0x41
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8005fd8 <dateTime_setAlphaSegments+0x60>)
 8005fa8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005fac:	0a1b      	lsrs	r3, r3, #8
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	737b      	strb	r3, [r7, #13]
  ht16k33_updateDisplayData (pConfig->hDisplayDriver, (10 + (2*segmentNum)), displayBuffer, 2);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6898      	ldr	r0, [r3, #8]
 8005fb8:	78fb      	ldrb	r3, [r7, #3]
 8005fba:	3305      	adds	r3, #5
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	005b      	lsls	r3, r3, #1
 8005fc0:	b2d9      	uxtb	r1, r3
 8005fc2:	f107 020c 	add.w	r2, r7, #12
 8005fc6:	2302      	movs	r3, #2
 8005fc8:	f7ff fb1d 	bl	8005606 <ht16k33_updateDisplayData>

  return 1;
 8005fcc:	2301      	movs	r3, #1
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	08007434 	.word	0x08007434

08005fdc <dateTime_updateDisplayGlitch>:

DateTime_Display_Status_t dateTime_updateDisplayGlitch(DateTime_Display_Config_t* const pConfig,
    const char* const pGlitchData)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b086      	sub	sp, #24
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  DateTime_Display_Status_t isSuccess           = 0;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	75fb      	strb	r3, [r7, #23]
  uint8_t                   segmentCount        = 0;
 8005fea:	2300      	movs	r3, #0
 8005fec:	75bb      	strb	r3, [r7, #22]
  char                      digitSegBuffer[11];

  memcpy(&digitSegBuffer, pGlitchData, sizeof(digitSegBuffer));
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	f107 0308 	add.w	r3, r7, #8
 8005ff4:	6810      	ldr	r0, [r2, #0]
 8005ff6:	6851      	ldr	r1, [r2, #4]
 8005ff8:	c303      	stmia	r3!, {r0, r1}
 8005ffa:	8911      	ldrh	r1, [r2, #8]
 8005ffc:	7a92      	ldrb	r2, [r2, #10]
 8005ffe:	8019      	strh	r1, [r3, #0]
 8006000:	709a      	strb	r2, [r3, #2]

  //Update Glitch Digits
  for (segmentCount = 0; segmentCount < (sizeof(digitSegBuffer)-1); segmentCount++)
 8006002:	2300      	movs	r3, #0
 8006004:	75bb      	strb	r3, [r7, #22]
 8006006:	e018      	b.n	800603a <dateTime_updateDisplayGlitch+0x5e>
  {
    isSuccess |= dateTime_setDigitSegments(pConfig, digitSegmentOrder[segmentCount], digitSegBuffer[segmentCount]);
 8006008:	7dbb      	ldrb	r3, [r7, #22]
 800600a:	4a17      	ldr	r2, [pc, #92]	@ (8006068 <dateTime_updateDisplayGlitch+0x8c>)
 800600c:	5cd1      	ldrb	r1, [r2, r3]
 800600e:	7dbb      	ldrb	r3, [r7, #22]
 8006010:	3318      	adds	r3, #24
 8006012:	443b      	add	r3, r7
 8006014:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8006018:	461a      	mov	r2, r3
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f7ff ff0c 	bl	8005e38 <dateTime_setDigitSegments>
 8006020:	4603      	mov	r3, r0
 8006022:	461a      	mov	r2, r3
 8006024:	7dfb      	ldrb	r3, [r7, #23]
 8006026:	4313      	orrs	r3, r2
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	bf14      	ite	ne
 800602e:	2301      	movne	r3, #1
 8006030:	2300      	moveq	r3, #0
 8006032:	75fb      	strb	r3, [r7, #23]
  for (segmentCount = 0; segmentCount < (sizeof(digitSegBuffer)-1); segmentCount++)
 8006034:	7dbb      	ldrb	r3, [r7, #22]
 8006036:	3301      	adds	r3, #1
 8006038:	75bb      	strb	r3, [r7, #22]
 800603a:	7dbb      	ldrb	r3, [r7, #22]
 800603c:	2b09      	cmp	r3, #9
 800603e:	d9e3      	bls.n	8006008 <dateTime_updateDisplayGlitch+0x2c>
  }

  //Update Meridiem
  isSuccess |= dateTime_setLed(pConfig, MERIDIEM_LED_SEGMENT_ADDRESS, (DateTime_DisplayDataMeridiem_AM << 6));
 8006040:	2240      	movs	r2, #64	@ 0x40
 8006042:	2109      	movs	r1, #9
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f7ff fe34 	bl	8005cb2 <dateTime_setLed>
 800604a:	4603      	mov	r3, r0
 800604c:	461a      	mov	r2, r3
 800604e:	7dfb      	ldrb	r3, [r7, #23]
 8006050:	4313      	orrs	r3, r2
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b00      	cmp	r3, #0
 8006056:	bf14      	ite	ne
 8006058:	2301      	movne	r3, #1
 800605a:	2300      	moveq	r3, #0
 800605c:	75fb      	strb	r3, [r7, #23]

  return isSuccess;
 800605e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006060:	4618      	mov	r0, r3
 8006062:	3718      	adds	r7, #24
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	08007428 	.word	0x08007428

0800606c <dateTime_updateDisplay>:

DateTime_Display_Status_t dateTime_updateDisplay(DateTime_Display_Config_t* const pConfig)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  DateTime_Display_Status_t isSuccess           = 0;
 8006074:	2300      	movs	r3, #0
 8006076:	75fb      	strb	r3, [r7, #23]
  uint8_t                   digitSegBufferCount = 0;
 8006078:	2300      	movs	r3, #0
 800607a:	757b      	strb	r3, [r7, #21]
  uint8_t                   segmentCount        = 0;
 800607c:	2300      	movs	r3, #0
 800607e:	75bb      	strb	r3, [r7, #22]
  char                      digitSegBuffer[11];

  //Update Month Display Characters
  for (segmentCount = 0; segmentCount <= 2; segmentCount++)
 8006080:	2300      	movs	r3, #0
 8006082:	75bb      	strb	r3, [r7, #22]
 8006084:	e01e      	b.n	80060c4 <dateTime_updateDisplay+0x58>
  {
    isSuccess |= dateTime_setAlphaSegments(pConfig, segmentCount,
        monthDisplayChars[(pConfig->dateTimeData.Month)-1][2-segmentCount]);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	7b1b      	ldrb	r3, [r3, #12]
 800608a:	1e5a      	subs	r2, r3, #1
 800608c:	7dbb      	ldrb	r3, [r7, #22]
 800608e:	f1c3 0102 	rsb	r1, r3, #2
 8006092:	4848      	ldr	r0, [pc, #288]	@ (80061b4 <dateTime_updateDisplay+0x148>)
 8006094:	4613      	mov	r3, r2
 8006096:	005b      	lsls	r3, r3, #1
 8006098:	4413      	add	r3, r2
 800609a:	4403      	add	r3, r0
 800609c:	440b      	add	r3, r1
 800609e:	781a      	ldrb	r2, [r3, #0]
    isSuccess |= dateTime_setAlphaSegments(pConfig, segmentCount,
 80060a0:	7dbb      	ldrb	r3, [r7, #22]
 80060a2:	4619      	mov	r1, r3
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f7ff ff67 	bl	8005f78 <dateTime_setAlphaSegments>
 80060aa:	4603      	mov	r3, r0
 80060ac:	461a      	mov	r2, r3
 80060ae:	7dfb      	ldrb	r3, [r7, #23]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	bf14      	ite	ne
 80060b8:	2301      	movne	r3, #1
 80060ba:	2300      	moveq	r3, #0
 80060bc:	75fb      	strb	r3, [r7, #23]
  for (segmentCount = 0; segmentCount <= 2; segmentCount++)
 80060be:	7dbb      	ldrb	r3, [r7, #22]
 80060c0:	3301      	adds	r3, #1
 80060c2:	75bb      	strb	r3, [r7, #22]
 80060c4:	7dbb      	ldrb	r3, [r7, #22]
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d9dd      	bls.n	8006086 <dateTime_updateDisplay+0x1a>
  }

  //Update Day, Year and Time
  digitSegBufferCount = snprintf(digitSegBuffer, sizeof(digitSegBuffer), "%02d", pConfig->dateTimeData.Day);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	7b5b      	ldrb	r3, [r3, #13]
 80060ce:	f107 0008 	add.w	r0, r7, #8
 80060d2:	4a39      	ldr	r2, [pc, #228]	@ (80061b8 <dateTime_updateDisplay+0x14c>)
 80060d4:	210b      	movs	r1, #11
 80060d6:	f000 fd75 	bl	8006bc4 <sniprintf>
 80060da:	4603      	mov	r3, r0
 80060dc:	757b      	strb	r3, [r7, #21]
  digitSegBufferCount += snprintf(digitSegBuffer+digitSegBufferCount, sizeof(digitSegBuffer)-digitSegBufferCount,
 80060de:	7d7b      	ldrb	r3, [r7, #21]
 80060e0:	f107 0208 	add.w	r2, r7, #8
 80060e4:	18d0      	adds	r0, r2, r3
 80060e6:	7d7b      	ldrb	r3, [r7, #21]
 80060e8:	f1c3 010b 	rsb	r1, r3, #11
      "%04d", pConfig->dateTimeData.Year);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	89db      	ldrh	r3, [r3, #14]
  digitSegBufferCount += snprintf(digitSegBuffer+digitSegBufferCount, sizeof(digitSegBuffer)-digitSegBufferCount,
 80060f0:	4a32      	ldr	r2, [pc, #200]	@ (80061bc <dateTime_updateDisplay+0x150>)
 80060f2:	f000 fd67 	bl	8006bc4 <sniprintf>
 80060f6:	4603      	mov	r3, r0
 80060f8:	b2da      	uxtb	r2, r3
 80060fa:	7d7b      	ldrb	r3, [r7, #21]
 80060fc:	4413      	add	r3, r2
 80060fe:	757b      	strb	r3, [r7, #21]
  digitSegBufferCount += snprintf(digitSegBuffer+digitSegBufferCount, sizeof(digitSegBuffer)-digitSegBufferCount,
 8006100:	7d7b      	ldrb	r3, [r7, #21]
 8006102:	f107 0208 	add.w	r2, r7, #8
 8006106:	18d0      	adds	r0, r2, r3
 8006108:	7d7b      	ldrb	r3, [r7, #21]
 800610a:	f1c3 010b 	rsb	r1, r3, #11
      "%02d", pConfig->dateTimeData.Hour);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	7c1b      	ldrb	r3, [r3, #16]
  digitSegBufferCount += snprintf(digitSegBuffer+digitSegBufferCount, sizeof(digitSegBuffer)-digitSegBufferCount,
 8006112:	4a29      	ldr	r2, [pc, #164]	@ (80061b8 <dateTime_updateDisplay+0x14c>)
 8006114:	f000 fd56 	bl	8006bc4 <sniprintf>
 8006118:	4603      	mov	r3, r0
 800611a:	b2da      	uxtb	r2, r3
 800611c:	7d7b      	ldrb	r3, [r7, #21]
 800611e:	4413      	add	r3, r2
 8006120:	757b      	strb	r3, [r7, #21]
  digitSegBufferCount += snprintf(digitSegBuffer+digitSegBufferCount, sizeof(digitSegBuffer)-digitSegBufferCount,
 8006122:	7d7b      	ldrb	r3, [r7, #21]
 8006124:	f107 0208 	add.w	r2, r7, #8
 8006128:	18d0      	adds	r0, r2, r3
 800612a:	7d7b      	ldrb	r3, [r7, #21]
 800612c:	f1c3 010b 	rsb	r1, r3, #11
      "%02d", pConfig->dateTimeData.Minute);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	7c5b      	ldrb	r3, [r3, #17]
  digitSegBufferCount += snprintf(digitSegBuffer+digitSegBufferCount, sizeof(digitSegBuffer)-digitSegBufferCount,
 8006134:	4a20      	ldr	r2, [pc, #128]	@ (80061b8 <dateTime_updateDisplay+0x14c>)
 8006136:	f000 fd45 	bl	8006bc4 <sniprintf>
 800613a:	4603      	mov	r3, r0
 800613c:	b2da      	uxtb	r2, r3
 800613e:	7d7b      	ldrb	r3, [r7, #21]
 8006140:	4413      	add	r3, r2
 8006142:	757b      	strb	r3, [r7, #21]

  for (segmentCount = 0; segmentCount < (sizeof(digitSegBuffer)-1); segmentCount++)
 8006144:	2300      	movs	r3, #0
 8006146:	75bb      	strb	r3, [r7, #22]
 8006148:	e018      	b.n	800617c <dateTime_updateDisplay+0x110>
  {
    isSuccess |= dateTime_setDigitSegments(pConfig, digitSegmentOrder[segmentCount], digitSegBuffer[segmentCount]);
 800614a:	7dbb      	ldrb	r3, [r7, #22]
 800614c:	4a1c      	ldr	r2, [pc, #112]	@ (80061c0 <dateTime_updateDisplay+0x154>)
 800614e:	5cd1      	ldrb	r1, [r2, r3]
 8006150:	7dbb      	ldrb	r3, [r7, #22]
 8006152:	3318      	adds	r3, #24
 8006154:	443b      	add	r3, r7
 8006156:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800615a:	461a      	mov	r2, r3
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f7ff fe6b 	bl	8005e38 <dateTime_setDigitSegments>
 8006162:	4603      	mov	r3, r0
 8006164:	461a      	mov	r2, r3
 8006166:	7dfb      	ldrb	r3, [r7, #23]
 8006168:	4313      	orrs	r3, r2
 800616a:	b2db      	uxtb	r3, r3
 800616c:	2b00      	cmp	r3, #0
 800616e:	bf14      	ite	ne
 8006170:	2301      	movne	r3, #1
 8006172:	2300      	moveq	r3, #0
 8006174:	75fb      	strb	r3, [r7, #23]
  for (segmentCount = 0; segmentCount < (sizeof(digitSegBuffer)-1); segmentCount++)
 8006176:	7dbb      	ldrb	r3, [r7, #22]
 8006178:	3301      	adds	r3, #1
 800617a:	75bb      	strb	r3, [r7, #22]
 800617c:	7dbb      	ldrb	r3, [r7, #22]
 800617e:	2b09      	cmp	r3, #9
 8006180:	d9e3      	bls.n	800614a <dateTime_updateDisplay+0xde>
  }

  //Update Meridiem
  isSuccess |= dateTime_setLed(pConfig, MERIDIEM_LED_SEGMENT_ADDRESS, (pConfig->dateTimeData.Meridiem << 6));
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	7c9b      	ldrb	r3, [r3, #18]
 8006186:	019b      	lsls	r3, r3, #6
 8006188:	b2db      	uxtb	r3, r3
 800618a:	461a      	mov	r2, r3
 800618c:	2109      	movs	r1, #9
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f7ff fd8f 	bl	8005cb2 <dateTime_setLed>
 8006194:	4603      	mov	r3, r0
 8006196:	461a      	mov	r2, r3
 8006198:	7dfb      	ldrb	r3, [r7, #23]
 800619a:	4313      	orrs	r3, r2
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	bf14      	ite	ne
 80061a2:	2301      	movne	r3, #1
 80061a4:	2300      	moveq	r3, #0
 80061a6:	75fb      	strb	r3, [r7, #23]

  return isSuccess;
 80061a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3718      	adds	r7, #24
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	08007474 	.word	0x08007474
 80061b8:	080073e8 	.word	0x080073e8
 80061bc:	080073f0 	.word	0x080073f0
 80061c0:	08007428 	.word	0x08007428

080061c4 <timeCircuit_control_init>:
  uint8_t                     keypadInputCount;

} TimeCircuit_Control_Config;

TimeCircuit_Control_Config_t* timeCircuit_control_init(I2C_HandleTypeDef* const hi2c, RTC_HandleTypeDef* hrtc)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  TimeCircuit_Control_Config_t* pConfig = malloc(sizeof(TimeCircuit_Control_Config_t));
 80061ce:	2040      	movs	r0, #64	@ 0x40
 80061d0:	f000 fc3a 	bl	8006a48 <malloc>
 80061d4:	4603      	mov	r3, r0
 80061d6:	60fb      	str	r3, [r7, #12]
  pConfig->hi2c = hi2c;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	601a      	str	r2, [r3, #0]
  pConfig->hrtc = hrtc;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	683a      	ldr	r2, [r7, #0]
 80061e2:	605a      	str	r2, [r3, #4]

  //Initialise the time circuit displays
  pConfig->pDestinationTime  = dateTime_display_init(hi2c, DESTINATION_DISPLAY_I2C_ADDRESS);
 80061e4:	2171      	movs	r1, #113	@ 0x71
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f7ff fb1a 	bl	8005820 <dateTime_display_init>
 80061ec:	4602      	mov	r2, r0
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	609a      	str	r2, [r3, #8]
  pConfig-> pPresentTime     = dateTime_display_init(hi2c, PRESENT_DISPLAY_I2C_ADDRESS);
 80061f2:	2172      	movs	r1, #114	@ 0x72
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f7ff fb13 	bl	8005820 <dateTime_display_init>
 80061fa:	4602      	mov	r2, r0
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	60da      	str	r2, [r3, #12]
  pConfig->pLastDepartedTime = dateTime_display_init(hi2c, DEPARTED_DISPLAY_I2C_ADDRESS);
 8006200:	2174      	movs	r1, #116	@ 0x74
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f7ff fb0c 	bl	8005820 <dateTime_display_init>
 8006208:	4602      	mov	r2, r0
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	611a      	str	r2, [r3, #16]

  //Initialise the time circuit keypad
  pConfig->pTimeCircuitKeypad = keypad3x4w_init(timeCircuitKeypadPinParam);
 800620e:	4805      	ldr	r0, [pc, #20]	@ (8006224 <timeCircuit_control_init+0x60>)
 8006210:	f7ff fa5a 	bl	80056c8 <keypad3x4w_init>
 8006214:	4602      	mov	r2, r0
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	615a      	str	r2, [r3, #20]

  return pConfig;
 800621a:	68fb      	ldr	r3, [r7, #12]
}
 800621c:	4618      	mov	r0, r3
 800621e:	3710      	adds	r7, #16
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	20000020 	.word	0x20000020

08006228 <timeCircuit_control_clearDisplays>:

TimeCircuit_Control_Status_t timeCircuit_control_clearDisplays(TimeCircuit_Control_Config_t* const pConfig)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = 1;
 8006230:	2301      	movs	r3, #1
 8006232:	73fb      	strb	r3, [r7, #15]

  isSuccess &= dateTime_clearDisplay(pConfig->pDestinationTime);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	4618      	mov	r0, r3
 800623a:	f7ff fcfc 	bl	8005c36 <dateTime_clearDisplay>
 800623e:	4603      	mov	r3, r0
 8006240:	461a      	mov	r2, r3
 8006242:	7bfb      	ldrb	r3, [r7, #15]
 8006244:	4013      	ands	r3, r2
 8006246:	2b00      	cmp	r3, #0
 8006248:	bf14      	ite	ne
 800624a:	2301      	movne	r3, #1
 800624c:	2300      	moveq	r3, #0
 800624e:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_clearDisplay(pConfig->pPresentTime);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	4618      	mov	r0, r3
 8006256:	f7ff fcee 	bl	8005c36 <dateTime_clearDisplay>
 800625a:	4603      	mov	r3, r0
 800625c:	461a      	mov	r2, r3
 800625e:	7bfb      	ldrb	r3, [r7, #15]
 8006260:	4013      	ands	r3, r2
 8006262:	2b00      	cmp	r3, #0
 8006264:	bf14      	ite	ne
 8006266:	2301      	movne	r3, #1
 8006268:	2300      	moveq	r3, #0
 800626a:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_clearDisplay(pConfig->pLastDepartedTime);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	4618      	mov	r0, r3
 8006272:	f7ff fce0 	bl	8005c36 <dateTime_clearDisplay>
 8006276:	4603      	mov	r3, r0
 8006278:	461a      	mov	r2, r3
 800627a:	7bfb      	ldrb	r3, [r7, #15]
 800627c:	4013      	ands	r3, r2
 800627e:	2b00      	cmp	r3, #0
 8006280:	bf14      	ite	ne
 8006282:	2301      	movne	r3, #1
 8006284:	2300      	moveq	r3, #0
 8006286:	73fb      	strb	r3, [r7, #15]

  return isSuccess;
 8006288:	7bfb      	ldrb	r3, [r7, #15]
}
 800628a:	4618      	mov	r0, r3
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
	...

08006294 <timeCircuit_control_setDefaultDateTimes>:

TimeCircuit_Control_Status_t timeCircuit_control_setDefaultDateTimes(TimeCircuit_Control_Config_t* const pConfig)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = 1;
 800629c:	2301      	movs	r3, #1
 800629e:	73fb      	strb	r3, [r7, #15]

  isSuccess &= dateTime_setDisplayData(pConfig->pDestinationTime, defaultDestinationTimeData);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	4917      	ldr	r1, [pc, #92]	@ (8006304 <timeCircuit_control_setDefaultDateTimes+0x70>)
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7ff fc04 	bl	8005ab4 <dateTime_setDisplayData>
 80062ac:	4603      	mov	r3, r0
 80062ae:	461a      	mov	r2, r3
 80062b0:	7bfb      	ldrb	r3, [r7, #15]
 80062b2:	4013      	ands	r3, r2
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	bf14      	ite	ne
 80062b8:	2301      	movne	r3, #1
 80062ba:	2300      	moveq	r3, #0
 80062bc:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_setDisplayData(pConfig->pPresentTime, defaultPresentTimeData);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	4911      	ldr	r1, [pc, #68]	@ (8006308 <timeCircuit_control_setDefaultDateTimes+0x74>)
 80062c4:	4618      	mov	r0, r3
 80062c6:	f7ff fbf5 	bl	8005ab4 <dateTime_setDisplayData>
 80062ca:	4603      	mov	r3, r0
 80062cc:	461a      	mov	r2, r3
 80062ce:	7bfb      	ldrb	r3, [r7, #15]
 80062d0:	4013      	ands	r3, r2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	bf14      	ite	ne
 80062d6:	2301      	movne	r3, #1
 80062d8:	2300      	moveq	r3, #0
 80062da:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_setDisplayData(pConfig->pLastDepartedTime, defaultLastDepartedTimeData);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	490a      	ldr	r1, [pc, #40]	@ (800630c <timeCircuit_control_setDefaultDateTimes+0x78>)
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7ff fbe6 	bl	8005ab4 <dateTime_setDisplayData>
 80062e8:	4603      	mov	r3, r0
 80062ea:	461a      	mov	r2, r3
 80062ec:	7bfb      	ldrb	r3, [r7, #15]
 80062ee:	4013      	ands	r3, r2
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	bf14      	ite	ne
 80062f4:	2301      	movne	r3, #1
 80062f6:	2300      	moveq	r3, #0
 80062f8:	73fb      	strb	r3, [r7, #15]

  return isSuccess;
 80062fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	080074a4 	.word	0x080074a4
 8006308:	080074b0 	.word	0x080074b0
 800630c:	080074bc 	.word	0x080074bc

08006310 <timeCircuit_control_updateDisplays>:

TimeCircuit_Control_Status_t timeCircuit_control_updateDisplays(TimeCircuit_Control_Config_t* const pConfig)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = 1;
 8006318:	2301      	movs	r3, #1
 800631a:	73fb      	strb	r3, [r7, #15]

  isSuccess &= dateTime_updateDisplay(pConfig->pDestinationTime);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	4618      	mov	r0, r3
 8006322:	f7ff fea3 	bl	800606c <dateTime_updateDisplay>
 8006326:	4603      	mov	r3, r0
 8006328:	461a      	mov	r2, r3
 800632a:	7bfb      	ldrb	r3, [r7, #15]
 800632c:	4013      	ands	r3, r2
 800632e:	2b00      	cmp	r3, #0
 8006330:	bf14      	ite	ne
 8006332:	2301      	movne	r3, #1
 8006334:	2300      	moveq	r3, #0
 8006336:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_updateDisplay(pConfig->pPresentTime);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	4618      	mov	r0, r3
 800633e:	f7ff fe95 	bl	800606c <dateTime_updateDisplay>
 8006342:	4603      	mov	r3, r0
 8006344:	461a      	mov	r2, r3
 8006346:	7bfb      	ldrb	r3, [r7, #15]
 8006348:	4013      	ands	r3, r2
 800634a:	2b00      	cmp	r3, #0
 800634c:	bf14      	ite	ne
 800634e:	2301      	movne	r3, #1
 8006350:	2300      	moveq	r3, #0
 8006352:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_updateDisplay(pConfig->pLastDepartedTime);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	4618      	mov	r0, r3
 800635a:	f7ff fe87 	bl	800606c <dateTime_updateDisplay>
 800635e:	4603      	mov	r3, r0
 8006360:	461a      	mov	r2, r3
 8006362:	7bfb      	ldrb	r3, [r7, #15]
 8006364:	4013      	ands	r3, r2
 8006366:	2b00      	cmp	r3, #0
 8006368:	bf14      	ite	ne
 800636a:	2301      	movne	r3, #1
 800636c:	2300      	moveq	r3, #0
 800636e:	73fb      	strb	r3, [r7, #15]

  return isSuccess;
 8006370:	7bfb      	ldrb	r3, [r7, #15]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <timeCircuit_control_checkButtonActivation>:

TimeCircuit_Control_Status_t timeCircuit_control_checkButtonActivation(const bool* const isbuttonActivated,
    bool* hasButtonActivated, uint32_t* previousTimeMS)
{
 800637a:	b580      	push	{r7, lr}
 800637c:	b086      	sub	sp, #24
 800637e:	af00      	add	r7, sp, #0
 8006380:	60f8      	str	r0, [r7, #12]
 8006382:	60b9      	str	r1, [r7, #8]
 8006384:	607a      	str	r2, [r7, #4]
  TimeCircuit_Control_Status_t hasStateChanged = 0;
 8006386:	2300      	movs	r3, #0
 8006388:	75fb      	strb	r3, [r7, #23]
  uint32_t currentTimeMS = HAL_GetTick();
 800638a:	f7fb f8a1 	bl	80014d0 <HAL_GetTick>
 800638e:	6138      	str	r0, [r7, #16]

  //Verify that the button state hasn't changed
  if (*isbuttonActivated != *hasButtonActivated)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	781a      	ldrb	r2, [r3, #0]
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	429a      	cmp	r2, r3
 800639a:	d00e      	beq.n	80063ba <timeCircuit_control_checkButtonActivation+0x40>
  {
    //Filter out false positive button activations
    if ((currentTimeMS - *previousTimeMS) > BUTTON_DEBOUNCE_TIME_MS)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	2b64      	cmp	r3, #100	@ 0x64
 80063a6:	d908      	bls.n	80063ba <timeCircuit_control_checkButtonActivation+0x40>
    {
      *previousTimeMS = currentTimeMS;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	601a      	str	r2, [r3, #0]
      hasStateChanged = true;
 80063ae:	2301      	movs	r3, #1
 80063b0:	75fb      	strb	r3, [r7, #23]
      *hasButtonActivated = *isbuttonActivated;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	781a      	ldrb	r2, [r3, #0]
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	701a      	strb	r2, [r3, #0]
    }
  }
  return hasStateChanged;
 80063ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3718      	adds	r7, #24
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <timeCircuit_control_readInputDateTime>:


TimeCircuit_Control_Status_t timeCircuit_control_readInputDateTime(TimeCircuit_Control_Config_t * const pConfig)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = 1;
 80063cc:	2301      	movs	r3, #1
 80063ce:	73fb      	strb	r3, [r7, #15]
  bool isButtonActivated                  = false;
 80063d0:	2300      	movs	r3, #0
 80063d2:	737b      	strb	r3, [r7, #13]
  bool hasButtonStateChanged              = false;
 80063d4:	2300      	movs	r3, #0
 80063d6:	73bb      	strb	r3, [r7, #14]

  static bool hasButtonActivated          = false;
  static uint32_t previousTime            = 0;

  isButtonActivated  = keypad3x4w_readKeypad(pConfig->pTimeCircuitKeypad, &pConfig->keypadInputValue);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	695a      	ldr	r2, [r3, #20]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	333c      	adds	r3, #60	@ 0x3c
 80063e0:	4619      	mov	r1, r3
 80063e2:	4610      	mov	r0, r2
 80063e4:	f7ff f9b2 	bl	800574c <keypad3x4w_readKeypad>
 80063e8:	4603      	mov	r3, r0
 80063ea:	737b      	strb	r3, [r7, #13]
  hasButtonStateChanged = timeCircuit_control_checkButtonActivation(&isButtonActivated, &hasButtonActivated,
 80063ec:	f107 030d 	add.w	r3, r7, #13
 80063f0:	4a16      	ldr	r2, [pc, #88]	@ (800644c <timeCircuit_control_readInputDateTime+0x88>)
 80063f2:	4917      	ldr	r1, [pc, #92]	@ (8006450 <timeCircuit_control_readInputDateTime+0x8c>)
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7ff ffc0 	bl	800637a <timeCircuit_control_checkButtonActivation>
 80063fa:	4603      	mov	r3, r0
 80063fc:	73bb      	strb	r3, [r7, #14]
        &previousTime);

  if ((hasButtonStateChanged == true) && (isButtonActivated == true))
 80063fe:	7bbb      	ldrb	r3, [r7, #14]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d015      	beq.n	8006430 <timeCircuit_control_readInputDateTime+0x6c>
 8006404:	7b7b      	ldrb	r3, [r7, #13]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d012      	beq.n	8006430 <timeCircuit_control_readInputDateTime+0x6c>
  {
    pConfig->keypadInput[pConfig->keypadInputCount] = pConfig->keypadInputValue;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006410:	4619      	mov	r1, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	440b      	add	r3, r1
 800641c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    pConfig->keypadInputCount++;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006426:	3301      	adds	r3, #1
 8006428:	b2da      	uxtb	r2, r3
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

  if (pConfig->keypadInputCount >= 12)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006436:	2b0b      	cmp	r3, #11
 8006438:	d903      	bls.n	8006442 <timeCircuit_control_readInputDateTime+0x7e>
  {
    pConfig->keypadInputCount = 0;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

  return isSuccess;
 8006442:	7bfb      	ldrb	r3, [r7, #15]
}
 8006444:	4618      	mov	r0, r3
 8006446:	3710      	adds	r7, #16
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}
 800644c:	2000038c 	.word	0x2000038c
 8006450:	20000389 	.word	0x20000389

08006454 <timeCircuit_control_getRtcDateTime>:

TimeCircuit_Control_Status_t timeCircuit_control_getRtcDateTime(TimeCircuit_Control_Config_t * const pConfig)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = 1;
 800645c:	2301      	movs	r3, #1
 800645e:	73fb      	strb	r3, [r7, #15]

  //Retrieve RTC Date Time Data
  isSuccess &= HAL_RTC_GetTime(pConfig->hrtc, &pConfig->hRtcTime, RTC_FORMAT_BIN);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6858      	ldr	r0, [r3, #4]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	3318      	adds	r3, #24
 8006468:	2200      	movs	r2, #0
 800646a:	4619      	mov	r1, r3
 800646c:	f7fe fa53 	bl	8004916 <HAL_RTC_GetTime>
 8006470:	4603      	mov	r3, r0
 8006472:	461a      	mov	r2, r3
 8006474:	7bfb      	ldrb	r3, [r7, #15]
 8006476:	4013      	ands	r3, r2
 8006478:	2b00      	cmp	r3, #0
 800647a:	bf14      	ite	ne
 800647c:	2301      	movne	r3, #1
 800647e:	2300      	moveq	r3, #0
 8006480:	73fb      	strb	r3, [r7, #15]
  isSuccess &= HAL_RTC_GetDate(pConfig->hrtc, &pConfig->hRtcDate, RTC_FORMAT_BIN);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6858      	ldr	r0, [r3, #4]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	332c      	adds	r3, #44	@ 0x2c
 800648a:	2200      	movs	r2, #0
 800648c:	4619      	mov	r1, r3
 800648e:	f7fe fb24 	bl	8004ada <HAL_RTC_GetDate>
 8006492:	4603      	mov	r3, r0
 8006494:	461a      	mov	r2, r3
 8006496:	7bfb      	ldrb	r3, [r7, #15]
 8006498:	4013      	ands	r3, r2
 800649a:	2b00      	cmp	r3, #0
 800649c:	bf14      	ite	ne
 800649e:	2301      	movne	r3, #1
 80064a0:	2300      	moveq	r3, #0
 80064a2:	73fb      	strb	r3, [r7, #15]

  return isSuccess;
 80064a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <timeCircuit_control_setRtcDateTime>:

TimeCircuit_Control_Status_t timeCircuit_control_setRtcDateTime(TimeCircuit_Control_Config_t * const pConfig)
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b084      	sub	sp, #16
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = 1;
 80064b6:	2301      	movs	r3, #1
 80064b8:	73fb      	strb	r3, [r7, #15]

  //Retrieve default RTC date time data
  isSuccess &= timeCircuit_control_getRtcDateTime(pConfig);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7ff ffca 	bl	8006454 <timeCircuit_control_getRtcDateTime>
 80064c0:	4603      	mov	r3, r0
 80064c2:	461a      	mov	r2, r3
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
 80064c6:	4013      	ands	r3, r2
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	bf14      	ite	ne
 80064cc:	2301      	movne	r3, #1
 80064ce:	2300      	moveq	r3, #0
 80064d0:	73fb      	strb	r3, [r7, #15]

  //Get present date time for RTC date time
  isSuccess &= dateTime_getRtcDateTimeData(pConfig->pPresentTime, &pConfig->hRtcDate, &pConfig->hRtcTime);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	68d8      	ldr	r0, [r3, #12]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	3318      	adds	r3, #24
 80064e0:	461a      	mov	r2, r3
 80064e2:	f7ff fb34 	bl	8005b4e <dateTime_getRtcDateTimeData>
 80064e6:	4603      	mov	r3, r0
 80064e8:	461a      	mov	r2, r3
 80064ea:	7bfb      	ldrb	r3, [r7, #15]
 80064ec:	4013      	ands	r3, r2
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	bf14      	ite	ne
 80064f2:	2301      	movne	r3, #1
 80064f4:	2300      	moveq	r3, #0
 80064f6:	73fb      	strb	r3, [r7, #15]

  //Set RTC with present time data
  isSuccess &= HAL_RTC_SetTime(pConfig->hrtc, &pConfig->hRtcTime, RTC_FORMAT_BIN);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6858      	ldr	r0, [r3, #4]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	3318      	adds	r3, #24
 8006500:	2200      	movs	r2, #0
 8006502:	4619      	mov	r1, r3
 8006504:	f7fe f96d 	bl	80047e2 <HAL_RTC_SetTime>
 8006508:	4603      	mov	r3, r0
 800650a:	461a      	mov	r2, r3
 800650c:	7bfb      	ldrb	r3, [r7, #15]
 800650e:	4013      	ands	r3, r2
 8006510:	2b00      	cmp	r3, #0
 8006512:	bf14      	ite	ne
 8006514:	2301      	movne	r3, #1
 8006516:	2300      	moveq	r3, #0
 8006518:	73fb      	strb	r3, [r7, #15]
  isSuccess &= HAL_RTC_SetDate(pConfig->hrtc, &pConfig->hRtcDate, RTC_FORMAT_BIN);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6858      	ldr	r0, [r3, #4]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	332c      	adds	r3, #44	@ 0x2c
 8006522:	2200      	movs	r2, #0
 8006524:	4619      	mov	r1, r3
 8006526:	f7fe fa54 	bl	80049d2 <HAL_RTC_SetDate>
 800652a:	4603      	mov	r3, r0
 800652c:	461a      	mov	r2, r3
 800652e:	7bfb      	ldrb	r3, [r7, #15]
 8006530:	4013      	ands	r3, r2
 8006532:	2b00      	cmp	r3, #0
 8006534:	bf14      	ite	ne
 8006536:	2301      	movne	r3, #1
 8006538:	2300      	moveq	r3, #0
 800653a:	73fb      	strb	r3, [r7, #15]

  return isSuccess;
 800653c:	7bfb      	ldrb	r3, [r7, #15]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <timeCircuit_control_setDefaultDisplays>:

TimeCircuit_Control_Status_t timeCircuit_control_setDefaultDisplays(TimeCircuit_Control_Config_t * const pConfig)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b084      	sub	sp, #16
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = 1;
 800654e:	2301      	movs	r3, #1
 8006550:	73fb      	strb	r3, [r7, #15]

  //Reset to displays to default
  isSuccess &= timeCircuit_control_clearDisplays(pConfig);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f7ff fe68 	bl	8006228 <timeCircuit_control_clearDisplays>
 8006558:	4603      	mov	r3, r0
 800655a:	461a      	mov	r2, r3
 800655c:	7bfb      	ldrb	r3, [r7, #15]
 800655e:	4013      	ands	r3, r2
 8006560:	2b00      	cmp	r3, #0
 8006562:	bf14      	ite	ne
 8006564:	2301      	movne	r3, #1
 8006566:	2300      	moveq	r3, #0
 8006568:	73fb      	strb	r3, [r7, #15]
  isSuccess &= timeCircuit_control_setDefaultDateTimes(pConfig);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f7ff fe92 	bl	8006294 <timeCircuit_control_setDefaultDateTimes>
 8006570:	4603      	mov	r3, r0
 8006572:	461a      	mov	r2, r3
 8006574:	7bfb      	ldrb	r3, [r7, #15]
 8006576:	4013      	ands	r3, r2
 8006578:	2b00      	cmp	r3, #0
 800657a:	bf14      	ite	ne
 800657c:	2301      	movne	r3, #1
 800657e:	2300      	moveq	r3, #0
 8006580:	73fb      	strb	r3, [r7, #15]
  isSuccess &= timeCircuit_control_updateDisplays(pConfig);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f7ff fec4 	bl	8006310 <timeCircuit_control_updateDisplays>
 8006588:	4603      	mov	r3, r0
 800658a:	461a      	mov	r2, r3
 800658c:	7bfb      	ldrb	r3, [r7, #15]
 800658e:	4013      	ands	r3, r2
 8006590:	2b00      	cmp	r3, #0
 8006592:	bf14      	ite	ne
 8006594:	2301      	movne	r3, #1
 8006596:	2300      	moveq	r3, #0
 8006598:	73fb      	strb	r3, [r7, #15]
  pConfig->keypadInputCount = 0;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  isSuccess &= timeCircuit_control_setRtcDateTime(pConfig);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f7ff ff83 	bl	80064ae <timeCircuit_control_setRtcDateTime>
 80065a8:	4603      	mov	r3, r0
 80065aa:	461a      	mov	r2, r3
 80065ac:	7bfb      	ldrb	r3, [r7, #15]
 80065ae:	4013      	ands	r3, r2
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	bf14      	ite	ne
 80065b4:	2301      	movne	r3, #1
 80065b6:	2300      	moveq	r3, #0
 80065b8:	73fb      	strb	r3, [r7, #15]

  return isSuccess;
 80065ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <timeCircuit_control_updatePresentDateTime>:

TimeCircuit_Control_Status_t timeCircuit_control_updatePresentDateTime(TimeCircuit_Control_Config_t * const pConfig)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = 1;
 80065cc:	2301      	movs	r3, #1
 80065ce:	73fb      	strb	r3, [r7, #15]
  static uint8_t previousMinute = 0;
  isSuccess &= HAL_RTC_GetTime(pConfig->hrtc, &pConfig->hRtcTime, RTC_FORMAT_BIN);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6858      	ldr	r0, [r3, #4]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	3318      	adds	r3, #24
 80065d8:	2200      	movs	r2, #0
 80065da:	4619      	mov	r1, r3
 80065dc:	f7fe f99b 	bl	8004916 <HAL_RTC_GetTime>
 80065e0:	4603      	mov	r3, r0
 80065e2:	461a      	mov	r2, r3
 80065e4:	7bfb      	ldrb	r3, [r7, #15]
 80065e6:	4013      	ands	r3, r2
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	bf14      	ite	ne
 80065ec:	2301      	movne	r3, #1
 80065ee:	2300      	moveq	r3, #0
 80065f0:	73fb      	strb	r3, [r7, #15]

  if (pConfig->hRtcTime.Minutes != previousMinute)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	7e5a      	ldrb	r2, [r3, #25]
 80065f6:	4b1d      	ldr	r3, [pc, #116]	@ (800666c <timeCircuit_control_updatePresentDateTime+0xa8>)
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d030      	beq.n	8006660 <timeCircuit_control_updatePresentDateTime+0x9c>
  {
    //Retrieve RTC date time data
    isSuccess &= timeCircuit_control_getRtcDateTime(pConfig);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f7ff ff28 	bl	8006454 <timeCircuit_control_getRtcDateTime>
 8006604:	4603      	mov	r3, r0
 8006606:	461a      	mov	r2, r3
 8006608:	7bfb      	ldrb	r3, [r7, #15]
 800660a:	4013      	ands	r3, r2
 800660c:	2b00      	cmp	r3, #0
 800660e:	bf14      	ite	ne
 8006610:	2301      	movne	r3, #1
 8006612:	2300      	moveq	r3, #0
 8006614:	73fb      	strb	r3, [r7, #15]

    //Set present date time to RTC date time
    isSuccess &= dateTime_setRtcDateTimeData(pConfig->pPresentTime, &pConfig->hRtcDate, &pConfig->hRtcTime);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	68d8      	ldr	r0, [r3, #12]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	3318      	adds	r3, #24
 8006624:	461a      	mov	r2, r3
 8006626:	f7ff fac4 	bl	8005bb2 <dateTime_setRtcDateTimeData>
 800662a:	4603      	mov	r3, r0
 800662c:	461a      	mov	r2, r3
 800662e:	7bfb      	ldrb	r3, [r7, #15]
 8006630:	4013      	ands	r3, r2
 8006632:	2b00      	cmp	r3, #0
 8006634:	bf14      	ite	ne
 8006636:	2301      	movne	r3, #1
 8006638:	2300      	moveq	r3, #0
 800663a:	73fb      	strb	r3, [r7, #15]

    //Update present display
    isSuccess &= dateTime_updateDisplay(pConfig->pPresentTime);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	4618      	mov	r0, r3
 8006642:	f7ff fd13 	bl	800606c <dateTime_updateDisplay>
 8006646:	4603      	mov	r3, r0
 8006648:	461a      	mov	r2, r3
 800664a:	7bfb      	ldrb	r3, [r7, #15]
 800664c:	4013      	ands	r3, r2
 800664e:	2b00      	cmp	r3, #0
 8006650:	bf14      	ite	ne
 8006652:	2301      	movne	r3, #1
 8006654:	2300      	moveq	r3, #0
 8006656:	73fb      	strb	r3, [r7, #15]

    previousMinute = pConfig->hRtcTime.Minutes;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	7e5a      	ldrb	r2, [r3, #25]
 800665c:	4b03      	ldr	r3, [pc, #12]	@ (800666c <timeCircuit_control_updatePresentDateTime+0xa8>)
 800665e:	701a      	strb	r2, [r3, #0]
  }

  return isSuccess;
 8006660:	7bfb      	ldrb	r3, [r7, #15]
}
 8006662:	4618      	mov	r0, r3
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	20000390 	.word	0x20000390

08006670 <timeCircuit_control_updateTimeTravelDateTimes>:

TimeCircuit_Control_Status_t timeCircuit_control_updateTimeTravelDateTimes(TimeCircuit_Control_Config_t* const pConfig)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess  = true;
 8006678:	2301      	movs	r3, #1
 800667a:	73fb      	strb	r3, [r7, #15]
  bool isButtonActivated                  = false;
 800667c:	2300      	movs	r3, #0
 800667e:	737b      	strb	r3, [r7, #13]
  bool hasButtonStateChanged              = false;
 8006680:	2300      	movs	r3, #0
 8006682:	73bb      	strb	r3, [r7, #14]

  static bool hasButtonActivated          = false;
  static uint32_t previousTime            = 0;

  isButtonActivated  = HAL_GPIO_ReadPin(TIME_TRAVEL_SWITCH_GPIO_PORT, TIME_TRAVEL_SWITCH_PIN);
 8006684:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006688:	4833      	ldr	r0, [pc, #204]	@ (8006758 <timeCircuit_control_updateTimeTravelDateTimes+0xe8>)
 800668a:	f7fb fd5d 	bl	8002148 <HAL_GPIO_ReadPin>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	bf14      	ite	ne
 8006694:	2301      	movne	r3, #1
 8006696:	2300      	moveq	r3, #0
 8006698:	b2db      	uxtb	r3, r3
 800669a:	737b      	strb	r3, [r7, #13]
  hasButtonStateChanged = timeCircuit_control_checkButtonActivation(&isButtonActivated, &hasButtonActivated,
 800669c:	f107 030d 	add.w	r3, r7, #13
 80066a0:	4a2e      	ldr	r2, [pc, #184]	@ (800675c <timeCircuit_control_updateTimeTravelDateTimes+0xec>)
 80066a2:	492f      	ldr	r1, [pc, #188]	@ (8006760 <timeCircuit_control_updateTimeTravelDateTimes+0xf0>)
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7ff fe68 	bl	800637a <timeCircuit_control_checkButtonActivation>
 80066aa:	4603      	mov	r3, r0
 80066ac:	73bb      	strb	r3, [r7, #14]
        &previousTime);

  if (hasButtonStateChanged == true)
 80066ae:	7bbb      	ldrb	r3, [r7, #14]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d04b      	beq.n	800674c <timeCircuit_control_updateTimeTravelDateTimes+0xdc>
  {
    if (isButtonActivated != true )
 80066b4:	7b7b      	ldrb	r3, [r7, #13]
 80066b6:	f083 0301 	eor.w	r3, r3, #1
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d045      	beq.n	800674c <timeCircuit_control_updateTimeTravelDateTimes+0xdc>
    {
      //Clear displays
      isSuccess &= timeCircuit_control_clearDisplays(pConfig);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f7ff fdb1 	bl	8006228 <timeCircuit_control_clearDisplays>
 80066c6:	4603      	mov	r3, r0
 80066c8:	461a      	mov	r2, r3
 80066ca:	7bfb      	ldrb	r3, [r7, #15]
 80066cc:	4013      	ands	r3, r2
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	bf14      	ite	ne
 80066d2:	2301      	movne	r3, #1
 80066d4:	2300      	moveq	r3, #0
 80066d6:	73fb      	strb	r3, [r7, #15]

      //Copy last time departed time data to present time
      isSuccess &= dateTime_copyDateTime(pConfig->pLastDepartedTime, pConfig->pPresentTime);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	691a      	ldr	r2, [r3, #16]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	4619      	mov	r1, r3
 80066e2:	4610      	mov	r0, r2
 80066e4:	f7ff fa92 	bl	8005c0c <dateTime_copyDateTime>
 80066e8:	4603      	mov	r3, r0
 80066ea:	461a      	mov	r2, r3
 80066ec:	7bfb      	ldrb	r3, [r7, #15]
 80066ee:	4013      	ands	r3, r2
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	bf14      	ite	ne
 80066f4:	2301      	movne	r3, #1
 80066f6:	2300      	moveq	r3, #0
 80066f8:	73fb      	strb	r3, [r7, #15]

      //Copy present time data to destination time
      isSuccess &= dateTime_copyDateTime(pConfig->pPresentTime, pConfig->pDestinationTime);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	68da      	ldr	r2, [r3, #12]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	4619      	mov	r1, r3
 8006704:	4610      	mov	r0, r2
 8006706:	f7ff fa81 	bl	8005c0c <dateTime_copyDateTime>
 800670a:	4603      	mov	r3, r0
 800670c:	461a      	mov	r2, r3
 800670e:	7bfb      	ldrb	r3, [r7, #15]
 8006710:	4013      	ands	r3, r2
 8006712:	2b00      	cmp	r3, #0
 8006714:	bf14      	ite	ne
 8006716:	2301      	movne	r3, #1
 8006718:	2300      	moveq	r3, #0
 800671a:	73fb      	strb	r3, [r7, #15]

      //Update displays with new date times
      isSuccess &= timeCircuit_control_updateDisplays(pConfig);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f7ff fdf7 	bl	8006310 <timeCircuit_control_updateDisplays>
 8006722:	4603      	mov	r3, r0
 8006724:	461a      	mov	r2, r3
 8006726:	7bfb      	ldrb	r3, [r7, #15]
 8006728:	4013      	ands	r3, r2
 800672a:	2b00      	cmp	r3, #0
 800672c:	bf14      	ite	ne
 800672e:	2301      	movne	r3, #1
 8006730:	2300      	moveq	r3, #0
 8006732:	73fb      	strb	r3, [r7, #15]

      //Set the RTC with new present time
      isSuccess &= timeCircuit_control_setRtcDateTime(pConfig);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f7ff feba 	bl	80064ae <timeCircuit_control_setRtcDateTime>
 800673a:	4603      	mov	r3, r0
 800673c:	461a      	mov	r2, r3
 800673e:	7bfb      	ldrb	r3, [r7, #15]
 8006740:	4013      	ands	r3, r2
 8006742:	2b00      	cmp	r3, #0
 8006744:	bf14      	ite	ne
 8006746:	2301      	movne	r3, #1
 8006748:	2300      	moveq	r3, #0
 800674a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return isSuccess;
 800674c:	7bfb      	ldrb	r3, [r7, #15]
}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	40020800 	.word	0x40020800
 800675c:	20000394 	.word	0x20000394
 8006760:	20000391 	.word	0x20000391

08006764 <timeCircuit_control_updateDestinationDateTime>:

TimeCircuit_Control_Status_t timeCircuit_control_updateDestinationDateTime(TimeCircuit_Control_Config_t* const pConfig)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess  = true;
 800676c:	2301      	movs	r3, #1
 800676e:	73fb      	strb	r3, [r7, #15]
  bool isButtonActivated                  = false;
 8006770:	2300      	movs	r3, #0
 8006772:	737b      	strb	r3, [r7, #13]
  bool hasButtonStateChanged              = false;
 8006774:	2300      	movs	r3, #0
 8006776:	73bb      	strb	r3, [r7, #14]

  static bool hasButtonActivated          = false;
  static uint32_t previousTime            = 0;

  isButtonActivated  = !HAL_GPIO_ReadPin(KEYPAD_ENTER_SWITCH_GPIO_PORT, KEYPAD_ENTER_SWITCH_PIN);
 8006778:	2102      	movs	r1, #2
 800677a:	482b      	ldr	r0, [pc, #172]	@ (8006828 <timeCircuit_control_updateDestinationDateTime+0xc4>)
 800677c:	f7fb fce4 	bl	8002148 <HAL_GPIO_ReadPin>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	bf0c      	ite	eq
 8006786:	2301      	moveq	r3, #1
 8006788:	2300      	movne	r3, #0
 800678a:	b2db      	uxtb	r3, r3
 800678c:	737b      	strb	r3, [r7, #13]
  hasButtonStateChanged = timeCircuit_control_checkButtonActivation(&isButtonActivated, &hasButtonActivated,
 800678e:	f107 030d 	add.w	r3, r7, #13
 8006792:	4a26      	ldr	r2, [pc, #152]	@ (800682c <timeCircuit_control_updateDestinationDateTime+0xc8>)
 8006794:	4926      	ldr	r1, [pc, #152]	@ (8006830 <timeCircuit_control_updateDestinationDateTime+0xcc>)
 8006796:	4618      	mov	r0, r3
 8006798:	f7ff fdef 	bl	800637a <timeCircuit_control_checkButtonActivation>
 800679c:	4603      	mov	r3, r0
 800679e:	73bb      	strb	r3, [r7, #14]
      &previousTime);

  if (hasButtonStateChanged == true)
 80067a0:	7bbb      	ldrb	r3, [r7, #14]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d03a      	beq.n	800681c <timeCircuit_control_updateDestinationDateTime+0xb8>
  {
    if (isButtonActivated == true )
 80067a6:	7b7b      	ldrb	r3, [r7, #13]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d031      	beq.n	8006810 <timeCircuit_control_updateDestinationDateTime+0xac>
    {
      //Activate Keypad White Indicator
      HAL_GPIO_WritePin(KEYPAD_WHITE_INDICATOR_GPIO_PORT, KEYPAD_WHITE_INDICATOR_PIN, GPIO_PIN_SET);
 80067ac:	2201      	movs	r2, #1
 80067ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80067b2:	481d      	ldr	r0, [pc, #116]	@ (8006828 <timeCircuit_control_updateDestinationDateTime+0xc4>)
 80067b4:	f7fb fce0 	bl	8002178 <HAL_GPIO_WritePin>
      //Clear destination date time
      isSuccess &= dateTime_clearDisplay(pConfig->pDestinationTime);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	4618      	mov	r0, r3
 80067be:	f7ff fa3a 	bl	8005c36 <dateTime_clearDisplay>
 80067c2:	4603      	mov	r3, r0
 80067c4:	461a      	mov	r2, r3
 80067c6:	7bfb      	ldrb	r3, [r7, #15]
 80067c8:	4013      	ands	r3, r2
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	bf14      	ite	ne
 80067ce:	2301      	movne	r3, #1
 80067d0:	2300      	moveq	r3, #0
 80067d2:	73fb      	strb	r3, [r7, #15]
      //Update date time if a valid entry has submitted
      if (dateTime_setDisplayData(pConfig->pDestinationTime,pConfig->keypadInput))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	689a      	ldr	r2, [r3, #8]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	3330      	adds	r3, #48	@ 0x30
 80067dc:	4619      	mov	r1, r3
 80067de:	4610      	mov	r0, r2
 80067e0:	f7ff f968 	bl	8005ab4 <dateTime_setDisplayData>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00d      	beq.n	8006806 <timeCircuit_control_updateDestinationDateTime+0xa2>
      {
        isSuccess &= dateTime_updateDisplay(pConfig->pDestinationTime);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7ff fc3c 	bl	800606c <dateTime_updateDisplay>
 80067f4:	4603      	mov	r3, r0
 80067f6:	461a      	mov	r2, r3
 80067f8:	7bfb      	ldrb	r3, [r7, #15]
 80067fa:	4013      	ands	r3, r2
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	bf14      	ite	ne
 8006800:	2301      	movne	r3, #1
 8006802:	2300      	moveq	r3, #0
 8006804:	73fb      	strb	r3, [r7, #15]
      }
      pConfig->keypadInputCount = 0;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800680e:	e005      	b.n	800681c <timeCircuit_control_updateDestinationDateTime+0xb8>
    }
    else
    {
      //Deactivate Keypad White Indicator
      HAL_GPIO_WritePin(KEYPAD_WHITE_INDICATOR_GPIO_PORT, KEYPAD_WHITE_INDICATOR_PIN, GPIO_PIN_RESET);
 8006810:	2200      	movs	r2, #0
 8006812:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006816:	4804      	ldr	r0, [pc, #16]	@ (8006828 <timeCircuit_control_updateDestinationDateTime+0xc4>)
 8006818:	f7fb fcae 	bl	8002178 <HAL_GPIO_WritePin>
    }
  }
  return isSuccess;
 800681c:	7bfb      	ldrb	r3, [r7, #15]
}
 800681e:	4618      	mov	r0, r3
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	40020400 	.word	0x40020400
 800682c:	2000039c 	.word	0x2000039c
 8006830:	20000398 	.word	0x20000398

08006834 <timeCircuit_control_updateGlitch>:

TimeCircuit_Control_Status_t timeCircuit_control_updateGlitch(TimeCircuit_Control_Config_t* const pConfig)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess  = true;
 800683c:	2301      	movs	r3, #1
 800683e:	73fb      	strb	r3, [r7, #15]


  if ((!HAL_GPIO_ReadPin(GLITCH_SWITCH_GPIO_PORT, GLITCH_SWITCH_PIN)) == true )
 8006840:	2120      	movs	r1, #32
 8006842:	4823      	ldr	r0, [pc, #140]	@ (80068d0 <timeCircuit_control_updateGlitch+0x9c>)
 8006844:	f7fb fc80 	bl	8002148 <HAL_GPIO_ReadPin>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d13b      	bne.n	80068c6 <timeCircuit_control_updateGlitch+0x92>
  {
    //After random interval trigger
    isSuccess &= dateTime_clearDisplay(pConfig->pDestinationTime);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	4618      	mov	r0, r3
 8006854:	f7ff f9ef 	bl	8005c36 <dateTime_clearDisplay>
 8006858:	4603      	mov	r3, r0
 800685a:	461a      	mov	r2, r3
 800685c:	7bfb      	ldrb	r3, [r7, #15]
 800685e:	4013      	ands	r3, r2
 8006860:	2b00      	cmp	r3, #0
 8006862:	bf14      	ite	ne
 8006864:	2301      	movne	r3, #1
 8006866:	2300      	moveq	r3, #0
 8006868:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(500);
 800686a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800686e:	f7fa fe3b 	bl	80014e8 <HAL_Delay>
    dateTime_updateDisplayGlitch(pConfig->pDestinationTime, glitchDisplayChars);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	4917      	ldr	r1, [pc, #92]	@ (80068d4 <timeCircuit_control_updateGlitch+0xa0>)
 8006878:	4618      	mov	r0, r3
 800687a:	f7ff fbaf 	bl	8005fdc <dateTime_updateDisplayGlitch>
    HAL_Delay(80);
 800687e:	2050      	movs	r0, #80	@ 0x50
 8006880:	f7fa fe32 	bl	80014e8 <HAL_Delay>
    isSuccess &= dateTime_setDisplayData(pConfig->pDestinationTime, glitchDestinationTimeData);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	4913      	ldr	r1, [pc, #76]	@ (80068d8 <timeCircuit_control_updateGlitch+0xa4>)
 800688a:	4618      	mov	r0, r3
 800688c:	f7ff f912 	bl	8005ab4 <dateTime_setDisplayData>
 8006890:	4603      	mov	r3, r0
 8006892:	461a      	mov	r2, r3
 8006894:	7bfb      	ldrb	r3, [r7, #15]
 8006896:	4013      	ands	r3, r2
 8006898:	2b00      	cmp	r3, #0
 800689a:	bf14      	ite	ne
 800689c:	2301      	movne	r3, #1
 800689e:	2300      	moveq	r3, #0
 80068a0:	73fb      	strb	r3, [r7, #15]
    isSuccess &= dateTime_updateDisplay(pConfig->pDestinationTime);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	4618      	mov	r0, r3
 80068a8:	f7ff fbe0 	bl	800606c <dateTime_updateDisplay>
 80068ac:	4603      	mov	r3, r0
 80068ae:	461a      	mov	r2, r3
 80068b0:	7bfb      	ldrb	r3, [r7, #15]
 80068b2:	4013      	ands	r3, r2
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	bf14      	ite	ne
 80068b8:	2301      	movne	r3, #1
 80068ba:	2300      	moveq	r3, #0
 80068bc:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(500);
 80068be:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80068c2:	f7fa fe11 	bl	80014e8 <HAL_Delay>

  }

  return isSuccess;
 80068c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3710      	adds	r7, #16
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	40020400 	.word	0x40020400
 80068d4:	080074d4 	.word	0x080074d4
 80068d8:	080074c8 	.word	0x080074c8

080068dc <timeCircuit_control_update>:

TimeCircuit_Control_Status_t timeCircuit_control_update(TimeCircuit_Control_Config_t * const pConfig)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = 1;
 80068e4:	2301      	movs	r3, #1
 80068e6:	73fb      	strb	r3, [r7, #15]

  //Update date times after time travel simulation event
  isSuccess &= timeCircuit_control_updateTimeTravelDateTimes(pConfig);
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f7ff fec1 	bl	8006670 <timeCircuit_control_updateTimeTravelDateTimes>
 80068ee:	4603      	mov	r3, r0
 80068f0:	461a      	mov	r2, r3
 80068f2:	7bfb      	ldrb	r3, [r7, #15]
 80068f4:	4013      	ands	r3, r2
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	bf14      	ite	ne
 80068fa:	2301      	movne	r3, #1
 80068fc:	2300      	moveq	r3, #0
 80068fe:	73fb      	strb	r3, [r7, #15]

  //Read user input date time
  isSuccess &= timeCircuit_control_readInputDateTime(pConfig);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f7ff fd5f 	bl	80063c4 <timeCircuit_control_readInputDateTime>
 8006906:	4603      	mov	r3, r0
 8006908:	461a      	mov	r2, r3
 800690a:	7bfb      	ldrb	r3, [r7, #15]
 800690c:	4013      	ands	r3, r2
 800690e:	2b00      	cmp	r3, #0
 8006910:	bf14      	ite	ne
 8006912:	2301      	movne	r3, #1
 8006914:	2300      	moveq	r3, #0
 8006916:	73fb      	strb	r3, [r7, #15]

  //Update Destination Time from user input
  isSuccess &= timeCircuit_control_updateDestinationDateTime(pConfig);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f7ff ff23 	bl	8006764 <timeCircuit_control_updateDestinationDateTime>
 800691e:	4603      	mov	r3, r0
 8006920:	461a      	mov	r2, r3
 8006922:	7bfb      	ldrb	r3, [r7, #15]
 8006924:	4013      	ands	r3, r2
 8006926:	2b00      	cmp	r3, #0
 8006928:	bf14      	ite	ne
 800692a:	2301      	movne	r3, #1
 800692c:	2300      	moveq	r3, #0
 800692e:	73fb      	strb	r3, [r7, #15]

  //Update time circuit displays colons
  isSuccess &= dateTime_toggleTimeColon(pConfig->pDestinationTime, pConfig->pPresentTime, pConfig->pLastDepartedTime);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6898      	ldr	r0, [r3, #8]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	68d9      	ldr	r1, [r3, #12]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	461a      	mov	r2, r3
 800693e:	f7ff fa19 	bl	8005d74 <dateTime_toggleTimeColon>
 8006942:	4603      	mov	r3, r0
 8006944:	461a      	mov	r2, r3
 8006946:	7bfb      	ldrb	r3, [r7, #15]
 8006948:	4013      	ands	r3, r2
 800694a:	2b00      	cmp	r3, #0
 800694c:	bf14      	ite	ne
 800694e:	2301      	movne	r3, #1
 8006950:	2300      	moveq	r3, #0
 8006952:	73fb      	strb	r3, [r7, #15]

  //Update Present Time from RTC
  isSuccess &= timeCircuit_control_updatePresentDateTime(pConfig);
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f7ff fe35 	bl	80065c4 <timeCircuit_control_updatePresentDateTime>
 800695a:	4603      	mov	r3, r0
 800695c:	461a      	mov	r2, r3
 800695e:	7bfb      	ldrb	r3, [r7, #15]
 8006960:	4013      	ands	r3, r2
 8006962:	2b00      	cmp	r3, #0
 8006964:	bf14      	ite	ne
 8006966:	2301      	movne	r3, #1
 8006968:	2300      	moveq	r3, #0
 800696a:	73fb      	strb	r3, [r7, #15]

  //Update Glitch
  isSuccess &= timeCircuit_control_updateGlitch(pConfig);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f7ff ff61 	bl	8006834 <timeCircuit_control_updateGlitch>
 8006972:	4603      	mov	r3, r0
 8006974:	461a      	mov	r2, r3
 8006976:	7bfb      	ldrb	r3, [r7, #15]
 8006978:	4013      	ands	r3, r2
 800697a:	2b00      	cmp	r3, #0
 800697c:	bf14      	ite	ne
 800697e:	2301      	movne	r3, #1
 8006980:	2300      	moveq	r3, #0
 8006982:	73fb      	strb	r3, [r7, #15]

  return isSuccess;
 8006984:	7bfb      	ldrb	r3, [r7, #15]
}
 8006986:	4618      	mov	r0, r3
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
	...

08006990 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006990:	b480      	push	{r7}
 8006992:	b087      	sub	sp, #28
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	4613      	mov	r3, r2
 800699c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800699e:	2301      	movs	r3, #1
 80069a0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80069a2:	2300      	movs	r3, #0
 80069a4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80069a6:	4b1f      	ldr	r3, [pc, #124]	@ (8006a24 <FATFS_LinkDriverEx+0x94>)
 80069a8:	7a5b      	ldrb	r3, [r3, #9]
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d131      	bne.n	8006a14 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80069b0:	4b1c      	ldr	r3, [pc, #112]	@ (8006a24 <FATFS_LinkDriverEx+0x94>)
 80069b2:	7a5b      	ldrb	r3, [r3, #9]
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	461a      	mov	r2, r3
 80069b8:	4b1a      	ldr	r3, [pc, #104]	@ (8006a24 <FATFS_LinkDriverEx+0x94>)
 80069ba:	2100      	movs	r1, #0
 80069bc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80069be:	4b19      	ldr	r3, [pc, #100]	@ (8006a24 <FATFS_LinkDriverEx+0x94>)
 80069c0:	7a5b      	ldrb	r3, [r3, #9]
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	4a17      	ldr	r2, [pc, #92]	@ (8006a24 <FATFS_LinkDriverEx+0x94>)
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4413      	add	r3, r2
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80069ce:	4b15      	ldr	r3, [pc, #84]	@ (8006a24 <FATFS_LinkDriverEx+0x94>)
 80069d0:	7a5b      	ldrb	r3, [r3, #9]
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	461a      	mov	r2, r3
 80069d6:	4b13      	ldr	r3, [pc, #76]	@ (8006a24 <FATFS_LinkDriverEx+0x94>)
 80069d8:	4413      	add	r3, r2
 80069da:	79fa      	ldrb	r2, [r7, #7]
 80069dc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80069de:	4b11      	ldr	r3, [pc, #68]	@ (8006a24 <FATFS_LinkDriverEx+0x94>)
 80069e0:	7a5b      	ldrb	r3, [r3, #9]
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	1c5a      	adds	r2, r3, #1
 80069e6:	b2d1      	uxtb	r1, r2
 80069e8:	4a0e      	ldr	r2, [pc, #56]	@ (8006a24 <FATFS_LinkDriverEx+0x94>)
 80069ea:	7251      	strb	r1, [r2, #9]
 80069ec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80069ee:	7dbb      	ldrb	r3, [r7, #22]
 80069f0:	3330      	adds	r3, #48	@ 0x30
 80069f2:	b2da      	uxtb	r2, r3
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	3301      	adds	r3, #1
 80069fc:	223a      	movs	r2, #58	@ 0x3a
 80069fe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	3302      	adds	r3, #2
 8006a04:	222f      	movs	r2, #47	@ 0x2f
 8006a06:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	3303      	adds	r3, #3
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006a10:	2300      	movs	r3, #0
 8006a12:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	371c      	adds	r7, #28
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	200003a0 	.word	0x200003a0

08006a28 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006a32:	2200      	movs	r2, #0
 8006a34:	6839      	ldr	r1, [r7, #0]
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f7ff ffaa 	bl	8006990 <FATFS_LinkDriverEx>
 8006a3c:	4603      	mov	r3, r0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3708      	adds	r7, #8
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
	...

08006a48 <malloc>:
 8006a48:	4b02      	ldr	r3, [pc, #8]	@ (8006a54 <malloc+0xc>)
 8006a4a:	4601      	mov	r1, r0
 8006a4c:	6818      	ldr	r0, [r3, #0]
 8006a4e:	f000 b82d 	b.w	8006aac <_malloc_r>
 8006a52:	bf00      	nop
 8006a54:	2000004c 	.word	0x2000004c

08006a58 <free>:
 8006a58:	4b02      	ldr	r3, [pc, #8]	@ (8006a64 <free+0xc>)
 8006a5a:	4601      	mov	r1, r0
 8006a5c:	6818      	ldr	r0, [r3, #0]
 8006a5e:	f000 b937 	b.w	8006cd0 <_free_r>
 8006a62:	bf00      	nop
 8006a64:	2000004c 	.word	0x2000004c

08006a68 <sbrk_aligned>:
 8006a68:	b570      	push	{r4, r5, r6, lr}
 8006a6a:	4e0f      	ldr	r6, [pc, #60]	@ (8006aa8 <sbrk_aligned+0x40>)
 8006a6c:	460c      	mov	r4, r1
 8006a6e:	6831      	ldr	r1, [r6, #0]
 8006a70:	4605      	mov	r5, r0
 8006a72:	b911      	cbnz	r1, 8006a7a <sbrk_aligned+0x12>
 8006a74:	f000 f8e2 	bl	8006c3c <_sbrk_r>
 8006a78:	6030      	str	r0, [r6, #0]
 8006a7a:	4621      	mov	r1, r4
 8006a7c:	4628      	mov	r0, r5
 8006a7e:	f000 f8dd 	bl	8006c3c <_sbrk_r>
 8006a82:	1c43      	adds	r3, r0, #1
 8006a84:	d103      	bne.n	8006a8e <sbrk_aligned+0x26>
 8006a86:	f04f 34ff 	mov.w	r4, #4294967295
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	bd70      	pop	{r4, r5, r6, pc}
 8006a8e:	1cc4      	adds	r4, r0, #3
 8006a90:	f024 0403 	bic.w	r4, r4, #3
 8006a94:	42a0      	cmp	r0, r4
 8006a96:	d0f8      	beq.n	8006a8a <sbrk_aligned+0x22>
 8006a98:	1a21      	subs	r1, r4, r0
 8006a9a:	4628      	mov	r0, r5
 8006a9c:	f000 f8ce 	bl	8006c3c <_sbrk_r>
 8006aa0:	3001      	adds	r0, #1
 8006aa2:	d1f2      	bne.n	8006a8a <sbrk_aligned+0x22>
 8006aa4:	e7ef      	b.n	8006a86 <sbrk_aligned+0x1e>
 8006aa6:	bf00      	nop
 8006aa8:	200003ac 	.word	0x200003ac

08006aac <_malloc_r>:
 8006aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ab0:	1ccd      	adds	r5, r1, #3
 8006ab2:	f025 0503 	bic.w	r5, r5, #3
 8006ab6:	3508      	adds	r5, #8
 8006ab8:	2d0c      	cmp	r5, #12
 8006aba:	bf38      	it	cc
 8006abc:	250c      	movcc	r5, #12
 8006abe:	2d00      	cmp	r5, #0
 8006ac0:	4606      	mov	r6, r0
 8006ac2:	db01      	blt.n	8006ac8 <_malloc_r+0x1c>
 8006ac4:	42a9      	cmp	r1, r5
 8006ac6:	d904      	bls.n	8006ad2 <_malloc_r+0x26>
 8006ac8:	230c      	movs	r3, #12
 8006aca:	6033      	str	r3, [r6, #0]
 8006acc:	2000      	movs	r0, #0
 8006ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ad2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006ba8 <_malloc_r+0xfc>
 8006ad6:	f000 f869 	bl	8006bac <__malloc_lock>
 8006ada:	f8d8 3000 	ldr.w	r3, [r8]
 8006ade:	461c      	mov	r4, r3
 8006ae0:	bb44      	cbnz	r4, 8006b34 <_malloc_r+0x88>
 8006ae2:	4629      	mov	r1, r5
 8006ae4:	4630      	mov	r0, r6
 8006ae6:	f7ff ffbf 	bl	8006a68 <sbrk_aligned>
 8006aea:	1c43      	adds	r3, r0, #1
 8006aec:	4604      	mov	r4, r0
 8006aee:	d158      	bne.n	8006ba2 <_malloc_r+0xf6>
 8006af0:	f8d8 4000 	ldr.w	r4, [r8]
 8006af4:	4627      	mov	r7, r4
 8006af6:	2f00      	cmp	r7, #0
 8006af8:	d143      	bne.n	8006b82 <_malloc_r+0xd6>
 8006afa:	2c00      	cmp	r4, #0
 8006afc:	d04b      	beq.n	8006b96 <_malloc_r+0xea>
 8006afe:	6823      	ldr	r3, [r4, #0]
 8006b00:	4639      	mov	r1, r7
 8006b02:	4630      	mov	r0, r6
 8006b04:	eb04 0903 	add.w	r9, r4, r3
 8006b08:	f000 f898 	bl	8006c3c <_sbrk_r>
 8006b0c:	4581      	cmp	r9, r0
 8006b0e:	d142      	bne.n	8006b96 <_malloc_r+0xea>
 8006b10:	6821      	ldr	r1, [r4, #0]
 8006b12:	1a6d      	subs	r5, r5, r1
 8006b14:	4629      	mov	r1, r5
 8006b16:	4630      	mov	r0, r6
 8006b18:	f7ff ffa6 	bl	8006a68 <sbrk_aligned>
 8006b1c:	3001      	adds	r0, #1
 8006b1e:	d03a      	beq.n	8006b96 <_malloc_r+0xea>
 8006b20:	6823      	ldr	r3, [r4, #0]
 8006b22:	442b      	add	r3, r5
 8006b24:	6023      	str	r3, [r4, #0]
 8006b26:	f8d8 3000 	ldr.w	r3, [r8]
 8006b2a:	685a      	ldr	r2, [r3, #4]
 8006b2c:	bb62      	cbnz	r2, 8006b88 <_malloc_r+0xdc>
 8006b2e:	f8c8 7000 	str.w	r7, [r8]
 8006b32:	e00f      	b.n	8006b54 <_malloc_r+0xa8>
 8006b34:	6822      	ldr	r2, [r4, #0]
 8006b36:	1b52      	subs	r2, r2, r5
 8006b38:	d420      	bmi.n	8006b7c <_malloc_r+0xd0>
 8006b3a:	2a0b      	cmp	r2, #11
 8006b3c:	d917      	bls.n	8006b6e <_malloc_r+0xc2>
 8006b3e:	1961      	adds	r1, r4, r5
 8006b40:	42a3      	cmp	r3, r4
 8006b42:	6025      	str	r5, [r4, #0]
 8006b44:	bf18      	it	ne
 8006b46:	6059      	strne	r1, [r3, #4]
 8006b48:	6863      	ldr	r3, [r4, #4]
 8006b4a:	bf08      	it	eq
 8006b4c:	f8c8 1000 	streq.w	r1, [r8]
 8006b50:	5162      	str	r2, [r4, r5]
 8006b52:	604b      	str	r3, [r1, #4]
 8006b54:	4630      	mov	r0, r6
 8006b56:	f000 f82f 	bl	8006bb8 <__malloc_unlock>
 8006b5a:	f104 000b 	add.w	r0, r4, #11
 8006b5e:	1d23      	adds	r3, r4, #4
 8006b60:	f020 0007 	bic.w	r0, r0, #7
 8006b64:	1ac2      	subs	r2, r0, r3
 8006b66:	bf1c      	itt	ne
 8006b68:	1a1b      	subne	r3, r3, r0
 8006b6a:	50a3      	strne	r3, [r4, r2]
 8006b6c:	e7af      	b.n	8006ace <_malloc_r+0x22>
 8006b6e:	6862      	ldr	r2, [r4, #4]
 8006b70:	42a3      	cmp	r3, r4
 8006b72:	bf0c      	ite	eq
 8006b74:	f8c8 2000 	streq.w	r2, [r8]
 8006b78:	605a      	strne	r2, [r3, #4]
 8006b7a:	e7eb      	b.n	8006b54 <_malloc_r+0xa8>
 8006b7c:	4623      	mov	r3, r4
 8006b7e:	6864      	ldr	r4, [r4, #4]
 8006b80:	e7ae      	b.n	8006ae0 <_malloc_r+0x34>
 8006b82:	463c      	mov	r4, r7
 8006b84:	687f      	ldr	r7, [r7, #4]
 8006b86:	e7b6      	b.n	8006af6 <_malloc_r+0x4a>
 8006b88:	461a      	mov	r2, r3
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	42a3      	cmp	r3, r4
 8006b8e:	d1fb      	bne.n	8006b88 <_malloc_r+0xdc>
 8006b90:	2300      	movs	r3, #0
 8006b92:	6053      	str	r3, [r2, #4]
 8006b94:	e7de      	b.n	8006b54 <_malloc_r+0xa8>
 8006b96:	230c      	movs	r3, #12
 8006b98:	6033      	str	r3, [r6, #0]
 8006b9a:	4630      	mov	r0, r6
 8006b9c:	f000 f80c 	bl	8006bb8 <__malloc_unlock>
 8006ba0:	e794      	b.n	8006acc <_malloc_r+0x20>
 8006ba2:	6005      	str	r5, [r0, #0]
 8006ba4:	e7d6      	b.n	8006b54 <_malloc_r+0xa8>
 8006ba6:	bf00      	nop
 8006ba8:	200003b0 	.word	0x200003b0

08006bac <__malloc_lock>:
 8006bac:	4801      	ldr	r0, [pc, #4]	@ (8006bb4 <__malloc_lock+0x8>)
 8006bae:	f000 b87f 	b.w	8006cb0 <__retarget_lock_acquire_recursive>
 8006bb2:	bf00      	nop
 8006bb4:	200004f0 	.word	0x200004f0

08006bb8 <__malloc_unlock>:
 8006bb8:	4801      	ldr	r0, [pc, #4]	@ (8006bc0 <__malloc_unlock+0x8>)
 8006bba:	f000 b87a 	b.w	8006cb2 <__retarget_lock_release_recursive>
 8006bbe:	bf00      	nop
 8006bc0:	200004f0 	.word	0x200004f0

08006bc4 <sniprintf>:
 8006bc4:	b40c      	push	{r2, r3}
 8006bc6:	b530      	push	{r4, r5, lr}
 8006bc8:	4b17      	ldr	r3, [pc, #92]	@ (8006c28 <sniprintf+0x64>)
 8006bca:	1e0c      	subs	r4, r1, #0
 8006bcc:	681d      	ldr	r5, [r3, #0]
 8006bce:	b09d      	sub	sp, #116	@ 0x74
 8006bd0:	da08      	bge.n	8006be4 <sniprintf+0x20>
 8006bd2:	238b      	movs	r3, #139	@ 0x8b
 8006bd4:	602b      	str	r3, [r5, #0]
 8006bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8006bda:	b01d      	add	sp, #116	@ 0x74
 8006bdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006be0:	b002      	add	sp, #8
 8006be2:	4770      	bx	lr
 8006be4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006be8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006bec:	bf14      	ite	ne
 8006bee:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006bf2:	4623      	moveq	r3, r4
 8006bf4:	9304      	str	r3, [sp, #16]
 8006bf6:	9307      	str	r3, [sp, #28]
 8006bf8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006bfc:	9002      	str	r0, [sp, #8]
 8006bfe:	9006      	str	r0, [sp, #24]
 8006c00:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006c04:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006c06:	ab21      	add	r3, sp, #132	@ 0x84
 8006c08:	a902      	add	r1, sp, #8
 8006c0a:	4628      	mov	r0, r5
 8006c0c:	9301      	str	r3, [sp, #4]
 8006c0e:	f000 f905 	bl	8006e1c <_svfiprintf_r>
 8006c12:	1c43      	adds	r3, r0, #1
 8006c14:	bfbc      	itt	lt
 8006c16:	238b      	movlt	r3, #139	@ 0x8b
 8006c18:	602b      	strlt	r3, [r5, #0]
 8006c1a:	2c00      	cmp	r4, #0
 8006c1c:	d0dd      	beq.n	8006bda <sniprintf+0x16>
 8006c1e:	9b02      	ldr	r3, [sp, #8]
 8006c20:	2200      	movs	r2, #0
 8006c22:	701a      	strb	r2, [r3, #0]
 8006c24:	e7d9      	b.n	8006bda <sniprintf+0x16>
 8006c26:	bf00      	nop
 8006c28:	2000004c 	.word	0x2000004c

08006c2c <memset>:
 8006c2c:	4402      	add	r2, r0
 8006c2e:	4603      	mov	r3, r0
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d100      	bne.n	8006c36 <memset+0xa>
 8006c34:	4770      	bx	lr
 8006c36:	f803 1b01 	strb.w	r1, [r3], #1
 8006c3a:	e7f9      	b.n	8006c30 <memset+0x4>

08006c3c <_sbrk_r>:
 8006c3c:	b538      	push	{r3, r4, r5, lr}
 8006c3e:	4d06      	ldr	r5, [pc, #24]	@ (8006c58 <_sbrk_r+0x1c>)
 8006c40:	2300      	movs	r3, #0
 8006c42:	4604      	mov	r4, r0
 8006c44:	4608      	mov	r0, r1
 8006c46:	602b      	str	r3, [r5, #0]
 8006c48:	f7fa fa9a 	bl	8001180 <_sbrk>
 8006c4c:	1c43      	adds	r3, r0, #1
 8006c4e:	d102      	bne.n	8006c56 <_sbrk_r+0x1a>
 8006c50:	682b      	ldr	r3, [r5, #0]
 8006c52:	b103      	cbz	r3, 8006c56 <_sbrk_r+0x1a>
 8006c54:	6023      	str	r3, [r4, #0]
 8006c56:	bd38      	pop	{r3, r4, r5, pc}
 8006c58:	200004ec 	.word	0x200004ec

08006c5c <__errno>:
 8006c5c:	4b01      	ldr	r3, [pc, #4]	@ (8006c64 <__errno+0x8>)
 8006c5e:	6818      	ldr	r0, [r3, #0]
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	2000004c 	.word	0x2000004c

08006c68 <__libc_init_array>:
 8006c68:	b570      	push	{r4, r5, r6, lr}
 8006c6a:	4d0d      	ldr	r5, [pc, #52]	@ (8006ca0 <__libc_init_array+0x38>)
 8006c6c:	4c0d      	ldr	r4, [pc, #52]	@ (8006ca4 <__libc_init_array+0x3c>)
 8006c6e:	1b64      	subs	r4, r4, r5
 8006c70:	10a4      	asrs	r4, r4, #2
 8006c72:	2600      	movs	r6, #0
 8006c74:	42a6      	cmp	r6, r4
 8006c76:	d109      	bne.n	8006c8c <__libc_init_array+0x24>
 8006c78:	4d0b      	ldr	r5, [pc, #44]	@ (8006ca8 <__libc_init_array+0x40>)
 8006c7a:	4c0c      	ldr	r4, [pc, #48]	@ (8006cac <__libc_init_array+0x44>)
 8006c7c:	f000 fba8 	bl	80073d0 <_init>
 8006c80:	1b64      	subs	r4, r4, r5
 8006c82:	10a4      	asrs	r4, r4, #2
 8006c84:	2600      	movs	r6, #0
 8006c86:	42a6      	cmp	r6, r4
 8006c88:	d105      	bne.n	8006c96 <__libc_init_array+0x2e>
 8006c8a:	bd70      	pop	{r4, r5, r6, pc}
 8006c8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c90:	4798      	blx	r3
 8006c92:	3601      	adds	r6, #1
 8006c94:	e7ee      	b.n	8006c74 <__libc_init_array+0xc>
 8006c96:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c9a:	4798      	blx	r3
 8006c9c:	3601      	adds	r6, #1
 8006c9e:	e7f2      	b.n	8006c86 <__libc_init_array+0x1e>
 8006ca0:	0800751c 	.word	0x0800751c
 8006ca4:	0800751c 	.word	0x0800751c
 8006ca8:	0800751c 	.word	0x0800751c
 8006cac:	08007520 	.word	0x08007520

08006cb0 <__retarget_lock_acquire_recursive>:
 8006cb0:	4770      	bx	lr

08006cb2 <__retarget_lock_release_recursive>:
 8006cb2:	4770      	bx	lr

08006cb4 <memcpy>:
 8006cb4:	440a      	add	r2, r1
 8006cb6:	4291      	cmp	r1, r2
 8006cb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006cbc:	d100      	bne.n	8006cc0 <memcpy+0xc>
 8006cbe:	4770      	bx	lr
 8006cc0:	b510      	push	{r4, lr}
 8006cc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cca:	4291      	cmp	r1, r2
 8006ccc:	d1f9      	bne.n	8006cc2 <memcpy+0xe>
 8006cce:	bd10      	pop	{r4, pc}

08006cd0 <_free_r>:
 8006cd0:	b538      	push	{r3, r4, r5, lr}
 8006cd2:	4605      	mov	r5, r0
 8006cd4:	2900      	cmp	r1, #0
 8006cd6:	d041      	beq.n	8006d5c <_free_r+0x8c>
 8006cd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cdc:	1f0c      	subs	r4, r1, #4
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	bfb8      	it	lt
 8006ce2:	18e4      	addlt	r4, r4, r3
 8006ce4:	f7ff ff62 	bl	8006bac <__malloc_lock>
 8006ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8006d60 <_free_r+0x90>)
 8006cea:	6813      	ldr	r3, [r2, #0]
 8006cec:	b933      	cbnz	r3, 8006cfc <_free_r+0x2c>
 8006cee:	6063      	str	r3, [r4, #4]
 8006cf0:	6014      	str	r4, [r2, #0]
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cf8:	f7ff bf5e 	b.w	8006bb8 <__malloc_unlock>
 8006cfc:	42a3      	cmp	r3, r4
 8006cfe:	d908      	bls.n	8006d12 <_free_r+0x42>
 8006d00:	6820      	ldr	r0, [r4, #0]
 8006d02:	1821      	adds	r1, r4, r0
 8006d04:	428b      	cmp	r3, r1
 8006d06:	bf01      	itttt	eq
 8006d08:	6819      	ldreq	r1, [r3, #0]
 8006d0a:	685b      	ldreq	r3, [r3, #4]
 8006d0c:	1809      	addeq	r1, r1, r0
 8006d0e:	6021      	streq	r1, [r4, #0]
 8006d10:	e7ed      	b.n	8006cee <_free_r+0x1e>
 8006d12:	461a      	mov	r2, r3
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	b10b      	cbz	r3, 8006d1c <_free_r+0x4c>
 8006d18:	42a3      	cmp	r3, r4
 8006d1a:	d9fa      	bls.n	8006d12 <_free_r+0x42>
 8006d1c:	6811      	ldr	r1, [r2, #0]
 8006d1e:	1850      	adds	r0, r2, r1
 8006d20:	42a0      	cmp	r0, r4
 8006d22:	d10b      	bne.n	8006d3c <_free_r+0x6c>
 8006d24:	6820      	ldr	r0, [r4, #0]
 8006d26:	4401      	add	r1, r0
 8006d28:	1850      	adds	r0, r2, r1
 8006d2a:	4283      	cmp	r3, r0
 8006d2c:	6011      	str	r1, [r2, #0]
 8006d2e:	d1e0      	bne.n	8006cf2 <_free_r+0x22>
 8006d30:	6818      	ldr	r0, [r3, #0]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	6053      	str	r3, [r2, #4]
 8006d36:	4408      	add	r0, r1
 8006d38:	6010      	str	r0, [r2, #0]
 8006d3a:	e7da      	b.n	8006cf2 <_free_r+0x22>
 8006d3c:	d902      	bls.n	8006d44 <_free_r+0x74>
 8006d3e:	230c      	movs	r3, #12
 8006d40:	602b      	str	r3, [r5, #0]
 8006d42:	e7d6      	b.n	8006cf2 <_free_r+0x22>
 8006d44:	6820      	ldr	r0, [r4, #0]
 8006d46:	1821      	adds	r1, r4, r0
 8006d48:	428b      	cmp	r3, r1
 8006d4a:	bf04      	itt	eq
 8006d4c:	6819      	ldreq	r1, [r3, #0]
 8006d4e:	685b      	ldreq	r3, [r3, #4]
 8006d50:	6063      	str	r3, [r4, #4]
 8006d52:	bf04      	itt	eq
 8006d54:	1809      	addeq	r1, r1, r0
 8006d56:	6021      	streq	r1, [r4, #0]
 8006d58:	6054      	str	r4, [r2, #4]
 8006d5a:	e7ca      	b.n	8006cf2 <_free_r+0x22>
 8006d5c:	bd38      	pop	{r3, r4, r5, pc}
 8006d5e:	bf00      	nop
 8006d60:	200003b0 	.word	0x200003b0

08006d64 <__ssputs_r>:
 8006d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d68:	688e      	ldr	r6, [r1, #8]
 8006d6a:	461f      	mov	r7, r3
 8006d6c:	42be      	cmp	r6, r7
 8006d6e:	680b      	ldr	r3, [r1, #0]
 8006d70:	4682      	mov	sl, r0
 8006d72:	460c      	mov	r4, r1
 8006d74:	4690      	mov	r8, r2
 8006d76:	d82d      	bhi.n	8006dd4 <__ssputs_r+0x70>
 8006d78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d7c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006d80:	d026      	beq.n	8006dd0 <__ssputs_r+0x6c>
 8006d82:	6965      	ldr	r5, [r4, #20]
 8006d84:	6909      	ldr	r1, [r1, #16]
 8006d86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d8a:	eba3 0901 	sub.w	r9, r3, r1
 8006d8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d92:	1c7b      	adds	r3, r7, #1
 8006d94:	444b      	add	r3, r9
 8006d96:	106d      	asrs	r5, r5, #1
 8006d98:	429d      	cmp	r5, r3
 8006d9a:	bf38      	it	cc
 8006d9c:	461d      	movcc	r5, r3
 8006d9e:	0553      	lsls	r3, r2, #21
 8006da0:	d527      	bpl.n	8006df2 <__ssputs_r+0x8e>
 8006da2:	4629      	mov	r1, r5
 8006da4:	f7ff fe82 	bl	8006aac <_malloc_r>
 8006da8:	4606      	mov	r6, r0
 8006daa:	b360      	cbz	r0, 8006e06 <__ssputs_r+0xa2>
 8006dac:	6921      	ldr	r1, [r4, #16]
 8006dae:	464a      	mov	r2, r9
 8006db0:	f7ff ff80 	bl	8006cb4 <memcpy>
 8006db4:	89a3      	ldrh	r3, [r4, #12]
 8006db6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006dba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dbe:	81a3      	strh	r3, [r4, #12]
 8006dc0:	6126      	str	r6, [r4, #16]
 8006dc2:	6165      	str	r5, [r4, #20]
 8006dc4:	444e      	add	r6, r9
 8006dc6:	eba5 0509 	sub.w	r5, r5, r9
 8006dca:	6026      	str	r6, [r4, #0]
 8006dcc:	60a5      	str	r5, [r4, #8]
 8006dce:	463e      	mov	r6, r7
 8006dd0:	42be      	cmp	r6, r7
 8006dd2:	d900      	bls.n	8006dd6 <__ssputs_r+0x72>
 8006dd4:	463e      	mov	r6, r7
 8006dd6:	6820      	ldr	r0, [r4, #0]
 8006dd8:	4632      	mov	r2, r6
 8006dda:	4641      	mov	r1, r8
 8006ddc:	f000 faa8 	bl	8007330 <memmove>
 8006de0:	68a3      	ldr	r3, [r4, #8]
 8006de2:	1b9b      	subs	r3, r3, r6
 8006de4:	60a3      	str	r3, [r4, #8]
 8006de6:	6823      	ldr	r3, [r4, #0]
 8006de8:	4433      	add	r3, r6
 8006dea:	6023      	str	r3, [r4, #0]
 8006dec:	2000      	movs	r0, #0
 8006dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006df2:	462a      	mov	r2, r5
 8006df4:	f000 fab6 	bl	8007364 <_realloc_r>
 8006df8:	4606      	mov	r6, r0
 8006dfa:	2800      	cmp	r0, #0
 8006dfc:	d1e0      	bne.n	8006dc0 <__ssputs_r+0x5c>
 8006dfe:	6921      	ldr	r1, [r4, #16]
 8006e00:	4650      	mov	r0, sl
 8006e02:	f7ff ff65 	bl	8006cd0 <_free_r>
 8006e06:	230c      	movs	r3, #12
 8006e08:	f8ca 3000 	str.w	r3, [sl]
 8006e0c:	89a3      	ldrh	r3, [r4, #12]
 8006e0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e12:	81a3      	strh	r3, [r4, #12]
 8006e14:	f04f 30ff 	mov.w	r0, #4294967295
 8006e18:	e7e9      	b.n	8006dee <__ssputs_r+0x8a>
	...

08006e1c <_svfiprintf_r>:
 8006e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e20:	4698      	mov	r8, r3
 8006e22:	898b      	ldrh	r3, [r1, #12]
 8006e24:	061b      	lsls	r3, r3, #24
 8006e26:	b09d      	sub	sp, #116	@ 0x74
 8006e28:	4607      	mov	r7, r0
 8006e2a:	460d      	mov	r5, r1
 8006e2c:	4614      	mov	r4, r2
 8006e2e:	d510      	bpl.n	8006e52 <_svfiprintf_r+0x36>
 8006e30:	690b      	ldr	r3, [r1, #16]
 8006e32:	b973      	cbnz	r3, 8006e52 <_svfiprintf_r+0x36>
 8006e34:	2140      	movs	r1, #64	@ 0x40
 8006e36:	f7ff fe39 	bl	8006aac <_malloc_r>
 8006e3a:	6028      	str	r0, [r5, #0]
 8006e3c:	6128      	str	r0, [r5, #16]
 8006e3e:	b930      	cbnz	r0, 8006e4e <_svfiprintf_r+0x32>
 8006e40:	230c      	movs	r3, #12
 8006e42:	603b      	str	r3, [r7, #0]
 8006e44:	f04f 30ff 	mov.w	r0, #4294967295
 8006e48:	b01d      	add	sp, #116	@ 0x74
 8006e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e4e:	2340      	movs	r3, #64	@ 0x40
 8006e50:	616b      	str	r3, [r5, #20]
 8006e52:	2300      	movs	r3, #0
 8006e54:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e56:	2320      	movs	r3, #32
 8006e58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006e5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e60:	2330      	movs	r3, #48	@ 0x30
 8006e62:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007000 <_svfiprintf_r+0x1e4>
 8006e66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006e6a:	f04f 0901 	mov.w	r9, #1
 8006e6e:	4623      	mov	r3, r4
 8006e70:	469a      	mov	sl, r3
 8006e72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e76:	b10a      	cbz	r2, 8006e7c <_svfiprintf_r+0x60>
 8006e78:	2a25      	cmp	r2, #37	@ 0x25
 8006e7a:	d1f9      	bne.n	8006e70 <_svfiprintf_r+0x54>
 8006e7c:	ebba 0b04 	subs.w	fp, sl, r4
 8006e80:	d00b      	beq.n	8006e9a <_svfiprintf_r+0x7e>
 8006e82:	465b      	mov	r3, fp
 8006e84:	4622      	mov	r2, r4
 8006e86:	4629      	mov	r1, r5
 8006e88:	4638      	mov	r0, r7
 8006e8a:	f7ff ff6b 	bl	8006d64 <__ssputs_r>
 8006e8e:	3001      	adds	r0, #1
 8006e90:	f000 80a7 	beq.w	8006fe2 <_svfiprintf_r+0x1c6>
 8006e94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e96:	445a      	add	r2, fp
 8006e98:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e9a:	f89a 3000 	ldrb.w	r3, [sl]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f000 809f 	beq.w	8006fe2 <_svfiprintf_r+0x1c6>
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8006eaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006eae:	f10a 0a01 	add.w	sl, sl, #1
 8006eb2:	9304      	str	r3, [sp, #16]
 8006eb4:	9307      	str	r3, [sp, #28]
 8006eb6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006eba:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ebc:	4654      	mov	r4, sl
 8006ebe:	2205      	movs	r2, #5
 8006ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ec4:	484e      	ldr	r0, [pc, #312]	@ (8007000 <_svfiprintf_r+0x1e4>)
 8006ec6:	f7f9 f983 	bl	80001d0 <memchr>
 8006eca:	9a04      	ldr	r2, [sp, #16]
 8006ecc:	b9d8      	cbnz	r0, 8006f06 <_svfiprintf_r+0xea>
 8006ece:	06d0      	lsls	r0, r2, #27
 8006ed0:	bf44      	itt	mi
 8006ed2:	2320      	movmi	r3, #32
 8006ed4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ed8:	0711      	lsls	r1, r2, #28
 8006eda:	bf44      	itt	mi
 8006edc:	232b      	movmi	r3, #43	@ 0x2b
 8006ede:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8006ee6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ee8:	d015      	beq.n	8006f16 <_svfiprintf_r+0xfa>
 8006eea:	9a07      	ldr	r2, [sp, #28]
 8006eec:	4654      	mov	r4, sl
 8006eee:	2000      	movs	r0, #0
 8006ef0:	f04f 0c0a 	mov.w	ip, #10
 8006ef4:	4621      	mov	r1, r4
 8006ef6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006efa:	3b30      	subs	r3, #48	@ 0x30
 8006efc:	2b09      	cmp	r3, #9
 8006efe:	d94b      	bls.n	8006f98 <_svfiprintf_r+0x17c>
 8006f00:	b1b0      	cbz	r0, 8006f30 <_svfiprintf_r+0x114>
 8006f02:	9207      	str	r2, [sp, #28]
 8006f04:	e014      	b.n	8006f30 <_svfiprintf_r+0x114>
 8006f06:	eba0 0308 	sub.w	r3, r0, r8
 8006f0a:	fa09 f303 	lsl.w	r3, r9, r3
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	9304      	str	r3, [sp, #16]
 8006f12:	46a2      	mov	sl, r4
 8006f14:	e7d2      	b.n	8006ebc <_svfiprintf_r+0xa0>
 8006f16:	9b03      	ldr	r3, [sp, #12]
 8006f18:	1d19      	adds	r1, r3, #4
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	9103      	str	r1, [sp, #12]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	bfbb      	ittet	lt
 8006f22:	425b      	neglt	r3, r3
 8006f24:	f042 0202 	orrlt.w	r2, r2, #2
 8006f28:	9307      	strge	r3, [sp, #28]
 8006f2a:	9307      	strlt	r3, [sp, #28]
 8006f2c:	bfb8      	it	lt
 8006f2e:	9204      	strlt	r2, [sp, #16]
 8006f30:	7823      	ldrb	r3, [r4, #0]
 8006f32:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f34:	d10a      	bne.n	8006f4c <_svfiprintf_r+0x130>
 8006f36:	7863      	ldrb	r3, [r4, #1]
 8006f38:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f3a:	d132      	bne.n	8006fa2 <_svfiprintf_r+0x186>
 8006f3c:	9b03      	ldr	r3, [sp, #12]
 8006f3e:	1d1a      	adds	r2, r3, #4
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	9203      	str	r2, [sp, #12]
 8006f44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006f48:	3402      	adds	r4, #2
 8006f4a:	9305      	str	r3, [sp, #20]
 8006f4c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007010 <_svfiprintf_r+0x1f4>
 8006f50:	7821      	ldrb	r1, [r4, #0]
 8006f52:	2203      	movs	r2, #3
 8006f54:	4650      	mov	r0, sl
 8006f56:	f7f9 f93b 	bl	80001d0 <memchr>
 8006f5a:	b138      	cbz	r0, 8006f6c <_svfiprintf_r+0x150>
 8006f5c:	9b04      	ldr	r3, [sp, #16]
 8006f5e:	eba0 000a 	sub.w	r0, r0, sl
 8006f62:	2240      	movs	r2, #64	@ 0x40
 8006f64:	4082      	lsls	r2, r0
 8006f66:	4313      	orrs	r3, r2
 8006f68:	3401      	adds	r4, #1
 8006f6a:	9304      	str	r3, [sp, #16]
 8006f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f70:	4824      	ldr	r0, [pc, #144]	@ (8007004 <_svfiprintf_r+0x1e8>)
 8006f72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006f76:	2206      	movs	r2, #6
 8006f78:	f7f9 f92a 	bl	80001d0 <memchr>
 8006f7c:	2800      	cmp	r0, #0
 8006f7e:	d036      	beq.n	8006fee <_svfiprintf_r+0x1d2>
 8006f80:	4b21      	ldr	r3, [pc, #132]	@ (8007008 <_svfiprintf_r+0x1ec>)
 8006f82:	bb1b      	cbnz	r3, 8006fcc <_svfiprintf_r+0x1b0>
 8006f84:	9b03      	ldr	r3, [sp, #12]
 8006f86:	3307      	adds	r3, #7
 8006f88:	f023 0307 	bic.w	r3, r3, #7
 8006f8c:	3308      	adds	r3, #8
 8006f8e:	9303      	str	r3, [sp, #12]
 8006f90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f92:	4433      	add	r3, r6
 8006f94:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f96:	e76a      	b.n	8006e6e <_svfiprintf_r+0x52>
 8006f98:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f9c:	460c      	mov	r4, r1
 8006f9e:	2001      	movs	r0, #1
 8006fa0:	e7a8      	b.n	8006ef4 <_svfiprintf_r+0xd8>
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	3401      	adds	r4, #1
 8006fa6:	9305      	str	r3, [sp, #20]
 8006fa8:	4619      	mov	r1, r3
 8006faa:	f04f 0c0a 	mov.w	ip, #10
 8006fae:	4620      	mov	r0, r4
 8006fb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fb4:	3a30      	subs	r2, #48	@ 0x30
 8006fb6:	2a09      	cmp	r2, #9
 8006fb8:	d903      	bls.n	8006fc2 <_svfiprintf_r+0x1a6>
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d0c6      	beq.n	8006f4c <_svfiprintf_r+0x130>
 8006fbe:	9105      	str	r1, [sp, #20]
 8006fc0:	e7c4      	b.n	8006f4c <_svfiprintf_r+0x130>
 8006fc2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fc6:	4604      	mov	r4, r0
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e7f0      	b.n	8006fae <_svfiprintf_r+0x192>
 8006fcc:	ab03      	add	r3, sp, #12
 8006fce:	9300      	str	r3, [sp, #0]
 8006fd0:	462a      	mov	r2, r5
 8006fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800700c <_svfiprintf_r+0x1f0>)
 8006fd4:	a904      	add	r1, sp, #16
 8006fd6:	4638      	mov	r0, r7
 8006fd8:	f3af 8000 	nop.w
 8006fdc:	1c42      	adds	r2, r0, #1
 8006fde:	4606      	mov	r6, r0
 8006fe0:	d1d6      	bne.n	8006f90 <_svfiprintf_r+0x174>
 8006fe2:	89ab      	ldrh	r3, [r5, #12]
 8006fe4:	065b      	lsls	r3, r3, #25
 8006fe6:	f53f af2d 	bmi.w	8006e44 <_svfiprintf_r+0x28>
 8006fea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006fec:	e72c      	b.n	8006e48 <_svfiprintf_r+0x2c>
 8006fee:	ab03      	add	r3, sp, #12
 8006ff0:	9300      	str	r3, [sp, #0]
 8006ff2:	462a      	mov	r2, r5
 8006ff4:	4b05      	ldr	r3, [pc, #20]	@ (800700c <_svfiprintf_r+0x1f0>)
 8006ff6:	a904      	add	r1, sp, #16
 8006ff8:	4638      	mov	r0, r7
 8006ffa:	f000 f879 	bl	80070f0 <_printf_i>
 8006ffe:	e7ed      	b.n	8006fdc <_svfiprintf_r+0x1c0>
 8007000:	080074de 	.word	0x080074de
 8007004:	080074e8 	.word	0x080074e8
 8007008:	00000000 	.word	0x00000000
 800700c:	08006d65 	.word	0x08006d65
 8007010:	080074e4 	.word	0x080074e4

08007014 <_printf_common>:
 8007014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007018:	4616      	mov	r6, r2
 800701a:	4698      	mov	r8, r3
 800701c:	688a      	ldr	r2, [r1, #8]
 800701e:	690b      	ldr	r3, [r1, #16]
 8007020:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007024:	4293      	cmp	r3, r2
 8007026:	bfb8      	it	lt
 8007028:	4613      	movlt	r3, r2
 800702a:	6033      	str	r3, [r6, #0]
 800702c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007030:	4607      	mov	r7, r0
 8007032:	460c      	mov	r4, r1
 8007034:	b10a      	cbz	r2, 800703a <_printf_common+0x26>
 8007036:	3301      	adds	r3, #1
 8007038:	6033      	str	r3, [r6, #0]
 800703a:	6823      	ldr	r3, [r4, #0]
 800703c:	0699      	lsls	r1, r3, #26
 800703e:	bf42      	ittt	mi
 8007040:	6833      	ldrmi	r3, [r6, #0]
 8007042:	3302      	addmi	r3, #2
 8007044:	6033      	strmi	r3, [r6, #0]
 8007046:	6825      	ldr	r5, [r4, #0]
 8007048:	f015 0506 	ands.w	r5, r5, #6
 800704c:	d106      	bne.n	800705c <_printf_common+0x48>
 800704e:	f104 0a19 	add.w	sl, r4, #25
 8007052:	68e3      	ldr	r3, [r4, #12]
 8007054:	6832      	ldr	r2, [r6, #0]
 8007056:	1a9b      	subs	r3, r3, r2
 8007058:	42ab      	cmp	r3, r5
 800705a:	dc26      	bgt.n	80070aa <_printf_common+0x96>
 800705c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007060:	6822      	ldr	r2, [r4, #0]
 8007062:	3b00      	subs	r3, #0
 8007064:	bf18      	it	ne
 8007066:	2301      	movne	r3, #1
 8007068:	0692      	lsls	r2, r2, #26
 800706a:	d42b      	bmi.n	80070c4 <_printf_common+0xb0>
 800706c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007070:	4641      	mov	r1, r8
 8007072:	4638      	mov	r0, r7
 8007074:	47c8      	blx	r9
 8007076:	3001      	adds	r0, #1
 8007078:	d01e      	beq.n	80070b8 <_printf_common+0xa4>
 800707a:	6823      	ldr	r3, [r4, #0]
 800707c:	6922      	ldr	r2, [r4, #16]
 800707e:	f003 0306 	and.w	r3, r3, #6
 8007082:	2b04      	cmp	r3, #4
 8007084:	bf02      	ittt	eq
 8007086:	68e5      	ldreq	r5, [r4, #12]
 8007088:	6833      	ldreq	r3, [r6, #0]
 800708a:	1aed      	subeq	r5, r5, r3
 800708c:	68a3      	ldr	r3, [r4, #8]
 800708e:	bf0c      	ite	eq
 8007090:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007094:	2500      	movne	r5, #0
 8007096:	4293      	cmp	r3, r2
 8007098:	bfc4      	itt	gt
 800709a:	1a9b      	subgt	r3, r3, r2
 800709c:	18ed      	addgt	r5, r5, r3
 800709e:	2600      	movs	r6, #0
 80070a0:	341a      	adds	r4, #26
 80070a2:	42b5      	cmp	r5, r6
 80070a4:	d11a      	bne.n	80070dc <_printf_common+0xc8>
 80070a6:	2000      	movs	r0, #0
 80070a8:	e008      	b.n	80070bc <_printf_common+0xa8>
 80070aa:	2301      	movs	r3, #1
 80070ac:	4652      	mov	r2, sl
 80070ae:	4641      	mov	r1, r8
 80070b0:	4638      	mov	r0, r7
 80070b2:	47c8      	blx	r9
 80070b4:	3001      	adds	r0, #1
 80070b6:	d103      	bne.n	80070c0 <_printf_common+0xac>
 80070b8:	f04f 30ff 	mov.w	r0, #4294967295
 80070bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070c0:	3501      	adds	r5, #1
 80070c2:	e7c6      	b.n	8007052 <_printf_common+0x3e>
 80070c4:	18e1      	adds	r1, r4, r3
 80070c6:	1c5a      	adds	r2, r3, #1
 80070c8:	2030      	movs	r0, #48	@ 0x30
 80070ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80070ce:	4422      	add	r2, r4
 80070d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80070d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80070d8:	3302      	adds	r3, #2
 80070da:	e7c7      	b.n	800706c <_printf_common+0x58>
 80070dc:	2301      	movs	r3, #1
 80070de:	4622      	mov	r2, r4
 80070e0:	4641      	mov	r1, r8
 80070e2:	4638      	mov	r0, r7
 80070e4:	47c8      	blx	r9
 80070e6:	3001      	adds	r0, #1
 80070e8:	d0e6      	beq.n	80070b8 <_printf_common+0xa4>
 80070ea:	3601      	adds	r6, #1
 80070ec:	e7d9      	b.n	80070a2 <_printf_common+0x8e>
	...

080070f0 <_printf_i>:
 80070f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070f4:	7e0f      	ldrb	r7, [r1, #24]
 80070f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80070f8:	2f78      	cmp	r7, #120	@ 0x78
 80070fa:	4691      	mov	r9, r2
 80070fc:	4680      	mov	r8, r0
 80070fe:	460c      	mov	r4, r1
 8007100:	469a      	mov	sl, r3
 8007102:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007106:	d807      	bhi.n	8007118 <_printf_i+0x28>
 8007108:	2f62      	cmp	r7, #98	@ 0x62
 800710a:	d80a      	bhi.n	8007122 <_printf_i+0x32>
 800710c:	2f00      	cmp	r7, #0
 800710e:	f000 80d2 	beq.w	80072b6 <_printf_i+0x1c6>
 8007112:	2f58      	cmp	r7, #88	@ 0x58
 8007114:	f000 80b9 	beq.w	800728a <_printf_i+0x19a>
 8007118:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800711c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007120:	e03a      	b.n	8007198 <_printf_i+0xa8>
 8007122:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007126:	2b15      	cmp	r3, #21
 8007128:	d8f6      	bhi.n	8007118 <_printf_i+0x28>
 800712a:	a101      	add	r1, pc, #4	@ (adr r1, 8007130 <_printf_i+0x40>)
 800712c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007130:	08007189 	.word	0x08007189
 8007134:	0800719d 	.word	0x0800719d
 8007138:	08007119 	.word	0x08007119
 800713c:	08007119 	.word	0x08007119
 8007140:	08007119 	.word	0x08007119
 8007144:	08007119 	.word	0x08007119
 8007148:	0800719d 	.word	0x0800719d
 800714c:	08007119 	.word	0x08007119
 8007150:	08007119 	.word	0x08007119
 8007154:	08007119 	.word	0x08007119
 8007158:	08007119 	.word	0x08007119
 800715c:	0800729d 	.word	0x0800729d
 8007160:	080071c7 	.word	0x080071c7
 8007164:	08007257 	.word	0x08007257
 8007168:	08007119 	.word	0x08007119
 800716c:	08007119 	.word	0x08007119
 8007170:	080072bf 	.word	0x080072bf
 8007174:	08007119 	.word	0x08007119
 8007178:	080071c7 	.word	0x080071c7
 800717c:	08007119 	.word	0x08007119
 8007180:	08007119 	.word	0x08007119
 8007184:	0800725f 	.word	0x0800725f
 8007188:	6833      	ldr	r3, [r6, #0]
 800718a:	1d1a      	adds	r2, r3, #4
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	6032      	str	r2, [r6, #0]
 8007190:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007194:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007198:	2301      	movs	r3, #1
 800719a:	e09d      	b.n	80072d8 <_printf_i+0x1e8>
 800719c:	6833      	ldr	r3, [r6, #0]
 800719e:	6820      	ldr	r0, [r4, #0]
 80071a0:	1d19      	adds	r1, r3, #4
 80071a2:	6031      	str	r1, [r6, #0]
 80071a4:	0606      	lsls	r6, r0, #24
 80071a6:	d501      	bpl.n	80071ac <_printf_i+0xbc>
 80071a8:	681d      	ldr	r5, [r3, #0]
 80071aa:	e003      	b.n	80071b4 <_printf_i+0xc4>
 80071ac:	0645      	lsls	r5, r0, #25
 80071ae:	d5fb      	bpl.n	80071a8 <_printf_i+0xb8>
 80071b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80071b4:	2d00      	cmp	r5, #0
 80071b6:	da03      	bge.n	80071c0 <_printf_i+0xd0>
 80071b8:	232d      	movs	r3, #45	@ 0x2d
 80071ba:	426d      	negs	r5, r5
 80071bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071c0:	4859      	ldr	r0, [pc, #356]	@ (8007328 <_printf_i+0x238>)
 80071c2:	230a      	movs	r3, #10
 80071c4:	e011      	b.n	80071ea <_printf_i+0xfa>
 80071c6:	6821      	ldr	r1, [r4, #0]
 80071c8:	6833      	ldr	r3, [r6, #0]
 80071ca:	0608      	lsls	r0, r1, #24
 80071cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80071d0:	d402      	bmi.n	80071d8 <_printf_i+0xe8>
 80071d2:	0649      	lsls	r1, r1, #25
 80071d4:	bf48      	it	mi
 80071d6:	b2ad      	uxthmi	r5, r5
 80071d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80071da:	4853      	ldr	r0, [pc, #332]	@ (8007328 <_printf_i+0x238>)
 80071dc:	6033      	str	r3, [r6, #0]
 80071de:	bf14      	ite	ne
 80071e0:	230a      	movne	r3, #10
 80071e2:	2308      	moveq	r3, #8
 80071e4:	2100      	movs	r1, #0
 80071e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80071ea:	6866      	ldr	r6, [r4, #4]
 80071ec:	60a6      	str	r6, [r4, #8]
 80071ee:	2e00      	cmp	r6, #0
 80071f0:	bfa2      	ittt	ge
 80071f2:	6821      	ldrge	r1, [r4, #0]
 80071f4:	f021 0104 	bicge.w	r1, r1, #4
 80071f8:	6021      	strge	r1, [r4, #0]
 80071fa:	b90d      	cbnz	r5, 8007200 <_printf_i+0x110>
 80071fc:	2e00      	cmp	r6, #0
 80071fe:	d04b      	beq.n	8007298 <_printf_i+0x1a8>
 8007200:	4616      	mov	r6, r2
 8007202:	fbb5 f1f3 	udiv	r1, r5, r3
 8007206:	fb03 5711 	mls	r7, r3, r1, r5
 800720a:	5dc7      	ldrb	r7, [r0, r7]
 800720c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007210:	462f      	mov	r7, r5
 8007212:	42bb      	cmp	r3, r7
 8007214:	460d      	mov	r5, r1
 8007216:	d9f4      	bls.n	8007202 <_printf_i+0x112>
 8007218:	2b08      	cmp	r3, #8
 800721a:	d10b      	bne.n	8007234 <_printf_i+0x144>
 800721c:	6823      	ldr	r3, [r4, #0]
 800721e:	07df      	lsls	r7, r3, #31
 8007220:	d508      	bpl.n	8007234 <_printf_i+0x144>
 8007222:	6923      	ldr	r3, [r4, #16]
 8007224:	6861      	ldr	r1, [r4, #4]
 8007226:	4299      	cmp	r1, r3
 8007228:	bfde      	ittt	le
 800722a:	2330      	movle	r3, #48	@ 0x30
 800722c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007230:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007234:	1b92      	subs	r2, r2, r6
 8007236:	6122      	str	r2, [r4, #16]
 8007238:	f8cd a000 	str.w	sl, [sp]
 800723c:	464b      	mov	r3, r9
 800723e:	aa03      	add	r2, sp, #12
 8007240:	4621      	mov	r1, r4
 8007242:	4640      	mov	r0, r8
 8007244:	f7ff fee6 	bl	8007014 <_printf_common>
 8007248:	3001      	adds	r0, #1
 800724a:	d14a      	bne.n	80072e2 <_printf_i+0x1f2>
 800724c:	f04f 30ff 	mov.w	r0, #4294967295
 8007250:	b004      	add	sp, #16
 8007252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007256:	6823      	ldr	r3, [r4, #0]
 8007258:	f043 0320 	orr.w	r3, r3, #32
 800725c:	6023      	str	r3, [r4, #0]
 800725e:	4833      	ldr	r0, [pc, #204]	@ (800732c <_printf_i+0x23c>)
 8007260:	2778      	movs	r7, #120	@ 0x78
 8007262:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007266:	6823      	ldr	r3, [r4, #0]
 8007268:	6831      	ldr	r1, [r6, #0]
 800726a:	061f      	lsls	r7, r3, #24
 800726c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007270:	d402      	bmi.n	8007278 <_printf_i+0x188>
 8007272:	065f      	lsls	r7, r3, #25
 8007274:	bf48      	it	mi
 8007276:	b2ad      	uxthmi	r5, r5
 8007278:	6031      	str	r1, [r6, #0]
 800727a:	07d9      	lsls	r1, r3, #31
 800727c:	bf44      	itt	mi
 800727e:	f043 0320 	orrmi.w	r3, r3, #32
 8007282:	6023      	strmi	r3, [r4, #0]
 8007284:	b11d      	cbz	r5, 800728e <_printf_i+0x19e>
 8007286:	2310      	movs	r3, #16
 8007288:	e7ac      	b.n	80071e4 <_printf_i+0xf4>
 800728a:	4827      	ldr	r0, [pc, #156]	@ (8007328 <_printf_i+0x238>)
 800728c:	e7e9      	b.n	8007262 <_printf_i+0x172>
 800728e:	6823      	ldr	r3, [r4, #0]
 8007290:	f023 0320 	bic.w	r3, r3, #32
 8007294:	6023      	str	r3, [r4, #0]
 8007296:	e7f6      	b.n	8007286 <_printf_i+0x196>
 8007298:	4616      	mov	r6, r2
 800729a:	e7bd      	b.n	8007218 <_printf_i+0x128>
 800729c:	6833      	ldr	r3, [r6, #0]
 800729e:	6825      	ldr	r5, [r4, #0]
 80072a0:	6961      	ldr	r1, [r4, #20]
 80072a2:	1d18      	adds	r0, r3, #4
 80072a4:	6030      	str	r0, [r6, #0]
 80072a6:	062e      	lsls	r6, r5, #24
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	d501      	bpl.n	80072b0 <_printf_i+0x1c0>
 80072ac:	6019      	str	r1, [r3, #0]
 80072ae:	e002      	b.n	80072b6 <_printf_i+0x1c6>
 80072b0:	0668      	lsls	r0, r5, #25
 80072b2:	d5fb      	bpl.n	80072ac <_printf_i+0x1bc>
 80072b4:	8019      	strh	r1, [r3, #0]
 80072b6:	2300      	movs	r3, #0
 80072b8:	6123      	str	r3, [r4, #16]
 80072ba:	4616      	mov	r6, r2
 80072bc:	e7bc      	b.n	8007238 <_printf_i+0x148>
 80072be:	6833      	ldr	r3, [r6, #0]
 80072c0:	1d1a      	adds	r2, r3, #4
 80072c2:	6032      	str	r2, [r6, #0]
 80072c4:	681e      	ldr	r6, [r3, #0]
 80072c6:	6862      	ldr	r2, [r4, #4]
 80072c8:	2100      	movs	r1, #0
 80072ca:	4630      	mov	r0, r6
 80072cc:	f7f8 ff80 	bl	80001d0 <memchr>
 80072d0:	b108      	cbz	r0, 80072d6 <_printf_i+0x1e6>
 80072d2:	1b80      	subs	r0, r0, r6
 80072d4:	6060      	str	r0, [r4, #4]
 80072d6:	6863      	ldr	r3, [r4, #4]
 80072d8:	6123      	str	r3, [r4, #16]
 80072da:	2300      	movs	r3, #0
 80072dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072e0:	e7aa      	b.n	8007238 <_printf_i+0x148>
 80072e2:	6923      	ldr	r3, [r4, #16]
 80072e4:	4632      	mov	r2, r6
 80072e6:	4649      	mov	r1, r9
 80072e8:	4640      	mov	r0, r8
 80072ea:	47d0      	blx	sl
 80072ec:	3001      	adds	r0, #1
 80072ee:	d0ad      	beq.n	800724c <_printf_i+0x15c>
 80072f0:	6823      	ldr	r3, [r4, #0]
 80072f2:	079b      	lsls	r3, r3, #30
 80072f4:	d413      	bmi.n	800731e <_printf_i+0x22e>
 80072f6:	68e0      	ldr	r0, [r4, #12]
 80072f8:	9b03      	ldr	r3, [sp, #12]
 80072fa:	4298      	cmp	r0, r3
 80072fc:	bfb8      	it	lt
 80072fe:	4618      	movlt	r0, r3
 8007300:	e7a6      	b.n	8007250 <_printf_i+0x160>
 8007302:	2301      	movs	r3, #1
 8007304:	4632      	mov	r2, r6
 8007306:	4649      	mov	r1, r9
 8007308:	4640      	mov	r0, r8
 800730a:	47d0      	blx	sl
 800730c:	3001      	adds	r0, #1
 800730e:	d09d      	beq.n	800724c <_printf_i+0x15c>
 8007310:	3501      	adds	r5, #1
 8007312:	68e3      	ldr	r3, [r4, #12]
 8007314:	9903      	ldr	r1, [sp, #12]
 8007316:	1a5b      	subs	r3, r3, r1
 8007318:	42ab      	cmp	r3, r5
 800731a:	dcf2      	bgt.n	8007302 <_printf_i+0x212>
 800731c:	e7eb      	b.n	80072f6 <_printf_i+0x206>
 800731e:	2500      	movs	r5, #0
 8007320:	f104 0619 	add.w	r6, r4, #25
 8007324:	e7f5      	b.n	8007312 <_printf_i+0x222>
 8007326:	bf00      	nop
 8007328:	080074ef 	.word	0x080074ef
 800732c:	08007500 	.word	0x08007500

08007330 <memmove>:
 8007330:	4288      	cmp	r0, r1
 8007332:	b510      	push	{r4, lr}
 8007334:	eb01 0402 	add.w	r4, r1, r2
 8007338:	d902      	bls.n	8007340 <memmove+0x10>
 800733a:	4284      	cmp	r4, r0
 800733c:	4623      	mov	r3, r4
 800733e:	d807      	bhi.n	8007350 <memmove+0x20>
 8007340:	1e43      	subs	r3, r0, #1
 8007342:	42a1      	cmp	r1, r4
 8007344:	d008      	beq.n	8007358 <memmove+0x28>
 8007346:	f811 2b01 	ldrb.w	r2, [r1], #1
 800734a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800734e:	e7f8      	b.n	8007342 <memmove+0x12>
 8007350:	4402      	add	r2, r0
 8007352:	4601      	mov	r1, r0
 8007354:	428a      	cmp	r2, r1
 8007356:	d100      	bne.n	800735a <memmove+0x2a>
 8007358:	bd10      	pop	{r4, pc}
 800735a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800735e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007362:	e7f7      	b.n	8007354 <memmove+0x24>

08007364 <_realloc_r>:
 8007364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007368:	4680      	mov	r8, r0
 800736a:	4615      	mov	r5, r2
 800736c:	460c      	mov	r4, r1
 800736e:	b921      	cbnz	r1, 800737a <_realloc_r+0x16>
 8007370:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007374:	4611      	mov	r1, r2
 8007376:	f7ff bb99 	b.w	8006aac <_malloc_r>
 800737a:	b92a      	cbnz	r2, 8007388 <_realloc_r+0x24>
 800737c:	f7ff fca8 	bl	8006cd0 <_free_r>
 8007380:	2400      	movs	r4, #0
 8007382:	4620      	mov	r0, r4
 8007384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007388:	f000 f81a 	bl	80073c0 <_malloc_usable_size_r>
 800738c:	4285      	cmp	r5, r0
 800738e:	4606      	mov	r6, r0
 8007390:	d802      	bhi.n	8007398 <_realloc_r+0x34>
 8007392:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007396:	d8f4      	bhi.n	8007382 <_realloc_r+0x1e>
 8007398:	4629      	mov	r1, r5
 800739a:	4640      	mov	r0, r8
 800739c:	f7ff fb86 	bl	8006aac <_malloc_r>
 80073a0:	4607      	mov	r7, r0
 80073a2:	2800      	cmp	r0, #0
 80073a4:	d0ec      	beq.n	8007380 <_realloc_r+0x1c>
 80073a6:	42b5      	cmp	r5, r6
 80073a8:	462a      	mov	r2, r5
 80073aa:	4621      	mov	r1, r4
 80073ac:	bf28      	it	cs
 80073ae:	4632      	movcs	r2, r6
 80073b0:	f7ff fc80 	bl	8006cb4 <memcpy>
 80073b4:	4621      	mov	r1, r4
 80073b6:	4640      	mov	r0, r8
 80073b8:	f7ff fc8a 	bl	8006cd0 <_free_r>
 80073bc:	463c      	mov	r4, r7
 80073be:	e7e0      	b.n	8007382 <_realloc_r+0x1e>

080073c0 <_malloc_usable_size_r>:
 80073c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073c4:	1f18      	subs	r0, r3, #4
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	bfbc      	itt	lt
 80073ca:	580b      	ldrlt	r3, [r1, r0]
 80073cc:	18c0      	addlt	r0, r0, r3
 80073ce:	4770      	bx	lr

080073d0 <_init>:
 80073d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073d2:	bf00      	nop
 80073d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073d6:	bc08      	pop	{r3}
 80073d8:	469e      	mov	lr, r3
 80073da:	4770      	bx	lr

080073dc <_fini>:
 80073dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073de:	bf00      	nop
 80073e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073e2:	bc08      	pop	{r3}
 80073e4:	469e      	mov	lr, r3
 80073e6:	4770      	bx	lr
