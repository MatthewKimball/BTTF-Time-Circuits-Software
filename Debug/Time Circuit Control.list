
Time Circuit Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ecf0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  0800ee80  0800ee80  0000fe80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f1d8  0800f1d8  00011084  2**0
                  CONTENTS
  4 .ARM          00000008  0800f1d8  0800f1d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f1e0  0800f1e0  00011084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f1e0  0800f1e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f1e4  0800f1e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800f1e8  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00011084  2**0
                  CONTENTS
 10 .bss          00005310  20000084  20000084  00011084  2**2
                  ALLOC
 11 ._user_heap_stack 00004004  20005394  20005394  00011084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00011084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00034200  00000000  00000000  000110b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007155  00000000  00000000  000452b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002ce0  00000000  00000000  0004c410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002355  00000000  00000000  0004f0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d497  00000000  00000000  00051445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003be32  00000000  00000000  0007e8dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f94ba  00000000  00000000  000ba70e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001b3bc8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000c968  00000000  00000000  001b3c0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  001c0574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ee68 	.word	0x0800ee68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	0800ee68 	.word	0x0800ee68

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000566:	463b      	mov	r3, r7
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000572:	4b21      	ldr	r3, [pc, #132]	@ (80005f8 <MX_ADC1_Init+0x98>)
 8000574:	4a21      	ldr	r2, [pc, #132]	@ (80005fc <MX_ADC1_Init+0x9c>)
 8000576:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000578:	4b1f      	ldr	r3, [pc, #124]	@ (80005f8 <MX_ADC1_Init+0x98>)
 800057a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800057e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000580:	4b1d      	ldr	r3, [pc, #116]	@ (80005f8 <MX_ADC1_Init+0x98>)
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000586:	4b1c      	ldr	r3, [pc, #112]	@ (80005f8 <MX_ADC1_Init+0x98>)
 8000588:	2200      	movs	r2, #0
 800058a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800058c:	4b1a      	ldr	r3, [pc, #104]	@ (80005f8 <MX_ADC1_Init+0x98>)
 800058e:	2200      	movs	r2, #0
 8000590:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000592:	4b19      	ldr	r3, [pc, #100]	@ (80005f8 <MX_ADC1_Init+0x98>)
 8000594:	2200      	movs	r2, #0
 8000596:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800059a:	4b17      	ldr	r3, [pc, #92]	@ (80005f8 <MX_ADC1_Init+0x98>)
 800059c:	2200      	movs	r2, #0
 800059e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005a0:	4b15      	ldr	r3, [pc, #84]	@ (80005f8 <MX_ADC1_Init+0x98>)
 80005a2:	4a17      	ldr	r2, [pc, #92]	@ (8000600 <MX_ADC1_Init+0xa0>)
 80005a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005a6:	4b14      	ldr	r3, [pc, #80]	@ (80005f8 <MX_ADC1_Init+0x98>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005ac:	4b12      	ldr	r3, [pc, #72]	@ (80005f8 <MX_ADC1_Init+0x98>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005b2:	4b11      	ldr	r3, [pc, #68]	@ (80005f8 <MX_ADC1_Init+0x98>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ba:	4b0f      	ldr	r3, [pc, #60]	@ (80005f8 <MX_ADC1_Init+0x98>)
 80005bc:	2201      	movs	r2, #1
 80005be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005c0:	480d      	ldr	r0, [pc, #52]	@ (80005f8 <MX_ADC1_Init+0x98>)
 80005c2:	f001 f91f 	bl	8001804 <HAL_ADC_Init>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005cc:	f000 fd4e 	bl	800106c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005d4:	2301      	movs	r3, #1
 80005d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005dc:	463b      	mov	r3, r7
 80005de:	4619      	mov	r1, r3
 80005e0:	4805      	ldr	r0, [pc, #20]	@ (80005f8 <MX_ADC1_Init+0x98>)
 80005e2:	f001 f953 	bl	800188c <HAL_ADC_ConfigChannel>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005ec:	f000 fd3e 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005f0:	bf00      	nop
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	200000a0 	.word	0x200000a0
 80005fc:	40012000 	.word	0x40012000
 8000600:	0f000001 	.word	0x0f000001

08000604 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08a      	sub	sp, #40	@ 0x28
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a17      	ldr	r2, [pc, #92]	@ (8000680 <HAL_ADC_MspInit+0x7c>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d127      	bne.n	8000676 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	613b      	str	r3, [r7, #16]
 800062a:	4b16      	ldr	r3, [pc, #88]	@ (8000684 <HAL_ADC_MspInit+0x80>)
 800062c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800062e:	4a15      	ldr	r2, [pc, #84]	@ (8000684 <HAL_ADC_MspInit+0x80>)
 8000630:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000634:	6453      	str	r3, [r2, #68]	@ 0x44
 8000636:	4b13      	ldr	r3, [pc, #76]	@ (8000684 <HAL_ADC_MspInit+0x80>)
 8000638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800063a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800063e:	613b      	str	r3, [r7, #16]
 8000640:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	4b0f      	ldr	r3, [pc, #60]	@ (8000684 <HAL_ADC_MspInit+0x80>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	4a0e      	ldr	r2, [pc, #56]	@ (8000684 <HAL_ADC_MspInit+0x80>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6313      	str	r3, [r2, #48]	@ 0x30
 8000652:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <HAL_ADC_MspInit+0x80>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = CAN_ID_SWITCH_4_Pin;
 800065e:	2301      	movs	r3, #1
 8000660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000662:	2303      	movs	r3, #3
 8000664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CAN_ID_SWITCH_4_GPIO_Port, &GPIO_InitStruct);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4619      	mov	r1, r3
 8000670:	4805      	ldr	r0, [pc, #20]	@ (8000688 <HAL_ADC_MspInit+0x84>)
 8000672:	f001 fff1 	bl	8002658 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000676:	bf00      	nop
 8000678:	3728      	adds	r7, #40	@ 0x28
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40012000 	.word	0x40012000
 8000684:	40023800 	.word	0x40023800
 8000688:	40020000 	.word	0x40020000

0800068c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000690:	4b16      	ldr	r3, [pc, #88]	@ (80006ec <MX_CAN1_Init+0x60>)
 8000692:	4a17      	ldr	r2, [pc, #92]	@ (80006f0 <MX_CAN1_Init+0x64>)
 8000694:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000696:	4b15      	ldr	r3, [pc, #84]	@ (80006ec <MX_CAN1_Init+0x60>)
 8000698:	2210      	movs	r2, #16
 800069a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800069c:	4b13      	ldr	r3, [pc, #76]	@ (80006ec <MX_CAN1_Init+0x60>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006a2:	4b12      	ldr	r3, [pc, #72]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80006a8:	4b10      	ldr	r3, [pc, #64]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80006ae:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006b4:	4b0d      	ldr	r3, [pc, #52]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006ba:	4b0c      	ldr	r3, [pc, #48]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006bc:	2200      	movs	r2, #0
 80006be:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006c0:	4b0a      	ldr	r3, [pc, #40]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006c6:	4b09      	ldr	r3, [pc, #36]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006cc:	4b07      	ldr	r3, [pc, #28]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006d2:	4b06      	ldr	r3, [pc, #24]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006d8:	4804      	ldr	r0, [pc, #16]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006da:	f001 faf5 	bl	8001cc8 <HAL_CAN_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80006e4:	f000 fcc2 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	200000e8 	.word	0x200000e8
 80006f0:	40006400 	.word	0x40006400

080006f4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08a      	sub	sp, #40	@ 0x28
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a19      	ldr	r2, [pc, #100]	@ (8000778 <HAL_CAN_MspInit+0x84>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d12c      	bne.n	8000770 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
 800071a:	4b18      	ldr	r3, [pc, #96]	@ (800077c <HAL_CAN_MspInit+0x88>)
 800071c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800071e:	4a17      	ldr	r2, [pc, #92]	@ (800077c <HAL_CAN_MspInit+0x88>)
 8000720:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000724:	6413      	str	r3, [r2, #64]	@ 0x40
 8000726:	4b15      	ldr	r3, [pc, #84]	@ (800077c <HAL_CAN_MspInit+0x88>)
 8000728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800072a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	4b11      	ldr	r3, [pc, #68]	@ (800077c <HAL_CAN_MspInit+0x88>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a10      	ldr	r2, [pc, #64]	@ (800077c <HAL_CAN_MspInit+0x88>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <HAL_CAN_MspInit+0x88>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800074e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000754:	2302      	movs	r3, #2
 8000756:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075c:	2303      	movs	r3, #3
 800075e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000760:	2309      	movs	r3, #9
 8000762:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4619      	mov	r1, r3
 800076a:	4805      	ldr	r0, [pc, #20]	@ (8000780 <HAL_CAN_MspInit+0x8c>)
 800076c:	f001 ff74 	bl	8002658 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000770:	bf00      	nop
 8000772:	3728      	adds	r7, #40	@ 0x28
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40006400 	.word	0x40006400
 800077c:	40023800 	.word	0x40023800
 8000780:	40020000 	.word	0x40020000

08000784 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <MX_DMA_Init+0x3c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a0b      	ldr	r2, [pc, #44]	@ (80007c0 <MX_DMA_Init+0x3c>)
 8000794:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <MX_DMA_Init+0x3c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2105      	movs	r1, #5
 80007aa:	200f      	movs	r0, #15
 80007ac:	f001 fc40 	bl	8002030 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80007b0:	200f      	movs	r0, #15
 80007b2:	f001 fc59 	bl	8002068 <HAL_NVIC_EnableIRQ>

}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800

080007c4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of MainTask */
  MainTaskHandle = osThreadNew(StartMainTask, NULL, &MainTask_attributes);
 80007c8:	4a0c      	ldr	r2, [pc, #48]	@ (80007fc <MX_FREERTOS_Init+0x38>)
 80007ca:	2100      	movs	r1, #0
 80007cc:	480c      	ldr	r0, [pc, #48]	@ (8000800 <MX_FREERTOS_Init+0x3c>)
 80007ce:	f00a fb5b 	bl	800ae88 <osThreadNew>
 80007d2:	4603      	mov	r3, r0
 80007d4:	4a0b      	ldr	r2, [pc, #44]	@ (8000804 <MX_FREERTOS_Init+0x40>)
 80007d6:	6013      	str	r3, [r2, #0]

  /* creation of SoundTask */
  SoundTaskHandle = osThreadNew(StartSoundTask, NULL, &SoundTask_attributes);
 80007d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000808 <MX_FREERTOS_Init+0x44>)
 80007da:	2100      	movs	r1, #0
 80007dc:	480b      	ldr	r0, [pc, #44]	@ (800080c <MX_FREERTOS_Init+0x48>)
 80007de:	f00a fb53 	bl	800ae88 <osThreadNew>
 80007e2:	4603      	mov	r3, r0
 80007e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000810 <MX_FREERTOS_Init+0x4c>)
 80007e6:	6013      	str	r3, [r2, #0]

  /* creation of ColonTask */
  ColonTaskHandle = osThreadNew(StartColonTask, NULL, &ColonTask_attributes);
 80007e8:	4a0a      	ldr	r2, [pc, #40]	@ (8000814 <MX_FREERTOS_Init+0x50>)
 80007ea:	2100      	movs	r1, #0
 80007ec:	480a      	ldr	r0, [pc, #40]	@ (8000818 <MX_FREERTOS_Init+0x54>)
 80007ee:	f00a fb4b 	bl	800ae88 <osThreadNew>
 80007f2:	4603      	mov	r3, r0
 80007f4:	4a09      	ldr	r2, [pc, #36]	@ (800081c <MX_FREERTOS_Init+0x58>)
 80007f6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	0800ef5c 	.word	0x0800ef5c
 8000800:	08000821 	.word	0x08000821
 8000804:	20000118 	.word	0x20000118
 8000808:	0800ef80 	.word	0x0800ef80
 800080c:	08000845 	.word	0x08000845
 8000810:	2000011c 	.word	0x2000011c
 8000814:	0800efa4 	.word	0x0800efa4
 8000818:	08000855 	.word	0x08000855
 800081c:	20000120 	.word	0x20000120

08000820 <StartMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void *argument)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMainTask */
  imu_bno055_init();
 8000828:	f009 fb6a 	bl	8009f00 <imu_bno055_init>
  /* Infinite loop */
  for(;;)
  {
    timeCircuit_control_update(gTimeCircuitConfig);
 800082c:	4b04      	ldr	r3, [pc, #16]	@ (8000840 <StartMainTask+0x20>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4618      	mov	r0, r3
 8000832:	f00a f9f7 	bl	800ac24 <timeCircuit_control_update>
    osDelay(20); // Run control update every 20ms (adjust as needed)
 8000836:	2014      	movs	r0, #20
 8000838:	f00a fbb8 	bl	800afac <osDelay>
    timeCircuit_control_update(gTimeCircuitConfig);
 800083c:	bf00      	nop
 800083e:	e7f5      	b.n	800082c <StartMainTask+0xc>
 8000840:	200002c8 	.word	0x200002c8

08000844 <StartSoundTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSoundTask */
void StartSoundTask(void *argument)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  {
//    if (osMessageQueueGet(soundQueueHandle, &currentSound, NULL, osWaitForever) == osOK)
//    {
//      soundEffects_playSound(gSoundEffectConfig, gStorageConfig, currentSound);
//      while (gIsPlaying)
        osDelay(10); // Wait until sound is finished
 800084c:	200a      	movs	r0, #10
 800084e:	f00a fbad 	bl	800afac <osDelay>
 8000852:	e7fb      	b.n	800084c <StartSoundTask+0x8>

08000854 <StartColonTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartColonTask */
void StartColonTask(void *argument)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartColonTask */
  /* Infinite loop */
  for(;;)
  {
    timeCircuit__toggleTimeColon(gTimeCircuitConfig);
 800085c:	4b05      	ldr	r3, [pc, #20]	@ (8000874 <StartColonTask+0x20>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4618      	mov	r0, r3
 8000862:	f00a f97d 	bl	800ab60 <timeCircuit__toggleTimeColon>
//    if (toogleStatus == 3) {
//      const char* tone = "beep.wav";
//      osMessageQueuePut(soundQueueHandle, tone, 0, 0);
  //  }

    osDelay(500);
 8000866:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800086a:	f00a fb9f 	bl	800afac <osDelay>
    timeCircuit__toggleTimeColon(gTimeCircuitConfig);
 800086e:	bf00      	nop
 8000870:	e7f4      	b.n	800085c <StartColonTask+0x8>
 8000872:	bf00      	nop
 8000874:	200002c8 	.word	0x200002c8

08000878 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08a      	sub	sp, #40	@ 0x28
 800087c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	613b      	str	r3, [r7, #16]
 8000892:	4b7e      	ldr	r3, [pc, #504]	@ (8000a8c <MX_GPIO_Init+0x214>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a7d      	ldr	r2, [pc, #500]	@ (8000a8c <MX_GPIO_Init+0x214>)
 8000898:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b7b      	ldr	r3, [pc, #492]	@ (8000a8c <MX_GPIO_Init+0x214>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	4b77      	ldr	r3, [pc, #476]	@ (8000a8c <MX_GPIO_Init+0x214>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a76      	ldr	r2, [pc, #472]	@ (8000a8c <MX_GPIO_Init+0x214>)
 80008b4:	f043 0304 	orr.w	r3, r3, #4
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b74      	ldr	r3, [pc, #464]	@ (8000a8c <MX_GPIO_Init+0x214>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f003 0304 	and.w	r3, r3, #4
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	4b70      	ldr	r3, [pc, #448]	@ (8000a8c <MX_GPIO_Init+0x214>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a6f      	ldr	r2, [pc, #444]	@ (8000a8c <MX_GPIO_Init+0x214>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b6d      	ldr	r3, [pc, #436]	@ (8000a8c <MX_GPIO_Init+0x214>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	4b69      	ldr	r3, [pc, #420]	@ (8000a8c <MX_GPIO_Init+0x214>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a68      	ldr	r2, [pc, #416]	@ (8000a8c <MX_GPIO_Init+0x214>)
 80008ec:	f043 0302 	orr.w	r3, r3, #2
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f2:	4b66      	ldr	r3, [pc, #408]	@ (8000a8c <MX_GPIO_Init+0x214>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f003 0302 	and.w	r3, r3, #2
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	4b62      	ldr	r3, [pc, #392]	@ (8000a8c <MX_GPIO_Init+0x214>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	4a61      	ldr	r2, [pc, #388]	@ (8000a8c <MX_GPIO_Init+0x214>)
 8000908:	f043 0308 	orr.w	r3, r3, #8
 800090c:	6313      	str	r3, [r2, #48]	@ 0x30
 800090e:	4b5f      	ldr	r3, [pc, #380]	@ (8000a8c <MX_GPIO_Init+0x214>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f003 0308 	and.w	r3, r3, #8
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, KEYPAD_COL_2_Pin|KEYPAD_COL_1_Pin|DIAGNOSTIC_RGB_LED_Pin, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	f241 0105 	movw	r1, #4101	@ 0x1005
 8000920:	485b      	ldr	r0, [pc, #364]	@ (8000a90 <MX_GPIO_Init+0x218>)
 8000922:	f002 f84d 	bl	80029c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WHITE_LED_Pin|KEYPAD_COL_3_Pin, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	2118      	movs	r1, #24
 800092a:	485a      	ldr	r0, [pc, #360]	@ (8000a94 <MX_GPIO_Init+0x21c>)
 800092c:	f002 f848 	bl	80029c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000930:	2201      	movs	r2, #1
 8000932:	2120      	movs	r1, #32
 8000934:	4856      	ldr	r0, [pc, #344]	@ (8000a90 <MX_GPIO_Init+0x218>)
 8000936:	f002 f843 	bl	80029c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_MODE_GPIO_Port, SD_MODE_Pin, GPIO_PIN_SET);
 800093a:	2201      	movs	r2, #1
 800093c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000940:	4855      	ldr	r0, [pc, #340]	@ (8000a98 <MX_GPIO_Init+0x220>)
 8000942:	f002 f83d 	bl	80029c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_RTC_RST_GPIO_Port, EXT_RTC_RST_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800094c:	4852      	ldr	r0, [pc, #328]	@ (8000a98 <MX_GPIO_Init+0x220>)
 800094e:	f002 f837 	bl	80029c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = KEYPAD_COL_2_Pin|KEYPAD_COL_1_Pin|SD_CS_Pin|DIAGNOSTIC_RGB_LED_Pin;
 8000952:	f241 0325 	movw	r3, #4133	@ 0x1025
 8000956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2301      	movs	r3, #1
 800095a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4619      	mov	r1, r3
 800096a:	4849      	ldr	r0, [pc, #292]	@ (8000a90 <MX_GPIO_Init+0x218>)
 800096c:	f001 fe74 	bl	8002658 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = KEYPAD_ROW_1_Pin|KEYPAD_ROW_4_Pin|KEYPAD_ROW_3_Pin;
 8000970:	231a      	movs	r3, #26
 8000972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000974:	2300      	movs	r3, #0
 8000976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000978:	2302      	movs	r3, #2
 800097a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4619      	mov	r1, r3
 8000982:	4843      	ldr	r0, [pc, #268]	@ (8000a90 <MX_GPIO_Init+0x218>)
 8000984:	f001 fe68 	bl	8002658 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEYPAD_ROW_2_Pin;
 8000988:	2302      	movs	r3, #2
 800098a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098c:	2300      	movs	r3, #0
 800098e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000990:	2302      	movs	r3, #2
 8000992:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEYPAD_ROW_2_GPIO_Port, &GPIO_InitStruct);
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	4619      	mov	r1, r3
 800099a:	483e      	ldr	r0, [pc, #248]	@ (8000a94 <MX_GPIO_Init+0x21c>)
 800099c:	f001 fe5c 	bl	8002658 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = WHITE_LED_Pin|KEYPAD_COL_3_Pin;
 80009a0:	2318      	movs	r3, #24
 80009a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a4:	2301      	movs	r3, #1
 80009a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4619      	mov	r1, r3
 80009b6:	4837      	ldr	r0, [pc, #220]	@ (8000a94 <MX_GPIO_Init+0x21c>)
 80009b8:	f001 fe4e 	bl	8002658 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SD_CD_Pin|KEYPAD_ENTER_Pin|GLITCH_SWITCH_Pin|EXT_RTC_INT_Pin;
 80009bc:	f240 2323 	movw	r3, #547	@ 0x223
 80009c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	4619      	mov	r1, r3
 80009d0:	4831      	ldr	r0, [pc, #196]	@ (8000a98 <MX_GPIO_Init+0x220>)
 80009d2:	f001 fe41 	bl	8002658 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_MODE_Pin;
 80009d6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80009da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80009dc:	2311      	movs	r3, #17
 80009de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_MODE_GPIO_Port, &GPIO_InitStruct);
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	4619      	mov	r1, r3
 80009ee:	482a      	ldr	r0, [pc, #168]	@ (8000a98 <MX_GPIO_Init+0x220>)
 80009f0:	f001 fe32 	bl	8002658 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CAN_ID_SWITCH_1_Pin|CAN_ID_SWITCH_2_Pin|CAN_ID_SWITCH_3_Pin|MUTE_SWITCH_Pin;
 80009f4:	f44f 63b8 	mov.w	r3, #1472	@ 0x5c0
 80009f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	4821      	ldr	r0, [pc, #132]	@ (8000a90 <MX_GPIO_Init+0x218>)
 8000a0a:	f001 fe25 	bl	8002658 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TIME_TRAVEL_SIM_Pin;
 8000a0e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a14:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TIME_TRAVEL_SIM_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	481a      	ldr	r0, [pc, #104]	@ (8000a90 <MX_GPIO_Init+0x218>)
 8000a26:	f001 fe17 	bl	8002658 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INTERRUPT_Pin;
 8000a2a:	2304      	movs	r3, #4
 8000a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a2e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4817      	ldr	r0, [pc, #92]	@ (8000a9c <MX_GPIO_Init+0x224>)
 8000a40:	f001 fe0a 	bl	8002658 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT_RTC_RST_Pin;
 8000a44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EXT_RTC_RST_GPIO_Port, &GPIO_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480e      	ldr	r0, [pc, #56]	@ (8000a98 <MX_GPIO_Init+0x220>)
 8000a5e:	f001 fdfb 	bl	8002658 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2105      	movs	r1, #5
 8000a66:	2008      	movs	r0, #8
 8000a68:	f001 fae2 	bl	8002030 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000a6c:	2008      	movs	r0, #8
 8000a6e:	f001 fafb 	bl	8002068 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2105      	movs	r1, #5
 8000a76:	2028      	movs	r0, #40	@ 0x28
 8000a78:	f001 fada 	bl	8002030 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a7c:	2028      	movs	r0, #40	@ 0x28
 8000a7e:	f001 faf3 	bl	8002068 <HAL_NVIC_EnableIRQ>

}
 8000a82:	bf00      	nop
 8000a84:	3728      	adds	r7, #40	@ 0x28
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020800 	.word	0x40020800
 8000a94:	40020000 	.word	0x40020000
 8000a98:	40020400 	.word	0x40020400
 8000a9c:	40020c00 	.word	0x40020c00

08000aa0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aa4:	4b12      	ldr	r3, [pc, #72]	@ (8000af0 <MX_I2C1_Init+0x50>)
 8000aa6:	4a13      	ldr	r2, [pc, #76]	@ (8000af4 <MX_I2C1_Init+0x54>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000aaa:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <MX_I2C1_Init+0x50>)
 8000aac:	4a12      	ldr	r2, [pc, #72]	@ (8000af8 <MX_I2C1_Init+0x58>)
 8000aae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8000af0 <MX_I2C1_Init+0x50>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8000af0 <MX_I2C1_Init+0x50>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000abc:	4b0c      	ldr	r3, [pc, #48]	@ (8000af0 <MX_I2C1_Init+0x50>)
 8000abe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ac2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8000af0 <MX_I2C1_Init+0x50>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000aca:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <MX_I2C1_Init+0x50>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ad0:	4b07      	ldr	r3, [pc, #28]	@ (8000af0 <MX_I2C1_Init+0x50>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ad6:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <MX_I2C1_Init+0x50>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000adc:	4804      	ldr	r0, [pc, #16]	@ (8000af0 <MX_I2C1_Init+0x50>)
 8000ade:	f001 ffa1 	bl	8002a24 <HAL_I2C_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ae8:	f000 fac0 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000124 	.word	0x20000124
 8000af4:	40005400 	.word	0x40005400
 8000af8:	000186a0 	.word	0x000186a0

08000afc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b00:	4b12      	ldr	r3, [pc, #72]	@ (8000b4c <MX_I2C2_Init+0x50>)
 8000b02:	4a13      	ldr	r2, [pc, #76]	@ (8000b50 <MX_I2C2_Init+0x54>)
 8000b04:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000b06:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <MX_I2C2_Init+0x50>)
 8000b08:	4a12      	ldr	r2, [pc, #72]	@ (8000b54 <MX_I2C2_Init+0x58>)
 8000b0a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b4c <MX_I2C2_Init+0x50>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	@ (8000b4c <MX_I2C2_Init+0x50>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <MX_I2C2_Init+0x50>)
 8000b1a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b1e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b20:	4b0a      	ldr	r3, [pc, #40]	@ (8000b4c <MX_I2C2_Init+0x50>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b26:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <MX_I2C2_Init+0x50>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b2c:	4b07      	ldr	r3, [pc, #28]	@ (8000b4c <MX_I2C2_Init+0x50>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b32:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <MX_I2C2_Init+0x50>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b38:	4804      	ldr	r0, [pc, #16]	@ (8000b4c <MX_I2C2_Init+0x50>)
 8000b3a:	f001 ff73 	bl	8002a24 <HAL_I2C_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b44:	f000 fa92 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000178 	.word	0x20000178
 8000b50:	40005800 	.word	0x40005800
 8000b54:	000186a0 	.word	0x000186a0

08000b58 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000b5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ba8 <MX_I2C3_Init+0x50>)
 8000b5e:	4a13      	ldr	r2, [pc, #76]	@ (8000bac <MX_I2C3_Init+0x54>)
 8000b60:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000b62:	4b11      	ldr	r3, [pc, #68]	@ (8000ba8 <MX_I2C3_Init+0x50>)
 8000b64:	4a12      	ldr	r2, [pc, #72]	@ (8000bb0 <MX_I2C3_Init+0x58>)
 8000b66:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba8 <MX_I2C3_Init+0x50>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba8 <MX_I2C3_Init+0x50>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba8 <MX_I2C3_Init+0x50>)
 8000b76:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b7a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba8 <MX_I2C3_Init+0x50>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000b82:	4b09      	ldr	r3, [pc, #36]	@ (8000ba8 <MX_I2C3_Init+0x50>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b88:	4b07      	ldr	r3, [pc, #28]	@ (8000ba8 <MX_I2C3_Init+0x50>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <MX_I2C3_Init+0x50>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b94:	4804      	ldr	r0, [pc, #16]	@ (8000ba8 <MX_I2C3_Init+0x50>)
 8000b96:	f001 ff45 	bl	8002a24 <HAL_I2C_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000ba0:	f000 fa64 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	200001cc 	.word	0x200001cc
 8000bac:	40005c00 	.word	0x40005c00
 8000bb0:	000186a0 	.word	0x000186a0

08000bb4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08e      	sub	sp, #56	@ 0x38
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a5b      	ldr	r2, [pc, #364]	@ (8000d40 <HAL_I2C_MspInit+0x18c>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d12c      	bne.n	8000c30 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	623b      	str	r3, [r7, #32]
 8000bda:	4b5a      	ldr	r3, [pc, #360]	@ (8000d44 <HAL_I2C_MspInit+0x190>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	4a59      	ldr	r2, [pc, #356]	@ (8000d44 <HAL_I2C_MspInit+0x190>)
 8000be0:	f043 0302 	orr.w	r3, r3, #2
 8000be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be6:	4b57      	ldr	r3, [pc, #348]	@ (8000d44 <HAL_I2C_MspInit+0x190>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	623b      	str	r3, [r7, #32]
 8000bf0:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 8000bf2:	23c0      	movs	r3, #192	@ 0xc0
 8000bf4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf6:	2312      	movs	r3, #18
 8000bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c02:	2304      	movs	r3, #4
 8000c04:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	484e      	ldr	r0, [pc, #312]	@ (8000d48 <HAL_I2C_MspInit+0x194>)
 8000c0e:	f001 fd23 	bl	8002658 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	61fb      	str	r3, [r7, #28]
 8000c16:	4b4b      	ldr	r3, [pc, #300]	@ (8000d44 <HAL_I2C_MspInit+0x190>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1a:	4a4a      	ldr	r2, [pc, #296]	@ (8000d44 <HAL_I2C_MspInit+0x190>)
 8000c1c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c22:	4b48      	ldr	r3, [pc, #288]	@ (8000d44 <HAL_I2C_MspInit+0x190>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c2a:	61fb      	str	r3, [r7, #28]
 8000c2c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000c2e:	e083      	b.n	8000d38 <HAL_I2C_MspInit+0x184>
  else if(i2cHandle->Instance==I2C2)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a45      	ldr	r2, [pc, #276]	@ (8000d4c <HAL_I2C_MspInit+0x198>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d12d      	bne.n	8000c96 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61bb      	str	r3, [r7, #24]
 8000c3e:	4b41      	ldr	r3, [pc, #260]	@ (8000d44 <HAL_I2C_MspInit+0x190>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	4a40      	ldr	r2, [pc, #256]	@ (8000d44 <HAL_I2C_MspInit+0x190>)
 8000c44:	f043 0302 	orr.w	r3, r3, #2
 8000c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4a:	4b3e      	ldr	r3, [pc, #248]	@ (8000d44 <HAL_I2C_MspInit+0x190>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	61bb      	str	r3, [r7, #24]
 8000c54:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = EXT_RTC_SCL_Pin|EXT_RTC_SDA_Pin;
 8000c56:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c5c:	2312      	movs	r3, #18
 8000c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c64:	2303      	movs	r3, #3
 8000c66:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c68:	2304      	movs	r3, #4
 8000c6a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c70:	4619      	mov	r1, r3
 8000c72:	4835      	ldr	r0, [pc, #212]	@ (8000d48 <HAL_I2C_MspInit+0x194>)
 8000c74:	f001 fcf0 	bl	8002658 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	4b31      	ldr	r3, [pc, #196]	@ (8000d44 <HAL_I2C_MspInit+0x190>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c80:	4a30      	ldr	r2, [pc, #192]	@ (8000d44 <HAL_I2C_MspInit+0x190>)
 8000c82:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c86:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c88:	4b2e      	ldr	r3, [pc, #184]	@ (8000d44 <HAL_I2C_MspInit+0x190>)
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	697b      	ldr	r3, [r7, #20]
}
 8000c94:	e050      	b.n	8000d38 <HAL_I2C_MspInit+0x184>
  else if(i2cHandle->Instance==I2C3)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a2d      	ldr	r2, [pc, #180]	@ (8000d50 <HAL_I2C_MspInit+0x19c>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d14b      	bne.n	8000d38 <HAL_I2C_MspInit+0x184>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	4b27      	ldr	r3, [pc, #156]	@ (8000d44 <HAL_I2C_MspInit+0x190>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca8:	4a26      	ldr	r2, [pc, #152]	@ (8000d44 <HAL_I2C_MspInit+0x190>)
 8000caa:	f043 0304 	orr.w	r3, r3, #4
 8000cae:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb0:	4b24      	ldr	r3, [pc, #144]	@ (8000d44 <HAL_I2C_MspInit+0x190>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb4:	f003 0304 	and.w	r3, r3, #4
 8000cb8:	613b      	str	r3, [r7, #16]
 8000cba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	4b20      	ldr	r3, [pc, #128]	@ (8000d44 <HAL_I2C_MspInit+0x190>)
 8000cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc4:	4a1f      	ldr	r2, [pc, #124]	@ (8000d44 <HAL_I2C_MspInit+0x190>)
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ccc:	4b1d      	ldr	r3, [pc, #116]	@ (8000d44 <HAL_I2C_MspInit+0x190>)
 8000cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd0:	f003 0301 	and.w	r3, r3, #1
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TC_DISPLAY_SDA_Pin;
 8000cd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cdc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cde:	2312      	movs	r3, #18
 8000ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000cea:	2304      	movs	r3, #4
 8000cec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(TC_DISPLAY_SDA_GPIO_Port, &GPIO_InitStruct);
 8000cee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4817      	ldr	r0, [pc, #92]	@ (8000d54 <HAL_I2C_MspInit+0x1a0>)
 8000cf6:	f001 fcaf 	bl	8002658 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TC_DISPLAY_SCL_Pin;
 8000cfa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cfe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d00:	2312      	movs	r3, #18
 8000d02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(TC_DISPLAY_SCL_GPIO_Port, &GPIO_InitStruct);
 8000d10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d14:	4619      	mov	r1, r3
 8000d16:	4810      	ldr	r0, [pc, #64]	@ (8000d58 <HAL_I2C_MspInit+0x1a4>)
 8000d18:	f001 fc9e 	bl	8002658 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <HAL_I2C_MspInit+0x190>)
 8000d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d24:	4a07      	ldr	r2, [pc, #28]	@ (8000d44 <HAL_I2C_MspInit+0x190>)
 8000d26:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000d2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d2c:	4b05      	ldr	r3, [pc, #20]	@ (8000d44 <HAL_I2C_MspInit+0x190>)
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	68bb      	ldr	r3, [r7, #8]
}
 8000d38:	bf00      	nop
 8000d3a:	3738      	adds	r7, #56	@ 0x38
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40005400 	.word	0x40005400
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020400 	.word	0x40020400
 8000d4c:	40005800 	.word	0x40005800
 8000d50:	40005c00 	.word	0x40005c00
 8000d54:	40020800 	.word	0x40020800
 8000d58:	40020000 	.word	0x40020000

08000d5c <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000d60:	4b13      	ldr	r3, [pc, #76]	@ (8000db0 <MX_I2S2_Init+0x54>)
 8000d62:	4a14      	ldr	r2, [pc, #80]	@ (8000db4 <MX_I2S2_Init+0x58>)
 8000d64:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000d66:	4b12      	ldr	r3, [pc, #72]	@ (8000db0 <MX_I2S2_Init+0x54>)
 8000d68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d6c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d6e:	4b10      	ldr	r3, [pc, #64]	@ (8000db0 <MX_I2S2_Init+0x54>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000d74:	4b0e      	ldr	r3, [pc, #56]	@ (8000db0 <MX_I2S2_Init+0x54>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000db0 <MX_I2S2_Init+0x54>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000d80:	4b0b      	ldr	r3, [pc, #44]	@ (8000db0 <MX_I2S2_Init+0x54>)
 8000d82:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000d86:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000d88:	4b09      	ldr	r3, [pc, #36]	@ (8000db0 <MX_I2S2_Init+0x54>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000d8e:	4b08      	ldr	r3, [pc, #32]	@ (8000db0 <MX_I2S2_Init+0x54>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000d94:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <MX_I2S2_Init+0x54>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000d9a:	4805      	ldr	r0, [pc, #20]	@ (8000db0 <MX_I2S2_Init+0x54>)
 8000d9c:	f003 fae6 	bl	800436c <HAL_I2S_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000da6:	f000 f961 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000220 	.word	0x20000220
 8000db4:	40003800 	.word	0x40003800

08000db8 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08e      	sub	sp, #56	@ 0x38
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI2)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a3e      	ldr	r2, [pc, #248]	@ (8000edc <HAL_I2S_MspInit+0x124>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d175      	bne.n	8000ed4 <HAL_I2S_MspInit+0x11c>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000de8:	2301      	movs	r3, #1
 8000dea:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 96;
 8000dec:	2360      	movs	r3, #96	@ 0x60
 8000dee:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000df0:	2302      	movs	r3, #2
 8000df2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f004 fc17 	bl	800562c <HAL_RCCEx_PeriphCLKConfig>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000e04:	f000 f932 	bl	800106c <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e08:	2300      	movs	r3, #0
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	4b34      	ldr	r3, [pc, #208]	@ (8000ee0 <HAL_I2S_MspInit+0x128>)
 8000e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e10:	4a33      	ldr	r2, [pc, #204]	@ (8000ee0 <HAL_I2S_MspInit+0x128>)
 8000e12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e16:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e18:	4b31      	ldr	r3, [pc, #196]	@ (8000ee0 <HAL_I2S_MspInit+0x128>)
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	4b2d      	ldr	r3, [pc, #180]	@ (8000ee0 <HAL_I2S_MspInit+0x128>)
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2c:	4a2c      	ldr	r2, [pc, #176]	@ (8000ee0 <HAL_I2S_MspInit+0x128>)
 8000e2e:	f043 0302 	orr.w	r3, r3, #2
 8000e32:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e34:	4b2a      	ldr	r3, [pc, #168]	@ (8000ee0 <HAL_I2S_MspInit+0x128>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e38:	f003 0302 	and.w	r3, r3, #2
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000e40:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8000e44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e52:	2305      	movs	r3, #5
 8000e54:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4821      	ldr	r0, [pc, #132]	@ (8000ee4 <HAL_I2S_MspInit+0x12c>)
 8000e5e:	f001 fbfb 	bl	8002658 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000e62:	4b21      	ldr	r3, [pc, #132]	@ (8000ee8 <HAL_I2S_MspInit+0x130>)
 8000e64:	4a21      	ldr	r2, [pc, #132]	@ (8000eec <HAL_I2S_MspInit+0x134>)
 8000e66:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000e68:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee8 <HAL_I2S_MspInit+0x130>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ee8 <HAL_I2S_MspInit+0x130>)
 8000e70:	2240      	movs	r2, #64	@ 0x40
 8000e72:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e74:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee8 <HAL_I2S_MspInit+0x130>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ee8 <HAL_I2S_MspInit+0x130>)
 8000e7c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e80:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e82:	4b19      	ldr	r3, [pc, #100]	@ (8000ee8 <HAL_I2S_MspInit+0x130>)
 8000e84:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e88:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e8a:	4b17      	ldr	r3, [pc, #92]	@ (8000ee8 <HAL_I2S_MspInit+0x130>)
 8000e8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e90:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000e92:	4b15      	ldr	r3, [pc, #84]	@ (8000ee8 <HAL_I2S_MspInit+0x130>)
 8000e94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e98:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e9a:	4b13      	ldr	r3, [pc, #76]	@ (8000ee8 <HAL_I2S_MspInit+0x130>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000ea0:	4b11      	ldr	r3, [pc, #68]	@ (8000ee8 <HAL_I2S_MspInit+0x130>)
 8000ea2:	2204      	movs	r2, #4
 8000ea4:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000ea6:	4b10      	ldr	r3, [pc, #64]	@ (8000ee8 <HAL_I2S_MspInit+0x130>)
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000eac:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee8 <HAL_I2S_MspInit+0x130>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee8 <HAL_I2S_MspInit+0x130>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000eb8:	480b      	ldr	r0, [pc, #44]	@ (8000ee8 <HAL_I2S_MspInit+0x130>)
 8000eba:	f001 f8e3 	bl	8002084 <HAL_DMA_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <HAL_I2S_MspInit+0x110>
    {
      Error_Handler();
 8000ec4:	f000 f8d2 	bl	800106c <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a07      	ldr	r2, [pc, #28]	@ (8000ee8 <HAL_I2S_MspInit+0x130>)
 8000ecc:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ece:	4a06      	ldr	r2, [pc, #24]	@ (8000ee8 <HAL_I2S_MspInit+0x130>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	3738      	adds	r7, #56	@ 0x38
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40003800 	.word	0x40003800
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40020400 	.word	0x40020400
 8000ee8:	20000268 	.word	0x20000268
 8000eec:	40026070 	.word	0x40026070

08000ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef6:	f000 fc1f 	bl	8001738 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000efa:	f000 f83d 	bl	8000f78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efe:	f7ff fcbb 	bl	8000878 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f02:	f7ff fc3f 	bl	8000784 <MX_DMA_Init>
  MX_CAN1_Init();
 8000f06:	f7ff fbc1 	bl	800068c <MX_CAN1_Init>
  MX_I2C1_Init();
 8000f0a:	f7ff fdc9 	bl	8000aa0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000f0e:	f7ff fdf5 	bl	8000afc <MX_I2C2_Init>
  MX_I2S2_Init();
 8000f12:	f7ff ff23 	bl	8000d5c <MX_I2S2_Init>
  MX_I2C3_Init();
 8000f16:	f7ff fe1f 	bl	8000b58 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8000f1a:	f000 fb71 	bl	8001600 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000f1e:	f7ff fb1f 	bl	8000560 <MX_ADC1_Init>
  MX_FATFS_Init();
 8000f22:	f006 f8bf 	bl	80070a4 <MX_FATFS_Init>
  MX_RTC_Init();
 8000f26:	f000 f8a7 	bl	8001078 <MX_RTC_Init>
  MX_SPI1_Init();
 8000f2a:	f000 f92d 	bl	8001188 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

//  gStorageConfig = storageDevice_init(&hspi1);
//  gSoundEffectConfig = soundEffects_init(&hi2s2, MUTE_SWITCH_GPIO_Port, MUTE_SWITCH_Pin);
  gTimeCircuitConfig = timeCircuit_control_init(&hi2c3, &hi2c2, &hrtc, &hspi1, &hi2s2);
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f60 <main+0x70>)
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	4b0c      	ldr	r3, [pc, #48]	@ (8000f64 <main+0x74>)
 8000f34:	4a0c      	ldr	r2, [pc, #48]	@ (8000f68 <main+0x78>)
 8000f36:	490d      	ldr	r1, [pc, #52]	@ (8000f6c <main+0x7c>)
 8000f38:	480d      	ldr	r0, [pc, #52]	@ (8000f70 <main+0x80>)
 8000f3a:	f009 f863 	bl	800a004 <timeCircuit_control_init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	4a0c      	ldr	r2, [pc, #48]	@ (8000f74 <main+0x84>)
 8000f42:	6013      	str	r3, [r2, #0]

  osKernelInitialize();    // Initialize kernel BEFORE creating tasks
 8000f44:	f009 ff56 	bl	800adf4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000f48:	f7ff fc3c 	bl	80007c4 <MX_FREERTOS_Init>
  osKernelStart();  // Start the scheduler
 8000f4c:	f009 ff76 	bl	800ae3c <osKernelStart>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f50:	f009 ff50 	bl	800adf4 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000f54:	f7ff fc36 	bl	80007c4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000f58:	f009 ff70 	bl	800ae3c <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <main+0x6c>
 8000f60:	20000220 	.word	0x20000220
 8000f64:	200002ec 	.word	0x200002ec
 8000f68:	200002cc 	.word	0x200002cc
 8000f6c:	20000178 	.word	0x20000178
 8000f70:	200001cc 	.word	0x200001cc
 8000f74:	200002c8 	.word	0x200002c8

08000f78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b094      	sub	sp, #80	@ 0x50
 8000f7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7e:	f107 0320 	add.w	r3, r7, #32
 8000f82:	2230      	movs	r2, #48	@ 0x30
 8000f84:	2100      	movs	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f00d f8d6 	bl	800e138 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	4b27      	ldr	r3, [pc, #156]	@ (8001040 <SystemClock_Config+0xc8>)
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa4:	4a26      	ldr	r2, [pc, #152]	@ (8001040 <SystemClock_Config+0xc8>)
 8000fa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000faa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fac:	4b24      	ldr	r3, [pc, #144]	@ (8001040 <SystemClock_Config+0xc8>)
 8000fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fb8:	2300      	movs	r3, #0
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	4b21      	ldr	r3, [pc, #132]	@ (8001044 <SystemClock_Config+0xcc>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a20      	ldr	r2, [pc, #128]	@ (8001044 <SystemClock_Config+0xcc>)
 8000fc2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fc6:	6013      	str	r3, [r2, #0]
 8000fc8:	4b1e      	ldr	r3, [pc, #120]	@ (8001044 <SystemClock_Config+0xcc>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fd8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fdc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fe2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fe8:	2304      	movs	r3, #4
 8000fea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000fec:	2354      	movs	r3, #84	@ 0x54
 8000fee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ff4:	2304      	movs	r3, #4
 8000ff6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff8:	f107 0320 	add.w	r3, r7, #32
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f003 fe4b 	bl	8004c98 <HAL_RCC_OscConfig>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001008:	f000 f830 	bl	800106c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800100c:	230f      	movs	r3, #15
 800100e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001010:	2302      	movs	r3, #2
 8001012:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001018:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800101c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001022:	f107 030c 	add.w	r3, r7, #12
 8001026:	2102      	movs	r1, #2
 8001028:	4618      	mov	r0, r3
 800102a:	f004 f8ad 	bl	8005188 <HAL_RCC_ClockConfig>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001034:	f000 f81a 	bl	800106c <Error_Handler>
  }
}
 8001038:	bf00      	nop
 800103a:	3750      	adds	r7, #80	@ 0x50
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40023800 	.word	0x40023800
 8001044:	40007000 	.word	0x40007000

08001048 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a04      	ldr	r2, [pc, #16]	@ (8001068 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d101      	bne.n	800105e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800105a:	f000 fb8f 	bl	800177c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40001000 	.word	0x40001000

0800106c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001070:	b672      	cpsid	i
}
 8001072:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <Error_Handler+0x8>

08001078 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800108c:	2300      	movs	r3, #0
 800108e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001090:	4b25      	ldr	r3, [pc, #148]	@ (8001128 <MX_RTC_Init+0xb0>)
 8001092:	4a26      	ldr	r2, [pc, #152]	@ (800112c <MX_RTC_Init+0xb4>)
 8001094:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8001096:	4b24      	ldr	r3, [pc, #144]	@ (8001128 <MX_RTC_Init+0xb0>)
 8001098:	2240      	movs	r2, #64	@ 0x40
 800109a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 124;
 800109c:	4b22      	ldr	r3, [pc, #136]	@ (8001128 <MX_RTC_Init+0xb0>)
 800109e:	227c      	movs	r2, #124	@ 0x7c
 80010a0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 7999;
 80010a2:	4b21      	ldr	r3, [pc, #132]	@ (8001128 <MX_RTC_Init+0xb0>)
 80010a4:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80010a8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001128 <MX_RTC_Init+0xb0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001128 <MX_RTC_Init+0xb0>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001128 <MX_RTC_Init+0xb0>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010bc:	481a      	ldr	r0, [pc, #104]	@ (8001128 <MX_RTC_Init+0xb0>)
 80010be:	f004 fbf7 	bl	80058b0 <HAL_RTC_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_RTC_Init+0x54>
  {
    Error_Handler();
 80010c8:	f7ff ffd0 	bl	800106c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 80010cc:	2301      	movs	r3, #1
 80010ce:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	71bb      	strb	r3, [r7, #6]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80010d8:	2300      	movs	r3, #0
 80010da:	71fb      	strb	r3, [r7, #7]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010dc:	2300      	movs	r3, #0
 80010de:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	2201      	movs	r2, #1
 80010e8:	4619      	mov	r1, r3
 80010ea:	480f      	ldr	r0, [pc, #60]	@ (8001128 <MX_RTC_Init+0xb0>)
 80010ec:	f004 fc63 	bl	80059b6 <HAL_RTC_SetTime>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80010f6:	f7ff ffb9 	bl	800106c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80010fa:	2301      	movs	r3, #1
 80010fc:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80010fe:	2301      	movs	r3, #1
 8001100:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001102:	2301      	movs	r3, #1
 8001104:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001106:	2300      	movs	r3, #0
 8001108:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800110a:	463b      	mov	r3, r7
 800110c:	2201      	movs	r2, #1
 800110e:	4619      	mov	r1, r3
 8001110:	4805      	ldr	r0, [pc, #20]	@ (8001128 <MX_RTC_Init+0xb0>)
 8001112:	f004 fcea 	bl	8005aea <HAL_RTC_SetDate>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 800111c:	f7ff ffa6 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001120:	bf00      	nop
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	200002cc 	.word	0x200002cc
 800112c:	40002800 	.word	0x40002800

08001130 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001138:	f107 0308 	add.w	r3, r7, #8
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a0c      	ldr	r2, [pc, #48]	@ (800117c <HAL_RTC_MspInit+0x4c>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d110      	bne.n	8001172 <HAL_RTC_MspInit+0x42>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001150:	2302      	movs	r3, #2
 8001152:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV8;
 8001154:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <HAL_RTC_MspInit+0x50>)
 8001156:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001158:	f107 0308 	add.w	r3, r7, #8
 800115c:	4618      	mov	r0, r3
 800115e:	f004 fa65 	bl	800562c <HAL_RCCEx_PeriphCLKConfig>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <HAL_RTC_MspInit+0x3c>
    {
      Error_Handler();
 8001168:	f7ff ff80 	bl	800106c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800116c:	4b05      	ldr	r3, [pc, #20]	@ (8001184 <HAL_RTC_MspInit+0x54>)
 800116e:	2201      	movs	r2, #1
 8001170:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001172:	bf00      	nop
 8001174:	3718      	adds	r7, #24
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40002800 	.word	0x40002800
 8001180:	00080300 	.word	0x00080300
 8001184:	42470e3c 	.word	0x42470e3c

08001188 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800118c:	4b17      	ldr	r3, [pc, #92]	@ (80011ec <MX_SPI1_Init+0x64>)
 800118e:	4a18      	ldr	r2, [pc, #96]	@ (80011f0 <MX_SPI1_Init+0x68>)
 8001190:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001192:	4b16      	ldr	r3, [pc, #88]	@ (80011ec <MX_SPI1_Init+0x64>)
 8001194:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001198:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800119a:	4b14      	ldr	r3, [pc, #80]	@ (80011ec <MX_SPI1_Init+0x64>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011a0:	4b12      	ldr	r3, [pc, #72]	@ (80011ec <MX_SPI1_Init+0x64>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011a6:	4b11      	ldr	r3, [pc, #68]	@ (80011ec <MX_SPI1_Init+0x64>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011ac:	4b0f      	ldr	r3, [pc, #60]	@ (80011ec <MX_SPI1_Init+0x64>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011b2:	4b0e      	ldr	r3, [pc, #56]	@ (80011ec <MX_SPI1_Init+0x64>)
 80011b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011ba:	4b0c      	ldr	r3, [pc, #48]	@ (80011ec <MX_SPI1_Init+0x64>)
 80011bc:	2200      	movs	r2, #0
 80011be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011c0:	4b0a      	ldr	r3, [pc, #40]	@ (80011ec <MX_SPI1_Init+0x64>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011c6:	4b09      	ldr	r3, [pc, #36]	@ (80011ec <MX_SPI1_Init+0x64>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011cc:	4b07      	ldr	r3, [pc, #28]	@ (80011ec <MX_SPI1_Init+0x64>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011d2:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <MX_SPI1_Init+0x64>)
 80011d4:	220a      	movs	r2, #10
 80011d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011d8:	4804      	ldr	r0, [pc, #16]	@ (80011ec <MX_SPI1_Init+0x64>)
 80011da:	f004 fdab 	bl	8005d34 <HAL_SPI_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011e4:	f7ff ff42 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	200002ec 	.word	0x200002ec
 80011f0:	40013000 	.word	0x40013000

080011f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	@ 0x28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a19      	ldr	r2, [pc, #100]	@ (8001278 <HAL_SPI_MspInit+0x84>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d12b      	bne.n	800126e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	4b18      	ldr	r3, [pc, #96]	@ (800127c <HAL_SPI_MspInit+0x88>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121e:	4a17      	ldr	r2, [pc, #92]	@ (800127c <HAL_SPI_MspInit+0x88>)
 8001220:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001224:	6453      	str	r3, [r2, #68]	@ 0x44
 8001226:	4b15      	ldr	r3, [pc, #84]	@ (800127c <HAL_SPI_MspInit+0x88>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	4b11      	ldr	r3, [pc, #68]	@ (800127c <HAL_SPI_MspInit+0x88>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	4a10      	ldr	r2, [pc, #64]	@ (800127c <HAL_SPI_MspInit+0x88>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6313      	str	r3, [r2, #48]	@ 0x30
 8001242:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <HAL_SPI_MspInit+0x88>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800124e:	23e0      	movs	r3, #224	@ 0xe0
 8001250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	2302      	movs	r3, #2
 8001254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125a:	2303      	movs	r3, #3
 800125c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800125e:	2305      	movs	r3, #5
 8001260:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	4619      	mov	r1, r3
 8001268:	4805      	ldr	r0, [pc, #20]	@ (8001280 <HAL_SPI_MspInit+0x8c>)
 800126a:	f001 f9f5 	bl	8002658 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800126e:	bf00      	nop
 8001270:	3728      	adds	r7, #40	@ 0x28
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40013000 	.word	0x40013000
 800127c:	40023800 	.word	0x40023800
 8001280:	40020000 	.word	0x40020000

08001284 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	4b12      	ldr	r3, [pc, #72]	@ (80012d8 <HAL_MspInit+0x54>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001292:	4a11      	ldr	r2, [pc, #68]	@ (80012d8 <HAL_MspInit+0x54>)
 8001294:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001298:	6453      	str	r3, [r2, #68]	@ 0x44
 800129a:	4b0f      	ldr	r3, [pc, #60]	@ (80012d8 <HAL_MspInit+0x54>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800129e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	603b      	str	r3, [r7, #0]
 80012aa:	4b0b      	ldr	r3, [pc, #44]	@ (80012d8 <HAL_MspInit+0x54>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ae:	4a0a      	ldr	r2, [pc, #40]	@ (80012d8 <HAL_MspInit+0x54>)
 80012b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012b6:	4b08      	ldr	r3, [pc, #32]	@ (80012d8 <HAL_MspInit+0x54>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012be:	603b      	str	r3, [r7, #0]
 80012c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	210f      	movs	r1, #15
 80012c6:	f06f 0001 	mvn.w	r0, #1
 80012ca:	f000 feb1 	bl	8002030 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800

080012dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08e      	sub	sp, #56	@ 0x38
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80012e4:	2300      	movs	r3, #0
 80012e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80012e8:	2300      	movs	r3, #0
 80012ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	4b33      	ldr	r3, [pc, #204]	@ (80013c0 <HAL_InitTick+0xe4>)
 80012f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f4:	4a32      	ldr	r2, [pc, #200]	@ (80013c0 <HAL_InitTick+0xe4>)
 80012f6:	f043 0310 	orr.w	r3, r3, #16
 80012fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80012fc:	4b30      	ldr	r3, [pc, #192]	@ (80013c0 <HAL_InitTick+0xe4>)
 80012fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001300:	f003 0310 	and.w	r3, r3, #16
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001308:	f107 0210 	add.w	r2, r7, #16
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	4611      	mov	r1, r2
 8001312:	4618      	mov	r0, r3
 8001314:	f004 f958 	bl	80055c8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001318:	6a3b      	ldr	r3, [r7, #32]
 800131a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800131c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800131e:	2b00      	cmp	r3, #0
 8001320:	d103      	bne.n	800132a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001322:	f004 f929 	bl	8005578 <HAL_RCC_GetPCLK1Freq>
 8001326:	6378      	str	r0, [r7, #52]	@ 0x34
 8001328:	e004      	b.n	8001334 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800132a:	f004 f925 	bl	8005578 <HAL_RCC_GetPCLK1Freq>
 800132e:	4603      	mov	r3, r0
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001336:	4a23      	ldr	r2, [pc, #140]	@ (80013c4 <HAL_InitTick+0xe8>)
 8001338:	fba2 2303 	umull	r2, r3, r2, r3
 800133c:	0c9b      	lsrs	r3, r3, #18
 800133e:	3b01      	subs	r3, #1
 8001340:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001342:	4b21      	ldr	r3, [pc, #132]	@ (80013c8 <HAL_InitTick+0xec>)
 8001344:	4a21      	ldr	r2, [pc, #132]	@ (80013cc <HAL_InitTick+0xf0>)
 8001346:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001348:	4b1f      	ldr	r3, [pc, #124]	@ (80013c8 <HAL_InitTick+0xec>)
 800134a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800134e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001350:	4a1d      	ldr	r2, [pc, #116]	@ (80013c8 <HAL_InitTick+0xec>)
 8001352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001354:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001356:	4b1c      	ldr	r3, [pc, #112]	@ (80013c8 <HAL_InitTick+0xec>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135c:	4b1a      	ldr	r3, [pc, #104]	@ (80013c8 <HAL_InitTick+0xec>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001362:	4b19      	ldr	r3, [pc, #100]	@ (80013c8 <HAL_InitTick+0xec>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001368:	4817      	ldr	r0, [pc, #92]	@ (80013c8 <HAL_InitTick+0xec>)
 800136a:	f005 f935 	bl	80065d8 <HAL_TIM_Base_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001374:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001378:	2b00      	cmp	r3, #0
 800137a:	d11b      	bne.n	80013b4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800137c:	4812      	ldr	r0, [pc, #72]	@ (80013c8 <HAL_InitTick+0xec>)
 800137e:	f005 f985 	bl	800668c <HAL_TIM_Base_Start_IT>
 8001382:	4603      	mov	r3, r0
 8001384:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001388:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800138c:	2b00      	cmp	r3, #0
 800138e:	d111      	bne.n	80013b4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001390:	2036      	movs	r0, #54	@ 0x36
 8001392:	f000 fe69 	bl	8002068 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b0f      	cmp	r3, #15
 800139a:	d808      	bhi.n	80013ae <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800139c:	2200      	movs	r2, #0
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	2036      	movs	r0, #54	@ 0x36
 80013a2:	f000 fe45 	bl	8002030 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013a6:	4a0a      	ldr	r2, [pc, #40]	@ (80013d0 <HAL_InitTick+0xf4>)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6013      	str	r3, [r2, #0]
 80013ac:	e002      	b.n	80013b4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80013b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3738      	adds	r7, #56	@ 0x38
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40023800 	.word	0x40023800
 80013c4:	431bde83 	.word	0x431bde83
 80013c8:	20000344 	.word	0x20000344
 80013cc:	40001000 	.word	0x40001000
 80013d0:	20000004 	.word	0x20000004

080013d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <NMI_Handler+0x4>

080013dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <HardFault_Handler+0x4>

080013e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <MemManage_Handler+0x4>

080013ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <BusFault_Handler+0x4>

080013f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f8:	bf00      	nop
 80013fa:	e7fd      	b.n	80013f8 <UsageFault_Handler+0x4>

080013fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INTERRUPT_Pin);
 800140e:	2004      	movs	r0, #4
 8001410:	f001 faf0 	bl	80029f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}

08001418 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800141c:	4802      	ldr	r0, [pc, #8]	@ (8001428 <DMA1_Stream4_IRQHandler+0x10>)
 800141e:	f000 fedf 	bl	80021e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000268 	.word	0x20000268

0800142c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TIME_TRAVEL_SIM_Pin);
 8001430:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001434:	f001 fade 	bl	80029f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}

0800143c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001440:	4802      	ldr	r0, [pc, #8]	@ (800144c <TIM6_DAC_IRQHandler+0x10>)
 8001442:	f005 f993 	bl	800676c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000344 	.word	0x20000344

08001450 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
	return 1;
 8001454:	2301      	movs	r3, #1
}
 8001456:	4618      	mov	r0, r3
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <_kill>:

int _kill(int pid, int sig)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800146a:	f00c ff19 	bl	800e2a0 <__errno>
 800146e:	4603      	mov	r3, r0
 8001470:	2216      	movs	r2, #22
 8001472:	601a      	str	r2, [r3, #0]
	return -1;
 8001474:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001478:	4618      	mov	r0, r3
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <_exit>:

void _exit (int status)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001488:	f04f 31ff 	mov.w	r1, #4294967295
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff ffe7 	bl	8001460 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001492:	bf00      	nop
 8001494:	e7fd      	b.n	8001492 <_exit+0x12>

08001496 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b086      	sub	sp, #24
 800149a:	af00      	add	r7, sp, #0
 800149c:	60f8      	str	r0, [r7, #12]
 800149e:	60b9      	str	r1, [r7, #8]
 80014a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	e00a      	b.n	80014be <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014a8:	f3af 8000 	nop.w
 80014ac:	4601      	mov	r1, r0
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	1c5a      	adds	r2, r3, #1
 80014b2:	60ba      	str	r2, [r7, #8]
 80014b4:	b2ca      	uxtb	r2, r1
 80014b6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	3301      	adds	r3, #1
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	697a      	ldr	r2, [r7, #20]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	dbf0      	blt.n	80014a8 <_read+0x12>
	}

return len;
 80014c6:	687b      	ldr	r3, [r7, #4]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	e009      	b.n	80014f6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	1c5a      	adds	r2, r3, #1
 80014e6:	60ba      	str	r2, [r7, #8]
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	3301      	adds	r3, #1
 80014f4:	617b      	str	r3, [r7, #20]
 80014f6:	697a      	ldr	r2, [r7, #20]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	dbf1      	blt.n	80014e2 <_write+0x12>
	}
	return len;
 80014fe:	687b      	ldr	r3, [r7, #4]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <_close>:

int _close(int file)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	return -1;
 8001510:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001514:	4618      	mov	r0, r3
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001530:	605a      	str	r2, [r3, #4]
	return 0;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <_isatty>:

int _isatty(int file)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	return 1;
 8001548:	2301      	movs	r3, #1
}
 800154a:	4618      	mov	r0, r3
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001556:	b480      	push	{r7}
 8001558:	b085      	sub	sp, #20
 800155a:	af00      	add	r7, sp, #0
 800155c:	60f8      	str	r0, [r7, #12]
 800155e:	60b9      	str	r1, [r7, #8]
 8001560:	607a      	str	r2, [r7, #4]
	return 0;
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001578:	4a14      	ldr	r2, [pc, #80]	@ (80015cc <_sbrk+0x5c>)
 800157a:	4b15      	ldr	r3, [pc, #84]	@ (80015d0 <_sbrk+0x60>)
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001584:	4b13      	ldr	r3, [pc, #76]	@ (80015d4 <_sbrk+0x64>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d102      	bne.n	8001592 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800158c:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <_sbrk+0x64>)
 800158e:	4a12      	ldr	r2, [pc, #72]	@ (80015d8 <_sbrk+0x68>)
 8001590:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001592:	4b10      	ldr	r3, [pc, #64]	@ (80015d4 <_sbrk+0x64>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	429a      	cmp	r2, r3
 800159e:	d207      	bcs.n	80015b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a0:	f00c fe7e 	bl	800e2a0 <__errno>
 80015a4:	4603      	mov	r3, r0
 80015a6:	220c      	movs	r2, #12
 80015a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015aa:	f04f 33ff 	mov.w	r3, #4294967295
 80015ae:	e009      	b.n	80015c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b0:	4b08      	ldr	r3, [pc, #32]	@ (80015d4 <_sbrk+0x64>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015b6:	4b07      	ldr	r3, [pc, #28]	@ (80015d4 <_sbrk+0x64>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	4a05      	ldr	r2, [pc, #20]	@ (80015d4 <_sbrk+0x64>)
 80015c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015c2:	68fb      	ldr	r3, [r7, #12]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20020000 	.word	0x20020000
 80015d0:	00002000 	.word	0x00002000
 80015d4:	2000038c 	.word	0x2000038c
 80015d8:	20005398 	.word	0x20005398

080015dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015e0:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <SystemInit+0x20>)
 80015e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015e6:	4a05      	ldr	r2, [pc, #20]	@ (80015fc <SystemInit+0x20>)
 80015e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001604:	4b11      	ldr	r3, [pc, #68]	@ (800164c <MX_USART1_UART_Init+0x4c>)
 8001606:	4a12      	ldr	r2, [pc, #72]	@ (8001650 <MX_USART1_UART_Init+0x50>)
 8001608:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800160a:	4b10      	ldr	r3, [pc, #64]	@ (800164c <MX_USART1_UART_Init+0x4c>)
 800160c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001610:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001612:	4b0e      	ldr	r3, [pc, #56]	@ (800164c <MX_USART1_UART_Init+0x4c>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001618:	4b0c      	ldr	r3, [pc, #48]	@ (800164c <MX_USART1_UART_Init+0x4c>)
 800161a:	2200      	movs	r2, #0
 800161c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800161e:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <MX_USART1_UART_Init+0x4c>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001624:	4b09      	ldr	r3, [pc, #36]	@ (800164c <MX_USART1_UART_Init+0x4c>)
 8001626:	220c      	movs	r2, #12
 8001628:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800162a:	4b08      	ldr	r3, [pc, #32]	@ (800164c <MX_USART1_UART_Init+0x4c>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001630:	4b06      	ldr	r3, [pc, #24]	@ (800164c <MX_USART1_UART_Init+0x4c>)
 8001632:	2200      	movs	r2, #0
 8001634:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001636:	4805      	ldr	r0, [pc, #20]	@ (800164c <MX_USART1_UART_Init+0x4c>)
 8001638:	f005 fa70 	bl	8006b1c <HAL_UART_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001642:	f7ff fd13 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000390 	.word	0x20000390
 8001650:	40011000 	.word	0x40011000

08001654 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08a      	sub	sp, #40	@ 0x28
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a19      	ldr	r2, [pc, #100]	@ (80016d8 <HAL_UART_MspInit+0x84>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d12c      	bne.n	80016d0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	4b18      	ldr	r3, [pc, #96]	@ (80016dc <HAL_UART_MspInit+0x88>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800167e:	4a17      	ldr	r2, [pc, #92]	@ (80016dc <HAL_UART_MspInit+0x88>)
 8001680:	f043 0310 	orr.w	r3, r3, #16
 8001684:	6453      	str	r3, [r2, #68]	@ 0x44
 8001686:	4b15      	ldr	r3, [pc, #84]	@ (80016dc <HAL_UART_MspInit+0x88>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168a:	f003 0310 	and.w	r3, r3, #16
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <HAL_UART_MspInit+0x88>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	4a10      	ldr	r2, [pc, #64]	@ (80016dc <HAL_UART_MspInit+0x88>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a2:	4b0e      	ldr	r3, [pc, #56]	@ (80016dc <HAL_UART_MspInit+0x88>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016ae:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80016b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b4:	2302      	movs	r3, #2
 80016b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016bc:	2303      	movs	r3, #3
 80016be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016c0:	2307      	movs	r3, #7
 80016c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	4619      	mov	r1, r3
 80016ca:	4805      	ldr	r0, [pc, #20]	@ (80016e0 <HAL_UART_MspInit+0x8c>)
 80016cc:	f000 ffc4 	bl	8002658 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80016d0:	bf00      	nop
 80016d2:	3728      	adds	r7, #40	@ 0x28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40011000 	.word	0x40011000
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40020000 	.word	0x40020000

080016e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800171c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016e8:	480d      	ldr	r0, [pc, #52]	@ (8001720 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016ea:	490e      	ldr	r1, [pc, #56]	@ (8001724 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016ec:	4a0e      	ldr	r2, [pc, #56]	@ (8001728 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f0:	e002      	b.n	80016f8 <LoopCopyDataInit>

080016f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016f6:	3304      	adds	r3, #4

080016f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016fc:	d3f9      	bcc.n	80016f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016fe:	4a0b      	ldr	r2, [pc, #44]	@ (800172c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001700:	4c0b      	ldr	r4, [pc, #44]	@ (8001730 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001704:	e001      	b.n	800170a <LoopFillZerobss>

08001706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001708:	3204      	adds	r2, #4

0800170a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800170a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800170c:	d3fb      	bcc.n	8001706 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800170e:	f7ff ff65 	bl	80015dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001712:	f00c fdcb 	bl	800e2ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001716:	f7ff fbeb 	bl	8000ef0 <main>
  bx  lr    
 800171a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800171c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001724:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001728:	0800f1e8 	.word	0x0800f1e8
  ldr r2, =_sbss
 800172c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001730:	20005394 	.word	0x20005394

08001734 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001734:	e7fe      	b.n	8001734 <ADC_IRQHandler>
	...

08001738 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800173c:	4b0e      	ldr	r3, [pc, #56]	@ (8001778 <HAL_Init+0x40>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a0d      	ldr	r2, [pc, #52]	@ (8001778 <HAL_Init+0x40>)
 8001742:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001746:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001748:	4b0b      	ldr	r3, [pc, #44]	@ (8001778 <HAL_Init+0x40>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a0a      	ldr	r2, [pc, #40]	@ (8001778 <HAL_Init+0x40>)
 800174e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001752:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001754:	4b08      	ldr	r3, [pc, #32]	@ (8001778 <HAL_Init+0x40>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a07      	ldr	r2, [pc, #28]	@ (8001778 <HAL_Init+0x40>)
 800175a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800175e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001760:	2003      	movs	r0, #3
 8001762:	f000 fc5a 	bl	800201a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001766:	200f      	movs	r0, #15
 8001768:	f7ff fdb8 	bl	80012dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800176c:	f7ff fd8a 	bl	8001284 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40023c00 	.word	0x40023c00

0800177c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001780:	4b06      	ldr	r3, [pc, #24]	@ (800179c <HAL_IncTick+0x20>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	461a      	mov	r2, r3
 8001786:	4b06      	ldr	r3, [pc, #24]	@ (80017a0 <HAL_IncTick+0x24>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4413      	add	r3, r2
 800178c:	4a04      	ldr	r2, [pc, #16]	@ (80017a0 <HAL_IncTick+0x24>)
 800178e:	6013      	str	r3, [r2, #0]
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	20000008 	.word	0x20000008
 80017a0:	200003d8 	.word	0x200003d8

080017a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return uwTick;
 80017a8:	4b03      	ldr	r3, [pc, #12]	@ (80017b8 <HAL_GetTick+0x14>)
 80017aa:	681b      	ldr	r3, [r3, #0]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	200003d8 	.word	0x200003d8

080017bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017c4:	f7ff ffee 	bl	80017a4 <HAL_GetTick>
 80017c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d4:	d005      	beq.n	80017e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001800 <HAL_Delay+0x44>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	461a      	mov	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4413      	add	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017e2:	bf00      	nop
 80017e4:	f7ff ffde 	bl	80017a4 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d8f7      	bhi.n	80017e4 <HAL_Delay+0x28>
  {
  }
}
 80017f4:	bf00      	nop
 80017f6:	bf00      	nop
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000008 	.word	0x20000008

08001804 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800180c:	2300      	movs	r3, #0
 800180e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e033      	b.n	8001882 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181e:	2b00      	cmp	r3, #0
 8001820:	d109      	bne.n	8001836 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7fe feee 	bl	8000604 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183a:	f003 0310 	and.w	r3, r3, #16
 800183e:	2b00      	cmp	r3, #0
 8001840:	d118      	bne.n	8001874 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001846:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800184a:	f023 0302 	bic.w	r3, r3, #2
 800184e:	f043 0202 	orr.w	r2, r3, #2
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 f93a 	bl	8001ad0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001866:	f023 0303 	bic.w	r3, r3, #3
 800186a:	f043 0201 	orr.w	r2, r3, #1
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	641a      	str	r2, [r3, #64]	@ 0x40
 8001872:	e001      	b.n	8001878 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001880:	7bfb      	ldrb	r3, [r7, #15]
}
 8001882:	4618      	mov	r0, r3
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001896:	2300      	movs	r3, #0
 8001898:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d101      	bne.n	80018a8 <HAL_ADC_ConfigChannel+0x1c>
 80018a4:	2302      	movs	r3, #2
 80018a6:	e105      	b.n	8001ab4 <HAL_ADC_ConfigChannel+0x228>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2b09      	cmp	r3, #9
 80018b6:	d925      	bls.n	8001904 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68d9      	ldr	r1, [r3, #12]
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	461a      	mov	r2, r3
 80018c6:	4613      	mov	r3, r2
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	4413      	add	r3, r2
 80018cc:	3b1e      	subs	r3, #30
 80018ce:	2207      	movs	r2, #7
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43da      	mvns	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	400a      	ands	r2, r1
 80018dc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	68d9      	ldr	r1, [r3, #12]
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	4618      	mov	r0, r3
 80018f0:	4603      	mov	r3, r0
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	4403      	add	r3, r0
 80018f6:	3b1e      	subs	r3, #30
 80018f8:	409a      	lsls	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	430a      	orrs	r2, r1
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	e022      	b.n	800194a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6919      	ldr	r1, [r3, #16]
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	b29b      	uxth	r3, r3
 8001910:	461a      	mov	r2, r3
 8001912:	4613      	mov	r3, r2
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	4413      	add	r3, r2
 8001918:	2207      	movs	r2, #7
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43da      	mvns	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	400a      	ands	r2, r1
 8001926:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6919      	ldr	r1, [r3, #16]
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	689a      	ldr	r2, [r3, #8]
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	b29b      	uxth	r3, r3
 8001938:	4618      	mov	r0, r3
 800193a:	4603      	mov	r3, r0
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	4403      	add	r3, r0
 8001940:	409a      	lsls	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	430a      	orrs	r2, r1
 8001948:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b06      	cmp	r3, #6
 8001950:	d824      	bhi.n	800199c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	4613      	mov	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	3b05      	subs	r3, #5
 8001964:	221f      	movs	r2, #31
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43da      	mvns	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	400a      	ands	r2, r1
 8001972:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	b29b      	uxth	r3, r3
 8001980:	4618      	mov	r0, r3
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	4613      	mov	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	3b05      	subs	r3, #5
 800198e:	fa00 f203 	lsl.w	r2, r0, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	430a      	orrs	r2, r1
 8001998:	635a      	str	r2, [r3, #52]	@ 0x34
 800199a:	e04c      	b.n	8001a36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b0c      	cmp	r3, #12
 80019a2:	d824      	bhi.n	80019ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685a      	ldr	r2, [r3, #4]
 80019ae:	4613      	mov	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	3b23      	subs	r3, #35	@ 0x23
 80019b6:	221f      	movs	r2, #31
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43da      	mvns	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	400a      	ands	r2, r1
 80019c4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	4618      	mov	r0, r3
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685a      	ldr	r2, [r3, #4]
 80019d8:	4613      	mov	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	3b23      	subs	r3, #35	@ 0x23
 80019e0:	fa00 f203 	lsl.w	r2, r0, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80019ec:	e023      	b.n	8001a36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	3b41      	subs	r3, #65	@ 0x41
 8001a00:	221f      	movs	r2, #31
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43da      	mvns	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	400a      	ands	r2, r1
 8001a0e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	4613      	mov	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4413      	add	r3, r2
 8001a28:	3b41      	subs	r3, #65	@ 0x41
 8001a2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	430a      	orrs	r2, r1
 8001a34:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a36:	4b22      	ldr	r3, [pc, #136]	@ (8001ac0 <HAL_ADC_ConfigChannel+0x234>)
 8001a38:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a21      	ldr	r2, [pc, #132]	@ (8001ac4 <HAL_ADC_ConfigChannel+0x238>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d109      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x1cc>
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b12      	cmp	r3, #18
 8001a4a:	d105      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a19      	ldr	r2, [pc, #100]	@ (8001ac4 <HAL_ADC_ConfigChannel+0x238>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d123      	bne.n	8001aaa <HAL_ADC_ConfigChannel+0x21e>
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b10      	cmp	r3, #16
 8001a68:	d003      	beq.n	8001a72 <HAL_ADC_ConfigChannel+0x1e6>
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2b11      	cmp	r3, #17
 8001a70:	d11b      	bne.n	8001aaa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2b10      	cmp	r3, #16
 8001a84:	d111      	bne.n	8001aaa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a86:	4b10      	ldr	r3, [pc, #64]	@ (8001ac8 <HAL_ADC_ConfigChannel+0x23c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a10      	ldr	r2, [pc, #64]	@ (8001acc <HAL_ADC_ConfigChannel+0x240>)
 8001a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a90:	0c9a      	lsrs	r2, r3, #18
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001a9c:	e002      	b.n	8001aa4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f9      	bne.n	8001a9e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	40012300 	.word	0x40012300
 8001ac4:	40012000 	.word	0x40012000
 8001ac8:	20000000 	.word	0x20000000
 8001acc:	431bde83 	.word	0x431bde83

08001ad0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ad8:	4b79      	ldr	r3, [pc, #484]	@ (8001cc0 <ADC_Init+0x1f0>)
 8001ada:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	431a      	orrs	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6859      	ldr	r1, [r3, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	021a      	lsls	r2, r3, #8
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	430a      	orrs	r2, r1
 8001b18:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001b28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6859      	ldr	r1, [r3, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6899      	ldr	r1, [r3, #8]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68da      	ldr	r2, [r3, #12]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b62:	4a58      	ldr	r2, [pc, #352]	@ (8001cc4 <ADC_Init+0x1f4>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d022      	beq.n	8001bae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6899      	ldr	r1, [r3, #8]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6899      	ldr	r1, [r3, #8]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	e00f      	b.n	8001bce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001bbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001bcc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 0202 	bic.w	r2, r2, #2
 8001bdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6899      	ldr	r1, [r3, #8]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	7e1b      	ldrb	r3, [r3, #24]
 8001be8:	005a      	lsls	r2, r3, #1
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d01b      	beq.n	8001c34 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c0a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001c1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6859      	ldr	r1, [r3, #4]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c26:	3b01      	subs	r3, #1
 8001c28:	035a      	lsls	r2, r3, #13
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	e007      	b.n	8001c44 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c42:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001c52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	051a      	lsls	r2, r3, #20
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001c78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6899      	ldr	r1, [r3, #8]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c86:	025a      	lsls	r2, r3, #9
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	689a      	ldr	r2, [r3, #8]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6899      	ldr	r1, [r3, #8]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	029a      	lsls	r2, r3, #10
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	609a      	str	r2, [r3, #8]
}
 8001cb4:	bf00      	nop
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	40012300 	.word	0x40012300
 8001cc4:	0f000001 	.word	0x0f000001

08001cc8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e0ed      	b.n	8001eb6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d102      	bne.n	8001cec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7fe fd04 	bl	80006f4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 0201 	orr.w	r2, r2, #1
 8001cfa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cfc:	f7ff fd52 	bl	80017a4 <HAL_GetTick>
 8001d00:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d02:	e012      	b.n	8001d2a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d04:	f7ff fd4e 	bl	80017a4 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b0a      	cmp	r3, #10
 8001d10:	d90b      	bls.n	8001d2a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d16:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2205      	movs	r2, #5
 8001d22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e0c5      	b.n	8001eb6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0e5      	beq.n	8001d04 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 0202 	bic.w	r2, r2, #2
 8001d46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d48:	f7ff fd2c 	bl	80017a4 <HAL_GetTick>
 8001d4c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d4e:	e012      	b.n	8001d76 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d50:	f7ff fd28 	bl	80017a4 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b0a      	cmp	r3, #10
 8001d5c:	d90b      	bls.n	8001d76 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d62:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2205      	movs	r2, #5
 8001d6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e09f      	b.n	8001eb6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1e5      	bne.n	8001d50 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	7e1b      	ldrb	r3, [r3, #24]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d108      	bne.n	8001d9e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	e007      	b.n	8001dae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001dac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	7e5b      	ldrb	r3, [r3, #25]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d108      	bne.n	8001dc8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	e007      	b.n	8001dd8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001dd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	7e9b      	ldrb	r3, [r3, #26]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d108      	bne.n	8001df2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f042 0220 	orr.w	r2, r2, #32
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	e007      	b.n	8001e02 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0220 	bic.w	r2, r2, #32
 8001e00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	7edb      	ldrb	r3, [r3, #27]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d108      	bne.n	8001e1c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0210 	bic.w	r2, r2, #16
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	e007      	b.n	8001e2c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 0210 	orr.w	r2, r2, #16
 8001e2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	7f1b      	ldrb	r3, [r3, #28]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d108      	bne.n	8001e46 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0208 	orr.w	r2, r2, #8
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	e007      	b.n	8001e56 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0208 	bic.w	r2, r2, #8
 8001e54:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	7f5b      	ldrb	r3, [r3, #29]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d108      	bne.n	8001e70 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f042 0204 	orr.w	r2, r2, #4
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	e007      	b.n	8001e80 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 0204 	bic.w	r2, r2, #4
 8001e7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	ea42 0103 	orr.w	r1, r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	1e5a      	subs	r2, r3, #1
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001edc:	4013      	ands	r3, r2
 8001ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ee8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001eec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ef2:	4a04      	ldr	r2, [pc, #16]	@ (8001f04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	60d3      	str	r3, [r2, #12]
}
 8001ef8:	bf00      	nop
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f0c:	4b04      	ldr	r3, [pc, #16]	@ (8001f20 <__NVIC_GetPriorityGrouping+0x18>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	0a1b      	lsrs	r3, r3, #8
 8001f12:	f003 0307 	and.w	r3, r3, #7
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	db0b      	blt.n	8001f4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	f003 021f 	and.w	r2, r3, #31
 8001f3c:	4907      	ldr	r1, [pc, #28]	@ (8001f5c <__NVIC_EnableIRQ+0x38>)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	095b      	lsrs	r3, r3, #5
 8001f44:	2001      	movs	r0, #1
 8001f46:	fa00 f202 	lsl.w	r2, r0, r2
 8001f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	e000e100 	.word	0xe000e100

08001f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	6039      	str	r1, [r7, #0]
 8001f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	db0a      	blt.n	8001f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	490c      	ldr	r1, [pc, #48]	@ (8001fac <__NVIC_SetPriority+0x4c>)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	0112      	lsls	r2, r2, #4
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	440b      	add	r3, r1
 8001f84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f88:	e00a      	b.n	8001fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	4908      	ldr	r1, [pc, #32]	@ (8001fb0 <__NVIC_SetPriority+0x50>)
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	3b04      	subs	r3, #4
 8001f98:	0112      	lsls	r2, r2, #4
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	761a      	strb	r2, [r3, #24]
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	e000e100 	.word	0xe000e100
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b089      	sub	sp, #36	@ 0x24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f1c3 0307 	rsb	r3, r3, #7
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	bf28      	it	cs
 8001fd2:	2304      	movcs	r3, #4
 8001fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3304      	adds	r3, #4
 8001fda:	2b06      	cmp	r3, #6
 8001fdc:	d902      	bls.n	8001fe4 <NVIC_EncodePriority+0x30>
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3b03      	subs	r3, #3
 8001fe2:	e000      	b.n	8001fe6 <NVIC_EncodePriority+0x32>
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43da      	mvns	r2, r3
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	401a      	ands	r2, r3
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	fa01 f303 	lsl.w	r3, r1, r3
 8002006:	43d9      	mvns	r1, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800200c:	4313      	orrs	r3, r2
         );
}
 800200e:	4618      	mov	r0, r3
 8002010:	3724      	adds	r7, #36	@ 0x24
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b082      	sub	sp, #8
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7ff ff4c 	bl	8001ec0 <__NVIC_SetPriorityGrouping>
}
 8002028:	bf00      	nop
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
 800203c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002042:	f7ff ff61 	bl	8001f08 <__NVIC_GetPriorityGrouping>
 8002046:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	68b9      	ldr	r1, [r7, #8]
 800204c:	6978      	ldr	r0, [r7, #20]
 800204e:	f7ff ffb1 	bl	8001fb4 <NVIC_EncodePriority>
 8002052:	4602      	mov	r2, r0
 8002054:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002058:	4611      	mov	r1, r2
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff ff80 	bl	8001f60 <__NVIC_SetPriority>
}
 8002060:	bf00      	nop
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff ff54 	bl	8001f24 <__NVIC_EnableIRQ>
}
 800207c:	bf00      	nop
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002090:	f7ff fb88 	bl	80017a4 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e099      	b.n	80021d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2202      	movs	r2, #2
 80020a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 0201 	bic.w	r2, r2, #1
 80020be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020c0:	e00f      	b.n	80020e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020c2:	f7ff fb6f 	bl	80017a4 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b05      	cmp	r3, #5
 80020ce:	d908      	bls.n	80020e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2220      	movs	r2, #32
 80020d4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2203      	movs	r2, #3
 80020da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e078      	b.n	80021d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1e8      	bne.n	80020c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	4b38      	ldr	r3, [pc, #224]	@ (80021dc <HAL_DMA_Init+0x158>)
 80020fc:	4013      	ands	r3, r2
 80020fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800210e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800211a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002126:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	4313      	orrs	r3, r2
 8002132:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002138:	2b04      	cmp	r3, #4
 800213a:	d107      	bne.n	800214c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002144:	4313      	orrs	r3, r2
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	4313      	orrs	r3, r2
 800214a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	f023 0307 	bic.w	r3, r3, #7
 8002162:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	4313      	orrs	r3, r2
 800216c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002172:	2b04      	cmp	r3, #4
 8002174:	d117      	bne.n	80021a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	4313      	orrs	r3, r2
 800217e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00e      	beq.n	80021a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 f9e9 	bl	8002560 <DMA_CheckFifoParam>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d008      	beq.n	80021a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2240      	movs	r2, #64	@ 0x40
 8002198:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80021a2:	2301      	movs	r3, #1
 80021a4:	e016      	b.n	80021d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f9a0 	bl	80024f4 <DMA_CalcBaseAndBitshift>
 80021b4:	4603      	mov	r3, r0
 80021b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021bc:	223f      	movs	r2, #63	@ 0x3f
 80021be:	409a      	lsls	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	f010803f 	.word	0xf010803f

080021e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80021ec:	4b8e      	ldr	r3, [pc, #568]	@ (8002428 <HAL_DMA_IRQHandler+0x248>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a8e      	ldr	r2, [pc, #568]	@ (800242c <HAL_DMA_IRQHandler+0x24c>)
 80021f2:	fba2 2303 	umull	r2, r3, r2, r3
 80021f6:	0a9b      	lsrs	r3, r3, #10
 80021f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800220a:	2208      	movs	r2, #8
 800220c:	409a      	lsls	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	4013      	ands	r3, r2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d01a      	beq.n	800224c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	2b00      	cmp	r3, #0
 8002222:	d013      	beq.n	800224c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0204 	bic.w	r2, r2, #4
 8002232:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002238:	2208      	movs	r2, #8
 800223a:	409a      	lsls	r2, r3
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002244:	f043 0201 	orr.w	r2, r3, #1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002250:	2201      	movs	r2, #1
 8002252:	409a      	lsls	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4013      	ands	r3, r2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d012      	beq.n	8002282 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00b      	beq.n	8002282 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800226e:	2201      	movs	r2, #1
 8002270:	409a      	lsls	r2, r3
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800227a:	f043 0202 	orr.w	r2, r3, #2
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002286:	2204      	movs	r2, #4
 8002288:	409a      	lsls	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4013      	ands	r3, r2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d012      	beq.n	80022b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00b      	beq.n	80022b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022a4:	2204      	movs	r2, #4
 80022a6:	409a      	lsls	r2, r3
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b0:	f043 0204 	orr.w	r2, r3, #4
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022bc:	2210      	movs	r2, #16
 80022be:	409a      	lsls	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4013      	ands	r3, r2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d043      	beq.n	8002350 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d03c      	beq.n	8002350 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022da:	2210      	movs	r2, #16
 80022dc:	409a      	lsls	r2, r3
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d018      	beq.n	8002322 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d108      	bne.n	8002310 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002302:	2b00      	cmp	r3, #0
 8002304:	d024      	beq.n	8002350 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	4798      	blx	r3
 800230e:	e01f      	b.n	8002350 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002314:	2b00      	cmp	r3, #0
 8002316:	d01b      	beq.n	8002350 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	4798      	blx	r3
 8002320:	e016      	b.n	8002350 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800232c:	2b00      	cmp	r3, #0
 800232e:	d107      	bne.n	8002340 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0208 	bic.w	r2, r2, #8
 800233e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002344:	2b00      	cmp	r3, #0
 8002346:	d003      	beq.n	8002350 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002354:	2220      	movs	r2, #32
 8002356:	409a      	lsls	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4013      	ands	r3, r2
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 808f 	beq.w	8002480 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0310 	and.w	r3, r3, #16
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 8087 	beq.w	8002480 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002376:	2220      	movs	r2, #32
 8002378:	409a      	lsls	r2, r3
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b05      	cmp	r3, #5
 8002388:	d136      	bne.n	80023f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 0216 	bic.w	r2, r2, #22
 8002398:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	695a      	ldr	r2, [r3, #20]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d103      	bne.n	80023ba <HAL_DMA_IRQHandler+0x1da>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d007      	beq.n	80023ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 0208 	bic.w	r2, r2, #8
 80023c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ce:	223f      	movs	r2, #63	@ 0x3f
 80023d0:	409a      	lsls	r2, r3
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d07e      	beq.n	80024ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	4798      	blx	r3
        }
        return;
 80023f6:	e079      	b.n	80024ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d01d      	beq.n	8002442 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10d      	bne.n	8002430 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002418:	2b00      	cmp	r3, #0
 800241a:	d031      	beq.n	8002480 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	4798      	blx	r3
 8002424:	e02c      	b.n	8002480 <HAL_DMA_IRQHandler+0x2a0>
 8002426:	bf00      	nop
 8002428:	20000000 	.word	0x20000000
 800242c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002434:	2b00      	cmp	r3, #0
 8002436:	d023      	beq.n	8002480 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	4798      	blx	r3
 8002440:	e01e      	b.n	8002480 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10f      	bne.n	8002470 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 0210 	bic.w	r2, r2, #16
 800245e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002484:	2b00      	cmp	r3, #0
 8002486:	d032      	beq.n	80024ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b00      	cmp	r3, #0
 8002492:	d022      	beq.n	80024da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2205      	movs	r2, #5
 8002498:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 0201 	bic.w	r2, r2, #1
 80024aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	3301      	adds	r3, #1
 80024b0:	60bb      	str	r3, [r7, #8]
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d307      	bcc.n	80024c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f2      	bne.n	80024ac <HAL_DMA_IRQHandler+0x2cc>
 80024c6:	e000      	b.n	80024ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80024c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d005      	beq.n	80024ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	4798      	blx	r3
 80024ea:	e000      	b.n	80024ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80024ec:	bf00      	nop
    }
  }
}
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	b2db      	uxtb	r3, r3
 8002502:	3b10      	subs	r3, #16
 8002504:	4a14      	ldr	r2, [pc, #80]	@ (8002558 <DMA_CalcBaseAndBitshift+0x64>)
 8002506:	fba2 2303 	umull	r2, r3, r2, r3
 800250a:	091b      	lsrs	r3, r3, #4
 800250c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800250e:	4a13      	ldr	r2, [pc, #76]	@ (800255c <DMA_CalcBaseAndBitshift+0x68>)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	4413      	add	r3, r2
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	461a      	mov	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2b03      	cmp	r3, #3
 8002520:	d909      	bls.n	8002536 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800252a:	f023 0303 	bic.w	r3, r3, #3
 800252e:	1d1a      	adds	r2, r3, #4
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	659a      	str	r2, [r3, #88]	@ 0x58
 8002534:	e007      	b.n	8002546 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800253e:	f023 0303 	bic.w	r3, r3, #3
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800254a:	4618      	mov	r0, r3
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	aaaaaaab 	.word	0xaaaaaaab
 800255c:	0800efe0 	.word	0x0800efe0

08002560 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002568:	2300      	movs	r3, #0
 800256a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002570:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d11f      	bne.n	80025ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	2b03      	cmp	r3, #3
 800257e:	d856      	bhi.n	800262e <DMA_CheckFifoParam+0xce>
 8002580:	a201      	add	r2, pc, #4	@ (adr r2, 8002588 <DMA_CheckFifoParam+0x28>)
 8002582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002586:	bf00      	nop
 8002588:	08002599 	.word	0x08002599
 800258c:	080025ab 	.word	0x080025ab
 8002590:	08002599 	.word	0x08002599
 8002594:	0800262f 	.word	0x0800262f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800259c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d046      	beq.n	8002632 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025a8:	e043      	b.n	8002632 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ae:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025b2:	d140      	bne.n	8002636 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025b8:	e03d      	b.n	8002636 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025c2:	d121      	bne.n	8002608 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	2b03      	cmp	r3, #3
 80025c8:	d837      	bhi.n	800263a <DMA_CheckFifoParam+0xda>
 80025ca:	a201      	add	r2, pc, #4	@ (adr r2, 80025d0 <DMA_CheckFifoParam+0x70>)
 80025cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025d0:	080025e1 	.word	0x080025e1
 80025d4:	080025e7 	.word	0x080025e7
 80025d8:	080025e1 	.word	0x080025e1
 80025dc:	080025f9 	.word	0x080025f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
      break;
 80025e4:	e030      	b.n	8002648 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d025      	beq.n	800263e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025f6:	e022      	b.n	800263e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025fc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002600:	d11f      	bne.n	8002642 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002606:	e01c      	b.n	8002642 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	2b02      	cmp	r3, #2
 800260c:	d903      	bls.n	8002616 <DMA_CheckFifoParam+0xb6>
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2b03      	cmp	r3, #3
 8002612:	d003      	beq.n	800261c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002614:	e018      	b.n	8002648 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	73fb      	strb	r3, [r7, #15]
      break;
 800261a:	e015      	b.n	8002648 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002620:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00e      	beq.n	8002646 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	73fb      	strb	r3, [r7, #15]
      break;
 800262c:	e00b      	b.n	8002646 <DMA_CheckFifoParam+0xe6>
      break;
 800262e:	bf00      	nop
 8002630:	e00a      	b.n	8002648 <DMA_CheckFifoParam+0xe8>
      break;
 8002632:	bf00      	nop
 8002634:	e008      	b.n	8002648 <DMA_CheckFifoParam+0xe8>
      break;
 8002636:	bf00      	nop
 8002638:	e006      	b.n	8002648 <DMA_CheckFifoParam+0xe8>
      break;
 800263a:	bf00      	nop
 800263c:	e004      	b.n	8002648 <DMA_CheckFifoParam+0xe8>
      break;
 800263e:	bf00      	nop
 8002640:	e002      	b.n	8002648 <DMA_CheckFifoParam+0xe8>
      break;   
 8002642:	bf00      	nop
 8002644:	e000      	b.n	8002648 <DMA_CheckFifoParam+0xe8>
      break;
 8002646:	bf00      	nop
    }
  } 
  
  return status; 
 8002648:	7bfb      	ldrb	r3, [r7, #15]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop

08002658 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002658:	b480      	push	{r7}
 800265a:	b089      	sub	sp, #36	@ 0x24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002662:	2300      	movs	r3, #0
 8002664:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002666:	2300      	movs	r3, #0
 8002668:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800266a:	2300      	movs	r3, #0
 800266c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800266e:	2300      	movs	r3, #0
 8002670:	61fb      	str	r3, [r7, #28]
 8002672:	e16b      	b.n	800294c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002674:	2201      	movs	r2, #1
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	4013      	ands	r3, r2
 8002686:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	429a      	cmp	r2, r3
 800268e:	f040 815a 	bne.w	8002946 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	2b01      	cmp	r3, #1
 800269c:	d005      	beq.n	80026aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d130      	bne.n	800270c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	2203      	movs	r2, #3
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	43db      	mvns	r3, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4013      	ands	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026e0:	2201      	movs	r2, #1
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	091b      	lsrs	r3, r3, #4
 80026f6:	f003 0201 	and.w	r2, r3, #1
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4313      	orrs	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f003 0303 	and.w	r3, r3, #3
 8002714:	2b03      	cmp	r3, #3
 8002716:	d017      	beq.n	8002748 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	2203      	movs	r2, #3
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	43db      	mvns	r3, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4013      	ands	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4313      	orrs	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f003 0303 	and.w	r3, r3, #3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d123      	bne.n	800279c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	08da      	lsrs	r2, r3, #3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3208      	adds	r2, #8
 800275c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002760:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	220f      	movs	r2, #15
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	43db      	mvns	r3, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4013      	ands	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	691a      	ldr	r2, [r3, #16]
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4313      	orrs	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	08da      	lsrs	r2, r3, #3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	3208      	adds	r2, #8
 8002796:	69b9      	ldr	r1, [r7, #24]
 8002798:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	2203      	movs	r2, #3
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4013      	ands	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f003 0203 	and.w	r2, r3, #3
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 80b4 	beq.w	8002946 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	4b60      	ldr	r3, [pc, #384]	@ (8002964 <HAL_GPIO_Init+0x30c>)
 80027e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e6:	4a5f      	ldr	r2, [pc, #380]	@ (8002964 <HAL_GPIO_Init+0x30c>)
 80027e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80027ee:	4b5d      	ldr	r3, [pc, #372]	@ (8002964 <HAL_GPIO_Init+0x30c>)
 80027f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027fa:	4a5b      	ldr	r2, [pc, #364]	@ (8002968 <HAL_GPIO_Init+0x310>)
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	089b      	lsrs	r3, r3, #2
 8002800:	3302      	adds	r3, #2
 8002802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002806:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	f003 0303 	and.w	r3, r3, #3
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	220f      	movs	r2, #15
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	43db      	mvns	r3, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4013      	ands	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a52      	ldr	r2, [pc, #328]	@ (800296c <HAL_GPIO_Init+0x314>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d02b      	beq.n	800287e <HAL_GPIO_Init+0x226>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a51      	ldr	r2, [pc, #324]	@ (8002970 <HAL_GPIO_Init+0x318>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d025      	beq.n	800287a <HAL_GPIO_Init+0x222>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a50      	ldr	r2, [pc, #320]	@ (8002974 <HAL_GPIO_Init+0x31c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d01f      	beq.n	8002876 <HAL_GPIO_Init+0x21e>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a4f      	ldr	r2, [pc, #316]	@ (8002978 <HAL_GPIO_Init+0x320>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d019      	beq.n	8002872 <HAL_GPIO_Init+0x21a>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a4e      	ldr	r2, [pc, #312]	@ (800297c <HAL_GPIO_Init+0x324>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d013      	beq.n	800286e <HAL_GPIO_Init+0x216>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a4d      	ldr	r2, [pc, #308]	@ (8002980 <HAL_GPIO_Init+0x328>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d00d      	beq.n	800286a <HAL_GPIO_Init+0x212>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a4c      	ldr	r2, [pc, #304]	@ (8002984 <HAL_GPIO_Init+0x32c>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d007      	beq.n	8002866 <HAL_GPIO_Init+0x20e>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a4b      	ldr	r2, [pc, #300]	@ (8002988 <HAL_GPIO_Init+0x330>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d101      	bne.n	8002862 <HAL_GPIO_Init+0x20a>
 800285e:	2307      	movs	r3, #7
 8002860:	e00e      	b.n	8002880 <HAL_GPIO_Init+0x228>
 8002862:	2308      	movs	r3, #8
 8002864:	e00c      	b.n	8002880 <HAL_GPIO_Init+0x228>
 8002866:	2306      	movs	r3, #6
 8002868:	e00a      	b.n	8002880 <HAL_GPIO_Init+0x228>
 800286a:	2305      	movs	r3, #5
 800286c:	e008      	b.n	8002880 <HAL_GPIO_Init+0x228>
 800286e:	2304      	movs	r3, #4
 8002870:	e006      	b.n	8002880 <HAL_GPIO_Init+0x228>
 8002872:	2303      	movs	r3, #3
 8002874:	e004      	b.n	8002880 <HAL_GPIO_Init+0x228>
 8002876:	2302      	movs	r3, #2
 8002878:	e002      	b.n	8002880 <HAL_GPIO_Init+0x228>
 800287a:	2301      	movs	r3, #1
 800287c:	e000      	b.n	8002880 <HAL_GPIO_Init+0x228>
 800287e:	2300      	movs	r3, #0
 8002880:	69fa      	ldr	r2, [r7, #28]
 8002882:	f002 0203 	and.w	r2, r2, #3
 8002886:	0092      	lsls	r2, r2, #2
 8002888:	4093      	lsls	r3, r2
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4313      	orrs	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002890:	4935      	ldr	r1, [pc, #212]	@ (8002968 <HAL_GPIO_Init+0x310>)
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	089b      	lsrs	r3, r3, #2
 8002896:	3302      	adds	r3, #2
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800289e:	4b3b      	ldr	r3, [pc, #236]	@ (800298c <HAL_GPIO_Init+0x334>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	43db      	mvns	r3, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4013      	ands	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	4313      	orrs	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028c2:	4a32      	ldr	r2, [pc, #200]	@ (800298c <HAL_GPIO_Init+0x334>)
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028c8:	4b30      	ldr	r3, [pc, #192]	@ (800298c <HAL_GPIO_Init+0x334>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	43db      	mvns	r3, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4013      	ands	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d003      	beq.n	80028ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028ec:	4a27      	ldr	r2, [pc, #156]	@ (800298c <HAL_GPIO_Init+0x334>)
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028f2:	4b26      	ldr	r3, [pc, #152]	@ (800298c <HAL_GPIO_Init+0x334>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	43db      	mvns	r3, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4013      	ands	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002916:	4a1d      	ldr	r2, [pc, #116]	@ (800298c <HAL_GPIO_Init+0x334>)
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800291c:	4b1b      	ldr	r3, [pc, #108]	@ (800298c <HAL_GPIO_Init+0x334>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	43db      	mvns	r3, r3
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4013      	ands	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d003      	beq.n	8002940 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	4313      	orrs	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002940:	4a12      	ldr	r2, [pc, #72]	@ (800298c <HAL_GPIO_Init+0x334>)
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	3301      	adds	r3, #1
 800294a:	61fb      	str	r3, [r7, #28]
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	2b0f      	cmp	r3, #15
 8002950:	f67f ae90 	bls.w	8002674 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002954:	bf00      	nop
 8002956:	bf00      	nop
 8002958:	3724      	adds	r7, #36	@ 0x24
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40023800 	.word	0x40023800
 8002968:	40013800 	.word	0x40013800
 800296c:	40020000 	.word	0x40020000
 8002970:	40020400 	.word	0x40020400
 8002974:	40020800 	.word	0x40020800
 8002978:	40020c00 	.word	0x40020c00
 800297c:	40021000 	.word	0x40021000
 8002980:	40021400 	.word	0x40021400
 8002984:	40021800 	.word	0x40021800
 8002988:	40021c00 	.word	0x40021c00
 800298c:	40013c00 	.word	0x40013c00

08002990 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	460b      	mov	r3, r1
 800299a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	691a      	ldr	r2, [r3, #16]
 80029a0:	887b      	ldrh	r3, [r7, #2]
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d002      	beq.n	80029ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029a8:	2301      	movs	r3, #1
 80029aa:	73fb      	strb	r3, [r7, #15]
 80029ac:	e001      	b.n	80029b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029ae:	2300      	movs	r3, #0
 80029b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	460b      	mov	r3, r1
 80029ca:	807b      	strh	r3, [r7, #2]
 80029cc:	4613      	mov	r3, r2
 80029ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029d0:	787b      	ldrb	r3, [r7, #1]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029d6:	887a      	ldrh	r2, [r7, #2]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029dc:	e003      	b.n	80029e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029de:	887b      	ldrh	r3, [r7, #2]
 80029e0:	041a      	lsls	r2, r3, #16
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	619a      	str	r2, [r3, #24]
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
	...

080029f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	4603      	mov	r3, r0
 80029fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80029fe:	4b08      	ldr	r3, [pc, #32]	@ (8002a20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a00:	695a      	ldr	r2, [r3, #20]
 8002a02:	88fb      	ldrh	r3, [r7, #6]
 8002a04:	4013      	ands	r3, r2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d006      	beq.n	8002a18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a0a:	4a05      	ldr	r2, [pc, #20]	@ (8002a20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a0c:	88fb      	ldrh	r3, [r7, #6]
 8002a0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a10:	88fb      	ldrh	r3, [r7, #6]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f007 f9d8 	bl	8009dc8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a18:	bf00      	nop
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40013c00 	.word	0x40013c00

08002a24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e12b      	b.n	8002c8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d106      	bne.n	8002a50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7fe f8b2 	bl	8000bb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2224      	movs	r2, #36	@ 0x24
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0201 	bic.w	r2, r2, #1
 8002a66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a88:	f002 fd76 	bl	8005578 <HAL_RCC_GetPCLK1Freq>
 8002a8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	4a81      	ldr	r2, [pc, #516]	@ (8002c98 <HAL_I2C_Init+0x274>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d807      	bhi.n	8002aa8 <HAL_I2C_Init+0x84>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	4a80      	ldr	r2, [pc, #512]	@ (8002c9c <HAL_I2C_Init+0x278>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	bf94      	ite	ls
 8002aa0:	2301      	movls	r3, #1
 8002aa2:	2300      	movhi	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	e006      	b.n	8002ab6 <HAL_I2C_Init+0x92>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4a7d      	ldr	r2, [pc, #500]	@ (8002ca0 <HAL_I2C_Init+0x27c>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	bf94      	ite	ls
 8002ab0:	2301      	movls	r3, #1
 8002ab2:	2300      	movhi	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e0e7      	b.n	8002c8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	4a78      	ldr	r2, [pc, #480]	@ (8002ca4 <HAL_I2C_Init+0x280>)
 8002ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac6:	0c9b      	lsrs	r3, r3, #18
 8002ac8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	4a6a      	ldr	r2, [pc, #424]	@ (8002c98 <HAL_I2C_Init+0x274>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d802      	bhi.n	8002af8 <HAL_I2C_Init+0xd4>
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	3301      	adds	r3, #1
 8002af6:	e009      	b.n	8002b0c <HAL_I2C_Init+0xe8>
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002afe:	fb02 f303 	mul.w	r3, r2, r3
 8002b02:	4a69      	ldr	r2, [pc, #420]	@ (8002ca8 <HAL_I2C_Init+0x284>)
 8002b04:	fba2 2303 	umull	r2, r3, r2, r3
 8002b08:	099b      	lsrs	r3, r3, #6
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	6812      	ldr	r2, [r2, #0]
 8002b10:	430b      	orrs	r3, r1
 8002b12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002b1e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	495c      	ldr	r1, [pc, #368]	@ (8002c98 <HAL_I2C_Init+0x274>)
 8002b28:	428b      	cmp	r3, r1
 8002b2a:	d819      	bhi.n	8002b60 <HAL_I2C_Init+0x13c>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	1e59      	subs	r1, r3, #1
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b3a:	1c59      	adds	r1, r3, #1
 8002b3c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b40:	400b      	ands	r3, r1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00a      	beq.n	8002b5c <HAL_I2C_Init+0x138>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	1e59      	subs	r1, r3, #1
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b54:	3301      	adds	r3, #1
 8002b56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b5a:	e051      	b.n	8002c00 <HAL_I2C_Init+0x1dc>
 8002b5c:	2304      	movs	r3, #4
 8002b5e:	e04f      	b.n	8002c00 <HAL_I2C_Init+0x1dc>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d111      	bne.n	8002b8c <HAL_I2C_Init+0x168>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6859      	ldr	r1, [r3, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	440b      	add	r3, r1
 8002b76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	bf0c      	ite	eq
 8002b84:	2301      	moveq	r3, #1
 8002b86:	2300      	movne	r3, #0
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	e012      	b.n	8002bb2 <HAL_I2C_Init+0x18e>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	1e58      	subs	r0, r3, #1
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6859      	ldr	r1, [r3, #4]
 8002b94:	460b      	mov	r3, r1
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	0099      	lsls	r1, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	bf0c      	ite	eq
 8002bac:	2301      	moveq	r3, #1
 8002bae:	2300      	movne	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <HAL_I2C_Init+0x196>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e022      	b.n	8002c00 <HAL_I2C_Init+0x1dc>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10e      	bne.n	8002be0 <HAL_I2C_Init+0x1bc>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	1e58      	subs	r0, r3, #1
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6859      	ldr	r1, [r3, #4]
 8002bca:	460b      	mov	r3, r1
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	440b      	add	r3, r1
 8002bd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bde:	e00f      	b.n	8002c00 <HAL_I2C_Init+0x1dc>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	1e58      	subs	r0, r3, #1
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6859      	ldr	r1, [r3, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	0099      	lsls	r1, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bfc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	6809      	ldr	r1, [r1, #0]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69da      	ldr	r2, [r3, #28]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002c2e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6911      	ldr	r1, [r2, #16]
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	68d2      	ldr	r2, [r2, #12]
 8002c3a:	4311      	orrs	r1, r2
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6812      	ldr	r2, [r2, #0]
 8002c40:	430b      	orrs	r3, r1
 8002c42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	695a      	ldr	r2, [r3, #20]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0201 	orr.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2220      	movs	r2, #32
 8002c7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	000186a0 	.word	0x000186a0
 8002c9c:	001e847f 	.word	0x001e847f
 8002ca0:	003d08ff 	.word	0x003d08ff
 8002ca4:	431bde83 	.word	0x431bde83
 8002ca8:	10624dd3 	.word	0x10624dd3

08002cac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af02      	add	r7, sp, #8
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	607a      	str	r2, [r7, #4]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	460b      	mov	r3, r1
 8002cba:	817b      	strh	r3, [r7, #10]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cc0:	f7fe fd70 	bl	80017a4 <HAL_GetTick>
 8002cc4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b20      	cmp	r3, #32
 8002cd0:	f040 80e0 	bne.w	8002e94 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	2319      	movs	r3, #25
 8002cda:	2201      	movs	r2, #1
 8002cdc:	4970      	ldr	r1, [pc, #448]	@ (8002ea0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f001 f90e 	bl	8003f00 <I2C_WaitOnFlagUntilTimeout>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002cea:	2302      	movs	r3, #2
 8002cec:	e0d3      	b.n	8002e96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <HAL_I2C_Master_Transmit+0x50>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e0cc      	b.n	8002e96 <HAL_I2C_Master_Transmit+0x1ea>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d007      	beq.n	8002d22 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f042 0201 	orr.w	r2, r2, #1
 8002d20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2221      	movs	r2, #33	@ 0x21
 8002d36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2210      	movs	r2, #16
 8002d3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	893a      	ldrh	r2, [r7, #8]
 8002d52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	4a50      	ldr	r2, [pc, #320]	@ (8002ea4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002d62:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d64:	8979      	ldrh	r1, [r7, #10]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	6a3a      	ldr	r2, [r7, #32]
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 fdfa 	bl	8003964 <I2C_MasterRequestWrite>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e08d      	b.n	8002e96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	613b      	str	r3, [r7, #16]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	613b      	str	r3, [r7, #16]
 8002d8e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d90:	e066      	b.n	8002e60 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	6a39      	ldr	r1, [r7, #32]
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f001 f9cc 	bl	8004134 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00d      	beq.n	8002dbe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d107      	bne.n	8002dba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002db8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e06b      	b.n	8002e96 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc2:	781a      	ldrb	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dce:	1c5a      	adds	r2, r3, #1
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d11b      	bne.n	8002e34 <HAL_I2C_Master_Transmit+0x188>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d017      	beq.n	8002e34 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e08:	781a      	ldrb	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e14:	1c5a      	adds	r2, r3, #1
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	3b01      	subs	r3, #1
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	6a39      	ldr	r1, [r7, #32]
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f001 f9c3 	bl	80041c4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00d      	beq.n	8002e60 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e48:	2b04      	cmp	r3, #4
 8002e4a:	d107      	bne.n	8002e5c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e5a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e01a      	b.n	8002e96 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d194      	bne.n	8002d92 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e90:	2300      	movs	r3, #0
 8002e92:	e000      	b.n	8002e96 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e94:	2302      	movs	r3, #2
  }
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	00100002 	.word	0x00100002
 8002ea4:	ffff0000 	.word	0xffff0000

08002ea8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b08c      	sub	sp, #48	@ 0x30
 8002eac:	af02      	add	r7, sp, #8
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	607a      	str	r2, [r7, #4]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	817b      	strh	r3, [r7, #10]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ebc:	f7fe fc72 	bl	80017a4 <HAL_GetTick>
 8002ec0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b20      	cmp	r3, #32
 8002ecc:	f040 8217 	bne.w	80032fe <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed2:	9300      	str	r3, [sp, #0]
 8002ed4:	2319      	movs	r3, #25
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	497c      	ldr	r1, [pc, #496]	@ (80030cc <HAL_I2C_Master_Receive+0x224>)
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f001 f810 	bl	8003f00 <I2C_WaitOnFlagUntilTimeout>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e20a      	b.n	8003300 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_I2C_Master_Receive+0x50>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e203      	b.n	8003300 <HAL_I2C_Master_Receive+0x458>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d007      	beq.n	8002f1e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f042 0201 	orr.w	r2, r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2222      	movs	r2, #34	@ 0x22
 8002f32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2210      	movs	r2, #16
 8002f3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	893a      	ldrh	r2, [r7, #8]
 8002f4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	4a5c      	ldr	r2, [pc, #368]	@ (80030d0 <HAL_I2C_Master_Receive+0x228>)
 8002f5e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f60:	8979      	ldrh	r1, [r7, #10]
 8002f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 fd7e 	bl	8003a68 <I2C_MasterRequestRead>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e1c4      	b.n	8003300 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d113      	bne.n	8002fa6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f7e:	2300      	movs	r3, #0
 8002f80:	623b      	str	r3, [r7, #32]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	623b      	str	r3, [r7, #32]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	623b      	str	r3, [r7, #32]
 8002f92:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	e198      	b.n	80032d8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d11b      	bne.n	8002fe6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61fb      	str	r3, [r7, #28]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	61fb      	str	r3, [r7, #28]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	61fb      	str	r3, [r7, #28]
 8002fd2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	e178      	b.n	80032d8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d11b      	bne.n	8003026 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ffc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800300c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800300e:	2300      	movs	r3, #0
 8003010:	61bb      	str	r3, [r7, #24]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	61bb      	str	r3, [r7, #24]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	61bb      	str	r3, [r7, #24]
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	e158      	b.n	80032d8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003034:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003036:	2300      	movs	r3, #0
 8003038:	617b      	str	r3, [r7, #20]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	617b      	str	r3, [r7, #20]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	617b      	str	r3, [r7, #20]
 800304a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800304c:	e144      	b.n	80032d8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003052:	2b03      	cmp	r3, #3
 8003054:	f200 80f1 	bhi.w	800323a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800305c:	2b01      	cmp	r3, #1
 800305e:	d123      	bne.n	80030a8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003060:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003062:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f001 f8f5 	bl	8004254 <I2C_WaitOnRXNEFlagUntilTimeout>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e145      	b.n	8003300 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	691a      	ldr	r2, [r3, #16]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307e:	b2d2      	uxtb	r2, r2
 8003080:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003090:	3b01      	subs	r3, #1
 8003092:	b29a      	uxth	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800309c:	b29b      	uxth	r3, r3
 800309e:	3b01      	subs	r3, #1
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030a6:	e117      	b.n	80032d8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d14e      	bne.n	800314e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b6:	2200      	movs	r2, #0
 80030b8:	4906      	ldr	r1, [pc, #24]	@ (80030d4 <HAL_I2C_Master_Receive+0x22c>)
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 ff20 	bl	8003f00 <I2C_WaitOnFlagUntilTimeout>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d008      	beq.n	80030d8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e11a      	b.n	8003300 <HAL_I2C_Master_Receive+0x458>
 80030ca:	bf00      	nop
 80030cc:	00100002 	.word	0x00100002
 80030d0:	ffff0000 	.word	0xffff0000
 80030d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	691a      	ldr	r2, [r3, #16]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fa:	1c5a      	adds	r2, r3, #1
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003104:	3b01      	subs	r3, #1
 8003106:	b29a      	uxth	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003110:	b29b      	uxth	r3, r3
 8003112:	3b01      	subs	r3, #1
 8003114:	b29a      	uxth	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	691a      	ldr	r2, [r3, #16]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003124:	b2d2      	uxtb	r2, r2
 8003126:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312c:	1c5a      	adds	r2, r3, #1
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003136:	3b01      	subs	r3, #1
 8003138:	b29a      	uxth	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003142:	b29b      	uxth	r3, r3
 8003144:	3b01      	subs	r3, #1
 8003146:	b29a      	uxth	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800314c:	e0c4      	b.n	80032d8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800314e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003154:	2200      	movs	r2, #0
 8003156:	496c      	ldr	r1, [pc, #432]	@ (8003308 <HAL_I2C_Master_Receive+0x460>)
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f000 fed1 	bl	8003f00 <I2C_WaitOnFlagUntilTimeout>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e0cb      	b.n	8003300 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003176:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	691a      	ldr	r2, [r3, #16]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003182:	b2d2      	uxtb	r2, r2
 8003184:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318a:	1c5a      	adds	r2, r3, #1
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003194:	3b01      	subs	r3, #1
 8003196:	b29a      	uxth	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	3b01      	subs	r3, #1
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031b0:	2200      	movs	r2, #0
 80031b2:	4955      	ldr	r1, [pc, #340]	@ (8003308 <HAL_I2C_Master_Receive+0x460>)
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f000 fea3 	bl	8003f00 <I2C_WaitOnFlagUntilTimeout>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e09d      	b.n	8003300 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	691a      	ldr	r2, [r3, #16]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031de:	b2d2      	uxtb	r2, r2
 80031e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e6:	1c5a      	adds	r2, r3, #1
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031f0:	3b01      	subs	r3, #1
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	3b01      	subs	r3, #1
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	691a      	ldr	r2, [r3, #16]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003210:	b2d2      	uxtb	r2, r2
 8003212:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003218:	1c5a      	adds	r2, r3, #1
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003222:	3b01      	subs	r3, #1
 8003224:	b29a      	uxth	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800322e:	b29b      	uxth	r3, r3
 8003230:	3b01      	subs	r3, #1
 8003232:	b29a      	uxth	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003238:	e04e      	b.n	80032d8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800323a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800323c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f001 f808 	bl	8004254 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e058      	b.n	8003300 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	691a      	ldr	r2, [r3, #16]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003260:	1c5a      	adds	r2, r3, #1
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800326a:	3b01      	subs	r3, #1
 800326c:	b29a      	uxth	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003276:	b29b      	uxth	r3, r3
 8003278:	3b01      	subs	r3, #1
 800327a:	b29a      	uxth	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	f003 0304 	and.w	r3, r3, #4
 800328a:	2b04      	cmp	r3, #4
 800328c:	d124      	bne.n	80032d8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003292:	2b03      	cmp	r3, #3
 8003294:	d107      	bne.n	80032a6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032a4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	691a      	ldr	r2, [r3, #16]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b0:	b2d2      	uxtb	r2, r2
 80032b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b8:	1c5a      	adds	r2, r3, #1
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032c2:	3b01      	subs	r3, #1
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f47f aeb6 	bne.w	800304e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2220      	movs	r2, #32
 80032e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80032fa:	2300      	movs	r3, #0
 80032fc:	e000      	b.n	8003300 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80032fe:	2302      	movs	r3, #2
  }
}
 8003300:	4618      	mov	r0, r3
 8003302:	3728      	adds	r7, #40	@ 0x28
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	00010004 	.word	0x00010004

0800330c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b088      	sub	sp, #32
 8003310:	af02      	add	r7, sp, #8
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	4608      	mov	r0, r1
 8003316:	4611      	mov	r1, r2
 8003318:	461a      	mov	r2, r3
 800331a:	4603      	mov	r3, r0
 800331c:	817b      	strh	r3, [r7, #10]
 800331e:	460b      	mov	r3, r1
 8003320:	813b      	strh	r3, [r7, #8]
 8003322:	4613      	mov	r3, r2
 8003324:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003326:	f7fe fa3d 	bl	80017a4 <HAL_GetTick>
 800332a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b20      	cmp	r3, #32
 8003336:	f040 80d9 	bne.w	80034ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	2319      	movs	r3, #25
 8003340:	2201      	movs	r2, #1
 8003342:	496d      	ldr	r1, [pc, #436]	@ (80034f8 <HAL_I2C_Mem_Write+0x1ec>)
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f000 fddb 	bl	8003f00 <I2C_WaitOnFlagUntilTimeout>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003350:	2302      	movs	r3, #2
 8003352:	e0cc      	b.n	80034ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800335a:	2b01      	cmp	r3, #1
 800335c:	d101      	bne.n	8003362 <HAL_I2C_Mem_Write+0x56>
 800335e:	2302      	movs	r3, #2
 8003360:	e0c5      	b.n	80034ee <HAL_I2C_Mem_Write+0x1e2>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b01      	cmp	r3, #1
 8003376:	d007      	beq.n	8003388 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0201 	orr.w	r2, r2, #1
 8003386:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003396:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2221      	movs	r2, #33	@ 0x21
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2240      	movs	r2, #64	@ 0x40
 80033a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6a3a      	ldr	r2, [r7, #32]
 80033b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80033b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033be:	b29a      	uxth	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4a4d      	ldr	r2, [pc, #308]	@ (80034fc <HAL_I2C_Mem_Write+0x1f0>)
 80033c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033ca:	88f8      	ldrh	r0, [r7, #6]
 80033cc:	893a      	ldrh	r2, [r7, #8]
 80033ce:	8979      	ldrh	r1, [r7, #10]
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	9301      	str	r3, [sp, #4]
 80033d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	4603      	mov	r3, r0
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 fc12 	bl	8003c04 <I2C_RequestMemoryWrite>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d052      	beq.n	800348c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e081      	b.n	80034ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f000 fea0 	bl	8004134 <I2C_WaitOnTXEFlagUntilTimeout>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00d      	beq.n	8003416 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d107      	bne.n	8003412 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003410:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e06b      	b.n	80034ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341a:	781a      	ldrb	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003426:	1c5a      	adds	r2, r3, #1
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003430:	3b01      	subs	r3, #1
 8003432:	b29a      	uxth	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800343c:	b29b      	uxth	r3, r3
 800343e:	3b01      	subs	r3, #1
 8003440:	b29a      	uxth	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b04      	cmp	r3, #4
 8003452:	d11b      	bne.n	800348c <HAL_I2C_Mem_Write+0x180>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003458:	2b00      	cmp	r3, #0
 800345a:	d017      	beq.n	800348c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003460:	781a      	ldrb	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346c:	1c5a      	adds	r2, r3, #1
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003476:	3b01      	subs	r3, #1
 8003478:	b29a      	uxth	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003482:	b29b      	uxth	r3, r3
 8003484:	3b01      	subs	r3, #1
 8003486:	b29a      	uxth	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1aa      	bne.n	80033ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 fe93 	bl	80041c4 <I2C_WaitOnBTFFlagUntilTimeout>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00d      	beq.n	80034c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a8:	2b04      	cmp	r3, #4
 80034aa:	d107      	bne.n	80034bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e016      	b.n	80034ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2220      	movs	r2, #32
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80034e8:	2300      	movs	r3, #0
 80034ea:	e000      	b.n	80034ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80034ec:	2302      	movs	r3, #2
  }
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3718      	adds	r7, #24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	00100002 	.word	0x00100002
 80034fc:	ffff0000 	.word	0xffff0000

08003500 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b08c      	sub	sp, #48	@ 0x30
 8003504:	af02      	add	r7, sp, #8
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	4608      	mov	r0, r1
 800350a:	4611      	mov	r1, r2
 800350c:	461a      	mov	r2, r3
 800350e:	4603      	mov	r3, r0
 8003510:	817b      	strh	r3, [r7, #10]
 8003512:	460b      	mov	r3, r1
 8003514:	813b      	strh	r3, [r7, #8]
 8003516:	4613      	mov	r3, r2
 8003518:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800351a:	f7fe f943 	bl	80017a4 <HAL_GetTick>
 800351e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b20      	cmp	r3, #32
 800352a:	f040 8214 	bne.w	8003956 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800352e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	2319      	movs	r3, #25
 8003534:	2201      	movs	r2, #1
 8003536:	497b      	ldr	r1, [pc, #492]	@ (8003724 <HAL_I2C_Mem_Read+0x224>)
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 fce1 	bl	8003f00 <I2C_WaitOnFlagUntilTimeout>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003544:	2302      	movs	r3, #2
 8003546:	e207      	b.n	8003958 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800354e:	2b01      	cmp	r3, #1
 8003550:	d101      	bne.n	8003556 <HAL_I2C_Mem_Read+0x56>
 8003552:	2302      	movs	r3, #2
 8003554:	e200      	b.n	8003958 <HAL_I2C_Mem_Read+0x458>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b01      	cmp	r3, #1
 800356a:	d007      	beq.n	800357c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f042 0201 	orr.w	r2, r2, #1
 800357a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800358a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2222      	movs	r2, #34	@ 0x22
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2240      	movs	r2, #64	@ 0x40
 8003598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80035ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4a5b      	ldr	r2, [pc, #364]	@ (8003728 <HAL_I2C_Mem_Read+0x228>)
 80035bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035be:	88f8      	ldrh	r0, [r7, #6]
 80035c0:	893a      	ldrh	r2, [r7, #8]
 80035c2:	8979      	ldrh	r1, [r7, #10]
 80035c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c6:	9301      	str	r3, [sp, #4]
 80035c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	4603      	mov	r3, r0
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 fbae 	bl	8003d30 <I2C_RequestMemoryRead>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e1bc      	b.n	8003958 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d113      	bne.n	800360e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035e6:	2300      	movs	r3, #0
 80035e8:	623b      	str	r3, [r7, #32]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	623b      	str	r3, [r7, #32]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	623b      	str	r3, [r7, #32]
 80035fa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	e190      	b.n	8003930 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003612:	2b01      	cmp	r3, #1
 8003614:	d11b      	bne.n	800364e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003624:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003626:	2300      	movs	r3, #0
 8003628:	61fb      	str	r3, [r7, #28]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	61fb      	str	r3, [r7, #28]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	61fb      	str	r3, [r7, #28]
 800363a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	e170      	b.n	8003930 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003652:	2b02      	cmp	r3, #2
 8003654:	d11b      	bne.n	800368e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003664:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003674:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003676:	2300      	movs	r3, #0
 8003678:	61bb      	str	r3, [r7, #24]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	61bb      	str	r3, [r7, #24]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	61bb      	str	r3, [r7, #24]
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	e150      	b.n	8003930 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800368e:	2300      	movs	r3, #0
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	617b      	str	r3, [r7, #20]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	617b      	str	r3, [r7, #20]
 80036a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80036a4:	e144      	b.n	8003930 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036aa:	2b03      	cmp	r3, #3
 80036ac:	f200 80f1 	bhi.w	8003892 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d123      	bne.n	8003700 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036ba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 fdc9 	bl	8004254 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e145      	b.n	8003958 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	691a      	ldr	r2, [r3, #16]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036de:	1c5a      	adds	r2, r3, #1
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e8:	3b01      	subs	r3, #1
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	3b01      	subs	r3, #1
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80036fe:	e117      	b.n	8003930 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003704:	2b02      	cmp	r3, #2
 8003706:	d14e      	bne.n	80037a6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800370e:	2200      	movs	r2, #0
 8003710:	4906      	ldr	r1, [pc, #24]	@ (800372c <HAL_I2C_Mem_Read+0x22c>)
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 fbf4 	bl	8003f00 <I2C_WaitOnFlagUntilTimeout>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d008      	beq.n	8003730 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e11a      	b.n	8003958 <HAL_I2C_Mem_Read+0x458>
 8003722:	bf00      	nop
 8003724:	00100002 	.word	0x00100002
 8003728:	ffff0000 	.word	0xffff0000
 800372c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800373e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	691a      	ldr	r2, [r3, #16]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003752:	1c5a      	adds	r2, r3, #1
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800375c:	3b01      	subs	r3, #1
 800375e:	b29a      	uxth	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003768:	b29b      	uxth	r3, r3
 800376a:	3b01      	subs	r3, #1
 800376c:	b29a      	uxth	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	691a      	ldr	r2, [r3, #16]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377c:	b2d2      	uxtb	r2, r2
 800377e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003784:	1c5a      	adds	r2, r3, #1
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800378e:	3b01      	subs	r3, #1
 8003790:	b29a      	uxth	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800379a:	b29b      	uxth	r3, r3
 800379c:	3b01      	subs	r3, #1
 800379e:	b29a      	uxth	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80037a4:	e0c4      	b.n	8003930 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ac:	2200      	movs	r2, #0
 80037ae:	496c      	ldr	r1, [pc, #432]	@ (8003960 <HAL_I2C_Mem_Read+0x460>)
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f000 fba5 	bl	8003f00 <I2C_WaitOnFlagUntilTimeout>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e0cb      	b.n	8003958 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	691a      	ldr	r2, [r3, #16]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037da:	b2d2      	uxtb	r2, r2
 80037dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e2:	1c5a      	adds	r2, r3, #1
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	3b01      	subs	r3, #1
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003808:	2200      	movs	r2, #0
 800380a:	4955      	ldr	r1, [pc, #340]	@ (8003960 <HAL_I2C_Mem_Read+0x460>)
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 fb77 	bl	8003f00 <I2C_WaitOnFlagUntilTimeout>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e09d      	b.n	8003958 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800382a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	691a      	ldr	r2, [r3, #16]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383e:	1c5a      	adds	r2, r3, #1
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003848:	3b01      	subs	r3, #1
 800384a:	b29a      	uxth	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003854:	b29b      	uxth	r3, r3
 8003856:	3b01      	subs	r3, #1
 8003858:	b29a      	uxth	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800387a:	3b01      	subs	r3, #1
 800387c:	b29a      	uxth	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003886:	b29b      	uxth	r3, r3
 8003888:	3b01      	subs	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003890:	e04e      	b.n	8003930 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003892:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003894:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 fcdc 	bl	8004254 <I2C_WaitOnRXNEFlagUntilTimeout>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e058      	b.n	8003958 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	691a      	ldr	r2, [r3, #16]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b0:	b2d2      	uxtb	r2, r2
 80038b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038c2:	3b01      	subs	r3, #1
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	f003 0304 	and.w	r3, r3, #4
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d124      	bne.n	8003930 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ea:	2b03      	cmp	r3, #3
 80038ec:	d107      	bne.n	80038fe <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038fc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	691a      	ldr	r2, [r3, #16]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003910:	1c5a      	adds	r2, r3, #1
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800391a:	3b01      	subs	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003926:	b29b      	uxth	r3, r3
 8003928:	3b01      	subs	r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003934:	2b00      	cmp	r3, #0
 8003936:	f47f aeb6 	bne.w	80036a6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2220      	movs	r2, #32
 800393e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003952:	2300      	movs	r3, #0
 8003954:	e000      	b.n	8003958 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003956:	2302      	movs	r3, #2
  }
}
 8003958:	4618      	mov	r0, r3
 800395a:	3728      	adds	r7, #40	@ 0x28
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	00010004 	.word	0x00010004

08003964 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b088      	sub	sp, #32
 8003968:	af02      	add	r7, sp, #8
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	607a      	str	r2, [r7, #4]
 800396e:	603b      	str	r3, [r7, #0]
 8003970:	460b      	mov	r3, r1
 8003972:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003978:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2b08      	cmp	r3, #8
 800397e:	d006      	beq.n	800398e <I2C_MasterRequestWrite+0x2a>
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d003      	beq.n	800398e <I2C_MasterRequestWrite+0x2a>
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800398c:	d108      	bne.n	80039a0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	e00b      	b.n	80039b8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a4:	2b12      	cmp	r3, #18
 80039a6:	d107      	bne.n	80039b8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 fa9b 	bl	8003f00 <I2C_WaitOnFlagUntilTimeout>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00d      	beq.n	80039ec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039de:	d103      	bne.n	80039e8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e035      	b.n	8003a58 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039f4:	d108      	bne.n	8003a08 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039f6:	897b      	ldrh	r3, [r7, #10]
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	461a      	mov	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a04:	611a      	str	r2, [r3, #16]
 8003a06:	e01b      	b.n	8003a40 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a08:	897b      	ldrh	r3, [r7, #10]
 8003a0a:	11db      	asrs	r3, r3, #7
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	f003 0306 	and.w	r3, r3, #6
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	f063 030f 	orn	r3, r3, #15
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	490e      	ldr	r1, [pc, #56]	@ (8003a60 <I2C_MasterRequestWrite+0xfc>)
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f000 fae4 	bl	8003ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e010      	b.n	8003a58 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a36:	897b      	ldrh	r3, [r7, #10]
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	4907      	ldr	r1, [pc, #28]	@ (8003a64 <I2C_MasterRequestWrite+0x100>)
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 fad4 	bl	8003ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e000      	b.n	8003a58 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3718      	adds	r7, #24
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	00010008 	.word	0x00010008
 8003a64:	00010002 	.word	0x00010002

08003a68 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b088      	sub	sp, #32
 8003a6c:	af02      	add	r7, sp, #8
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	607a      	str	r2, [r7, #4]
 8003a72:	603b      	str	r3, [r7, #0]
 8003a74:	460b      	mov	r3, r1
 8003a76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a8c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	d006      	beq.n	8003aa2 <I2C_MasterRequestRead+0x3a>
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d003      	beq.n	8003aa2 <I2C_MasterRequestRead+0x3a>
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003aa0:	d108      	bne.n	8003ab4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	e00b      	b.n	8003acc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab8:	2b11      	cmp	r3, #17
 8003aba:	d107      	bne.n	8003acc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003aca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f000 fa11 	bl	8003f00 <I2C_WaitOnFlagUntilTimeout>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00d      	beq.n	8003b00 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003af2:	d103      	bne.n	8003afc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003afa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e079      	b.n	8003bf4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b08:	d108      	bne.n	8003b1c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b0a:	897b      	ldrh	r3, [r7, #10]
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	f043 0301 	orr.w	r3, r3, #1
 8003b12:	b2da      	uxtb	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	611a      	str	r2, [r3, #16]
 8003b1a:	e05f      	b.n	8003bdc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b1c:	897b      	ldrh	r3, [r7, #10]
 8003b1e:	11db      	asrs	r3, r3, #7
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	f003 0306 	and.w	r3, r3, #6
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	f063 030f 	orn	r3, r3, #15
 8003b2c:	b2da      	uxtb	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	4930      	ldr	r1, [pc, #192]	@ (8003bfc <I2C_MasterRequestRead+0x194>)
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 fa5a 	bl	8003ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e054      	b.n	8003bf4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b4a:	897b      	ldrh	r3, [r7, #10]
 8003b4c:	b2da      	uxtb	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	4929      	ldr	r1, [pc, #164]	@ (8003c00 <I2C_MasterRequestRead+0x198>)
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f000 fa4a 	bl	8003ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e044      	b.n	8003bf4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	613b      	str	r3, [r7, #16]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	613b      	str	r3, [r7, #16]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	613b      	str	r3, [r7, #16]
 8003b7e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b8e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 f9af 	bl	8003f00 <I2C_WaitOnFlagUntilTimeout>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00d      	beq.n	8003bc4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bb6:	d103      	bne.n	8003bc0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bbe:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e017      	b.n	8003bf4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003bc4:	897b      	ldrh	r3, [r7, #10]
 8003bc6:	11db      	asrs	r3, r3, #7
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	f003 0306 	and.w	r3, r3, #6
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	f063 030e 	orn	r3, r3, #14
 8003bd4:	b2da      	uxtb	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	4907      	ldr	r1, [pc, #28]	@ (8003c00 <I2C_MasterRequestRead+0x198>)
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f000 fa06 	bl	8003ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e000      	b.n	8003bf4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3718      	adds	r7, #24
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	00010008 	.word	0x00010008
 8003c00:	00010002 	.word	0x00010002

08003c04 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b088      	sub	sp, #32
 8003c08:	af02      	add	r7, sp, #8
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	4608      	mov	r0, r1
 8003c0e:	4611      	mov	r1, r2
 8003c10:	461a      	mov	r2, r3
 8003c12:	4603      	mov	r3, r0
 8003c14:	817b      	strh	r3, [r7, #10]
 8003c16:	460b      	mov	r3, r1
 8003c18:	813b      	strh	r3, [r7, #8]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f000 f960 	bl	8003f00 <I2C_WaitOnFlagUntilTimeout>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00d      	beq.n	8003c62 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c54:	d103      	bne.n	8003c5e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c5c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e05f      	b.n	8003d22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c62:	897b      	ldrh	r3, [r7, #10]
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	461a      	mov	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c74:	6a3a      	ldr	r2, [r7, #32]
 8003c76:	492d      	ldr	r1, [pc, #180]	@ (8003d2c <I2C_RequestMemoryWrite+0x128>)
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 f9bb 	bl	8003ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e04c      	b.n	8003d22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c88:	2300      	movs	r3, #0
 8003c8a:	617b      	str	r3, [r7, #20]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ca0:	6a39      	ldr	r1, [r7, #32]
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f000 fa46 	bl	8004134 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00d      	beq.n	8003cca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb2:	2b04      	cmp	r3, #4
 8003cb4:	d107      	bne.n	8003cc6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cc4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e02b      	b.n	8003d22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cca:	88fb      	ldrh	r3, [r7, #6]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d105      	bne.n	8003cdc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cd0:	893b      	ldrh	r3, [r7, #8]
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	611a      	str	r2, [r3, #16]
 8003cda:	e021      	b.n	8003d20 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003cdc:	893b      	ldrh	r3, [r7, #8]
 8003cde:	0a1b      	lsrs	r3, r3, #8
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cec:	6a39      	ldr	r1, [r7, #32]
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f000 fa20 	bl	8004134 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00d      	beq.n	8003d16 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	d107      	bne.n	8003d12 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e005      	b.n	8003d22 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d16:	893b      	ldrh	r3, [r7, #8]
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3718      	adds	r7, #24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	00010002 	.word	0x00010002

08003d30 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b088      	sub	sp, #32
 8003d34:	af02      	add	r7, sp, #8
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	4608      	mov	r0, r1
 8003d3a:	4611      	mov	r1, r2
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	4603      	mov	r3, r0
 8003d40:	817b      	strh	r3, [r7, #10]
 8003d42:	460b      	mov	r3, r1
 8003d44:	813b      	strh	r3, [r7, #8]
 8003d46:	4613      	mov	r3, r2
 8003d48:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d58:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	6a3b      	ldr	r3, [r7, #32]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f000 f8c2 	bl	8003f00 <I2C_WaitOnFlagUntilTimeout>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00d      	beq.n	8003d9e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d90:	d103      	bne.n	8003d9a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d98:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e0aa      	b.n	8003ef4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d9e:	897b      	ldrh	r3, [r7, #10]
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	461a      	mov	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003dac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db0:	6a3a      	ldr	r2, [r7, #32]
 8003db2:	4952      	ldr	r1, [pc, #328]	@ (8003efc <I2C_RequestMemoryRead+0x1cc>)
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f000 f91d 	bl	8003ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e097      	b.n	8003ef4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	617b      	str	r3, [r7, #20]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	617b      	str	r3, [r7, #20]
 8003dd8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ddc:	6a39      	ldr	r1, [r7, #32]
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f000 f9a8 	bl	8004134 <I2C_WaitOnTXEFlagUntilTimeout>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00d      	beq.n	8003e06 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dee:	2b04      	cmp	r3, #4
 8003df0:	d107      	bne.n	8003e02 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e076      	b.n	8003ef4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e06:	88fb      	ldrh	r3, [r7, #6]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d105      	bne.n	8003e18 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e0c:	893b      	ldrh	r3, [r7, #8]
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	611a      	str	r2, [r3, #16]
 8003e16:	e021      	b.n	8003e5c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e18:	893b      	ldrh	r3, [r7, #8]
 8003e1a:	0a1b      	lsrs	r3, r3, #8
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e28:	6a39      	ldr	r1, [r7, #32]
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f000 f982 	bl	8004134 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00d      	beq.n	8003e52 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	d107      	bne.n	8003e4e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e050      	b.n	8003ef4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e52:	893b      	ldrh	r3, [r7, #8]
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e5e:	6a39      	ldr	r1, [r7, #32]
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f000 f967 	bl	8004134 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00d      	beq.n	8003e88 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e70:	2b04      	cmp	r3, #4
 8003e72:	d107      	bne.n	8003e84 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e82:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e035      	b.n	8003ef4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e96:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f000 f82b 	bl	8003f00 <I2C_WaitOnFlagUntilTimeout>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00d      	beq.n	8003ecc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ebe:	d103      	bne.n	8003ec8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ec6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e013      	b.n	8003ef4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ecc:	897b      	ldrh	r3, [r7, #10]
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	f043 0301 	orr.w	r3, r3, #1
 8003ed4:	b2da      	uxtb	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ede:	6a3a      	ldr	r2, [r7, #32]
 8003ee0:	4906      	ldr	r1, [pc, #24]	@ (8003efc <I2C_RequestMemoryRead+0x1cc>)
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 f886 	bl	8003ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e000      	b.n	8003ef4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3718      	adds	r7, #24
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	00010002 	.word	0x00010002

08003f00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	603b      	str	r3, [r7, #0]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f10:	e048      	b.n	8003fa4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f18:	d044      	beq.n	8003fa4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f1a:	f7fd fc43 	bl	80017a4 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d302      	bcc.n	8003f30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d139      	bne.n	8003fa4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	0c1b      	lsrs	r3, r3, #16
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d10d      	bne.n	8003f56 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	43da      	mvns	r2, r3
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	4013      	ands	r3, r2
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	bf0c      	ite	eq
 8003f4c:	2301      	moveq	r3, #1
 8003f4e:	2300      	movne	r3, #0
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	461a      	mov	r2, r3
 8003f54:	e00c      	b.n	8003f70 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	43da      	mvns	r2, r3
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	4013      	ands	r3, r2
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	bf0c      	ite	eq
 8003f68:	2301      	moveq	r3, #1
 8003f6a:	2300      	movne	r3, #0
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	461a      	mov	r2, r3
 8003f70:	79fb      	ldrb	r3, [r7, #7]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d116      	bne.n	8003fa4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f90:	f043 0220 	orr.w	r2, r3, #32
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e023      	b.n	8003fec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	0c1b      	lsrs	r3, r3, #16
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d10d      	bne.n	8003fca <I2C_WaitOnFlagUntilTimeout+0xca>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	43da      	mvns	r2, r3
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	bf0c      	ite	eq
 8003fc0:	2301      	moveq	r3, #1
 8003fc2:	2300      	movne	r3, #0
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	e00c      	b.n	8003fe4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	43da      	mvns	r2, r3
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	bf0c      	ite	eq
 8003fdc:	2301      	moveq	r3, #1
 8003fde:	2300      	movne	r3, #0
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	79fb      	ldrb	r3, [r7, #7]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d093      	beq.n	8003f12 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
 8004000:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004002:	e071      	b.n	80040e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800400e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004012:	d123      	bne.n	800405c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004022:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800402c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2220      	movs	r2, #32
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004048:	f043 0204 	orr.w	r2, r3, #4
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e067      	b.n	800412c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004062:	d041      	beq.n	80040e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004064:	f7fd fb9e 	bl	80017a4 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	429a      	cmp	r2, r3
 8004072:	d302      	bcc.n	800407a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d136      	bne.n	80040e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	0c1b      	lsrs	r3, r3, #16
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b01      	cmp	r3, #1
 8004082:	d10c      	bne.n	800409e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	43da      	mvns	r2, r3
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	4013      	ands	r3, r2
 8004090:	b29b      	uxth	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	bf14      	ite	ne
 8004096:	2301      	movne	r3, #1
 8004098:	2300      	moveq	r3, #0
 800409a:	b2db      	uxtb	r3, r3
 800409c:	e00b      	b.n	80040b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	43da      	mvns	r2, r3
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	4013      	ands	r3, r2
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	bf14      	ite	ne
 80040b0:	2301      	movne	r3, #1
 80040b2:	2300      	moveq	r3, #0
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d016      	beq.n	80040e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2220      	movs	r2, #32
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d4:	f043 0220 	orr.w	r2, r3, #32
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e021      	b.n	800412c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	0c1b      	lsrs	r3, r3, #16
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d10c      	bne.n	800410c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	43da      	mvns	r2, r3
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	4013      	ands	r3, r2
 80040fe:	b29b      	uxth	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	bf14      	ite	ne
 8004104:	2301      	movne	r3, #1
 8004106:	2300      	moveq	r3, #0
 8004108:	b2db      	uxtb	r3, r3
 800410a:	e00b      	b.n	8004124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	43da      	mvns	r2, r3
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	4013      	ands	r3, r2
 8004118:	b29b      	uxth	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	bf14      	ite	ne
 800411e:	2301      	movne	r3, #1
 8004120:	2300      	moveq	r3, #0
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b00      	cmp	r3, #0
 8004126:	f47f af6d 	bne.w	8004004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004140:	e034      	b.n	80041ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f000 f8e3 	bl	800430e <I2C_IsAcknowledgeFailed>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e034      	b.n	80041bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004158:	d028      	beq.n	80041ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800415a:	f7fd fb23 	bl	80017a4 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	429a      	cmp	r2, r3
 8004168:	d302      	bcc.n	8004170 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d11d      	bne.n	80041ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800417a:	2b80      	cmp	r3, #128	@ 0x80
 800417c:	d016      	beq.n	80041ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2220      	movs	r2, #32
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004198:	f043 0220 	orr.w	r2, r3, #32
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e007      	b.n	80041bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041b6:	2b80      	cmp	r3, #128	@ 0x80
 80041b8:	d1c3      	bne.n	8004142 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041d0:	e034      	b.n	800423c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f000 f89b 	bl	800430e <I2C_IsAcknowledgeFailed>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e034      	b.n	800424c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e8:	d028      	beq.n	800423c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ea:	f7fd fadb 	bl	80017a4 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d302      	bcc.n	8004200 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d11d      	bne.n	800423c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	f003 0304 	and.w	r3, r3, #4
 800420a:	2b04      	cmp	r3, #4
 800420c:	d016      	beq.n	800423c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2220      	movs	r2, #32
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004228:	f043 0220 	orr.w	r2, r3, #32
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e007      	b.n	800424c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	f003 0304 	and.w	r3, r3, #4
 8004246:	2b04      	cmp	r3, #4
 8004248:	d1c3      	bne.n	80041d2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004260:	e049      	b.n	80042f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	f003 0310 	and.w	r3, r3, #16
 800426c:	2b10      	cmp	r3, #16
 800426e:	d119      	bne.n	80042a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f06f 0210 	mvn.w	r2, #16
 8004278:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2220      	movs	r2, #32
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e030      	b.n	8004306 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a4:	f7fd fa7e 	bl	80017a4 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d302      	bcc.n	80042ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d11d      	bne.n	80042f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042c4:	2b40      	cmp	r3, #64	@ 0x40
 80042c6:	d016      	beq.n	80042f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2220      	movs	r2, #32
 80042d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e2:	f043 0220 	orr.w	r2, r3, #32
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e007      	b.n	8004306 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004300:	2b40      	cmp	r3, #64	@ 0x40
 8004302:	d1ae      	bne.n	8004262 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800430e:	b480      	push	{r7}
 8004310:	b083      	sub	sp, #12
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004320:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004324:	d11b      	bne.n	800435e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800432e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2220      	movs	r2, #32
 800433a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434a:	f043 0204 	orr.w	r2, r3, #4
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e000      	b.n	8004360 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b088      	sub	sp, #32
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e128      	b.n	80045d0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d109      	bne.n	800439e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a90      	ldr	r2, [pc, #576]	@ (80045d8 <HAL_I2S_Init+0x26c>)
 8004396:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f7fc fd0d 	bl	8000db8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2202      	movs	r2, #2
 80043a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	69db      	ldr	r3, [r3, #28]
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	6812      	ldr	r2, [r2, #0]
 80043b0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80043b4:	f023 030f 	bic.w	r3, r3, #15
 80043b8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2202      	movs	r2, #2
 80043c0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d060      	beq.n	800448c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d102      	bne.n	80043d8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80043d2:	2310      	movs	r3, #16
 80043d4:	617b      	str	r3, [r7, #20]
 80043d6:	e001      	b.n	80043dc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80043d8:	2320      	movs	r3, #32
 80043da:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	2b20      	cmp	r3, #32
 80043e2:	d802      	bhi.n	80043ea <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80043ea:	2001      	movs	r0, #1
 80043ec:	f001 fa00 	bl	80057f0 <HAL_RCCEx_GetPeriphCLKFreq>
 80043f0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043fa:	d125      	bne.n	8004448 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d010      	beq.n	8004426 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	fbb2 f2f3 	udiv	r2, r2, r3
 800440e:	4613      	mov	r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	4413      	add	r3, r2
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	461a      	mov	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004420:	3305      	adds	r3, #5
 8004422:	613b      	str	r3, [r7, #16]
 8004424:	e01f      	b.n	8004466 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004430:	4613      	mov	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	461a      	mov	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004442:	3305      	adds	r3, #5
 8004444:	613b      	str	r3, [r7, #16]
 8004446:	e00e      	b.n	8004466 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004450:	4613      	mov	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	005b      	lsls	r3, r3, #1
 8004458:	461a      	mov	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004462:	3305      	adds	r3, #5
 8004464:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	4a5c      	ldr	r2, [pc, #368]	@ (80045dc <HAL_I2S_Init+0x270>)
 800446a:	fba2 2303 	umull	r2, r3, r2, r3
 800446e:	08db      	lsrs	r3, r3, #3
 8004470:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	085b      	lsrs	r3, r3, #1
 8004482:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	021b      	lsls	r3, r3, #8
 8004488:	61bb      	str	r3, [r7, #24]
 800448a:	e003      	b.n	8004494 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800448c:	2302      	movs	r3, #2
 800448e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004490:	2300      	movs	r3, #0
 8004492:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d902      	bls.n	80044a0 <HAL_I2S_Init+0x134>
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	2bff      	cmp	r3, #255	@ 0xff
 800449e:	d907      	bls.n	80044b0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044a4:	f043 0210 	orr.w	r2, r3, #16
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e08f      	b.n	80045d0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691a      	ldr	r2, [r3, #16]
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	ea42 0103 	orr.w	r1, r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	69fa      	ldr	r2, [r7, #28]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80044ce:	f023 030f 	bic.w	r3, r3, #15
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	6851      	ldr	r1, [r2, #4]
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	6892      	ldr	r2, [r2, #8]
 80044da:	4311      	orrs	r1, r2
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	68d2      	ldr	r2, [r2, #12]
 80044e0:	4311      	orrs	r1, r2
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	6992      	ldr	r2, [r2, #24]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	431a      	orrs	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044f2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a1b      	ldr	r3, [r3, #32]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d161      	bne.n	80045c0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a38      	ldr	r2, [pc, #224]	@ (80045e0 <HAL_I2S_Init+0x274>)
 8004500:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a37      	ldr	r2, [pc, #220]	@ (80045e4 <HAL_I2S_Init+0x278>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d101      	bne.n	8004510 <HAL_I2S_Init+0x1a4>
 800450c:	4b36      	ldr	r3, [pc, #216]	@ (80045e8 <HAL_I2S_Init+0x27c>)
 800450e:	e001      	b.n	8004514 <HAL_I2S_Init+0x1a8>
 8004510:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	6812      	ldr	r2, [r2, #0]
 800451a:	4932      	ldr	r1, [pc, #200]	@ (80045e4 <HAL_I2S_Init+0x278>)
 800451c:	428a      	cmp	r2, r1
 800451e:	d101      	bne.n	8004524 <HAL_I2S_Init+0x1b8>
 8004520:	4a31      	ldr	r2, [pc, #196]	@ (80045e8 <HAL_I2S_Init+0x27c>)
 8004522:	e001      	b.n	8004528 <HAL_I2S_Init+0x1bc>
 8004524:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004528:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800452c:	f023 030f 	bic.w	r3, r3, #15
 8004530:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a2b      	ldr	r2, [pc, #172]	@ (80045e4 <HAL_I2S_Init+0x278>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d101      	bne.n	8004540 <HAL_I2S_Init+0x1d4>
 800453c:	4b2a      	ldr	r3, [pc, #168]	@ (80045e8 <HAL_I2S_Init+0x27c>)
 800453e:	e001      	b.n	8004544 <HAL_I2S_Init+0x1d8>
 8004540:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004544:	2202      	movs	r2, #2
 8004546:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a25      	ldr	r2, [pc, #148]	@ (80045e4 <HAL_I2S_Init+0x278>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d101      	bne.n	8004556 <HAL_I2S_Init+0x1ea>
 8004552:	4b25      	ldr	r3, [pc, #148]	@ (80045e8 <HAL_I2S_Init+0x27c>)
 8004554:	e001      	b.n	800455a <HAL_I2S_Init+0x1ee>
 8004556:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800455a:	69db      	ldr	r3, [r3, #28]
 800455c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004566:	d003      	beq.n	8004570 <HAL_I2S_Init+0x204>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d103      	bne.n	8004578 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004570:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004574:	613b      	str	r3, [r7, #16]
 8004576:	e001      	b.n	800457c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004578:	2300      	movs	r3, #0
 800457a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004586:	4313      	orrs	r3, r2
 8004588:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004590:	4313      	orrs	r3, r2
 8004592:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800459a:	4313      	orrs	r3, r2
 800459c:	b29a      	uxth	r2, r3
 800459e:	897b      	ldrh	r3, [r7, #10]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80045a8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a0d      	ldr	r2, [pc, #52]	@ (80045e4 <HAL_I2S_Init+0x278>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d101      	bne.n	80045b8 <HAL_I2S_Init+0x24c>
 80045b4:	4b0c      	ldr	r3, [pc, #48]	@ (80045e8 <HAL_I2S_Init+0x27c>)
 80045b6:	e001      	b.n	80045bc <HAL_I2S_Init+0x250>
 80045b8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045bc:	897a      	ldrh	r2, [r7, #10]
 80045be:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3720      	adds	r7, #32
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	080046cf 	.word	0x080046cf
 80045dc:	cccccccd 	.word	0xcccccccd
 80045e0:	080047e5 	.word	0x080047e5
 80045e4:	40003800 	.word	0x40003800
 80045e8:	40003400 	.word	0x40003400

080045ec <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004620:	881a      	ldrh	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462c:	1c9a      	adds	r2, r3, #2
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004636:	b29b      	uxth	r3, r3
 8004638:	3b01      	subs	r3, #1
 800463a:	b29a      	uxth	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004644:	b29b      	uxth	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10e      	bne.n	8004668 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004658:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f005 fcaa 	bl	8009fbc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004668:	bf00      	nop
 800466a:	3708      	adds	r7, #8
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68da      	ldr	r2, [r3, #12]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004682:	b292      	uxth	r2, r2
 8004684:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800468a:	1c9a      	adds	r2, r3, #2
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004694:	b29b      	uxth	r3, r3
 8004696:	3b01      	subs	r3, #1
 8004698:	b29a      	uxth	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10e      	bne.n	80046c6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80046b6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f7ff ff93 	bl	80045ec <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80046c6:	bf00      	nop
 80046c8:	3708      	adds	r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b086      	sub	sp, #24
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	d13a      	bne.n	8004760 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d109      	bne.n	8004708 <I2S_IRQHandler+0x3a>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046fe:	2b40      	cmp	r3, #64	@ 0x40
 8004700:	d102      	bne.n	8004708 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7ff ffb4 	bl	8004670 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800470e:	2b40      	cmp	r3, #64	@ 0x40
 8004710:	d126      	bne.n	8004760 <I2S_IRQHandler+0x92>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f003 0320 	and.w	r3, r3, #32
 800471c:	2b20      	cmp	r3, #32
 800471e:	d11f      	bne.n	8004760 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800472e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004730:	2300      	movs	r3, #0
 8004732:	613b      	str	r3, [r7, #16]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	613b      	str	r3, [r7, #16]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	613b      	str	r3, [r7, #16]
 8004744:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004752:	f043 0202 	orr.w	r2, r3, #2
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7ff ff50 	bl	8004600 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b03      	cmp	r3, #3
 800476a:	d136      	bne.n	80047da <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b02      	cmp	r3, #2
 8004774:	d109      	bne.n	800478a <I2S_IRQHandler+0xbc>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004780:	2b80      	cmp	r3, #128	@ 0x80
 8004782:	d102      	bne.n	800478a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7ff ff45 	bl	8004614 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f003 0308 	and.w	r3, r3, #8
 8004790:	2b08      	cmp	r3, #8
 8004792:	d122      	bne.n	80047da <I2S_IRQHandler+0x10c>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f003 0320 	and.w	r3, r3, #32
 800479e:	2b20      	cmp	r3, #32
 80047a0:	d11b      	bne.n	80047da <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80047b0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80047b2:	2300      	movs	r3, #0
 80047b4:	60fb      	str	r3, [r7, #12]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	60fb      	str	r3, [r7, #12]
 80047be:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047cc:	f043 0204 	orr.w	r2, r3, #4
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f7ff ff13 	bl	8004600 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80047da:	bf00      	nop
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
	...

080047e4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b088      	sub	sp, #32
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a92      	ldr	r2, [pc, #584]	@ (8004a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d101      	bne.n	8004802 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80047fe:	4b92      	ldr	r3, [pc, #584]	@ (8004a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004800:	e001      	b.n	8004806 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004802:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a8b      	ldr	r2, [pc, #556]	@ (8004a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d101      	bne.n	8004820 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800481c:	4b8a      	ldr	r3, [pc, #552]	@ (8004a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800481e:	e001      	b.n	8004824 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004820:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004830:	d004      	beq.n	800483c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	f040 8099 	bne.w	800496e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b02      	cmp	r3, #2
 8004844:	d107      	bne.n	8004856 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f925 	bl	8004aa0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b01      	cmp	r3, #1
 800485e:	d107      	bne.n	8004870 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004866:	2b00      	cmp	r3, #0
 8004868:	d002      	beq.n	8004870 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 f9c8 	bl	8004c00 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004876:	2b40      	cmp	r3, #64	@ 0x40
 8004878:	d13a      	bne.n	80048f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	f003 0320 	and.w	r3, r3, #32
 8004880:	2b00      	cmp	r3, #0
 8004882:	d035      	beq.n	80048f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a6e      	ldr	r2, [pc, #440]	@ (8004a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d101      	bne.n	8004892 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800488e:	4b6e      	ldr	r3, [pc, #440]	@ (8004a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004890:	e001      	b.n	8004896 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004892:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4969      	ldr	r1, [pc, #420]	@ (8004a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800489e:	428b      	cmp	r3, r1
 80048a0:	d101      	bne.n	80048a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80048a2:	4b69      	ldr	r3, [pc, #420]	@ (8004a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048a4:	e001      	b.n	80048aa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80048a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80048aa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80048ae:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	685a      	ldr	r2, [r3, #4]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80048be:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80048c0:	2300      	movs	r3, #0
 80048c2:	60fb      	str	r3, [r7, #12]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	60fb      	str	r3, [r7, #12]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048e2:	f043 0202 	orr.w	r2, r3, #2
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7ff fe88 	bl	8004600 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	f003 0308 	and.w	r3, r3, #8
 80048f6:	2b08      	cmp	r3, #8
 80048f8:	f040 80c3 	bne.w	8004a82 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f003 0320 	and.w	r3, r3, #32
 8004902:	2b00      	cmp	r3, #0
 8004904:	f000 80bd 	beq.w	8004a82 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004916:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a49      	ldr	r2, [pc, #292]	@ (8004a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d101      	bne.n	8004926 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004922:	4b49      	ldr	r3, [pc, #292]	@ (8004a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004924:	e001      	b.n	800492a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004926:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4944      	ldr	r1, [pc, #272]	@ (8004a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004932:	428b      	cmp	r3, r1
 8004934:	d101      	bne.n	800493a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004936:	4b44      	ldr	r3, [pc, #272]	@ (8004a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004938:	e001      	b.n	800493e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800493a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800493e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004942:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004944:	2300      	movs	r3, #0
 8004946:	60bb      	str	r3, [r7, #8]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	60bb      	str	r3, [r7, #8]
 8004950:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800495e:	f043 0204 	orr.w	r2, r3, #4
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7ff fe4a 	bl	8004600 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800496c:	e089      	b.n	8004a82 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b02      	cmp	r3, #2
 8004976:	d107      	bne.n	8004988 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800497e:	2b00      	cmp	r3, #0
 8004980:	d002      	beq.n	8004988 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f8be 	bl	8004b04 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b01      	cmp	r3, #1
 8004990:	d107      	bne.n	80049a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004998:	2b00      	cmp	r3, #0
 800499a:	d002      	beq.n	80049a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 f8fd 	bl	8004b9c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049a8:	2b40      	cmp	r3, #64	@ 0x40
 80049aa:	d12f      	bne.n	8004a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f003 0320 	and.w	r3, r3, #32
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d02a      	beq.n	8004a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80049c4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a1e      	ldr	r2, [pc, #120]	@ (8004a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d101      	bne.n	80049d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80049d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80049d2:	e001      	b.n	80049d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80049d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4919      	ldr	r1, [pc, #100]	@ (8004a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80049e0:	428b      	cmp	r3, r1
 80049e2:	d101      	bne.n	80049e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80049e4:	4b18      	ldr	r3, [pc, #96]	@ (8004a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80049e6:	e001      	b.n	80049ec <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80049e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80049ec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80049f0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049fe:	f043 0202 	orr.w	r2, r3, #2
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7ff fdfa 	bl	8004600 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	f003 0308 	and.w	r3, r3, #8
 8004a12:	2b08      	cmp	r3, #8
 8004a14:	d136      	bne.n	8004a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f003 0320 	and.w	r3, r3, #32
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d031      	beq.n	8004a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a07      	ldr	r2, [pc, #28]	@ (8004a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d101      	bne.n	8004a2e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004a2a:	4b07      	ldr	r3, [pc, #28]	@ (8004a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a2c:	e001      	b.n	8004a32 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004a2e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4902      	ldr	r1, [pc, #8]	@ (8004a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a3a:	428b      	cmp	r3, r1
 8004a3c:	d106      	bne.n	8004a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004a3e:	4b02      	ldr	r3, [pc, #8]	@ (8004a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a40:	e006      	b.n	8004a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004a42:	bf00      	nop
 8004a44:	40003800 	.word	0x40003800
 8004a48:	40003400 	.word	0x40003400
 8004a4c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a50:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004a54:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	685a      	ldr	r2, [r3, #4]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004a64:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a72:	f043 0204 	orr.w	r2, r3, #4
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7ff fdc0 	bl	8004600 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a80:	e000      	b.n	8004a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004a82:	bf00      	nop
}
 8004a84:	bf00      	nop
 8004a86:	3720      	adds	r7, #32
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aac:	1c99      	adds	r1, r3, #2
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	6251      	str	r1, [r2, #36]	@ 0x24
 8004ab2:	881a      	ldrh	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d113      	bne.n	8004afa <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004ae0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d106      	bne.n	8004afa <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f7ff ffc9 	bl	8004a8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004afa:	bf00      	nop
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
	...

08004b04 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b10:	1c99      	adds	r1, r3, #2
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	6251      	str	r1, [r2, #36]	@ 0x24
 8004b16:	8819      	ldrh	r1, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8004b94 <I2SEx_TxISR_I2SExt+0x90>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d101      	bne.n	8004b26 <I2SEx_TxISR_I2SExt+0x22>
 8004b22:	4b1d      	ldr	r3, [pc, #116]	@ (8004b98 <I2SEx_TxISR_I2SExt+0x94>)
 8004b24:	e001      	b.n	8004b2a <I2SEx_TxISR_I2SExt+0x26>
 8004b26:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b2a:	460a      	mov	r2, r1
 8004b2c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	3b01      	subs	r3, #1
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d121      	bne.n	8004b8a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a12      	ldr	r2, [pc, #72]	@ (8004b94 <I2SEx_TxISR_I2SExt+0x90>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d101      	bne.n	8004b54 <I2SEx_TxISR_I2SExt+0x50>
 8004b50:	4b11      	ldr	r3, [pc, #68]	@ (8004b98 <I2SEx_TxISR_I2SExt+0x94>)
 8004b52:	e001      	b.n	8004b58 <I2SEx_TxISR_I2SExt+0x54>
 8004b54:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	490d      	ldr	r1, [pc, #52]	@ (8004b94 <I2SEx_TxISR_I2SExt+0x90>)
 8004b60:	428b      	cmp	r3, r1
 8004b62:	d101      	bne.n	8004b68 <I2SEx_TxISR_I2SExt+0x64>
 8004b64:	4b0c      	ldr	r3, [pc, #48]	@ (8004b98 <I2SEx_TxISR_I2SExt+0x94>)
 8004b66:	e001      	b.n	8004b6c <I2SEx_TxISR_I2SExt+0x68>
 8004b68:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b6c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004b70:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d106      	bne.n	8004b8a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f7ff ff81 	bl	8004a8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b8a:	bf00      	nop
 8004b8c:	3708      	adds	r7, #8
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	40003800 	.word	0x40003800
 8004b98:	40003400 	.word	0x40003400

08004b9c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68d8      	ldr	r0, [r3, #12]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bae:	1c99      	adds	r1, r3, #2
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004bb4:	b282      	uxth	r2, r0
 8004bb6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d113      	bne.n	8004bf8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	685a      	ldr	r2, [r3, #4]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004bde:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d106      	bne.n	8004bf8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f7ff ff4a 	bl	8004a8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004bf8:	bf00      	nop
 8004bfa:	3708      	adds	r7, #8
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a20      	ldr	r2, [pc, #128]	@ (8004c90 <I2SEx_RxISR_I2SExt+0x90>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d101      	bne.n	8004c16 <I2SEx_RxISR_I2SExt+0x16>
 8004c12:	4b20      	ldr	r3, [pc, #128]	@ (8004c94 <I2SEx_RxISR_I2SExt+0x94>)
 8004c14:	e001      	b.n	8004c1a <I2SEx_RxISR_I2SExt+0x1a>
 8004c16:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c1a:	68d8      	ldr	r0, [r3, #12]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c20:	1c99      	adds	r1, r3, #2
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004c26:	b282      	uxth	r2, r0
 8004c28:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	3b01      	subs	r3, #1
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d121      	bne.n	8004c86 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a12      	ldr	r2, [pc, #72]	@ (8004c90 <I2SEx_RxISR_I2SExt+0x90>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d101      	bne.n	8004c50 <I2SEx_RxISR_I2SExt+0x50>
 8004c4c:	4b11      	ldr	r3, [pc, #68]	@ (8004c94 <I2SEx_RxISR_I2SExt+0x94>)
 8004c4e:	e001      	b.n	8004c54 <I2SEx_RxISR_I2SExt+0x54>
 8004c50:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	490d      	ldr	r1, [pc, #52]	@ (8004c90 <I2SEx_RxISR_I2SExt+0x90>)
 8004c5c:	428b      	cmp	r3, r1
 8004c5e:	d101      	bne.n	8004c64 <I2SEx_RxISR_I2SExt+0x64>
 8004c60:	4b0c      	ldr	r3, [pc, #48]	@ (8004c94 <I2SEx_RxISR_I2SExt+0x94>)
 8004c62:	e001      	b.n	8004c68 <I2SEx_RxISR_I2SExt+0x68>
 8004c64:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c68:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004c6c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d106      	bne.n	8004c86 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f7ff ff03 	bl	8004a8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c86:	bf00      	nop
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	40003800 	.word	0x40003800
 8004c94:	40003400 	.word	0x40003400

08004c98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e267      	b.n	800517a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d075      	beq.n	8004da2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004cb6:	4b88      	ldr	r3, [pc, #544]	@ (8004ed8 <HAL_RCC_OscConfig+0x240>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 030c 	and.w	r3, r3, #12
 8004cbe:	2b04      	cmp	r3, #4
 8004cc0:	d00c      	beq.n	8004cdc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cc2:	4b85      	ldr	r3, [pc, #532]	@ (8004ed8 <HAL_RCC_OscConfig+0x240>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004cca:	2b08      	cmp	r3, #8
 8004ccc:	d112      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cce:	4b82      	ldr	r3, [pc, #520]	@ (8004ed8 <HAL_RCC_OscConfig+0x240>)
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cd6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cda:	d10b      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cdc:	4b7e      	ldr	r3, [pc, #504]	@ (8004ed8 <HAL_RCC_OscConfig+0x240>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d05b      	beq.n	8004da0 <HAL_RCC_OscConfig+0x108>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d157      	bne.n	8004da0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e242      	b.n	800517a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cfc:	d106      	bne.n	8004d0c <HAL_RCC_OscConfig+0x74>
 8004cfe:	4b76      	ldr	r3, [pc, #472]	@ (8004ed8 <HAL_RCC_OscConfig+0x240>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a75      	ldr	r2, [pc, #468]	@ (8004ed8 <HAL_RCC_OscConfig+0x240>)
 8004d04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d08:	6013      	str	r3, [r2, #0]
 8004d0a:	e01d      	b.n	8004d48 <HAL_RCC_OscConfig+0xb0>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d14:	d10c      	bne.n	8004d30 <HAL_RCC_OscConfig+0x98>
 8004d16:	4b70      	ldr	r3, [pc, #448]	@ (8004ed8 <HAL_RCC_OscConfig+0x240>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a6f      	ldr	r2, [pc, #444]	@ (8004ed8 <HAL_RCC_OscConfig+0x240>)
 8004d1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d20:	6013      	str	r3, [r2, #0]
 8004d22:	4b6d      	ldr	r3, [pc, #436]	@ (8004ed8 <HAL_RCC_OscConfig+0x240>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a6c      	ldr	r2, [pc, #432]	@ (8004ed8 <HAL_RCC_OscConfig+0x240>)
 8004d28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d2c:	6013      	str	r3, [r2, #0]
 8004d2e:	e00b      	b.n	8004d48 <HAL_RCC_OscConfig+0xb0>
 8004d30:	4b69      	ldr	r3, [pc, #420]	@ (8004ed8 <HAL_RCC_OscConfig+0x240>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a68      	ldr	r2, [pc, #416]	@ (8004ed8 <HAL_RCC_OscConfig+0x240>)
 8004d36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d3a:	6013      	str	r3, [r2, #0]
 8004d3c:	4b66      	ldr	r3, [pc, #408]	@ (8004ed8 <HAL_RCC_OscConfig+0x240>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a65      	ldr	r2, [pc, #404]	@ (8004ed8 <HAL_RCC_OscConfig+0x240>)
 8004d42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d013      	beq.n	8004d78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d50:	f7fc fd28 	bl	80017a4 <HAL_GetTick>
 8004d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d56:	e008      	b.n	8004d6a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d58:	f7fc fd24 	bl	80017a4 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b64      	cmp	r3, #100	@ 0x64
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e207      	b.n	800517a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d6a:	4b5b      	ldr	r3, [pc, #364]	@ (8004ed8 <HAL_RCC_OscConfig+0x240>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d0f0      	beq.n	8004d58 <HAL_RCC_OscConfig+0xc0>
 8004d76:	e014      	b.n	8004da2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d78:	f7fc fd14 	bl	80017a4 <HAL_GetTick>
 8004d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d7e:	e008      	b.n	8004d92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d80:	f7fc fd10 	bl	80017a4 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b64      	cmp	r3, #100	@ 0x64
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e1f3      	b.n	800517a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d92:	4b51      	ldr	r3, [pc, #324]	@ (8004ed8 <HAL_RCC_OscConfig+0x240>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1f0      	bne.n	8004d80 <HAL_RCC_OscConfig+0xe8>
 8004d9e:	e000      	b.n	8004da2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d063      	beq.n	8004e76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004dae:	4b4a      	ldr	r3, [pc, #296]	@ (8004ed8 <HAL_RCC_OscConfig+0x240>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f003 030c 	and.w	r3, r3, #12
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00b      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dba:	4b47      	ldr	r3, [pc, #284]	@ (8004ed8 <HAL_RCC_OscConfig+0x240>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004dc2:	2b08      	cmp	r3, #8
 8004dc4:	d11c      	bne.n	8004e00 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dc6:	4b44      	ldr	r3, [pc, #272]	@ (8004ed8 <HAL_RCC_OscConfig+0x240>)
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d116      	bne.n	8004e00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dd2:	4b41      	ldr	r3, [pc, #260]	@ (8004ed8 <HAL_RCC_OscConfig+0x240>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0302 	and.w	r3, r3, #2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d005      	beq.n	8004dea <HAL_RCC_OscConfig+0x152>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d001      	beq.n	8004dea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e1c7      	b.n	800517a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dea:	4b3b      	ldr	r3, [pc, #236]	@ (8004ed8 <HAL_RCC_OscConfig+0x240>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	4937      	ldr	r1, [pc, #220]	@ (8004ed8 <HAL_RCC_OscConfig+0x240>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dfe:	e03a      	b.n	8004e76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d020      	beq.n	8004e4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e08:	4b34      	ldr	r3, [pc, #208]	@ (8004edc <HAL_RCC_OscConfig+0x244>)
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e0e:	f7fc fcc9 	bl	80017a4 <HAL_GetTick>
 8004e12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e14:	e008      	b.n	8004e28 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e16:	f7fc fcc5 	bl	80017a4 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d901      	bls.n	8004e28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e1a8      	b.n	800517a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e28:	4b2b      	ldr	r3, [pc, #172]	@ (8004ed8 <HAL_RCC_OscConfig+0x240>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d0f0      	beq.n	8004e16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e34:	4b28      	ldr	r3, [pc, #160]	@ (8004ed8 <HAL_RCC_OscConfig+0x240>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	00db      	lsls	r3, r3, #3
 8004e42:	4925      	ldr	r1, [pc, #148]	@ (8004ed8 <HAL_RCC_OscConfig+0x240>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	600b      	str	r3, [r1, #0]
 8004e48:	e015      	b.n	8004e76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e4a:	4b24      	ldr	r3, [pc, #144]	@ (8004edc <HAL_RCC_OscConfig+0x244>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e50:	f7fc fca8 	bl	80017a4 <HAL_GetTick>
 8004e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e56:	e008      	b.n	8004e6a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e58:	f7fc fca4 	bl	80017a4 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e187      	b.n	800517a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ed8 <HAL_RCC_OscConfig+0x240>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1f0      	bne.n	8004e58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0308 	and.w	r3, r3, #8
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d036      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d016      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e8a:	4b15      	ldr	r3, [pc, #84]	@ (8004ee0 <HAL_RCC_OscConfig+0x248>)
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e90:	f7fc fc88 	bl	80017a4 <HAL_GetTick>
 8004e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e96:	e008      	b.n	8004eaa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e98:	f7fc fc84 	bl	80017a4 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e167      	b.n	800517a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed8 <HAL_RCC_OscConfig+0x240>)
 8004eac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0f0      	beq.n	8004e98 <HAL_RCC_OscConfig+0x200>
 8004eb6:	e01b      	b.n	8004ef0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eb8:	4b09      	ldr	r3, [pc, #36]	@ (8004ee0 <HAL_RCC_OscConfig+0x248>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ebe:	f7fc fc71 	bl	80017a4 <HAL_GetTick>
 8004ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ec4:	e00e      	b.n	8004ee4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ec6:	f7fc fc6d 	bl	80017a4 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d907      	bls.n	8004ee4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e150      	b.n	800517a <HAL_RCC_OscConfig+0x4e2>
 8004ed8:	40023800 	.word	0x40023800
 8004edc:	42470000 	.word	0x42470000
 8004ee0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ee4:	4b88      	ldr	r3, [pc, #544]	@ (8005108 <HAL_RCC_OscConfig+0x470>)
 8004ee6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ee8:	f003 0302 	and.w	r3, r3, #2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1ea      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0304 	and.w	r3, r3, #4
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f000 8097 	beq.w	800502c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004efe:	2300      	movs	r3, #0
 8004f00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f02:	4b81      	ldr	r3, [pc, #516]	@ (8005108 <HAL_RCC_OscConfig+0x470>)
 8004f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10f      	bne.n	8004f2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f0e:	2300      	movs	r3, #0
 8004f10:	60bb      	str	r3, [r7, #8]
 8004f12:	4b7d      	ldr	r3, [pc, #500]	@ (8005108 <HAL_RCC_OscConfig+0x470>)
 8004f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f16:	4a7c      	ldr	r2, [pc, #496]	@ (8005108 <HAL_RCC_OscConfig+0x470>)
 8004f18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f1e:	4b7a      	ldr	r3, [pc, #488]	@ (8005108 <HAL_RCC_OscConfig+0x470>)
 8004f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f26:	60bb      	str	r3, [r7, #8]
 8004f28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f2e:	4b77      	ldr	r3, [pc, #476]	@ (800510c <HAL_RCC_OscConfig+0x474>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d118      	bne.n	8004f6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f3a:	4b74      	ldr	r3, [pc, #464]	@ (800510c <HAL_RCC_OscConfig+0x474>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a73      	ldr	r2, [pc, #460]	@ (800510c <HAL_RCC_OscConfig+0x474>)
 8004f40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f46:	f7fc fc2d 	bl	80017a4 <HAL_GetTick>
 8004f4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f4c:	e008      	b.n	8004f60 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f4e:	f7fc fc29 	bl	80017a4 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e10c      	b.n	800517a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f60:	4b6a      	ldr	r3, [pc, #424]	@ (800510c <HAL_RCC_OscConfig+0x474>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d0f0      	beq.n	8004f4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d106      	bne.n	8004f82 <HAL_RCC_OscConfig+0x2ea>
 8004f74:	4b64      	ldr	r3, [pc, #400]	@ (8005108 <HAL_RCC_OscConfig+0x470>)
 8004f76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f78:	4a63      	ldr	r2, [pc, #396]	@ (8005108 <HAL_RCC_OscConfig+0x470>)
 8004f7a:	f043 0301 	orr.w	r3, r3, #1
 8004f7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f80:	e01c      	b.n	8004fbc <HAL_RCC_OscConfig+0x324>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	2b05      	cmp	r3, #5
 8004f88:	d10c      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x30c>
 8004f8a:	4b5f      	ldr	r3, [pc, #380]	@ (8005108 <HAL_RCC_OscConfig+0x470>)
 8004f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f8e:	4a5e      	ldr	r2, [pc, #376]	@ (8005108 <HAL_RCC_OscConfig+0x470>)
 8004f90:	f043 0304 	orr.w	r3, r3, #4
 8004f94:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f96:	4b5c      	ldr	r3, [pc, #368]	@ (8005108 <HAL_RCC_OscConfig+0x470>)
 8004f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f9a:	4a5b      	ldr	r2, [pc, #364]	@ (8005108 <HAL_RCC_OscConfig+0x470>)
 8004f9c:	f043 0301 	orr.w	r3, r3, #1
 8004fa0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fa2:	e00b      	b.n	8004fbc <HAL_RCC_OscConfig+0x324>
 8004fa4:	4b58      	ldr	r3, [pc, #352]	@ (8005108 <HAL_RCC_OscConfig+0x470>)
 8004fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fa8:	4a57      	ldr	r2, [pc, #348]	@ (8005108 <HAL_RCC_OscConfig+0x470>)
 8004faa:	f023 0301 	bic.w	r3, r3, #1
 8004fae:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fb0:	4b55      	ldr	r3, [pc, #340]	@ (8005108 <HAL_RCC_OscConfig+0x470>)
 8004fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fb4:	4a54      	ldr	r2, [pc, #336]	@ (8005108 <HAL_RCC_OscConfig+0x470>)
 8004fb6:	f023 0304 	bic.w	r3, r3, #4
 8004fba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d015      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc4:	f7fc fbee 	bl	80017a4 <HAL_GetTick>
 8004fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fca:	e00a      	b.n	8004fe2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fcc:	f7fc fbea 	bl	80017a4 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e0cb      	b.n	800517a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fe2:	4b49      	ldr	r3, [pc, #292]	@ (8005108 <HAL_RCC_OscConfig+0x470>)
 8004fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d0ee      	beq.n	8004fcc <HAL_RCC_OscConfig+0x334>
 8004fee:	e014      	b.n	800501a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ff0:	f7fc fbd8 	bl	80017a4 <HAL_GetTick>
 8004ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ff6:	e00a      	b.n	800500e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ff8:	f7fc fbd4 	bl	80017a4 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005006:	4293      	cmp	r3, r2
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e0b5      	b.n	800517a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800500e:	4b3e      	ldr	r3, [pc, #248]	@ (8005108 <HAL_RCC_OscConfig+0x470>)
 8005010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1ee      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800501a:	7dfb      	ldrb	r3, [r7, #23]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d105      	bne.n	800502c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005020:	4b39      	ldr	r3, [pc, #228]	@ (8005108 <HAL_RCC_OscConfig+0x470>)
 8005022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005024:	4a38      	ldr	r2, [pc, #224]	@ (8005108 <HAL_RCC_OscConfig+0x470>)
 8005026:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800502a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	2b00      	cmp	r3, #0
 8005032:	f000 80a1 	beq.w	8005178 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005036:	4b34      	ldr	r3, [pc, #208]	@ (8005108 <HAL_RCC_OscConfig+0x470>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f003 030c 	and.w	r3, r3, #12
 800503e:	2b08      	cmp	r3, #8
 8005040:	d05c      	beq.n	80050fc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	2b02      	cmp	r3, #2
 8005048:	d141      	bne.n	80050ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800504a:	4b31      	ldr	r3, [pc, #196]	@ (8005110 <HAL_RCC_OscConfig+0x478>)
 800504c:	2200      	movs	r2, #0
 800504e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005050:	f7fc fba8 	bl	80017a4 <HAL_GetTick>
 8005054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005056:	e008      	b.n	800506a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005058:	f7fc fba4 	bl	80017a4 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b02      	cmp	r3, #2
 8005064:	d901      	bls.n	800506a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e087      	b.n	800517a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800506a:	4b27      	ldr	r3, [pc, #156]	@ (8005108 <HAL_RCC_OscConfig+0x470>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1f0      	bne.n	8005058 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	69da      	ldr	r2, [r3, #28]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	431a      	orrs	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005084:	019b      	lsls	r3, r3, #6
 8005086:	431a      	orrs	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800508c:	085b      	lsrs	r3, r3, #1
 800508e:	3b01      	subs	r3, #1
 8005090:	041b      	lsls	r3, r3, #16
 8005092:	431a      	orrs	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005098:	061b      	lsls	r3, r3, #24
 800509a:	491b      	ldr	r1, [pc, #108]	@ (8005108 <HAL_RCC_OscConfig+0x470>)
 800509c:	4313      	orrs	r3, r2
 800509e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050a0:	4b1b      	ldr	r3, [pc, #108]	@ (8005110 <HAL_RCC_OscConfig+0x478>)
 80050a2:	2201      	movs	r2, #1
 80050a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a6:	f7fc fb7d 	bl	80017a4 <HAL_GetTick>
 80050aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ac:	e008      	b.n	80050c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ae:	f7fc fb79 	bl	80017a4 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d901      	bls.n	80050c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e05c      	b.n	800517a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050c0:	4b11      	ldr	r3, [pc, #68]	@ (8005108 <HAL_RCC_OscConfig+0x470>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d0f0      	beq.n	80050ae <HAL_RCC_OscConfig+0x416>
 80050cc:	e054      	b.n	8005178 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ce:	4b10      	ldr	r3, [pc, #64]	@ (8005110 <HAL_RCC_OscConfig+0x478>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d4:	f7fc fb66 	bl	80017a4 <HAL_GetTick>
 80050d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050da:	e008      	b.n	80050ee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050dc:	f7fc fb62 	bl	80017a4 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e045      	b.n	800517a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ee:	4b06      	ldr	r3, [pc, #24]	@ (8005108 <HAL_RCC_OscConfig+0x470>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1f0      	bne.n	80050dc <HAL_RCC_OscConfig+0x444>
 80050fa:	e03d      	b.n	8005178 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d107      	bne.n	8005114 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e038      	b.n	800517a <HAL_RCC_OscConfig+0x4e2>
 8005108:	40023800 	.word	0x40023800
 800510c:	40007000 	.word	0x40007000
 8005110:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005114:	4b1b      	ldr	r3, [pc, #108]	@ (8005184 <HAL_RCC_OscConfig+0x4ec>)
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d028      	beq.n	8005174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800512c:	429a      	cmp	r2, r3
 800512e:	d121      	bne.n	8005174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800513a:	429a      	cmp	r2, r3
 800513c:	d11a      	bne.n	8005174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005144:	4013      	ands	r3, r2
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800514a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800514c:	4293      	cmp	r3, r2
 800514e:	d111      	bne.n	8005174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800515a:	085b      	lsrs	r3, r3, #1
 800515c:	3b01      	subs	r3, #1
 800515e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005160:	429a      	cmp	r2, r3
 8005162:	d107      	bne.n	8005174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800516e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005170:	429a      	cmp	r2, r3
 8005172:	d001      	beq.n	8005178 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e000      	b.n	800517a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3718      	adds	r7, #24
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	40023800 	.word	0x40023800

08005188 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d101      	bne.n	800519c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e0cc      	b.n	8005336 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800519c:	4b68      	ldr	r3, [pc, #416]	@ (8005340 <HAL_RCC_ClockConfig+0x1b8>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0307 	and.w	r3, r3, #7
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d90c      	bls.n	80051c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051aa:	4b65      	ldr	r3, [pc, #404]	@ (8005340 <HAL_RCC_ClockConfig+0x1b8>)
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	b2d2      	uxtb	r2, r2
 80051b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051b2:	4b63      	ldr	r3, [pc, #396]	@ (8005340 <HAL_RCC_ClockConfig+0x1b8>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0307 	and.w	r3, r3, #7
 80051ba:	683a      	ldr	r2, [r7, #0]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d001      	beq.n	80051c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e0b8      	b.n	8005336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0302 	and.w	r3, r3, #2
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d020      	beq.n	8005212 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0304 	and.w	r3, r3, #4
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d005      	beq.n	80051e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051dc:	4b59      	ldr	r3, [pc, #356]	@ (8005344 <HAL_RCC_ClockConfig+0x1bc>)
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	4a58      	ldr	r2, [pc, #352]	@ (8005344 <HAL_RCC_ClockConfig+0x1bc>)
 80051e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80051e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0308 	and.w	r3, r3, #8
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d005      	beq.n	8005200 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051f4:	4b53      	ldr	r3, [pc, #332]	@ (8005344 <HAL_RCC_ClockConfig+0x1bc>)
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	4a52      	ldr	r2, [pc, #328]	@ (8005344 <HAL_RCC_ClockConfig+0x1bc>)
 80051fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80051fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005200:	4b50      	ldr	r3, [pc, #320]	@ (8005344 <HAL_RCC_ClockConfig+0x1bc>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	494d      	ldr	r1, [pc, #308]	@ (8005344 <HAL_RCC_ClockConfig+0x1bc>)
 800520e:	4313      	orrs	r3, r2
 8005210:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b00      	cmp	r3, #0
 800521c:	d044      	beq.n	80052a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d107      	bne.n	8005236 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005226:	4b47      	ldr	r3, [pc, #284]	@ (8005344 <HAL_RCC_ClockConfig+0x1bc>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d119      	bne.n	8005266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e07f      	b.n	8005336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	2b02      	cmp	r3, #2
 800523c:	d003      	beq.n	8005246 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005242:	2b03      	cmp	r3, #3
 8005244:	d107      	bne.n	8005256 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005246:	4b3f      	ldr	r3, [pc, #252]	@ (8005344 <HAL_RCC_ClockConfig+0x1bc>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d109      	bne.n	8005266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e06f      	b.n	8005336 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005256:	4b3b      	ldr	r3, [pc, #236]	@ (8005344 <HAL_RCC_ClockConfig+0x1bc>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e067      	b.n	8005336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005266:	4b37      	ldr	r3, [pc, #220]	@ (8005344 <HAL_RCC_ClockConfig+0x1bc>)
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f023 0203 	bic.w	r2, r3, #3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	4934      	ldr	r1, [pc, #208]	@ (8005344 <HAL_RCC_ClockConfig+0x1bc>)
 8005274:	4313      	orrs	r3, r2
 8005276:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005278:	f7fc fa94 	bl	80017a4 <HAL_GetTick>
 800527c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800527e:	e00a      	b.n	8005296 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005280:	f7fc fa90 	bl	80017a4 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800528e:	4293      	cmp	r3, r2
 8005290:	d901      	bls.n	8005296 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e04f      	b.n	8005336 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005296:	4b2b      	ldr	r3, [pc, #172]	@ (8005344 <HAL_RCC_ClockConfig+0x1bc>)
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f003 020c 	and.w	r2, r3, #12
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d1eb      	bne.n	8005280 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052a8:	4b25      	ldr	r3, [pc, #148]	@ (8005340 <HAL_RCC_ClockConfig+0x1b8>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	683a      	ldr	r2, [r7, #0]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d20c      	bcs.n	80052d0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052b6:	4b22      	ldr	r3, [pc, #136]	@ (8005340 <HAL_RCC_ClockConfig+0x1b8>)
 80052b8:	683a      	ldr	r2, [r7, #0]
 80052ba:	b2d2      	uxtb	r2, r2
 80052bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052be:	4b20      	ldr	r3, [pc, #128]	@ (8005340 <HAL_RCC_ClockConfig+0x1b8>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0307 	and.w	r3, r3, #7
 80052c6:	683a      	ldr	r2, [r7, #0]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d001      	beq.n	80052d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e032      	b.n	8005336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0304 	and.w	r3, r3, #4
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d008      	beq.n	80052ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052dc:	4b19      	ldr	r3, [pc, #100]	@ (8005344 <HAL_RCC_ClockConfig+0x1bc>)
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	4916      	ldr	r1, [pc, #88]	@ (8005344 <HAL_RCC_ClockConfig+0x1bc>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0308 	and.w	r3, r3, #8
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d009      	beq.n	800530e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052fa:	4b12      	ldr	r3, [pc, #72]	@ (8005344 <HAL_RCC_ClockConfig+0x1bc>)
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	00db      	lsls	r3, r3, #3
 8005308:	490e      	ldr	r1, [pc, #56]	@ (8005344 <HAL_RCC_ClockConfig+0x1bc>)
 800530a:	4313      	orrs	r3, r2
 800530c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800530e:	f000 f821 	bl	8005354 <HAL_RCC_GetSysClockFreq>
 8005312:	4602      	mov	r2, r0
 8005314:	4b0b      	ldr	r3, [pc, #44]	@ (8005344 <HAL_RCC_ClockConfig+0x1bc>)
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	091b      	lsrs	r3, r3, #4
 800531a:	f003 030f 	and.w	r3, r3, #15
 800531e:	490a      	ldr	r1, [pc, #40]	@ (8005348 <HAL_RCC_ClockConfig+0x1c0>)
 8005320:	5ccb      	ldrb	r3, [r1, r3]
 8005322:	fa22 f303 	lsr.w	r3, r2, r3
 8005326:	4a09      	ldr	r2, [pc, #36]	@ (800534c <HAL_RCC_ClockConfig+0x1c4>)
 8005328:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800532a:	4b09      	ldr	r3, [pc, #36]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4618      	mov	r0, r3
 8005330:	f7fb ffd4 	bl	80012dc <HAL_InitTick>

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	40023c00 	.word	0x40023c00
 8005344:	40023800 	.word	0x40023800
 8005348:	0800efc8 	.word	0x0800efc8
 800534c:	20000000 	.word	0x20000000
 8005350:	20000004 	.word	0x20000004

08005354 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005358:	b094      	sub	sp, #80	@ 0x50
 800535a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800535c:	2300      	movs	r3, #0
 800535e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005360:	2300      	movs	r3, #0
 8005362:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005364:	2300      	movs	r3, #0
 8005366:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005368:	2300      	movs	r3, #0
 800536a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800536c:	4b79      	ldr	r3, [pc, #484]	@ (8005554 <HAL_RCC_GetSysClockFreq+0x200>)
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f003 030c 	and.w	r3, r3, #12
 8005374:	2b08      	cmp	r3, #8
 8005376:	d00d      	beq.n	8005394 <HAL_RCC_GetSysClockFreq+0x40>
 8005378:	2b08      	cmp	r3, #8
 800537a:	f200 80e1 	bhi.w	8005540 <HAL_RCC_GetSysClockFreq+0x1ec>
 800537e:	2b00      	cmp	r3, #0
 8005380:	d002      	beq.n	8005388 <HAL_RCC_GetSysClockFreq+0x34>
 8005382:	2b04      	cmp	r3, #4
 8005384:	d003      	beq.n	800538e <HAL_RCC_GetSysClockFreq+0x3a>
 8005386:	e0db      	b.n	8005540 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005388:	4b73      	ldr	r3, [pc, #460]	@ (8005558 <HAL_RCC_GetSysClockFreq+0x204>)
 800538a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800538c:	e0db      	b.n	8005546 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800538e:	4b73      	ldr	r3, [pc, #460]	@ (800555c <HAL_RCC_GetSysClockFreq+0x208>)
 8005390:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005392:	e0d8      	b.n	8005546 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005394:	4b6f      	ldr	r3, [pc, #444]	@ (8005554 <HAL_RCC_GetSysClockFreq+0x200>)
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800539c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800539e:	4b6d      	ldr	r3, [pc, #436]	@ (8005554 <HAL_RCC_GetSysClockFreq+0x200>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d063      	beq.n	8005472 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053aa:	4b6a      	ldr	r3, [pc, #424]	@ (8005554 <HAL_RCC_GetSysClockFreq+0x200>)
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	099b      	lsrs	r3, r3, #6
 80053b0:	2200      	movs	r2, #0
 80053b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80053b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80053be:	2300      	movs	r3, #0
 80053c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80053c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80053c6:	4622      	mov	r2, r4
 80053c8:	462b      	mov	r3, r5
 80053ca:	f04f 0000 	mov.w	r0, #0
 80053ce:	f04f 0100 	mov.w	r1, #0
 80053d2:	0159      	lsls	r1, r3, #5
 80053d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053d8:	0150      	lsls	r0, r2, #5
 80053da:	4602      	mov	r2, r0
 80053dc:	460b      	mov	r3, r1
 80053de:	4621      	mov	r1, r4
 80053e0:	1a51      	subs	r1, r2, r1
 80053e2:	6139      	str	r1, [r7, #16]
 80053e4:	4629      	mov	r1, r5
 80053e6:	eb63 0301 	sbc.w	r3, r3, r1
 80053ea:	617b      	str	r3, [r7, #20]
 80053ec:	f04f 0200 	mov.w	r2, #0
 80053f0:	f04f 0300 	mov.w	r3, #0
 80053f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053f8:	4659      	mov	r1, fp
 80053fa:	018b      	lsls	r3, r1, #6
 80053fc:	4651      	mov	r1, sl
 80053fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005402:	4651      	mov	r1, sl
 8005404:	018a      	lsls	r2, r1, #6
 8005406:	4651      	mov	r1, sl
 8005408:	ebb2 0801 	subs.w	r8, r2, r1
 800540c:	4659      	mov	r1, fp
 800540e:	eb63 0901 	sbc.w	r9, r3, r1
 8005412:	f04f 0200 	mov.w	r2, #0
 8005416:	f04f 0300 	mov.w	r3, #0
 800541a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800541e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005422:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005426:	4690      	mov	r8, r2
 8005428:	4699      	mov	r9, r3
 800542a:	4623      	mov	r3, r4
 800542c:	eb18 0303 	adds.w	r3, r8, r3
 8005430:	60bb      	str	r3, [r7, #8]
 8005432:	462b      	mov	r3, r5
 8005434:	eb49 0303 	adc.w	r3, r9, r3
 8005438:	60fb      	str	r3, [r7, #12]
 800543a:	f04f 0200 	mov.w	r2, #0
 800543e:	f04f 0300 	mov.w	r3, #0
 8005442:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005446:	4629      	mov	r1, r5
 8005448:	024b      	lsls	r3, r1, #9
 800544a:	4621      	mov	r1, r4
 800544c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005450:	4621      	mov	r1, r4
 8005452:	024a      	lsls	r2, r1, #9
 8005454:	4610      	mov	r0, r2
 8005456:	4619      	mov	r1, r3
 8005458:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800545a:	2200      	movs	r2, #0
 800545c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800545e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005460:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005464:	f7fa ff04 	bl	8000270 <__aeabi_uldivmod>
 8005468:	4602      	mov	r2, r0
 800546a:	460b      	mov	r3, r1
 800546c:	4613      	mov	r3, r2
 800546e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005470:	e058      	b.n	8005524 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005472:	4b38      	ldr	r3, [pc, #224]	@ (8005554 <HAL_RCC_GetSysClockFreq+0x200>)
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	099b      	lsrs	r3, r3, #6
 8005478:	2200      	movs	r2, #0
 800547a:	4618      	mov	r0, r3
 800547c:	4611      	mov	r1, r2
 800547e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005482:	623b      	str	r3, [r7, #32]
 8005484:	2300      	movs	r3, #0
 8005486:	627b      	str	r3, [r7, #36]	@ 0x24
 8005488:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800548c:	4642      	mov	r2, r8
 800548e:	464b      	mov	r3, r9
 8005490:	f04f 0000 	mov.w	r0, #0
 8005494:	f04f 0100 	mov.w	r1, #0
 8005498:	0159      	lsls	r1, r3, #5
 800549a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800549e:	0150      	lsls	r0, r2, #5
 80054a0:	4602      	mov	r2, r0
 80054a2:	460b      	mov	r3, r1
 80054a4:	4641      	mov	r1, r8
 80054a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80054aa:	4649      	mov	r1, r9
 80054ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80054b0:	f04f 0200 	mov.w	r2, #0
 80054b4:	f04f 0300 	mov.w	r3, #0
 80054b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80054bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80054c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80054c4:	ebb2 040a 	subs.w	r4, r2, sl
 80054c8:	eb63 050b 	sbc.w	r5, r3, fp
 80054cc:	f04f 0200 	mov.w	r2, #0
 80054d0:	f04f 0300 	mov.w	r3, #0
 80054d4:	00eb      	lsls	r3, r5, #3
 80054d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054da:	00e2      	lsls	r2, r4, #3
 80054dc:	4614      	mov	r4, r2
 80054de:	461d      	mov	r5, r3
 80054e0:	4643      	mov	r3, r8
 80054e2:	18e3      	adds	r3, r4, r3
 80054e4:	603b      	str	r3, [r7, #0]
 80054e6:	464b      	mov	r3, r9
 80054e8:	eb45 0303 	adc.w	r3, r5, r3
 80054ec:	607b      	str	r3, [r7, #4]
 80054ee:	f04f 0200 	mov.w	r2, #0
 80054f2:	f04f 0300 	mov.w	r3, #0
 80054f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054fa:	4629      	mov	r1, r5
 80054fc:	028b      	lsls	r3, r1, #10
 80054fe:	4621      	mov	r1, r4
 8005500:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005504:	4621      	mov	r1, r4
 8005506:	028a      	lsls	r2, r1, #10
 8005508:	4610      	mov	r0, r2
 800550a:	4619      	mov	r1, r3
 800550c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800550e:	2200      	movs	r2, #0
 8005510:	61bb      	str	r3, [r7, #24]
 8005512:	61fa      	str	r2, [r7, #28]
 8005514:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005518:	f7fa feaa 	bl	8000270 <__aeabi_uldivmod>
 800551c:	4602      	mov	r2, r0
 800551e:	460b      	mov	r3, r1
 8005520:	4613      	mov	r3, r2
 8005522:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005524:	4b0b      	ldr	r3, [pc, #44]	@ (8005554 <HAL_RCC_GetSysClockFreq+0x200>)
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	0c1b      	lsrs	r3, r3, #16
 800552a:	f003 0303 	and.w	r3, r3, #3
 800552e:	3301      	adds	r3, #1
 8005530:	005b      	lsls	r3, r3, #1
 8005532:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005534:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005536:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005538:	fbb2 f3f3 	udiv	r3, r2, r3
 800553c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800553e:	e002      	b.n	8005546 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005540:	4b05      	ldr	r3, [pc, #20]	@ (8005558 <HAL_RCC_GetSysClockFreq+0x204>)
 8005542:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005544:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005546:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005548:	4618      	mov	r0, r3
 800554a:	3750      	adds	r7, #80	@ 0x50
 800554c:	46bd      	mov	sp, r7
 800554e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005552:	bf00      	nop
 8005554:	40023800 	.word	0x40023800
 8005558:	00f42400 	.word	0x00f42400
 800555c:	007a1200 	.word	0x007a1200

08005560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005560:	b480      	push	{r7}
 8005562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005564:	4b03      	ldr	r3, [pc, #12]	@ (8005574 <HAL_RCC_GetHCLKFreq+0x14>)
 8005566:	681b      	ldr	r3, [r3, #0]
}
 8005568:	4618      	mov	r0, r3
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	20000000 	.word	0x20000000

08005578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800557c:	f7ff fff0 	bl	8005560 <HAL_RCC_GetHCLKFreq>
 8005580:	4602      	mov	r2, r0
 8005582:	4b05      	ldr	r3, [pc, #20]	@ (8005598 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	0a9b      	lsrs	r3, r3, #10
 8005588:	f003 0307 	and.w	r3, r3, #7
 800558c:	4903      	ldr	r1, [pc, #12]	@ (800559c <HAL_RCC_GetPCLK1Freq+0x24>)
 800558e:	5ccb      	ldrb	r3, [r1, r3]
 8005590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005594:	4618      	mov	r0, r3
 8005596:	bd80      	pop	{r7, pc}
 8005598:	40023800 	.word	0x40023800
 800559c:	0800efd8 	.word	0x0800efd8

080055a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80055a4:	f7ff ffdc 	bl	8005560 <HAL_RCC_GetHCLKFreq>
 80055a8:	4602      	mov	r2, r0
 80055aa:	4b05      	ldr	r3, [pc, #20]	@ (80055c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	0b5b      	lsrs	r3, r3, #13
 80055b0:	f003 0307 	and.w	r3, r3, #7
 80055b4:	4903      	ldr	r1, [pc, #12]	@ (80055c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055b6:	5ccb      	ldrb	r3, [r1, r3]
 80055b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055bc:	4618      	mov	r0, r3
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	40023800 	.word	0x40023800
 80055c4:	0800efd8 	.word	0x0800efd8

080055c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	220f      	movs	r2, #15
 80055d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80055d8:	4b12      	ldr	r3, [pc, #72]	@ (8005624 <HAL_RCC_GetClockConfig+0x5c>)
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f003 0203 	and.w	r2, r3, #3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80055e4:	4b0f      	ldr	r3, [pc, #60]	@ (8005624 <HAL_RCC_GetClockConfig+0x5c>)
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80055f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005624 <HAL_RCC_GetClockConfig+0x5c>)
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80055fc:	4b09      	ldr	r3, [pc, #36]	@ (8005624 <HAL_RCC_GetClockConfig+0x5c>)
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	08db      	lsrs	r3, r3, #3
 8005602:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800560a:	4b07      	ldr	r3, [pc, #28]	@ (8005628 <HAL_RCC_GetClockConfig+0x60>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0207 	and.w	r2, r3, #7
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	601a      	str	r2, [r3, #0]
}
 8005616:	bf00      	nop
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	40023800 	.word	0x40023800
 8005628:	40023c00 	.word	0x40023c00

0800562c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005634:	2300      	movs	r3, #0
 8005636:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005638:	2300      	movs	r3, #0
 800563a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0301 	and.w	r3, r3, #1
 8005644:	2b00      	cmp	r3, #0
 8005646:	d105      	bne.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005650:	2b00      	cmp	r3, #0
 8005652:	d035      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005654:	4b62      	ldr	r3, [pc, #392]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005656:	2200      	movs	r2, #0
 8005658:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800565a:	f7fc f8a3 	bl	80017a4 <HAL_GetTick>
 800565e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005660:	e008      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005662:	f7fc f89f 	bl	80017a4 <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	2b02      	cmp	r3, #2
 800566e:	d901      	bls.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e0b0      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005674:	4b5b      	ldr	r3, [pc, #364]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1f0      	bne.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	019a      	lsls	r2, r3, #6
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	071b      	lsls	r3, r3, #28
 800568c:	4955      	ldr	r1, [pc, #340]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800568e:	4313      	orrs	r3, r2
 8005690:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005694:	4b52      	ldr	r3, [pc, #328]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005696:	2201      	movs	r2, #1
 8005698:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800569a:	f7fc f883 	bl	80017a4 <HAL_GetTick>
 800569e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056a0:	e008      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80056a2:	f7fc f87f 	bl	80017a4 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d901      	bls.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e090      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056b4:	4b4b      	ldr	r3, [pc, #300]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d0f0      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0302 	and.w	r3, r3, #2
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f000 8083 	beq.w	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80056ce:	2300      	movs	r3, #0
 80056d0:	60fb      	str	r3, [r7, #12]
 80056d2:	4b44      	ldr	r3, [pc, #272]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d6:	4a43      	ldr	r2, [pc, #268]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80056de:	4b41      	ldr	r3, [pc, #260]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056e6:	60fb      	str	r3, [r7, #12]
 80056e8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80056ea:	4b3f      	ldr	r3, [pc, #252]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a3e      	ldr	r2, [pc, #248]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80056f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056f4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80056f6:	f7fc f855 	bl	80017a4 <HAL_GetTick>
 80056fa:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80056fc:	e008      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056fe:	f7fc f851 	bl	80017a4 <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	2b02      	cmp	r3, #2
 800570a:	d901      	bls.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e062      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005710:	4b35      	ldr	r3, [pc, #212]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005718:	2b00      	cmp	r3, #0
 800571a:	d0f0      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800571c:	4b31      	ldr	r3, [pc, #196]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800571e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005720:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005724:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d02f      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	429a      	cmp	r2, r3
 8005738:	d028      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800573a:	4b2a      	ldr	r3, [pc, #168]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800573c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800573e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005742:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005744:	4b29      	ldr	r3, [pc, #164]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005746:	2201      	movs	r2, #1
 8005748:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800574a:	4b28      	ldr	r3, [pc, #160]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800574c:	2200      	movs	r2, #0
 800574e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005750:	4a24      	ldr	r2, [pc, #144]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005756:	4b23      	ldr	r3, [pc, #140]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b01      	cmp	r3, #1
 8005760:	d114      	bne.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005762:	f7fc f81f 	bl	80017a4 <HAL_GetTick>
 8005766:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005768:	e00a      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800576a:	f7fc f81b 	bl	80017a4 <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005778:	4293      	cmp	r3, r2
 800577a:	d901      	bls.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e02a      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005780:	4b18      	ldr	r3, [pc, #96]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d0ee      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005794:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005798:	d10d      	bne.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800579a:	4b12      	ldr	r3, [pc, #72]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80057aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057ae:	490d      	ldr	r1, [pc, #52]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057b0:	4313      	orrs	r3, r2
 80057b2:	608b      	str	r3, [r1, #8]
 80057b4:	e005      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80057b6:	4b0b      	ldr	r3, [pc, #44]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	4a0a      	ldr	r2, [pc, #40]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057bc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80057c0:	6093      	str	r3, [r2, #8]
 80057c2:	4b08      	ldr	r3, [pc, #32]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057c4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057ce:	4905      	ldr	r1, [pc, #20]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3718      	adds	r7, #24
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	42470068 	.word	0x42470068
 80057e4:	40023800 	.word	0x40023800
 80057e8:	40007000 	.word	0x40007000
 80057ec:	42470e40 	.word	0x42470e40

080057f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b087      	sub	sp, #28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80057f8:	2300      	movs	r3, #0
 80057fa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005800:	2300      	movs	r3, #0
 8005802:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005804:	2300      	movs	r3, #0
 8005806:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d13f      	bne.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800580e:	4b24      	ldr	r3, [pc, #144]	@ (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005816:	60fb      	str	r3, [r7, #12]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d006      	beq.n	800582c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005824:	d12f      	bne.n	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005826:	4b1f      	ldr	r3, [pc, #124]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005828:	617b      	str	r3, [r7, #20]
          break;
 800582a:	e02f      	b.n	800588c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800582c:	4b1c      	ldr	r3, [pc, #112]	@ (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005834:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005838:	d108      	bne.n	800584c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800583a:	4b19      	ldr	r3, [pc, #100]	@ (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005842:	4a19      	ldr	r2, [pc, #100]	@ (80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005844:	fbb2 f3f3 	udiv	r3, r2, r3
 8005848:	613b      	str	r3, [r7, #16]
 800584a:	e007      	b.n	800585c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800584c:	4b14      	ldr	r3, [pc, #80]	@ (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005854:	4a15      	ldr	r2, [pc, #84]	@ (80058ac <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005856:	fbb2 f3f3 	udiv	r3, r2, r3
 800585a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800585c:	4b10      	ldr	r3, [pc, #64]	@ (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800585e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005862:	099b      	lsrs	r3, r3, #6
 8005864:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	fb02 f303 	mul.w	r3, r2, r3
 800586e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005870:	4b0b      	ldr	r3, [pc, #44]	@ (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005872:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005876:	0f1b      	lsrs	r3, r3, #28
 8005878:	f003 0307 	and.w	r3, r3, #7
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005882:	617b      	str	r3, [r7, #20]
          break;
 8005884:	e002      	b.n	800588c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005886:	2300      	movs	r3, #0
 8005888:	617b      	str	r3, [r7, #20]
          break;
 800588a:	bf00      	nop
        }
      }
      break;
 800588c:	e000      	b.n	8005890 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800588e:	bf00      	nop
    }
  }
  return frequency;
 8005890:	697b      	ldr	r3, [r7, #20]
}
 8005892:	4618      	mov	r0, r3
 8005894:	371c      	adds	r7, #28
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	40023800 	.word	0x40023800
 80058a4:	00bb8000 	.word	0x00bb8000
 80058a8:	007a1200 	.word	0x007a1200
 80058ac:	00f42400 	.word	0x00f42400

080058b0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d101      	bne.n	80058c6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e073      	b.n	80059ae <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	7f5b      	ldrb	r3, [r3, #29]
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d105      	bne.n	80058dc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f7fb fc2a 	bl	8001130 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2202      	movs	r2, #2
 80058e0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	f003 0310 	and.w	r3, r3, #16
 80058ec:	2b10      	cmp	r3, #16
 80058ee:	d055      	beq.n	800599c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	22ca      	movs	r2, #202	@ 0xca
 80058f6:	625a      	str	r2, [r3, #36]	@ 0x24
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2253      	movs	r2, #83	@ 0x53
 80058fe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 f99d 	bl	8005c40 <RTC_EnterInitMode>
 8005906:	4603      	mov	r3, r0
 8005908:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800590a:	7bfb      	ldrb	r3, [r7, #15]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d12c      	bne.n	800596a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	6812      	ldr	r2, [r2, #0]
 800591a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800591e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005922:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	6899      	ldr	r1, [r3, #8]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685a      	ldr	r2, [r3, #4]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	431a      	orrs	r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	695b      	ldr	r3, [r3, #20]
 8005938:	431a      	orrs	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	430a      	orrs	r2, r1
 8005940:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	68d2      	ldr	r2, [r2, #12]
 800594a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6919      	ldr	r1, [r3, #16]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	041a      	lsls	r2, r3, #16
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	430a      	orrs	r2, r1
 800595e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 f9a4 	bl	8005cae <RTC_ExitInitMode>
 8005966:	4603      	mov	r3, r0
 8005968:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800596a:	7bfb      	ldrb	r3, [r7, #15]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d110      	bne.n	8005992 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800597e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	699a      	ldr	r2, [r3, #24]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	22ff      	movs	r2, #255	@ 0xff
 8005998:	625a      	str	r2, [r3, #36]	@ 0x24
 800599a:	e001      	b.n	80059a0 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800599c:	2300      	movs	r3, #0
 800599e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80059a0:	7bfb      	ldrb	r3, [r7, #15]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d102      	bne.n	80059ac <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80059b6:	b590      	push	{r4, r7, lr}
 80059b8:	b087      	sub	sp, #28
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	60f8      	str	r0, [r7, #12]
 80059be:	60b9      	str	r1, [r7, #8]
 80059c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80059c2:	2300      	movs	r3, #0
 80059c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	7f1b      	ldrb	r3, [r3, #28]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d101      	bne.n	80059d2 <HAL_RTC_SetTime+0x1c>
 80059ce:	2302      	movs	r3, #2
 80059d0:	e087      	b.n	8005ae2 <HAL_RTC_SetTime+0x12c>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2201      	movs	r2, #1
 80059d6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2202      	movs	r2, #2
 80059dc:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d126      	bne.n	8005a32 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d102      	bne.n	80059f8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	2200      	movs	r2, #0
 80059f6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	4618      	mov	r0, r3
 80059fe:	f000 f97b 	bl	8005cf8 <RTC_ByteToBcd2>
 8005a02:	4603      	mov	r3, r0
 8005a04:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	785b      	ldrb	r3, [r3, #1]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f000 f974 	bl	8005cf8 <RTC_ByteToBcd2>
 8005a10:	4603      	mov	r3, r0
 8005a12:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005a14:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	789b      	ldrb	r3, [r3, #2]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 f96c 	bl	8005cf8 <RTC_ByteToBcd2>
 8005a20:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005a22:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	78db      	ldrb	r3, [r3, #3]
 8005a2a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	617b      	str	r3, [r7, #20]
 8005a30:	e018      	b.n	8005a64 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d102      	bne.n	8005a46 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	2200      	movs	r2, #0
 8005a44:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	785b      	ldrb	r3, [r3, #1]
 8005a50:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005a52:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005a58:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	78db      	ldrb	r3, [r3, #3]
 8005a5e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005a60:	4313      	orrs	r3, r2
 8005a62:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	22ca      	movs	r2, #202	@ 0xca
 8005a6a:	625a      	str	r2, [r3, #36]	@ 0x24
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2253      	movs	r2, #83	@ 0x53
 8005a72:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f000 f8e3 	bl	8005c40 <RTC_EnterInitMode>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005a7e:	7cfb      	ldrb	r3, [r7, #19]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d120      	bne.n	8005ac6 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005a8e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005a92:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	689a      	ldr	r2, [r3, #8]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005aa2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6899      	ldr	r1, [r3, #8]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	68da      	ldr	r2, [r3, #12]
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f000 f8f6 	bl	8005cae <RTC_ExitInitMode>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005ac6:	7cfb      	ldrb	r3, [r7, #19]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d102      	bne.n	8005ad2 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	22ff      	movs	r2, #255	@ 0xff
 8005ad8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	771a      	strb	r2, [r3, #28]

  return status;
 8005ae0:	7cfb      	ldrb	r3, [r7, #19]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	371c      	adds	r7, #28
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd90      	pop	{r4, r7, pc}

08005aea <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005aea:	b590      	push	{r4, r7, lr}
 8005aec:	b087      	sub	sp, #28
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	60f8      	str	r0, [r7, #12]
 8005af2:	60b9      	str	r1, [r7, #8]
 8005af4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005af6:	2300      	movs	r3, #0
 8005af8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	7f1b      	ldrb	r3, [r3, #28]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d101      	bne.n	8005b06 <HAL_RTC_SetDate+0x1c>
 8005b02:	2302      	movs	r3, #2
 8005b04:	e071      	b.n	8005bea <HAL_RTC_SetDate+0x100>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2202      	movs	r2, #2
 8005b10:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10e      	bne.n	8005b36 <HAL_RTC_SetDate+0x4c>
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	785b      	ldrb	r3, [r3, #1]
 8005b1c:	f003 0310 	and.w	r3, r3, #16
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d008      	beq.n	8005b36 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	785b      	ldrb	r3, [r3, #1]
 8005b28:	f023 0310 	bic.w	r3, r3, #16
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	330a      	adds	r3, #10
 8005b30:	b2da      	uxtb	r2, r3
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d11c      	bne.n	8005b76 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	78db      	ldrb	r3, [r3, #3]
 8005b40:	4618      	mov	r0, r3
 8005b42:	f000 f8d9 	bl	8005cf8 <RTC_ByteToBcd2>
 8005b46:	4603      	mov	r3, r0
 8005b48:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	785b      	ldrb	r3, [r3, #1]
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f000 f8d2 	bl	8005cf8 <RTC_ByteToBcd2>
 8005b54:	4603      	mov	r3, r0
 8005b56:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005b58:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	789b      	ldrb	r3, [r3, #2]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f000 f8ca 	bl	8005cf8 <RTC_ByteToBcd2>
 8005b64:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005b66:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005b70:	4313      	orrs	r3, r2
 8005b72:	617b      	str	r3, [r7, #20]
 8005b74:	e00e      	b.n	8005b94 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	78db      	ldrb	r3, [r3, #3]
 8005b7a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	785b      	ldrb	r3, [r3, #1]
 8005b80:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005b82:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005b84:	68ba      	ldr	r2, [r7, #8]
 8005b86:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005b88:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005b90:	4313      	orrs	r3, r2
 8005b92:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	22ca      	movs	r2, #202	@ 0xca
 8005b9a:	625a      	str	r2, [r3, #36]	@ 0x24
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2253      	movs	r2, #83	@ 0x53
 8005ba2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f000 f84b 	bl	8005c40 <RTC_EnterInitMode>
 8005baa:	4603      	mov	r3, r0
 8005bac:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005bae:	7cfb      	ldrb	r3, [r7, #19]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10c      	bne.n	8005bce <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005bbe:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005bc2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f000 f872 	bl	8005cae <RTC_ExitInitMode>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005bce:	7cfb      	ldrb	r3, [r7, #19]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d102      	bne.n	8005bda <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	22ff      	movs	r2, #255	@ 0xff
 8005be0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	771a      	strb	r2, [r3, #28]

  return status;
 8005be8:	7cfb      	ldrb	r3, [r7, #19]
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	371c      	adds	r7, #28
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd90      	pop	{r4, r7, pc}
	...

08005bf4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a0d      	ldr	r2, [pc, #52]	@ (8005c3c <HAL_RTC_WaitForSynchro+0x48>)
 8005c06:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c08:	f7fb fdcc 	bl	80017a4 <HAL_GetTick>
 8005c0c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005c0e:	e009      	b.n	8005c24 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c10:	f7fb fdc8 	bl	80017a4 <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005c1e:	d901      	bls.n	8005c24 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e007      	b.n	8005c34 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	f003 0320 	and.w	r3, r3, #32
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d0ee      	beq.n	8005c10 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	00017f5f 	.word	0x00017f5f

08005c40 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d122      	bne.n	8005ca4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68da      	ldr	r2, [r3, #12]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005c6c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c6e:	f7fb fd99 	bl	80017a4 <HAL_GetTick>
 8005c72:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005c74:	e00c      	b.n	8005c90 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c76:	f7fb fd95 	bl	80017a4 <HAL_GetTick>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005c84:	d904      	bls.n	8005c90 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2204      	movs	r2, #4
 8005c8a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d102      	bne.n	8005ca4 <RTC_EnterInitMode+0x64>
 8005c9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d1e8      	bne.n	8005c76 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b084      	sub	sp, #16
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68da      	ldr	r2, [r3, #12]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005cc8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f003 0320 	and.w	r3, r3, #32
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d10a      	bne.n	8005cee <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f7ff ff8b 	bl	8005bf4 <HAL_RTC_WaitForSynchro>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d004      	beq.n	8005cee <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2204      	movs	r2, #4
 8005ce8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	4603      	mov	r3, r0
 8005d00:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005d02:	2300      	movs	r3, #0
 8005d04:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005d06:	e005      	b.n	8005d14 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8005d0e:	79fb      	ldrb	r3, [r7, #7]
 8005d10:	3b0a      	subs	r3, #10
 8005d12:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005d14:	79fb      	ldrb	r3, [r7, #7]
 8005d16:	2b09      	cmp	r3, #9
 8005d18:	d8f6      	bhi.n	8005d08 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	011b      	lsls	r3, r3, #4
 8005d20:	b2da      	uxtb	r2, r3
 8005d22:	79fb      	ldrb	r3, [r7, #7]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	b2db      	uxtb	r3, r3
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3714      	adds	r7, #20
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e07b      	b.n	8005e3e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d108      	bne.n	8005d60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d56:	d009      	beq.n	8005d6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	61da      	str	r2, [r3, #28]
 8005d5e:	e005      	b.n	8005d6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d106      	bne.n	8005d8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f7fb fa34 	bl	80011f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2202      	movs	r2, #2
 8005d90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005da2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005db4:	431a      	orrs	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	f003 0302 	and.w	r3, r3, #2
 8005dc8:	431a      	orrs	r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	695b      	ldr	r3, [r3, #20]
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	699b      	ldr	r3, [r3, #24]
 8005dd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ddc:	431a      	orrs	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	69db      	ldr	r3, [r3, #28]
 8005de2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005de6:	431a      	orrs	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a1b      	ldr	r3, [r3, #32]
 8005dec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005df0:	ea42 0103 	orr.w	r1, r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	430a      	orrs	r2, r1
 8005e02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	0c1b      	lsrs	r3, r3, #16
 8005e0a:	f003 0104 	and.w	r1, r3, #4
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e12:	f003 0210 	and.w	r2, r3, #16
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	69da      	ldr	r2, [r3, #28]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3708      	adds	r7, #8
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b088      	sub	sp, #32
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	60f8      	str	r0, [r7, #12]
 8005e4e:	60b9      	str	r1, [r7, #8]
 8005e50:	603b      	str	r3, [r7, #0]
 8005e52:	4613      	mov	r3, r2
 8005e54:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e56:	f7fb fca5 	bl	80017a4 <HAL_GetTick>
 8005e5a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005e5c:	88fb      	ldrh	r3, [r7, #6]
 8005e5e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d001      	beq.n	8005e70 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	e12a      	b.n	80060c6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d002      	beq.n	8005e7c <HAL_SPI_Transmit+0x36>
 8005e76:	88fb      	ldrh	r3, [r7, #6]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d101      	bne.n	8005e80 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e122      	b.n	80060c6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d101      	bne.n	8005e8e <HAL_SPI_Transmit+0x48>
 8005e8a:	2302      	movs	r3, #2
 8005e8c:	e11b      	b.n	80060c6 <HAL_SPI_Transmit+0x280>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2203      	movs	r2, #3
 8005e9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	88fa      	ldrh	r2, [r7, #6]
 8005eae:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	88fa      	ldrh	r2, [r7, #6]
 8005eb4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005edc:	d10f      	bne.n	8005efe <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005eec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005efc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f08:	2b40      	cmp	r3, #64	@ 0x40
 8005f0a:	d007      	beq.n	8005f1c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f24:	d152      	bne.n	8005fcc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d002      	beq.n	8005f34 <HAL_SPI_Transmit+0xee>
 8005f2e:	8b7b      	ldrh	r3, [r7, #26]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d145      	bne.n	8005fc0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f38:	881a      	ldrh	r2, [r3, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f44:	1c9a      	adds	r2, r3, #2
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	3b01      	subs	r3, #1
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005f58:	e032      	b.n	8005fc0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f003 0302 	and.w	r3, r3, #2
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d112      	bne.n	8005f8e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f6c:	881a      	ldrh	r2, [r3, #0]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f78:	1c9a      	adds	r2, r3, #2
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	3b01      	subs	r3, #1
 8005f86:	b29a      	uxth	r2, r3
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005f8c:	e018      	b.n	8005fc0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f8e:	f7fb fc09 	bl	80017a4 <HAL_GetTick>
 8005f92:	4602      	mov	r2, r0
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	683a      	ldr	r2, [r7, #0]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d803      	bhi.n	8005fa6 <HAL_SPI_Transmit+0x160>
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa4:	d102      	bne.n	8005fac <HAL_SPI_Transmit+0x166>
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d109      	bne.n	8005fc0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e082      	b.n	80060c6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1c7      	bne.n	8005f5a <HAL_SPI_Transmit+0x114>
 8005fca:	e053      	b.n	8006074 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d002      	beq.n	8005fda <HAL_SPI_Transmit+0x194>
 8005fd4:	8b7b      	ldrh	r3, [r7, #26]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d147      	bne.n	800606a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	330c      	adds	r3, #12
 8005fe4:	7812      	ldrb	r2, [r2, #0]
 8005fe6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fec:	1c5a      	adds	r2, r3, #1
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006000:	e033      	b.n	800606a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f003 0302 	and.w	r3, r3, #2
 800600c:	2b02      	cmp	r3, #2
 800600e:	d113      	bne.n	8006038 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	330c      	adds	r3, #12
 800601a:	7812      	ldrb	r2, [r2, #0]
 800601c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006022:	1c5a      	adds	r2, r3, #1
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800602c:	b29b      	uxth	r3, r3
 800602e:	3b01      	subs	r3, #1
 8006030:	b29a      	uxth	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006036:	e018      	b.n	800606a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006038:	f7fb fbb4 	bl	80017a4 <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	683a      	ldr	r2, [r7, #0]
 8006044:	429a      	cmp	r2, r3
 8006046:	d803      	bhi.n	8006050 <HAL_SPI_Transmit+0x20a>
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800604e:	d102      	bne.n	8006056 <HAL_SPI_Transmit+0x210>
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d109      	bne.n	800606a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e02d      	b.n	80060c6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800606e:	b29b      	uxth	r3, r3
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1c6      	bne.n	8006002 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006074:	69fa      	ldr	r2, [r7, #28]
 8006076:	6839      	ldr	r1, [r7, #0]
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f000 fa59 	bl	8006530 <SPI_EndRxTxTransaction>
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d002      	beq.n	800608a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2220      	movs	r2, #32
 8006088:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10a      	bne.n	80060a8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006092:	2300      	movs	r3, #0
 8006094:	617b      	str	r3, [r7, #20]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	617b      	str	r3, [r7, #20]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	617b      	str	r3, [r7, #20]
 80060a6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d001      	beq.n	80060c4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e000      	b.n	80060c6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80060c4:	2300      	movs	r3, #0
  }
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3720      	adds	r7, #32
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b08a      	sub	sp, #40	@ 0x28
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	60f8      	str	r0, [r7, #12]
 80060d6:	60b9      	str	r1, [r7, #8]
 80060d8:	607a      	str	r2, [r7, #4]
 80060da:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80060dc:	2301      	movs	r3, #1
 80060de:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060e0:	f7fb fb60 	bl	80017a4 <HAL_GetTick>
 80060e4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80060ec:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80060f4:	887b      	ldrh	r3, [r7, #2]
 80060f6:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80060f8:	7ffb      	ldrb	r3, [r7, #31]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d00c      	beq.n	8006118 <HAL_SPI_TransmitReceive+0x4a>
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006104:	d106      	bne.n	8006114 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d102      	bne.n	8006114 <HAL_SPI_TransmitReceive+0x46>
 800610e:	7ffb      	ldrb	r3, [r7, #31]
 8006110:	2b04      	cmp	r3, #4
 8006112:	d001      	beq.n	8006118 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8006114:	2302      	movs	r3, #2
 8006116:	e17f      	b.n	8006418 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d005      	beq.n	800612a <HAL_SPI_TransmitReceive+0x5c>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d002      	beq.n	800612a <HAL_SPI_TransmitReceive+0x5c>
 8006124:	887b      	ldrh	r3, [r7, #2]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d101      	bne.n	800612e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e174      	b.n	8006418 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006134:	2b01      	cmp	r3, #1
 8006136:	d101      	bne.n	800613c <HAL_SPI_TransmitReceive+0x6e>
 8006138:	2302      	movs	r3, #2
 800613a:	e16d      	b.n	8006418 <HAL_SPI_TransmitReceive+0x34a>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800614a:	b2db      	uxtb	r3, r3
 800614c:	2b04      	cmp	r3, #4
 800614e:	d003      	beq.n	8006158 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2205      	movs	r2, #5
 8006154:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	887a      	ldrh	r2, [r7, #2]
 8006168:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	887a      	ldrh	r2, [r7, #2]
 800616e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	68ba      	ldr	r2, [r7, #8]
 8006174:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	887a      	ldrh	r2, [r7, #2]
 800617a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	887a      	ldrh	r2, [r7, #2]
 8006180:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006198:	2b40      	cmp	r3, #64	@ 0x40
 800619a:	d007      	beq.n	80061ac <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80061aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061b4:	d17e      	bne.n	80062b4 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d002      	beq.n	80061c4 <HAL_SPI_TransmitReceive+0xf6>
 80061be:	8afb      	ldrh	r3, [r7, #22]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d16c      	bne.n	800629e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061c8:	881a      	ldrh	r2, [r3, #0]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061d4:	1c9a      	adds	r2, r3, #2
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061de:	b29b      	uxth	r3, r3
 80061e0:	3b01      	subs	r3, #1
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061e8:	e059      	b.n	800629e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	f003 0302 	and.w	r3, r3, #2
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d11b      	bne.n	8006230 <HAL_SPI_TransmitReceive+0x162>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d016      	beq.n	8006230 <HAL_SPI_TransmitReceive+0x162>
 8006202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006204:	2b01      	cmp	r3, #1
 8006206:	d113      	bne.n	8006230 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800620c:	881a      	ldrh	r2, [r3, #0]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006218:	1c9a      	adds	r2, r3, #2
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006222:	b29b      	uxth	r3, r3
 8006224:	3b01      	subs	r3, #1
 8006226:	b29a      	uxth	r2, r3
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800622c:	2300      	movs	r3, #0
 800622e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f003 0301 	and.w	r3, r3, #1
 800623a:	2b01      	cmp	r3, #1
 800623c:	d119      	bne.n	8006272 <HAL_SPI_TransmitReceive+0x1a4>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006242:	b29b      	uxth	r3, r3
 8006244:	2b00      	cmp	r3, #0
 8006246:	d014      	beq.n	8006272 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68da      	ldr	r2, [r3, #12]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006252:	b292      	uxth	r2, r2
 8006254:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800625a:	1c9a      	adds	r2, r3, #2
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006264:	b29b      	uxth	r3, r3
 8006266:	3b01      	subs	r3, #1
 8006268:	b29a      	uxth	r2, r3
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800626e:	2301      	movs	r3, #1
 8006270:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006272:	f7fb fa97 	bl	80017a4 <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	6a3b      	ldr	r3, [r7, #32]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800627e:	429a      	cmp	r2, r3
 8006280:	d80d      	bhi.n	800629e <HAL_SPI_TransmitReceive+0x1d0>
 8006282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006288:	d009      	beq.n	800629e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2201      	movs	r2, #1
 800628e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	e0bc      	b.n	8006418 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1a0      	bne.n	80061ea <HAL_SPI_TransmitReceive+0x11c>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d19b      	bne.n	80061ea <HAL_SPI_TransmitReceive+0x11c>
 80062b2:	e082      	b.n	80063ba <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d002      	beq.n	80062c2 <HAL_SPI_TransmitReceive+0x1f4>
 80062bc:	8afb      	ldrh	r3, [r7, #22]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d171      	bne.n	80063a6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	330c      	adds	r3, #12
 80062cc:	7812      	ldrb	r2, [r2, #0]
 80062ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062d4:	1c5a      	adds	r2, r3, #1
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062de:	b29b      	uxth	r3, r3
 80062e0:	3b01      	subs	r3, #1
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062e8:	e05d      	b.n	80063a6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f003 0302 	and.w	r3, r3, #2
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	d11c      	bne.n	8006332 <HAL_SPI_TransmitReceive+0x264>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d017      	beq.n	8006332 <HAL_SPI_TransmitReceive+0x264>
 8006302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006304:	2b01      	cmp	r3, #1
 8006306:	d114      	bne.n	8006332 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	330c      	adds	r3, #12
 8006312:	7812      	ldrb	r2, [r2, #0]
 8006314:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800631a:	1c5a      	adds	r2, r3, #1
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006324:	b29b      	uxth	r3, r3
 8006326:	3b01      	subs	r3, #1
 8006328:	b29a      	uxth	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800632e:	2300      	movs	r3, #0
 8006330:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	f003 0301 	and.w	r3, r3, #1
 800633c:	2b01      	cmp	r3, #1
 800633e:	d119      	bne.n	8006374 <HAL_SPI_TransmitReceive+0x2a6>
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006344:	b29b      	uxth	r3, r3
 8006346:	2b00      	cmp	r3, #0
 8006348:	d014      	beq.n	8006374 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68da      	ldr	r2, [r3, #12]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006354:	b2d2      	uxtb	r2, r2
 8006356:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800635c:	1c5a      	adds	r2, r3, #1
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006366:	b29b      	uxth	r3, r3
 8006368:	3b01      	subs	r3, #1
 800636a:	b29a      	uxth	r2, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006370:	2301      	movs	r3, #1
 8006372:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006374:	f7fb fa16 	bl	80017a4 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	6a3b      	ldr	r3, [r7, #32]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006380:	429a      	cmp	r2, r3
 8006382:	d803      	bhi.n	800638c <HAL_SPI_TransmitReceive+0x2be>
 8006384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800638a:	d102      	bne.n	8006392 <HAL_SPI_TransmitReceive+0x2c4>
 800638c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800638e:	2b00      	cmp	r3, #0
 8006390:	d109      	bne.n	80063a6 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e038      	b.n	8006418 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d19c      	bne.n	80062ea <HAL_SPI_TransmitReceive+0x21c>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d197      	bne.n	80062ea <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063ba:	6a3a      	ldr	r2, [r7, #32]
 80063bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f000 f8b6 	bl	8006530 <SPI_EndRxTxTransaction>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d008      	beq.n	80063dc <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2220      	movs	r2, #32
 80063ce:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e01d      	b.n	8006418 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10a      	bne.n	80063fa <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063e4:	2300      	movs	r3, #0
 80063e6:	613b      	str	r3, [r7, #16]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	613b      	str	r3, [r7, #16]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	613b      	str	r3, [r7, #16]
 80063f8:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e000      	b.n	8006418 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006416:	2300      	movs	r3, #0
  }
}
 8006418:	4618      	mov	r0, r3
 800641a:	3728      	adds	r7, #40	@ 0x28
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b088      	sub	sp, #32
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	603b      	str	r3, [r7, #0]
 800642c:	4613      	mov	r3, r2
 800642e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006430:	f7fb f9b8 	bl	80017a4 <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006438:	1a9b      	subs	r3, r3, r2
 800643a:	683a      	ldr	r2, [r7, #0]
 800643c:	4413      	add	r3, r2
 800643e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006440:	f7fb f9b0 	bl	80017a4 <HAL_GetTick>
 8006444:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006446:	4b39      	ldr	r3, [pc, #228]	@ (800652c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	015b      	lsls	r3, r3, #5
 800644c:	0d1b      	lsrs	r3, r3, #20
 800644e:	69fa      	ldr	r2, [r7, #28]
 8006450:	fb02 f303 	mul.w	r3, r2, r3
 8006454:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006456:	e054      	b.n	8006502 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800645e:	d050      	beq.n	8006502 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006460:	f7fb f9a0 	bl	80017a4 <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	69fa      	ldr	r2, [r7, #28]
 800646c:	429a      	cmp	r2, r3
 800646e:	d902      	bls.n	8006476 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d13d      	bne.n	80064f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006484:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800648e:	d111      	bne.n	80064b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006498:	d004      	beq.n	80064a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064a2:	d107      	bne.n	80064b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064bc:	d10f      	bne.n	80064de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80064cc:	601a      	str	r2, [r3, #0]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80064dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2201      	movs	r2, #1
 80064e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e017      	b.n	8006522 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d101      	bne.n	80064fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80064f8:	2300      	movs	r3, #0
 80064fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	3b01      	subs	r3, #1
 8006500:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	689a      	ldr	r2, [r3, #8]
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	4013      	ands	r3, r2
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	429a      	cmp	r2, r3
 8006510:	bf0c      	ite	eq
 8006512:	2301      	moveq	r3, #1
 8006514:	2300      	movne	r3, #0
 8006516:	b2db      	uxtb	r3, r3
 8006518:	461a      	mov	r2, r3
 800651a:	79fb      	ldrb	r3, [r7, #7]
 800651c:	429a      	cmp	r2, r3
 800651e:	d19b      	bne.n	8006458 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3720      	adds	r7, #32
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	20000000 	.word	0x20000000

08006530 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b088      	sub	sp, #32
 8006534:	af02      	add	r7, sp, #8
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	9300      	str	r3, [sp, #0]
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	2201      	movs	r2, #1
 8006544:	2102      	movs	r1, #2
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f7ff ff6a 	bl	8006420 <SPI_WaitFlagStateUntilTimeout>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d007      	beq.n	8006562 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006556:	f043 0220 	orr.w	r2, r3, #32
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e032      	b.n	80065c8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006562:	4b1b      	ldr	r3, [pc, #108]	@ (80065d0 <SPI_EndRxTxTransaction+0xa0>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a1b      	ldr	r2, [pc, #108]	@ (80065d4 <SPI_EndRxTxTransaction+0xa4>)
 8006568:	fba2 2303 	umull	r2, r3, r2, r3
 800656c:	0d5b      	lsrs	r3, r3, #21
 800656e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006572:	fb02 f303 	mul.w	r3, r2, r3
 8006576:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006580:	d112      	bne.n	80065a8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	2200      	movs	r2, #0
 800658a:	2180      	movs	r1, #128	@ 0x80
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f7ff ff47 	bl	8006420 <SPI_WaitFlagStateUntilTimeout>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d016      	beq.n	80065c6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800659c:	f043 0220 	orr.w	r2, r3, #32
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e00f      	b.n	80065c8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00a      	beq.n	80065c4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	3b01      	subs	r3, #1
 80065b2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065be:	2b80      	cmp	r3, #128	@ 0x80
 80065c0:	d0f2      	beq.n	80065a8 <SPI_EndRxTxTransaction+0x78>
 80065c2:	e000      	b.n	80065c6 <SPI_EndRxTxTransaction+0x96>
        break;
 80065c4:	bf00      	nop
  }

  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3718      	adds	r7, #24
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	20000000 	.word	0x20000000
 80065d4:	165e9f81 	.word	0x165e9f81

080065d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d101      	bne.n	80065ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e041      	b.n	800666e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d106      	bne.n	8006604 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 f839 	bl	8006676 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2202      	movs	r2, #2
 8006608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	3304      	adds	r3, #4
 8006614:	4619      	mov	r1, r3
 8006616:	4610      	mov	r0, r2
 8006618:	f000 f9c0 	bl	800699c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3708      	adds	r7, #8
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}

08006676 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006676:	b480      	push	{r7}
 8006678:	b083      	sub	sp, #12
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800667e:	bf00      	nop
 8006680:	370c      	adds	r7, #12
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr
	...

0800668c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800669a:	b2db      	uxtb	r3, r3
 800669c:	2b01      	cmp	r3, #1
 800669e:	d001      	beq.n	80066a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e04e      	b.n	8006742 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2202      	movs	r2, #2
 80066a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68da      	ldr	r2, [r3, #12]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f042 0201 	orr.w	r2, r2, #1
 80066ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a23      	ldr	r2, [pc, #140]	@ (8006750 <HAL_TIM_Base_Start_IT+0xc4>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d022      	beq.n	800670c <HAL_TIM_Base_Start_IT+0x80>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066ce:	d01d      	beq.n	800670c <HAL_TIM_Base_Start_IT+0x80>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a1f      	ldr	r2, [pc, #124]	@ (8006754 <HAL_TIM_Base_Start_IT+0xc8>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d018      	beq.n	800670c <HAL_TIM_Base_Start_IT+0x80>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a1e      	ldr	r2, [pc, #120]	@ (8006758 <HAL_TIM_Base_Start_IT+0xcc>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d013      	beq.n	800670c <HAL_TIM_Base_Start_IT+0x80>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a1c      	ldr	r2, [pc, #112]	@ (800675c <HAL_TIM_Base_Start_IT+0xd0>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d00e      	beq.n	800670c <HAL_TIM_Base_Start_IT+0x80>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a1b      	ldr	r2, [pc, #108]	@ (8006760 <HAL_TIM_Base_Start_IT+0xd4>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d009      	beq.n	800670c <HAL_TIM_Base_Start_IT+0x80>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a19      	ldr	r2, [pc, #100]	@ (8006764 <HAL_TIM_Base_Start_IT+0xd8>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d004      	beq.n	800670c <HAL_TIM_Base_Start_IT+0x80>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a18      	ldr	r2, [pc, #96]	@ (8006768 <HAL_TIM_Base_Start_IT+0xdc>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d111      	bne.n	8006730 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f003 0307 	and.w	r3, r3, #7
 8006716:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2b06      	cmp	r3, #6
 800671c:	d010      	beq.n	8006740 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f042 0201 	orr.w	r2, r2, #1
 800672c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800672e:	e007      	b.n	8006740 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f042 0201 	orr.w	r2, r2, #1
 800673e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3714      	adds	r7, #20
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	40010000 	.word	0x40010000
 8006754:	40000400 	.word	0x40000400
 8006758:	40000800 	.word	0x40000800
 800675c:	40000c00 	.word	0x40000c00
 8006760:	40010400 	.word	0x40010400
 8006764:	40014000 	.word	0x40014000
 8006768:	40001800 	.word	0x40001800

0800676c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	f003 0302 	and.w	r3, r3, #2
 800678a:	2b00      	cmp	r3, #0
 800678c:	d020      	beq.n	80067d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f003 0302 	and.w	r3, r3, #2
 8006794:	2b00      	cmp	r3, #0
 8006796:	d01b      	beq.n	80067d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f06f 0202 	mvn.w	r2, #2
 80067a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	f003 0303 	and.w	r3, r3, #3
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d003      	beq.n	80067be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 f8d2 	bl	8006960 <HAL_TIM_IC_CaptureCallback>
 80067bc:	e005      	b.n	80067ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f8c4 	bl	800694c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 f8d5 	bl	8006974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	f003 0304 	and.w	r3, r3, #4
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d020      	beq.n	800681c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f003 0304 	and.w	r3, r3, #4
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d01b      	beq.n	800681c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f06f 0204 	mvn.w	r2, #4
 80067ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2202      	movs	r2, #2
 80067f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d003      	beq.n	800680a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f8ac 	bl	8006960 <HAL_TIM_IC_CaptureCallback>
 8006808:	e005      	b.n	8006816 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 f89e 	bl	800694c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 f8af 	bl	8006974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	f003 0308 	and.w	r3, r3, #8
 8006822:	2b00      	cmp	r3, #0
 8006824:	d020      	beq.n	8006868 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f003 0308 	and.w	r3, r3, #8
 800682c:	2b00      	cmp	r3, #0
 800682e:	d01b      	beq.n	8006868 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f06f 0208 	mvn.w	r2, #8
 8006838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2204      	movs	r2, #4
 800683e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	69db      	ldr	r3, [r3, #28]
 8006846:	f003 0303 	and.w	r3, r3, #3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d003      	beq.n	8006856 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 f886 	bl	8006960 <HAL_TIM_IC_CaptureCallback>
 8006854:	e005      	b.n	8006862 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 f878 	bl	800694c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 f889 	bl	8006974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	f003 0310 	and.w	r3, r3, #16
 800686e:	2b00      	cmp	r3, #0
 8006870:	d020      	beq.n	80068b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f003 0310 	and.w	r3, r3, #16
 8006878:	2b00      	cmp	r3, #0
 800687a:	d01b      	beq.n	80068b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f06f 0210 	mvn.w	r2, #16
 8006884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2208      	movs	r2, #8
 800688a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	69db      	ldr	r3, [r3, #28]
 8006892:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006896:	2b00      	cmp	r3, #0
 8006898:	d003      	beq.n	80068a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f860 	bl	8006960 <HAL_TIM_IC_CaptureCallback>
 80068a0:	e005      	b.n	80068ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 f852 	bl	800694c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 f863 	bl	8006974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	f003 0301 	and.w	r3, r3, #1
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00c      	beq.n	80068d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f003 0301 	and.w	r3, r3, #1
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d007      	beq.n	80068d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f06f 0201 	mvn.w	r2, #1
 80068d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f7fa fbb8 	bl	8001048 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00c      	beq.n	80068fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d007      	beq.n	80068fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80068f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f906 	bl	8006b08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00c      	beq.n	8006920 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800690c:	2b00      	cmp	r3, #0
 800690e:	d007      	beq.n	8006920 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f834 	bl	8006988 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	f003 0320 	and.w	r3, r3, #32
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00c      	beq.n	8006944 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f003 0320 	and.w	r3, r3, #32
 8006930:	2b00      	cmp	r3, #0
 8006932:	d007      	beq.n	8006944 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f06f 0220 	mvn.w	r2, #32
 800693c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f8d8 	bl	8006af4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006944:	bf00      	nop
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a46      	ldr	r2, [pc, #280]	@ (8006ac8 <TIM_Base_SetConfig+0x12c>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d013      	beq.n	80069dc <TIM_Base_SetConfig+0x40>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069ba:	d00f      	beq.n	80069dc <TIM_Base_SetConfig+0x40>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a43      	ldr	r2, [pc, #268]	@ (8006acc <TIM_Base_SetConfig+0x130>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d00b      	beq.n	80069dc <TIM_Base_SetConfig+0x40>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a42      	ldr	r2, [pc, #264]	@ (8006ad0 <TIM_Base_SetConfig+0x134>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d007      	beq.n	80069dc <TIM_Base_SetConfig+0x40>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a41      	ldr	r2, [pc, #260]	@ (8006ad4 <TIM_Base_SetConfig+0x138>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d003      	beq.n	80069dc <TIM_Base_SetConfig+0x40>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a40      	ldr	r2, [pc, #256]	@ (8006ad8 <TIM_Base_SetConfig+0x13c>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d108      	bne.n	80069ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a35      	ldr	r2, [pc, #212]	@ (8006ac8 <TIM_Base_SetConfig+0x12c>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d02b      	beq.n	8006a4e <TIM_Base_SetConfig+0xb2>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069fc:	d027      	beq.n	8006a4e <TIM_Base_SetConfig+0xb2>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a32      	ldr	r2, [pc, #200]	@ (8006acc <TIM_Base_SetConfig+0x130>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d023      	beq.n	8006a4e <TIM_Base_SetConfig+0xb2>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a31      	ldr	r2, [pc, #196]	@ (8006ad0 <TIM_Base_SetConfig+0x134>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d01f      	beq.n	8006a4e <TIM_Base_SetConfig+0xb2>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a30      	ldr	r2, [pc, #192]	@ (8006ad4 <TIM_Base_SetConfig+0x138>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d01b      	beq.n	8006a4e <TIM_Base_SetConfig+0xb2>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a2f      	ldr	r2, [pc, #188]	@ (8006ad8 <TIM_Base_SetConfig+0x13c>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d017      	beq.n	8006a4e <TIM_Base_SetConfig+0xb2>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a2e      	ldr	r2, [pc, #184]	@ (8006adc <TIM_Base_SetConfig+0x140>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d013      	beq.n	8006a4e <TIM_Base_SetConfig+0xb2>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a2d      	ldr	r2, [pc, #180]	@ (8006ae0 <TIM_Base_SetConfig+0x144>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d00f      	beq.n	8006a4e <TIM_Base_SetConfig+0xb2>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a2c      	ldr	r2, [pc, #176]	@ (8006ae4 <TIM_Base_SetConfig+0x148>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d00b      	beq.n	8006a4e <TIM_Base_SetConfig+0xb2>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a2b      	ldr	r2, [pc, #172]	@ (8006ae8 <TIM_Base_SetConfig+0x14c>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d007      	beq.n	8006a4e <TIM_Base_SetConfig+0xb2>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a2a      	ldr	r2, [pc, #168]	@ (8006aec <TIM_Base_SetConfig+0x150>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d003      	beq.n	8006a4e <TIM_Base_SetConfig+0xb2>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a29      	ldr	r2, [pc, #164]	@ (8006af0 <TIM_Base_SetConfig+0x154>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d108      	bne.n	8006a60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	695b      	ldr	r3, [r3, #20]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	689a      	ldr	r2, [r3, #8]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a10      	ldr	r2, [pc, #64]	@ (8006ac8 <TIM_Base_SetConfig+0x12c>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d003      	beq.n	8006a94 <TIM_Base_SetConfig+0xf8>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a12      	ldr	r2, [pc, #72]	@ (8006ad8 <TIM_Base_SetConfig+0x13c>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d103      	bne.n	8006a9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	691a      	ldr	r2, [r3, #16]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d105      	bne.n	8006aba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	f023 0201 	bic.w	r2, r3, #1
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	611a      	str	r2, [r3, #16]
  }
}
 8006aba:	bf00      	nop
 8006abc:	3714      	adds	r7, #20
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	40010000 	.word	0x40010000
 8006acc:	40000400 	.word	0x40000400
 8006ad0:	40000800 	.word	0x40000800
 8006ad4:	40000c00 	.word	0x40000c00
 8006ad8:	40010400 	.word	0x40010400
 8006adc:	40014000 	.word	0x40014000
 8006ae0:	40014400 	.word	0x40014400
 8006ae4:	40014800 	.word	0x40014800
 8006ae8:	40001800 	.word	0x40001800
 8006aec:	40001c00 	.word	0x40001c00
 8006af0:	40002000 	.word	0x40002000

08006af4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b10:	bf00      	nop
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d101      	bne.n	8006b2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e042      	b.n	8006bb4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d106      	bne.n	8006b48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f7fa fd86 	bl	8001654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2224      	movs	r2, #36	@ 0x24
 8006b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	68da      	ldr	r2, [r3, #12]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006b5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 f82b 	bl	8006bbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	691a      	ldr	r2, [r3, #16]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006b74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	695a      	ldr	r2, [r3, #20]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006b84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68da      	ldr	r2, [r3, #12]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006b94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2220      	movs	r2, #32
 8006ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2220      	movs	r2, #32
 8006ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3708      	adds	r7, #8
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bc0:	b0c0      	sub	sp, #256	@ 0x100
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bd8:	68d9      	ldr	r1, [r3, #12]
 8006bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	ea40 0301 	orr.w	r3, r0, r1
 8006be4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bea:	689a      	ldr	r2, [r3, #8]
 8006bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	431a      	orrs	r2, r3
 8006bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	431a      	orrs	r2, r3
 8006bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c00:	69db      	ldr	r3, [r3, #28]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006c14:	f021 010c 	bic.w	r1, r1, #12
 8006c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006c22:	430b      	orrs	r3, r1
 8006c24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	695b      	ldr	r3, [r3, #20]
 8006c2e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c36:	6999      	ldr	r1, [r3, #24]
 8006c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	ea40 0301 	orr.w	r3, r0, r1
 8006c42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	4b8f      	ldr	r3, [pc, #572]	@ (8006e88 <UART_SetConfig+0x2cc>)
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d005      	beq.n	8006c5c <UART_SetConfig+0xa0>
 8006c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	4b8d      	ldr	r3, [pc, #564]	@ (8006e8c <UART_SetConfig+0x2d0>)
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d104      	bne.n	8006c66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c5c:	f7fe fca0 	bl	80055a0 <HAL_RCC_GetPCLK2Freq>
 8006c60:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006c64:	e003      	b.n	8006c6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c66:	f7fe fc87 	bl	8005578 <HAL_RCC_GetPCLK1Freq>
 8006c6a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c72:	69db      	ldr	r3, [r3, #28]
 8006c74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c78:	f040 810c 	bne.w	8006e94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c80:	2200      	movs	r2, #0
 8006c82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006c86:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006c8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006c8e:	4622      	mov	r2, r4
 8006c90:	462b      	mov	r3, r5
 8006c92:	1891      	adds	r1, r2, r2
 8006c94:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006c96:	415b      	adcs	r3, r3
 8006c98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006c9e:	4621      	mov	r1, r4
 8006ca0:	eb12 0801 	adds.w	r8, r2, r1
 8006ca4:	4629      	mov	r1, r5
 8006ca6:	eb43 0901 	adc.w	r9, r3, r1
 8006caa:	f04f 0200 	mov.w	r2, #0
 8006cae:	f04f 0300 	mov.w	r3, #0
 8006cb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006cb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cbe:	4690      	mov	r8, r2
 8006cc0:	4699      	mov	r9, r3
 8006cc2:	4623      	mov	r3, r4
 8006cc4:	eb18 0303 	adds.w	r3, r8, r3
 8006cc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006ccc:	462b      	mov	r3, r5
 8006cce:	eb49 0303 	adc.w	r3, r9, r3
 8006cd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006ce2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006ce6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006cea:	460b      	mov	r3, r1
 8006cec:	18db      	adds	r3, r3, r3
 8006cee:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	eb42 0303 	adc.w	r3, r2, r3
 8006cf6:	657b      	str	r3, [r7, #84]	@ 0x54
 8006cf8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006cfc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006d00:	f7f9 fab6 	bl	8000270 <__aeabi_uldivmod>
 8006d04:	4602      	mov	r2, r0
 8006d06:	460b      	mov	r3, r1
 8006d08:	4b61      	ldr	r3, [pc, #388]	@ (8006e90 <UART_SetConfig+0x2d4>)
 8006d0a:	fba3 2302 	umull	r2, r3, r3, r2
 8006d0e:	095b      	lsrs	r3, r3, #5
 8006d10:	011c      	lsls	r4, r3, #4
 8006d12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d16:	2200      	movs	r2, #0
 8006d18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d1c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006d20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006d24:	4642      	mov	r2, r8
 8006d26:	464b      	mov	r3, r9
 8006d28:	1891      	adds	r1, r2, r2
 8006d2a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006d2c:	415b      	adcs	r3, r3
 8006d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006d34:	4641      	mov	r1, r8
 8006d36:	eb12 0a01 	adds.w	sl, r2, r1
 8006d3a:	4649      	mov	r1, r9
 8006d3c:	eb43 0b01 	adc.w	fp, r3, r1
 8006d40:	f04f 0200 	mov.w	r2, #0
 8006d44:	f04f 0300 	mov.w	r3, #0
 8006d48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d54:	4692      	mov	sl, r2
 8006d56:	469b      	mov	fp, r3
 8006d58:	4643      	mov	r3, r8
 8006d5a:	eb1a 0303 	adds.w	r3, sl, r3
 8006d5e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d62:	464b      	mov	r3, r9
 8006d64:	eb4b 0303 	adc.w	r3, fp, r3
 8006d68:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d78:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006d7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006d80:	460b      	mov	r3, r1
 8006d82:	18db      	adds	r3, r3, r3
 8006d84:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d86:	4613      	mov	r3, r2
 8006d88:	eb42 0303 	adc.w	r3, r2, r3
 8006d8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006d92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006d96:	f7f9 fa6b 	bl	8000270 <__aeabi_uldivmod>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	4611      	mov	r1, r2
 8006da0:	4b3b      	ldr	r3, [pc, #236]	@ (8006e90 <UART_SetConfig+0x2d4>)
 8006da2:	fba3 2301 	umull	r2, r3, r3, r1
 8006da6:	095b      	lsrs	r3, r3, #5
 8006da8:	2264      	movs	r2, #100	@ 0x64
 8006daa:	fb02 f303 	mul.w	r3, r2, r3
 8006dae:	1acb      	subs	r3, r1, r3
 8006db0:	00db      	lsls	r3, r3, #3
 8006db2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006db6:	4b36      	ldr	r3, [pc, #216]	@ (8006e90 <UART_SetConfig+0x2d4>)
 8006db8:	fba3 2302 	umull	r2, r3, r3, r2
 8006dbc:	095b      	lsrs	r3, r3, #5
 8006dbe:	005b      	lsls	r3, r3, #1
 8006dc0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006dc4:	441c      	add	r4, r3
 8006dc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006dd0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006dd4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006dd8:	4642      	mov	r2, r8
 8006dda:	464b      	mov	r3, r9
 8006ddc:	1891      	adds	r1, r2, r2
 8006dde:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006de0:	415b      	adcs	r3, r3
 8006de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006de4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006de8:	4641      	mov	r1, r8
 8006dea:	1851      	adds	r1, r2, r1
 8006dec:	6339      	str	r1, [r7, #48]	@ 0x30
 8006dee:	4649      	mov	r1, r9
 8006df0:	414b      	adcs	r3, r1
 8006df2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006df4:	f04f 0200 	mov.w	r2, #0
 8006df8:	f04f 0300 	mov.w	r3, #0
 8006dfc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006e00:	4659      	mov	r1, fp
 8006e02:	00cb      	lsls	r3, r1, #3
 8006e04:	4651      	mov	r1, sl
 8006e06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e0a:	4651      	mov	r1, sl
 8006e0c:	00ca      	lsls	r2, r1, #3
 8006e0e:	4610      	mov	r0, r2
 8006e10:	4619      	mov	r1, r3
 8006e12:	4603      	mov	r3, r0
 8006e14:	4642      	mov	r2, r8
 8006e16:	189b      	adds	r3, r3, r2
 8006e18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e1c:	464b      	mov	r3, r9
 8006e1e:	460a      	mov	r2, r1
 8006e20:	eb42 0303 	adc.w	r3, r2, r3
 8006e24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006e34:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006e38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	18db      	adds	r3, r3, r3
 8006e40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e42:	4613      	mov	r3, r2
 8006e44:	eb42 0303 	adc.w	r3, r2, r3
 8006e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006e4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006e52:	f7f9 fa0d 	bl	8000270 <__aeabi_uldivmod>
 8006e56:	4602      	mov	r2, r0
 8006e58:	460b      	mov	r3, r1
 8006e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e90 <UART_SetConfig+0x2d4>)
 8006e5c:	fba3 1302 	umull	r1, r3, r3, r2
 8006e60:	095b      	lsrs	r3, r3, #5
 8006e62:	2164      	movs	r1, #100	@ 0x64
 8006e64:	fb01 f303 	mul.w	r3, r1, r3
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	00db      	lsls	r3, r3, #3
 8006e6c:	3332      	adds	r3, #50	@ 0x32
 8006e6e:	4a08      	ldr	r2, [pc, #32]	@ (8006e90 <UART_SetConfig+0x2d4>)
 8006e70:	fba2 2303 	umull	r2, r3, r2, r3
 8006e74:	095b      	lsrs	r3, r3, #5
 8006e76:	f003 0207 	and.w	r2, r3, #7
 8006e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4422      	add	r2, r4
 8006e82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e84:	e106      	b.n	8007094 <UART_SetConfig+0x4d8>
 8006e86:	bf00      	nop
 8006e88:	40011000 	.word	0x40011000
 8006e8c:	40011400 	.word	0x40011400
 8006e90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006e9e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006ea2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006ea6:	4642      	mov	r2, r8
 8006ea8:	464b      	mov	r3, r9
 8006eaa:	1891      	adds	r1, r2, r2
 8006eac:	6239      	str	r1, [r7, #32]
 8006eae:	415b      	adcs	r3, r3
 8006eb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006eb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006eb6:	4641      	mov	r1, r8
 8006eb8:	1854      	adds	r4, r2, r1
 8006eba:	4649      	mov	r1, r9
 8006ebc:	eb43 0501 	adc.w	r5, r3, r1
 8006ec0:	f04f 0200 	mov.w	r2, #0
 8006ec4:	f04f 0300 	mov.w	r3, #0
 8006ec8:	00eb      	lsls	r3, r5, #3
 8006eca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ece:	00e2      	lsls	r2, r4, #3
 8006ed0:	4614      	mov	r4, r2
 8006ed2:	461d      	mov	r5, r3
 8006ed4:	4643      	mov	r3, r8
 8006ed6:	18e3      	adds	r3, r4, r3
 8006ed8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006edc:	464b      	mov	r3, r9
 8006ede:	eb45 0303 	adc.w	r3, r5, r3
 8006ee2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006ef2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006ef6:	f04f 0200 	mov.w	r2, #0
 8006efa:	f04f 0300 	mov.w	r3, #0
 8006efe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006f02:	4629      	mov	r1, r5
 8006f04:	008b      	lsls	r3, r1, #2
 8006f06:	4621      	mov	r1, r4
 8006f08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f0c:	4621      	mov	r1, r4
 8006f0e:	008a      	lsls	r2, r1, #2
 8006f10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006f14:	f7f9 f9ac 	bl	8000270 <__aeabi_uldivmod>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	4b60      	ldr	r3, [pc, #384]	@ (80070a0 <UART_SetConfig+0x4e4>)
 8006f1e:	fba3 2302 	umull	r2, r3, r3, r2
 8006f22:	095b      	lsrs	r3, r3, #5
 8006f24:	011c      	lsls	r4, r3, #4
 8006f26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f30:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006f34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006f38:	4642      	mov	r2, r8
 8006f3a:	464b      	mov	r3, r9
 8006f3c:	1891      	adds	r1, r2, r2
 8006f3e:	61b9      	str	r1, [r7, #24]
 8006f40:	415b      	adcs	r3, r3
 8006f42:	61fb      	str	r3, [r7, #28]
 8006f44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f48:	4641      	mov	r1, r8
 8006f4a:	1851      	adds	r1, r2, r1
 8006f4c:	6139      	str	r1, [r7, #16]
 8006f4e:	4649      	mov	r1, r9
 8006f50:	414b      	adcs	r3, r1
 8006f52:	617b      	str	r3, [r7, #20]
 8006f54:	f04f 0200 	mov.w	r2, #0
 8006f58:	f04f 0300 	mov.w	r3, #0
 8006f5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f60:	4659      	mov	r1, fp
 8006f62:	00cb      	lsls	r3, r1, #3
 8006f64:	4651      	mov	r1, sl
 8006f66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f6a:	4651      	mov	r1, sl
 8006f6c:	00ca      	lsls	r2, r1, #3
 8006f6e:	4610      	mov	r0, r2
 8006f70:	4619      	mov	r1, r3
 8006f72:	4603      	mov	r3, r0
 8006f74:	4642      	mov	r2, r8
 8006f76:	189b      	adds	r3, r3, r2
 8006f78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f7c:	464b      	mov	r3, r9
 8006f7e:	460a      	mov	r2, r1
 8006f80:	eb42 0303 	adc.w	r3, r2, r3
 8006f84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f92:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006f94:	f04f 0200 	mov.w	r2, #0
 8006f98:	f04f 0300 	mov.w	r3, #0
 8006f9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006fa0:	4649      	mov	r1, r9
 8006fa2:	008b      	lsls	r3, r1, #2
 8006fa4:	4641      	mov	r1, r8
 8006fa6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006faa:	4641      	mov	r1, r8
 8006fac:	008a      	lsls	r2, r1, #2
 8006fae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006fb2:	f7f9 f95d 	bl	8000270 <__aeabi_uldivmod>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	460b      	mov	r3, r1
 8006fba:	4611      	mov	r1, r2
 8006fbc:	4b38      	ldr	r3, [pc, #224]	@ (80070a0 <UART_SetConfig+0x4e4>)
 8006fbe:	fba3 2301 	umull	r2, r3, r3, r1
 8006fc2:	095b      	lsrs	r3, r3, #5
 8006fc4:	2264      	movs	r2, #100	@ 0x64
 8006fc6:	fb02 f303 	mul.w	r3, r2, r3
 8006fca:	1acb      	subs	r3, r1, r3
 8006fcc:	011b      	lsls	r3, r3, #4
 8006fce:	3332      	adds	r3, #50	@ 0x32
 8006fd0:	4a33      	ldr	r2, [pc, #204]	@ (80070a0 <UART_SetConfig+0x4e4>)
 8006fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd6:	095b      	lsrs	r3, r3, #5
 8006fd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006fdc:	441c      	add	r4, r3
 8006fde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	673b      	str	r3, [r7, #112]	@ 0x70
 8006fe6:	677a      	str	r2, [r7, #116]	@ 0x74
 8006fe8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006fec:	4642      	mov	r2, r8
 8006fee:	464b      	mov	r3, r9
 8006ff0:	1891      	adds	r1, r2, r2
 8006ff2:	60b9      	str	r1, [r7, #8]
 8006ff4:	415b      	adcs	r3, r3
 8006ff6:	60fb      	str	r3, [r7, #12]
 8006ff8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ffc:	4641      	mov	r1, r8
 8006ffe:	1851      	adds	r1, r2, r1
 8007000:	6039      	str	r1, [r7, #0]
 8007002:	4649      	mov	r1, r9
 8007004:	414b      	adcs	r3, r1
 8007006:	607b      	str	r3, [r7, #4]
 8007008:	f04f 0200 	mov.w	r2, #0
 800700c:	f04f 0300 	mov.w	r3, #0
 8007010:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007014:	4659      	mov	r1, fp
 8007016:	00cb      	lsls	r3, r1, #3
 8007018:	4651      	mov	r1, sl
 800701a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800701e:	4651      	mov	r1, sl
 8007020:	00ca      	lsls	r2, r1, #3
 8007022:	4610      	mov	r0, r2
 8007024:	4619      	mov	r1, r3
 8007026:	4603      	mov	r3, r0
 8007028:	4642      	mov	r2, r8
 800702a:	189b      	adds	r3, r3, r2
 800702c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800702e:	464b      	mov	r3, r9
 8007030:	460a      	mov	r2, r1
 8007032:	eb42 0303 	adc.w	r3, r2, r3
 8007036:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	663b      	str	r3, [r7, #96]	@ 0x60
 8007042:	667a      	str	r2, [r7, #100]	@ 0x64
 8007044:	f04f 0200 	mov.w	r2, #0
 8007048:	f04f 0300 	mov.w	r3, #0
 800704c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007050:	4649      	mov	r1, r9
 8007052:	008b      	lsls	r3, r1, #2
 8007054:	4641      	mov	r1, r8
 8007056:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800705a:	4641      	mov	r1, r8
 800705c:	008a      	lsls	r2, r1, #2
 800705e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007062:	f7f9 f905 	bl	8000270 <__aeabi_uldivmod>
 8007066:	4602      	mov	r2, r0
 8007068:	460b      	mov	r3, r1
 800706a:	4b0d      	ldr	r3, [pc, #52]	@ (80070a0 <UART_SetConfig+0x4e4>)
 800706c:	fba3 1302 	umull	r1, r3, r3, r2
 8007070:	095b      	lsrs	r3, r3, #5
 8007072:	2164      	movs	r1, #100	@ 0x64
 8007074:	fb01 f303 	mul.w	r3, r1, r3
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	011b      	lsls	r3, r3, #4
 800707c:	3332      	adds	r3, #50	@ 0x32
 800707e:	4a08      	ldr	r2, [pc, #32]	@ (80070a0 <UART_SetConfig+0x4e4>)
 8007080:	fba2 2303 	umull	r2, r3, r2, r3
 8007084:	095b      	lsrs	r3, r3, #5
 8007086:	f003 020f 	and.w	r2, r3, #15
 800708a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4422      	add	r2, r4
 8007092:	609a      	str	r2, [r3, #8]
}
 8007094:	bf00      	nop
 8007096:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800709a:	46bd      	mov	sp, r7
 800709c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070a0:	51eb851f 	.word	0x51eb851f

080070a4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80070a8:	4904      	ldr	r1, [pc, #16]	@ (80070bc <MX_FATFS_Init+0x18>)
 80070aa:	4805      	ldr	r0, [pc, #20]	@ (80070c0 <MX_FATFS_Init+0x1c>)
 80070ac:	f003 fe4e 	bl	800ad4c <FATFS_LinkDriver>
 80070b0:	4603      	mov	r3, r0
 80070b2:	461a      	mov	r2, r3
 80070b4:	4b03      	ldr	r3, [pc, #12]	@ (80070c4 <MX_FATFS_Init+0x20>)
 80070b6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80070b8:	bf00      	nop
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	200003e0 	.word	0x200003e0
 80070c0:	2000000c 	.word	0x2000000c
 80070c4:	200003dc 	.word	0x200003dc

080070c8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	4603      	mov	r3, r0
 80070d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 80070d2:	79fb      	ldrb	r3, [r7, #7]
 80070d4:	4618      	mov	r0, r3
 80070d6:	f000 f9d3 	bl	8007480 <USER_SPI_initialize>
 80070da:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3708      	adds	r7, #8
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	4603      	mov	r3, r0
 80070ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
  return USER_SPI_status(pdrv);
 80070ee:	79fb      	ldrb	r3, [r7, #7]
 80070f0:	4618      	mov	r0, r3
 80070f2:	f000 fab1 	bl	8007658 <USER_SPI_status>
 80070f6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3708      	adds	r7, #8
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	60b9      	str	r1, [r7, #8]
 8007108:	607a      	str	r2, [r7, #4]
 800710a:	603b      	str	r3, [r7, #0]
 800710c:	4603      	mov	r3, r0
 800710e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
  return USER_SPI_read(pdrv, buff, sector, count);
 8007110:	7bf8      	ldrb	r0, [r7, #15]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	68b9      	ldr	r1, [r7, #8]
 8007118:	f000 fab4 	bl	8007684 <USER_SPI_read>
 800711c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800711e:	4618      	mov	r0, r3
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b084      	sub	sp, #16
 800712a:	af00      	add	r7, sp, #0
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	607a      	str	r2, [r7, #4]
 8007130:	603b      	str	r3, [r7, #0]
 8007132:	4603      	mov	r3, r0
 8007134:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 8007136:	7bf8      	ldrb	r0, [r7, #15]
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	68b9      	ldr	r1, [r7, #8]
 800713e:	f000 fb07 	bl	8007750 <USER_SPI_write>
 8007142:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007144:	4618      	mov	r0, r3
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	4603      	mov	r3, r0
 8007154:	603a      	str	r2, [r7, #0]
 8007156:	71fb      	strb	r3, [r7, #7]
 8007158:	460b      	mov	r3, r1
 800715a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
  return USER_SPI_ioctl(pdrv, cmd, buff);
 800715c:	79b9      	ldrb	r1, [r7, #6]
 800715e:	79fb      	ldrb	r3, [r7, #7]
 8007160:	683a      	ldr	r2, [r7, #0]
 8007162:	4618      	mov	r0, r3
 8007164:	f000 fb70 	bl	8007848 <USER_SPI_ioctl>
 8007168:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800716a:	4618      	mov	r0, r3
 800716c:	3708      	adds	r7, #8
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
	...

08007174 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800717c:	f7fa fb12 	bl	80017a4 <HAL_GetTick>
 8007180:	4603      	mov	r3, r0
 8007182:	4a04      	ldr	r2, [pc, #16]	@ (8007194 <SPI_Timer_On+0x20>)
 8007184:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8007186:	4a04      	ldr	r2, [pc, #16]	@ (8007198 <SPI_Timer_On+0x24>)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6013      	str	r3, [r2, #0]
}
 800718c:	bf00      	nop
 800718e:	3708      	adds	r7, #8
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}
 8007194:	200003e8 	.word	0x200003e8
 8007198:	200003ec 	.word	0x200003ec

0800719c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800719c:	b580      	push	{r7, lr}
 800719e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80071a0:	f7fa fb00 	bl	80017a4 <HAL_GetTick>
 80071a4:	4602      	mov	r2, r0
 80071a6:	4b06      	ldr	r3, [pc, #24]	@ (80071c0 <SPI_Timer_Status+0x24>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	1ad2      	subs	r2, r2, r3
 80071ac:	4b05      	ldr	r3, [pc, #20]	@ (80071c4 <SPI_Timer_Status+0x28>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	bf34      	ite	cc
 80071b4:	2301      	movcc	r3, #1
 80071b6:	2300      	movcs	r3, #0
 80071b8:	b2db      	uxtb	r3, r3
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	200003e8 	.word	0x200003e8
 80071c4:	200003ec 	.word	0x200003ec

080071c8 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b086      	sub	sp, #24
 80071cc:	af02      	add	r7, sp, #8
 80071ce:	4603      	mov	r3, r0
 80071d0:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80071d2:	f107 020f 	add.w	r2, r7, #15
 80071d6:	1df9      	adds	r1, r7, #7
 80071d8:	2332      	movs	r3, #50	@ 0x32
 80071da:	9300      	str	r3, [sp, #0]
 80071dc:	2301      	movs	r3, #1
 80071de:	4804      	ldr	r0, [pc, #16]	@ (80071f0 <xchg_spi+0x28>)
 80071e0:	f7fe ff75 	bl	80060ce <HAL_SPI_TransmitReceive>
    return rxDat;
 80071e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	200002ec 	.word	0x200002ec

080071f4 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80071f4:	b590      	push	{r4, r7, lr}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80071fe:	2300      	movs	r3, #0
 8007200:	60fb      	str	r3, [r7, #12]
 8007202:	e00a      	b.n	800721a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	18d4      	adds	r4, r2, r3
 800720a:	20ff      	movs	r0, #255	@ 0xff
 800720c:	f7ff ffdc 	bl	80071c8 <xchg_spi>
 8007210:	4603      	mov	r3, r0
 8007212:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	3301      	adds	r3, #1
 8007218:	60fb      	str	r3, [r7, #12]
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	429a      	cmp	r2, r3
 8007220:	d3f0      	bcc.n	8007204 <rcvr_spi_multi+0x10>
	}
}
 8007222:	bf00      	nop
 8007224:	bf00      	nop
 8007226:	3714      	adds	r7, #20
 8007228:	46bd      	mov	sp, r7
 800722a:	bd90      	pop	{r4, r7, pc}

0800722c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	b29a      	uxth	r2, r3
 800723a:	f04f 33ff 	mov.w	r3, #4294967295
 800723e:	6879      	ldr	r1, [r7, #4]
 8007240:	4803      	ldr	r0, [pc, #12]	@ (8007250 <xmit_spi_multi+0x24>)
 8007242:	f7fe fe00 	bl	8005e46 <HAL_SPI_Transmit>
}
 8007246:	bf00      	nop
 8007248:	3708      	adds	r7, #8
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	200002ec 	.word	0x200002ec

08007254 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b086      	sub	sp, #24
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800725c:	f7fa faa2 	bl	80017a4 <HAL_GetTick>
 8007260:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8007266:	20ff      	movs	r0, #255	@ 0xff
 8007268:	f7ff ffae 	bl	80071c8 <xchg_spi>
 800726c:	4603      	mov	r3, r0
 800726e:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8007270:	7bfb      	ldrb	r3, [r7, #15]
 8007272:	2bff      	cmp	r3, #255	@ 0xff
 8007274:	d007      	beq.n	8007286 <wait_ready+0x32>
 8007276:	f7fa fa95 	bl	80017a4 <HAL_GetTick>
 800727a:	4602      	mov	r2, r0
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	1ad3      	subs	r3, r2, r3
 8007280:	693a      	ldr	r2, [r7, #16]
 8007282:	429a      	cmp	r2, r3
 8007284:	d8ef      	bhi.n	8007266 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8007286:	7bfb      	ldrb	r3, [r7, #15]
 8007288:	2bff      	cmp	r3, #255	@ 0xff
 800728a:	bf0c      	ite	eq
 800728c:	2301      	moveq	r3, #1
 800728e:	2300      	movne	r3, #0
 8007290:	b2db      	uxtb	r3, r3
}
 8007292:	4618      	mov	r0, r3
 8007294:	3718      	adds	r7, #24
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
	...

0800729c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80072a0:	2201      	movs	r2, #1
 80072a2:	2120      	movs	r1, #32
 80072a4:	4803      	ldr	r0, [pc, #12]	@ (80072b4 <despiselect+0x18>)
 80072a6:	f7fb fb8b 	bl	80029c0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80072aa:	20ff      	movs	r0, #255	@ 0xff
 80072ac:	f7ff ff8c 	bl	80071c8 <xchg_spi>

}
 80072b0:	bf00      	nop
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	40020800 	.word	0x40020800

080072b8 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80072bc:	2200      	movs	r2, #0
 80072be:	2120      	movs	r1, #32
 80072c0:	4809      	ldr	r0, [pc, #36]	@ (80072e8 <spiselect+0x30>)
 80072c2:	f7fb fb7d 	bl	80029c0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80072c6:	20ff      	movs	r0, #255	@ 0xff
 80072c8:	f7ff ff7e 	bl	80071c8 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80072cc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80072d0:	f7ff ffc0 	bl	8007254 <wait_ready>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d001      	beq.n	80072de <spiselect+0x26>
 80072da:	2301      	movs	r3, #1
 80072dc:	e002      	b.n	80072e4 <spiselect+0x2c>

	despiselect();
 80072de:	f7ff ffdd 	bl	800729c <despiselect>
	return 0;	/* Timeout */
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	40020800 	.word	0x40020800

080072ec <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80072f6:	20c8      	movs	r0, #200	@ 0xc8
 80072f8:	f7ff ff3c 	bl	8007174 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80072fc:	20ff      	movs	r0, #255	@ 0xff
 80072fe:	f7ff ff63 	bl	80071c8 <xchg_spi>
 8007302:	4603      	mov	r3, r0
 8007304:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8007306:	7bfb      	ldrb	r3, [r7, #15]
 8007308:	2bff      	cmp	r3, #255	@ 0xff
 800730a:	d104      	bne.n	8007316 <rcvr_datablock+0x2a>
 800730c:	f7ff ff46 	bl	800719c <SPI_Timer_Status>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1f2      	bne.n	80072fc <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8007316:	7bfb      	ldrb	r3, [r7, #15]
 8007318:	2bfe      	cmp	r3, #254	@ 0xfe
 800731a:	d001      	beq.n	8007320 <rcvr_datablock+0x34>
 800731c:	2300      	movs	r3, #0
 800731e:	e00a      	b.n	8007336 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8007320:	6839      	ldr	r1, [r7, #0]
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f7ff ff66 	bl	80071f4 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8007328:	20ff      	movs	r0, #255	@ 0xff
 800732a:	f7ff ff4d 	bl	80071c8 <xchg_spi>
 800732e:	20ff      	movs	r0, #255	@ 0xff
 8007330:	f7ff ff4a 	bl	80071c8 <xchg_spi>

	return 1;						/* Function succeeded */
 8007334:	2301      	movs	r3, #1
}
 8007336:	4618      	mov	r0, r3
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b084      	sub	sp, #16
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
 8007346:	460b      	mov	r3, r1
 8007348:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800734a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800734e:	f7ff ff81 	bl	8007254 <wait_ready>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d101      	bne.n	800735c <xmit_datablock+0x1e>
 8007358:	2300      	movs	r3, #0
 800735a:	e01e      	b.n	800739a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800735c:	78fb      	ldrb	r3, [r7, #3]
 800735e:	4618      	mov	r0, r3
 8007360:	f7ff ff32 	bl	80071c8 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8007364:	78fb      	ldrb	r3, [r7, #3]
 8007366:	2bfd      	cmp	r3, #253	@ 0xfd
 8007368:	d016      	beq.n	8007398 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800736a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f7ff ff5c 	bl	800722c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8007374:	20ff      	movs	r0, #255	@ 0xff
 8007376:	f7ff ff27 	bl	80071c8 <xchg_spi>
 800737a:	20ff      	movs	r0, #255	@ 0xff
 800737c:	f7ff ff24 	bl	80071c8 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8007380:	20ff      	movs	r0, #255	@ 0xff
 8007382:	f7ff ff21 	bl	80071c8 <xchg_spi>
 8007386:	4603      	mov	r3, r0
 8007388:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800738a:	7bfb      	ldrb	r3, [r7, #15]
 800738c:	f003 031f 	and.w	r3, r3, #31
 8007390:	2b05      	cmp	r3, #5
 8007392:	d001      	beq.n	8007398 <xmit_datablock+0x5a>
 8007394:	2300      	movs	r3, #0
 8007396:	e000      	b.n	800739a <xmit_datablock+0x5c>
	}
	return 1;
 8007398:	2301      	movs	r3, #1
}
 800739a:	4618      	mov	r0, r3
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b084      	sub	sp, #16
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	4603      	mov	r3, r0
 80073aa:	6039      	str	r1, [r7, #0]
 80073ac:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80073ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	da0e      	bge.n	80073d4 <send_cmd+0x32>
		cmd &= 0x7F;
 80073b6:	79fb      	ldrb	r3, [r7, #7]
 80073b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073bc:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80073be:	2100      	movs	r1, #0
 80073c0:	2037      	movs	r0, #55	@ 0x37
 80073c2:	f7ff ffee 	bl	80073a2 <send_cmd>
 80073c6:	4603      	mov	r3, r0
 80073c8:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80073ca:	7bbb      	ldrb	r3, [r7, #14]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d901      	bls.n	80073d4 <send_cmd+0x32>
 80073d0:	7bbb      	ldrb	r3, [r7, #14]
 80073d2:	e051      	b.n	8007478 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80073d4:	79fb      	ldrb	r3, [r7, #7]
 80073d6:	2b0c      	cmp	r3, #12
 80073d8:	d008      	beq.n	80073ec <send_cmd+0x4a>
		despiselect();
 80073da:	f7ff ff5f 	bl	800729c <despiselect>
		if (!spiselect()) return 0xFF;
 80073de:	f7ff ff6b 	bl	80072b8 <spiselect>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d101      	bne.n	80073ec <send_cmd+0x4a>
 80073e8:	23ff      	movs	r3, #255	@ 0xff
 80073ea:	e045      	b.n	8007478 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80073ec:	79fb      	ldrb	r3, [r7, #7]
 80073ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7ff fee7 	bl	80071c8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	0e1b      	lsrs	r3, r3, #24
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	4618      	mov	r0, r3
 8007402:	f7ff fee1 	bl	80071c8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	0c1b      	lsrs	r3, r3, #16
 800740a:	b2db      	uxtb	r3, r3
 800740c:	4618      	mov	r0, r3
 800740e:	f7ff fedb 	bl	80071c8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	0a1b      	lsrs	r3, r3, #8
 8007416:	b2db      	uxtb	r3, r3
 8007418:	4618      	mov	r0, r3
 800741a:	f7ff fed5 	bl	80071c8 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	b2db      	uxtb	r3, r3
 8007422:	4618      	mov	r0, r3
 8007424:	f7ff fed0 	bl	80071c8 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8007428:	2301      	movs	r3, #1
 800742a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800742c:	79fb      	ldrb	r3, [r7, #7]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d101      	bne.n	8007436 <send_cmd+0x94>
 8007432:	2395      	movs	r3, #149	@ 0x95
 8007434:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8007436:	79fb      	ldrb	r3, [r7, #7]
 8007438:	2b08      	cmp	r3, #8
 800743a:	d101      	bne.n	8007440 <send_cmd+0x9e>
 800743c:	2387      	movs	r3, #135	@ 0x87
 800743e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8007440:	7bfb      	ldrb	r3, [r7, #15]
 8007442:	4618      	mov	r0, r3
 8007444:	f7ff fec0 	bl	80071c8 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8007448:	79fb      	ldrb	r3, [r7, #7]
 800744a:	2b0c      	cmp	r3, #12
 800744c:	d102      	bne.n	8007454 <send_cmd+0xb2>
 800744e:	20ff      	movs	r0, #255	@ 0xff
 8007450:	f7ff feba 	bl	80071c8 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8007454:	230a      	movs	r3, #10
 8007456:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8007458:	20ff      	movs	r0, #255	@ 0xff
 800745a:	f7ff feb5 	bl	80071c8 <xchg_spi>
 800745e:	4603      	mov	r3, r0
 8007460:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8007462:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007466:	2b00      	cmp	r3, #0
 8007468:	da05      	bge.n	8007476 <send_cmd+0xd4>
 800746a:	7bfb      	ldrb	r3, [r7, #15]
 800746c:	3b01      	subs	r3, #1
 800746e:	73fb      	strb	r3, [r7, #15]
 8007470:	7bfb      	ldrb	r3, [r7, #15]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1f0      	bne.n	8007458 <send_cmd+0xb6>

	return res;							/* Return received response */
 8007476:	7bbb      	ldrb	r3, [r7, #14]
}
 8007478:	4618      	mov	r0, r3
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007480:	b590      	push	{r4, r7, lr}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	4603      	mov	r3, r0
 8007488:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800748a:	79fb      	ldrb	r3, [r7, #7]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d001      	beq.n	8007494 <USER_SPI_initialize+0x14>
 8007490:	2301      	movs	r3, #1
 8007492:	e0d6      	b.n	8007642 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8007494:	4b6d      	ldr	r3, [pc, #436]	@ (800764c <USER_SPI_initialize+0x1cc>)
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	b2db      	uxtb	r3, r3
 800749a:	f003 0302 	and.w	r3, r3, #2
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d003      	beq.n	80074aa <USER_SPI_initialize+0x2a>
 80074a2:	4b6a      	ldr	r3, [pc, #424]	@ (800764c <USER_SPI_initialize+0x1cc>)
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	e0cb      	b.n	8007642 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80074aa:	4b69      	ldr	r3, [pc, #420]	@ (8007650 <USER_SPI_initialize+0x1d0>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80074b4:	4b66      	ldr	r3, [pc, #408]	@ (8007650 <USER_SPI_initialize+0x1d0>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 80074bc:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80074be:	230a      	movs	r3, #10
 80074c0:	73fb      	strb	r3, [r7, #15]
 80074c2:	e005      	b.n	80074d0 <USER_SPI_initialize+0x50>
 80074c4:	20ff      	movs	r0, #255	@ 0xff
 80074c6:	f7ff fe7f 	bl	80071c8 <xchg_spi>
 80074ca:	7bfb      	ldrb	r3, [r7, #15]
 80074cc:	3b01      	subs	r3, #1
 80074ce:	73fb      	strb	r3, [r7, #15]
 80074d0:	7bfb      	ldrb	r3, [r7, #15]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d1f6      	bne.n	80074c4 <USER_SPI_initialize+0x44>

	ty = 0;
 80074d6:	2300      	movs	r3, #0
 80074d8:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80074da:	2100      	movs	r1, #0
 80074dc:	2000      	movs	r0, #0
 80074de:	f7ff ff60 	bl	80073a2 <send_cmd>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	f040 808b 	bne.w	8007600 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80074ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80074ee:	f7ff fe41 	bl	8007174 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80074f2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80074f6:	2008      	movs	r0, #8
 80074f8:	f7ff ff53 	bl	80073a2 <send_cmd>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d151      	bne.n	80075a6 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8007502:	2300      	movs	r3, #0
 8007504:	73fb      	strb	r3, [r7, #15]
 8007506:	e00d      	b.n	8007524 <USER_SPI_initialize+0xa4>
 8007508:	7bfc      	ldrb	r4, [r7, #15]
 800750a:	20ff      	movs	r0, #255	@ 0xff
 800750c:	f7ff fe5c 	bl	80071c8 <xchg_spi>
 8007510:	4603      	mov	r3, r0
 8007512:	461a      	mov	r2, r3
 8007514:	f104 0310 	add.w	r3, r4, #16
 8007518:	443b      	add	r3, r7
 800751a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800751e:	7bfb      	ldrb	r3, [r7, #15]
 8007520:	3301      	adds	r3, #1
 8007522:	73fb      	strb	r3, [r7, #15]
 8007524:	7bfb      	ldrb	r3, [r7, #15]
 8007526:	2b03      	cmp	r3, #3
 8007528:	d9ee      	bls.n	8007508 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800752a:	7abb      	ldrb	r3, [r7, #10]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d167      	bne.n	8007600 <USER_SPI_initialize+0x180>
 8007530:	7afb      	ldrb	r3, [r7, #11]
 8007532:	2baa      	cmp	r3, #170	@ 0xaa
 8007534:	d164      	bne.n	8007600 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8007536:	bf00      	nop
 8007538:	f7ff fe30 	bl	800719c <SPI_Timer_Status>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d007      	beq.n	8007552 <USER_SPI_initialize+0xd2>
 8007542:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007546:	20a9      	movs	r0, #169	@ 0xa9
 8007548:	f7ff ff2b 	bl	80073a2 <send_cmd>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d1f2      	bne.n	8007538 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8007552:	f7ff fe23 	bl	800719c <SPI_Timer_Status>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d051      	beq.n	8007600 <USER_SPI_initialize+0x180>
 800755c:	2100      	movs	r1, #0
 800755e:	203a      	movs	r0, #58	@ 0x3a
 8007560:	f7ff ff1f 	bl	80073a2 <send_cmd>
 8007564:	4603      	mov	r3, r0
 8007566:	2b00      	cmp	r3, #0
 8007568:	d14a      	bne.n	8007600 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800756a:	2300      	movs	r3, #0
 800756c:	73fb      	strb	r3, [r7, #15]
 800756e:	e00d      	b.n	800758c <USER_SPI_initialize+0x10c>
 8007570:	7bfc      	ldrb	r4, [r7, #15]
 8007572:	20ff      	movs	r0, #255	@ 0xff
 8007574:	f7ff fe28 	bl	80071c8 <xchg_spi>
 8007578:	4603      	mov	r3, r0
 800757a:	461a      	mov	r2, r3
 800757c:	f104 0310 	add.w	r3, r4, #16
 8007580:	443b      	add	r3, r7
 8007582:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007586:	7bfb      	ldrb	r3, [r7, #15]
 8007588:	3301      	adds	r3, #1
 800758a:	73fb      	strb	r3, [r7, #15]
 800758c:	7bfb      	ldrb	r3, [r7, #15]
 800758e:	2b03      	cmp	r3, #3
 8007590:	d9ee      	bls.n	8007570 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8007592:	7a3b      	ldrb	r3, [r7, #8]
 8007594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007598:	2b00      	cmp	r3, #0
 800759a:	d001      	beq.n	80075a0 <USER_SPI_initialize+0x120>
 800759c:	230c      	movs	r3, #12
 800759e:	e000      	b.n	80075a2 <USER_SPI_initialize+0x122>
 80075a0:	2304      	movs	r3, #4
 80075a2:	737b      	strb	r3, [r7, #13]
 80075a4:	e02c      	b.n	8007600 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80075a6:	2100      	movs	r1, #0
 80075a8:	20a9      	movs	r0, #169	@ 0xa9
 80075aa:	f7ff fefa 	bl	80073a2 <send_cmd>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d804      	bhi.n	80075be <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80075b4:	2302      	movs	r3, #2
 80075b6:	737b      	strb	r3, [r7, #13]
 80075b8:	23a9      	movs	r3, #169	@ 0xa9
 80075ba:	73bb      	strb	r3, [r7, #14]
 80075bc:	e003      	b.n	80075c6 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80075be:	2301      	movs	r3, #1
 80075c0:	737b      	strb	r3, [r7, #13]
 80075c2:	2301      	movs	r3, #1
 80075c4:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80075c6:	bf00      	nop
 80075c8:	f7ff fde8 	bl	800719c <SPI_Timer_Status>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d007      	beq.n	80075e2 <USER_SPI_initialize+0x162>
 80075d2:	7bbb      	ldrb	r3, [r7, #14]
 80075d4:	2100      	movs	r1, #0
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7ff fee3 	bl	80073a2 <send_cmd>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d1f2      	bne.n	80075c8 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80075e2:	f7ff fddb 	bl	800719c <SPI_Timer_Status>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d007      	beq.n	80075fc <USER_SPI_initialize+0x17c>
 80075ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80075f0:	2010      	movs	r0, #16
 80075f2:	f7ff fed6 	bl	80073a2 <send_cmd>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d001      	beq.n	8007600 <USER_SPI_initialize+0x180>
				ty = 0;
 80075fc:	2300      	movs	r3, #0
 80075fe:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8007600:	4a14      	ldr	r2, [pc, #80]	@ (8007654 <USER_SPI_initialize+0x1d4>)
 8007602:	7b7b      	ldrb	r3, [r7, #13]
 8007604:	7013      	strb	r3, [r2, #0]
	despiselect();
 8007606:	f7ff fe49 	bl	800729c <despiselect>

	if (ty) {			/* OK */
 800760a:	7b7b      	ldrb	r3, [r7, #13]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d012      	beq.n	8007636 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8007610:	4b0f      	ldr	r3, [pc, #60]	@ (8007650 <USER_SPI_initialize+0x1d0>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800761a:	4b0d      	ldr	r3, [pc, #52]	@ (8007650 <USER_SPI_initialize+0x1d0>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f042 0210 	orr.w	r2, r2, #16
 8007622:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8007624:	4b09      	ldr	r3, [pc, #36]	@ (800764c <USER_SPI_initialize+0x1cc>)
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	b2db      	uxtb	r3, r3
 800762a:	f023 0301 	bic.w	r3, r3, #1
 800762e:	b2da      	uxtb	r2, r3
 8007630:	4b06      	ldr	r3, [pc, #24]	@ (800764c <USER_SPI_initialize+0x1cc>)
 8007632:	701a      	strb	r2, [r3, #0]
 8007634:	e002      	b.n	800763c <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8007636:	4b05      	ldr	r3, [pc, #20]	@ (800764c <USER_SPI_initialize+0x1cc>)
 8007638:	2201      	movs	r2, #1
 800763a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800763c:	4b03      	ldr	r3, [pc, #12]	@ (800764c <USER_SPI_initialize+0x1cc>)
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	b2db      	uxtb	r3, r3
}
 8007642:	4618      	mov	r0, r3
 8007644:	3714      	adds	r7, #20
 8007646:	46bd      	mov	sp, r7
 8007648:	bd90      	pop	{r4, r7, pc}
 800764a:	bf00      	nop
 800764c:	20000020 	.word	0x20000020
 8007650:	200002ec 	.word	0x200002ec
 8007654:	200003e4 	.word	0x200003e4

08007658 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	4603      	mov	r3, r0
 8007660:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8007662:	79fb      	ldrb	r3, [r7, #7]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d001      	beq.n	800766c <USER_SPI_status+0x14>
 8007668:	2301      	movs	r3, #1
 800766a:	e002      	b.n	8007672 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800766c:	4b04      	ldr	r3, [pc, #16]	@ (8007680 <USER_SPI_status+0x28>)
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	b2db      	uxtb	r3, r3
}
 8007672:	4618      	mov	r0, r3
 8007674:	370c      	adds	r7, #12
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr
 800767e:	bf00      	nop
 8007680:	20000020 	.word	0x20000020

08007684 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	60b9      	str	r1, [r7, #8]
 800768c:	607a      	str	r2, [r7, #4]
 800768e:	603b      	str	r3, [r7, #0]
 8007690:	4603      	mov	r3, r0
 8007692:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007694:	7bfb      	ldrb	r3, [r7, #15]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d102      	bne.n	80076a0 <USER_SPI_read+0x1c>
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d101      	bne.n	80076a4 <USER_SPI_read+0x20>
 80076a0:	2304      	movs	r3, #4
 80076a2:	e04d      	b.n	8007740 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80076a4:	4b28      	ldr	r3, [pc, #160]	@ (8007748 <USER_SPI_read+0xc4>)
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	f003 0301 	and.w	r3, r3, #1
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d001      	beq.n	80076b6 <USER_SPI_read+0x32>
 80076b2:	2303      	movs	r3, #3
 80076b4:	e044      	b.n	8007740 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80076b6:	4b25      	ldr	r3, [pc, #148]	@ (800774c <USER_SPI_read+0xc8>)
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	f003 0308 	and.w	r3, r3, #8
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d102      	bne.n	80076c8 <USER_SPI_read+0x44>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	025b      	lsls	r3, r3, #9
 80076c6:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d111      	bne.n	80076f2 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80076ce:	6879      	ldr	r1, [r7, #4]
 80076d0:	2011      	movs	r0, #17
 80076d2:	f7ff fe66 	bl	80073a2 <send_cmd>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d129      	bne.n	8007730 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80076dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80076e0:	68b8      	ldr	r0, [r7, #8]
 80076e2:	f7ff fe03 	bl	80072ec <rcvr_datablock>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d021      	beq.n	8007730 <USER_SPI_read+0xac>
			count = 0;
 80076ec:	2300      	movs	r3, #0
 80076ee:	603b      	str	r3, [r7, #0]
 80076f0:	e01e      	b.n	8007730 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80076f2:	6879      	ldr	r1, [r7, #4]
 80076f4:	2012      	movs	r0, #18
 80076f6:	f7ff fe54 	bl	80073a2 <send_cmd>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d117      	bne.n	8007730 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8007700:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007704:	68b8      	ldr	r0, [r7, #8]
 8007706:	f7ff fdf1 	bl	80072ec <rcvr_datablock>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00a      	beq.n	8007726 <USER_SPI_read+0xa2>
				buff += 512;
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8007716:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	3b01      	subs	r3, #1
 800771c:	603b      	str	r3, [r7, #0]
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1ed      	bne.n	8007700 <USER_SPI_read+0x7c>
 8007724:	e000      	b.n	8007728 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8007726:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8007728:	2100      	movs	r1, #0
 800772a:	200c      	movs	r0, #12
 800772c:	f7ff fe39 	bl	80073a2 <send_cmd>
		}
	}
	despiselect();
 8007730:	f7ff fdb4 	bl	800729c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	bf14      	ite	ne
 800773a:	2301      	movne	r3, #1
 800773c:	2300      	moveq	r3, #0
 800773e:	b2db      	uxtb	r3, r3
}
 8007740:	4618      	mov	r0, r3
 8007742:	3710      	adds	r7, #16
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	20000020 	.word	0x20000020
 800774c:	200003e4 	.word	0x200003e4

08007750 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	60b9      	str	r1, [r7, #8]
 8007758:	607a      	str	r2, [r7, #4]
 800775a:	603b      	str	r3, [r7, #0]
 800775c:	4603      	mov	r3, r0
 800775e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007760:	7bfb      	ldrb	r3, [r7, #15]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d102      	bne.n	800776c <USER_SPI_write+0x1c>
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d101      	bne.n	8007770 <USER_SPI_write+0x20>
 800776c:	2304      	movs	r3, #4
 800776e:	e063      	b.n	8007838 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8007770:	4b33      	ldr	r3, [pc, #204]	@ (8007840 <USER_SPI_write+0xf0>)
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	b2db      	uxtb	r3, r3
 8007776:	f003 0301 	and.w	r3, r3, #1
 800777a:	2b00      	cmp	r3, #0
 800777c:	d001      	beq.n	8007782 <USER_SPI_write+0x32>
 800777e:	2303      	movs	r3, #3
 8007780:	e05a      	b.n	8007838 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8007782:	4b2f      	ldr	r3, [pc, #188]	@ (8007840 <USER_SPI_write+0xf0>)
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	b2db      	uxtb	r3, r3
 8007788:	f003 0304 	and.w	r3, r3, #4
 800778c:	2b00      	cmp	r3, #0
 800778e:	d001      	beq.n	8007794 <USER_SPI_write+0x44>
 8007790:	2302      	movs	r3, #2
 8007792:	e051      	b.n	8007838 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8007794:	4b2b      	ldr	r3, [pc, #172]	@ (8007844 <USER_SPI_write+0xf4>)
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	f003 0308 	and.w	r3, r3, #8
 800779c:	2b00      	cmp	r3, #0
 800779e:	d102      	bne.n	80077a6 <USER_SPI_write+0x56>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	025b      	lsls	r3, r3, #9
 80077a4:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d110      	bne.n	80077ce <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80077ac:	6879      	ldr	r1, [r7, #4]
 80077ae:	2018      	movs	r0, #24
 80077b0:	f7ff fdf7 	bl	80073a2 <send_cmd>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d136      	bne.n	8007828 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80077ba:	21fe      	movs	r1, #254	@ 0xfe
 80077bc:	68b8      	ldr	r0, [r7, #8]
 80077be:	f7ff fdbe 	bl	800733e <xmit_datablock>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d02f      	beq.n	8007828 <USER_SPI_write+0xd8>
			count = 0;
 80077c8:	2300      	movs	r3, #0
 80077ca:	603b      	str	r3, [r7, #0]
 80077cc:	e02c      	b.n	8007828 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80077ce:	4b1d      	ldr	r3, [pc, #116]	@ (8007844 <USER_SPI_write+0xf4>)
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	f003 0306 	and.w	r3, r3, #6
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d003      	beq.n	80077e2 <USER_SPI_write+0x92>
 80077da:	6839      	ldr	r1, [r7, #0]
 80077dc:	2097      	movs	r0, #151	@ 0x97
 80077de:	f7ff fde0 	bl	80073a2 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80077e2:	6879      	ldr	r1, [r7, #4]
 80077e4:	2019      	movs	r0, #25
 80077e6:	f7ff fddc 	bl	80073a2 <send_cmd>
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d11b      	bne.n	8007828 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80077f0:	21fc      	movs	r1, #252	@ 0xfc
 80077f2:	68b8      	ldr	r0, [r7, #8]
 80077f4:	f7ff fda3 	bl	800733e <xmit_datablock>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00a      	beq.n	8007814 <USER_SPI_write+0xc4>
				buff += 512;
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8007804:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	3b01      	subs	r3, #1
 800780a:	603b      	str	r3, [r7, #0]
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d1ee      	bne.n	80077f0 <USER_SPI_write+0xa0>
 8007812:	e000      	b.n	8007816 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8007814:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8007816:	21fd      	movs	r1, #253	@ 0xfd
 8007818:	2000      	movs	r0, #0
 800781a:	f7ff fd90 	bl	800733e <xmit_datablock>
 800781e:	4603      	mov	r3, r0
 8007820:	2b00      	cmp	r3, #0
 8007822:	d101      	bne.n	8007828 <USER_SPI_write+0xd8>
 8007824:	2301      	movs	r3, #1
 8007826:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8007828:	f7ff fd38 	bl	800729c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	bf14      	ite	ne
 8007832:	2301      	movne	r3, #1
 8007834:	2300      	moveq	r3, #0
 8007836:	b2db      	uxtb	r3, r3
}
 8007838:	4618      	mov	r0, r3
 800783a:	3710      	adds	r7, #16
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}
 8007840:	20000020 	.word	0x20000020
 8007844:	200003e4 	.word	0x200003e4

08007848 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b08c      	sub	sp, #48	@ 0x30
 800784c:	af00      	add	r7, sp, #0
 800784e:	4603      	mov	r3, r0
 8007850:	603a      	str	r2, [r7, #0]
 8007852:	71fb      	strb	r3, [r7, #7]
 8007854:	460b      	mov	r3, r1
 8007856:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8007858:	79fb      	ldrb	r3, [r7, #7]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d001      	beq.n	8007862 <USER_SPI_ioctl+0x1a>
 800785e:	2304      	movs	r3, #4
 8007860:	e15a      	b.n	8007b18 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007862:	4baf      	ldr	r3, [pc, #700]	@ (8007b20 <USER_SPI_ioctl+0x2d8>)
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	b2db      	uxtb	r3, r3
 8007868:	f003 0301 	and.w	r3, r3, #1
 800786c:	2b00      	cmp	r3, #0
 800786e:	d001      	beq.n	8007874 <USER_SPI_ioctl+0x2c>
 8007870:	2303      	movs	r3, #3
 8007872:	e151      	b.n	8007b18 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800787a:	79bb      	ldrb	r3, [r7, #6]
 800787c:	2b04      	cmp	r3, #4
 800787e:	f200 8136 	bhi.w	8007aee <USER_SPI_ioctl+0x2a6>
 8007882:	a201      	add	r2, pc, #4	@ (adr r2, 8007888 <USER_SPI_ioctl+0x40>)
 8007884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007888:	0800789d 	.word	0x0800789d
 800788c:	080078b1 	.word	0x080078b1
 8007890:	08007aef 	.word	0x08007aef
 8007894:	0800795d 	.word	0x0800795d
 8007898:	08007a53 	.word	0x08007a53
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800789c:	f7ff fd0c 	bl	80072b8 <spiselect>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	f000 8127 	beq.w	8007af6 <USER_SPI_ioctl+0x2ae>
 80078a8:	2300      	movs	r3, #0
 80078aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80078ae:	e122      	b.n	8007af6 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80078b0:	2100      	movs	r1, #0
 80078b2:	2009      	movs	r0, #9
 80078b4:	f7ff fd75 	bl	80073a2 <send_cmd>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	f040 811d 	bne.w	8007afa <USER_SPI_ioctl+0x2b2>
 80078c0:	f107 030c 	add.w	r3, r7, #12
 80078c4:	2110      	movs	r1, #16
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7ff fd10 	bl	80072ec <rcvr_datablock>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	f000 8113 	beq.w	8007afa <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80078d4:	7b3b      	ldrb	r3, [r7, #12]
 80078d6:	099b      	lsrs	r3, r3, #6
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d111      	bne.n	8007902 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80078de:	7d7b      	ldrb	r3, [r7, #21]
 80078e0:	461a      	mov	r2, r3
 80078e2:	7d3b      	ldrb	r3, [r7, #20]
 80078e4:	021b      	lsls	r3, r3, #8
 80078e6:	4413      	add	r3, r2
 80078e8:	461a      	mov	r2, r3
 80078ea:	7cfb      	ldrb	r3, [r7, #19]
 80078ec:	041b      	lsls	r3, r3, #16
 80078ee:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 80078f2:	4413      	add	r3, r2
 80078f4:	3301      	adds	r3, #1
 80078f6:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	029a      	lsls	r2, r3, #10
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	601a      	str	r2, [r3, #0]
 8007900:	e028      	b.n	8007954 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8007902:	7c7b      	ldrb	r3, [r7, #17]
 8007904:	f003 030f 	and.w	r3, r3, #15
 8007908:	b2da      	uxtb	r2, r3
 800790a:	7dbb      	ldrb	r3, [r7, #22]
 800790c:	09db      	lsrs	r3, r3, #7
 800790e:	b2db      	uxtb	r3, r3
 8007910:	4413      	add	r3, r2
 8007912:	b2da      	uxtb	r2, r3
 8007914:	7d7b      	ldrb	r3, [r7, #21]
 8007916:	005b      	lsls	r3, r3, #1
 8007918:	b2db      	uxtb	r3, r3
 800791a:	f003 0306 	and.w	r3, r3, #6
 800791e:	b2db      	uxtb	r3, r3
 8007920:	4413      	add	r3, r2
 8007922:	b2db      	uxtb	r3, r3
 8007924:	3302      	adds	r3, #2
 8007926:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800792a:	7d3b      	ldrb	r3, [r7, #20]
 800792c:	099b      	lsrs	r3, r3, #6
 800792e:	b2db      	uxtb	r3, r3
 8007930:	461a      	mov	r2, r3
 8007932:	7cfb      	ldrb	r3, [r7, #19]
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	441a      	add	r2, r3
 8007938:	7cbb      	ldrb	r3, [r7, #18]
 800793a:	029b      	lsls	r3, r3, #10
 800793c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007940:	4413      	add	r3, r2
 8007942:	3301      	adds	r3, #1
 8007944:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8007946:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800794a:	3b09      	subs	r3, #9
 800794c:	69fa      	ldr	r2, [r7, #28]
 800794e:	409a      	lsls	r2, r3
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8007954:	2300      	movs	r3, #0
 8007956:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800795a:	e0ce      	b.n	8007afa <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800795c:	4b71      	ldr	r3, [pc, #452]	@ (8007b24 <USER_SPI_ioctl+0x2dc>)
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	f003 0304 	and.w	r3, r3, #4
 8007964:	2b00      	cmp	r3, #0
 8007966:	d031      	beq.n	80079cc <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8007968:	2100      	movs	r1, #0
 800796a:	208d      	movs	r0, #141	@ 0x8d
 800796c:	f7ff fd19 	bl	80073a2 <send_cmd>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	f040 80c3 	bne.w	8007afe <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8007978:	20ff      	movs	r0, #255	@ 0xff
 800797a:	f7ff fc25 	bl	80071c8 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800797e:	f107 030c 	add.w	r3, r7, #12
 8007982:	2110      	movs	r1, #16
 8007984:	4618      	mov	r0, r3
 8007986:	f7ff fcb1 	bl	80072ec <rcvr_datablock>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	f000 80b6 	beq.w	8007afe <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8007992:	2330      	movs	r3, #48	@ 0x30
 8007994:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8007998:	e007      	b.n	80079aa <USER_SPI_ioctl+0x162>
 800799a:	20ff      	movs	r0, #255	@ 0xff
 800799c:	f7ff fc14 	bl	80071c8 <xchg_spi>
 80079a0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80079a4:	3b01      	subs	r3, #1
 80079a6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80079aa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1f3      	bne.n	800799a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80079b2:	7dbb      	ldrb	r3, [r7, #22]
 80079b4:	091b      	lsrs	r3, r3, #4
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	461a      	mov	r2, r3
 80079ba:	2310      	movs	r3, #16
 80079bc:	fa03 f202 	lsl.w	r2, r3, r2
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80079c4:	2300      	movs	r3, #0
 80079c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80079ca:	e098      	b.n	8007afe <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80079cc:	2100      	movs	r1, #0
 80079ce:	2009      	movs	r0, #9
 80079d0:	f7ff fce7 	bl	80073a2 <send_cmd>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f040 8091 	bne.w	8007afe <USER_SPI_ioctl+0x2b6>
 80079dc:	f107 030c 	add.w	r3, r7, #12
 80079e0:	2110      	movs	r1, #16
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7ff fc82 	bl	80072ec <rcvr_datablock>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	f000 8087 	beq.w	8007afe <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80079f0:	4b4c      	ldr	r3, [pc, #304]	@ (8007b24 <USER_SPI_ioctl+0x2dc>)
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	f003 0302 	and.w	r3, r3, #2
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d012      	beq.n	8007a22 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80079fc:	7dbb      	ldrb	r3, [r7, #22]
 80079fe:	005b      	lsls	r3, r3, #1
 8007a00:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8007a04:	7dfa      	ldrb	r2, [r7, #23]
 8007a06:	09d2      	lsrs	r2, r2, #7
 8007a08:	b2d2      	uxtb	r2, r2
 8007a0a:	4413      	add	r3, r2
 8007a0c:	1c5a      	adds	r2, r3, #1
 8007a0e:	7e7b      	ldrb	r3, [r7, #25]
 8007a10:	099b      	lsrs	r3, r3, #6
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	3b01      	subs	r3, #1
 8007a16:	fa02 f303 	lsl.w	r3, r2, r3
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	601a      	str	r2, [r3, #0]
 8007a20:	e013      	b.n	8007a4a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8007a22:	7dbb      	ldrb	r3, [r7, #22]
 8007a24:	109b      	asrs	r3, r3, #2
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	f003 031f 	and.w	r3, r3, #31
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	7dfa      	ldrb	r2, [r7, #23]
 8007a30:	00d2      	lsls	r2, r2, #3
 8007a32:	f002 0218 	and.w	r2, r2, #24
 8007a36:	7df9      	ldrb	r1, [r7, #23]
 8007a38:	0949      	lsrs	r1, r1, #5
 8007a3a:	b2c9      	uxtb	r1, r1
 8007a3c:	440a      	add	r2, r1
 8007a3e:	3201      	adds	r2, #1
 8007a40:	fb02 f303 	mul.w	r3, r2, r3
 8007a44:	461a      	mov	r2, r3
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8007a50:	e055      	b.n	8007afe <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007a52:	4b34      	ldr	r3, [pc, #208]	@ (8007b24 <USER_SPI_ioctl+0x2dc>)
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	f003 0306 	and.w	r3, r3, #6
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d051      	beq.n	8007b02 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007a5e:	f107 020c 	add.w	r2, r7, #12
 8007a62:	79fb      	ldrb	r3, [r7, #7]
 8007a64:	210b      	movs	r1, #11
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7ff feee 	bl	8007848 <USER_SPI_ioctl>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d149      	bne.n	8007b06 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007a72:	7b3b      	ldrb	r3, [r7, #12]
 8007a74:	099b      	lsrs	r3, r3, #6
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d104      	bne.n	8007a86 <USER_SPI_ioctl+0x23e>
 8007a7c:	7dbb      	ldrb	r3, [r7, #22]
 8007a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d041      	beq.n	8007b0a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	623b      	str	r3, [r7, #32]
 8007a8a:	6a3b      	ldr	r3, [r7, #32]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a90:	6a3b      	ldr	r3, [r7, #32]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8007a96:	4b23      	ldr	r3, [pc, #140]	@ (8007b24 <USER_SPI_ioctl+0x2dc>)
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	f003 0308 	and.w	r3, r3, #8
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d105      	bne.n	8007aae <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8007aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aa4:	025b      	lsls	r3, r3, #9
 8007aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aaa:	025b      	lsls	r3, r3, #9
 8007aac:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8007aae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ab0:	2020      	movs	r0, #32
 8007ab2:	f7ff fc76 	bl	80073a2 <send_cmd>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d128      	bne.n	8007b0e <USER_SPI_ioctl+0x2c6>
 8007abc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007abe:	2021      	movs	r0, #33	@ 0x21
 8007ac0:	f7ff fc6f 	bl	80073a2 <send_cmd>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d121      	bne.n	8007b0e <USER_SPI_ioctl+0x2c6>
 8007aca:	2100      	movs	r1, #0
 8007acc:	2026      	movs	r0, #38	@ 0x26
 8007ace:	f7ff fc68 	bl	80073a2 <send_cmd>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d11a      	bne.n	8007b0e <USER_SPI_ioctl+0x2c6>
 8007ad8:	f247 5030 	movw	r0, #30000	@ 0x7530
 8007adc:	f7ff fbba 	bl	8007254 <wait_ready>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d013      	beq.n	8007b0e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8007aec:	e00f      	b.n	8007b0e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8007aee:	2304      	movs	r3, #4
 8007af0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007af4:	e00c      	b.n	8007b10 <USER_SPI_ioctl+0x2c8>
		break;
 8007af6:	bf00      	nop
 8007af8:	e00a      	b.n	8007b10 <USER_SPI_ioctl+0x2c8>
		break;
 8007afa:	bf00      	nop
 8007afc:	e008      	b.n	8007b10 <USER_SPI_ioctl+0x2c8>
		break;
 8007afe:	bf00      	nop
 8007b00:	e006      	b.n	8007b10 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007b02:	bf00      	nop
 8007b04:	e004      	b.n	8007b10 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007b06:	bf00      	nop
 8007b08:	e002      	b.n	8007b10 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007b0a:	bf00      	nop
 8007b0c:	e000      	b.n	8007b10 <USER_SPI_ioctl+0x2c8>
		break;
 8007b0e:	bf00      	nop
	}

	despiselect();
 8007b10:	f7ff fbc4 	bl	800729c <despiselect>

	return res;
 8007b14:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3730      	adds	r7, #48	@ 0x30
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	20000020 	.word	0x20000020
 8007b24:	200003e4 	.word	0x200003e4

08007b28 <bno055_init>:
 *  make sure your changes will not
 *  affect the reference value of the parameter
 *  (Better case don't change the reference value of the parameter)
 */
BNO055_RETURN_FUNCTION_TYPE bno055_init(struct bno055_t *bno055)
{
 8007b28:	b590      	push	{r4, r7, lr}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8007b30:	23ff      	movs	r3, #255	@ 0xff
 8007b32:	73fb      	strb	r3, [r7, #15]
    u8 data_u8 = BNO055_INIT_VALUE;
 8007b34:	2300      	movs	r3, #0
 8007b36:	73bb      	strb	r3, [r7, #14]
    u8 bno055_page_zero_u8 = BNO055_PAGE_ZERO;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	737b      	strb	r3, [r7, #13]

    /* Array holding the Software revision id
     */
    u8 a_SW_ID_u8[BNO055_REV_ID_SIZE] = { BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	813b      	strh	r3, [r7, #8]

    /* stuct parameters are assign to bno055*/
    p_bno055 = bno055;
 8007b40:	4a58      	ldr	r2, [pc, #352]	@ (8007ca4 <bno055_init+0x17c>)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6013      	str	r3, [r2, #0]

    /* Write the default page as zero*/
    com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8007b46:	4b57      	ldr	r3, [pc, #348]	@ (8007ca4 <bno055_init+0x17c>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68dc      	ldr	r4, [r3, #12]
 8007b4c:	4b55      	ldr	r3, [pc, #340]	@ (8007ca4 <bno055_init+0x17c>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	7a58      	ldrb	r0, [r3, #9]
 8007b52:	f107 020d 	add.w	r2, r7, #13
 8007b56:	2301      	movs	r3, #1
 8007b58:	2107      	movs	r1, #7
 8007b5a:	47a0      	blx	r4
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	73fb      	strb	r3, [r7, #15]
                                               &bno055_page_zero_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);

    /* Read the chip id of the sensor from page
     * zero 0x00 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8007b60:	4b50      	ldr	r3, [pc, #320]	@ (8007ca4 <bno055_init+0x17c>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	691c      	ldr	r4, [r3, #16]
 8007b66:	4b4f      	ldr	r3, [pc, #316]	@ (8007ca4 <bno055_init+0x17c>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	7a58      	ldrb	r0, [r3, #9]
 8007b6c:	f107 020e 	add.w	r2, r7, #14
 8007b70:	2301      	movs	r3, #1
 8007b72:	2100      	movs	r1, #0
 8007b74:	47a0      	blx	r4
 8007b76:	4603      	mov	r3, r0
 8007b78:	b2da      	uxtb	r2, r3
 8007b7a:	7bfb      	ldrb	r3, [r7, #15]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	73fb      	strb	r3, [r7, #15]
                                               BNO055_CHIP_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->chip_id = data_u8;
 8007b82:	4b48      	ldr	r3, [pc, #288]	@ (8007ca4 <bno055_init+0x17c>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	7bba      	ldrb	r2, [r7, #14]
 8007b88:	701a      	strb	r2, [r3, #0]

    /* Read the accel revision id from page
     * zero 0x01 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8007b8a:	4b46      	ldr	r3, [pc, #280]	@ (8007ca4 <bno055_init+0x17c>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	691c      	ldr	r4, [r3, #16]
 8007b90:	4b44      	ldr	r3, [pc, #272]	@ (8007ca4 <bno055_init+0x17c>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	7a58      	ldrb	r0, [r3, #9]
 8007b96:	f107 020e 	add.w	r2, r7, #14
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	2101      	movs	r1, #1
 8007b9e:	47a0      	blx	r4
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	b2da      	uxtb	r2, r3
 8007ba4:	7bfb      	ldrb	r3, [r7, #15]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	73fb      	strb	r3, [r7, #15]
                                               BNO055_ACCEL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->accel_rev_id = data_u8;
 8007bac:	4b3d      	ldr	r3, [pc, #244]	@ (8007ca4 <bno055_init+0x17c>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	7bba      	ldrb	r2, [r7, #14]
 8007bb2:	715a      	strb	r2, [r3, #5]

    /* Read the mag revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8007bb4:	4b3b      	ldr	r3, [pc, #236]	@ (8007ca4 <bno055_init+0x17c>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	691c      	ldr	r4, [r3, #16]
 8007bba:	4b3a      	ldr	r3, [pc, #232]	@ (8007ca4 <bno055_init+0x17c>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	7a58      	ldrb	r0, [r3, #9]
 8007bc0:	f107 020e 	add.w	r2, r7, #14
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	2102      	movs	r1, #2
 8007bc8:	47a0      	blx	r4
 8007bca:	4603      	mov	r3, r0
 8007bcc:	b2da      	uxtb	r2, r3
 8007bce:	7bfb      	ldrb	r3, [r7, #15]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	73fb      	strb	r3, [r7, #15]
                                               BNO055_MAG_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->mag_rev_id = data_u8;
 8007bd6:	4b33      	ldr	r3, [pc, #204]	@ (8007ca4 <bno055_init+0x17c>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	7bba      	ldrb	r2, [r7, #14]
 8007bdc:	719a      	strb	r2, [r3, #6]

    /* Read the gyro revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8007bde:	4b31      	ldr	r3, [pc, #196]	@ (8007ca4 <bno055_init+0x17c>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	691c      	ldr	r4, [r3, #16]
 8007be4:	4b2f      	ldr	r3, [pc, #188]	@ (8007ca4 <bno055_init+0x17c>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	7a58      	ldrb	r0, [r3, #9]
 8007bea:	f107 020e 	add.w	r2, r7, #14
 8007bee:	2301      	movs	r3, #1
 8007bf0:	2103      	movs	r1, #3
 8007bf2:	47a0      	blx	r4
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	b2da      	uxtb	r2, r3
 8007bf8:	7bfb      	ldrb	r3, [r7, #15]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	73fb      	strb	r3, [r7, #15]
                                               BNO055_GYRO_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->gyro_rev_id = data_u8;
 8007c00:	4b28      	ldr	r3, [pc, #160]	@ (8007ca4 <bno055_init+0x17c>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	7bba      	ldrb	r2, [r7, #14]
 8007c06:	71da      	strb	r2, [r3, #7]

    /* Read the boot loader revision from page
     * zero 0x06 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8007c08:	4b26      	ldr	r3, [pc, #152]	@ (8007ca4 <bno055_init+0x17c>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	691c      	ldr	r4, [r3, #16]
 8007c0e:	4b25      	ldr	r3, [pc, #148]	@ (8007ca4 <bno055_init+0x17c>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	7a58      	ldrb	r0, [r3, #9]
 8007c14:	f107 020e 	add.w	r2, r7, #14
 8007c18:	2301      	movs	r3, #1
 8007c1a:	2106      	movs	r1, #6
 8007c1c:	47a0      	blx	r4
 8007c1e:	4603      	mov	r3, r0
 8007c20:	b2da      	uxtb	r2, r3
 8007c22:	7bfb      	ldrb	r3, [r7, #15]
 8007c24:	4413      	add	r3, r2
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	73fb      	strb	r3, [r7, #15]
                                               BNO055_BL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->bl_rev_id = data_u8;
 8007c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8007ca4 <bno055_init+0x17c>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	7bba      	ldrb	r2, [r7, #14]
 8007c30:	721a      	strb	r2, [r3, #8]

    /* Read the software revision id from page
     * zero 0x04 and 0x05 register( 2 bytes of data)*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8007c32:	4b1c      	ldr	r3, [pc, #112]	@ (8007ca4 <bno055_init+0x17c>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	691c      	ldr	r4, [r3, #16]
 8007c38:	4b1a      	ldr	r3, [pc, #104]	@ (8007ca4 <bno055_init+0x17c>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	7a58      	ldrb	r0, [r3, #9]
 8007c3e:	f107 0208 	add.w	r2, r7, #8
 8007c42:	2302      	movs	r3, #2
 8007c44:	2104      	movs	r1, #4
 8007c46:	47a0      	blx	r4
 8007c48:	4603      	mov	r3, r0
 8007c4a:	b2da      	uxtb	r2, r3
 8007c4c:	7bfb      	ldrb	r3, [r7, #15]
 8007c4e:	4413      	add	r3, r2
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	73fb      	strb	r3, [r7, #15]
                                               BNO055_SW_REV_ID_LSB_REG,
                                               a_SW_ID_u8,
                                               BNO055_LSB_MSB_READ_LENGTH);
    a_SW_ID_u8[BNO055_SW_ID_LSB] = BNO055_GET_BITSLICE(a_SW_ID_u8[BNO055_SW_ID_LSB], BNO055_SW_REV_ID_LSB);
 8007c54:	7a3b      	ldrb	r3, [r7, #8]
 8007c56:	723b      	strb	r3, [r7, #8]
    p_bno055->sw_rev_id =
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 8007c58:	7a7b      	ldrb	r3, [r7, #9]
 8007c5a:	021b      	lsls	r3, r3, #8
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	7a3b      	ldrb	r3, [r7, #8]
 8007c60:	4619      	mov	r1, r3
    p_bno055->sw_rev_id =
 8007c62:	4b10      	ldr	r3, [pc, #64]	@ (8007ca4 <bno055_init+0x17c>)
 8007c64:	681b      	ldr	r3, [r3, #0]
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 8007c66:	430a      	orrs	r2, r1
 8007c68:	b292      	uxth	r2, r2
    p_bno055->sw_rev_id =
 8007c6a:	805a      	strh	r2, [r3, #2]

    /* Read the page id from the register 0x07*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8007c6c:	4b0d      	ldr	r3, [pc, #52]	@ (8007ca4 <bno055_init+0x17c>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	691c      	ldr	r4, [r3, #16]
 8007c72:	4b0c      	ldr	r3, [pc, #48]	@ (8007ca4 <bno055_init+0x17c>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	7a58      	ldrb	r0, [r3, #9]
 8007c78:	f107 020e 	add.w	r2, r7, #14
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	2107      	movs	r1, #7
 8007c80:	47a0      	blx	r4
 8007c82:	4603      	mov	r3, r0
 8007c84:	b2da      	uxtb	r2, r3
 8007c86:	7bfb      	ldrb	r3, [r7, #15]
 8007c88:	4413      	add	r3, r2
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	73fb      	strb	r3, [r7, #15]
                                               BNO055_PAGE_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->page_id = data_u8;
 8007c8e:	4b05      	ldr	r3, [pc, #20]	@ (8007ca4 <bno055_init+0x17c>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	7bba      	ldrb	r2, [r7, #14]
 8007c94:	711a      	strb	r2, [r3, #4]

    return com_rslt;
 8007c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3714      	adds	r7, #20
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd90      	pop	{r4, r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	200003f0 	.word	0x200003f0

08007ca8 <bno055_write_register>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_register(u8 addr_u8, u8 *data_u8, u8 len_u8)
{
 8007ca8:	b590      	push	{r4, r7, lr}
 8007caa:	b085      	sub	sp, #20
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	4603      	mov	r3, r0
 8007cb0:	6039      	str	r1, [r7, #0]
 8007cb2:	71fb      	strb	r3, [r7, #7]
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	71bb      	strb	r3, [r7, #6]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8007cb8:	23ff      	movs	r3, #255	@ 0xff
 8007cba:	73fb      	strb	r3, [r7, #15]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8007cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8007cf0 <bno055_write_register+0x48>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d102      	bne.n	8007cca <bno055_write_register+0x22>
    {
        return BNO055_E_NULL_PTR;
 8007cc4:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8007cc8:	e00d      	b.n	8007ce6 <bno055_write_register+0x3e>
    }
    else
    {
        /* Write the values of respective given register */
        com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr, addr_u8, data_u8, len_u8);
 8007cca:	4b09      	ldr	r3, [pc, #36]	@ (8007cf0 <bno055_write_register+0x48>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	68dc      	ldr	r4, [r3, #12]
 8007cd0:	4b07      	ldr	r3, [pc, #28]	@ (8007cf0 <bno055_write_register+0x48>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	7a58      	ldrb	r0, [r3, #9]
 8007cd6:	79bb      	ldrb	r3, [r7, #6]
 8007cd8:	79f9      	ldrb	r1, [r7, #7]
 8007cda:	683a      	ldr	r2, [r7, #0]
 8007cdc:	47a0      	blx	r4
 8007cde:	4603      	mov	r3, r0
 8007ce0:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8007ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3714      	adds	r7, #20
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd90      	pop	{r4, r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	200003f0 	.word	0x200003f0

08007cf4 <bno055_write_page_id>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_page_id(u8 page_id_u8)
{
 8007cf4:	b590      	push	{r4, r7, lr}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	71fb      	strb	r3, [r7, #7]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8007cfe:	23ff      	movs	r3, #255	@ 0xff
 8007d00:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8007d02:	2300      	movs	r3, #0
 8007d04:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8007d06:	4b1e      	ldr	r3, [pc, #120]	@ (8007d80 <bno055_write_page_id+0x8c>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d102      	bne.n	8007d14 <bno055_write_page_id+0x20>
    {
        return BNO055_E_NULL_PTR;
 8007d0e:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8007d12:	e030      	b.n	8007d76 <bno055_write_page_id+0x82>
    }
    else
    {
        /* Read the current page*/
        com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8007d14:	4b1a      	ldr	r3, [pc, #104]	@ (8007d80 <bno055_write_page_id+0x8c>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	691c      	ldr	r4, [r3, #16]
 8007d1a:	4b19      	ldr	r3, [pc, #100]	@ (8007d80 <bno055_write_page_id+0x8c>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	7a58      	ldrb	r0, [r3, #9]
 8007d20:	f107 020e 	add.w	r2, r7, #14
 8007d24:	2301      	movs	r3, #1
 8007d26:	2107      	movs	r1, #7
 8007d28:	47a0      	blx	r4
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	73fb      	strb	r3, [r7, #15]
                                                  BNO055_PAGE_ID_REG,
                                                  &data_u8r,
                                                  BNO055_GEN_READ_WRITE_LENGTH);

        /* Check condition for communication BNO055_SUCCESS*/
        if (com_rslt == BNO055_SUCCESS)
 8007d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d11b      	bne.n	8007d6e <bno055_write_page_id+0x7a>
        {
            data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_PAGE_ID, page_id_u8);
 8007d36:	79fb      	ldrb	r3, [r7, #7]
 8007d38:	73bb      	strb	r3, [r7, #14]

            /* Write the page id*/
            com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8007d3a:	4b11      	ldr	r3, [pc, #68]	@ (8007d80 <bno055_write_page_id+0x8c>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68dc      	ldr	r4, [r3, #12]
 8007d40:	4b0f      	ldr	r3, [pc, #60]	@ (8007d80 <bno055_write_page_id+0x8c>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	7a58      	ldrb	r0, [r3, #9]
 8007d46:	f107 020e 	add.w	r2, r7, #14
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	2107      	movs	r1, #7
 8007d4e:	47a0      	blx	r4
 8007d50:	4603      	mov	r3, r0
 8007d52:	b2da      	uxtb	r2, r3
 8007d54:	7bfb      	ldrb	r3, [r7, #15]
 8007d56:	4413      	add	r3, r2
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	73fb      	strb	r3, [r7, #15]
                                                        BNO055_PAGE_ID_REG,
                                                        &data_u8r,
                                                        BNO055_GEN_READ_WRITE_LENGTH);
            if (com_rslt == BNO055_SUCCESS)
 8007d5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d106      	bne.n	8007d72 <bno055_write_page_id+0x7e>
            {
                p_bno055->page_id = page_id_u8;
 8007d64:	4b06      	ldr	r3, [pc, #24]	@ (8007d80 <bno055_write_page_id+0x8c>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	79fa      	ldrb	r2, [r7, #7]
 8007d6a:	711a      	strb	r2, [r3, #4]
 8007d6c:	e001      	b.n	8007d72 <bno055_write_page_id+0x7e>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8007d6e:	23ff      	movs	r3, #255	@ 0xff
 8007d70:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8007d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3714      	adds	r7, #20
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd90      	pop	{r4, r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	200003f0 	.word	0x200003f0

08007d84 <bno055_set_accel_unit>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_accel_unit(u8 accel_unit_u8)
{
 8007d84:	b590      	push	{r4, r7, lr}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8007d8e:	23ff      	movs	r3, #255	@ 0xff
 8007d90:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8007d92:	2300      	movs	r3, #0
 8007d94:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8007d96:	2300      	movs	r3, #0
 8007d98:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8007d9a:	23ff      	movs	r3, #255	@ 0xff
 8007d9c:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8007d9e:	4b35      	ldr	r3, [pc, #212]	@ (8007e74 <bno055_set_accel_unit+0xf0>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d102      	bne.n	8007dac <bno055_set_accel_unit+0x28>
    {
        return BNO055_E_NULL_PTR;
 8007da6:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8007daa:	e05f      	b.n	8007e6c <bno055_set_accel_unit+0xe8>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8007dac:	f107 030c 	add.w	r3, r7, #12
 8007db0:	4618      	mov	r0, r3
 8007db2:	f000 f9d5 	bl	8008160 <bno055_get_operation_mode>
 8007db6:	4603      	mov	r3, r0
 8007db8:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8007dba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d143      	bne.n	8007e4a <bno055_set_accel_unit+0xc6>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8007dc2:	7b3b      	ldrb	r3, [r7, #12]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d008      	beq.n	8007dda <bno055_set_accel_unit+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 8007dc8:	2000      	movs	r0, #0
 8007dca:	f000 fa0b 	bl	80081e4 <bno055_set_operation_mode>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	b2da      	uxtb	r2, r3
 8007dd2:	7bbb      	ldrb	r3, [r7, #14]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 8007dda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d130      	bne.n	8007e44 <bno055_set_accel_unit+0xc0>
            {
                /* Write the accel unit */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8007de2:	4b24      	ldr	r3, [pc, #144]	@ (8007e74 <bno055_set_accel_unit+0xf0>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	691c      	ldr	r4, [r3, #16]
 8007de8:	4b22      	ldr	r3, [pc, #136]	@ (8007e74 <bno055_set_accel_unit+0xf0>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	7a58      	ldrb	r0, [r3, #9]
 8007dee:	f107 020d 	add.w	r2, r7, #13
 8007df2:	2301      	movs	r3, #1
 8007df4:	213b      	movs	r1, #59	@ 0x3b
 8007df6:	47a0      	blx	r4
 8007df8:	4603      	mov	r3, r0
 8007dfa:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_ACCEL_UNIT_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8007dfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d124      	bne.n	8007e4e <bno055_set_accel_unit+0xca>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_ACCEL_UNIT, accel_unit_u8);
 8007e04:	7b7b      	ldrb	r3, [r7, #13]
 8007e06:	b25b      	sxtb	r3, r3
 8007e08:	f023 0301 	bic.w	r3, r3, #1
 8007e0c:	b25a      	sxtb	r2, r3
 8007e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e12:	f003 0301 	and.w	r3, r3, #1
 8007e16:	b25b      	sxtb	r3, r3
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	b25b      	sxtb	r3, r3
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8007e20:	4b14      	ldr	r3, [pc, #80]	@ (8007e74 <bno055_set_accel_unit+0xf0>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	68dc      	ldr	r4, [r3, #12]
 8007e26:	4b13      	ldr	r3, [pc, #76]	@ (8007e74 <bno055_set_accel_unit+0xf0>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	7a58      	ldrb	r0, [r3, #9]
 8007e2c:	f107 020d 	add.w	r2, r7, #13
 8007e30:	2301      	movs	r3, #1
 8007e32:	213b      	movs	r1, #59	@ 0x3b
 8007e34:	47a0      	blx	r4
 8007e36:	4603      	mov	r3, r0
 8007e38:	b2da      	uxtb	r2, r3
 8007e3a:	7bfb      	ldrb	r3, [r7, #15]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	73fb      	strb	r3, [r7, #15]
 8007e42:	e004      	b.n	8007e4e <bno055_set_accel_unit+0xca>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 8007e44:	23ff      	movs	r3, #255	@ 0xff
 8007e46:	73fb      	strb	r3, [r7, #15]
 8007e48:	e001      	b.n	8007e4e <bno055_set_accel_unit+0xca>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8007e4a:	23ff      	movs	r3, #255	@ 0xff
 8007e4c:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8007e4e:	7b3b      	ldrb	r3, [r7, #12]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d009      	beq.n	8007e68 <bno055_set_accel_unit+0xe4>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 8007e54:	7b3b      	ldrb	r3, [r7, #12]
 8007e56:	4618      	mov	r0, r3
 8007e58:	f000 f9c4 	bl	80081e4 <bno055_set_operation_mode>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	b2da      	uxtb	r2, r3
 8007e60:	7bfb      	ldrb	r3, [r7, #15]
 8007e62:	4413      	add	r3, r2
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8007e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3714      	adds	r7, #20
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd90      	pop	{r4, r7, pc}
 8007e74:	200003f0 	.word	0x200003f0

08007e78 <bno055_set_gyro_unit>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_gyro_unit(u8 gyro_unit_u8)
{
 8007e78:	b590      	push	{r4, r7, lr}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	4603      	mov	r3, r0
 8007e80:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8007e82:	23ff      	movs	r3, #255	@ 0xff
 8007e84:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8007e86:	2300      	movs	r3, #0
 8007e88:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8007e8e:	23ff      	movs	r3, #255	@ 0xff
 8007e90:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8007e92:	4b36      	ldr	r3, [pc, #216]	@ (8007f6c <bno055_set_gyro_unit+0xf4>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d102      	bne.n	8007ea0 <bno055_set_gyro_unit+0x28>
    {
        return BNO055_E_NULL_PTR;
 8007e9a:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8007e9e:	e060      	b.n	8007f62 <bno055_set_gyro_unit+0xea>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8007ea0:	f107 030c 	add.w	r3, r7, #12
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f000 f95b 	bl	8008160 <bno055_get_operation_mode>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8007eae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d144      	bne.n	8007f40 <bno055_set_gyro_unit+0xc8>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8007eb6:	7b3b      	ldrb	r3, [r7, #12]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d008      	beq.n	8007ece <bno055_set_gyro_unit+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 8007ebc:	2000      	movs	r0, #0
 8007ebe:	f000 f991 	bl	80081e4 <bno055_set_operation_mode>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	b2da      	uxtb	r2, r3
 8007ec6:	7bbb      	ldrb	r3, [r7, #14]
 8007ec8:	4413      	add	r3, r2
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 8007ece:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d131      	bne.n	8007f3a <bno055_set_gyro_unit+0xc2>
            {
                /* Write the gyro unit */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8007ed6:	4b25      	ldr	r3, [pc, #148]	@ (8007f6c <bno055_set_gyro_unit+0xf4>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	691c      	ldr	r4, [r3, #16]
 8007edc:	4b23      	ldr	r3, [pc, #140]	@ (8007f6c <bno055_set_gyro_unit+0xf4>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	7a58      	ldrb	r0, [r3, #9]
 8007ee2:	f107 020d 	add.w	r2, r7, #13
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	213b      	movs	r1, #59	@ 0x3b
 8007eea:	47a0      	blx	r4
 8007eec:	4603      	mov	r3, r0
 8007eee:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_GYRO_UNIT_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8007ef0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d125      	bne.n	8007f44 <bno055_set_gyro_unit+0xcc>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_GYRO_UNIT, gyro_unit_u8);
 8007ef8:	7b7b      	ldrb	r3, [r7, #13]
 8007efa:	b25b      	sxtb	r3, r3
 8007efc:	f023 0302 	bic.w	r3, r3, #2
 8007f00:	b25a      	sxtb	r2, r3
 8007f02:	79fb      	ldrb	r3, [r7, #7]
 8007f04:	005b      	lsls	r3, r3, #1
 8007f06:	b25b      	sxtb	r3, r3
 8007f08:	f003 0302 	and.w	r3, r3, #2
 8007f0c:	b25b      	sxtb	r3, r3
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	b25b      	sxtb	r3, r3
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8007f16:	4b15      	ldr	r3, [pc, #84]	@ (8007f6c <bno055_set_gyro_unit+0xf4>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68dc      	ldr	r4, [r3, #12]
 8007f1c:	4b13      	ldr	r3, [pc, #76]	@ (8007f6c <bno055_set_gyro_unit+0xf4>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	7a58      	ldrb	r0, [r3, #9]
 8007f22:	f107 020d 	add.w	r2, r7, #13
 8007f26:	2301      	movs	r3, #1
 8007f28:	213b      	movs	r1, #59	@ 0x3b
 8007f2a:	47a0      	blx	r4
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	b2da      	uxtb	r2, r3
 8007f30:	7bfb      	ldrb	r3, [r7, #15]
 8007f32:	4413      	add	r3, r2
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	73fb      	strb	r3, [r7, #15]
 8007f38:	e004      	b.n	8007f44 <bno055_set_gyro_unit+0xcc>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 8007f3a:	23ff      	movs	r3, #255	@ 0xff
 8007f3c:	73fb      	strb	r3, [r7, #15]
 8007f3e:	e001      	b.n	8007f44 <bno055_set_gyro_unit+0xcc>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8007f40:	23ff      	movs	r3, #255	@ 0xff
 8007f42:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8007f44:	7b3b      	ldrb	r3, [r7, #12]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d009      	beq.n	8007f5e <bno055_set_gyro_unit+0xe6>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 8007f4a:	7b3b      	ldrb	r3, [r7, #12]
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f000 f949 	bl	80081e4 <bno055_set_operation_mode>
 8007f52:	4603      	mov	r3, r0
 8007f54:	b2da      	uxtb	r2, r3
 8007f56:	7bfb      	ldrb	r3, [r7, #15]
 8007f58:	4413      	add	r3, r2
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8007f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3714      	adds	r7, #20
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd90      	pop	{r4, r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	200003f0 	.word	0x200003f0

08007f70 <bno055_set_euler_unit>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_euler_unit(u8 euler_unit_u8)
{
 8007f70:	b590      	push	{r4, r7, lr}
 8007f72:	b085      	sub	sp, #20
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	4603      	mov	r3, r0
 8007f78:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8007f7a:	23ff      	movs	r3, #255	@ 0xff
 8007f7c:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8007f82:	2300      	movs	r3, #0
 8007f84:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8007f86:	23ff      	movs	r3, #255	@ 0xff
 8007f88:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8007f8a:	4b36      	ldr	r3, [pc, #216]	@ (8008064 <bno055_set_euler_unit+0xf4>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d102      	bne.n	8007f98 <bno055_set_euler_unit+0x28>
    {
        return BNO055_E_NULL_PTR;
 8007f92:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8007f96:	e060      	b.n	800805a <bno055_set_euler_unit+0xea>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8007f98:	f107 030c 	add.w	r3, r7, #12
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f000 f8df 	bl	8008160 <bno055_get_operation_mode>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8007fa6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d144      	bne.n	8008038 <bno055_set_euler_unit+0xc8>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8007fae:	7b3b      	ldrb	r3, [r7, #12]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d008      	beq.n	8007fc6 <bno055_set_euler_unit+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 8007fb4:	2000      	movs	r0, #0
 8007fb6:	f000 f915 	bl	80081e4 <bno055_set_operation_mode>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	b2da      	uxtb	r2, r3
 8007fbe:	7bbb      	ldrb	r3, [r7, #14]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 8007fc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d131      	bne.n	8008032 <bno055_set_euler_unit+0xc2>
            {
                /* Write the Euler unit*/
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8007fce:	4b25      	ldr	r3, [pc, #148]	@ (8008064 <bno055_set_euler_unit+0xf4>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	691c      	ldr	r4, [r3, #16]
 8007fd4:	4b23      	ldr	r3, [pc, #140]	@ (8008064 <bno055_set_euler_unit+0xf4>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	7a58      	ldrb	r0, [r3, #9]
 8007fda:	f107 020d 	add.w	r2, r7, #13
 8007fde:	2301      	movs	r3, #1
 8007fe0:	213b      	movs	r1, #59	@ 0x3b
 8007fe2:	47a0      	blx	r4
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_EULER_UNIT_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8007fe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d125      	bne.n	800803c <bno055_set_euler_unit+0xcc>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_EULER_UNIT, euler_unit_u8);
 8007ff0:	7b7b      	ldrb	r3, [r7, #13]
 8007ff2:	b25b      	sxtb	r3, r3
 8007ff4:	f023 0304 	bic.w	r3, r3, #4
 8007ff8:	b25a      	sxtb	r2, r3
 8007ffa:	79fb      	ldrb	r3, [r7, #7]
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	b25b      	sxtb	r3, r3
 8008000:	f003 0304 	and.w	r3, r3, #4
 8008004:	b25b      	sxtb	r3, r3
 8008006:	4313      	orrs	r3, r2
 8008008:	b25b      	sxtb	r3, r3
 800800a:	b2db      	uxtb	r3, r3
 800800c:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 800800e:	4b15      	ldr	r3, [pc, #84]	@ (8008064 <bno055_set_euler_unit+0xf4>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	68dc      	ldr	r4, [r3, #12]
 8008014:	4b13      	ldr	r3, [pc, #76]	@ (8008064 <bno055_set_euler_unit+0xf4>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	7a58      	ldrb	r0, [r3, #9]
 800801a:	f107 020d 	add.w	r2, r7, #13
 800801e:	2301      	movs	r3, #1
 8008020:	213b      	movs	r1, #59	@ 0x3b
 8008022:	47a0      	blx	r4
 8008024:	4603      	mov	r3, r0
 8008026:	b2da      	uxtb	r2, r3
 8008028:	7bfb      	ldrb	r3, [r7, #15]
 800802a:	4413      	add	r3, r2
 800802c:	b2db      	uxtb	r3, r3
 800802e:	73fb      	strb	r3, [r7, #15]
 8008030:	e004      	b.n	800803c <bno055_set_euler_unit+0xcc>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 8008032:	23ff      	movs	r3, #255	@ 0xff
 8008034:	73fb      	strb	r3, [r7, #15]
 8008036:	e001      	b.n	800803c <bno055_set_euler_unit+0xcc>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8008038:	23ff      	movs	r3, #255	@ 0xff
 800803a:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 800803c:	7b3b      	ldrb	r3, [r7, #12]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d009      	beq.n	8008056 <bno055_set_euler_unit+0xe6>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 8008042:	7b3b      	ldrb	r3, [r7, #12]
 8008044:	4618      	mov	r0, r3
 8008046:	f000 f8cd 	bl	80081e4 <bno055_set_operation_mode>
 800804a:	4603      	mov	r3, r0
 800804c:	b2da      	uxtb	r2, r3
 800804e:	7bfb      	ldrb	r3, [r7, #15]
 8008050:	4413      	add	r3, r2
 8008052:	b2db      	uxtb	r3, r3
 8008054:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8008056:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800805a:	4618      	mov	r0, r3
 800805c:	3714      	adds	r7, #20
 800805e:	46bd      	mov	sp, r7
 8008060:	bd90      	pop	{r4, r7, pc}
 8008062:	bf00      	nop
 8008064:	200003f0 	.word	0x200003f0

08008068 <bno055_set_temp_unit>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_temp_unit(u8 temp_unit_u8)
{
 8008068:	b590      	push	{r4, r7, lr}
 800806a:	b085      	sub	sp, #20
 800806c:	af00      	add	r7, sp, #0
 800806e:	4603      	mov	r3, r0
 8008070:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8008072:	23ff      	movs	r3, #255	@ 0xff
 8008074:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8008076:	2300      	movs	r3, #0
 8008078:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 800807a:	2300      	movs	r3, #0
 800807c:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 800807e:	23ff      	movs	r3, #255	@ 0xff
 8008080:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8008082:	4b36      	ldr	r3, [pc, #216]	@ (800815c <bno055_set_temp_unit+0xf4>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d102      	bne.n	8008090 <bno055_set_temp_unit+0x28>
    {
        return BNO055_E_NULL_PTR;
 800808a:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800808e:	e060      	b.n	8008152 <bno055_set_temp_unit+0xea>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8008090:	f107 030c 	add.w	r3, r7, #12
 8008094:	4618      	mov	r0, r3
 8008096:	f000 f863 	bl	8008160 <bno055_get_operation_mode>
 800809a:	4603      	mov	r3, r0
 800809c:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 800809e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d144      	bne.n	8008130 <bno055_set_temp_unit+0xc8>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 80080a6:	7b3b      	ldrb	r3, [r7, #12]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d008      	beq.n	80080be <bno055_set_temp_unit+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 80080ac:	2000      	movs	r0, #0
 80080ae:	f000 f899 	bl	80081e4 <bno055_set_operation_mode>
 80080b2:	4603      	mov	r3, r0
 80080b4:	b2da      	uxtb	r2, r3
 80080b6:	7bbb      	ldrb	r3, [r7, #14]
 80080b8:	4413      	add	r3, r2
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 80080be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d131      	bne.n	800812a <bno055_set_temp_unit+0xc2>
            {
                /* Write the temperature unit */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80080c6:	4b25      	ldr	r3, [pc, #148]	@ (800815c <bno055_set_temp_unit+0xf4>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	691c      	ldr	r4, [r3, #16]
 80080cc:	4b23      	ldr	r3, [pc, #140]	@ (800815c <bno055_set_temp_unit+0xf4>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	7a58      	ldrb	r0, [r3, #9]
 80080d2:	f107 020d 	add.w	r2, r7, #13
 80080d6:	2301      	movs	r3, #1
 80080d8:	213b      	movs	r1, #59	@ 0x3b
 80080da:	47a0      	blx	r4
 80080dc:	4603      	mov	r3, r0
 80080de:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_TEMP_UNIT_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 80080e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d125      	bne.n	8008134 <bno055_set_temp_unit+0xcc>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_TEMP_UNIT, temp_unit_u8);
 80080e8:	7b7b      	ldrb	r3, [r7, #13]
 80080ea:	b25b      	sxtb	r3, r3
 80080ec:	f023 0310 	bic.w	r3, r3, #16
 80080f0:	b25a      	sxtb	r2, r3
 80080f2:	79fb      	ldrb	r3, [r7, #7]
 80080f4:	011b      	lsls	r3, r3, #4
 80080f6:	b25b      	sxtb	r3, r3
 80080f8:	f003 0310 	and.w	r3, r3, #16
 80080fc:	b25b      	sxtb	r3, r3
 80080fe:	4313      	orrs	r3, r2
 8008100:	b25b      	sxtb	r3, r3
 8008102:	b2db      	uxtb	r3, r3
 8008104:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8008106:	4b15      	ldr	r3, [pc, #84]	@ (800815c <bno055_set_temp_unit+0xf4>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68dc      	ldr	r4, [r3, #12]
 800810c:	4b13      	ldr	r3, [pc, #76]	@ (800815c <bno055_set_temp_unit+0xf4>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	7a58      	ldrb	r0, [r3, #9]
 8008112:	f107 020d 	add.w	r2, r7, #13
 8008116:	2301      	movs	r3, #1
 8008118:	213b      	movs	r1, #59	@ 0x3b
 800811a:	47a0      	blx	r4
 800811c:	4603      	mov	r3, r0
 800811e:	b2da      	uxtb	r2, r3
 8008120:	7bfb      	ldrb	r3, [r7, #15]
 8008122:	4413      	add	r3, r2
 8008124:	b2db      	uxtb	r3, r3
 8008126:	73fb      	strb	r3, [r7, #15]
 8008128:	e004      	b.n	8008134 <bno055_set_temp_unit+0xcc>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 800812a:	23ff      	movs	r3, #255	@ 0xff
 800812c:	73fb      	strb	r3, [r7, #15]
 800812e:	e001      	b.n	8008134 <bno055_set_temp_unit+0xcc>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8008130:	23ff      	movs	r3, #255	@ 0xff
 8008132:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8008134:	7b3b      	ldrb	r3, [r7, #12]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d009      	beq.n	800814e <bno055_set_temp_unit+0xe6>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 800813a:	7b3b      	ldrb	r3, [r7, #12]
 800813c:	4618      	mov	r0, r3
 800813e:	f000 f851 	bl	80081e4 <bno055_set_operation_mode>
 8008142:	4603      	mov	r3, r0
 8008144:	b2da      	uxtb	r2, r3
 8008146:	7bfb      	ldrb	r3, [r7, #15]
 8008148:	4413      	add	r3, r2
 800814a:	b2db      	uxtb	r3, r3
 800814c:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 800814e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008152:	4618      	mov	r0, r3
 8008154:	3714      	adds	r7, #20
 8008156:	46bd      	mov	sp, r7
 8008158:	bd90      	pop	{r4, r7, pc}
 800815a:	bf00      	nop
 800815c:	200003f0 	.word	0x200003f0

08008160 <bno055_get_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_operation_mode(u8 *operation_mode_u8)
{
 8008160:	b590      	push	{r4, r7, lr}
 8008162:	b085      	sub	sp, #20
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8008168:	23ff      	movs	r3, #255	@ 0xff
 800816a:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 800816c:	2300      	movs	r3, #0
 800816e:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 8008170:	23ff      	movs	r3, #255	@ 0xff
 8008172:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8008174:	4b1a      	ldr	r3, [pc, #104]	@ (80081e0 <bno055_get_operation_mode+0x80>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d102      	bne.n	8008182 <bno055_get_operation_mode+0x22>
    {
        return BNO055_E_NULL_PTR;
 800817c:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8008180:	e02a      	b.n	80081d8 <bno055_get_operation_mode+0x78>
    }
    else
    {
        /*condition check for page, operation mode is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8008182:	4b17      	ldr	r3, [pc, #92]	@ (80081e0 <bno055_get_operation_mode+0x80>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	791b      	ldrb	r3, [r3, #4]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d004      	beq.n	8008196 <bno055_get_operation_mode+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 800818c:	2000      	movs	r0, #0
 800818e:	f7ff fdb1 	bl	8007cf4 <bno055_write_page_id>
 8008192:	4603      	mov	r3, r0
 8008194:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8008196:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d004      	beq.n	80081a8 <bno055_get_operation_mode+0x48>
 800819e:	4b10      	ldr	r3, [pc, #64]	@ (80081e0 <bno055_get_operation_mode+0x80>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	791b      	ldrb	r3, [r3, #4]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d113      	bne.n	80081d0 <bno055_get_operation_mode+0x70>
        {
            /* Read the value of operation mode*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80081a8:	4b0d      	ldr	r3, [pc, #52]	@ (80081e0 <bno055_get_operation_mode+0x80>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	691c      	ldr	r4, [r3, #16]
 80081ae:	4b0c      	ldr	r3, [pc, #48]	@ (80081e0 <bno055_get_operation_mode+0x80>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	7a58      	ldrb	r0, [r3, #9]
 80081b4:	f107 020d 	add.w	r2, r7, #13
 80081b8:	2301      	movs	r3, #1
 80081ba:	213d      	movs	r1, #61	@ 0x3d
 80081bc:	47a0      	blx	r4
 80081be:	4603      	mov	r3, r0
 80081c0:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_OPERATION_MODE_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *operation_mode_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_OPERATION_MODE);
 80081c2:	7b7b      	ldrb	r3, [r7, #13]
 80081c4:	f003 030f 	and.w	r3, r3, #15
 80081c8:	b2da      	uxtb	r2, r3
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	701a      	strb	r2, [r3, #0]
 80081ce:	e001      	b.n	80081d4 <bno055_get_operation_mode+0x74>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 80081d0:	23ff      	movs	r3, #255	@ 0xff
 80081d2:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 80081d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3714      	adds	r7, #20
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd90      	pop	{r4, r7, pc}
 80081e0:	200003f0 	.word	0x200003f0

080081e4 <bno055_set_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_operation_mode(u8 operation_mode_u8)
{
 80081e4:	b590      	push	{r4, r7, lr}
 80081e6:	b085      	sub	sp, #20
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	4603      	mov	r3, r0
 80081ec:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80081ee:	23ff      	movs	r3, #255	@ 0xff
 80081f0:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 80081f2:	2300      	movs	r3, #0
 80081f4:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 80081f6:	2300      	movs	r3, #0
 80081f8:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 80081fa:	23ff      	movs	r3, #255	@ 0xff
 80081fc:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80081fe:	4b5c      	ldr	r3, [pc, #368]	@ (8008370 <bno055_set_operation_mode+0x18c>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d102      	bne.n	800820c <bno055_set_operation_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 8008206:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800820a:	e0ac      	b.n	8008366 <bno055_set_operation_mode+0x182>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 800820c:	f107 030c 	add.w	r3, r7, #12
 8008210:	4618      	mov	r0, r3
 8008212:	f7ff ffa5 	bl	8008160 <bno055_get_operation_mode>
 8008216:	4603      	mov	r3, r0
 8008218:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 800821a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800821e:	2b00      	cmp	r3, #0
 8008220:	f040 809d 	bne.w	800835e <bno055_set_operation_mode+0x17a>
        {
            /* If the previous operation mode is config it is
             * directly write the operation mode */
            if (prev_opmode_u8 == BNO055_OPERATION_MODE_CONFIG)
 8008224:	7b3b      	ldrb	r3, [r7, #12]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d137      	bne.n	800829a <bno055_set_operation_mode+0xb6>
            {
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800822a:	4b51      	ldr	r3, [pc, #324]	@ (8008370 <bno055_set_operation_mode+0x18c>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	691c      	ldr	r4, [r3, #16]
 8008230:	4b4f      	ldr	r3, [pc, #316]	@ (8008370 <bno055_set_operation_mode+0x18c>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	7a58      	ldrb	r0, [r3, #9]
 8008236:	f107 020d 	add.w	r2, r7, #13
 800823a:	2301      	movs	r3, #1
 800823c:	213d      	movs	r1, #61	@ 0x3d
 800823e:	47a0      	blx	r4
 8008240:	4603      	mov	r3, r0
 8008242:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8008244:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008248:	2b00      	cmp	r3, #0
 800824a:	f040 808a 	bne.w	8008362 <bno055_set_operation_mode+0x17e>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 800824e:	7b7b      	ldrb	r3, [r7, #13]
 8008250:	b25b      	sxtb	r3, r3
 8008252:	f023 030f 	bic.w	r3, r3, #15
 8008256:	b25a      	sxtb	r2, r3
 8008258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800825c:	f003 030f 	and.w	r3, r3, #15
 8008260:	b25b      	sxtb	r3, r3
 8008262:	4313      	orrs	r3, r2
 8008264:	b25b      	sxtb	r3, r3
 8008266:	b2db      	uxtb	r3, r3
 8008268:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 800826a:	4b41      	ldr	r3, [pc, #260]	@ (8008370 <bno055_set_operation_mode+0x18c>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68dc      	ldr	r4, [r3, #12]
 8008270:	4b3f      	ldr	r3, [pc, #252]	@ (8008370 <bno055_set_operation_mode+0x18c>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	7a58      	ldrb	r0, [r3, #9]
 8008276:	f107 020d 	add.w	r2, r7, #13
 800827a:	2301      	movs	r3, #1
 800827c:	213d      	movs	r1, #61	@ 0x3d
 800827e:	47a0      	blx	r4
 8008280:	4603      	mov	r3, r0
 8008282:	b2da      	uxtb	r2, r3
 8008284:	7bfb      	ldrb	r3, [r7, #15]
 8008286:	4413      	add	r3, r2
 8008288:	b2db      	uxtb	r3, r3
 800828a:	73fb      	strb	r3, [r7, #15]
                                                                BNO055_GEN_READ_WRITE_LENGTH);

                    /* Config mode to other
                     * operation mode switching
                     * required delay of 600ms*/
                    p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 800828c:	4b38      	ldr	r3, [pc, #224]	@ (8008370 <bno055_set_operation_mode+0x18c>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	695b      	ldr	r3, [r3, #20]
 8008292:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8008296:	4798      	blx	r3
 8008298:	e063      	b.n	8008362 <bno055_set_operation_mode+0x17e>
            else
            {
                /* If the previous operation
                 * mode is not config it is
                 * write the config mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800829a:	4b35      	ldr	r3, [pc, #212]	@ (8008370 <bno055_set_operation_mode+0x18c>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	691c      	ldr	r4, [r3, #16]
 80082a0:	4b33      	ldr	r3, [pc, #204]	@ (8008370 <bno055_set_operation_mode+0x18c>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	7a58      	ldrb	r0, [r3, #9]
 80082a6:	f107 020d 	add.w	r2, r7, #13
 80082aa:	2301      	movs	r3, #1
 80082ac:	213d      	movs	r1, #61	@ 0x3d
 80082ae:	47a0      	blx	r4
 80082b0:	4603      	mov	r3, r0
 80082b2:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 80082b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d116      	bne.n	80082ea <bno055_set_operation_mode+0x106>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, BNO055_OPERATION_MODE_CONFIG);
 80082bc:	7b7b      	ldrb	r3, [r7, #13]
 80082be:	f023 030f 	bic.w	r3, r3, #15
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	737b      	strb	r3, [r7, #13]
                    com_rslt +=
                        bno055_write_register(BNO055_OPERATION_MODE_REG, &data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
 80082c6:	f107 030d 	add.w	r3, r7, #13
 80082ca:	2201      	movs	r2, #1
 80082cc:	4619      	mov	r1, r3
 80082ce:	203d      	movs	r0, #61	@ 0x3d
 80082d0:	f7ff fcea 	bl	8007ca8 <bno055_write_register>
 80082d4:	4603      	mov	r3, r0
 80082d6:	b2da      	uxtb	r2, r3
                    com_rslt +=
 80082d8:	7bfb      	ldrb	r3, [r7, #15]
 80082da:	4413      	add	r3, r2
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	73fb      	strb	r3, [r7, #15]

                    /* other mode to config mode switching
                     * required delay of 20ms*/
                    p_bno055->delay_msec(BNO055_CONFIG_MODE_SWITCHING_DELAY);
 80082e0:	4b23      	ldr	r3, [pc, #140]	@ (8008370 <bno055_set_operation_mode+0x18c>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	695b      	ldr	r3, [r3, #20]
 80082e6:	2014      	movs	r0, #20
 80082e8:	4798      	blx	r3
                }

                /* Write the operation mode */
                if (operation_mode_u8 != BNO055_OPERATION_MODE_CONFIG)
 80082ea:	79fb      	ldrb	r3, [r7, #7]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d038      	beq.n	8008362 <bno055_set_operation_mode+0x17e>
                {
                    com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80082f0:	4b1f      	ldr	r3, [pc, #124]	@ (8008370 <bno055_set_operation_mode+0x18c>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	691c      	ldr	r4, [r3, #16]
 80082f6:	4b1e      	ldr	r3, [pc, #120]	@ (8008370 <bno055_set_operation_mode+0x18c>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	7a58      	ldrb	r0, [r3, #9]
 80082fc:	f107 020d 	add.w	r2, r7, #13
 8008300:	2301      	movs	r3, #1
 8008302:	213d      	movs	r1, #61	@ 0x3d
 8008304:	47a0      	blx	r4
 8008306:	4603      	mov	r3, r0
 8008308:	73fb      	strb	r3, [r7, #15]
                                                              BNO055_OPERATION_MODE_REG,
                                                              &data_u8r,
                                                              BNO055_GEN_READ_WRITE_LENGTH);
                    if (com_rslt == BNO055_SUCCESS)
 800830a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d127      	bne.n	8008362 <bno055_set_operation_mode+0x17e>
                    {
                        data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 8008312:	7b7b      	ldrb	r3, [r7, #13]
 8008314:	b25b      	sxtb	r3, r3
 8008316:	f023 030f 	bic.w	r3, r3, #15
 800831a:	b25a      	sxtb	r2, r3
 800831c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008320:	f003 030f 	and.w	r3, r3, #15
 8008324:	b25b      	sxtb	r3, r3
 8008326:	4313      	orrs	r3, r2
 8008328:	b25b      	sxtb	r3, r3
 800832a:	b2db      	uxtb	r3, r3
 800832c:	737b      	strb	r3, [r7, #13]
                        com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 800832e:	4b10      	ldr	r3, [pc, #64]	@ (8008370 <bno055_set_operation_mode+0x18c>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	68dc      	ldr	r4, [r3, #12]
 8008334:	4b0e      	ldr	r3, [pc, #56]	@ (8008370 <bno055_set_operation_mode+0x18c>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	7a58      	ldrb	r0, [r3, #9]
 800833a:	f107 020d 	add.w	r2, r7, #13
 800833e:	2301      	movs	r3, #1
 8008340:	213d      	movs	r1, #61	@ 0x3d
 8008342:	47a0      	blx	r4
 8008344:	4603      	mov	r3, r0
 8008346:	b2da      	uxtb	r2, r3
 8008348:	7bfb      	ldrb	r3, [r7, #15]
 800834a:	4413      	add	r3, r2
 800834c:	b2db      	uxtb	r3, r3
 800834e:	73fb      	strb	r3, [r7, #15]
                                                                    BNO055_GEN_READ_WRITE_LENGTH);

                        /* Config mode to other
                         * operation mode switching
                         * required delay of 600ms*/
                        p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 8008350:	4b07      	ldr	r3, [pc, #28]	@ (8008370 <bno055_set_operation_mode+0x18c>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	695b      	ldr	r3, [r3, #20]
 8008356:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800835a:	4798      	blx	r3
 800835c:	e001      	b.n	8008362 <bno055_set_operation_mode+0x17e>
                }
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 800835e:	23ff      	movs	r3, #255	@ 0xff
 8008360:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8008362:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008366:	4618      	mov	r0, r3
 8008368:	3714      	adds	r7, #20
 800836a:	46bd      	mov	sp, r7
 800836c:	bd90      	pop	{r4, r7, pc}
 800836e:	bf00      	nop
 8008370:	200003f0 	.word	0x200003f0

08008374 <bno055_set_power_mode>:
 *  @note For detailed about LOWPOWER mode
 *  refer data sheet 3.4.2
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_power_mode(u8 power_mode_u8)
{
 8008374:	b590      	push	{r4, r7, lr}
 8008376:	b085      	sub	sp, #20
 8008378:	af00      	add	r7, sp, #0
 800837a:	4603      	mov	r3, r0
 800837c:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 800837e:	23ff      	movs	r3, #255	@ 0xff
 8008380:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8008382:	2300      	movs	r3, #0
 8008384:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8008386:	2300      	movs	r3, #0
 8008388:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 800838a:	23ff      	movs	r3, #255	@ 0xff
 800838c:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 800838e:	4b35      	ldr	r3, [pc, #212]	@ (8008464 <bno055_set_power_mode+0xf0>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d102      	bne.n	800839c <bno055_set_power_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 8008396:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800839a:	e05f      	b.n	800845c <bno055_set_power_mode+0xe8>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 800839c:	f107 030c 	add.w	r3, r7, #12
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7ff fedd 	bl	8008160 <bno055_get_operation_mode>
 80083a6:	4603      	mov	r3, r0
 80083a8:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 80083aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d143      	bne.n	800843a <bno055_set_power_mode+0xc6>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 80083b2:	7b3b      	ldrb	r3, [r7, #12]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d008      	beq.n	80083ca <bno055_set_power_mode+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 80083b8:	2000      	movs	r0, #0
 80083ba:	f7ff ff13 	bl	80081e4 <bno055_set_operation_mode>
 80083be:	4603      	mov	r3, r0
 80083c0:	b2da      	uxtb	r2, r3
 80083c2:	7bbb      	ldrb	r3, [r7, #14]
 80083c4:	4413      	add	r3, r2
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 80083ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d130      	bne.n	8008434 <bno055_set_power_mode+0xc0>
            {
                /* Write the value of power mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80083d2:	4b24      	ldr	r3, [pc, #144]	@ (8008464 <bno055_set_power_mode+0xf0>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	691c      	ldr	r4, [r3, #16]
 80083d8:	4b22      	ldr	r3, [pc, #136]	@ (8008464 <bno055_set_power_mode+0xf0>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	7a58      	ldrb	r0, [r3, #9]
 80083de:	f107 020d 	add.w	r2, r7, #13
 80083e2:	2301      	movs	r3, #1
 80083e4:	213e      	movs	r1, #62	@ 0x3e
 80083e6:	47a0      	blx	r4
 80083e8:	4603      	mov	r3, r0
 80083ea:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_POWER_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 80083ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d124      	bne.n	800843e <bno055_set_power_mode+0xca>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_POWER_MODE, power_mode_u8);
 80083f4:	7b7b      	ldrb	r3, [r7, #13]
 80083f6:	b25b      	sxtb	r3, r3
 80083f8:	f023 0303 	bic.w	r3, r3, #3
 80083fc:	b25a      	sxtb	r2, r3
 80083fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008402:	f003 0303 	and.w	r3, r3, #3
 8008406:	b25b      	sxtb	r3, r3
 8008408:	4313      	orrs	r3, r2
 800840a:	b25b      	sxtb	r3, r3
 800840c:	b2db      	uxtb	r3, r3
 800840e:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8008410:	4b14      	ldr	r3, [pc, #80]	@ (8008464 <bno055_set_power_mode+0xf0>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	68dc      	ldr	r4, [r3, #12]
 8008416:	4b13      	ldr	r3, [pc, #76]	@ (8008464 <bno055_set_power_mode+0xf0>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	7a58      	ldrb	r0, [r3, #9]
 800841c:	f107 020d 	add.w	r2, r7, #13
 8008420:	2301      	movs	r3, #1
 8008422:	213e      	movs	r1, #62	@ 0x3e
 8008424:	47a0      	blx	r4
 8008426:	4603      	mov	r3, r0
 8008428:	b2da      	uxtb	r2, r3
 800842a:	7bfb      	ldrb	r3, [r7, #15]
 800842c:	4413      	add	r3, r2
 800842e:	b2db      	uxtb	r3, r3
 8008430:	73fb      	strb	r3, [r7, #15]
 8008432:	e004      	b.n	800843e <bno055_set_power_mode+0xca>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 8008434:	23ff      	movs	r3, #255	@ 0xff
 8008436:	73fb      	strb	r3, [r7, #15]
 8008438:	e001      	b.n	800843e <bno055_set_power_mode+0xca>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 800843a:	23ff      	movs	r3, #255	@ 0xff
 800843c:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 800843e:	7b3b      	ldrb	r3, [r7, #12]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d009      	beq.n	8008458 <bno055_set_power_mode+0xe4>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 8008444:	7b3b      	ldrb	r3, [r7, #12]
 8008446:	4618      	mov	r0, r3
 8008448:	f7ff fecc 	bl	80081e4 <bno055_set_operation_mode>
 800844c:	4603      	mov	r3, r0
 800844e:	b2da      	uxtb	r2, r3
 8008450:	7bfb      	ldrb	r3, [r7, #15]
 8008452:	4413      	add	r3, r2
 8008454:	b2db      	uxtb	r3, r3
 8008456:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8008458:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800845c:	4618      	mov	r0, r3
 800845e:	3714      	adds	r7, #20
 8008460:	46bd      	mov	sp, r7
 8008462:	bd90      	pop	{r4, r7, pc}
 8008464:	200003f0 	.word	0x200003f0

08008468 <bno055_set_intr_rst>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_intr_rst(u8 intr_rst_u8)
{
 8008468:	b590      	push	{r4, r7, lr}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
 800846e:	4603      	mov	r3, r0
 8008470:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8008472:	23ff      	movs	r3, #255	@ 0xff
 8008474:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8008476:	2300      	movs	r3, #0
 8008478:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 800847a:	23ff      	movs	r3, #255	@ 0xff
 800847c:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 800847e:	4b2a      	ldr	r3, [pc, #168]	@ (8008528 <bno055_set_intr_rst+0xc0>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d102      	bne.n	800848c <bno055_set_intr_rst+0x24>
    {
        return BNO055_E_NULL_PTR;
 8008486:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800848a:	e048      	b.n	800851e <bno055_set_intr_rst+0xb6>
    }
    else
    {
        /*condition check for page, reset interrupt
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 800848c:	4b26      	ldr	r3, [pc, #152]	@ (8008528 <bno055_set_intr_rst+0xc0>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	791b      	ldrb	r3, [r3, #4]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d004      	beq.n	80084a0 <bno055_set_intr_rst+0x38>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8008496:	2000      	movs	r0, #0
 8008498:	f7ff fc2c 	bl	8007cf4 <bno055_write_page_id>
 800849c:	4603      	mov	r3, r0
 800849e:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 80084a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d004      	beq.n	80084b2 <bno055_set_intr_rst+0x4a>
 80084a8:	4b1f      	ldr	r3, [pc, #124]	@ (8008528 <bno055_set_intr_rst+0xc0>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	791b      	ldrb	r3, [r3, #4]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d131      	bne.n	8008516 <bno055_set_intr_rst+0xae>
        {
            /* Write the value of reset interrupt */
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80084b2:	4b1d      	ldr	r3, [pc, #116]	@ (8008528 <bno055_set_intr_rst+0xc0>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	691c      	ldr	r4, [r3, #16]
 80084b8:	4b1b      	ldr	r3, [pc, #108]	@ (8008528 <bno055_set_intr_rst+0xc0>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	7a58      	ldrb	r0, [r3, #9]
 80084be:	f107 020d 	add.w	r2, r7, #13
 80084c2:	2301      	movs	r3, #1
 80084c4:	213f      	movs	r1, #63	@ 0x3f
 80084c6:	47a0      	blx	r4
 80084c8:	4603      	mov	r3, r0
 80084ca:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_INTR_RST_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            if (com_rslt == BNO055_SUCCESS)
 80084cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d122      	bne.n	800851a <bno055_set_intr_rst+0xb2>
            {
                data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_INTR_RST, intr_rst_u8);
 80084d4:	7b7b      	ldrb	r3, [r7, #13]
 80084d6:	b25b      	sxtb	r3, r3
 80084d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084dc:	b25a      	sxtb	r2, r3
 80084de:	79fb      	ldrb	r3, [r7, #7]
 80084e0:	019b      	lsls	r3, r3, #6
 80084e2:	b25b      	sxtb	r3, r3
 80084e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084e8:	b25b      	sxtb	r3, r3
 80084ea:	4313      	orrs	r3, r2
 80084ec:	b25b      	sxtb	r3, r3
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	737b      	strb	r3, [r7, #13]
                com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 80084f2:	4b0d      	ldr	r3, [pc, #52]	@ (8008528 <bno055_set_intr_rst+0xc0>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	68dc      	ldr	r4, [r3, #12]
 80084f8:	4b0b      	ldr	r3, [pc, #44]	@ (8008528 <bno055_set_intr_rst+0xc0>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	7a58      	ldrb	r0, [r3, #9]
 80084fe:	f107 020d 	add.w	r2, r7, #13
 8008502:	2301      	movs	r3, #1
 8008504:	213f      	movs	r1, #63	@ 0x3f
 8008506:	47a0      	blx	r4
 8008508:	4603      	mov	r3, r0
 800850a:	b2da      	uxtb	r2, r3
 800850c:	7bfb      	ldrb	r3, [r7, #15]
 800850e:	4413      	add	r3, r2
 8008510:	b2db      	uxtb	r3, r3
 8008512:	73fb      	strb	r3, [r7, #15]
            if (com_rslt == BNO055_SUCCESS)
 8008514:	e001      	b.n	800851a <bno055_set_intr_rst+0xb2>
                                                            BNO055_GEN_READ_WRITE_LENGTH);
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8008516:	23ff      	movs	r3, #255	@ 0xff
 8008518:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 800851a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800851e:	4618      	mov	r0, r3
 8008520:	3714      	adds	r7, #20
 8008522:	46bd      	mov	sp, r7
 8008524:	bd90      	pop	{r4, r7, pc}
 8008526:	bf00      	nop
 8008528:	200003f0 	.word	0x200003f0

0800852c <bno055_set_intr_mask_accel_any_motion>:
 *
 *  bno055_set_accel_any_motion_thres()
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_intr_mask_accel_any_motion(u8 accel_any_motion_u8)
{
 800852c:	b590      	push	{r4, r7, lr}
 800852e:	b085      	sub	sp, #20
 8008530:	af00      	add	r7, sp, #0
 8008532:	4603      	mov	r3, r0
 8008534:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8008536:	23ff      	movs	r3, #255	@ 0xff
 8008538:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 800853a:	2300      	movs	r3, #0
 800853c:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 800853e:	23ff      	movs	r3, #255	@ 0xff
 8008540:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8008542:	4b2a      	ldr	r3, [pc, #168]	@ (80085ec <bno055_set_intr_mask_accel_any_motion+0xc0>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d102      	bne.n	8008550 <bno055_set_intr_mask_accel_any_motion+0x24>
    {
        return BNO055_E_NULL_PTR;
 800854a:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800854e:	e048      	b.n	80085e2 <bno055_set_intr_mask_accel_any_motion+0xb6>
    }
    else
    {
        /*condition check for page, accel anymotion interrupt mask is
         * available in the page one*/
        if (p_bno055->page_id != BNO055_PAGE_ONE)
 8008550:	4b26      	ldr	r3, [pc, #152]	@ (80085ec <bno055_set_intr_mask_accel_any_motion+0xc0>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	791b      	ldrb	r3, [r3, #4]
 8008556:	2b01      	cmp	r3, #1
 8008558:	d004      	beq.n	8008564 <bno055_set_intr_mask_accel_any_motion+0x38>
        {
            /* Write page as one */
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ONE);
 800855a:	2001      	movs	r0, #1
 800855c:	f7ff fbca 	bl	8007cf4 <bno055_write_page_id>
 8008560:	4603      	mov	r3, r0
 8008562:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ONE))
 8008564:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d004      	beq.n	8008576 <bno055_set_intr_mask_accel_any_motion+0x4a>
 800856c:	4b1f      	ldr	r3, [pc, #124]	@ (80085ec <bno055_set_intr_mask_accel_any_motion+0xc0>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	791b      	ldrb	r3, [r3, #4]
 8008572:	2b01      	cmp	r3, #1
 8008574:	d131      	bne.n	80085da <bno055_set_intr_mask_accel_any_motion+0xae>
        {
            /* Write the value of accel anymotion interrupt mask*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8008576:	4b1d      	ldr	r3, [pc, #116]	@ (80085ec <bno055_set_intr_mask_accel_any_motion+0xc0>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	691c      	ldr	r4, [r3, #16]
 800857c:	4b1b      	ldr	r3, [pc, #108]	@ (80085ec <bno055_set_intr_mask_accel_any_motion+0xc0>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	7a58      	ldrb	r0, [r3, #9]
 8008582:	f107 020d 	add.w	r2, r7, #13
 8008586:	2301      	movs	r3, #1
 8008588:	210f      	movs	r1, #15
 800858a:	47a0      	blx	r4
 800858c:	4603      	mov	r3, r0
 800858e:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_ACCEL_ANY_MOTION_INTR_MASK_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            if (com_rslt == BNO055_SUCCESS)
 8008590:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d122      	bne.n	80085de <bno055_set_intr_mask_accel_any_motion+0xb2>
            {
                data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_ACCEL_ANY_MOTION_INTR_MASK, accel_any_motion_u8);
 8008598:	7b7b      	ldrb	r3, [r7, #13]
 800859a:	b25b      	sxtb	r3, r3
 800859c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085a0:	b25a      	sxtb	r2, r3
 80085a2:	79fb      	ldrb	r3, [r7, #7]
 80085a4:	019b      	lsls	r3, r3, #6
 80085a6:	b25b      	sxtb	r3, r3
 80085a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085ac:	b25b      	sxtb	r3, r3
 80085ae:	4313      	orrs	r3, r2
 80085b0:	b25b      	sxtb	r3, r3
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	737b      	strb	r3, [r7, #13]
                com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 80085b6:	4b0d      	ldr	r3, [pc, #52]	@ (80085ec <bno055_set_intr_mask_accel_any_motion+0xc0>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	68dc      	ldr	r4, [r3, #12]
 80085bc:	4b0b      	ldr	r3, [pc, #44]	@ (80085ec <bno055_set_intr_mask_accel_any_motion+0xc0>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	7a58      	ldrb	r0, [r3, #9]
 80085c2:	f107 020d 	add.w	r2, r7, #13
 80085c6:	2301      	movs	r3, #1
 80085c8:	210f      	movs	r1, #15
 80085ca:	47a0      	blx	r4
 80085cc:	4603      	mov	r3, r0
 80085ce:	b2da      	uxtb	r2, r3
 80085d0:	7bfb      	ldrb	r3, [r7, #15]
 80085d2:	4413      	add	r3, r2
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	73fb      	strb	r3, [r7, #15]
            if (com_rslt == BNO055_SUCCESS)
 80085d8:	e001      	b.n	80085de <bno055_set_intr_mask_accel_any_motion+0xb2>
                                                            BNO055_GEN_READ_WRITE_LENGTH);
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 80085da:	23ff      	movs	r3, #255	@ 0xff
 80085dc:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 80085de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3714      	adds	r7, #20
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd90      	pop	{r4, r7, pc}
 80085ea:	bf00      	nop
 80085ec:	200003f0 	.word	0x200003f0

080085f0 <bno055_set_intr_accel_any_motion>:
 *
 *  bno055_set_accel_any_motion_thres()
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_intr_accel_any_motion(u8 accel_any_motion_u8)
{
 80085f0:	b590      	push	{r4, r7, lr}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	4603      	mov	r3, r0
 80085f8:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80085fa:	23ff      	movs	r3, #255	@ 0xff
 80085fc:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 80085fe:	2300      	movs	r3, #0
 8008600:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 8008602:	23ff      	movs	r3, #255	@ 0xff
 8008604:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8008606:	4b2a      	ldr	r3, [pc, #168]	@ (80086b0 <bno055_set_intr_accel_any_motion+0xc0>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d102      	bne.n	8008614 <bno055_set_intr_accel_any_motion+0x24>
    {
        return BNO055_E_NULL_PTR;
 800860e:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8008612:	e048      	b.n	80086a6 <bno055_set_intr_accel_any_motion+0xb6>
    }
    else
    {
        /*condition check for page, accel range is
         * available in the page one*/
        if (p_bno055->page_id != BNO055_PAGE_ONE)
 8008614:	4b26      	ldr	r3, [pc, #152]	@ (80086b0 <bno055_set_intr_accel_any_motion+0xc0>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	791b      	ldrb	r3, [r3, #4]
 800861a:	2b01      	cmp	r3, #1
 800861c:	d004      	beq.n	8008628 <bno055_set_intr_accel_any_motion+0x38>
        {
            /* Write page as one */
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ONE);
 800861e:	2001      	movs	r0, #1
 8008620:	f7ff fb68 	bl	8007cf4 <bno055_write_page_id>
 8008624:	4603      	mov	r3, r0
 8008626:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ONE))
 8008628:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d004      	beq.n	800863a <bno055_set_intr_accel_any_motion+0x4a>
 8008630:	4b1f      	ldr	r3, [pc, #124]	@ (80086b0 <bno055_set_intr_accel_any_motion+0xc0>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	791b      	ldrb	r3, [r3, #4]
 8008636:	2b01      	cmp	r3, #1
 8008638:	d131      	bne.n	800869e <bno055_set_intr_accel_any_motion+0xae>
        {
            /* Write the value of accel anymotion interrupt */
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800863a:	4b1d      	ldr	r3, [pc, #116]	@ (80086b0 <bno055_set_intr_accel_any_motion+0xc0>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	691c      	ldr	r4, [r3, #16]
 8008640:	4b1b      	ldr	r3, [pc, #108]	@ (80086b0 <bno055_set_intr_accel_any_motion+0xc0>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	7a58      	ldrb	r0, [r3, #9]
 8008646:	f107 020d 	add.w	r2, r7, #13
 800864a:	2301      	movs	r3, #1
 800864c:	2110      	movs	r1, #16
 800864e:	47a0      	blx	r4
 8008650:	4603      	mov	r3, r0
 8008652:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_ACCEL_ANY_MOTION_INTR_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            if (com_rslt == BNO055_SUCCESS)
 8008654:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d122      	bne.n	80086a2 <bno055_set_intr_accel_any_motion+0xb2>
            {
                data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_ACCEL_ANY_MOTION_INTR, accel_any_motion_u8);
 800865c:	7b7b      	ldrb	r3, [r7, #13]
 800865e:	b25b      	sxtb	r3, r3
 8008660:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008664:	b25a      	sxtb	r2, r3
 8008666:	79fb      	ldrb	r3, [r7, #7]
 8008668:	019b      	lsls	r3, r3, #6
 800866a:	b25b      	sxtb	r3, r3
 800866c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008670:	b25b      	sxtb	r3, r3
 8008672:	4313      	orrs	r3, r2
 8008674:	b25b      	sxtb	r3, r3
 8008676:	b2db      	uxtb	r3, r3
 8008678:	737b      	strb	r3, [r7, #13]
                com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 800867a:	4b0d      	ldr	r3, [pc, #52]	@ (80086b0 <bno055_set_intr_accel_any_motion+0xc0>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	68dc      	ldr	r4, [r3, #12]
 8008680:	4b0b      	ldr	r3, [pc, #44]	@ (80086b0 <bno055_set_intr_accel_any_motion+0xc0>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	7a58      	ldrb	r0, [r3, #9]
 8008686:	f107 020d 	add.w	r2, r7, #13
 800868a:	2301      	movs	r3, #1
 800868c:	2110      	movs	r1, #16
 800868e:	47a0      	blx	r4
 8008690:	4603      	mov	r3, r0
 8008692:	b2da      	uxtb	r2, r3
 8008694:	7bfb      	ldrb	r3, [r7, #15]
 8008696:	4413      	add	r3, r2
 8008698:	b2db      	uxtb	r3, r3
 800869a:	73fb      	strb	r3, [r7, #15]
            if (com_rslt == BNO055_SUCCESS)
 800869c:	e001      	b.n	80086a2 <bno055_set_intr_accel_any_motion+0xb2>
                                                            BNO055_GEN_READ_WRITE_LENGTH);
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 800869e:	23ff      	movs	r3, #255	@ 0xff
 80086a0:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 80086a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3714      	adds	r7, #20
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd90      	pop	{r4, r7, pc}
 80086ae:	bf00      	nop
 80086b0:	200003f0 	.word	0x200003f0

080086b4 <bno055_set_accel_any_motion_thres>:
 *     8g        |    15.63mg    |   1LSB
 *     16g       |    31.25mg    |   1LSB
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_accel_any_motion_thres(u8 accel_any_motion_thres_u8)
{
 80086b4:	b590      	push	{r4, r7, lr}
 80086b6:	b085      	sub	sp, #20
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	4603      	mov	r3, r0
 80086bc:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80086be:	23ff      	movs	r3, #255	@ 0xff
 80086c0:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 80086c2:	2300      	movs	r3, #0
 80086c4:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 80086c6:	23ff      	movs	r3, #255	@ 0xff
 80086c8:	73bb      	strb	r3, [r7, #14]
    s8 pg_stat_s8 = BNO055_ERROR;
 80086ca:	23ff      	movs	r3, #255	@ 0xff
 80086cc:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 80086ce:	2300      	movs	r3, #0
 80086d0:	72fb      	strb	r3, [r7, #11]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80086d2:	4b35      	ldr	r3, [pc, #212]	@ (80087a8 <bno055_set_accel_any_motion_thres+0xf4>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d102      	bne.n	80086e0 <bno055_set_accel_any_motion_thres+0x2c>
    {
        return BNO055_E_NULL_PTR;
 80086da:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 80086de:	e05f      	b.n	80087a0 <bno055_set_accel_any_motion_thres+0xec>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 80086e0:	f107 030b 	add.w	r3, r7, #11
 80086e4:	4618      	mov	r0, r3
 80086e6:	f7ff fd3b 	bl	8008160 <bno055_get_operation_mode>
 80086ea:	4603      	mov	r3, r0
 80086ec:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 80086ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d143      	bne.n	800877e <bno055_set_accel_any_motion_thres+0xca>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 80086f6:	7afb      	ldrb	r3, [r7, #11]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d008      	beq.n	800870e <bno055_set_accel_any_motion_thres+0x5a>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 80086fc:	2000      	movs	r0, #0
 80086fe:	f7ff fd71 	bl	80081e4 <bno055_set_operation_mode>
 8008702:	4603      	mov	r3, r0
 8008704:	b2da      	uxtb	r2, r3
 8008706:	7bbb      	ldrb	r3, [r7, #14]
 8008708:	4413      	add	r3, r2
 800870a:	b2db      	uxtb	r3, r3
 800870c:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 800870e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d130      	bne.n	8008778 <bno055_set_accel_any_motion_thres+0xc4>
            {
                /* Write page as one */
                pg_stat_s8 = bno055_write_page_id(BNO055_PAGE_ONE);
 8008716:	2001      	movs	r0, #1
 8008718:	f7ff faec 	bl	8007cf4 <bno055_write_page_id>
 800871c:	4603      	mov	r3, r0
 800871e:	737b      	strb	r3, [r7, #13]
                if (pg_stat_s8 == BNO055_SUCCESS)
 8008720:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d124      	bne.n	8008772 <bno055_set_accel_any_motion_thres+0xbe>
                {
                    com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8008728:	4b1f      	ldr	r3, [pc, #124]	@ (80087a8 <bno055_set_accel_any_motion_thres+0xf4>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	691c      	ldr	r4, [r3, #16]
 800872e:	4b1e      	ldr	r3, [pc, #120]	@ (80087a8 <bno055_set_accel_any_motion_thres+0xf4>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	7a58      	ldrb	r0, [r3, #9]
 8008734:	f107 020c 	add.w	r2, r7, #12
 8008738:	2301      	movs	r3, #1
 800873a:	2111      	movs	r1, #17
 800873c:	47a0      	blx	r4
 800873e:	4603      	mov	r3, r0
 8008740:	73fb      	strb	r3, [r7, #15]
                                                              BNO055_ACCEL_ANY_MOTION_THRES_REG,
                                                              &data_u8r,
                                                              BNO055_GEN_READ_WRITE_LENGTH);
                    if (com_rslt == BNO055_SUCCESS)
 8008742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d11b      	bne.n	8008782 <bno055_set_accel_any_motion_thres+0xce>
                    {
                        /* Write the value of
                         * accel any motion threshold*/
                        data_u8r = BNO055_SET_BITSLICE(data_u8r,
 800874a:	79fb      	ldrb	r3, [r7, #7]
 800874c:	733b      	strb	r3, [r7, #12]
                                                       BNO055_ACCEL_ANY_MOTION_THRES,
                                                       accel_any_motion_thres_u8);
                        com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 800874e:	4b16      	ldr	r3, [pc, #88]	@ (80087a8 <bno055_set_accel_any_motion_thres+0xf4>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	68dc      	ldr	r4, [r3, #12]
 8008754:	4b14      	ldr	r3, [pc, #80]	@ (80087a8 <bno055_set_accel_any_motion_thres+0xf4>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	7a58      	ldrb	r0, [r3, #9]
 800875a:	f107 020c 	add.w	r2, r7, #12
 800875e:	2301      	movs	r3, #1
 8008760:	2111      	movs	r1, #17
 8008762:	47a0      	blx	r4
 8008764:	4603      	mov	r3, r0
 8008766:	b2da      	uxtb	r2, r3
 8008768:	7bfb      	ldrb	r3, [r7, #15]
 800876a:	4413      	add	r3, r2
 800876c:	b2db      	uxtb	r3, r3
 800876e:	73fb      	strb	r3, [r7, #15]
 8008770:	e007      	b.n	8008782 <bno055_set_accel_any_motion_thres+0xce>
                                                                    BNO055_GEN_READ_WRITE_LENGTH);
                    }
                }
                else
                {
                    com_rslt = BNO055_ERROR;
 8008772:	23ff      	movs	r3, #255	@ 0xff
 8008774:	73fb      	strb	r3, [r7, #15]
 8008776:	e004      	b.n	8008782 <bno055_set_accel_any_motion_thres+0xce>
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 8008778:	23ff      	movs	r3, #255	@ 0xff
 800877a:	73fb      	strb	r3, [r7, #15]
 800877c:	e001      	b.n	8008782 <bno055_set_accel_any_motion_thres+0xce>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 800877e:	23ff      	movs	r3, #255	@ 0xff
 8008780:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8008782:	7afb      	ldrb	r3, [r7, #11]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d009      	beq.n	800879c <bno055_set_accel_any_motion_thres+0xe8>
    {
        /* set the operation mode of
         * previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 8008788:	7afb      	ldrb	r3, [r7, #11]
 800878a:	4618      	mov	r0, r3
 800878c:	f7ff fd2a 	bl	80081e4 <bno055_set_operation_mode>
 8008790:	4603      	mov	r3, r0
 8008792:	b2da      	uxtb	r2, r3
 8008794:	7bfb      	ldrb	r3, [r7, #15]
 8008796:	4413      	add	r3, r2
 8008798:	b2db      	uxtb	r3, r3
 800879a:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 800879c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3714      	adds	r7, #20
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd90      	pop	{r4, r7, pc}
 80087a8:	200003f0 	.word	0x200003f0

080087ac <bno055_set_accel_any_motion_durn>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_accel_any_motion_durn(u8 accel_any_motion_durn_u8)
{
 80087ac:	b590      	push	{r4, r7, lr}
 80087ae:	b085      	sub	sp, #20
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	4603      	mov	r3, r0
 80087b4:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80087b6:	23ff      	movs	r3, #255	@ 0xff
 80087b8:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 80087ba:	2300      	movs	r3, #0
 80087bc:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 80087be:	23ff      	movs	r3, #255	@ 0xff
 80087c0:	73bb      	strb	r3, [r7, #14]
    s8 pg_stat_s8 = BNO055_ERROR;
 80087c2:	23ff      	movs	r3, #255	@ 0xff
 80087c4:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 80087c6:	2300      	movs	r3, #0
 80087c8:	72fb      	strb	r3, [r7, #11]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80087ca:	4b3b      	ldr	r3, [pc, #236]	@ (80088b8 <bno055_set_accel_any_motion_durn+0x10c>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d102      	bne.n	80087d8 <bno055_set_accel_any_motion_durn+0x2c>
    {
        return BNO055_E_NULL_PTR;
 80087d2:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 80087d6:	e06b      	b.n	80088b0 <bno055_set_accel_any_motion_durn+0x104>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 80087d8:	f107 030b 	add.w	r3, r7, #11
 80087dc:	4618      	mov	r0, r3
 80087de:	f7ff fcbf 	bl	8008160 <bno055_get_operation_mode>
 80087e2:	4603      	mov	r3, r0
 80087e4:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 80087e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d14f      	bne.n	800888e <bno055_set_accel_any_motion_durn+0xe2>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 80087ee:	7afb      	ldrb	r3, [r7, #11]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d008      	beq.n	8008806 <bno055_set_accel_any_motion_durn+0x5a>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 80087f4:	2000      	movs	r0, #0
 80087f6:	f7ff fcf5 	bl	80081e4 <bno055_set_operation_mode>
 80087fa:	4603      	mov	r3, r0
 80087fc:	b2da      	uxtb	r2, r3
 80087fe:	7bbb      	ldrb	r3, [r7, #14]
 8008800:	4413      	add	r3, r2
 8008802:	b2db      	uxtb	r3, r3
 8008804:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 8008806:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d13c      	bne.n	8008888 <bno055_set_accel_any_motion_durn+0xdc>
            {
                /* Write page as one */
                pg_stat_s8 = bno055_write_page_id(BNO055_PAGE_ONE);
 800880e:	2001      	movs	r0, #1
 8008810:	f7ff fa70 	bl	8007cf4 <bno055_write_page_id>
 8008814:	4603      	mov	r3, r0
 8008816:	737b      	strb	r3, [r7, #13]
                if (pg_stat_s8 == BNO055_SUCCESS)
 8008818:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d130      	bne.n	8008882 <bno055_set_accel_any_motion_durn+0xd6>
                {
                    com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8008820:	4b25      	ldr	r3, [pc, #148]	@ (80088b8 <bno055_set_accel_any_motion_durn+0x10c>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	691c      	ldr	r4, [r3, #16]
 8008826:	4b24      	ldr	r3, [pc, #144]	@ (80088b8 <bno055_set_accel_any_motion_durn+0x10c>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	7a58      	ldrb	r0, [r3, #9]
 800882c:	f107 020c 	add.w	r2, r7, #12
 8008830:	2301      	movs	r3, #1
 8008832:	2112      	movs	r1, #18
 8008834:	47a0      	blx	r4
 8008836:	4603      	mov	r3, r0
 8008838:	73fb      	strb	r3, [r7, #15]
                                                              BNO055_ACCEL_ANY_MOTION_DURN_SET_REG,
                                                              &data_u8r,
                                                              BNO055_GEN_READ_WRITE_LENGTH);
                    if (com_rslt == BNO055_SUCCESS)
 800883a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d127      	bne.n	8008892 <bno055_set_accel_any_motion_durn+0xe6>
                    {
                        /* Write the value of
                         * accel anymotion duration*/
                        data_u8r = BNO055_SET_BITSLICE(data_u8r,
 8008842:	7b3b      	ldrb	r3, [r7, #12]
 8008844:	b25b      	sxtb	r3, r3
 8008846:	f023 0303 	bic.w	r3, r3, #3
 800884a:	b25a      	sxtb	r2, r3
 800884c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008850:	f003 0303 	and.w	r3, r3, #3
 8008854:	b25b      	sxtb	r3, r3
 8008856:	4313      	orrs	r3, r2
 8008858:	b25b      	sxtb	r3, r3
 800885a:	b2db      	uxtb	r3, r3
 800885c:	733b      	strb	r3, [r7, #12]
                                                       BNO055_ACCEL_ANY_MOTION_DURN_SET,
                                                       accel_any_motion_durn_u8);
                        com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 800885e:	4b16      	ldr	r3, [pc, #88]	@ (80088b8 <bno055_set_accel_any_motion_durn+0x10c>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	68dc      	ldr	r4, [r3, #12]
 8008864:	4b14      	ldr	r3, [pc, #80]	@ (80088b8 <bno055_set_accel_any_motion_durn+0x10c>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	7a58      	ldrb	r0, [r3, #9]
 800886a:	f107 020c 	add.w	r2, r7, #12
 800886e:	2301      	movs	r3, #1
 8008870:	2112      	movs	r1, #18
 8008872:	47a0      	blx	r4
 8008874:	4603      	mov	r3, r0
 8008876:	b2da      	uxtb	r2, r3
 8008878:	7bfb      	ldrb	r3, [r7, #15]
 800887a:	4413      	add	r3, r2
 800887c:	b2db      	uxtb	r3, r3
 800887e:	73fb      	strb	r3, [r7, #15]
 8008880:	e007      	b.n	8008892 <bno055_set_accel_any_motion_durn+0xe6>
                                                                    BNO055_GEN_READ_WRITE_LENGTH);
                    }
                }
                else
                {
                    com_rslt = BNO055_ERROR;
 8008882:	23ff      	movs	r3, #255	@ 0xff
 8008884:	73fb      	strb	r3, [r7, #15]
 8008886:	e004      	b.n	8008892 <bno055_set_accel_any_motion_durn+0xe6>
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 8008888:	23ff      	movs	r3, #255	@ 0xff
 800888a:	73fb      	strb	r3, [r7, #15]
 800888c:	e001      	b.n	8008892 <bno055_set_accel_any_motion_durn+0xe6>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 800888e:	23ff      	movs	r3, #255	@ 0xff
 8008890:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8008892:	7afb      	ldrb	r3, [r7, #11]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d009      	beq.n	80088ac <bno055_set_accel_any_motion_durn+0x100>
    {
        /* set the operation mode of
         * previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 8008898:	7afb      	ldrb	r3, [r7, #11]
 800889a:	4618      	mov	r0, r3
 800889c:	f7ff fca2 	bl	80081e4 <bno055_set_operation_mode>
 80088a0:	4603      	mov	r3, r0
 80088a2:	b2da      	uxtb	r2, r3
 80088a4:	7bfb      	ldrb	r3, [r7, #15]
 80088a6:	4413      	add	r3, r2
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 80088ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3714      	adds	r7, #20
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd90      	pop	{r4, r7, pc}
 80088b8:	200003f0 	.word	0x200003f0

080088bc <bno055_set_accel_any_motion_no_motion_axis_enable>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_accel_any_motion_no_motion_axis_enable(u8 channel_u8, u8 data_u8)
{
 80088bc:	b590      	push	{r4, r7, lr}
 80088be:	b085      	sub	sp, #20
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	4603      	mov	r3, r0
 80088c4:	460a      	mov	r2, r1
 80088c6:	71fb      	strb	r3, [r7, #7]
 80088c8:	4613      	mov	r3, r2
 80088ca:	71bb      	strb	r3, [r7, #6]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80088cc:	23ff      	movs	r3, #255	@ 0xff
 80088ce:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 80088d0:	2300      	movs	r3, #0
 80088d2:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 80088d4:	23ff      	movs	r3, #255	@ 0xff
 80088d6:	73bb      	strb	r3, [r7, #14]
    s8 pg_stat_s8 = BNO055_ERROR;
 80088d8:	23ff      	movs	r3, #255	@ 0xff
 80088da:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 80088dc:	2300      	movs	r3, #0
 80088de:	72fb      	strb	r3, [r7, #11]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80088e0:	4b79      	ldr	r3, [pc, #484]	@ (8008ac8 <bno055_set_accel_any_motion_no_motion_axis_enable+0x20c>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d102      	bne.n	80088ee <bno055_set_accel_any_motion_no_motion_axis_enable+0x32>
    {
        return BNO055_E_NULL_PTR;
 80088e8:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 80088ec:	e0e8      	b.n	8008ac0 <bno055_set_accel_any_motion_no_motion_axis_enable+0x204>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 80088ee:	f107 030b 	add.w	r3, r7, #11
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7ff fc34 	bl	8008160 <bno055_get_operation_mode>
 80088f8:	4603      	mov	r3, r0
 80088fa:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 80088fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008900:	2b00      	cmp	r3, #0
 8008902:	f040 80c6 	bne.w	8008a92 <bno055_set_accel_any_motion_no_motion_axis_enable+0x1d6>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8008906:	7afb      	ldrb	r3, [r7, #11]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d008      	beq.n	800891e <bno055_set_accel_any_motion_no_motion_axis_enable+0x62>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 800890c:	2000      	movs	r0, #0
 800890e:	f7ff fc69 	bl	80081e4 <bno055_set_operation_mode>
 8008912:	4603      	mov	r3, r0
 8008914:	b2da      	uxtb	r2, r3
 8008916:	7bbb      	ldrb	r3, [r7, #14]
 8008918:	4413      	add	r3, r2
 800891a:	b2db      	uxtb	r3, r3
 800891c:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 800891e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008922:	2b00      	cmp	r3, #0
 8008924:	f040 80b2 	bne.w	8008a8c <bno055_set_accel_any_motion_no_motion_axis_enable+0x1d0>
            {
                /* Write page as one */
                pg_stat_s8 = bno055_write_page_id(BNO055_PAGE_ONE);
 8008928:	2001      	movs	r0, #1
 800892a:	f7ff f9e3 	bl	8007cf4 <bno055_write_page_id>
 800892e:	4603      	mov	r3, r0
 8008930:	737b      	strb	r3, [r7, #13]
                if (pg_stat_s8 == BNO055_SUCCESS)
 8008932:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8008936:	2b00      	cmp	r3, #0
 8008938:	f040 80a5 	bne.w	8008a86 <bno055_set_accel_any_motion_no_motion_axis_enable+0x1ca>
                {
                    switch (channel_u8)
 800893c:	79fb      	ldrb	r3, [r7, #7]
 800893e:	2b02      	cmp	r3, #2
 8008940:	d06c      	beq.n	8008a1c <bno055_set_accel_any_motion_no_motion_axis_enable+0x160>
 8008942:	2b02      	cmp	r3, #2
 8008944:	f300 809c 	bgt.w	8008a80 <bno055_set_accel_any_motion_no_motion_axis_enable+0x1c4>
 8008948:	2b00      	cmp	r3, #0
 800894a:	d002      	beq.n	8008952 <bno055_set_accel_any_motion_no_motion_axis_enable+0x96>
 800894c:	2b01      	cmp	r3, #1
 800894e:	d033      	beq.n	80089b8 <bno055_set_accel_any_motion_no_motion_axis_enable+0xfc>
 8008950:	e096      	b.n	8008a80 <bno055_set_accel_any_motion_no_motion_axis_enable+0x1c4>
                    {
                        case BNO055_ACCEL_ANY_MOTION_NO_MOTION_X_AXIS:

                            /* Write the value of
                             * accel anymotion x enable*/
                            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8008952:	4b5d      	ldr	r3, [pc, #372]	@ (8008ac8 <bno055_set_accel_any_motion_no_motion_axis_enable+0x20c>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	691c      	ldr	r4, [r3, #16]
 8008958:	4b5b      	ldr	r3, [pc, #364]	@ (8008ac8 <bno055_set_accel_any_motion_no_motion_axis_enable+0x20c>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	7a58      	ldrb	r0, [r3, #9]
 800895e:	f107 020c 	add.w	r2, r7, #12
 8008962:	2301      	movs	r3, #1
 8008964:	2112      	movs	r1, #18
 8008966:	47a0      	blx	r4
 8008968:	4603      	mov	r3, r0
 800896a:	73fb      	strb	r3, [r7, #15]
                                                                      BNO055_ACCEL_ANY_MOTION_X_AXIS_REG,
                                                                      &data_u8r,
                                                                      BNO055_GEN_READ_WRITE_LENGTH);
                            if (com_rslt == BNO055_SUCCESS)
 800896c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008970:	2b00      	cmp	r3, #0
 8008972:	f040 8091 	bne.w	8008a98 <bno055_set_accel_any_motion_no_motion_axis_enable+0x1dc>
                            {
                                data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_ACCEL_ANY_MOTION_X_AXIS, data_u8);
 8008976:	7b3b      	ldrb	r3, [r7, #12]
 8008978:	b25b      	sxtb	r3, r3
 800897a:	f023 0304 	bic.w	r3, r3, #4
 800897e:	b25a      	sxtb	r2, r3
 8008980:	79bb      	ldrb	r3, [r7, #6]
 8008982:	009b      	lsls	r3, r3, #2
 8008984:	b25b      	sxtb	r3, r3
 8008986:	f003 0304 	and.w	r3, r3, #4
 800898a:	b25b      	sxtb	r3, r3
 800898c:	4313      	orrs	r3, r2
 800898e:	b25b      	sxtb	r3, r3
 8008990:	b2db      	uxtb	r3, r3
 8008992:	733b      	strb	r3, [r7, #12]
                                com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8008994:	4b4c      	ldr	r3, [pc, #304]	@ (8008ac8 <bno055_set_accel_any_motion_no_motion_axis_enable+0x20c>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	68dc      	ldr	r4, [r3, #12]
 800899a:	4b4b      	ldr	r3, [pc, #300]	@ (8008ac8 <bno055_set_accel_any_motion_no_motion_axis_enable+0x20c>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	7a58      	ldrb	r0, [r3, #9]
 80089a0:	f107 020c 	add.w	r2, r7, #12
 80089a4:	2301      	movs	r3, #1
 80089a6:	2112      	movs	r1, #18
 80089a8:	47a0      	blx	r4
 80089aa:	4603      	mov	r3, r0
 80089ac:	b2da      	uxtb	r2, r3
 80089ae:	7bfb      	ldrb	r3, [r7, #15]
 80089b0:	4413      	add	r3, r2
 80089b2:	b2db      	uxtb	r3, r3
 80089b4:	73fb      	strb	r3, [r7, #15]
                                                                            BNO055_ACCEL_ANY_MOTION_X_AXIS_REG,
                                                                            &data_u8r,
                                                                            BNO055_GEN_READ_WRITE_LENGTH);
                            }
                            break;
 80089b6:	e06f      	b.n	8008a98 <bno055_set_accel_any_motion_no_motion_axis_enable+0x1dc>
                        case BNO055_ACCEL_ANY_MOTION_NO_MOTION_Y_AXIS:

                            /* Write the value of
                             * accel anymotion y enable*/
                            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80089b8:	4b43      	ldr	r3, [pc, #268]	@ (8008ac8 <bno055_set_accel_any_motion_no_motion_axis_enable+0x20c>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	691c      	ldr	r4, [r3, #16]
 80089be:	4b42      	ldr	r3, [pc, #264]	@ (8008ac8 <bno055_set_accel_any_motion_no_motion_axis_enable+0x20c>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	7a58      	ldrb	r0, [r3, #9]
 80089c4:	f107 020c 	add.w	r2, r7, #12
 80089c8:	2301      	movs	r3, #1
 80089ca:	2112      	movs	r1, #18
 80089cc:	47a0      	blx	r4
 80089ce:	4603      	mov	r3, r0
 80089d0:	73fb      	strb	r3, [r7, #15]
                                                                      BNO055_ACCEL_ANY_MOTION_Y_AXIS_REG,
                                                                      &data_u8r,
                                                                      BNO055_GEN_READ_WRITE_LENGTH);
                            if (com_rslt == BNO055_SUCCESS)
 80089d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d160      	bne.n	8008a9c <bno055_set_accel_any_motion_no_motion_axis_enable+0x1e0>
                            {
                                data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_ACCEL_ANY_MOTION_Y_AXIS, data_u8);
 80089da:	7b3b      	ldrb	r3, [r7, #12]
 80089dc:	b25b      	sxtb	r3, r3
 80089de:	f023 0308 	bic.w	r3, r3, #8
 80089e2:	b25a      	sxtb	r2, r3
 80089e4:	79bb      	ldrb	r3, [r7, #6]
 80089e6:	00db      	lsls	r3, r3, #3
 80089e8:	b25b      	sxtb	r3, r3
 80089ea:	f003 0308 	and.w	r3, r3, #8
 80089ee:	b25b      	sxtb	r3, r3
 80089f0:	4313      	orrs	r3, r2
 80089f2:	b25b      	sxtb	r3, r3
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	733b      	strb	r3, [r7, #12]
                                com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 80089f8:	4b33      	ldr	r3, [pc, #204]	@ (8008ac8 <bno055_set_accel_any_motion_no_motion_axis_enable+0x20c>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	68dc      	ldr	r4, [r3, #12]
 80089fe:	4b32      	ldr	r3, [pc, #200]	@ (8008ac8 <bno055_set_accel_any_motion_no_motion_axis_enable+0x20c>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	7a58      	ldrb	r0, [r3, #9]
 8008a04:	f107 020c 	add.w	r2, r7, #12
 8008a08:	2301      	movs	r3, #1
 8008a0a:	2112      	movs	r1, #18
 8008a0c:	47a0      	blx	r4
 8008a0e:	4603      	mov	r3, r0
 8008a10:	b2da      	uxtb	r2, r3
 8008a12:	7bfb      	ldrb	r3, [r7, #15]
 8008a14:	4413      	add	r3, r2
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	73fb      	strb	r3, [r7, #15]
                                                                            BNO055_ACCEL_ANY_MOTION_Y_AXIS_REG,
                                                                            &data_u8r,
                                                                            BNO055_GEN_READ_WRITE_LENGTH);
                            }
                            break;
 8008a1a:	e03f      	b.n	8008a9c <bno055_set_accel_any_motion_no_motion_axis_enable+0x1e0>
                        case BNO055_ACCEL_ANY_MOTION_NO_MOTION_Z_AXIS:

                            /* Write the value of
                             * accel anymotion z enable*/
                            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8008a1c:	4b2a      	ldr	r3, [pc, #168]	@ (8008ac8 <bno055_set_accel_any_motion_no_motion_axis_enable+0x20c>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	691c      	ldr	r4, [r3, #16]
 8008a22:	4b29      	ldr	r3, [pc, #164]	@ (8008ac8 <bno055_set_accel_any_motion_no_motion_axis_enable+0x20c>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	7a58      	ldrb	r0, [r3, #9]
 8008a28:	f107 020c 	add.w	r2, r7, #12
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	2112      	movs	r1, #18
 8008a30:	47a0      	blx	r4
 8008a32:	4603      	mov	r3, r0
 8008a34:	73fb      	strb	r3, [r7, #15]
                                                                      BNO055_ACCEL_ANY_MOTION_Z_AXIS_REG,
                                                                      &data_u8r,
                                                                      BNO055_GEN_READ_WRITE_LENGTH);
                            if (com_rslt == BNO055_SUCCESS)
 8008a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d130      	bne.n	8008aa0 <bno055_set_accel_any_motion_no_motion_axis_enable+0x1e4>
                            {
                                data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_ACCEL_ANY_MOTION_Z_AXIS, data_u8);
 8008a3e:	7b3b      	ldrb	r3, [r7, #12]
 8008a40:	b25b      	sxtb	r3, r3
 8008a42:	f023 0310 	bic.w	r3, r3, #16
 8008a46:	b25a      	sxtb	r2, r3
 8008a48:	79bb      	ldrb	r3, [r7, #6]
 8008a4a:	011b      	lsls	r3, r3, #4
 8008a4c:	b25b      	sxtb	r3, r3
 8008a4e:	f003 0310 	and.w	r3, r3, #16
 8008a52:	b25b      	sxtb	r3, r3
 8008a54:	4313      	orrs	r3, r2
 8008a56:	b25b      	sxtb	r3, r3
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	733b      	strb	r3, [r7, #12]
                                com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8008a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8008ac8 <bno055_set_accel_any_motion_no_motion_axis_enable+0x20c>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	68dc      	ldr	r4, [r3, #12]
 8008a62:	4b19      	ldr	r3, [pc, #100]	@ (8008ac8 <bno055_set_accel_any_motion_no_motion_axis_enable+0x20c>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	7a58      	ldrb	r0, [r3, #9]
 8008a68:	f107 020c 	add.w	r2, r7, #12
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	2112      	movs	r1, #18
 8008a70:	47a0      	blx	r4
 8008a72:	4603      	mov	r3, r0
 8008a74:	b2da      	uxtb	r2, r3
 8008a76:	7bfb      	ldrb	r3, [r7, #15]
 8008a78:	4413      	add	r3, r2
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	73fb      	strb	r3, [r7, #15]
                                                                            BNO055_ACCEL_ANY_MOTION_Z_AXIS_REG,
                                                                            &data_u8r,
                                                                            BNO055_GEN_READ_WRITE_LENGTH);
                            }
                            break;
 8008a7e:	e00f      	b.n	8008aa0 <bno055_set_accel_any_motion_no_motion_axis_enable+0x1e4>
                        default:
                            com_rslt = BNO055_OUT_OF_RANGE;
 8008a80:	23fe      	movs	r3, #254	@ 0xfe
 8008a82:	73fb      	strb	r3, [r7, #15]
                            break;
 8008a84:	e00d      	b.n	8008aa2 <bno055_set_accel_any_motion_no_motion_axis_enable+0x1e6>
                    }
                }
                else
                {
                    com_rslt = BNO055_ERROR;
 8008a86:	23ff      	movs	r3, #255	@ 0xff
 8008a88:	73fb      	strb	r3, [r7, #15]
 8008a8a:	e00a      	b.n	8008aa2 <bno055_set_accel_any_motion_no_motion_axis_enable+0x1e6>
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 8008a8c:	23ff      	movs	r3, #255	@ 0xff
 8008a8e:	73fb      	strb	r3, [r7, #15]
 8008a90:	e007      	b.n	8008aa2 <bno055_set_accel_any_motion_no_motion_axis_enable+0x1e6>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8008a92:	23ff      	movs	r3, #255	@ 0xff
 8008a94:	73fb      	strb	r3, [r7, #15]
 8008a96:	e004      	b.n	8008aa2 <bno055_set_accel_any_motion_no_motion_axis_enable+0x1e6>
                            break;
 8008a98:	bf00      	nop
 8008a9a:	e002      	b.n	8008aa2 <bno055_set_accel_any_motion_no_motion_axis_enable+0x1e6>
                            break;
 8008a9c:	bf00      	nop
 8008a9e:	e000      	b.n	8008aa2 <bno055_set_accel_any_motion_no_motion_axis_enable+0x1e6>
                            break;
 8008aa0:	bf00      	nop
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8008aa2:	7afb      	ldrb	r3, [r7, #11]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d009      	beq.n	8008abc <bno055_set_accel_any_motion_no_motion_axis_enable+0x200>
    {
        /* set the operation mode of
         * previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 8008aa8:	7afb      	ldrb	r3, [r7, #11]
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7ff fb9a 	bl	80081e4 <bno055_set_operation_mode>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	b2da      	uxtb	r2, r3
 8008ab4:	7bfb      	ldrb	r3, [r7, #15]
 8008ab6:	4413      	add	r3, r2
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8008abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3714      	adds	r7, #20
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd90      	pop	{r4, r7, pc}
 8008ac8:	200003f0 	.word	0x200003f0

08008acc <dec2bcd>:
#include "stm32f4xx_hal.h"
#include <stdint.h>

#define DS3231_I2C_ADDR   (0x68 << 1) // HAL expects 8-bit address

static uint8_t dec2bcd(uint8_t val) { return (val / 10 * 16) + (val % 10); }
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	71fb      	strb	r3, [r7, #7]
 8008ad6:	79fb      	ldrb	r3, [r7, #7]
 8008ad8:	4a0c      	ldr	r2, [pc, #48]	@ (8008b0c <dec2bcd+0x40>)
 8008ada:	fba2 2303 	umull	r2, r3, r2, r3
 8008ade:	08db      	lsrs	r3, r3, #3
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	011b      	lsls	r3, r3, #4
 8008ae4:	b2d8      	uxtb	r0, r3
 8008ae6:	79fa      	ldrb	r2, [r7, #7]
 8008ae8:	4b08      	ldr	r3, [pc, #32]	@ (8008b0c <dec2bcd+0x40>)
 8008aea:	fba3 1302 	umull	r1, r3, r3, r2
 8008aee:	08d9      	lsrs	r1, r3, #3
 8008af0:	460b      	mov	r3, r1
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	440b      	add	r3, r1
 8008af6:	005b      	lsls	r3, r3, #1
 8008af8:	1ad3      	subs	r3, r2, r3
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	4403      	add	r3, r0
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	4618      	mov	r0, r3
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr
 8008b0c:	cccccccd 	.word	0xcccccccd

08008b10 <bcd2dec>:
static uint8_t bcd2dec(uint8_t val) { return (val / 16 * 10) + (val % 16); }
 8008b10:	b480      	push	{r7}
 8008b12:	b083      	sub	sp, #12
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	4603      	mov	r3, r0
 8008b18:	71fb      	strb	r3, [r7, #7]
 8008b1a:	79fb      	ldrb	r3, [r7, #7]
 8008b1c:	091b      	lsrs	r3, r3, #4
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	461a      	mov	r2, r3
 8008b22:	0092      	lsls	r2, r2, #2
 8008b24:	4413      	add	r3, r2
 8008b26:	005b      	lsls	r3, r3, #1
 8008b28:	b2da      	uxtb	r2, r3
 8008b2a:	79fb      	ldrb	r3, [r7, #7]
 8008b2c:	f003 030f 	and.w	r3, r3, #15
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	4413      	add	r3, r2
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	4618      	mov	r0, r3
 8008b38:	370c      	adds	r7, #12
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr
	...

08008b44 <DS3231_SetDateTime>:

// Set DS3231 time and date using HAL RTC typedefs
HAL_StatusTypeDef DS3231_SetDateTime(I2C_HandleTypeDef *hi2c,
                                     RTC_TimeTypeDef *time,
                                     RTC_DateTypeDef *date)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b08a      	sub	sp, #40	@ 0x28
 8008b48:	af04      	add	r7, sp, #16
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	607a      	str	r2, [r7, #4]
    uint8_t buf[7];

    buf[0] = dec2bcd(time->Seconds);
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	789b      	ldrb	r3, [r3, #2]
 8008b54:	4618      	mov	r0, r3
 8008b56:	f7ff ffb9 	bl	8008acc <dec2bcd>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	743b      	strb	r3, [r7, #16]
    buf[1] = dec2bcd(time->Minutes);
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	785b      	ldrb	r3, [r3, #1]
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7ff ffb2 	bl	8008acc <dec2bcd>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	747b      	strb	r3, [r7, #17]

    // ---- Hours ----
    uint8_t hour_bcd = dec2bcd(time->Hours % 12);
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	781a      	ldrb	r2, [r3, #0]
 8008b70:	4b27      	ldr	r3, [pc, #156]	@ (8008c10 <DS3231_SetDateTime+0xcc>)
 8008b72:	fba3 1302 	umull	r1, r3, r3, r2
 8008b76:	08d9      	lsrs	r1, r3, #3
 8008b78:	460b      	mov	r3, r1
 8008b7a:	005b      	lsls	r3, r3, #1
 8008b7c:	440b      	add	r3, r1
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	1ad3      	subs	r3, r2, r3
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	4618      	mov	r0, r3
 8008b86:	f7ff ffa1 	bl	8008acc <dec2bcd>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	75fb      	strb	r3, [r7, #23]
    if(hour_bcd == 0) hour_bcd = 0x12;     // 12-hour mode uses 12 instead of 0
 8008b8e:	7dfb      	ldrb	r3, [r7, #23]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d101      	bne.n	8008b98 <DS3231_SetDateTime+0x54>
 8008b94:	2312      	movs	r3, #18
 8008b96:	75fb      	strb	r3, [r7, #23]
    hour_bcd |= 0x40;                      // 12-hour mode
 8008b98:	7dfb      	ldrb	r3, [r7, #23]
 8008b9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b9e:	75fb      	strb	r3, [r7, #23]
    if(time->TimeFormat) hour_bcd |= 0x20; // PM if TimeFormat = 1
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	78db      	ldrb	r3, [r3, #3]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d003      	beq.n	8008bb0 <DS3231_SetDateTime+0x6c>
 8008ba8:	7dfb      	ldrb	r3, [r7, #23]
 8008baa:	f043 0320 	orr.w	r3, r3, #32
 8008bae:	75fb      	strb	r3, [r7, #23]
    buf[2] = hour_bcd;
 8008bb0:	7dfb      	ldrb	r3, [r7, #23]
 8008bb2:	74bb      	strb	r3, [r7, #18]

    buf[3] = dec2bcd(date->WeekDay);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7ff ff87 	bl	8008acc <dec2bcd>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	74fb      	strb	r3, [r7, #19]
    buf[4] = dec2bcd(date->Date);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	789b      	ldrb	r3, [r3, #2]
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7ff ff80 	bl	8008acc <dec2bcd>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	753b      	strb	r3, [r7, #20]
    buf[5] = dec2bcd(date->Month);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	785b      	ldrb	r3, [r3, #1]
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f7ff ff79 	bl	8008acc <dec2bcd>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	757b      	strb	r3, [r7, #21]
    buf[6] = dec2bcd(date->Year);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	78db      	ldrb	r3, [r3, #3]
 8008be2:	4618      	mov	r0, r3
 8008be4:	f7ff ff72 	bl	8008acc <dec2bcd>
 8008be8:	4603      	mov	r3, r0
 8008bea:	75bb      	strb	r3, [r7, #22]

    return HAL_I2C_Mem_Write(hi2c, DS3231_I2C_ADDR, 0x00,
 8008bec:	2364      	movs	r3, #100	@ 0x64
 8008bee:	9302      	str	r3, [sp, #8]
 8008bf0:	2307      	movs	r3, #7
 8008bf2:	9301      	str	r3, [sp, #4]
 8008bf4:	f107 0310 	add.w	r3, r7, #16
 8008bf8:	9300      	str	r3, [sp, #0]
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	21d0      	movs	r1, #208	@ 0xd0
 8008c00:	68f8      	ldr	r0, [r7, #12]
 8008c02:	f7fa fb83 	bl	800330c <HAL_I2C_Mem_Write>
 8008c06:	4603      	mov	r3, r0
                             I2C_MEMADD_SIZE_8BIT, buf, 7, 100);
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3718      	adds	r7, #24
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	aaaaaaab 	.word	0xaaaaaaab

08008c14 <DS3231_GetDateTime>:

// Get DS3231 time and date into HAL RTC typedefs
HAL_StatusTypeDef DS3231_GetDateTime(I2C_HandleTypeDef *hi2c,
                                     RTC_TimeTypeDef *time,
                                     RTC_DateTypeDef *date)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b08c      	sub	sp, #48	@ 0x30
 8008c18:	af04      	add	r7, sp, #16
 8008c1a:	60f8      	str	r0, [r7, #12]
 8008c1c:	60b9      	str	r1, [r7, #8]
 8008c1e:	607a      	str	r2, [r7, #4]
    uint8_t buf[7];
    HAL_StatusTypeDef status;

    status = HAL_I2C_Mem_Read(hi2c, DS3231_I2C_ADDR, 0x00,
 8008c20:	2364      	movs	r3, #100	@ 0x64
 8008c22:	9302      	str	r3, [sp, #8]
 8008c24:	2307      	movs	r3, #7
 8008c26:	9301      	str	r3, [sp, #4]
 8008c28:	f107 0314 	add.w	r3, r7, #20
 8008c2c:	9300      	str	r3, [sp, #0]
 8008c2e:	2301      	movs	r3, #1
 8008c30:	2200      	movs	r2, #0
 8008c32:	21d0      	movs	r1, #208	@ 0xd0
 8008c34:	68f8      	ldr	r0, [r7, #12]
 8008c36:	f7fa fc63 	bl	8003500 <HAL_I2C_Mem_Read>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	77fb      	strb	r3, [r7, #31]
                              I2C_MEMADD_SIZE_8BIT, buf, 7, 100);
    if(status != HAL_OK) return status;
 8008c3e:	7ffb      	ldrb	r3, [r7, #31]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d001      	beq.n	8008c48 <DS3231_GetDateTime+0x34>
 8008c44:	7ffb      	ldrb	r3, [r7, #31]
 8008c46:	e087      	b.n	8008d58 <DS3231_GetDateTime+0x144>

    time->Seconds = bcd2dec(buf[0] & 0x7F);
 8008c48:	7d3b      	ldrb	r3, [r7, #20]
 8008c4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	4618      	mov	r0, r3
 8008c52:	f7ff ff5d 	bl	8008b10 <bcd2dec>
 8008c56:	4603      	mov	r3, r0
 8008c58:	461a      	mov	r2, r3
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	709a      	strb	r2, [r3, #2]
    time->Minutes = bcd2dec(buf[1] & 0x7F);
 8008c5e:	7d7b      	ldrb	r3, [r7, #21]
 8008c60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	4618      	mov	r0, r3
 8008c68:	f7ff ff52 	bl	8008b10 <bcd2dec>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	461a      	mov	r2, r3
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	705a      	strb	r2, [r3, #1]

    if(buf[2] & 0x40) // 12-hour mode
 8008c74:	7dbb      	ldrb	r3, [r7, #22]
 8008c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d01a      	beq.n	8008cb4 <DS3231_GetDateTime+0xa0>
    {
        time->Hours = bcd2dec(buf[2] & 0x1F);
 8008c7e:	7dbb      	ldrb	r3, [r7, #22]
 8008c80:	f003 031f 	and.w	r3, r3, #31
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	4618      	mov	r0, r3
 8008c88:	f7ff ff42 	bl	8008b10 <bcd2dec>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	461a      	mov	r2, r3
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	701a      	strb	r2, [r3, #0]
        if(time->Hours == 0) time->Hours = 12;
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d102      	bne.n	8008ca2 <DS3231_GetDateTime+0x8e>
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	220c      	movs	r2, #12
 8008ca0:	701a      	strb	r2, [r3, #0]
        time->TimeFormat = (buf[2] & 0x20) ? 1 : 0; // 0=AM,1=PM
 8008ca2:	7dbb      	ldrb	r3, [r7, #22]
 8008ca4:	115b      	asrs	r3, r3, #5
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	f003 0301 	and.w	r3, r3, #1
 8008cac:	b2da      	uxtb	r2, r3
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	70da      	strb	r2, [r3, #3]
 8008cb2:	e02d      	b.n	8008d10 <DS3231_GetDateTime+0xfc>
    }
    else // 24-hour fallback
    {
        uint8_t hours_24 = bcd2dec(buf[2] & 0x3F);
 8008cb4:	7dbb      	ldrb	r3, [r7, #22]
 8008cb6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7ff ff27 	bl	8008b10 <bcd2dec>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	77bb      	strb	r3, [r7, #30]
        time->TimeFormat = (hours_24 >= 12) ? 1 : 0;
 8008cc6:	7fbb      	ldrb	r3, [r7, #30]
 8008cc8:	2b0b      	cmp	r3, #11
 8008cca:	bf8c      	ite	hi
 8008ccc:	2301      	movhi	r3, #1
 8008cce:	2300      	movls	r3, #0
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	70da      	strb	r2, [r3, #3]
        time->Hours = (hours_24 % 12 == 0) ? 12 : (hours_24 % 12);
 8008cd8:	7fba      	ldrb	r2, [r7, #30]
 8008cda:	4b21      	ldr	r3, [pc, #132]	@ (8008d60 <DS3231_GetDateTime+0x14c>)
 8008cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8008ce0:	08d9      	lsrs	r1, r3, #3
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	005b      	lsls	r3, r3, #1
 8008ce6:	440b      	add	r3, r1
 8008ce8:	009b      	lsls	r3, r3, #2
 8008cea:	1ad3      	subs	r3, r2, r3
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d00b      	beq.n	8008d0a <DS3231_GetDateTime+0xf6>
 8008cf2:	7fba      	ldrb	r2, [r7, #30]
 8008cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8008d60 <DS3231_GetDateTime+0x14c>)
 8008cf6:	fba3 1302 	umull	r1, r3, r3, r2
 8008cfa:	08d9      	lsrs	r1, r3, #3
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	005b      	lsls	r3, r3, #1
 8008d00:	440b      	add	r3, r1
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	1ad3      	subs	r3, r2, r3
 8008d06:	b2da      	uxtb	r2, r3
 8008d08:	e000      	b.n	8008d0c <DS3231_GetDateTime+0xf8>
 8008d0a:	220c      	movs	r2, #12
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	701a      	strb	r2, [r3, #0]
    }

    date->WeekDay = bcd2dec(buf[3]);
 8008d10:	7dfb      	ldrb	r3, [r7, #23]
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7ff fefc 	bl	8008b10 <bcd2dec>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	701a      	strb	r2, [r3, #0]
    date->Date    = bcd2dec(buf[4]);
 8008d20:	7e3b      	ldrb	r3, [r7, #24]
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7ff fef4 	bl	8008b10 <bcd2dec>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	709a      	strb	r2, [r3, #2]
    date->Month   = bcd2dec(buf[5] & 0x1F);
 8008d30:	7e7b      	ldrb	r3, [r7, #25]
 8008d32:	f003 031f 	and.w	r3, r3, #31
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7ff fee9 	bl	8008b10 <bcd2dec>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	461a      	mov	r2, r3
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	705a      	strb	r2, [r3, #1]
    date->Year    = bcd2dec(buf[6]); // last 2 digits
 8008d46:	7ebb      	ldrb	r3, [r7, #26]
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f7ff fee1 	bl	8008b10 <bcd2dec>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	461a      	mov	r2, r3
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	70da      	strb	r2, [r3, #3]

    return HAL_OK;
 8008d56:	2300      	movs	r3, #0
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3720      	adds	r7, #32
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}
 8008d60:	aaaaaaab 	.word	0xaaaaaaab

08008d64 <ht16k33_init>:

} Ht16k33_Config;


Ht16k33_Config_t* ht16k33_init(I2C_HandleTypeDef* const hi2c, const uint8_t addrs)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	460b      	mov	r3, r1
 8008d6e:	70fb      	strb	r3, [r7, #3]
  Ht16k33_Config_t* pConfig = malloc(sizeof(Ht16k33_Config_t));
 8008d70:	200c      	movs	r0, #12
 8008d72:	f004 fe51 	bl	800da18 <malloc>
 8008d76:	4603      	mov	r3, r0
 8008d78:	60fb      	str	r3, [r7, #12]
  pConfig->i2cAddrs = addrs << 1;
 8008d7a:	78fb      	ldrb	r3, [r7, #3]
 8008d7c:	005b      	lsls	r3, r3, #1
 8008d7e:	b2da      	uxtb	r2, r3
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	711a      	strb	r2, [r3, #4]
  pConfig->hi2c = hi2c;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	601a      	str	r2, [r3, #0]

  pConfig->hSysSetupReg.regAddrs        = SYSTEM_SETUP_REG_ADDRESS;
 8008d8a:	68fa      	ldr	r2, [r7, #12]
 8008d8c:	7953      	ldrb	r3, [r2, #5]
 8008d8e:	2102      	movs	r1, #2
 8008d90:	f361 1307 	bfi	r3, r1, #4, #4
 8008d94:	7153      	strb	r3, [r2, #5]
  pConfig->hDisplayReg.regAddrs         = DISPLAY_SETUP_REG_ADDRESS;
 8008d96:	68fa      	ldr	r2, [r7, #12]
 8008d98:	7993      	ldrb	r3, [r2, #6]
 8008d9a:	2108      	movs	r1, #8
 8008d9c:	f361 1307 	bfi	r3, r1, #4, #4
 8008da0:	7193      	strb	r3, [r2, #6]
  pConfig->hDimmingSetReg.regAddrs      = DIMMING_SET_REG_ADDRESS;
 8008da2:	68fa      	ldr	r2, [r7, #12]
 8008da4:	79d3      	ldrb	r3, [r2, #7]
 8008da6:	210e      	movs	r1, #14
 8008da8:	f361 1307 	bfi	r3, r1, #4, #4
 8008dac:	71d3      	strb	r3, [r2, #7]
  pConfig->hDisplayAddrsPtrReg.regAddrs = DISPLAY_DATA_REG_ADDRESS;
 8008dae:	68fa      	ldr	r2, [r7, #12]
 8008db0:	7a13      	ldrb	r3, [r2, #8]
 8008db2:	f36f 1307 	bfc	r3, #4, #4
 8008db6:	7213      	strb	r3, [r2, #8]
  return pConfig;
 8008db8:	68fb      	ldr	r3, [r7, #12]
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}

08008dc2 <ht16k33_setSystemSetup>:

Ht16k33_Status_t ht16k33_setSystemSetup(Ht16k33_Config_t* const pConfig, const Ht16k33_DisplayStatus_e displayStatus)
{
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b086      	sub	sp, #24
 8008dc6:	af02      	add	r7, sp, #8
 8008dc8:	6078      	str	r0, [r7, #4]
 8008dca:	460b      	mov	r3, r1
 8008dcc:	70fb      	strb	r3, [r7, #3]
  pConfig->hSysSetupReg.s = displayStatus;
 8008dce:	78fb      	ldrb	r3, [r7, #3]
 8008dd0:	f003 0301 	and.w	r3, r3, #1
 8008dd4:	b2d9      	uxtb	r1, r3
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	7953      	ldrb	r3, [r2, #5]
 8008dda:	f361 0300 	bfi	r3, r1, #0, #1
 8008dde:	7153      	strb	r3, [r2, #5]

  uint8_t sysSetupReg = 0;
 8008de0:	2300      	movs	r3, #0
 8008de2:	73fb      	strb	r3, [r7, #15]
  sysSetupReg |= (pConfig->hSysSetupReg.s & 0x01) << 0;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	795b      	ldrb	r3, [r3, #5]
 8008de8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	b25b      	sxtb	r3, r3
 8008df0:	f003 0301 	and.w	r3, r3, #1
 8008df4:	b25a      	sxtb	r2, r3
 8008df6:	7bfb      	ldrb	r3, [r7, #15]
 8008df8:	b25b      	sxtb	r3, r3
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	b25b      	sxtb	r3, r3
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	73fb      	strb	r3, [r7, #15]
  sysSetupReg |= (pConfig->hSysSetupReg.regAddrs & 0x0F) << 4;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	795b      	ldrb	r3, [r3, #5]
 8008e06:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	011b      	lsls	r3, r3, #4
 8008e0e:	b25a      	sxtb	r2, r3
 8008e10:	7bfb      	ldrb	r3, [r7, #15]
 8008e12:	b25b      	sxtb	r3, r3
 8008e14:	4313      	orrs	r3, r2
 8008e16:	b25b      	sxtb	r3, r3
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	73fb      	strb	r3, [r7, #15]

  return
      HAL_I2C_Master_Transmit(pConfig->hi2c, pConfig->i2cAddrs, &sysSetupReg, sizeof(sysSetupReg),HAL_MAX_DELAY);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6818      	ldr	r0, [r3, #0]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	791b      	ldrb	r3, [r3, #4]
 8008e24:	4619      	mov	r1, r3
 8008e26:	f107 020f 	add.w	r2, r7, #15
 8008e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8008e2e:	9300      	str	r3, [sp, #0]
 8008e30:	2301      	movs	r3, #1
 8008e32:	f7f9 ff3b 	bl	8002cac <HAL_I2C_Master_Transmit>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	bf14      	ite	ne
 8008e3c:	2301      	movne	r3, #1
 8008e3e:	2300      	moveq	r3, #0
 8008e40:	b2db      	uxtb	r3, r3
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3710      	adds	r7, #16
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <ht16k33_setDisplaySetup>:

Ht16k33_Status_t ht16k33_setDisplaySetup(Ht16k33_Config_t* const pConfig, const Ht16k33_DisplayStatus_e dispStatus,
    const Ht16k33_BlinkingFreq_e frequency)
{
 8008e4a:	b580      	push	{r7, lr}
 8008e4c:	b086      	sub	sp, #24
 8008e4e:	af02      	add	r7, sp, #8
 8008e50:	6078      	str	r0, [r7, #4]
 8008e52:	460b      	mov	r3, r1
 8008e54:	70fb      	strb	r3, [r7, #3]
 8008e56:	4613      	mov	r3, r2
 8008e58:	70bb      	strb	r3, [r7, #2]
  pConfig->hDisplayReg.d = dispStatus;
 8008e5a:	78fb      	ldrb	r3, [r7, #3]
 8008e5c:	f003 0301 	and.w	r3, r3, #1
 8008e60:	b2d9      	uxtb	r1, r3
 8008e62:	687a      	ldr	r2, [r7, #4]
 8008e64:	7993      	ldrb	r3, [r2, #6]
 8008e66:	f361 0300 	bfi	r3, r1, #0, #1
 8008e6a:	7193      	strb	r3, [r2, #6]
  pConfig->hDisplayReg.b = frequency;
 8008e6c:	78bb      	ldrb	r3, [r7, #2]
 8008e6e:	f003 0303 	and.w	r3, r3, #3
 8008e72:	b2d9      	uxtb	r1, r3
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	7993      	ldrb	r3, [r2, #6]
 8008e78:	f361 0342 	bfi	r3, r1, #1, #2
 8008e7c:	7193      	strb	r3, [r2, #6]

  uint8_t dispSetupReg = 0;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	73fb      	strb	r3, [r7, #15]

  dispSetupReg |= (pConfig->hDisplayReg.d & 0x01) << 0;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	799b      	ldrb	r3, [r3, #6]
 8008e86:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	b25b      	sxtb	r3, r3
 8008e8e:	f003 0301 	and.w	r3, r3, #1
 8008e92:	b25a      	sxtb	r2, r3
 8008e94:	7bfb      	ldrb	r3, [r7, #15]
 8008e96:	b25b      	sxtb	r3, r3
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	b25b      	sxtb	r3, r3
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	73fb      	strb	r3, [r7, #15]
  dispSetupReg |= (pConfig->hDisplayReg.b & 0x03) << 1;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	799b      	ldrb	r3, [r3, #6]
 8008ea4:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	005b      	lsls	r3, r3, #1
 8008eac:	b25b      	sxtb	r3, r3
 8008eae:	f003 0306 	and.w	r3, r3, #6
 8008eb2:	b25a      	sxtb	r2, r3
 8008eb4:	7bfb      	ldrb	r3, [r7, #15]
 8008eb6:	b25b      	sxtb	r3, r3
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	b25b      	sxtb	r3, r3
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	73fb      	strb	r3, [r7, #15]
  dispSetupReg |= (pConfig->hDisplayReg.regAddrs & 0x0F) << 4;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	799b      	ldrb	r3, [r3, #6]
 8008ec4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	011b      	lsls	r3, r3, #4
 8008ecc:	b25a      	sxtb	r2, r3
 8008ece:	7bfb      	ldrb	r3, [r7, #15]
 8008ed0:	b25b      	sxtb	r3, r3
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	b25b      	sxtb	r3, r3
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	73fb      	strb	r3, [r7, #15]

  return
      HAL_I2C_Master_Transmit(pConfig->hi2c, pConfig->i2cAddrs, &dispSetupReg, sizeof(dispSetupReg),HAL_MAX_DELAY);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6818      	ldr	r0, [r3, #0]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	791b      	ldrb	r3, [r3, #4]
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	f107 020f 	add.w	r2, r7, #15
 8008ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8008eec:	9300      	str	r3, [sp, #0]
 8008eee:	2301      	movs	r3, #1
 8008ef0:	f7f9 fedc 	bl	8002cac <HAL_I2C_Master_Transmit>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	bf14      	ite	ne
 8008efa:	2301      	movne	r3, #1
 8008efc:	2300      	moveq	r3, #0
 8008efe:	b2db      	uxtb	r3, r3
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3710      	adds	r7, #16
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <ht16k33_updateDisplayData>:
      HAL_I2C_Master_Transmit(pConfig->hi2c, pConfig->i2cAddrs, &dimmingSetReg, sizeof(dimmingSetReg),HAL_MAX_DELAY);
}

Ht16k33_Status_t ht16k33_updateDisplayData (Ht16k33_Config_t* const pConfig, const uint8_t ramAddrs,
    uint8_t* const dispDataBuffer, const uint8_t dispDataBufferSize)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b088      	sub	sp, #32
 8008f0c:	af02      	add	r7, sp, #8
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	607a      	str	r2, [r7, #4]
 8008f12:	461a      	mov	r2, r3
 8008f14:	460b      	mov	r3, r1
 8008f16:	72fb      	strb	r3, [r7, #11]
 8008f18:	4613      	mov	r3, r2
 8008f1a:	72bb      	strb	r3, [r7, #10]
  uint8_t* transmitBuffer     = malloc (dispDataBufferSize + 1);
 8008f1c:	7abb      	ldrb	r3, [r7, #10]
 8008f1e:	3301      	adds	r3, #1
 8008f20:	4618      	mov	r0, r3
 8008f22:	f004 fd79 	bl	800da18 <malloc>
 8008f26:	4603      	mov	r3, r0
 8008f28:	617b      	str	r3, [r7, #20]
  Ht16k33_Status_t isSuccess   = 0;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	74fb      	strb	r3, [r7, #19]
  uint8_t dispDataAddrsPtrReg = 0;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	74bb      	strb	r3, [r7, #18]

  pConfig->hDisplayAddrsPtrReg.a = ramAddrs;
 8008f32:	7afb      	ldrb	r3, [r7, #11]
 8008f34:	f003 030f 	and.w	r3, r3, #15
 8008f38:	b2d9      	uxtb	r1, r3
 8008f3a:	68fa      	ldr	r2, [r7, #12]
 8008f3c:	7a13      	ldrb	r3, [r2, #8]
 8008f3e:	f361 0303 	bfi	r3, r1, #0, #4
 8008f42:	7213      	strb	r3, [r2, #8]

  dispDataAddrsPtrReg |= (pConfig->hDisplayAddrsPtrReg.a & 0x0F) << 0;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	7a1b      	ldrb	r3, [r3, #8]
 8008f48:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	b25b      	sxtb	r3, r3
 8008f50:	f003 030f 	and.w	r3, r3, #15
 8008f54:	b25a      	sxtb	r2, r3
 8008f56:	7cbb      	ldrb	r3, [r7, #18]
 8008f58:	b25b      	sxtb	r3, r3
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	b25b      	sxtb	r3, r3
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	74bb      	strb	r3, [r7, #18]
  dispDataAddrsPtrReg |= (pConfig->hDisplayAddrsPtrReg.regAddrs & 0x0F) << 4;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	7a1b      	ldrb	r3, [r3, #8]
 8008f66:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	011b      	lsls	r3, r3, #4
 8008f6e:	b25a      	sxtb	r2, r3
 8008f70:	7cbb      	ldrb	r3, [r7, #18]
 8008f72:	b25b      	sxtb	r3, r3
 8008f74:	4313      	orrs	r3, r2
 8008f76:	b25b      	sxtb	r3, r3
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	74bb      	strb	r3, [r7, #18]

  memcpy(transmitBuffer, &dispDataAddrsPtrReg, sizeof(dispDataAddrsPtrReg));
 8008f7c:	7cba      	ldrb	r2, [r7, #18]
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	701a      	strb	r2, [r3, #0]
  memcpy(transmitBuffer + 1, dispDataBuffer, dispDataBufferSize);
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	3301      	adds	r3, #1
 8008f86:	7aba      	ldrb	r2, [r7, #10]
 8008f88:	6879      	ldr	r1, [r7, #4]
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f005 f9b5 	bl	800e2fa <memcpy>

  isSuccess = HAL_I2C_Master_Transmit(pConfig->hi2c, pConfig->i2cAddrs, transmitBuffer, (dispDataBufferSize + 1),
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6818      	ldr	r0, [r3, #0]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	791b      	ldrb	r3, [r3, #4]
 8008f98:	4619      	mov	r1, r3
 8008f9a:	7abb      	ldrb	r3, [r7, #10]
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8008fa6:	9200      	str	r2, [sp, #0]
 8008fa8:	697a      	ldr	r2, [r7, #20]
 8008faa:	f7f9 fe7f 	bl	8002cac <HAL_I2C_Master_Transmit>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	bf14      	ite	ne
 8008fb4:	2301      	movne	r3, #1
 8008fb6:	2300      	moveq	r3, #0
 8008fb8:	74fb      	strb	r3, [r7, #19]
      HAL_MAX_DELAY);

  free(transmitBuffer);
 8008fba:	6978      	ldr	r0, [r7, #20]
 8008fbc:	f004 fd34 	bl	800da28 <free>

  return isSuccess;
 8008fc0:	7cfb      	ldrb	r3, [r7, #19]
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3718      	adds	r7, #24
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}

08008fca <keypad3x4w_init>:

} Keypad3x4w_Config;


Keypad3x4w_Config_t * keypad3x4w_init(const Keypad3x4w_PinConfig_t * const pPinConfig)
{
 8008fca:	b580      	push	{r7, lr}
 8008fcc:	b084      	sub	sp, #16
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
  Keypad3x4w_Config_t * pConfig = malloc(sizeof(Keypad3x4w_Config_t));
 8008fd2:	2008      	movs	r0, #8
 8008fd4:	f004 fd20 	bl	800da18 <malloc>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	60fb      	str	r3, [r7, #12]

  pConfig->pkeypadPinConfig = pPinConfig;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	601a      	str	r2, [r3, #0]

  return pConfig;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3710      	adds	r7, #16
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <keypad3x4w_setColumnGpio>:

Keypad3x4w_Status_t keypad3x4w_setColumnGpio(Keypad3x4w_Config_t * pConfig, keypad3x4w_ColumnScanType_e columnScanType)
{
 8008fec:	b5b0      	push	{r4, r5, r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	70fb      	strb	r3, [r7, #3]

  for (uint8_t columnCount = 0; columnCount < KEYPAD_COLUMN_NUMBER; columnCount++)
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	73fb      	strb	r3, [r7, #15]
 8008ffc:	e01b      	b.n	8009036 <keypad3x4w_setColumnGpio+0x4a>
  {
    HAL_GPIO_WritePin(pConfig->pkeypadPinConfig->Column_Port[columnCount],
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	7bfa      	ldrb	r2, [r7, #15]
 8009004:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
        pConfig->pkeypadPinConfig->Column_Pin[columnCount], columnScanConfig[columnScanType][columnCount]);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681a      	ldr	r2, [r3, #0]
    HAL_GPIO_WritePin(pConfig->pkeypadPinConfig->Column_Port[columnCount],
 800900c:	7bfb      	ldrb	r3, [r7, #15]
        pConfig->pkeypadPinConfig->Column_Pin[columnCount], columnScanConfig[columnScanType][columnCount]);
 800900e:	3304      	adds	r3, #4
 8009010:	005b      	lsls	r3, r3, #1
 8009012:	4413      	add	r3, r2
 8009014:	889c      	ldrh	r4, [r3, #4]
 8009016:	78fa      	ldrb	r2, [r7, #3]
 8009018:	7bf9      	ldrb	r1, [r7, #15]
 800901a:	4d0b      	ldr	r5, [pc, #44]	@ (8009048 <keypad3x4w_setColumnGpio+0x5c>)
 800901c:	4613      	mov	r3, r2
 800901e:	005b      	lsls	r3, r3, #1
 8009020:	4413      	add	r3, r2
 8009022:	442b      	add	r3, r5
 8009024:	440b      	add	r3, r1
 8009026:	781b      	ldrb	r3, [r3, #0]
    HAL_GPIO_WritePin(pConfig->pkeypadPinConfig->Column_Port[columnCount],
 8009028:	461a      	mov	r2, r3
 800902a:	4621      	mov	r1, r4
 800902c:	f7f9 fcc8 	bl	80029c0 <HAL_GPIO_WritePin>
  for (uint8_t columnCount = 0; columnCount < KEYPAD_COLUMN_NUMBER; columnCount++)
 8009030:	7bfb      	ldrb	r3, [r7, #15]
 8009032:	3301      	adds	r3, #1
 8009034:	73fb      	strb	r3, [r7, #15]
 8009036:	7bfb      	ldrb	r3, [r7, #15]
 8009038:	2b02      	cmp	r3, #2
 800903a:	d9e0      	bls.n	8008ffe <keypad3x4w_setColumnGpio+0x12>
  }
  return 0;
 800903c:	2300      	movs	r3, #0
}
 800903e:	4618      	mov	r0, r3
 8009040:	3710      	adds	r7, #16
 8009042:	46bd      	mov	sp, r7
 8009044:	bdb0      	pop	{r4, r5, r7, pc}
 8009046:	bf00      	nop
 8009048:	0800efe8 	.word	0x0800efe8

0800904c <keypad3x4w_readKeypad>:


Keypad3x4w_Status_t keypad3x4w_readKeypad(Keypad3x4w_Config_t * pConfig, uint8_t* pKey)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  Keypad3x4w_Status_t isPressed = false;
 8009056:	2300      	movs	r3, #0
 8009058:	73fb      	strb	r3, [r7, #15]

  //Turn on column GPIO outputs
  keypad3x4w_setColumnGpio(pConfig, keypad3x4w_ColumnScanType_Full);
 800905a:	2100      	movs	r1, #0
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f7ff ffc5 	bl	8008fec <keypad3x4w_setColumnGpio>

  //Check if a row has been activated
  for (uint8_t rowCount = 0; rowCount < KEYPAD_ROW_NUMBER; rowCount++)
 8009062:	2300      	movs	r3, #0
 8009064:	73bb      	strb	r3, [r7, #14]
 8009066:	e050      	b.n	800910a <keypad3x4w_readKeypad+0xbe>
  {
    if (HAL_GPIO_ReadPin (pConfig->pkeypadPinConfig->Row_Port[rowCount], pConfig->pkeypadPinConfig->Row_Pin[rowCount]))
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	7bbb      	ldrb	r3, [r7, #14]
 800906e:	3304      	adds	r3, #4
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	4413      	add	r3, r2
 8009074:	6858      	ldr	r0, [r3, #4]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	7bbb      	ldrb	r3, [r7, #14]
 800907c:	3310      	adds	r3, #16
 800907e:	005b      	lsls	r3, r3, #1
 8009080:	4413      	add	r3, r2
 8009082:	889b      	ldrh	r3, [r3, #4]
 8009084:	4619      	mov	r1, r3
 8009086:	f7f9 fc83 	bl	8002990 <HAL_GPIO_ReadPin>
 800908a:	4603      	mov	r3, r0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d039      	beq.n	8009104 <keypad3x4w_readKeypad+0xb8>
    {
      //Determine Column Pressed
      for (uint8_t columnCount = 0; columnCount < KEYPAD_COLUMN_NUMBER; columnCount++)
 8009090:	2300      	movs	r3, #0
 8009092:	737b      	strb	r3, [r7, #13]
 8009094:	e033      	b.n	80090fe <keypad3x4w_readKeypad+0xb2>
      {
        keypad3x4w_setColumnGpio(pConfig, keypad3x4w_ColumnScanType_Col1 + columnCount);
 8009096:	7b7b      	ldrb	r3, [r7, #13]
 8009098:	3301      	adds	r3, #1
 800909a:	b2db      	uxtb	r3, r3
 800909c:	4619      	mov	r1, r3
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f7ff ffa4 	bl	8008fec <keypad3x4w_setColumnGpio>

        for (uint8_t rowCount = 0; rowCount < KEYPAD_ROW_NUMBER; rowCount++)
 80090a4:	2300      	movs	r3, #0
 80090a6:	733b      	strb	r3, [r7, #12]
 80090a8:	e023      	b.n	80090f2 <keypad3x4w_readKeypad+0xa6>
        {
          if (HAL_GPIO_ReadPin (pConfig->pkeypadPinConfig->Row_Port[rowCount], pConfig->pkeypadPinConfig->Row_Pin[rowCount]))
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	7b3b      	ldrb	r3, [r7, #12]
 80090b0:	3304      	adds	r3, #4
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	4413      	add	r3, r2
 80090b6:	6858      	ldr	r0, [r3, #4]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	7b3b      	ldrb	r3, [r7, #12]
 80090be:	3310      	adds	r3, #16
 80090c0:	005b      	lsls	r3, r3, #1
 80090c2:	4413      	add	r3, r2
 80090c4:	889b      	ldrh	r3, [r3, #4]
 80090c6:	4619      	mov	r1, r3
 80090c8:	f7f9 fc62 	bl	8002990 <HAL_GPIO_ReadPin>
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d00c      	beq.n	80090ec <keypad3x4w_readKeypad+0xa0>
          {
            isPressed = true;
 80090d2:	2301      	movs	r3, #1
 80090d4:	73fb      	strb	r3, [r7, #15]
            *pKey = keypadNumberOrder[rowCount][columnCount];
 80090d6:	7b3a      	ldrb	r2, [r7, #12]
 80090d8:	7b79      	ldrb	r1, [r7, #13]
 80090da:	4810      	ldr	r0, [pc, #64]	@ (800911c <keypad3x4w_readKeypad+0xd0>)
 80090dc:	4613      	mov	r3, r2
 80090de:	005b      	lsls	r3, r3, #1
 80090e0:	4413      	add	r3, r2
 80090e2:	4403      	add	r3, r0
 80090e4:	440b      	add	r3, r1
 80090e6:	781a      	ldrb	r2, [r3, #0]
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	701a      	strb	r2, [r3, #0]
        for (uint8_t rowCount = 0; rowCount < KEYPAD_ROW_NUMBER; rowCount++)
 80090ec:	7b3b      	ldrb	r3, [r7, #12]
 80090ee:	3301      	adds	r3, #1
 80090f0:	733b      	strb	r3, [r7, #12]
 80090f2:	7b3b      	ldrb	r3, [r7, #12]
 80090f4:	2b03      	cmp	r3, #3
 80090f6:	d9d8      	bls.n	80090aa <keypad3x4w_readKeypad+0x5e>
      for (uint8_t columnCount = 0; columnCount < KEYPAD_COLUMN_NUMBER; columnCount++)
 80090f8:	7b7b      	ldrb	r3, [r7, #13]
 80090fa:	3301      	adds	r3, #1
 80090fc:	737b      	strb	r3, [r7, #13]
 80090fe:	7b7b      	ldrb	r3, [r7, #13]
 8009100:	2b02      	cmp	r3, #2
 8009102:	d9c8      	bls.n	8009096 <keypad3x4w_readKeypad+0x4a>
  for (uint8_t rowCount = 0; rowCount < KEYPAD_ROW_NUMBER; rowCount++)
 8009104:	7bbb      	ldrb	r3, [r7, #14]
 8009106:	3301      	adds	r3, #1
 8009108:	73bb      	strb	r3, [r7, #14]
 800910a:	7bbb      	ldrb	r3, [r7, #14]
 800910c:	2b03      	cmp	r3, #3
 800910e:	d9ab      	bls.n	8009068 <keypad3x4w_readKeypad+0x1c>
        }
      }
    }
  }

  return isPressed;
 8009110:	7bfb      	ldrb	r3, [r7, #15]
 }
 8009112:	4618      	mov	r0, r3
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	0800eff4 	.word	0x0800eff4

08009120 <dateTime_display_init>:

} DateTime_Display_Config;


DateTime_Display_Config_t * dateTime_display_init(I2C_HandleTypeDef* const hi2c, const uint8_t addrs)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	460b      	mov	r3, r1
 800912a:	70fb      	strb	r3, [r7, #3]
  DateTime_Display_Config_t* pConfig = malloc(sizeof(DateTime_Display_Config_t));
 800912c:	2018      	movs	r0, #24
 800912e:	f004 fc73 	bl	800da18 <malloc>
 8009132:	4603      	mov	r3, r0
 8009134:	60fb      	str	r3, [r7, #12]
  pConfig->i2cAddrs = addrs;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	78fa      	ldrb	r2, [r7, #3]
 800913a:	711a      	strb	r2, [r3, #4]
  pConfig->hi2c = hi2c;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	601a      	str	r2, [r3, #0]
  pConfig->hDisplayDriver = ht16k33_init(hi2c, addrs);
 8009142:	78fb      	ldrb	r3, [r7, #3]
 8009144:	4619      	mov	r1, r3
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f7ff fe0c 	bl	8008d64 <ht16k33_init>
 800914c:	4602      	mov	r2, r0
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	609a      	str	r2, [r3, #8]

  dateTime_clearDisplay(pConfig);
 8009152:	68f8      	ldr	r0, [r7, #12]
 8009154:	f000 f9f1 	bl	800953a <dateTime_clearDisplay>

  ht16k33_setSystemSetup(pConfig->hDisplayDriver, Ht16k33_SystemOscillator_On);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	2101      	movs	r1, #1
 800915e:	4618      	mov	r0, r3
 8009160:	f7ff fe2f 	bl	8008dc2 <ht16k33_setSystemSetup>
  ht16k33_setDisplaySetup(pConfig->hDisplayDriver, Ht16k33_DisplayStatus_On, Ht16k33_BlinkingFrequency_Off);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	689b      	ldr	r3, [r3, #8]
 8009168:	2200      	movs	r2, #0
 800916a:	2101      	movs	r1, #1
 800916c:	4618      	mov	r0, r3
 800916e:	f7ff fe6c 	bl	8008e4a <ht16k33_setDisplaySetup>

  return pConfig;
 8009172:	68fb      	ldr	r3, [r7, #12]
}
 8009174:	4618      	mov	r0, r3
 8009176:	3710      	adds	r7, #16
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <dateTime_setDateTimeMonth>:

DateTime_Display_Status_t dateTime_setDateTimeMonth(DateTime_Display_Config_t* const pConfig,
    const uint8_t* const inputDateTime)
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6039      	str	r1, [r7, #0]
  //Extract and check input month
  pConfig->dateTimeData.Month = (inputDateTime[0]*10) + (inputDateTime[1]);
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	461a      	mov	r2, r3
 800918c:	0092      	lsls	r2, r2, #2
 800918e:	4413      	add	r3, r2
 8009190:	005b      	lsls	r3, r3, #1
 8009192:	b2da      	uxtb	r2, r3
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	3301      	adds	r3, #1
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	4413      	add	r3, r2
 800919c:	b2da      	uxtb	r2, r3
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	731a      	strb	r2, [r3, #12]
  if ((pConfig->dateTimeData.Month >= 1) && (pConfig->dateTimeData.Month <= 12))
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	7b1b      	ldrb	r3, [r3, #12]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d005      	beq.n	80091b6 <dateTime_setDateTimeMonth+0x3a>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	7b1b      	ldrb	r3, [r3, #12]
 80091ae:	2b0c      	cmp	r3, #12
 80091b0:	d801      	bhi.n	80091b6 <dateTime_setDateTimeMonth+0x3a>
  {
    return 1;
 80091b2:	2301      	movs	r3, #1
 80091b4:	e000      	b.n	80091b8 <dateTime_setDateTimeMonth+0x3c>
  }
  else
  {
    return 0;
 80091b6:	2300      	movs	r3, #0
  }
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	370c      	adds	r7, #12
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <dateTime_setDateTimeDay>:

DateTime_Display_Status_t dateTime_setDateTimeDay(DateTime_Display_Config_t* const pConfig,
    const uint8_t* const inputDateTime)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b085      	sub	sp, #20
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
  bool leapYear = false;
 80091ce:	2300      	movs	r3, #0
 80091d0:	73fb      	strb	r3, [r7, #15]

  //Extract input day and check for days per month
  pConfig->dateTimeData.Day = (inputDateTime[2]*10) + (inputDateTime[3]);
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	3302      	adds	r3, #2
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	461a      	mov	r2, r3
 80091da:	0092      	lsls	r2, r2, #2
 80091dc:	4413      	add	r3, r2
 80091de:	005b      	lsls	r3, r3, #1
 80091e0:	b2da      	uxtb	r2, r3
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	3303      	adds	r3, #3
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	4413      	add	r3, r2
 80091ea:	b2da      	uxtb	r2, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	735a      	strb	r2, [r3, #13]

  //Check for leap year
  if ((((pConfig->dateTimeData.Year % 4) == 0) && ((pConfig->dateTimeData.Year % 100) != 0)) ||
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	89db      	ldrh	r3, [r3, #14]
 80091f4:	f003 0303 	and.w	r3, r3, #3
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d10c      	bne.n	8009218 <dateTime_setDateTimeDay+0x54>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	89db      	ldrh	r3, [r3, #14]
 8009202:	4a1a      	ldr	r2, [pc, #104]	@ (800926c <dateTime_setDateTimeDay+0xa8>)
 8009204:	fba2 1203 	umull	r1, r2, r2, r3
 8009208:	0952      	lsrs	r2, r2, #5
 800920a:	2164      	movs	r1, #100	@ 0x64
 800920c:	fb01 f202 	mul.w	r2, r1, r2
 8009210:	1a9b      	subs	r3, r3, r2
 8009212:	b29b      	uxth	r3, r3
 8009214:	2b00      	cmp	r3, #0
 8009216:	d10d      	bne.n	8009234 <dateTime_setDateTimeDay+0x70>
      ((pConfig->dateTimeData.Year % 400) == 0))
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	89db      	ldrh	r3, [r3, #14]
 800921c:	4a13      	ldr	r2, [pc, #76]	@ (800926c <dateTime_setDateTimeDay+0xa8>)
 800921e:	fba2 1203 	umull	r1, r2, r2, r3
 8009222:	09d2      	lsrs	r2, r2, #7
 8009224:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8009228:	fb01 f202 	mul.w	r2, r1, r2
 800922c:	1a9b      	subs	r3, r3, r2
 800922e:	b29b      	uxth	r3, r3
  if ((((pConfig->dateTimeData.Year % 4) == 0) && ((pConfig->dateTimeData.Year % 100) != 0)) ||
 8009230:	2b00      	cmp	r3, #0
 8009232:	d101      	bne.n	8009238 <dateTime_setDateTimeDay+0x74>
  {
    leapYear = true;
 8009234:	2301      	movs	r3, #1
 8009236:	73fb      	strb	r3, [r7, #15]
  }

  if (pConfig->dateTimeData.Day <= (monthDaysCount[pConfig->dateTimeData.Month-1] + leapYear) &&
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	7b5b      	ldrb	r3, [r3, #13]
 800923c:	4619      	mov	r1, r3
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	7b1b      	ldrb	r3, [r3, #12]
 8009242:	3b01      	subs	r3, #1
 8009244:	4a0a      	ldr	r2, [pc, #40]	@ (8009270 <dateTime_setDateTimeDay+0xac>)
 8009246:	5cd3      	ldrb	r3, [r2, r3]
 8009248:	461a      	mov	r2, r3
 800924a:	7bfb      	ldrb	r3, [r7, #15]
 800924c:	4413      	add	r3, r2
 800924e:	4299      	cmp	r1, r3
 8009250:	dc05      	bgt.n	800925e <dateTime_setDateTimeDay+0x9a>
      (pConfig->dateTimeData.Day > 0))
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	7b5b      	ldrb	r3, [r3, #13]
  if (pConfig->dateTimeData.Day <= (monthDaysCount[pConfig->dateTimeData.Month-1] + leapYear) &&
 8009256:	2b00      	cmp	r3, #0
 8009258:	d001      	beq.n	800925e <dateTime_setDateTimeDay+0x9a>
  {
    return 1;
 800925a:	2301      	movs	r3, #1
 800925c:	e000      	b.n	8009260 <dateTime_setDateTimeDay+0x9c>
  }
  else
  {
    return 0;
 800925e:	2300      	movs	r3, #0
  }
}
 8009260:	4618      	mov	r0, r3
 8009262:	3714      	adds	r7, #20
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr
 800926c:	51eb851f 	.word	0x51eb851f
 8009270:	0800f070 	.word	0x0800f070

08009274 <dateTime_setDateTimeYear>:

DateTime_Display_Status_t dateTime_setDateTimeYear(DateTime_Display_Config_t* const pConfig,
    const uint8_t* const inputDateTime)
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
  //Extract input year
  pConfig->dateTimeData.Year = (inputDateTime[4]*1000)+(inputDateTime[5]*100)
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	3304      	adds	r3, #4
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	461a      	mov	r2, r3
 8009286:	0152      	lsls	r2, r2, #5
 8009288:	1ad2      	subs	r2, r2, r3
 800928a:	0092      	lsls	r2, r2, #2
 800928c:	4413      	add	r3, r2
 800928e:	00db      	lsls	r3, r3, #3
 8009290:	b29a      	uxth	r2, r3
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	3305      	adds	r3, #5
 8009296:	781b      	ldrb	r3, [r3, #0]
 8009298:	4619      	mov	r1, r3
 800929a:	0089      	lsls	r1, r1, #2
 800929c:	440b      	add	r3, r1
 800929e:	4619      	mov	r1, r3
 80092a0:	0088      	lsls	r0, r1, #2
 80092a2:	4619      	mov	r1, r3
 80092a4:	4603      	mov	r3, r0
 80092a6:	440b      	add	r3, r1
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	4413      	add	r3, r2
 80092ae:	b29a      	uxth	r2, r3
      + (inputDateTime[6]*10) + (inputDateTime[7]);
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	3306      	adds	r3, #6
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	4619      	mov	r1, r3
 80092b8:	0089      	lsls	r1, r1, #2
 80092ba:	440b      	add	r3, r1
 80092bc:	005b      	lsls	r3, r3, #1
 80092be:	b29b      	uxth	r3, r3
 80092c0:	4413      	add	r3, r2
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	683a      	ldr	r2, [r7, #0]
 80092c6:	3207      	adds	r2, #7
 80092c8:	7812      	ldrb	r2, [r2, #0]
 80092ca:	4413      	add	r3, r2
 80092cc:	b29a      	uxth	r2, r3
  pConfig->dateTimeData.Year = (inputDateTime[4]*1000)+(inputDateTime[5]*100)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	81da      	strh	r2, [r3, #14]

  return 1;
 80092d2:	2301      	movs	r3, #1
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	370c      	adds	r7, #12
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr

080092e0 <dateTime_setDateTimeHour>:

DateTime_Display_Status_t dateTime_setDateTimeHour(DateTime_Display_Config_t* const pConfig,
    const uint8_t* const inputDateTime)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b085      	sub	sp, #20
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	6039      	str	r1, [r7, #0]
  DateTime_Display_Status_t isSuccess = 1;
 80092ea:	2301      	movs	r3, #1
 80092ec:	73fb      	strb	r3, [r7, #15]

  //Extract and check input hour
  pConfig->dateTimeData.Hour = (inputDateTime[8]*10) + (inputDateTime[9]);
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	3308      	adds	r3, #8
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	461a      	mov	r2, r3
 80092f6:	0092      	lsls	r2, r2, #2
 80092f8:	4413      	add	r3, r2
 80092fa:	005b      	lsls	r3, r3, #1
 80092fc:	b2da      	uxtb	r2, r3
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	3309      	adds	r3, #9
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	4413      	add	r3, r2
 8009306:	b2da      	uxtb	r2, r3
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	741a      	strb	r2, [r3, #16]

  if ((pConfig->dateTimeData.Hour >= 0) && (pConfig->dateTimeData.Hour <= 24))
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	7c1b      	ldrb	r3, [r3, #16]
 8009310:	2b18      	cmp	r3, #24
 8009312:	d827      	bhi.n	8009364 <dateTime_setDateTimeHour+0x84>
  {
    //Convert to 12 hour time and set meridiem
    if ((pConfig->dateTimeData.Hour > 12))
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	7c1b      	ldrb	r3, [r3, #16]
 8009318:	2b0c      	cmp	r3, #12
 800931a:	d90f      	bls.n	800933c <dateTime_setDateTimeHour+0x5c>
    {
      pConfig->dateTimeData.Hour -= 12;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	7c1b      	ldrb	r3, [r3, #16]
 8009320:	3b0c      	subs	r3, #12
 8009322:	b2da      	uxtb	r2, r3
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	741a      	strb	r2, [r3, #16]
      pConfig->dateTimeData.Meridiem = (pConfig->dateTimeData.Hour == 12) ?
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	7c1b      	ldrb	r3, [r3, #16]
          DateTime_DisplayDataMeridiem_AM : DateTime_DisplayDataMeridiem_PM;
 800932c:	2b0c      	cmp	r3, #12
 800932e:	d101      	bne.n	8009334 <dateTime_setDateTimeHour+0x54>
 8009330:	2201      	movs	r2, #1
 8009332:	e000      	b.n	8009336 <dateTime_setDateTimeHour+0x56>
 8009334:	2202      	movs	r2, #2
      pConfig->dateTimeData.Meridiem = (pConfig->dateTimeData.Hour == 12) ?
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	749a      	strb	r2, [r3, #18]
 800933a:	e015      	b.n	8009368 <dateTime_setDateTimeHour+0x88>
    }
    else
    {
      pConfig->dateTimeData.Meridiem = (pConfig->dateTimeData.Hour == 12) ?
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	7c1b      	ldrb	r3, [r3, #16]
          DateTime_DisplayDataMeridiem_PM : DateTime_DisplayDataMeridiem_AM;
 8009340:	2b0c      	cmp	r3, #12
 8009342:	d101      	bne.n	8009348 <dateTime_setDateTimeHour+0x68>
 8009344:	2202      	movs	r2, #2
 8009346:	e000      	b.n	800934a <dateTime_setDateTimeHour+0x6a>
 8009348:	2201      	movs	r2, #1
      pConfig->dateTimeData.Meridiem = (pConfig->dateTimeData.Hour == 12) ?
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	749a      	strb	r2, [r3, #18]
      pConfig->dateTimeData.Hour = (pConfig->dateTimeData.Hour == 0) ? 12 : pConfig->dateTimeData.Hour;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	7c1b      	ldrb	r3, [r3, #16]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d002      	beq.n	800935c <dateTime_setDateTimeHour+0x7c>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	7c1a      	ldrb	r2, [r3, #16]
 800935a:	e000      	b.n	800935e <dateTime_setDateTimeHour+0x7e>
 800935c:	220c      	movs	r2, #12
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	741a      	strb	r2, [r3, #16]
 8009362:	e001      	b.n	8009368 <dateTime_setDateTimeHour+0x88>
    }
  }
  else
  {
    isSuccess = 0;
 8009364:	2300      	movs	r3, #0
 8009366:	73fb      	strb	r3, [r7, #15]
  }

  return isSuccess;
 8009368:	7bfb      	ldrb	r3, [r7, #15]
}
 800936a:	4618      	mov	r0, r3
 800936c:	3714      	adds	r7, #20
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr

08009376 <dateTime_setDateTimeMinute>:

DateTime_Display_Status_t dateTime_setDateTimeMinute(DateTime_Display_Config_t* const pConfig,
    const uint8_t* const inputDateTime)
{
 8009376:	b480      	push	{r7}
 8009378:	b083      	sub	sp, #12
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
 800937e:	6039      	str	r1, [r7, #0]
  //Extract and check input month
  pConfig->dateTimeData.Minute = (inputDateTime[10]*10) + (inputDateTime[11]);
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	330a      	adds	r3, #10
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	461a      	mov	r2, r3
 8009388:	0092      	lsls	r2, r2, #2
 800938a:	4413      	add	r3, r2
 800938c:	005b      	lsls	r3, r3, #1
 800938e:	b2da      	uxtb	r2, r3
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	330b      	adds	r3, #11
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	4413      	add	r3, r2
 8009398:	b2da      	uxtb	r2, r3
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	745a      	strb	r2, [r3, #17]
  if ((pConfig->dateTimeData.Minute >= 0) && (pConfig->dateTimeData.Minute < 60))
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	7c5b      	ldrb	r3, [r3, #17]
 80093a2:	2b3b      	cmp	r3, #59	@ 0x3b
 80093a4:	d801      	bhi.n	80093aa <dateTime_setDateTimeMinute+0x34>
  {
    return 1;
 80093a6:	2301      	movs	r3, #1
 80093a8:	e000      	b.n	80093ac <dateTime_setDateTimeMinute+0x36>
  }
  else
  {
    return 0;
 80093aa:	2300      	movs	r3, #0

  }
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	370c      	adds	r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <dateTime_setDisplayData>:

DateTime_Display_Status_t dateTime_setDisplayData(DateTime_Display_Config_t* const pConfig,
    const uint8_t* const inputDateTime)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
  DateTime_Display_Status_t isSuccess = 1;
 80093c2:	2301      	movs	r3, #1
 80093c4:	73fb      	strb	r3, [r7, #15]

  isSuccess &= dateTime_setDateTimeMonth(pConfig, inputDateTime);
 80093c6:	6839      	ldr	r1, [r7, #0]
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f7ff fed7 	bl	800917c <dateTime_setDateTimeMonth>
 80093ce:	4603      	mov	r3, r0
 80093d0:	461a      	mov	r2, r3
 80093d2:	7bfb      	ldrb	r3, [r7, #15]
 80093d4:	4013      	ands	r3, r2
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	bf14      	ite	ne
 80093da:	2301      	movne	r3, #1
 80093dc:	2300      	moveq	r3, #0
 80093de:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_setDateTimeYear(pConfig, inputDateTime);
 80093e0:	6839      	ldr	r1, [r7, #0]
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f7ff ff46 	bl	8009274 <dateTime_setDateTimeYear>
 80093e8:	4603      	mov	r3, r0
 80093ea:	461a      	mov	r2, r3
 80093ec:	7bfb      	ldrb	r3, [r7, #15]
 80093ee:	4013      	ands	r3, r2
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	bf14      	ite	ne
 80093f4:	2301      	movne	r3, #1
 80093f6:	2300      	moveq	r3, #0
 80093f8:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_setDateTimeDay(pConfig, inputDateTime);
 80093fa:	6839      	ldr	r1, [r7, #0]
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f7ff fee1 	bl	80091c4 <dateTime_setDateTimeDay>
 8009402:	4603      	mov	r3, r0
 8009404:	461a      	mov	r2, r3
 8009406:	7bfb      	ldrb	r3, [r7, #15]
 8009408:	4013      	ands	r3, r2
 800940a:	2b00      	cmp	r3, #0
 800940c:	bf14      	ite	ne
 800940e:	2301      	movne	r3, #1
 8009410:	2300      	moveq	r3, #0
 8009412:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_setDateTimeHour(pConfig, inputDateTime);
 8009414:	6839      	ldr	r1, [r7, #0]
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f7ff ff62 	bl	80092e0 <dateTime_setDateTimeHour>
 800941c:	4603      	mov	r3, r0
 800941e:	461a      	mov	r2, r3
 8009420:	7bfb      	ldrb	r3, [r7, #15]
 8009422:	4013      	ands	r3, r2
 8009424:	2b00      	cmp	r3, #0
 8009426:	bf14      	ite	ne
 8009428:	2301      	movne	r3, #1
 800942a:	2300      	moveq	r3, #0
 800942c:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_setDateTimeMinute(pConfig, inputDateTime);
 800942e:	6839      	ldr	r1, [r7, #0]
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f7ff ffa0 	bl	8009376 <dateTime_setDateTimeMinute>
 8009436:	4603      	mov	r3, r0
 8009438:	461a      	mov	r2, r3
 800943a:	7bfb      	ldrb	r3, [r7, #15]
 800943c:	4013      	ands	r3, r2
 800943e:	2b00      	cmp	r3, #0
 8009440:	bf14      	ite	ne
 8009442:	2301      	movne	r3, #1
 8009444:	2300      	moveq	r3, #0
 8009446:	73fb      	strb	r3, [r7, #15]

  return isSuccess;
 8009448:	7bfb      	ldrb	r3, [r7, #15]
}
 800944a:	4618      	mov	r0, r3
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}

08009452 <dateTime_getRtcDateTimeData>:

DateTime_Display_Status_t   dateTime_getRtcDateTimeData(DateTime_Display_Config_t* const pConfig,
    RTC_DateTypeDef* const pRtcDate, RTC_TimeTypeDef* const pRtcTime)
{
 8009452:	b480      	push	{r7}
 8009454:	b087      	sub	sp, #28
 8009456:	af00      	add	r7, sp, #0
 8009458:	60f8      	str	r0, [r7, #12]
 800945a:	60b9      	str	r1, [r7, #8]
 800945c:	607a      	str	r2, [r7, #4]
  DateTime_Display_Status_t isSuccess = 1;
 800945e:	2301      	movs	r3, #1
 8009460:	75fb      	strb	r3, [r7, #23]

  pRtcDate->Date        = pConfig->dateTimeData.Day;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	7b5a      	ldrb	r2, [r3, #13]
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	709a      	strb	r2, [r3, #2]
  pRtcDate->Month       = pConfig->dateTimeData.Month;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	7b1a      	ldrb	r2, [r3, #12]
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	705a      	strb	r2, [r3, #1]
  pRtcDate->Year        = 0;                            //Set to zero because maximum value from RTC is 99 years
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	2200      	movs	r2, #0
 8009476:	70da      	strb	r2, [r3, #3]
  pRtcTime->Hours       = pConfig->dateTimeData.Hour;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	7c1a      	ldrb	r2, [r3, #16]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	701a      	strb	r2, [r3, #0]
  pRtcTime->Minutes     = pConfig->dateTimeData.Minute;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	7c5a      	ldrb	r2, [r3, #17]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	705a      	strb	r2, [r3, #1]
  pRtcTime->TimeFormat  = pConfig->dateTimeData.Meridiem - 1; //RTC AM = 0, RTC PM = 1;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	7c9b      	ldrb	r3, [r3, #18]
 800948c:	3b01      	subs	r3, #1
 800948e:	b2da      	uxtb	r2, r3
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	70da      	strb	r2, [r3, #3]
  pRtcTime->Seconds     = 0;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	709a      	strb	r2, [r3, #2]
  pRtcTime->SubSeconds  = 0;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	605a      	str	r2, [r3, #4]
  pConfig->orignalYear  = pConfig->dateTimeData.Year; //Hacky way to fix RTC year issue
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	89da      	ldrh	r2, [r3, #14]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	829a      	strh	r2, [r3, #20]
  return isSuccess;
 80094a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	371c      	adds	r7, #28
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr

080094b6 <dateTime_setRtcDateTimeData>:

DateTime_Display_Status_t   dateTime_setRtcDateTimeData(DateTime_Display_Config_t* const pConfig,
    RTC_DateTypeDef* const pRtcDate, RTC_TimeTypeDef* const pRtcTime)
{
 80094b6:	b480      	push	{r7}
 80094b8:	b087      	sub	sp, #28
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	60f8      	str	r0, [r7, #12]
 80094be:	60b9      	str	r1, [r7, #8]
 80094c0:	607a      	str	r2, [r7, #4]
  DateTime_Display_Status_t isSuccess = 1;
 80094c2:	2301      	movs	r3, #1
 80094c4:	75fb      	strb	r3, [r7, #23]

  pConfig->dateTimeData.Day       = pRtcDate->Date;
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	789a      	ldrb	r2, [r3, #2]
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	735a      	strb	r2, [r3, #13]
  pConfig->dateTimeData.Month     = pRtcDate->Month;
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	785a      	ldrb	r2, [r3, #1]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	731a      	strb	r2, [r3, #12]
  pConfig->dateTimeData.Year      = pConfig->orignalYear + pRtcDate->Year;  //Add years because maximum value from RTC is 99 years
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	8a9b      	ldrh	r3, [r3, #20]
 80094da:	68ba      	ldr	r2, [r7, #8]
 80094dc:	78d2      	ldrb	r2, [r2, #3]
 80094de:	4413      	add	r3, r2
 80094e0:	b29a      	uxth	r2, r3
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	81da      	strh	r2, [r3, #14]
  pConfig->dateTimeData.Hour      = pRtcTime->Hours;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	781a      	ldrb	r2, [r3, #0]
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	741a      	strb	r2, [r3, #16]
  pConfig->dateTimeData.Minute    = pRtcTime->Minutes;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	785a      	ldrb	r2, [r3, #1]
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	745a      	strb	r2, [r3, #17]
  pConfig->dateTimeData.Meridiem  = pRtcTime->TimeFormat + 1; //RTC AM = 0, RTC PM = 1;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	78db      	ldrb	r3, [r3, #3]
 80094fa:	3301      	adds	r3, #1
 80094fc:	b2da      	uxtb	r2, r3
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	749a      	strb	r2, [r3, #18]

  return isSuccess;
 8009502:	7dfb      	ldrb	r3, [r7, #23]
}
 8009504:	4618      	mov	r0, r3
 8009506:	371c      	adds	r7, #28
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <dateTime_copyDateTime>:

DateTime_Display_Status_t dateTime_copyDateTime(DateTime_Display_Config_t* const pDestConfig,
    DateTime_Display_Config_t* const pSourceConfig)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b084      	sub	sp, #16
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
  DateTime_Display_Status_t isSuccess = 1;
 800951a:	2301      	movs	r3, #1
 800951c:	73fb      	strb	r3, [r7, #15]

  memcpy(&pDestConfig->dateTimeData, &pSourceConfig->dateTimeData, sizeof(pDestConfig->dateTimeData));
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f103 000c 	add.w	r0, r3, #12
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	330c      	adds	r3, #12
 8009528:	2208      	movs	r2, #8
 800952a:	4619      	mov	r1, r3
 800952c:	f004 fee5 	bl	800e2fa <memcpy>

  return isSuccess;
 8009530:	7bfb      	ldrb	r3, [r7, #15]
}
 8009532:	4618      	mov	r0, r3
 8009534:	3710      	adds	r7, #16
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}

0800953a <dateTime_clearDisplay>:


DateTime_Display_Status_t dateTime_clearDisplay(DateTime_Display_Config_t* const pConfig)
{
 800953a:	b580      	push	{r7, lr}
 800953c:	b086      	sub	sp, #24
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
  uint8_t* clearBuffer = malloc (TOTAL_NUMBER_OF_ROWS);
 8009542:	2010      	movs	r0, #16
 8009544:	f004 fa68 	bl	800da18 <malloc>
 8009548:	4603      	mov	r3, r0
 800954a:	60fb      	str	r3, [r7, #12]
  DateTime_Display_Status_t isSuccess   = 0;
 800954c:	2300      	movs	r3, #0
 800954e:	75fb      	strb	r3, [r7, #23]

  for (int buffCount = 0; buffCount < TOTAL_NUMBER_OF_ROWS; buffCount++)
 8009550:	2300      	movs	r3, #0
 8009552:	613b      	str	r3, [r7, #16]
 8009554:	e007      	b.n	8009566 <dateTime_clearDisplay+0x2c>
  {
    clearBuffer[buffCount] = 0x00;
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	68fa      	ldr	r2, [r7, #12]
 800955a:	4413      	add	r3, r2
 800955c:	2200      	movs	r2, #0
 800955e:	701a      	strb	r2, [r3, #0]
  for (int buffCount = 0; buffCount < TOTAL_NUMBER_OF_ROWS; buffCount++)
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	3301      	adds	r3, #1
 8009564:	613b      	str	r3, [r7, #16]
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	2b0f      	cmp	r3, #15
 800956a:	ddf4      	ble.n	8009556 <dateTime_clearDisplay+0x1c>
  }

  isSuccess = ht16k33_updateDisplayData (pConfig->hDisplayDriver,DISPLAY_DATA_REG_ADDRESS, clearBuffer,
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6898      	ldr	r0, [r3, #8]
 8009570:	2310      	movs	r3, #16
 8009572:	68fa      	ldr	r2, [r7, #12]
 8009574:	2100      	movs	r1, #0
 8009576:	f7ff fcc7 	bl	8008f08 <ht16k33_updateDisplayData>
 800957a:	4603      	mov	r3, r0
 800957c:	75fb      	strb	r3, [r7, #23]
      TOTAL_NUMBER_OF_ROWS);

  if (isSuccess)
 800957e:	7dfb      	ldrb	r3, [r7, #23]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d010      	beq.n	80095a6 <dateTime_clearDisplay+0x6c>
  {
    isSuccess |= ht16k33_setDisplaySetup(pConfig->hDisplayDriver, Ht16k33_DisplayStatus_On,
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	2200      	movs	r2, #0
 800958a:	2101      	movs	r1, #1
 800958c:	4618      	mov	r0, r3
 800958e:	f7ff fc5c 	bl	8008e4a <ht16k33_setDisplaySetup>
 8009592:	4603      	mov	r3, r0
 8009594:	461a      	mov	r2, r3
 8009596:	7dfb      	ldrb	r3, [r7, #23]
 8009598:	4313      	orrs	r3, r2
 800959a:	b2db      	uxtb	r3, r3
 800959c:	2b00      	cmp	r3, #0
 800959e:	bf14      	ite	ne
 80095a0:	2301      	movne	r3, #1
 80095a2:	2300      	moveq	r3, #0
 80095a4:	75fb      	strb	r3, [r7, #23]
        Ht16k33_BlinkingFrequency_Off);
  }

  free(clearBuffer);
 80095a6:	68f8      	ldr	r0, [r7, #12]
 80095a8:	f004 fa3e 	bl	800da28 <free>

  return isSuccess;
 80095ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3718      	adds	r7, #24
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}

080095b6 <dateTime_setLed>:

DateTime_Display_Status_t dateTime_setLed(DateTime_Display_Config_t* const pConfig, const uint8_t segmentNumber,
       const uint8_t ledState)
{
 80095b6:	b580      	push	{r7, lr}
 80095b8:	b086      	sub	sp, #24
 80095ba:	af02      	add	r7, sp, #8
 80095bc:	6078      	str	r0, [r7, #4]
 80095be:	460b      	mov	r3, r1
 80095c0:	70fb      	strb	r3, [r7, #3]
 80095c2:	4613      	mov	r3, r2
 80095c4:	70bb      	strb	r3, [r7, #2]
     DateTime_Display_Status_t isSuccess   = 0;
 80095c6:	2300      	movs	r3, #0
 80095c8:	73fb      	strb	r3, [r7, #15]
     uint8_t SegmentData = 0;
 80095ca:	2300      	movs	r3, #0
 80095cc:	73bb      	strb	r3, [r7, #14]
     uint8_t RequestData = segmentNumber;
 80095ce:	78fb      	ldrb	r3, [r7, #3]
 80095d0:	737b      	strb	r3, [r7, #13]

     isSuccess |= HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->i2cAddrs)<<1, &RequestData,  1, HAL_MAX_DELAY);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6818      	ldr	r0, [r3, #0]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	791b      	ldrb	r3, [r3, #4]
 80095da:	005b      	lsls	r3, r3, #1
 80095dc:	b299      	uxth	r1, r3
 80095de:	f107 020d 	add.w	r2, r7, #13
 80095e2:	f04f 33ff 	mov.w	r3, #4294967295
 80095e6:	9300      	str	r3, [sp, #0]
 80095e8:	2301      	movs	r3, #1
 80095ea:	f7f9 fb5f 	bl	8002cac <HAL_I2C_Master_Transmit>
 80095ee:	4603      	mov	r3, r0
 80095f0:	461a      	mov	r2, r3
 80095f2:	7bfb      	ldrb	r3, [r7, #15]
 80095f4:	4313      	orrs	r3, r2
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	bf14      	ite	ne
 80095fa:	2301      	movne	r3, #1
 80095fc:	2300      	moveq	r3, #0
 80095fe:	73fb      	strb	r3, [r7, #15]
     isSuccess |= HAL_I2C_Master_Receive(pConfig->hi2c, ((pConfig->i2cAddrs)<<1)|0x01, &SegmentData, 1, HAL_MAX_DELAY);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6818      	ldr	r0, [r3, #0]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	791b      	ldrb	r3, [r3, #4]
 8009608:	005b      	lsls	r3, r3, #1
 800960a:	b21b      	sxth	r3, r3
 800960c:	f043 0301 	orr.w	r3, r3, #1
 8009610:	b21b      	sxth	r3, r3
 8009612:	b299      	uxth	r1, r3
 8009614:	f107 020e 	add.w	r2, r7, #14
 8009618:	f04f 33ff 	mov.w	r3, #4294967295
 800961c:	9300      	str	r3, [sp, #0]
 800961e:	2301      	movs	r3, #1
 8009620:	f7f9 fc42 	bl	8002ea8 <HAL_I2C_Master_Receive>
 8009624:	4603      	mov	r3, r0
 8009626:	461a      	mov	r2, r3
 8009628:	7bfb      	ldrb	r3, [r7, #15]
 800962a:	4313      	orrs	r3, r2
 800962c:	2b00      	cmp	r3, #0
 800962e:	bf14      	ite	ne
 8009630:	2301      	movne	r3, #1
 8009632:	2300      	moveq	r3, #0
 8009634:	73fb      	strb	r3, [r7, #15]
     SegmentData &= 0b00111111;
 8009636:	7bbb      	ldrb	r3, [r7, #14]
 8009638:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800963c:	b2db      	uxtb	r3, r3
 800963e:	73bb      	strb	r3, [r7, #14]
     SegmentData |= ledState;
 8009640:	7bba      	ldrb	r2, [r7, #14]
 8009642:	78bb      	ldrb	r3, [r7, #2]
 8009644:	4313      	orrs	r3, r2
 8009646:	b2db      	uxtb	r3, r3
 8009648:	73bb      	strb	r3, [r7, #14]
     isSuccess |= ht16k33_updateDisplayData (pConfig->hDisplayDriver, RequestData, &SegmentData, 1);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6898      	ldr	r0, [r3, #8]
 800964e:	7b79      	ldrb	r1, [r7, #13]
 8009650:	f107 020e 	add.w	r2, r7, #14
 8009654:	2301      	movs	r3, #1
 8009656:	f7ff fc57 	bl	8008f08 <ht16k33_updateDisplayData>
 800965a:	4603      	mov	r3, r0
 800965c:	461a      	mov	r2, r3
 800965e:	7bfb      	ldrb	r3, [r7, #15]
 8009660:	4313      	orrs	r3, r2
 8009662:	b2db      	uxtb	r3, r3
 8009664:	2b00      	cmp	r3, #0
 8009666:	bf14      	ite	ne
 8009668:	2301      	movne	r3, #1
 800966a:	2300      	moveq	r3, #0
 800966c:	73fb      	strb	r3, [r7, #15]

     return isSuccess;
 800966e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009670:	4618      	mov	r0, r3
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <dateTime_setDigitSegments>:
}

//Hacky way of fixing wiring issue of LED numerical digits
DateTime_Display_Status_t dateTime_setDigitSegments(DateTime_Display_Config_t* const pConfig, const uint8_t segmentNum,
    const char dispDigit)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b088      	sub	sp, #32
 800967c:	af02      	add	r7, sp, #8
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	460b      	mov	r3, r1
 8009682:	70fb      	strb	r3, [r7, #3]
 8009684:	4613      	mov	r3, r2
 8009686:	70bb      	strb	r3, [r7, #2]
  uint8_t* displayBuffer = malloc (2);
 8009688:	2002      	movs	r0, #2
 800968a:	f004 f9c5 	bl	800da18 <malloc>
 800968e:	4603      	mov	r3, r0
 8009690:	617b      	str	r3, [r7, #20]
  uint8_t test[] = {0,0};
 8009692:	2300      	movs	r3, #0
 8009694:	823b      	strh	r3, [r7, #16]
  uint8_t boo[] = {0x00};
 8009696:	2300      	movs	r3, #0
 8009698:	733b      	strb	r3, [r7, #12]

  if (segmentNum % 2)
 800969a:	78fb      	ldrb	r3, [r7, #3]
 800969c:	f003 0301 	and.w	r3, r3, #1
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d047      	beq.n	8009736 <dateTime_setDigitSegments+0xbe>
  {
    boo[0] = segmentNum - 0x01;
 80096a6:	78fb      	ldrb	r3, [r7, #3]
 80096a8:	3b01      	subs	r3, #1
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->i2cAddrs)<<1, boo,  sizeof(boo), HAL_MAX_DELAY);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6818      	ldr	r0, [r3, #0]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	791b      	ldrb	r3, [r3, #4]
 80096b6:	005b      	lsls	r3, r3, #1
 80096b8:	b299      	uxth	r1, r3
 80096ba:	f107 020c 	add.w	r2, r7, #12
 80096be:	f04f 33ff 	mov.w	r3, #4294967295
 80096c2:	9300      	str	r3, [sp, #0]
 80096c4:	2301      	movs	r3, #1
 80096c6:	f7f9 faf1 	bl	8002cac <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(pConfig->hi2c, ((pConfig->i2cAddrs)<<1)|0x01, test, 1, HAL_MAX_DELAY);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6818      	ldr	r0, [r3, #0]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	791b      	ldrb	r3, [r3, #4]
 80096d2:	005b      	lsls	r3, r3, #1
 80096d4:	b21b      	sxth	r3, r3
 80096d6:	f043 0301 	orr.w	r3, r3, #1
 80096da:	b21b      	sxth	r3, r3
 80096dc:	b299      	uxth	r1, r3
 80096de:	f107 0210 	add.w	r2, r7, #16
 80096e2:	f04f 33ff 	mov.w	r3, #4294967295
 80096e6:	9300      	str	r3, [sp, #0]
 80096e8:	2301      	movs	r3, #1
 80096ea:	f7f9 fbdd 	bl	8002ea8 <HAL_I2C_Master_Receive>
    test[0] = 0x7F & test[0];
 80096ee:	7c3b      	ldrb	r3, [r7, #16]
 80096f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	743b      	strb	r3, [r7, #16]
    test[0] |= (sevenSegmentChars[(dispDigit-'0')] & 0x01 )<< 7;
 80096f8:	7c3b      	ldrb	r3, [r7, #16]
 80096fa:	b25a      	sxtb	r2, r3
 80096fc:	78bb      	ldrb	r3, [r7, #2]
 80096fe:	3b30      	subs	r3, #48	@ 0x30
 8009700:	492c      	ldr	r1, [pc, #176]	@ (80097b4 <dateTime_setDigitSegments+0x13c>)
 8009702:	5ccb      	ldrb	r3, [r1, r3]
 8009704:	01db      	lsls	r3, r3, #7
 8009706:	b25b      	sxtb	r3, r3
 8009708:	4313      	orrs	r3, r2
 800970a:	b25b      	sxtb	r3, r3
 800970c:	b2db      	uxtb	r3, r3
 800970e:	743b      	strb	r3, [r7, #16]
    test[1] |= sevenSegmentChars[(dispDigit-'0')] >> 1;
 8009710:	7c7a      	ldrb	r2, [r7, #17]
 8009712:	78bb      	ldrb	r3, [r7, #2]
 8009714:	3b30      	subs	r3, #48	@ 0x30
 8009716:	4927      	ldr	r1, [pc, #156]	@ (80097b4 <dateTime_setDigitSegments+0x13c>)
 8009718:	5ccb      	ldrb	r3, [r1, r3]
 800971a:	085b      	lsrs	r3, r3, #1
 800971c:	b2db      	uxtb	r3, r3
 800971e:	4313      	orrs	r3, r2
 8009720:	b2db      	uxtb	r3, r3
 8009722:	747b      	strb	r3, [r7, #17]
    ht16k33_updateDisplayData (pConfig->hDisplayDriver, boo[0], test, 2);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6898      	ldr	r0, [r3, #8]
 8009728:	7b39      	ldrb	r1, [r7, #12]
 800972a:	f107 0210 	add.w	r2, r7, #16
 800972e:	2302      	movs	r3, #2
 8009730:	f7ff fbea 	bl	8008f08 <ht16k33_updateDisplayData>
 8009734:	e036      	b.n	80097a4 <dateTime_setDigitSegments+0x12c>
  }
  else
  {
    boo[0] = segmentNum;
 8009736:	78fb      	ldrb	r3, [r7, #3]
 8009738:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->i2cAddrs)<<1, boo,  1, HAL_MAX_DELAY);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6818      	ldr	r0, [r3, #0]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	791b      	ldrb	r3, [r3, #4]
 8009742:	005b      	lsls	r3, r3, #1
 8009744:	b299      	uxth	r1, r3
 8009746:	f107 020c 	add.w	r2, r7, #12
 800974a:	f04f 33ff 	mov.w	r3, #4294967295
 800974e:	9300      	str	r3, [sp, #0]
 8009750:	2301      	movs	r3, #1
 8009752:	f7f9 faab 	bl	8002cac <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(pConfig->hi2c, ((pConfig->i2cAddrs)<<1)|0x01, test, 1, HAL_MAX_DELAY);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6818      	ldr	r0, [r3, #0]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	791b      	ldrb	r3, [r3, #4]
 800975e:	005b      	lsls	r3, r3, #1
 8009760:	b21b      	sxth	r3, r3
 8009762:	f043 0301 	orr.w	r3, r3, #1
 8009766:	b21b      	sxth	r3, r3
 8009768:	b299      	uxth	r1, r3
 800976a:	f107 0210 	add.w	r2, r7, #16
 800976e:	f04f 33ff 	mov.w	r3, #4294967295
 8009772:	9300      	str	r3, [sp, #0]
 8009774:	2301      	movs	r3, #1
 8009776:	f7f9 fb97 	bl	8002ea8 <HAL_I2C_Master_Receive>
    test[0] = 0x80 & test[0];
 800977a:	7c3b      	ldrb	r3, [r7, #16]
 800977c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009780:	b2db      	uxtb	r3, r3
 8009782:	743b      	strb	r3, [r7, #16]
    displayBuffer[0] = test[0] | sevenSegmentChars[(dispDigit-'0')];
 8009784:	7c3a      	ldrb	r2, [r7, #16]
 8009786:	78bb      	ldrb	r3, [r7, #2]
 8009788:	3b30      	subs	r3, #48	@ 0x30
 800978a:	490a      	ldr	r1, [pc, #40]	@ (80097b4 <dateTime_setDigitSegments+0x13c>)
 800978c:	5ccb      	ldrb	r3, [r1, r3]
 800978e:	4313      	orrs	r3, r2
 8009790:	b2da      	uxtb	r2, r3
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	701a      	strb	r2, [r3, #0]
    ht16k33_updateDisplayData (pConfig->hDisplayDriver, segmentNum, displayBuffer, 1);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6898      	ldr	r0, [r3, #8]
 800979a:	78f9      	ldrb	r1, [r7, #3]
 800979c:	2301      	movs	r3, #1
 800979e:	697a      	ldr	r2, [r7, #20]
 80097a0:	f7ff fbb2 	bl	8008f08 <ht16k33_updateDisplayData>
  }

  free(displayBuffer);
 80097a4:	6978      	ldr	r0, [r7, #20]
 80097a6:	f004 f93f 	bl	800da28 <free>
  return 1;
 80097aa:	2301      	movs	r3, #1
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3718      	adds	r7, #24
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}
 80097b4:	0800f040 	.word	0x0800f040

080097b8 <dateTime_setAlphaSegments>:

DateTime_Display_Status_t dateTime_setAlphaSegments(DateTime_Display_Config_t* const pConfig, const uint8_t segmentNum,
    const char dispAlpha)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	460b      	mov	r3, r1
 80097c2:	70fb      	strb	r3, [r7, #3]
 80097c4:	4613      	mov	r3, r2
 80097c6:	70bb      	strb	r3, [r7, #2]
  uint8_t displayBuffer[2] = {0,0};
 80097c8:	2300      	movs	r3, #0
 80097ca:	81bb      	strh	r3, [r7, #12]

  displayBuffer[0] = (uint8_t)((fourteenSegmentChars[(uint8_t)(dispAlpha-0x41)]>>0) & 0xFF);
 80097cc:	78bb      	ldrb	r3, [r7, #2]
 80097ce:	3b41      	subs	r3, #65	@ 0x41
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	461a      	mov	r2, r3
 80097d4:	4b10      	ldr	r3, [pc, #64]	@ (8009818 <dateTime_setAlphaSegments+0x60>)
 80097d6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80097da:	b2db      	uxtb	r3, r3
 80097dc:	733b      	strb	r3, [r7, #12]
  displayBuffer[1] = (uint8_t)((fourteenSegmentChars[(uint8_t)(dispAlpha-0x41)]>>8) & 0xFF);
 80097de:	78bb      	ldrb	r3, [r7, #2]
 80097e0:	3b41      	subs	r3, #65	@ 0x41
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	461a      	mov	r2, r3
 80097e6:	4b0c      	ldr	r3, [pc, #48]	@ (8009818 <dateTime_setAlphaSegments+0x60>)
 80097e8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80097ec:	0a1b      	lsrs	r3, r3, #8
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	b2db      	uxtb	r3, r3
 80097f2:	737b      	strb	r3, [r7, #13]
  ht16k33_updateDisplayData (pConfig->hDisplayDriver, (10 + (2*segmentNum)), displayBuffer, 2);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6898      	ldr	r0, [r3, #8]
 80097f8:	78fb      	ldrb	r3, [r7, #3]
 80097fa:	3305      	adds	r3, #5
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	005b      	lsls	r3, r3, #1
 8009800:	b2d9      	uxtb	r1, r3
 8009802:	f107 020c 	add.w	r2, r7, #12
 8009806:	2302      	movs	r3, #2
 8009808:	f7ff fb7e 	bl	8008f08 <ht16k33_updateDisplayData>

  return 1;
 800980c:	2301      	movs	r3, #1
}
 800980e:	4618      	mov	r0, r3
 8009810:	3710      	adds	r7, #16
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
 8009816:	bf00      	nop
 8009818:	0800f00c 	.word	0x0800f00c

0800981c <dateTime_updateDisplayGlitch>:

DateTime_Display_Status_t dateTime_updateDisplayGlitch(DateTime_Display_Config_t* const pConfig,
    const char* const pGlitchData)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b08a      	sub	sp, #40	@ 0x28
 8009820:	af02      	add	r7, sp, #8
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	6039      	str	r1, [r7, #0]
  DateTime_Display_Status_t isSuccess           = 0;
 8009826:	2300      	movs	r3, #0
 8009828:	77fb      	strb	r3, [r7, #31]
  uint8_t                   segmentCount        = 0;
 800982a:	2300      	movs	r3, #0
 800982c:	77bb      	strb	r3, [r7, #30]
  char                      digitSegBuffer[11];

  memcpy(&digitSegBuffer, pGlitchData+3, sizeof(digitSegBuffer));
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	1cda      	adds	r2, r3, #3
 8009832:	f107 0310 	add.w	r3, r7, #16
 8009836:	6810      	ldr	r0, [r2, #0]
 8009838:	6851      	ldr	r1, [r2, #4]
 800983a:	c303      	stmia	r3!, {r0, r1}
 800983c:	8911      	ldrh	r1, [r2, #8]
 800983e:	7a92      	ldrb	r2, [r2, #10]
 8009840:	8019      	strh	r1, [r3, #0]
 8009842:	709a      	strb	r2, [r3, #2]

  //Save colon state
  uint8_t ColonStateData = 0;
 8009844:	2300      	movs	r3, #0
 8009846:	73fb      	strb	r3, [r7, #15]
  uint8_t RequestData = COLON_LED_SEGMENT_ADDRESS;
 8009848:	2307      	movs	r3, #7
 800984a:	73bb      	strb	r3, [r7, #14]

  isSuccess |= HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->i2cAddrs)<<1, &RequestData,  1, HAL_MAX_DELAY);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6818      	ldr	r0, [r3, #0]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	791b      	ldrb	r3, [r3, #4]
 8009854:	005b      	lsls	r3, r3, #1
 8009856:	b299      	uxth	r1, r3
 8009858:	f107 020e 	add.w	r2, r7, #14
 800985c:	f04f 33ff 	mov.w	r3, #4294967295
 8009860:	9300      	str	r3, [sp, #0]
 8009862:	2301      	movs	r3, #1
 8009864:	f7f9 fa22 	bl	8002cac <HAL_I2C_Master_Transmit>
 8009868:	4603      	mov	r3, r0
 800986a:	461a      	mov	r2, r3
 800986c:	7ffb      	ldrb	r3, [r7, #31]
 800986e:	4313      	orrs	r3, r2
 8009870:	2b00      	cmp	r3, #0
 8009872:	bf14      	ite	ne
 8009874:	2301      	movne	r3, #1
 8009876:	2300      	moveq	r3, #0
 8009878:	77fb      	strb	r3, [r7, #31]
  isSuccess |= HAL_I2C_Master_Receive(pConfig->hi2c, ((pConfig->i2cAddrs)<<1)|0x01, &ColonStateData, 1, HAL_MAX_DELAY);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6818      	ldr	r0, [r3, #0]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	791b      	ldrb	r3, [r3, #4]
 8009882:	005b      	lsls	r3, r3, #1
 8009884:	b21b      	sxth	r3, r3
 8009886:	f043 0301 	orr.w	r3, r3, #1
 800988a:	b21b      	sxth	r3, r3
 800988c:	b299      	uxth	r1, r3
 800988e:	f107 020f 	add.w	r2, r7, #15
 8009892:	f04f 33ff 	mov.w	r3, #4294967295
 8009896:	9300      	str	r3, [sp, #0]
 8009898:	2301      	movs	r3, #1
 800989a:	f7f9 fb05 	bl	8002ea8 <HAL_I2C_Master_Receive>
 800989e:	4603      	mov	r3, r0
 80098a0:	461a      	mov	r2, r3
 80098a2:	7ffb      	ldrb	r3, [r7, #31]
 80098a4:	4313      	orrs	r3, r2
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	bf14      	ite	ne
 80098aa:	2301      	movne	r3, #1
 80098ac:	2300      	moveq	r3, #0
 80098ae:	77fb      	strb	r3, [r7, #31]
  ColonStateData &= 0b11000000;
 80098b0:	7bfb      	ldrb	r3, [r7, #15]
 80098b2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	73fb      	strb	r3, [r7, #15]


  //Update glitch alphanumeric display
  for (segmentCount = 0; segmentCount <= 2; segmentCount++)
 80098ba:	2300      	movs	r3, #0
 80098bc:	77bb      	strb	r3, [r7, #30]
 80098be:	e01e      	b.n	80098fe <dateTime_updateDisplayGlitch+0xe2>
  {
    if (pGlitchData[segmentCount] !=' ')
 80098c0:	7fbb      	ldrb	r3, [r7, #30]
 80098c2:	683a      	ldr	r2, [r7, #0]
 80098c4:	4413      	add	r3, r2
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	2b20      	cmp	r3, #32
 80098ca:	d015      	beq.n	80098f8 <dateTime_updateDisplayGlitch+0xdc>
    {
      isSuccess |= dateTime_setAlphaSegments(pConfig, segmentCount, pGlitchData[2-segmentCount]);
 80098cc:	7fbb      	ldrb	r3, [r7, #30]
 80098ce:	f1c3 0302 	rsb	r3, r3, #2
 80098d2:	461a      	mov	r2, r3
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	4413      	add	r3, r2
 80098d8:	781a      	ldrb	r2, [r3, #0]
 80098da:	7fbb      	ldrb	r3, [r7, #30]
 80098dc:	4619      	mov	r1, r3
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f7ff ff6a 	bl	80097b8 <dateTime_setAlphaSegments>
 80098e4:	4603      	mov	r3, r0
 80098e6:	461a      	mov	r2, r3
 80098e8:	7ffb      	ldrb	r3, [r7, #31]
 80098ea:	4313      	orrs	r3, r2
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	bf14      	ite	ne
 80098f2:	2301      	movne	r3, #1
 80098f4:	2300      	moveq	r3, #0
 80098f6:	77fb      	strb	r3, [r7, #31]
  for (segmentCount = 0; segmentCount <= 2; segmentCount++)
 80098f8:	7fbb      	ldrb	r3, [r7, #30]
 80098fa:	3301      	adds	r3, #1
 80098fc:	77bb      	strb	r3, [r7, #30]
 80098fe:	7fbb      	ldrb	r3, [r7, #30]
 8009900:	2b02      	cmp	r3, #2
 8009902:	d9dd      	bls.n	80098c0 <dateTime_updateDisplayGlitch+0xa4>
    }
  }

  //Update glitch digit display
  for (segmentCount = 0; segmentCount < (sizeof(digitSegBuffer)-1); segmentCount++)
 8009904:	2300      	movs	r3, #0
 8009906:	77bb      	strb	r3, [r7, #30]
 8009908:	e018      	b.n	800993c <dateTime_updateDisplayGlitch+0x120>
  {
    isSuccess |= dateTime_setDigitSegments(pConfig, digitSegmentOrder[segmentCount], digitSegBuffer[segmentCount]);
 800990a:	7fbb      	ldrb	r3, [r7, #30]
 800990c:	4a3f      	ldr	r2, [pc, #252]	@ (8009a0c <dateTime_updateDisplayGlitch+0x1f0>)
 800990e:	5cd1      	ldrb	r1, [r2, r3]
 8009910:	7fbb      	ldrb	r3, [r7, #30]
 8009912:	3320      	adds	r3, #32
 8009914:	443b      	add	r3, r7
 8009916:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800991a:	461a      	mov	r2, r3
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f7ff feab 	bl	8009678 <dateTime_setDigitSegments>
 8009922:	4603      	mov	r3, r0
 8009924:	461a      	mov	r2, r3
 8009926:	7ffb      	ldrb	r3, [r7, #31]
 8009928:	4313      	orrs	r3, r2
 800992a:	b2db      	uxtb	r3, r3
 800992c:	2b00      	cmp	r3, #0
 800992e:	bf14      	ite	ne
 8009930:	2301      	movne	r3, #1
 8009932:	2300      	moveq	r3, #0
 8009934:	77fb      	strb	r3, [r7, #31]
  for (segmentCount = 0; segmentCount < (sizeof(digitSegBuffer)-1); segmentCount++)
 8009936:	7fbb      	ldrb	r3, [r7, #30]
 8009938:	3301      	adds	r3, #1
 800993a:	77bb      	strb	r3, [r7, #30]
 800993c:	7fbb      	ldrb	r3, [r7, #30]
 800993e:	2b09      	cmp	r3, #9
 8009940:	d9e3      	bls.n	800990a <dateTime_updateDisplayGlitch+0xee>
  }

  //Restore colon state
  uint8_t SegmentData = 0;
 8009942:	2300      	movs	r3, #0
 8009944:	737b      	strb	r3, [r7, #13]
  isSuccess |= HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->i2cAddrs)<<1, &RequestData,  1, HAL_MAX_DELAY);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6818      	ldr	r0, [r3, #0]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	791b      	ldrb	r3, [r3, #4]
 800994e:	005b      	lsls	r3, r3, #1
 8009950:	b299      	uxth	r1, r3
 8009952:	f107 020e 	add.w	r2, r7, #14
 8009956:	f04f 33ff 	mov.w	r3, #4294967295
 800995a:	9300      	str	r3, [sp, #0]
 800995c:	2301      	movs	r3, #1
 800995e:	f7f9 f9a5 	bl	8002cac <HAL_I2C_Master_Transmit>
 8009962:	4603      	mov	r3, r0
 8009964:	461a      	mov	r2, r3
 8009966:	7ffb      	ldrb	r3, [r7, #31]
 8009968:	4313      	orrs	r3, r2
 800996a:	2b00      	cmp	r3, #0
 800996c:	bf14      	ite	ne
 800996e:	2301      	movne	r3, #1
 8009970:	2300      	moveq	r3, #0
 8009972:	77fb      	strb	r3, [r7, #31]
  isSuccess |= HAL_I2C_Master_Receive(pConfig->hi2c, ((pConfig->i2cAddrs)<<1)|0x01, &SegmentData, 1, HAL_MAX_DELAY);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6818      	ldr	r0, [r3, #0]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	791b      	ldrb	r3, [r3, #4]
 800997c:	005b      	lsls	r3, r3, #1
 800997e:	b21b      	sxth	r3, r3
 8009980:	f043 0301 	orr.w	r3, r3, #1
 8009984:	b21b      	sxth	r3, r3
 8009986:	b299      	uxth	r1, r3
 8009988:	f107 020d 	add.w	r2, r7, #13
 800998c:	f04f 33ff 	mov.w	r3, #4294967295
 8009990:	9300      	str	r3, [sp, #0]
 8009992:	2301      	movs	r3, #1
 8009994:	f7f9 fa88 	bl	8002ea8 <HAL_I2C_Master_Receive>
 8009998:	4603      	mov	r3, r0
 800999a:	461a      	mov	r2, r3
 800999c:	7ffb      	ldrb	r3, [r7, #31]
 800999e:	4313      	orrs	r3, r2
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	bf14      	ite	ne
 80099a4:	2301      	movne	r3, #1
 80099a6:	2300      	moveq	r3, #0
 80099a8:	77fb      	strb	r3, [r7, #31]
  SegmentData &= 0b00111111;
 80099aa:	7b7b      	ldrb	r3, [r7, #13]
 80099ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80099b0:	b2db      	uxtb	r3, r3
 80099b2:	737b      	strb	r3, [r7, #13]
  SegmentData |= ColonStateData;
 80099b4:	7b7a      	ldrb	r2, [r7, #13]
 80099b6:	7bfb      	ldrb	r3, [r7, #15]
 80099b8:	4313      	orrs	r3, r2
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	737b      	strb	r3, [r7, #13]
  isSuccess |= ht16k33_updateDisplayData (pConfig->hDisplayDriver, RequestData, &SegmentData, 1);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6898      	ldr	r0, [r3, #8]
 80099c2:	7bb9      	ldrb	r1, [r7, #14]
 80099c4:	f107 020d 	add.w	r2, r7, #13
 80099c8:	2301      	movs	r3, #1
 80099ca:	f7ff fa9d 	bl	8008f08 <ht16k33_updateDisplayData>
 80099ce:	4603      	mov	r3, r0
 80099d0:	461a      	mov	r2, r3
 80099d2:	7ffb      	ldrb	r3, [r7, #31]
 80099d4:	4313      	orrs	r3, r2
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	2b00      	cmp	r3, #0
 80099da:	bf14      	ite	ne
 80099dc:	2301      	movne	r3, #1
 80099de:	2300      	moveq	r3, #0
 80099e0:	77fb      	strb	r3, [r7, #31]

  //Update Meridiem
  isSuccess |= dateTime_setLed(pConfig, MERIDIEM_LED_SEGMENT_ADDRESS, (DateTime_DisplayDataMeridiem_AM << 6));
 80099e2:	2240      	movs	r2, #64	@ 0x40
 80099e4:	2109      	movs	r1, #9
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f7ff fde5 	bl	80095b6 <dateTime_setLed>
 80099ec:	4603      	mov	r3, r0
 80099ee:	461a      	mov	r2, r3
 80099f0:	7ffb      	ldrb	r3, [r7, #31]
 80099f2:	4313      	orrs	r3, r2
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	bf14      	ite	ne
 80099fa:	2301      	movne	r3, #1
 80099fc:	2300      	moveq	r3, #0
 80099fe:	77fb      	strb	r3, [r7, #31]

  return isSuccess;
 8009a00:	7ffb      	ldrb	r3, [r7, #31]
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3720      	adds	r7, #32
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	0800f000 	.word	0x0800f000

08009a10 <dateTime_convertDateTimeToChar>:

DateTime_Display_Status_t dateTime_convertDateTimeToChar(DateTime_Display_Config_t* const pConfig,
    char* const writeBuf, uint8_t bufferSize, uint8_t* pBufferCount)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b086      	sub	sp, #24
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	60f8      	str	r0, [r7, #12]
 8009a18:	60b9      	str	r1, [r7, #8]
 8009a1a:	603b      	str	r3, [r7, #0]
 8009a1c:	4613      	mov	r3, r2
 8009a1e:	71fb      	strb	r3, [r7, #7]
  DateTime_Display_Status_t isSuccess = 0;
 8009a20:	2300      	movs	r3, #0
 8009a22:	75bb      	strb	r3, [r7, #22]
  uint8_t convertedHour;

  *pBufferCount +=  snprintf(writeBuf+*pBufferCount, bufferSize-*pBufferCount,
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	461a      	mov	r2, r3
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	1898      	adds	r0, r3, r2
 8009a2e:	79fb      	ldrb	r3, [r7, #7]
 8009a30:	683a      	ldr	r2, [r7, #0]
 8009a32:	7812      	ldrb	r2, [r2, #0]
 8009a34:	1a9b      	subs	r3, r3, r2
 8009a36:	4619      	mov	r1, r3
      "%02d", pConfig->dateTimeData.Month);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	7b1b      	ldrb	r3, [r3, #12]
  *pBufferCount +=  snprintf(writeBuf+*pBufferCount, bufferSize-*pBufferCount,
 8009a3c:	4a45      	ldr	r2, [pc, #276]	@ (8009b54 <dateTime_convertDateTimeToChar+0x144>)
 8009a3e:	f004 fa55 	bl	800deec <sniprintf>
 8009a42:	4601      	mov	r1, r0
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	781a      	ldrb	r2, [r3, #0]
 8009a48:	b2cb      	uxtb	r3, r1
 8009a4a:	4413      	add	r3, r2
 8009a4c:	b2da      	uxtb	r2, r3
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	701a      	strb	r2, [r3, #0]
  *pBufferCount += snprintf(writeBuf+*pBufferCount, bufferSize-*pBufferCount,
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	461a      	mov	r2, r3
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	1898      	adds	r0, r3, r2
 8009a5c:	79fb      	ldrb	r3, [r7, #7]
 8009a5e:	683a      	ldr	r2, [r7, #0]
 8009a60:	7812      	ldrb	r2, [r2, #0]
 8009a62:	1a9b      	subs	r3, r3, r2
 8009a64:	4619      	mov	r1, r3
      "%02d", pConfig->dateTimeData.Day);
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	7b5b      	ldrb	r3, [r3, #13]
  *pBufferCount += snprintf(writeBuf+*pBufferCount, bufferSize-*pBufferCount,
 8009a6a:	4a3a      	ldr	r2, [pc, #232]	@ (8009b54 <dateTime_convertDateTimeToChar+0x144>)
 8009a6c:	f004 fa3e 	bl	800deec <sniprintf>
 8009a70:	4601      	mov	r1, r0
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	781a      	ldrb	r2, [r3, #0]
 8009a76:	b2cb      	uxtb	r3, r1
 8009a78:	4413      	add	r3, r2
 8009a7a:	b2da      	uxtb	r2, r3
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	701a      	strb	r2, [r3, #0]
  *pBufferCount += snprintf(writeBuf+*pBufferCount, bufferSize-*pBufferCount,
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	461a      	mov	r2, r3
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	1898      	adds	r0, r3, r2
 8009a8a:	79fb      	ldrb	r3, [r7, #7]
 8009a8c:	683a      	ldr	r2, [r7, #0]
 8009a8e:	7812      	ldrb	r2, [r2, #0]
 8009a90:	1a9b      	subs	r3, r3, r2
 8009a92:	4619      	mov	r1, r3
      "%04d", pConfig->dateTimeData.Year);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	89db      	ldrh	r3, [r3, #14]
  *pBufferCount += snprintf(writeBuf+*pBufferCount, bufferSize-*pBufferCount,
 8009a98:	4a2f      	ldr	r2, [pc, #188]	@ (8009b58 <dateTime_convertDateTimeToChar+0x148>)
 8009a9a:	f004 fa27 	bl	800deec <sniprintf>
 8009a9e:	4601      	mov	r1, r0
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	781a      	ldrb	r2, [r3, #0]
 8009aa4:	b2cb      	uxtb	r3, r1
 8009aa6:	4413      	add	r3, r2
 8009aa8:	b2da      	uxtb	r2, r3
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	701a      	strb	r2, [r3, #0]
  switch (pConfig->dateTimeData.Meridiem)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	7c9b      	ldrb	r3, [r3, #18]
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	d00e      	beq.n	8009ad4 <dateTime_convertDateTimeToChar+0xc4>
 8009ab6:	2b02      	cmp	r3, #2
 8009ab8:	d119      	bne.n	8009aee <dateTime_convertDateTimeToChar+0xde>
  {
    case  DateTime_DisplayDataMeridiem_PM:
      convertedHour = (pConfig->dateTimeData.Hour == 12) ? (pConfig->dateTimeData.Hour) : (pConfig->dateTimeData.Hour + 12);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	7c1b      	ldrb	r3, [r3, #16]
 8009abe:	2b0c      	cmp	r3, #12
 8009ac0:	d102      	bne.n	8009ac8 <dateTime_convertDateTimeToChar+0xb8>
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	7c1b      	ldrb	r3, [r3, #16]
 8009ac6:	e003      	b.n	8009ad0 <dateTime_convertDateTimeToChar+0xc0>
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	7c1b      	ldrb	r3, [r3, #16]
 8009acc:	330c      	adds	r3, #12
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	75fb      	strb	r3, [r7, #23]
      break;
 8009ad2:	e00c      	b.n	8009aee <dateTime_convertDateTimeToChar+0xde>
    case  DateTime_DisplayDataMeridiem_AM:
      convertedHour = (pConfig->dateTimeData.Hour == 12) ? (pConfig->dateTimeData.Hour + 12) : (pConfig->dateTimeData.Hour);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	7c1b      	ldrb	r3, [r3, #16]
 8009ad8:	2b0c      	cmp	r3, #12
 8009ada:	d104      	bne.n	8009ae6 <dateTime_convertDateTimeToChar+0xd6>
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	7c1b      	ldrb	r3, [r3, #16]
 8009ae0:	330c      	adds	r3, #12
 8009ae2:	b2db      	uxtb	r3, r3
 8009ae4:	e001      	b.n	8009aea <dateTime_convertDateTimeToChar+0xda>
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	7c1b      	ldrb	r3, [r3, #16]
 8009aea:	75fb      	strb	r3, [r7, #23]
      break;
 8009aec:	bf00      	nop
  }
  *pBufferCount += snprintf(writeBuf+*pBufferCount, bufferSize-*pBufferCount,
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	461a      	mov	r2, r3
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	1898      	adds	r0, r3, r2
 8009af8:	79fb      	ldrb	r3, [r7, #7]
 8009afa:	683a      	ldr	r2, [r7, #0]
 8009afc:	7812      	ldrb	r2, [r2, #0]
 8009afe:	1a9b      	subs	r3, r3, r2
 8009b00:	4619      	mov	r1, r3
 8009b02:	7dfb      	ldrb	r3, [r7, #23]
 8009b04:	4a13      	ldr	r2, [pc, #76]	@ (8009b54 <dateTime_convertDateTimeToChar+0x144>)
 8009b06:	f004 f9f1 	bl	800deec <sniprintf>
 8009b0a:	4601      	mov	r1, r0
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	781a      	ldrb	r2, [r3, #0]
 8009b10:	b2cb      	uxtb	r3, r1
 8009b12:	4413      	add	r3, r2
 8009b14:	b2da      	uxtb	r2, r3
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	701a      	strb	r2, [r3, #0]
      "%02d", convertedHour);
  *pBufferCount += snprintf(writeBuf+*pBufferCount, bufferSize-*pBufferCount,
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	461a      	mov	r2, r3
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	1898      	adds	r0, r3, r2
 8009b24:	79fb      	ldrb	r3, [r7, #7]
 8009b26:	683a      	ldr	r2, [r7, #0]
 8009b28:	7812      	ldrb	r2, [r2, #0]
 8009b2a:	1a9b      	subs	r3, r3, r2
 8009b2c:	4619      	mov	r1, r3
      "%02d", pConfig->dateTimeData.Minute);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	7c5b      	ldrb	r3, [r3, #17]
  *pBufferCount += snprintf(writeBuf+*pBufferCount, bufferSize-*pBufferCount,
 8009b32:	4a08      	ldr	r2, [pc, #32]	@ (8009b54 <dateTime_convertDateTimeToChar+0x144>)
 8009b34:	f004 f9da 	bl	800deec <sniprintf>
 8009b38:	4601      	mov	r1, r0
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	781a      	ldrb	r2, [r3, #0]
 8009b3e:	b2cb      	uxtb	r3, r1
 8009b40:	4413      	add	r3, r2
 8009b42:	b2da      	uxtb	r2, r3
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	701a      	strb	r2, [r3, #0]

  return isSuccess;
 8009b48:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3718      	adds	r7, #24
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
 8009b52:	bf00      	nop
 8009b54:	0800eea4 	.word	0x0800eea4
 8009b58:	0800eeac 	.word	0x0800eeac

08009b5c <dateTime_updateDisplay>:
DateTime_Display_Status_t dateTime_updateDisplay(DateTime_Display_Config_t* const pConfig)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b08a      	sub	sp, #40	@ 0x28
 8009b60:	af02      	add	r7, sp, #8
 8009b62:	6078      	str	r0, [r7, #4]
  DateTime_Display_Status_t isSuccess           = 0;
 8009b64:	2300      	movs	r3, #0
 8009b66:	77fb      	strb	r3, [r7, #31]
  uint8_t                   digitSegBufferCount = 0;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	777b      	strb	r3, [r7, #29]
  uint8_t                   segmentCount        = 0;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	77bb      	strb	r3, [r7, #30]
  char                      digitSegBuffer[11];

  //Save colon state
  uint8_t ColonStateData = 0;
 8009b70:	2300      	movs	r3, #0
 8009b72:	73fb      	strb	r3, [r7, #15]
  uint8_t RequestData = COLON_LED_SEGMENT_ADDRESS;
 8009b74:	2307      	movs	r3, #7
 8009b76:	73bb      	strb	r3, [r7, #14]

  isSuccess |= HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->i2cAddrs)<<1, &RequestData,  1, HAL_MAX_DELAY);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6818      	ldr	r0, [r3, #0]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	791b      	ldrb	r3, [r3, #4]
 8009b80:	005b      	lsls	r3, r3, #1
 8009b82:	b299      	uxth	r1, r3
 8009b84:	f107 020e 	add.w	r2, r7, #14
 8009b88:	f04f 33ff 	mov.w	r3, #4294967295
 8009b8c:	9300      	str	r3, [sp, #0]
 8009b8e:	2301      	movs	r3, #1
 8009b90:	f7f9 f88c 	bl	8002cac <HAL_I2C_Master_Transmit>
 8009b94:	4603      	mov	r3, r0
 8009b96:	461a      	mov	r2, r3
 8009b98:	7ffb      	ldrb	r3, [r7, #31]
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	bf14      	ite	ne
 8009ba0:	2301      	movne	r3, #1
 8009ba2:	2300      	moveq	r3, #0
 8009ba4:	77fb      	strb	r3, [r7, #31]
  isSuccess |= HAL_I2C_Master_Receive(pConfig->hi2c, ((pConfig->i2cAddrs)<<1)|0x01, &ColonStateData, 1, HAL_MAX_DELAY);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6818      	ldr	r0, [r3, #0]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	791b      	ldrb	r3, [r3, #4]
 8009bae:	005b      	lsls	r3, r3, #1
 8009bb0:	b21b      	sxth	r3, r3
 8009bb2:	f043 0301 	orr.w	r3, r3, #1
 8009bb6:	b21b      	sxth	r3, r3
 8009bb8:	b299      	uxth	r1, r3
 8009bba:	f107 020f 	add.w	r2, r7, #15
 8009bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8009bc2:	9300      	str	r3, [sp, #0]
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	f7f9 f96f 	bl	8002ea8 <HAL_I2C_Master_Receive>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	461a      	mov	r2, r3
 8009bce:	7ffb      	ldrb	r3, [r7, #31]
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	bf14      	ite	ne
 8009bd6:	2301      	movne	r3, #1
 8009bd8:	2300      	moveq	r3, #0
 8009bda:	77fb      	strb	r3, [r7, #31]
  ColonStateData &= 0b11000000;
 8009bdc:	7bfb      	ldrb	r3, [r7, #15]
 8009bde:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	73fb      	strb	r3, [r7, #15]

  //Update Month Display Characters
  for (segmentCount = 0; segmentCount <= 2; segmentCount++)
 8009be6:	2300      	movs	r3, #0
 8009be8:	77bb      	strb	r3, [r7, #30]
 8009bea:	e01e      	b.n	8009c2a <dateTime_updateDisplay+0xce>
  {
    isSuccess |= dateTime_setAlphaSegments(pConfig, segmentCount,
        monthDisplayChars[(pConfig->dateTimeData.Month)-1][2-segmentCount]);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	7b1b      	ldrb	r3, [r3, #12]
 8009bf0:	1e5a      	subs	r2, r3, #1
 8009bf2:	7fbb      	ldrb	r3, [r7, #30]
 8009bf4:	f1c3 0102 	rsb	r1, r3, #2
 8009bf8:	486f      	ldr	r0, [pc, #444]	@ (8009db8 <dateTime_updateDisplay+0x25c>)
 8009bfa:	4613      	mov	r3, r2
 8009bfc:	005b      	lsls	r3, r3, #1
 8009bfe:	4413      	add	r3, r2
 8009c00:	4403      	add	r3, r0
 8009c02:	440b      	add	r3, r1
 8009c04:	781a      	ldrb	r2, [r3, #0]
    isSuccess |= dateTime_setAlphaSegments(pConfig, segmentCount,
 8009c06:	7fbb      	ldrb	r3, [r7, #30]
 8009c08:	4619      	mov	r1, r3
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f7ff fdd4 	bl	80097b8 <dateTime_setAlphaSegments>
 8009c10:	4603      	mov	r3, r0
 8009c12:	461a      	mov	r2, r3
 8009c14:	7ffb      	ldrb	r3, [r7, #31]
 8009c16:	4313      	orrs	r3, r2
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	bf14      	ite	ne
 8009c1e:	2301      	movne	r3, #1
 8009c20:	2300      	moveq	r3, #0
 8009c22:	77fb      	strb	r3, [r7, #31]
  for (segmentCount = 0; segmentCount <= 2; segmentCount++)
 8009c24:	7fbb      	ldrb	r3, [r7, #30]
 8009c26:	3301      	adds	r3, #1
 8009c28:	77bb      	strb	r3, [r7, #30]
 8009c2a:	7fbb      	ldrb	r3, [r7, #30]
 8009c2c:	2b02      	cmp	r3, #2
 8009c2e:	d9dd      	bls.n	8009bec <dateTime_updateDisplay+0x90>
  }

  //Update Day, Year and Time
  digitSegBufferCount = snprintf(digitSegBuffer, sizeof(digitSegBuffer), "%02d", pConfig->dateTimeData.Day);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	7b5b      	ldrb	r3, [r3, #13]
 8009c34:	f107 0010 	add.w	r0, r7, #16
 8009c38:	4a60      	ldr	r2, [pc, #384]	@ (8009dbc <dateTime_updateDisplay+0x260>)
 8009c3a:	210b      	movs	r1, #11
 8009c3c:	f004 f956 	bl	800deec <sniprintf>
 8009c40:	4603      	mov	r3, r0
 8009c42:	777b      	strb	r3, [r7, #29]
  digitSegBufferCount += snprintf(digitSegBuffer+digitSegBufferCount, sizeof(digitSegBuffer)-digitSegBufferCount,
 8009c44:	7f7b      	ldrb	r3, [r7, #29]
 8009c46:	f107 0210 	add.w	r2, r7, #16
 8009c4a:	18d0      	adds	r0, r2, r3
 8009c4c:	7f7b      	ldrb	r3, [r7, #29]
 8009c4e:	f1c3 010b 	rsb	r1, r3, #11
      "%04d", pConfig->dateTimeData.Year);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	89db      	ldrh	r3, [r3, #14]
  digitSegBufferCount += snprintf(digitSegBuffer+digitSegBufferCount, sizeof(digitSegBuffer)-digitSegBufferCount,
 8009c56:	4a5a      	ldr	r2, [pc, #360]	@ (8009dc0 <dateTime_updateDisplay+0x264>)
 8009c58:	f004 f948 	bl	800deec <sniprintf>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	b2da      	uxtb	r2, r3
 8009c60:	7f7b      	ldrb	r3, [r7, #29]
 8009c62:	4413      	add	r3, r2
 8009c64:	777b      	strb	r3, [r7, #29]
  digitSegBufferCount += snprintf(digitSegBuffer+digitSegBufferCount, sizeof(digitSegBuffer)-digitSegBufferCount,
 8009c66:	7f7b      	ldrb	r3, [r7, #29]
 8009c68:	f107 0210 	add.w	r2, r7, #16
 8009c6c:	18d0      	adds	r0, r2, r3
 8009c6e:	7f7b      	ldrb	r3, [r7, #29]
 8009c70:	f1c3 010b 	rsb	r1, r3, #11
      "%02d", pConfig->dateTimeData.Hour);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	7c1b      	ldrb	r3, [r3, #16]
  digitSegBufferCount += snprintf(digitSegBuffer+digitSegBufferCount, sizeof(digitSegBuffer)-digitSegBufferCount,
 8009c78:	4a50      	ldr	r2, [pc, #320]	@ (8009dbc <dateTime_updateDisplay+0x260>)
 8009c7a:	f004 f937 	bl	800deec <sniprintf>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	b2da      	uxtb	r2, r3
 8009c82:	7f7b      	ldrb	r3, [r7, #29]
 8009c84:	4413      	add	r3, r2
 8009c86:	777b      	strb	r3, [r7, #29]
  digitSegBufferCount += snprintf(digitSegBuffer+digitSegBufferCount, sizeof(digitSegBuffer)-digitSegBufferCount,
 8009c88:	7f7b      	ldrb	r3, [r7, #29]
 8009c8a:	f107 0210 	add.w	r2, r7, #16
 8009c8e:	18d0      	adds	r0, r2, r3
 8009c90:	7f7b      	ldrb	r3, [r7, #29]
 8009c92:	f1c3 010b 	rsb	r1, r3, #11
      "%02d", pConfig->dateTimeData.Minute);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	7c5b      	ldrb	r3, [r3, #17]
  digitSegBufferCount += snprintf(digitSegBuffer+digitSegBufferCount, sizeof(digitSegBuffer)-digitSegBufferCount,
 8009c9a:	4a48      	ldr	r2, [pc, #288]	@ (8009dbc <dateTime_updateDisplay+0x260>)
 8009c9c:	f004 f926 	bl	800deec <sniprintf>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	b2da      	uxtb	r2, r3
 8009ca4:	7f7b      	ldrb	r3, [r7, #29]
 8009ca6:	4413      	add	r3, r2
 8009ca8:	777b      	strb	r3, [r7, #29]

  for (segmentCount = 0; segmentCount < (sizeof(digitSegBuffer)-1); segmentCount++)
 8009caa:	2300      	movs	r3, #0
 8009cac:	77bb      	strb	r3, [r7, #30]
 8009cae:	e018      	b.n	8009ce2 <dateTime_updateDisplay+0x186>
  {
    isSuccess |= dateTime_setDigitSegments(pConfig, digitSegmentOrder[segmentCount], digitSegBuffer[segmentCount]);
 8009cb0:	7fbb      	ldrb	r3, [r7, #30]
 8009cb2:	4a44      	ldr	r2, [pc, #272]	@ (8009dc4 <dateTime_updateDisplay+0x268>)
 8009cb4:	5cd1      	ldrb	r1, [r2, r3]
 8009cb6:	7fbb      	ldrb	r3, [r7, #30]
 8009cb8:	3320      	adds	r3, #32
 8009cba:	443b      	add	r3, r7
 8009cbc:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f7ff fcd8 	bl	8009678 <dateTime_setDigitSegments>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	461a      	mov	r2, r3
 8009ccc:	7ffb      	ldrb	r3, [r7, #31]
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	b2db      	uxtb	r3, r3
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	bf14      	ite	ne
 8009cd6:	2301      	movne	r3, #1
 8009cd8:	2300      	moveq	r3, #0
 8009cda:	77fb      	strb	r3, [r7, #31]
  for (segmentCount = 0; segmentCount < (sizeof(digitSegBuffer)-1); segmentCount++)
 8009cdc:	7fbb      	ldrb	r3, [r7, #30]
 8009cde:	3301      	adds	r3, #1
 8009ce0:	77bb      	strb	r3, [r7, #30]
 8009ce2:	7fbb      	ldrb	r3, [r7, #30]
 8009ce4:	2b09      	cmp	r3, #9
 8009ce6:	d9e3      	bls.n	8009cb0 <dateTime_updateDisplay+0x154>
  }

  //Restore colon state
  uint8_t SegmentData = 0;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	737b      	strb	r3, [r7, #13]
  isSuccess |= HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->i2cAddrs)<<1, &RequestData,  1, HAL_MAX_DELAY);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6818      	ldr	r0, [r3, #0]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	791b      	ldrb	r3, [r3, #4]
 8009cf4:	005b      	lsls	r3, r3, #1
 8009cf6:	b299      	uxth	r1, r3
 8009cf8:	f107 020e 	add.w	r2, r7, #14
 8009cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8009d00:	9300      	str	r3, [sp, #0]
 8009d02:	2301      	movs	r3, #1
 8009d04:	f7f8 ffd2 	bl	8002cac <HAL_I2C_Master_Transmit>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	7ffb      	ldrb	r3, [r7, #31]
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	bf14      	ite	ne
 8009d14:	2301      	movne	r3, #1
 8009d16:	2300      	moveq	r3, #0
 8009d18:	77fb      	strb	r3, [r7, #31]
  isSuccess |= HAL_I2C_Master_Receive(pConfig->hi2c, ((pConfig->i2cAddrs)<<1)|0x01, &SegmentData, 1, HAL_MAX_DELAY);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6818      	ldr	r0, [r3, #0]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	791b      	ldrb	r3, [r3, #4]
 8009d22:	005b      	lsls	r3, r3, #1
 8009d24:	b21b      	sxth	r3, r3
 8009d26:	f043 0301 	orr.w	r3, r3, #1
 8009d2a:	b21b      	sxth	r3, r3
 8009d2c:	b299      	uxth	r1, r3
 8009d2e:	f107 020d 	add.w	r2, r7, #13
 8009d32:	f04f 33ff 	mov.w	r3, #4294967295
 8009d36:	9300      	str	r3, [sp, #0]
 8009d38:	2301      	movs	r3, #1
 8009d3a:	f7f9 f8b5 	bl	8002ea8 <HAL_I2C_Master_Receive>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	461a      	mov	r2, r3
 8009d42:	7ffb      	ldrb	r3, [r7, #31]
 8009d44:	4313      	orrs	r3, r2
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	bf14      	ite	ne
 8009d4a:	2301      	movne	r3, #1
 8009d4c:	2300      	moveq	r3, #0
 8009d4e:	77fb      	strb	r3, [r7, #31]
  SegmentData &= 0b00111111;
 8009d50:	7b7b      	ldrb	r3, [r7, #13]
 8009d52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	737b      	strb	r3, [r7, #13]
  SegmentData |= ColonStateData;
 8009d5a:	7b7a      	ldrb	r2, [r7, #13]
 8009d5c:	7bfb      	ldrb	r3, [r7, #15]
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	737b      	strb	r3, [r7, #13]
  isSuccess |= ht16k33_updateDisplayData (pConfig->hDisplayDriver, RequestData, &SegmentData, 1);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6898      	ldr	r0, [r3, #8]
 8009d68:	7bb9      	ldrb	r1, [r7, #14]
 8009d6a:	f107 020d 	add.w	r2, r7, #13
 8009d6e:	2301      	movs	r3, #1
 8009d70:	f7ff f8ca 	bl	8008f08 <ht16k33_updateDisplayData>
 8009d74:	4603      	mov	r3, r0
 8009d76:	461a      	mov	r2, r3
 8009d78:	7ffb      	ldrb	r3, [r7, #31]
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	bf14      	ite	ne
 8009d82:	2301      	movne	r3, #1
 8009d84:	2300      	moveq	r3, #0
 8009d86:	77fb      	strb	r3, [r7, #31]

  //Update Meridiem
  isSuccess |= dateTime_setLed(pConfig, MERIDIEM_LED_SEGMENT_ADDRESS, (pConfig->dateTimeData.Meridiem << 6));
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	7c9b      	ldrb	r3, [r3, #18]
 8009d8c:	019b      	lsls	r3, r3, #6
 8009d8e:	b2db      	uxtb	r3, r3
 8009d90:	461a      	mov	r2, r3
 8009d92:	2109      	movs	r1, #9
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f7ff fc0e 	bl	80095b6 <dateTime_setLed>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	7ffb      	ldrb	r3, [r7, #31]
 8009da0:	4313      	orrs	r3, r2
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	bf14      	ite	ne
 8009da8:	2301      	movne	r3, #1
 8009daa:	2300      	moveq	r3, #0
 8009dac:	77fb      	strb	r3, [r7, #31]

  return isSuccess;
 8009dae:	7ffb      	ldrb	r3, [r7, #31]
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3720      	adds	r7, #32
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}
 8009db8:	0800f04c 	.word	0x0800f04c
 8009dbc:	0800eea4 	.word	0x0800eea4
 8009dc0:	0800eeac 	.word	0x0800eeac
 8009dc4:	0800f000 	.word	0x0800f000

08009dc8 <HAL_GPIO_EXTI_Callback>:

volatile bool gGlitchDoubleHit = false;


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b084      	sub	sp, #16
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	4603      	mov	r3, r0
 8009dd0:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == IMU_INTERRUPT_Pin)
 8009dd2:	88fb      	ldrh	r3, [r7, #6]
 8009dd4:	2b04      	cmp	r3, #4
 8009dd6:	d128      	bne.n	8009e2a <HAL_GPIO_EXTI_Callback+0x62>
      {
          uint32_t now = HAL_GetTick();
 8009dd8:	f7f7 fce4 	bl	80017a4 <HAL_GetTick>
 8009ddc:	60f8      	str	r0, [r7, #12]

          if (!waiting_for_second_hit)
 8009dde:	4b15      	ldr	r3, [pc, #84]	@ (8009e34 <HAL_GPIO_EXTI_Callback+0x6c>)
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	f083 0301 	eor.w	r3, r3, #1
 8009de6:	b2db      	uxtb	r3, r3
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d009      	beq.n	8009e00 <HAL_GPIO_EXTI_Callback+0x38>
          {
              // First hit detected
              first_hit_time = now;
 8009dec:	4a12      	ldr	r2, [pc, #72]	@ (8009e38 <HAL_GPIO_EXTI_Callback+0x70>)
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	6013      	str	r3, [r2, #0]
              waiting_for_second_hit = true;
 8009df2:	4b10      	ldr	r3, [pc, #64]	@ (8009e34 <HAL_GPIO_EXTI_Callback+0x6c>)
 8009df4:	2201      	movs	r2, #1
 8009df6:	701a      	strb	r2, [r3, #0]
              gGlitchDoubleHit = false;
 8009df8:	4b10      	ldr	r3, [pc, #64]	@ (8009e3c <HAL_GPIO_EXTI_Callback+0x74>)
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	701a      	strb	r2, [r3, #0]
 8009dfe:	e011      	b.n	8009e24 <HAL_GPIO_EXTI_Callback+0x5c>
          }
          else if ((now - first_hit_time) <= double_hit_window_ms)
 8009e00:	4b0d      	ldr	r3, [pc, #52]	@ (8009e38 <HAL_GPIO_EXTI_Callback+0x70>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	68fa      	ldr	r2, [r7, #12]
 8009e06:	1ad3      	subs	r3, r2, r3
 8009e08:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d806      	bhi.n	8009e1e <HAL_GPIO_EXTI_Callback+0x56>
          {
              // Second hit detected within time window → Double Hit!
              waiting_for_second_hit = false;
 8009e10:	4b08      	ldr	r3, [pc, #32]	@ (8009e34 <HAL_GPIO_EXTI_Callback+0x6c>)
 8009e12:	2200      	movs	r2, #0
 8009e14:	701a      	strb	r2, [r3, #0]
              gGlitchDoubleHit = true;
 8009e16:	4b09      	ldr	r3, [pc, #36]	@ (8009e3c <HAL_GPIO_EXTI_Callback+0x74>)
 8009e18:	2201      	movs	r2, #1
 8009e1a:	701a      	strb	r2, [r3, #0]
 8009e1c:	e002      	b.n	8009e24 <HAL_GPIO_EXTI_Callback+0x5c>
          }
          else
          {
              // Too late — treat as new first hit
              first_hit_time = now;
 8009e1e:	4a06      	ldr	r2, [pc, #24]	@ (8009e38 <HAL_GPIO_EXTI_Callback+0x70>)
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	6013      	str	r3, [r2, #0]
          }

          // Clear interrupt
          bno055_set_intr_rst(ENABLED);
 8009e24:	2001      	movs	r0, #1
 8009e26:	f7fe fb1f 	bl	8008468 <bno055_set_intr_rst>
      }
}
 8009e2a:	bf00      	nop
 8009e2c:	3710      	adds	r7, #16
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop
 8009e34:	20000410 	.word	0x20000410
 8009e38:	2000040c 	.word	0x2000040c
 8009e3c:	20000411 	.word	0x20000411

08009e40 <BNO055_I2C_bus_write>:

s8 BNO055_I2C_bus_write(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b086      	sub	sp, #24
 8009e44:	af04      	add	r7, sp, #16
 8009e46:	603a      	str	r2, [r7, #0]
 8009e48:	461a      	mov	r2, r3
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	71fb      	strb	r3, [r7, #7]
 8009e4e:	460b      	mov	r3, r1
 8009e50:	71bb      	strb	r3, [r7, #6]
 8009e52:	4613      	mov	r3, r2
 8009e54:	717b      	strb	r3, [r7, #5]
    if (HAL_I2C_Mem_Write(&hi2c1, dev_addr << 1, reg_addr,
 8009e56:	79fb      	ldrb	r3, [r7, #7]
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	005b      	lsls	r3, r3, #1
 8009e5c:	b299      	uxth	r1, r3
 8009e5e:	79bb      	ldrb	r3, [r7, #6]
 8009e60:	b29a      	uxth	r2, r3
 8009e62:	797b      	ldrb	r3, [r7, #5]
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	2064      	movs	r0, #100	@ 0x64
 8009e68:	9002      	str	r0, [sp, #8]
 8009e6a:	9301      	str	r3, [sp, #4]
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	9300      	str	r3, [sp, #0]
 8009e70:	2301      	movs	r3, #1
 8009e72:	4807      	ldr	r0, [pc, #28]	@ (8009e90 <BNO055_I2C_bus_write+0x50>)
 8009e74:	f7f9 fa4a 	bl	800330c <HAL_I2C_Mem_Write>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d101      	bne.n	8009e82 <BNO055_I2C_bus_write+0x42>
                          I2C_MEMADD_SIZE_8BIT, reg_data, cnt, 100) == HAL_OK)
        return 0;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	e001      	b.n	8009e86 <BNO055_I2C_bus_write+0x46>
    else
        return -1;
 8009e82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3708      	adds	r7, #8
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}
 8009e8e:	bf00      	nop
 8009e90:	20000124 	.word	0x20000124

08009e94 <BNO055_I2C_bus_read>:

s8 BNO055_I2C_bus_read(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b086      	sub	sp, #24
 8009e98:	af04      	add	r7, sp, #16
 8009e9a:	603a      	str	r2, [r7, #0]
 8009e9c:	461a      	mov	r2, r3
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	71fb      	strb	r3, [r7, #7]
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	71bb      	strb	r3, [r7, #6]
 8009ea6:	4613      	mov	r3, r2
 8009ea8:	717b      	strb	r3, [r7, #5]
    if (HAL_I2C_Mem_Read(&hi2c1, dev_addr << 1, reg_addr,
 8009eaa:	79fb      	ldrb	r3, [r7, #7]
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	005b      	lsls	r3, r3, #1
 8009eb0:	b299      	uxth	r1, r3
 8009eb2:	79bb      	ldrb	r3, [r7, #6]
 8009eb4:	b29a      	uxth	r2, r3
 8009eb6:	797b      	ldrb	r3, [r7, #5]
 8009eb8:	b29b      	uxth	r3, r3
 8009eba:	2064      	movs	r0, #100	@ 0x64
 8009ebc:	9002      	str	r0, [sp, #8]
 8009ebe:	9301      	str	r3, [sp, #4]
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	9300      	str	r3, [sp, #0]
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	4807      	ldr	r0, [pc, #28]	@ (8009ee4 <BNO055_I2C_bus_read+0x50>)
 8009ec8:	f7f9 fb1a 	bl	8003500 <HAL_I2C_Mem_Read>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d101      	bne.n	8009ed6 <BNO055_I2C_bus_read+0x42>
                         I2C_MEMADD_SIZE_8BIT, reg_data, cnt, 100) == HAL_OK)
        return 0;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	e001      	b.n	8009eda <BNO055_I2C_bus_read+0x46>
    else
        return -1;
 8009ed6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3708      	adds	r7, #8
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	20000124 	.word	0x20000124

08009ee8 <BNO055_delay_msek>:

void BNO055_delay_msek(u32 msek)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  HAL_Delay(msek);
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f7f7 fc63 	bl	80017bc <HAL_Delay>
}
 8009ef6:	bf00      	nop
 8009ef8:	3708      	adds	r7, #8
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
	...

08009f00 <imu_bno055_init>:


IMU_BNO055_Status_t imu_bno055_init(void)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	af00      	add	r7, sp, #0
  // Assign platform-specific read/write/delay functions
  bno055.bus_read     = BNO055_I2C_bus_read;
 8009f04:	4b29      	ldr	r3, [pc, #164]	@ (8009fac <imu_bno055_init+0xac>)
 8009f06:	4a2a      	ldr	r2, [pc, #168]	@ (8009fb0 <imu_bno055_init+0xb0>)
 8009f08:	611a      	str	r2, [r3, #16]
  bno055.bus_write    = BNO055_I2C_bus_write;
 8009f0a:	4b28      	ldr	r3, [pc, #160]	@ (8009fac <imu_bno055_init+0xac>)
 8009f0c:	4a29      	ldr	r2, [pc, #164]	@ (8009fb4 <imu_bno055_init+0xb4>)
 8009f0e:	60da      	str	r2, [r3, #12]
  bno055.delay_msec   = BNO055_delay_msek;
 8009f10:	4b26      	ldr	r3, [pc, #152]	@ (8009fac <imu_bno055_init+0xac>)
 8009f12:	4a29      	ldr	r2, [pc, #164]	@ (8009fb8 <imu_bno055_init+0xb8>)
 8009f14:	615a      	str	r2, [r3, #20]
  bno055.dev_addr     = BNO055_I2C_ADDR1;  // 0x28 << 1 if needed
 8009f16:	4b25      	ldr	r3, [pc, #148]	@ (8009fac <imu_bno055_init+0xac>)
 8009f18:	2228      	movs	r2, #40	@ 0x28
 8009f1a:	725a      	strb	r2, [r3, #9]

  // Initialize sensor
  if (bno055_init(&bno055) != BNO055_SUCCESS)
 8009f1c:	4823      	ldr	r0, [pc, #140]	@ (8009fac <imu_bno055_init+0xac>)
 8009f1e:	f7fd fe03 	bl	8007b28 <bno055_init>
 8009f22:	4603      	mov	r3, r0
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d001      	beq.n	8009f2c <imu_bno055_init+0x2c>
      return IMU_BNO055_ERROR;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	e03d      	b.n	8009fa8 <imu_bno055_init+0xa8>
  bno055.delay_msec(1500);
 8009f2c:	4b1f      	ldr	r3, [pc, #124]	@ (8009fac <imu_bno055_init+0xac>)
 8009f2e:	695b      	ldr	r3, [r3, #20]
 8009f30:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8009f34:	4798      	blx	r3

  bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 8009f36:	2000      	movs	r0, #0
 8009f38:	f7fe f954 	bl	80081e4 <bno055_set_operation_mode>
  bno055.delay_msec(25);
 8009f3c:	4b1b      	ldr	r3, [pc, #108]	@ (8009fac <imu_bno055_init+0xac>)
 8009f3e:	695b      	ldr	r3, [r3, #20]
 8009f40:	2019      	movs	r0, #25
 8009f42:	4798      	blx	r3

  bno055_set_power_mode(BNO055_POWER_MODE_NORMAL);
 8009f44:	2000      	movs	r0, #0
 8009f46:	f7fe fa15 	bl	8008374 <bno055_set_power_mode>

  // reset all previous int signal
  bno055_set_intr_rst(ENABLED);
 8009f4a:	2001      	movs	r0, #1
 8009f4c:	f7fe fa8c 	bl	8008468 <bno055_set_intr_rst>

  bno055_set_accel_unit(BNO055_ACCEL_UNIT_MSQ);
 8009f50:	2000      	movs	r0, #0
 8009f52:	f7fd ff17 	bl	8007d84 <bno055_set_accel_unit>
  bno055_set_gyro_unit(BNO055_GYRO_UNIT_DPS);
 8009f56:	2000      	movs	r0, #0
 8009f58:	f7fd ff8e 	bl	8007e78 <bno055_set_gyro_unit>
  bno055_set_euler_unit(BNO055_EULER_UNIT_DEG);
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	f7fe f807 	bl	8007f70 <bno055_set_euler_unit>
  bno055_set_temp_unit(BNO055_TEMP_UNIT_CELSIUS);
 8009f62:	2000      	movs	r0, #0
 8009f64:	f7fe f880 	bl	8008068 <bno055_set_temp_unit>

  bno055_set_accel_any_motion_no_motion_axis_enable(0, ENABLED);
 8009f68:	2101      	movs	r1, #1
 8009f6a:	2000      	movs	r0, #0
 8009f6c:	f7fe fca6 	bl	80088bc <bno055_set_accel_any_motion_no_motion_axis_enable>
  bno055_set_accel_any_motion_no_motion_axis_enable(1, ENABLED);
 8009f70:	2101      	movs	r1, #1
 8009f72:	2001      	movs	r0, #1
 8009f74:	f7fe fca2 	bl	80088bc <bno055_set_accel_any_motion_no_motion_axis_enable>
  bno055_set_accel_any_motion_no_motion_axis_enable(2, ENABLED);
 8009f78:	2101      	movs	r1, #1
 8009f7a:	2002      	movs	r0, #2
 8009f7c:	f7fe fc9e 	bl	80088bc <bno055_set_accel_any_motion_no_motion_axis_enable>

  bno055_set_accel_any_motion_thres(35);
 8009f80:	2023      	movs	r0, #35	@ 0x23
 8009f82:	f7fe fb97 	bl	80086b4 <bno055_set_accel_any_motion_thres>
  bno055_set_accel_any_motion_durn(1);
 8009f86:	2001      	movs	r0, #1
 8009f88:	f7fe fc10 	bl	80087ac <bno055_set_accel_any_motion_durn>
  bno055_set_intr_accel_any_motion(ENABLED);
 8009f8c:	2001      	movs	r0, #1
 8009f8e:	f7fe fb2f 	bl	80085f0 <bno055_set_intr_accel_any_motion>
  bno055_set_intr_mask_accel_any_motion(ENABLED);
 8009f92:	2001      	movs	r0, #1
 8009f94:	f7fe faca 	bl	800852c <bno055_set_intr_mask_accel_any_motion>

  bno055_set_operation_mode(BNO055_OPERATION_MODE_AMG);
 8009f98:	2007      	movs	r0, #7
 8009f9a:	f7fe f923 	bl	80081e4 <bno055_set_operation_mode>
  bno055.delay_msec(25);
 8009f9e:	4b03      	ldr	r3, [pc, #12]	@ (8009fac <imu_bno055_init+0xac>)
 8009fa0:	695b      	ldr	r3, [r3, #20]
 8009fa2:	2019      	movs	r0, #25
 8009fa4:	4798      	blx	r3

  return IMU_BNO055_OK;
 8009fa6:	2300      	movs	r3, #0

}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	200003f4 	.word	0x200003f4
 8009fb0:	08009e95 	.word	0x08009e95
 8009fb4:	08009e41 	.word	0x08009e41
 8009fb8:	08009ee9 	.word	0x08009ee9

08009fbc <HAL_I2S_TxCpltCallback>:

return 1;
}

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b083      	sub	sp, #12
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
    extern bool gIsPlaying;
    extern uint32_t gPlayedSize, gRecordingSize;

    gPlayedSize += 1000;
 8009fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8009ff4 <HAL_I2S_TxCpltCallback+0x38>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8009fcc:	4a09      	ldr	r2, [pc, #36]	@ (8009ff4 <HAL_I2S_TxCpltCallback+0x38>)
 8009fce:	6013      	str	r3, [r2, #0]

    if (gPlayedSize >= gRecordingSize)
 8009fd0:	4b08      	ldr	r3, [pc, #32]	@ (8009ff4 <HAL_I2S_TxCpltCallback+0x38>)
 8009fd2:	681a      	ldr	r2, [r3, #0]
 8009fd4:	4b08      	ldr	r3, [pc, #32]	@ (8009ff8 <HAL_I2S_TxCpltCallback+0x3c>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d302      	bcc.n	8009fe2 <HAL_I2S_TxCpltCallback+0x26>
    {
        gIsPlaying = false;
 8009fdc:	4b07      	ldr	r3, [pc, #28]	@ (8009ffc <HAL_I2S_TxCpltCallback+0x40>)
 8009fde:	2200      	movs	r2, #0
 8009fe0:	701a      	strb	r2, [r3, #0]
    }

    gCallbackResult = FULL_COMPLETED;
 8009fe2:	4b07      	ldr	r3, [pc, #28]	@ (800a000 <HAL_I2S_TxCpltCallback+0x44>)
 8009fe4:	2202      	movs	r2, #2
 8009fe6:	701a      	strb	r2, [r3, #0]
}
 8009fe8:	bf00      	nop
 8009fea:	370c      	adds	r7, #12
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr
 8009ff4:	20000418 	.word	0x20000418
 8009ff8:	20000414 	.word	0x20000414
 8009ffc:	20000114 	.word	0x20000114
 800a000:	20000412 	.word	0x20000412

0800a004 <timeCircuit_control_init>:
    uint8_t * currentMinutes);


TimeCircuit_Control_Config_t* timeCircuit_control_init(I2C_HandleTypeDef* const hi2c_display, I2C_HandleTypeDef* const hi2c_rtc,
    RTC_HandleTypeDef* hrtc, SPI_HandleTypeDef* hspi, I2S_HandleTypeDef* hi2s)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b086      	sub	sp, #24
 800a008:	af00      	add	r7, sp, #0
 800a00a:	60f8      	str	r0, [r7, #12]
 800a00c:	60b9      	str	r1, [r7, #8]
 800a00e:	607a      	str	r2, [r7, #4]
 800a010:	603b      	str	r3, [r7, #0]
  TimeCircuit_Control_Config_t* pConfig = malloc(sizeof(TimeCircuit_Control_Config_t));
 800a012:	2054      	movs	r0, #84	@ 0x54
 800a014:	f003 fd00 	bl	800da18 <malloc>
 800a018:	4603      	mov	r3, r0
 800a01a:	617b      	str	r3, [r7, #20]
  pConfig->hi2c_display = hi2c_display;
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	68fa      	ldr	r2, [r7, #12]
 800a020:	601a      	str	r2, [r3, #0]
  pConfig->hi2c_rtc = hi2c_rtc;
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	68ba      	ldr	r2, [r7, #8]
 800a026:	605a      	str	r2, [r3, #4]
  pConfig->hrtc = hrtc;
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	609a      	str	r2, [r3, #8]
  pConfig->hspi = hspi;
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	683a      	ldr	r2, [r7, #0]
 800a032:	60da      	str	r2, [r3, #12]
  pConfig->hi2s = hi2s;
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	6a3a      	ldr	r2, [r7, #32]
 800a038:	611a      	str	r2, [r3, #16]


  //Initialise the time circuit displays
  pConfig->pDestinationTime  = dateTime_display_init(hi2c_display, DESTINATION_DISPLAY_I2C_ADDRESS);
 800a03a:	2171      	movs	r1, #113	@ 0x71
 800a03c:	68f8      	ldr	r0, [r7, #12]
 800a03e:	f7ff f86f 	bl	8009120 <dateTime_display_init>
 800a042:	4602      	mov	r2, r0
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	615a      	str	r2, [r3, #20]
  pConfig->pPresentTime      = dateTime_display_init(hi2c_display, PRESENT_DISPLAY_I2C_ADDRESS);
 800a048:	2172      	movs	r1, #114	@ 0x72
 800a04a:	68f8      	ldr	r0, [r7, #12]
 800a04c:	f7ff f868 	bl	8009120 <dateTime_display_init>
 800a050:	4602      	mov	r2, r0
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	619a      	str	r2, [r3, #24]
  pConfig->pLastDepartedTime = dateTime_display_init(hi2c_display, DEPARTED_DISPLAY_I2C_ADDRESS);
 800a056:	2174      	movs	r1, #116	@ 0x74
 800a058:	68f8      	ldr	r0, [r7, #12]
 800a05a:	f7ff f861 	bl	8009120 <dateTime_display_init>
 800a05e:	4602      	mov	r2, r0
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	61da      	str	r2, [r3, #28]


  //Initialise the time circuit keypad
  pConfig->pTimeCircuitKeypad = keypad3x4w_init(gKeypadPinConfig);
 800a064:	4809      	ldr	r0, [pc, #36]	@ (800a08c <timeCircuit_control_init+0x88>)
 800a066:	f7fe ffb0 	bl	8008fca <keypad3x4w_init>
 800a06a:	4602      	mov	r2, r0
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	621a      	str	r2, [r3, #32]
  //Play TC Start Up Sound
//  char filename[] = "locked.wav";
//  osMessageQueuePut(soundQueueHandle, &filename, 0, 0);

  //Set displays to last stored values or defaults
  timeCircuit_control_setDefaultDateTimes(pConfig);
 800a070:	6978      	ldr	r0, [r7, #20]
 800a072:	f000 f843 	bl	800a0fc <timeCircuit_control_setDefaultDateTimes>

  //Update display with retrieved date times
  timeCircuit_control_updateDisplays(pConfig);
 800a076:	6978      	ldr	r0, [r7, #20]
 800a078:	f000 f87e 	bl	800a178 <timeCircuit_control_updateDisplays>
//    DS3231_Init(hi2c_rtc);
//
//  #endif

    //Update RTC with retrieved present date time
    timeCircuit_control_setRtcDateTime(pConfig);
 800a07c:	6978      	ldr	r0, [r7, #20]
 800a07e:	f000 fa29 	bl	800a4d4 <timeCircuit_control_setRtcDateTime>

  return pConfig;
 800a082:	697b      	ldr	r3, [r7, #20]
}
 800a084:	4618      	mov	r0, r3
 800a086:	3718      	adds	r7, #24
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	0800f0cc 	.word	0x0800f0cc

0800a090 <timeCircuit_control_clearDisplays>:
  free (pConfig);
  return 1;
}

TimeCircuit_Control_Status_t timeCircuit_control_clearDisplays(TimeCircuit_Control_Config_t* const pConfig)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = 1;
 800a098:	2301      	movs	r3, #1
 800a09a:	73fb      	strb	r3, [r7, #15]

  isSuccess &= dateTime_clearDisplay(pConfig->pDestinationTime);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	695b      	ldr	r3, [r3, #20]
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f7ff fa4a 	bl	800953a <dateTime_clearDisplay>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	461a      	mov	r2, r3
 800a0aa:	7bfb      	ldrb	r3, [r7, #15]
 800a0ac:	4013      	ands	r3, r2
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	bf14      	ite	ne
 800a0b2:	2301      	movne	r3, #1
 800a0b4:	2300      	moveq	r3, #0
 800a0b6:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_clearDisplay(pConfig->pPresentTime);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	699b      	ldr	r3, [r3, #24]
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f7ff fa3c 	bl	800953a <dateTime_clearDisplay>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	461a      	mov	r2, r3
 800a0c6:	7bfb      	ldrb	r3, [r7, #15]
 800a0c8:	4013      	ands	r3, r2
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	bf14      	ite	ne
 800a0ce:	2301      	movne	r3, #1
 800a0d0:	2300      	moveq	r3, #0
 800a0d2:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_clearDisplay(pConfig->pLastDepartedTime);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	69db      	ldr	r3, [r3, #28]
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f7ff fa2e 	bl	800953a <dateTime_clearDisplay>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	7bfb      	ldrb	r3, [r7, #15]
 800a0e4:	4013      	ands	r3, r2
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	bf14      	ite	ne
 800a0ea:	2301      	movne	r3, #1
 800a0ec:	2300      	moveq	r3, #0
 800a0ee:	73fb      	strb	r3, [r7, #15]

  return isSuccess;
 800a0f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3710      	adds	r7, #16
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
	...

0800a0fc <timeCircuit_control_setDefaultDateTimes>:

TimeCircuit_Control_Status_t timeCircuit_control_setDefaultDateTimes(TimeCircuit_Control_Config_t* const pConfig)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b084      	sub	sp, #16
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = 1;
 800a104:	2301      	movs	r3, #1
 800a106:	73fb      	strb	r3, [r7, #15]

  isSuccess &= dateTime_setDisplayData(pConfig->pDestinationTime, gDefaultDestinationTime);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	695b      	ldr	r3, [r3, #20]
 800a10c:	4917      	ldr	r1, [pc, #92]	@ (800a16c <timeCircuit_control_setDefaultDateTimes+0x70>)
 800a10e:	4618      	mov	r0, r3
 800a110:	f7ff f952 	bl	80093b8 <dateTime_setDisplayData>
 800a114:	4603      	mov	r3, r0
 800a116:	461a      	mov	r2, r3
 800a118:	7bfb      	ldrb	r3, [r7, #15]
 800a11a:	4013      	ands	r3, r2
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	bf14      	ite	ne
 800a120:	2301      	movne	r3, #1
 800a122:	2300      	moveq	r3, #0
 800a124:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_setDisplayData(pConfig->pPresentTime, gDefaultPresentTime);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	699b      	ldr	r3, [r3, #24]
 800a12a:	4911      	ldr	r1, [pc, #68]	@ (800a170 <timeCircuit_control_setDefaultDateTimes+0x74>)
 800a12c:	4618      	mov	r0, r3
 800a12e:	f7ff f943 	bl	80093b8 <dateTime_setDisplayData>
 800a132:	4603      	mov	r3, r0
 800a134:	461a      	mov	r2, r3
 800a136:	7bfb      	ldrb	r3, [r7, #15]
 800a138:	4013      	ands	r3, r2
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	bf14      	ite	ne
 800a13e:	2301      	movne	r3, #1
 800a140:	2300      	moveq	r3, #0
 800a142:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_setDisplayData(pConfig->pLastDepartedTime, gDefaultLastDepartedTime);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	69db      	ldr	r3, [r3, #28]
 800a148:	490a      	ldr	r1, [pc, #40]	@ (800a174 <timeCircuit_control_setDefaultDateTimes+0x78>)
 800a14a:	4618      	mov	r0, r3
 800a14c:	f7ff f934 	bl	80093b8 <dateTime_setDisplayData>
 800a150:	4603      	mov	r3, r0
 800a152:	461a      	mov	r2, r3
 800a154:	7bfb      	ldrb	r3, [r7, #15]
 800a156:	4013      	ands	r3, r2
 800a158:	2b00      	cmp	r3, #0
 800a15a:	bf14      	ite	ne
 800a15c:	2301      	movne	r3, #1
 800a15e:	2300      	moveq	r3, #0
 800a160:	73fb      	strb	r3, [r7, #15]

  return isSuccess;
 800a162:	7bfb      	ldrb	r3, [r7, #15]
}
 800a164:	4618      	mov	r0, r3
 800a166:	3710      	adds	r7, #16
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}
 800a16c:	0800f07c 	.word	0x0800f07c
 800a170:	0800f088 	.word	0x0800f088
 800a174:	0800f094 	.word	0x0800f094

0800a178 <timeCircuit_control_updateDisplays>:

TimeCircuit_Control_Status_t timeCircuit_control_updateDisplays(TimeCircuit_Control_Config_t* const pConfig)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b084      	sub	sp, #16
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = false;
 800a180:	2300      	movs	r3, #0
 800a182:	73fb      	strb	r3, [r7, #15]

  isSuccess = dateTime_updateDisplay(pConfig->pDestinationTime);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	695b      	ldr	r3, [r3, #20]
 800a188:	4618      	mov	r0, r3
 800a18a:	f7ff fce7 	bl	8009b5c <dateTime_updateDisplay>
 800a18e:	4603      	mov	r3, r0
 800a190:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_updateDisplay(pConfig->pPresentTime);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	699b      	ldr	r3, [r3, #24]
 800a196:	4618      	mov	r0, r3
 800a198:	f7ff fce0 	bl	8009b5c <dateTime_updateDisplay>
 800a19c:	4603      	mov	r3, r0
 800a19e:	461a      	mov	r2, r3
 800a1a0:	7bfb      	ldrb	r3, [r7, #15]
 800a1a2:	4013      	ands	r3, r2
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	bf14      	ite	ne
 800a1a8:	2301      	movne	r3, #1
 800a1aa:	2300      	moveq	r3, #0
 800a1ac:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_updateDisplay(pConfig->pLastDepartedTime);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	69db      	ldr	r3, [r3, #28]
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f7ff fcd2 	bl	8009b5c <dateTime_updateDisplay>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	7bfb      	ldrb	r3, [r7, #15]
 800a1be:	4013      	ands	r3, r2
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	bf14      	ite	ne
 800a1c4:	2301      	movne	r3, #1
 800a1c6:	2300      	moveq	r3, #0
 800a1c8:	73fb      	strb	r3, [r7, #15]

  return isSuccess;
 800a1ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3710      	adds	r7, #16
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <timeCircuit_control_checkButtonActivation>:

TimeCircuit_Control_Status_t timeCircuit_control_checkButtonActivation(const bool* const isbuttonActivated,
    bool* hasButtonActivated, uint32_t* previousTimeMS, uint32_t debounceTime)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b086      	sub	sp, #24
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	60f8      	str	r0, [r7, #12]
 800a1dc:	60b9      	str	r1, [r7, #8]
 800a1de:	607a      	str	r2, [r7, #4]
 800a1e0:	603b      	str	r3, [r7, #0]
  TimeCircuit_Control_Status_t hasStateChanged = 0;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	75fb      	strb	r3, [r7, #23]
  uint32_t currentTimeMS = HAL_GetTick();
 800a1e6:	f7f7 fadd 	bl	80017a4 <HAL_GetTick>
 800a1ea:	6138      	str	r0, [r7, #16]

  //Verify that the button state hasn't changed
  if (*isbuttonActivated != *hasButtonActivated)
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	781a      	ldrb	r2, [r3, #0]
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	781b      	ldrb	r3, [r3, #0]
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d00f      	beq.n	800a218 <timeCircuit_control_checkButtonActivation+0x44>
  {
    //Filter out false positive button activations
    if ((currentTimeMS - *previousTimeMS) > debounceTime)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	693a      	ldr	r2, [r7, #16]
 800a1fe:	1ad3      	subs	r3, r2, r3
 800a200:	683a      	ldr	r2, [r7, #0]
 800a202:	429a      	cmp	r2, r3
 800a204:	d208      	bcs.n	800a218 <timeCircuit_control_checkButtonActivation+0x44>
    {
      *previousTimeMS = currentTimeMS;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	693a      	ldr	r2, [r7, #16]
 800a20a:	601a      	str	r2, [r3, #0]
      hasStateChanged = true;
 800a20c:	2301      	movs	r3, #1
 800a20e:	75fb      	strb	r3, [r7, #23]
      *hasButtonActivated = *isbuttonActivated;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	781a      	ldrb	r2, [r3, #0]
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	701a      	strb	r2, [r3, #0]
    }
  }
  return hasStateChanged;
 800a218:	7dfb      	ldrb	r3, [r7, #23]
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3718      	adds	r7, #24
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
	...

0800a224 <timeCircuit_control_readInputDateTime>:

TimeCircuit_Control_Status_t timeCircuit_control_readInputDateTime(TimeCircuit_Control_Config_t * const pConfig)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b0a2      	sub	sp, #136	@ 0x88
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = 1;
 800a22c:	2301      	movs	r3, #1
 800a22e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  bool isButtonActivated                  = false;
 800a232:	2300      	movs	r3, #0
 800a234:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
  bool hasButtonStateChanged              = false;
 800a238:	2300      	movs	r3, #0
 800a23a:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86

  static bool hasButtonActivated          = false;
  static uint32_t previousTime            = 0;


  isButtonActivated  = keypad3x4w_readKeypad(pConfig->pTimeCircuitKeypad, &pConfig->keypadInputValue);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6a1a      	ldr	r2, [r3, #32]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	3348      	adds	r3, #72	@ 0x48
 800a246:	4619      	mov	r1, r3
 800a248:	4610      	mov	r0, r2
 800a24a:	f7fe feff 	bl	800904c <keypad3x4w_readKeypad>
 800a24e:	4603      	mov	r3, r0
 800a250:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
  hasButtonStateChanged = timeCircuit_control_checkButtonActivation(&isButtonActivated, &hasButtonActivated,
 800a254:	f107 0085 	add.w	r0, r7, #133	@ 0x85
 800a258:	2332      	movs	r3, #50	@ 0x32
 800a25a:	4a82      	ldr	r2, [pc, #520]	@ (800a464 <timeCircuit_control_readInputDateTime+0x240>)
 800a25c:	4982      	ldr	r1, [pc, #520]	@ (800a468 <timeCircuit_control_readInputDateTime+0x244>)
 800a25e:	f7ff ffb9 	bl	800a1d4 <timeCircuit_control_checkButtonActivation>
 800a262:	4603      	mov	r3, r0
 800a264:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
        &previousTime, KEYPAD_DEBOUNCE_TIME_MS);

  if ((hasButtonStateChanged == true) && (isButtonActivated == true))
 800a268:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	f000 80e9 	beq.w	800a444 <timeCircuit_control_readInputDateTime+0x220>
 800a272:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800a276:	2b00      	cmp	r3, #0
 800a278:	f000 80e4 	beq.w	800a444 <timeCircuit_control_readInputDateTime+0x220>
  {
    pConfig->keypadInput[pConfig->keypadInputCount] = pConfig->keypadInputValue;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800a282:	4619      	mov	r1, r3
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	440b      	add	r3, r1
 800a28e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    pConfig->keypadInputCount++;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800a298:	3301      	adds	r3, #1
 800a29a:	b2da      	uxtb	r2, r3
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    switch(pConfig->keypadInputValue)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800a2a8:	2b09      	cmp	r3, #9
 800a2aa:	f200 80cb 	bhi.w	800a444 <timeCircuit_control_readInputDateTime+0x220>
 800a2ae:	a201      	add	r2, pc, #4	@ (adr r2, 800a2b4 <timeCircuit_control_readInputDateTime+0x90>)
 800a2b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b4:	0800a2dd 	.word	0x0800a2dd
 800a2b8:	0800a301 	.word	0x0800a301
 800a2bc:	0800a325 	.word	0x0800a325
 800a2c0:	0800a349 	.word	0x0800a349
 800a2c4:	0800a36d 	.word	0x0800a36d
 800a2c8:	0800a391 	.word	0x0800a391
 800a2cc:	0800a3b5 	.word	0x0800a3b5
 800a2d0:	0800a3d9 	.word	0x0800a3d9
 800a2d4:	0800a3fd 	.word	0x0800a3fd
 800a2d8:	0800a421 	.word	0x0800a421
    {
      case 0:
        char filename[] = "Dtmf-0.wav";
 800a2dc:	4a63      	ldr	r2, [pc, #396]	@ (800a46c <timeCircuit_control_readInputDateTime+0x248>)
 800a2de:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800a2e2:	ca07      	ldmia	r2, {r0, r1, r2}
 800a2e4:	c303      	stmia	r3!, {r0, r1}
 800a2e6:	801a      	strh	r2, [r3, #0]
 800a2e8:	3302      	adds	r3, #2
 800a2ea:	0c12      	lsrs	r2, r2, #16
 800a2ec:	701a      	strb	r2, [r3, #0]
        osMessageQueuePut(soundQueueHandle, &filename, 0, 0);
 800a2ee:	4b60      	ldr	r3, [pc, #384]	@ (800a470 <timeCircuit_control_readInputDateTime+0x24c>)
 800a2f0:	6818      	ldr	r0, [r3, #0]
 800a2f2:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f000 fe73 	bl	800afe4 <osMessageQueuePut>
        break;
 800a2fe:	e0a1      	b.n	800a444 <timeCircuit_control_readInputDateTime+0x220>
      case 1:
        char filename1[] = "Dtmf-1.wav";
 800a300:	4a5c      	ldr	r2, [pc, #368]	@ (800a474 <timeCircuit_control_readInputDateTime+0x250>)
 800a302:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800a306:	ca07      	ldmia	r2, {r0, r1, r2}
 800a308:	c303      	stmia	r3!, {r0, r1}
 800a30a:	801a      	strh	r2, [r3, #0]
 800a30c:	3302      	adds	r3, #2
 800a30e:	0c12      	lsrs	r2, r2, #16
 800a310:	701a      	strb	r2, [r3, #0]
        osMessageQueuePut(soundQueueHandle, &filename1, 0, 0);
 800a312:	4b57      	ldr	r3, [pc, #348]	@ (800a470 <timeCircuit_control_readInputDateTime+0x24c>)
 800a314:	6818      	ldr	r0, [r3, #0]
 800a316:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 800a31a:	2300      	movs	r3, #0
 800a31c:	2200      	movs	r2, #0
 800a31e:	f000 fe61 	bl	800afe4 <osMessageQueuePut>
        break;
 800a322:	e08f      	b.n	800a444 <timeCircuit_control_readInputDateTime+0x220>
      case 2:
        char filename2[] = "Dtmf-2.wav";
 800a324:	4a54      	ldr	r2, [pc, #336]	@ (800a478 <timeCircuit_control_readInputDateTime+0x254>)
 800a326:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800a32a:	ca07      	ldmia	r2, {r0, r1, r2}
 800a32c:	c303      	stmia	r3!, {r0, r1}
 800a32e:	801a      	strh	r2, [r3, #0]
 800a330:	3302      	adds	r3, #2
 800a332:	0c12      	lsrs	r2, r2, #16
 800a334:	701a      	strb	r2, [r3, #0]
        osMessageQueuePut(soundQueueHandle, &filename2, 0, 0);
 800a336:	4b4e      	ldr	r3, [pc, #312]	@ (800a470 <timeCircuit_control_readInputDateTime+0x24c>)
 800a338:	6818      	ldr	r0, [r3, #0]
 800a33a:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 800a33e:	2300      	movs	r3, #0
 800a340:	2200      	movs	r2, #0
 800a342:	f000 fe4f 	bl	800afe4 <osMessageQueuePut>
        break;
 800a346:	e07d      	b.n	800a444 <timeCircuit_control_readInputDateTime+0x220>
      case 3:
        char filename3[] = "Dtmf-3.wav";
 800a348:	4a4c      	ldr	r2, [pc, #304]	@ (800a47c <timeCircuit_control_readInputDateTime+0x258>)
 800a34a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800a34e:	ca07      	ldmia	r2, {r0, r1, r2}
 800a350:	c303      	stmia	r3!, {r0, r1}
 800a352:	801a      	strh	r2, [r3, #0]
 800a354:	3302      	adds	r3, #2
 800a356:	0c12      	lsrs	r2, r2, #16
 800a358:	701a      	strb	r2, [r3, #0]
        osMessageQueuePut(soundQueueHandle, &filename3, 0, 0);
 800a35a:	4b45      	ldr	r3, [pc, #276]	@ (800a470 <timeCircuit_control_readInputDateTime+0x24c>)
 800a35c:	6818      	ldr	r0, [r3, #0]
 800a35e:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 800a362:	2300      	movs	r3, #0
 800a364:	2200      	movs	r2, #0
 800a366:	f000 fe3d 	bl	800afe4 <osMessageQueuePut>
        break;
 800a36a:	e06b      	b.n	800a444 <timeCircuit_control_readInputDateTime+0x220>
      case 4:
        char filename4[] = "Dtmf-4.wav";
 800a36c:	4a44      	ldr	r2, [pc, #272]	@ (800a480 <timeCircuit_control_readInputDateTime+0x25c>)
 800a36e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800a372:	ca07      	ldmia	r2, {r0, r1, r2}
 800a374:	c303      	stmia	r3!, {r0, r1}
 800a376:	801a      	strh	r2, [r3, #0]
 800a378:	3302      	adds	r3, #2
 800a37a:	0c12      	lsrs	r2, r2, #16
 800a37c:	701a      	strb	r2, [r3, #0]
        osMessageQueuePut(soundQueueHandle, &filename4, 0, 0);
 800a37e:	4b3c      	ldr	r3, [pc, #240]	@ (800a470 <timeCircuit_control_readInputDateTime+0x24c>)
 800a380:	6818      	ldr	r0, [r3, #0]
 800a382:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800a386:	2300      	movs	r3, #0
 800a388:	2200      	movs	r2, #0
 800a38a:	f000 fe2b 	bl	800afe4 <osMessageQueuePut>
        break;
 800a38e:	e059      	b.n	800a444 <timeCircuit_control_readInputDateTime+0x220>
      case 5:
        char filename5[] = "Dtmf-5.wav";
 800a390:	4a3c      	ldr	r2, [pc, #240]	@ (800a484 <timeCircuit_control_readInputDateTime+0x260>)
 800a392:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800a396:	ca07      	ldmia	r2, {r0, r1, r2}
 800a398:	c303      	stmia	r3!, {r0, r1}
 800a39a:	801a      	strh	r2, [r3, #0]
 800a39c:	3302      	adds	r3, #2
 800a39e:	0c12      	lsrs	r2, r2, #16
 800a3a0:	701a      	strb	r2, [r3, #0]
        osMessageQueuePut(soundQueueHandle, &filename5, 0, 0);
 800a3a2:	4b33      	ldr	r3, [pc, #204]	@ (800a470 <timeCircuit_control_readInputDateTime+0x24c>)
 800a3a4:	6818      	ldr	r0, [r3, #0]
 800a3a6:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	f000 fe19 	bl	800afe4 <osMessageQueuePut>
        break;
 800a3b2:	e047      	b.n	800a444 <timeCircuit_control_readInputDateTime+0x220>
      case 6:
        char filename6[] = "Dtmf-6.wav";
 800a3b4:	4a34      	ldr	r2, [pc, #208]	@ (800a488 <timeCircuit_control_readInputDateTime+0x264>)
 800a3b6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a3ba:	ca07      	ldmia	r2, {r0, r1, r2}
 800a3bc:	c303      	stmia	r3!, {r0, r1}
 800a3be:	801a      	strh	r2, [r3, #0]
 800a3c0:	3302      	adds	r3, #2
 800a3c2:	0c12      	lsrs	r2, r2, #16
 800a3c4:	701a      	strb	r2, [r3, #0]
        osMessageQueuePut(soundQueueHandle, &filename6, 0, 0);
 800a3c6:	4b2a      	ldr	r3, [pc, #168]	@ (800a470 <timeCircuit_control_readInputDateTime+0x24c>)
 800a3c8:	6818      	ldr	r0, [r3, #0]
 800a3ca:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	f000 fe07 	bl	800afe4 <osMessageQueuePut>
        break;
 800a3d6:	e035      	b.n	800a444 <timeCircuit_control_readInputDateTime+0x220>
      case 7:
        char filename7[] = "Dtmf-7.wav";
 800a3d8:	4a2c      	ldr	r2, [pc, #176]	@ (800a48c <timeCircuit_control_readInputDateTime+0x268>)
 800a3da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a3de:	ca07      	ldmia	r2, {r0, r1, r2}
 800a3e0:	c303      	stmia	r3!, {r0, r1}
 800a3e2:	801a      	strh	r2, [r3, #0]
 800a3e4:	3302      	adds	r3, #2
 800a3e6:	0c12      	lsrs	r2, r2, #16
 800a3e8:	701a      	strb	r2, [r3, #0]
        osMessageQueuePut(soundQueueHandle, &filename7, 0, 0);
 800a3ea:	4b21      	ldr	r3, [pc, #132]	@ (800a470 <timeCircuit_control_readInputDateTime+0x24c>)
 800a3ec:	6818      	ldr	r0, [r3, #0]
 800a3ee:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	f000 fdf5 	bl	800afe4 <osMessageQueuePut>
        break;
 800a3fa:	e023      	b.n	800a444 <timeCircuit_control_readInputDateTime+0x220>
      case 8:
        char filename8[] = "Dtmf-8.wav";
 800a3fc:	4a24      	ldr	r2, [pc, #144]	@ (800a490 <timeCircuit_control_readInputDateTime+0x26c>)
 800a3fe:	f107 0318 	add.w	r3, r7, #24
 800a402:	ca07      	ldmia	r2, {r0, r1, r2}
 800a404:	c303      	stmia	r3!, {r0, r1}
 800a406:	801a      	strh	r2, [r3, #0]
 800a408:	3302      	adds	r3, #2
 800a40a:	0c12      	lsrs	r2, r2, #16
 800a40c:	701a      	strb	r2, [r3, #0]
        osMessageQueuePut(soundQueueHandle, &filename8, 0, 0);
 800a40e:	4b18      	ldr	r3, [pc, #96]	@ (800a470 <timeCircuit_control_readInputDateTime+0x24c>)
 800a410:	6818      	ldr	r0, [r3, #0]
 800a412:	f107 0118 	add.w	r1, r7, #24
 800a416:	2300      	movs	r3, #0
 800a418:	2200      	movs	r2, #0
 800a41a:	f000 fde3 	bl	800afe4 <osMessageQueuePut>
        break;
 800a41e:	e011      	b.n	800a444 <timeCircuit_control_readInputDateTime+0x220>
      case 9:
        char filename9[] = "Dtmf-9.wav";
 800a420:	4a1c      	ldr	r2, [pc, #112]	@ (800a494 <timeCircuit_control_readInputDateTime+0x270>)
 800a422:	f107 030c 	add.w	r3, r7, #12
 800a426:	ca07      	ldmia	r2, {r0, r1, r2}
 800a428:	c303      	stmia	r3!, {r0, r1}
 800a42a:	801a      	strh	r2, [r3, #0]
 800a42c:	3302      	adds	r3, #2
 800a42e:	0c12      	lsrs	r2, r2, #16
 800a430:	701a      	strb	r2, [r3, #0]
        osMessageQueuePut(soundQueueHandle, &filename9, 0, 0);
 800a432:	4b0f      	ldr	r3, [pc, #60]	@ (800a470 <timeCircuit_control_readInputDateTime+0x24c>)
 800a434:	6818      	ldr	r0, [r3, #0]
 800a436:	f107 010c 	add.w	r1, r7, #12
 800a43a:	2300      	movs	r3, #0
 800a43c:	2200      	movs	r2, #0
 800a43e:	f000 fdd1 	bl	800afe4 <osMessageQueuePut>
        break;
 800a442:	bf00      	nop

    }
  }

  if (pConfig->keypadInputCount >= 12)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800a44a:	2b0b      	cmp	r3, #11
 800a44c:	d903      	bls.n	800a456 <timeCircuit_control_readInputDateTime+0x232>
  {
    pConfig->keypadInputCount = 0;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2200      	movs	r2, #0
 800a452:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
  }

  return isSuccess;
 800a456:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3788      	adds	r7, #136	@ 0x88
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
 800a462:	bf00      	nop
 800a464:	20000420 	.word	0x20000420
 800a468:	2000041c 	.word	0x2000041c
 800a46c:	0800eeb4 	.word	0x0800eeb4
 800a470:	20000110 	.word	0x20000110
 800a474:	0800eec0 	.word	0x0800eec0
 800a478:	0800eecc 	.word	0x0800eecc
 800a47c:	0800eed8 	.word	0x0800eed8
 800a480:	0800eee4 	.word	0x0800eee4
 800a484:	0800eef0 	.word	0x0800eef0
 800a488:	0800eefc 	.word	0x0800eefc
 800a48c:	0800ef08 	.word	0x0800ef08
 800a490:	0800ef14 	.word	0x0800ef14
 800a494:	0800ef20 	.word	0x0800ef20

0800a498 <timeCircuit_control_getRtcDateTime>:
}


#elif defined(SET_EXTERNAL_RTC)
TimeCircuit_Control_Status_t timeCircuit_control_getRtcDateTime(TimeCircuit_Control_Config_t * const pConfig)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = 1;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	73fb      	strb	r3, [r7, #15]

  //Retrieve RTC Date Time Data
  isSuccess &= DS3231_GetDateTime(pConfig->hi2c_rtc,
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6858      	ldr	r0, [r3, #4]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	3338      	adds	r3, #56	@ 0x38
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	f7fe fbae 	bl	8008c14 <DS3231_GetDateTime>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	7bfb      	ldrb	r3, [r7, #15]
 800a4be:	4013      	ands	r3, r2
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	bf14      	ite	ne
 800a4c4:	2301      	movne	r3, #1
 800a4c6:	2300      	moveq	r3, #0
 800a4c8:	73fb      	strb	r3, [r7, #15]
//
//  pConfig->hRtcDate.Date    = DS3231_GetDate();
//  pConfig->hRtcDate.Month   = DS3231_GetMonth();
//  pConfig->hRtcDate.Year    = DS3231_GetYear();

  return isSuccess;
 800a4ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3710      	adds	r7, #16
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <timeCircuit_control_setRtcDateTime>:

TimeCircuit_Control_Status_t timeCircuit_control_setRtcDateTime(TimeCircuit_Control_Config_t * const pConfig)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = 1;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	73fb      	strb	r3, [r7, #15]

  //Retrieve default RTC date time data
  isSuccess &= timeCircuit_control_getRtcDateTime(pConfig);
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f7ff ffd9 	bl	800a498 <timeCircuit_control_getRtcDateTime>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	7bfb      	ldrb	r3, [r7, #15]
 800a4ec:	4013      	ands	r3, r2
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	bf14      	ite	ne
 800a4f2:	2301      	movne	r3, #1
 800a4f4:	2300      	moveq	r3, #0
 800a4f6:	73fb      	strb	r3, [r7, #15]

  //Get present date time for RTC date time
  isSuccess &= dateTime_getRtcDateTimeData(pConfig->pPresentTime, &pConfig->hRtcDate, &pConfig->hRtcTime);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6998      	ldr	r0, [r3, #24]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	3324      	adds	r3, #36	@ 0x24
 800a506:	461a      	mov	r2, r3
 800a508:	f7fe ffa3 	bl	8009452 <dateTime_getRtcDateTimeData>
 800a50c:	4603      	mov	r3, r0
 800a50e:	461a      	mov	r2, r3
 800a510:	7bfb      	ldrb	r3, [r7, #15]
 800a512:	4013      	ands	r3, r2
 800a514:	2b00      	cmp	r3, #0
 800a516:	bf14      	ite	ne
 800a518:	2301      	movne	r3, #1
 800a51a:	2300      	moveq	r3, #0
 800a51c:	73fb      	strb	r3, [r7, #15]

  //Set RTC with present date time data
  isSuccess &= DS3231_SetDateTime(pConfig->hi2c_rtc,
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6858      	ldr	r0, [r3, #4]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	3338      	adds	r3, #56	@ 0x38
 800a52c:	461a      	mov	r2, r3
 800a52e:	f7fe fb09 	bl	8008b44 <DS3231_SetDateTime>
 800a532:	4603      	mov	r3, r0
 800a534:	461a      	mov	r2, r3
 800a536:	7bfb      	ldrb	r3, [r7, #15]
 800a538:	4013      	ands	r3, r2
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	bf14      	ite	ne
 800a53e:	2301      	movne	r3, #1
 800a540:	2300      	moveq	r3, #0
 800a542:	73fb      	strb	r3, [r7, #15]
//  DS3231_SetFullDate(pConfig->hRtcDate.Date,
//                         pConfig->hRtcDate.Month,
//                         1,
//                         0);

  return isSuccess;
 800a544:	7bfb      	ldrb	r3, [r7, #15]
}
 800a546:	4618      	mov	r0, r3
 800a548:	3710      	adds	r7, #16
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}

0800a54e <timeCircuit_control_getRTCMinute>:

TimeCircuit_Control_Status_t timeCircuit_control_getRTCMinute(TimeCircuit_Control_Config_t * const pConfig,
    uint8_t * currentMinutes)
{
 800a54e:	b580      	push	{r7, lr}
 800a550:	b084      	sub	sp, #16
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
 800a556:	6039      	str	r1, [r7, #0]
  TimeCircuit_Control_Status_t isSuccess = 1;
 800a558:	2301      	movs	r3, #1
 800a55a:	73fb      	strb	r3, [r7, #15]

  isSuccess &= DS3231_GetDateTime(pConfig->hi2c_rtc,
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6858      	ldr	r0, [r3, #4]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	3338      	adds	r3, #56	@ 0x38
 800a56a:	461a      	mov	r2, r3
 800a56c:	f7fe fb52 	bl	8008c14 <DS3231_GetDateTime>
 800a570:	4603      	mov	r3, r0
 800a572:	461a      	mov	r2, r3
 800a574:	7bfb      	ldrb	r3, [r7, #15]
 800a576:	4013      	ands	r3, r2
 800a578:	2b00      	cmp	r3, #0
 800a57a:	bf14      	ite	ne
 800a57c:	2301      	movne	r3, #1
 800a57e:	2300      	moveq	r3, #0
 800a580:	73fb      	strb	r3, [r7, #15]
                                       &pConfig->hRtcTime,
                                       &pConfig->hRtcDate);

  *currentMinutes = pConfig->hRtcTime.Minutes;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	701a      	strb	r2, [r3, #0]

  //*currentMinutes = DS3231_GetMinute();

  return isSuccess;
 800a58c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3710      	adds	r7, #16
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}

0800a596 <timeCircuit_control_saveDateTimes>:
#endif



TimeCircuit_Control_Status_t timeCircuit_control_saveDateTimes(TimeCircuit_Control_Config_t * const pConfig)
{
 800a596:	b580      	push	{r7, lr}
 800a598:	b090      	sub	sp, #64	@ 0x40
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = false;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

  char    writeBuf[(MAXIMUM_DATETIME_INPUT_CHARS * 3) + 1];
  uint8_t bufferCount = 0;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	75fb      	strb	r3, [r7, #23]
  DateTime_Display_Config_t* pDateTimeDisplays[] = {pConfig->pDestinationTime, pConfig->pPresentTime, pConfig->pLastDepartedTime};
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	695b      	ldr	r3, [r3, #20]
 800a5ac:	60bb      	str	r3, [r7, #8]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	699b      	ldr	r3, [r3, #24]
 800a5b2:	60fb      	str	r3, [r7, #12]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	69db      	ldr	r3, [r3, #28]
 800a5b8:	613b      	str	r3, [r7, #16]

    //Prepare buffer with datetimes
  for (uint8_t displayCount = 0; displayCount < 3; displayCount++)
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800a5c0:	e012      	b.n	800a5e8 <timeCircuit_control_saveDateTimes+0x52>
  {
    dateTime_convertDateTimeToChar(pDateTimeDisplays[displayCount], writeBuf, sizeof(writeBuf), &bufferCount);
 800a5c2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a5c6:	009b      	lsls	r3, r3, #2
 800a5c8:	3340      	adds	r3, #64	@ 0x40
 800a5ca:	443b      	add	r3, r7
 800a5cc:	f853 0c38 	ldr.w	r0, [r3, #-56]
 800a5d0:	f107 0317 	add.w	r3, r7, #23
 800a5d4:	f107 0118 	add.w	r1, r7, #24
 800a5d8:	2225      	movs	r2, #37	@ 0x25
 800a5da:	f7ff fa19 	bl	8009a10 <dateTime_convertDateTimeToChar>
  for (uint8_t displayCount = 0; displayCount < 3; displayCount++)
 800a5de:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a5e2:	3301      	adds	r3, #1
 800a5e4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800a5e8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a5ec:	2b02      	cmp	r3, #2
 800a5ee:	d9e8      	bls.n	800a5c2 <timeCircuit_control_saveDateTimes+0x2c>
  }

  //Write datetime data to SD card
  // isSuccess = storageDevice_writeFile(pConfig->pStorageDeviceConfig, writeBuf, sizeof(writeBuf), gStoredDateTimeFileName);

  return isSuccess;
 800a5f0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3740      	adds	r7, #64	@ 0x40
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <timeCircuit_control_updatePresentDateTime>:

  return isSuccess;
}

TimeCircuit_Control_Status_t timeCircuit_control_updatePresentDateTime(TimeCircuit_Control_Config_t * const pConfig)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b084      	sub	sp, #16
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = 1;
 800a604:	2301      	movs	r3, #1
 800a606:	73fb      	strb	r3, [r7, #15]
  static uint8_t previousMinute = 0;
  uint8_t currentMinute = 0;
 800a608:	2300      	movs	r3, #0
 800a60a:	73bb      	strb	r3, [r7, #14]

  isSuccess &=  timeCircuit_control_getRTCMinute(pConfig, &currentMinute);
 800a60c:	f107 030e 	add.w	r3, r7, #14
 800a610:	4619      	mov	r1, r3
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f7ff ff9b 	bl	800a54e <timeCircuit_control_getRTCMinute>
 800a618:	4603      	mov	r3, r0
 800a61a:	461a      	mov	r2, r3
 800a61c:	7bfb      	ldrb	r3, [r7, #15]
 800a61e:	4013      	ands	r3, r2
 800a620:	2b00      	cmp	r3, #0
 800a622:	bf14      	ite	ne
 800a624:	2301      	movne	r3, #1
 800a626:	2300      	moveq	r3, #0
 800a628:	73fb      	strb	r3, [r7, #15]

  if (currentMinute != previousMinute)
 800a62a:	7bba      	ldrb	r2, [r7, #14]
 800a62c:	4b23      	ldr	r3, [pc, #140]	@ (800a6bc <timeCircuit_control_updatePresentDateTime+0xc0>)
 800a62e:	781b      	ldrb	r3, [r3, #0]
 800a630:	429a      	cmp	r2, r3
 800a632:	d03d      	beq.n	800a6b0 <timeCircuit_control_updatePresentDateTime+0xb4>
  {
    //Retrieve RTC date time data
    isSuccess &= timeCircuit_control_getRtcDateTime(pConfig);
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f7ff ff2f 	bl	800a498 <timeCircuit_control_getRtcDateTime>
 800a63a:	4603      	mov	r3, r0
 800a63c:	461a      	mov	r2, r3
 800a63e:	7bfb      	ldrb	r3, [r7, #15]
 800a640:	4013      	ands	r3, r2
 800a642:	2b00      	cmp	r3, #0
 800a644:	bf14      	ite	ne
 800a646:	2301      	movne	r3, #1
 800a648:	2300      	moveq	r3, #0
 800a64a:	73fb      	strb	r3, [r7, #15]

    //Set present date time to RTC date time
    isSuccess &= dateTime_setRtcDateTimeData(pConfig->pPresentTime, &pConfig->hRtcDate, &pConfig->hRtcTime);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6998      	ldr	r0, [r3, #24]
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	3324      	adds	r3, #36	@ 0x24
 800a65a:	461a      	mov	r2, r3
 800a65c:	f7fe ff2b 	bl	80094b6 <dateTime_setRtcDateTimeData>
 800a660:	4603      	mov	r3, r0
 800a662:	461a      	mov	r2, r3
 800a664:	7bfb      	ldrb	r3, [r7, #15]
 800a666:	4013      	ands	r3, r2
 800a668:	2b00      	cmp	r3, #0
 800a66a:	bf14      	ite	ne
 800a66c:	2301      	movne	r3, #1
 800a66e:	2300      	moveq	r3, #0
 800a670:	73fb      	strb	r3, [r7, #15]

    //Update present display
    isSuccess &= dateTime_updateDisplay(pConfig->pPresentTime);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	699b      	ldr	r3, [r3, #24]
 800a676:	4618      	mov	r0, r3
 800a678:	f7ff fa70 	bl	8009b5c <dateTime_updateDisplay>
 800a67c:	4603      	mov	r3, r0
 800a67e:	461a      	mov	r2, r3
 800a680:	7bfb      	ldrb	r3, [r7, #15]
 800a682:	4013      	ands	r3, r2
 800a684:	2b00      	cmp	r3, #0
 800a686:	bf14      	ite	ne
 800a688:	2301      	movne	r3, #1
 800a68a:	2300      	moveq	r3, #0
 800a68c:	73fb      	strb	r3, [r7, #15]

    //Store new date time
    isSuccess &= timeCircuit_control_saveDateTimes(pConfig);
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f7ff ff81 	bl	800a596 <timeCircuit_control_saveDateTimes>
 800a694:	4603      	mov	r3, r0
 800a696:	461a      	mov	r2, r3
 800a698:	7bfb      	ldrb	r3, [r7, #15]
 800a69a:	4013      	ands	r3, r2
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	bf14      	ite	ne
 800a6a0:	2301      	movne	r3, #1
 800a6a2:	2300      	moveq	r3, #0
 800a6a4:	73fb      	strb	r3, [r7, #15]

    previousMinute = pConfig->hRtcTime.Minutes;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800a6ac:	4b03      	ldr	r3, [pc, #12]	@ (800a6bc <timeCircuit_control_updatePresentDateTime+0xc0>)
 800a6ae:	701a      	strb	r2, [r3, #0]
  }

  return isSuccess;
 800a6b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3710      	adds	r7, #16
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}
 800a6ba:	bf00      	nop
 800a6bc:	20000424 	.word	0x20000424

0800a6c0 <timeCircuit_control_updateTimeTravelDateTimes>:

TimeCircuit_Control_Status_t timeCircuit_control_updateTimeTravelDateTimes(TimeCircuit_Control_Config_t* const pConfig)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b086      	sub	sp, #24
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess  = true;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	75fb      	strb	r3, [r7, #23]
  bool isButtonActivated                  = false;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	757b      	strb	r3, [r7, #21]
  bool hasButtonStateChanged              = false;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	75bb      	strb	r3, [r7, #22]

  static bool hasButtonActivated          = false;
  static uint32_t previousTime            = 0;

  isButtonActivated  = HAL_GPIO_ReadPin(TIME_TRAVEL_SWITCH_GPIO_PORT, TIME_TRAVEL_SWITCH_PIN);
 800a6d4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a6d8:	4843      	ldr	r0, [pc, #268]	@ (800a7e8 <timeCircuit_control_updateTimeTravelDateTimes+0x128>)
 800a6da:	f7f8 f959 	bl	8002990 <HAL_GPIO_ReadPin>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	bf14      	ite	ne
 800a6e4:	2301      	movne	r3, #1
 800a6e6:	2300      	moveq	r3, #0
 800a6e8:	b2db      	uxtb	r3, r3
 800a6ea:	757b      	strb	r3, [r7, #21]
  hasButtonStateChanged = timeCircuit_control_checkButtonActivation(&isButtonActivated, &hasButtonActivated,
 800a6ec:	f107 0015 	add.w	r0, r7, #21
 800a6f0:	2364      	movs	r3, #100	@ 0x64
 800a6f2:	4a3e      	ldr	r2, [pc, #248]	@ (800a7ec <timeCircuit_control_updateTimeTravelDateTimes+0x12c>)
 800a6f4:	493e      	ldr	r1, [pc, #248]	@ (800a7f0 <timeCircuit_control_updateTimeTravelDateTimes+0x130>)
 800a6f6:	f7ff fd6d 	bl	800a1d4 <timeCircuit_control_checkButtonActivation>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	75bb      	strb	r3, [r7, #22]
        &previousTime, TIME_TRAVEL_SWITCH_DEBOUNCE_TIME_MS);

  if (hasButtonStateChanged == true)
 800a6fe:	7dbb      	ldrb	r3, [r7, #22]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d06c      	beq.n	800a7de <timeCircuit_control_updateTimeTravelDateTimes+0x11e>
  {
    if (isButtonActivated != true )
 800a704:	7d7b      	ldrb	r3, [r7, #21]
 800a706:	f083 0301 	eor.w	r3, r3, #1
 800a70a:	b2db      	uxtb	r3, r3
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d066      	beq.n	800a7de <timeCircuit_control_updateTimeTravelDateTimes+0x11e>
    {
      //Clear displays
      isSuccess &= timeCircuit_control_clearDisplays(pConfig);
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f7ff fcbd 	bl	800a090 <timeCircuit_control_clearDisplays>
 800a716:	4603      	mov	r3, r0
 800a718:	461a      	mov	r2, r3
 800a71a:	7dfb      	ldrb	r3, [r7, #23]
 800a71c:	4013      	ands	r3, r2
 800a71e:	2b00      	cmp	r3, #0
 800a720:	bf14      	ite	ne
 800a722:	2301      	movne	r3, #1
 800a724:	2300      	moveq	r3, #0
 800a726:	75fb      	strb	r3, [r7, #23]

      //Play Sound
      char filename9[] = "locked.wav";
 800a728:	4a32      	ldr	r2, [pc, #200]	@ (800a7f4 <timeCircuit_control_updateTimeTravelDateTimes+0x134>)
 800a72a:	f107 0308 	add.w	r3, r7, #8
 800a72e:	ca07      	ldmia	r2, {r0, r1, r2}
 800a730:	c303      	stmia	r3!, {r0, r1}
 800a732:	801a      	strh	r2, [r3, #0]
 800a734:	3302      	adds	r3, #2
 800a736:	0c12      	lsrs	r2, r2, #16
 800a738:	701a      	strb	r2, [r3, #0]
      osMessageQueuePut(soundQueueHandle, &filename9, 0, 0);
 800a73a:	4b2f      	ldr	r3, [pc, #188]	@ (800a7f8 <timeCircuit_control_updateTimeTravelDateTimes+0x138>)
 800a73c:	6818      	ldr	r0, [r3, #0]
 800a73e:	f107 0108 	add.w	r1, r7, #8
 800a742:	2300      	movs	r3, #0
 800a744:	2200      	movs	r2, #0
 800a746:	f000 fc4d 	bl	800afe4 <osMessageQueuePut>

      //Delay Display Update
      HAL_Delay(DISPLAY_DELAY_MS);
 800a74a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800a74e:	f7f7 f835 	bl	80017bc <HAL_Delay>

      //Copy last time departed time data to present time
      isSuccess &= dateTime_copyDateTime(pConfig->pLastDepartedTime, pConfig->pPresentTime);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	69da      	ldr	r2, [r3, #28]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	699b      	ldr	r3, [r3, #24]
 800a75a:	4619      	mov	r1, r3
 800a75c:	4610      	mov	r0, r2
 800a75e:	f7fe fed7 	bl	8009510 <dateTime_copyDateTime>
 800a762:	4603      	mov	r3, r0
 800a764:	461a      	mov	r2, r3
 800a766:	7dfb      	ldrb	r3, [r7, #23]
 800a768:	4013      	ands	r3, r2
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	bf14      	ite	ne
 800a76e:	2301      	movne	r3, #1
 800a770:	2300      	moveq	r3, #0
 800a772:	75fb      	strb	r3, [r7, #23]

      //Copy present time data to destination time
      isSuccess &= dateTime_copyDateTime(pConfig->pPresentTime, pConfig->pDestinationTime);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	699a      	ldr	r2, [r3, #24]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	695b      	ldr	r3, [r3, #20]
 800a77c:	4619      	mov	r1, r3
 800a77e:	4610      	mov	r0, r2
 800a780:	f7fe fec6 	bl	8009510 <dateTime_copyDateTime>
 800a784:	4603      	mov	r3, r0
 800a786:	461a      	mov	r2, r3
 800a788:	7dfb      	ldrb	r3, [r7, #23]
 800a78a:	4013      	ands	r3, r2
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	bf14      	ite	ne
 800a790:	2301      	movne	r3, #1
 800a792:	2300      	moveq	r3, #0
 800a794:	75fb      	strb	r3, [r7, #23]

      //Update displays with new date times
      isSuccess &= timeCircuit_control_updateDisplays(pConfig);
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f7ff fcee 	bl	800a178 <timeCircuit_control_updateDisplays>
 800a79c:	4603      	mov	r3, r0
 800a79e:	461a      	mov	r2, r3
 800a7a0:	7dfb      	ldrb	r3, [r7, #23]
 800a7a2:	4013      	ands	r3, r2
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	bf14      	ite	ne
 800a7a8:	2301      	movne	r3, #1
 800a7aa:	2300      	moveq	r3, #0
 800a7ac:	75fb      	strb	r3, [r7, #23]

      //Set the RTC with new present time
      isSuccess &= timeCircuit_control_setRtcDateTime(pConfig);
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f7ff fe90 	bl	800a4d4 <timeCircuit_control_setRtcDateTime>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	7dfb      	ldrb	r3, [r7, #23]
 800a7ba:	4013      	ands	r3, r2
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	bf14      	ite	ne
 800a7c0:	2301      	movne	r3, #1
 800a7c2:	2300      	moveq	r3, #0
 800a7c4:	75fb      	strb	r3, [r7, #23]

      //Store new date time
      isSuccess &= timeCircuit_control_saveDateTimes(pConfig);
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f7ff fee5 	bl	800a596 <timeCircuit_control_saveDateTimes>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	461a      	mov	r2, r3
 800a7d0:	7dfb      	ldrb	r3, [r7, #23]
 800a7d2:	4013      	ands	r3, r2
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	bf14      	ite	ne
 800a7d8:	2301      	movne	r3, #1
 800a7da:	2300      	moveq	r3, #0
 800a7dc:	75fb      	strb	r3, [r7, #23]
    }
  }
  return isSuccess;
 800a7de:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3718      	adds	r7, #24
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}
 800a7e8:	40020800 	.word	0x40020800
 800a7ec:	20000428 	.word	0x20000428
 800a7f0:	20000425 	.word	0x20000425
 800a7f4:	0800ef2c 	.word	0x0800ef2c
 800a7f8:	20000110 	.word	0x20000110

0800a7fc <timeCircuit_control_updateDestinationDateTime>:

TimeCircuit_Control_Status_t timeCircuit_control_updateDestinationDateTime(TimeCircuit_Control_Config_t* const pConfig)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b086      	sub	sp, #24
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess  = true;
 800a804:	2301      	movs	r3, #1
 800a806:	75fb      	strb	r3, [r7, #23]
  bool isButtonActivated                  = false;
 800a808:	2300      	movs	r3, #0
 800a80a:	757b      	strb	r3, [r7, #21]
  bool hasButtonStateChanged              = false;
 800a80c:	2300      	movs	r3, #0
 800a80e:	75bb      	strb	r3, [r7, #22]

  static bool hasButtonActivated          = false;
  static uint32_t previousTime            = 0;

  isButtonActivated  = !HAL_GPIO_ReadPin(KEYPAD_ENTER_SWITCH_GPIO_PORT, KEYPAD_ENTER_SWITCH_PIN);
 800a810:	2102      	movs	r1, #2
 800a812:	4839      	ldr	r0, [pc, #228]	@ (800a8f8 <timeCircuit_control_updateDestinationDateTime+0xfc>)
 800a814:	f7f8 f8bc 	bl	8002990 <HAL_GPIO_ReadPin>
 800a818:	4603      	mov	r3, r0
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	bf0c      	ite	eq
 800a81e:	2301      	moveq	r3, #1
 800a820:	2300      	movne	r3, #0
 800a822:	b2db      	uxtb	r3, r3
 800a824:	757b      	strb	r3, [r7, #21]
  hasButtonStateChanged = timeCircuit_control_checkButtonActivation(&isButtonActivated, &hasButtonActivated,
 800a826:	f107 0015 	add.w	r0, r7, #21
 800a82a:	2332      	movs	r3, #50	@ 0x32
 800a82c:	4a33      	ldr	r2, [pc, #204]	@ (800a8fc <timeCircuit_control_updateDestinationDateTime+0x100>)
 800a82e:	4934      	ldr	r1, [pc, #208]	@ (800a900 <timeCircuit_control_updateDestinationDateTime+0x104>)
 800a830:	f7ff fcd0 	bl	800a1d4 <timeCircuit_control_checkButtonActivation>
 800a834:	4603      	mov	r3, r0
 800a836:	75bb      	strb	r3, [r7, #22]
      &previousTime, ENTER_SWITCH_DEBOUNCE_TIME_MS);

  if (hasButtonStateChanged == true)
 800a838:	7dbb      	ldrb	r3, [r7, #22]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d056      	beq.n	800a8ec <timeCircuit_control_updateDestinationDateTime+0xf0>
  {
    if (isButtonActivated == true )
 800a83e:	7d7b      	ldrb	r3, [r7, #21]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d04e      	beq.n	800a8e2 <timeCircuit_control_updateDestinationDateTime+0xe6>
    {
      //Activate Keypad White Indicator
      HAL_GPIO_WritePin(KEYPAD_WHITE_INDICATOR_GPIO_PORT, KEYPAD_WHITE_INDICATOR_PIN, GPIO_PIN_SET);
 800a844:	2201      	movs	r2, #1
 800a846:	2108      	movs	r1, #8
 800a848:	482e      	ldr	r0, [pc, #184]	@ (800a904 <timeCircuit_control_updateDestinationDateTime+0x108>)
 800a84a:	f7f8 f8b9 	bl	80029c0 <HAL_GPIO_WritePin>
      //Clear destination date time
      isSuccess &= dateTime_clearDisplay(pConfig->pDestinationTime);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	695b      	ldr	r3, [r3, #20]
 800a852:	4618      	mov	r0, r3
 800a854:	f7fe fe71 	bl	800953a <dateTime_clearDisplay>
 800a858:	4603      	mov	r3, r0
 800a85a:	461a      	mov	r2, r3
 800a85c:	7dfb      	ldrb	r3, [r7, #23]
 800a85e:	4013      	ands	r3, r2
 800a860:	2b00      	cmp	r3, #0
 800a862:	bf14      	ite	ne
 800a864:	2301      	movne	r3, #1
 800a866:	2300      	moveq	r3, #0
 800a868:	75fb      	strb	r3, [r7, #23]
      //Update date time if a valid entry has submitted
      if (dateTime_setDisplayData(pConfig->pDestinationTime,pConfig->keypadInput))
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	695a      	ldr	r2, [r3, #20]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	333c      	adds	r3, #60	@ 0x3c
 800a872:	4619      	mov	r1, r3
 800a874:	4610      	mov	r0, r2
 800a876:	f7fe fd9f 	bl	80093b8 <dateTime_setDisplayData>
 800a87a:	4603      	mov	r3, r0
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d01f      	beq.n	800a8c0 <timeCircuit_control_updateDestinationDateTime+0xc4>
      {
        //Play sound
        char filename[] = "enter.wav";
 800a880:	4a21      	ldr	r2, [pc, #132]	@ (800a908 <timeCircuit_control_updateDestinationDateTime+0x10c>)
 800a882:	f107 0308 	add.w	r3, r7, #8
 800a886:	ca07      	ldmia	r2, {r0, r1, r2}
 800a888:	c303      	stmia	r3!, {r0, r1}
 800a88a:	801a      	strh	r2, [r3, #0]
        osMessageQueuePut(soundQueueHandle, &filename, 0, 0);
 800a88c:	4b1f      	ldr	r3, [pc, #124]	@ (800a90c <timeCircuit_control_updateDestinationDateTime+0x110>)
 800a88e:	6818      	ldr	r0, [r3, #0]
 800a890:	f107 0108 	add.w	r1, r7, #8
 800a894:	2300      	movs	r3, #0
 800a896:	2200      	movs	r2, #0
 800a898:	f000 fba4 	bl	800afe4 <osMessageQueuePut>

        //Delay Display Update
        HAL_Delay(DISPLAY_DELAY_MS);
 800a89c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800a8a0:	f7f6 ff8c 	bl	80017bc <HAL_Delay>
        isSuccess &= dateTime_updateDisplay(pConfig->pDestinationTime);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	695b      	ldr	r3, [r3, #20]
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f7ff f957 	bl	8009b5c <dateTime_updateDisplay>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	461a      	mov	r2, r3
 800a8b2:	7dfb      	ldrb	r3, [r7, #23]
 800a8b4:	4013      	ands	r3, r2
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	bf14      	ite	ne
 800a8ba:	2301      	movne	r3, #1
 800a8bc:	2300      	moveq	r3, #0
 800a8be:	75fb      	strb	r3, [r7, #23]
      }
      pConfig->keypadInputCount = 0;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

      //Save new date times
      isSuccess &= timeCircuit_control_saveDateTimes(pConfig);
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f7ff fe64 	bl	800a596 <timeCircuit_control_saveDateTimes>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	7dfb      	ldrb	r3, [r7, #23]
 800a8d4:	4013      	ands	r3, r2
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	bf14      	ite	ne
 800a8da:	2301      	movne	r3, #1
 800a8dc:	2300      	moveq	r3, #0
 800a8de:	75fb      	strb	r3, [r7, #23]
 800a8e0:	e004      	b.n	800a8ec <timeCircuit_control_updateDestinationDateTime+0xf0>
    }
    else
    {
      //Deactivate Keypad White Indicator
      HAL_GPIO_WritePin(KEYPAD_WHITE_INDICATOR_GPIO_PORT, KEYPAD_WHITE_INDICATOR_PIN, GPIO_PIN_RESET);
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	2108      	movs	r1, #8
 800a8e6:	4807      	ldr	r0, [pc, #28]	@ (800a904 <timeCircuit_control_updateDestinationDateTime+0x108>)
 800a8e8:	f7f8 f86a 	bl	80029c0 <HAL_GPIO_WritePin>
    }

  }
  return isSuccess;
 800a8ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3718      	adds	r7, #24
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
 800a8f6:	bf00      	nop
 800a8f8:	40020400 	.word	0x40020400
 800a8fc:	20000430 	.word	0x20000430
 800a900:	2000042c 	.word	0x2000042c
 800a904:	40020000 	.word	0x40020000
 800a908:	0800ef38 	.word	0x0800ef38
 800a90c:	20000110 	.word	0x20000110

0800a910 <timeCircuit_control_updateGlitch>:

TimeCircuit_Control_Status_t timeCircuit_control_updateGlitch(TimeCircuit_Control_Config_t* const pConfig)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess  = true;
 800a918:	2301      	movs	r3, #1
 800a91a:	73fb      	strb	r3, [r7, #15]
  static uint32_t previousTime            = 0;
  static uint32_t randomFaultTime         = 0;
  static uint8_t  stateCount              = 0;

  bool bIsButtonActivated                 = false;
 800a91c:	2300      	movs	r3, #0
 800a91e:	737b      	strb	r3, [r7, #13]
  bool bHasButtonStateChanged              = false;
 800a920:	2300      	movs	r3, #0
 800a922:	73bb      	strb	r3, [r7, #14]

  static bool hasButtonActivated          = false;
  static uint32_t previousTimeMS          = 0;
  static uint32_t previousFaultTime       = 0;

  bIsButtonActivated  = !HAL_GPIO_ReadPin(GLITCH_SWITCH_GPIO_PORT, GLITCH_SWITCH_PIN);
 800a924:	2120      	movs	r1, #32
 800a926:	4882      	ldr	r0, [pc, #520]	@ (800ab30 <timeCircuit_control_updateGlitch+0x220>)
 800a928:	f7f8 f832 	bl	8002990 <HAL_GPIO_ReadPin>
 800a92c:	4603      	mov	r3, r0
 800a92e:	2b00      	cmp	r3, #0
 800a930:	bf0c      	ite	eq
 800a932:	2301      	moveq	r3, #1
 800a934:	2300      	movne	r3, #0
 800a936:	b2db      	uxtb	r3, r3
 800a938:	737b      	strb	r3, [r7, #13]
  bHasButtonStateChanged = timeCircuit_control_checkButtonActivation(&bIsButtonActivated, &hasButtonActivated,
 800a93a:	f107 000d 	add.w	r0, r7, #13
 800a93e:	2364      	movs	r3, #100	@ 0x64
 800a940:	4a7c      	ldr	r2, [pc, #496]	@ (800ab34 <timeCircuit_control_updateGlitch+0x224>)
 800a942:	497d      	ldr	r1, [pc, #500]	@ (800ab38 <timeCircuit_control_updateGlitch+0x228>)
 800a944:	f7ff fc46 	bl	800a1d4 <timeCircuit_control_checkButtonActivation>
 800a948:	4603      	mov	r3, r0
 800a94a:	73bb      	strb	r3, [r7, #14]
      &previousTimeMS, GLITCH_SWITCH_DEBOUNCE_TIME_MS);

  //Checks if glitch switch has been enabled
  if (bHasButtonStateChanged == true)
 800a94c:	7bbb      	ldrb	r3, [r7, #14]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d02f      	beq.n	800a9b2 <timeCircuit_control_updateGlitch+0xa2>
  {
    if (bIsButtonActivated == true )
 800a952:	7b7b      	ldrb	r3, [r7, #13]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d015      	beq.n	800a984 <timeCircuit_control_updateGlitch+0x74>
    {
      randomFaultTime = rand() % MAXIMUM_GLITCH_RANDOM_PERIOD_MS;
 800a958:	f003 f91c 	bl	800db94 <rand>
 800a95c:	4603      	mov	r3, r0
 800a95e:	4a77      	ldr	r2, [pc, #476]	@ (800ab3c <timeCircuit_control_updateGlitch+0x22c>)
 800a960:	fb82 1203 	smull	r1, r2, r2, r3
 800a964:	1391      	asrs	r1, r2, #14
 800a966:	17da      	asrs	r2, r3, #31
 800a968:	1a8a      	subs	r2, r1, r2
 800a96a:	f64e 2160 	movw	r1, #60000	@ 0xea60
 800a96e:	fb01 f202 	mul.w	r2, r1, r2
 800a972:	1a9a      	subs	r2, r3, r2
 800a974:	4b72      	ldr	r3, [pc, #456]	@ (800ab40 <timeCircuit_control_updateGlitch+0x230>)
 800a976:	601a      	str	r2, [r3, #0]
      previousFaultTime = HAL_GetTick();
 800a978:	f7f6 ff14 	bl	80017a4 <HAL_GetTick>
 800a97c:	4603      	mov	r3, r0
 800a97e:	4a71      	ldr	r2, [pc, #452]	@ (800ab44 <timeCircuit_control_updateGlitch+0x234>)
 800a980:	6013      	str	r3, [r2, #0]
 800a982:	e016      	b.n	800a9b2 <timeCircuit_control_updateGlitch+0xa2>
    }
    else
    {
      isSuccess &= dateTime_clearDisplay(pConfig->pDestinationTime);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	695b      	ldr	r3, [r3, #20]
 800a988:	4618      	mov	r0, r3
 800a98a:	f7fe fdd6 	bl	800953a <dateTime_clearDisplay>
 800a98e:	4603      	mov	r3, r0
 800a990:	461a      	mov	r2, r3
 800a992:	7bfb      	ldrb	r3, [r7, #15]
 800a994:	4013      	ands	r3, r2
 800a996:	2b00      	cmp	r3, #0
 800a998:	bf14      	ite	ne
 800a99a:	2301      	movne	r3, #1
 800a99c:	2300      	moveq	r3, #0
 800a99e:	73fb      	strb	r3, [r7, #15]
      isSuccess = dateTime_updateDisplay(pConfig->pDestinationTime);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	695b      	ldr	r3, [r3, #20]
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f7ff f8d9 	bl	8009b5c <dateTime_updateDisplay>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	73fb      	strb	r3, [r7, #15]

      return true;
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	e0ba      	b.n	800ab28 <timeCircuit_control_updateGlitch+0x218>
    }
  }

  //Update display with glitch
  if (((HAL_GetTick() - previousTime) > gGlitchTimeDelay[stateCount]) &&
 800a9b2:	f7f6 fef7 	bl	80017a4 <HAL_GetTick>
 800a9b6:	4602      	mov	r2, r0
 800a9b8:	4b63      	ldr	r3, [pc, #396]	@ (800ab48 <timeCircuit_control_updateGlitch+0x238>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	1ad2      	subs	r2, r2, r3
 800a9be:	4b63      	ldr	r3, [pc, #396]	@ (800ab4c <timeCircuit_control_updateGlitch+0x23c>)
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	4b62      	ldr	r3, [pc, #392]	@ (800ab50 <timeCircuit_control_updateGlitch+0x240>)
 800a9c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d963      	bls.n	800aa96 <timeCircuit_control_updateGlitch+0x186>
      ((HAL_GetTick() - previousFaultTime) > randomFaultTime) &&
 800a9ce:	f7f6 fee9 	bl	80017a4 <HAL_GetTick>
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	4b5b      	ldr	r3, [pc, #364]	@ (800ab44 <timeCircuit_control_updateGlitch+0x234>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	1ad2      	subs	r2, r2, r3
 800a9da:	4b59      	ldr	r3, [pc, #356]	@ (800ab40 <timeCircuit_control_updateGlitch+0x230>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
  if (((HAL_GetTick() - previousTime) > gGlitchTimeDelay[stateCount]) &&
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d959      	bls.n	800aa96 <timeCircuit_control_updateGlitch+0x186>
      (bIsButtonActivated == true) && (gGlitchDoubleHit  == false))
 800a9e2:	7b7b      	ldrb	r3, [r7, #13]
      ((HAL_GetTick() - previousFaultTime) > randomFaultTime) &&
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d056      	beq.n	800aa96 <timeCircuit_control_updateGlitch+0x186>
      (bIsButtonActivated == true) && (gGlitchDoubleHit  == false))
 800a9e8:	4b5a      	ldr	r3, [pc, #360]	@ (800ab54 <timeCircuit_control_updateGlitch+0x244>)
 800a9ea:	781b      	ldrb	r3, [r3, #0]
 800a9ec:	b2db      	uxtb	r3, r3
 800a9ee:	f083 0301 	eor.w	r3, r3, #1
 800a9f2:	b2db      	uxtb	r3, r3
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d04e      	beq.n	800aa96 <timeCircuit_control_updateGlitch+0x186>
  {
    switch (stateCount)
 800a9f8:	4b54      	ldr	r3, [pc, #336]	@ (800ab4c <timeCircuit_control_updateGlitch+0x23c>)
 800a9fa:	781b      	ldrb	r3, [r3, #0]
 800a9fc:	2b02      	cmp	r3, #2
 800a9fe:	d031      	beq.n	800aa64 <timeCircuit_control_updateGlitch+0x154>
 800aa00:	2b02      	cmp	r3, #2
 800aa02:	dc42      	bgt.n	800aa8a <timeCircuit_control_updateGlitch+0x17a>
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d002      	beq.n	800aa0e <timeCircuit_control_updateGlitch+0xfe>
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	d015      	beq.n	800aa38 <timeCircuit_control_updateGlitch+0x128>
//        char filename[] = "glitch2.wav";
//        osMessageQueuePut(soundQueueHandle, &filename, 0, 0);
        break;

      default:
        break;
 800aa0c:	e03d      	b.n	800aa8a <timeCircuit_control_updateGlitch+0x17a>
        isSuccess &= dateTime_clearDisplay(pConfig->pDestinationTime);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	695b      	ldr	r3, [r3, #20]
 800aa12:	4618      	mov	r0, r3
 800aa14:	f7fe fd91 	bl	800953a <dateTime_clearDisplay>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	7bfb      	ldrb	r3, [r7, #15]
 800aa1e:	4013      	ands	r3, r2
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	bf14      	ite	ne
 800aa24:	2301      	movne	r3, #1
 800aa26:	2300      	moveq	r3, #0
 800aa28:	73fb      	strb	r3, [r7, #15]
        stateCount++;
 800aa2a:	4b48      	ldr	r3, [pc, #288]	@ (800ab4c <timeCircuit_control_updateGlitch+0x23c>)
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	3301      	adds	r3, #1
 800aa30:	b2da      	uxtb	r2, r3
 800aa32:	4b46      	ldr	r3, [pc, #280]	@ (800ab4c <timeCircuit_control_updateGlitch+0x23c>)
 800aa34:	701a      	strb	r2, [r3, #0]
        break;
 800aa36:	e029      	b.n	800aa8c <timeCircuit_control_updateGlitch+0x17c>
        isSuccess &= dateTime_updateDisplayGlitch(pConfig->pDestinationTime, gGlitchDisplayChars);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	695b      	ldr	r3, [r3, #20]
 800aa3c:	4946      	ldr	r1, [pc, #280]	@ (800ab58 <timeCircuit_control_updateGlitch+0x248>)
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f7fe feec 	bl	800981c <dateTime_updateDisplayGlitch>
 800aa44:	4603      	mov	r3, r0
 800aa46:	461a      	mov	r2, r3
 800aa48:	7bfb      	ldrb	r3, [r7, #15]
 800aa4a:	4013      	ands	r3, r2
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	bf14      	ite	ne
 800aa50:	2301      	movne	r3, #1
 800aa52:	2300      	moveq	r3, #0
 800aa54:	73fb      	strb	r3, [r7, #15]
        stateCount++;
 800aa56:	4b3d      	ldr	r3, [pc, #244]	@ (800ab4c <timeCircuit_control_updateGlitch+0x23c>)
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	b2da      	uxtb	r2, r3
 800aa5e:	4b3b      	ldr	r3, [pc, #236]	@ (800ab4c <timeCircuit_control_updateGlitch+0x23c>)
 800aa60:	701a      	strb	r2, [r3, #0]
        break;
 800aa62:	e013      	b.n	800aa8c <timeCircuit_control_updateGlitch+0x17c>
        isSuccess &= dateTime_updateDisplayGlitch(pConfig->pDestinationTime,gGlitchDisplayDate);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	695b      	ldr	r3, [r3, #20]
 800aa68:	493c      	ldr	r1, [pc, #240]	@ (800ab5c <timeCircuit_control_updateGlitch+0x24c>)
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f7fe fed6 	bl	800981c <dateTime_updateDisplayGlitch>
 800aa70:	4603      	mov	r3, r0
 800aa72:	461a      	mov	r2, r3
 800aa74:	7bfb      	ldrb	r3, [r7, #15]
 800aa76:	4013      	ands	r3, r2
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	bf14      	ite	ne
 800aa7c:	2301      	movne	r3, #1
 800aa7e:	2300      	moveq	r3, #0
 800aa80:	73fb      	strb	r3, [r7, #15]
        stateCount = 0;
 800aa82:	4b32      	ldr	r3, [pc, #200]	@ (800ab4c <timeCircuit_control_updateGlitch+0x23c>)
 800aa84:	2200      	movs	r2, #0
 800aa86:	701a      	strb	r2, [r3, #0]
        break;
 800aa88:	e000      	b.n	800aa8c <timeCircuit_control_updateGlitch+0x17c>
        break;
 800aa8a:	bf00      	nop
     }
    previousTime = HAL_GetTick();
 800aa8c:	f7f6 fe8a 	bl	80017a4 <HAL_GetTick>
 800aa90:	4603      	mov	r3, r0
 800aa92:	4a2d      	ldr	r2, [pc, #180]	@ (800ab48 <timeCircuit_control_updateGlitch+0x238>)
 800aa94:	6013      	str	r3, [r2, #0]
  }

  // Clear glitch
  if (gGlitchDoubleHit == true)
 800aa96:	4b2f      	ldr	r3, [pc, #188]	@ (800ab54 <timeCircuit_control_updateGlitch+0x244>)
 800aa98:	781b      	ldrb	r3, [r3, #0]
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d042      	beq.n	800ab26 <timeCircuit_control_updateGlitch+0x216>
  {
    //Clear glitching display
    isSuccess &= dateTime_clearDisplay(pConfig->pDestinationTime);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	695b      	ldr	r3, [r3, #20]
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f7fe fd48 	bl	800953a <dateTime_clearDisplay>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	461a      	mov	r2, r3
 800aaae:	7bfb      	ldrb	r3, [r7, #15]
 800aab0:	4013      	ands	r3, r2
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	bf14      	ite	ne
 800aab6:	2301      	movne	r3, #1
 800aab8:	2300      	moveq	r3, #0
 800aaba:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(500);
 800aabc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800aac0:	f7f6 fe7c 	bl	80017bc <HAL_Delay>
    isSuccess &= dateTime_updateDisplayGlitch(pConfig->pDestinationTime, gGlitchDisplayChars);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	695b      	ldr	r3, [r3, #20]
 800aac8:	4923      	ldr	r1, [pc, #140]	@ (800ab58 <timeCircuit_control_updateGlitch+0x248>)
 800aaca:	4618      	mov	r0, r3
 800aacc:	f7fe fea6 	bl	800981c <dateTime_updateDisplayGlitch>
 800aad0:	4603      	mov	r3, r0
 800aad2:	461a      	mov	r2, r3
 800aad4:	7bfb      	ldrb	r3, [r7, #15]
 800aad6:	4013      	ands	r3, r2
 800aad8:	2b00      	cmp	r3, #0
 800aada:	bf14      	ite	ne
 800aadc:	2301      	movne	r3, #1
 800aade:	2300      	moveq	r3, #0
 800aae0:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(100);
 800aae2:	2064      	movs	r0, #100	@ 0x64
 800aae4:	f7f6 fe6a 	bl	80017bc <HAL_Delay>
    isSuccess = dateTime_updateDisplay(pConfig->pDestinationTime);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	695b      	ldr	r3, [r3, #20]
 800aaec:	4618      	mov	r0, r3
 800aaee:	f7ff f835 	bl	8009b5c <dateTime_updateDisplay>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	73fb      	strb	r3, [r7, #15]

    //Clear glitch flag
    gGlitchDoubleHit = false;
 800aaf6:	4b17      	ldr	r3, [pc, #92]	@ (800ab54 <timeCircuit_control_updateGlitch+0x244>)
 800aaf8:	2200      	movs	r2, #0
 800aafa:	701a      	strb	r2, [r3, #0]

    //Generate new random time
    randomFaultTime = rand() % MAXIMUM_GLITCH_RANDOM_PERIOD_MS;
 800aafc:	f003 f84a 	bl	800db94 <rand>
 800ab00:	4603      	mov	r3, r0
 800ab02:	4a0e      	ldr	r2, [pc, #56]	@ (800ab3c <timeCircuit_control_updateGlitch+0x22c>)
 800ab04:	fb82 1203 	smull	r1, r2, r2, r3
 800ab08:	1391      	asrs	r1, r2, #14
 800ab0a:	17da      	asrs	r2, r3, #31
 800ab0c:	1a8a      	subs	r2, r1, r2
 800ab0e:	f64e 2160 	movw	r1, #60000	@ 0xea60
 800ab12:	fb01 f202 	mul.w	r2, r1, r2
 800ab16:	1a9a      	subs	r2, r3, r2
 800ab18:	4b09      	ldr	r3, [pc, #36]	@ (800ab40 <timeCircuit_control_updateGlitch+0x230>)
 800ab1a:	601a      	str	r2, [r3, #0]

    //Reset glitch timer
    previousFaultTime = HAL_GetTick();
 800ab1c:	f7f6 fe42 	bl	80017a4 <HAL_GetTick>
 800ab20:	4603      	mov	r3, r0
 800ab22:	4a08      	ldr	r2, [pc, #32]	@ (800ab44 <timeCircuit_control_updateGlitch+0x234>)
 800ab24:	6013      	str	r3, [r2, #0]


  }

  return isSuccess;
 800ab26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3710      	adds	r7, #16
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}
 800ab30:	40020400 	.word	0x40020400
 800ab34:	20000438 	.word	0x20000438
 800ab38:	20000434 	.word	0x20000434
 800ab3c:	45e7b273 	.word	0x45e7b273
 800ab40:	2000043c 	.word	0x2000043c
 800ab44:	20000440 	.word	0x20000440
 800ab48:	20000444 	.word	0x20000444
 800ab4c:	20000448 	.word	0x20000448
 800ab50:	0800f0c0 	.word	0x0800f0c0
 800ab54:	20000411 	.word	0x20000411
 800ab58:	0800f0b0 	.word	0x0800f0b0
 800ab5c:	0800f0a0 	.word	0x0800f0a0

0800ab60 <timeCircuit__toggleTimeColon>:
  return isSuccess;

}

TimeCircuit_Control_Status_t timeCircuit__toggleTimeColon(TimeCircuit_Control_Config_t* const pConfig)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b084      	sub	sp, #16
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  static uint8_t toogleStatus = 0;
  static uint32_t previousTime = 0;
  DateTime_Display_Status_t isSuccess   = 0;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	73fb      	strb	r3, [r7, #15]

  if ((HAL_GetTick()-previousTime) >= COLON_TIME_DELAY_MS)
 800ab6c:	f7f6 fe1a 	bl	80017a4 <HAL_GetTick>
 800ab70:	4602      	mov	r2, r0
 800ab72:	4b2a      	ldr	r3, [pc, #168]	@ (800ac1c <timeCircuit__toggleTimeColon+0xbc>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	1ad3      	subs	r3, r2, r3
 800ab78:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800ab7c:	d349      	bcc.n	800ac12 <timeCircuit__toggleTimeColon+0xb2>
  {
    toogleStatus = ((toogleStatus) == 0) ? 3 : 0;
 800ab7e:	4b28      	ldr	r3, [pc, #160]	@ (800ac20 <timeCircuit__toggleTimeColon+0xc0>)
 800ab80:	781b      	ldrb	r3, [r3, #0]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d101      	bne.n	800ab8a <timeCircuit__toggleTimeColon+0x2a>
 800ab86:	2203      	movs	r2, #3
 800ab88:	e000      	b.n	800ab8c <timeCircuit__toggleTimeColon+0x2c>
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	4b24      	ldr	r3, [pc, #144]	@ (800ac20 <timeCircuit__toggleTimeColon+0xc0>)
 800ab8e:	701a      	strb	r2, [r3, #0]
    previousTime = HAL_GetTick();
 800ab90:	f7f6 fe08 	bl	80017a4 <HAL_GetTick>
 800ab94:	4603      	mov	r3, r0
 800ab96:	4a21      	ldr	r2, [pc, #132]	@ (800ac1c <timeCircuit__toggleTimeColon+0xbc>)
 800ab98:	6013      	str	r3, [r2, #0]
    isSuccess |= dateTime_setLed(pConfig->pDestinationTime,   COLON_LED_SEGMENT_ADDRESS, (toogleStatus<<6));
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6958      	ldr	r0, [r3, #20]
 800ab9e:	4b20      	ldr	r3, [pc, #128]	@ (800ac20 <timeCircuit__toggleTimeColon+0xc0>)
 800aba0:	781b      	ldrb	r3, [r3, #0]
 800aba2:	019b      	lsls	r3, r3, #6
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	461a      	mov	r2, r3
 800aba8:	2107      	movs	r1, #7
 800abaa:	f7fe fd04 	bl	80095b6 <dateTime_setLed>
 800abae:	4603      	mov	r3, r0
 800abb0:	461a      	mov	r2, r3
 800abb2:	7bfb      	ldrb	r3, [r7, #15]
 800abb4:	4313      	orrs	r3, r2
 800abb6:	b2db      	uxtb	r3, r3
 800abb8:	2b00      	cmp	r3, #0
 800abba:	bf14      	ite	ne
 800abbc:	2301      	movne	r3, #1
 800abbe:	2300      	moveq	r3, #0
 800abc0:	73fb      	strb	r3, [r7, #15]
    isSuccess |= dateTime_setLed(pConfig->pLastDepartedTime,  COLON_LED_SEGMENT_ADDRESS, (toogleStatus<<6));
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	69d8      	ldr	r0, [r3, #28]
 800abc6:	4b16      	ldr	r3, [pc, #88]	@ (800ac20 <timeCircuit__toggleTimeColon+0xc0>)
 800abc8:	781b      	ldrb	r3, [r3, #0]
 800abca:	019b      	lsls	r3, r3, #6
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	461a      	mov	r2, r3
 800abd0:	2107      	movs	r1, #7
 800abd2:	f7fe fcf0 	bl	80095b6 <dateTime_setLed>
 800abd6:	4603      	mov	r3, r0
 800abd8:	461a      	mov	r2, r3
 800abda:	7bfb      	ldrb	r3, [r7, #15]
 800abdc:	4313      	orrs	r3, r2
 800abde:	b2db      	uxtb	r3, r3
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	bf14      	ite	ne
 800abe4:	2301      	movne	r3, #1
 800abe6:	2300      	moveq	r3, #0
 800abe8:	73fb      	strb	r3, [r7, #15]
    isSuccess |= dateTime_setLed(pConfig->pPresentTime,       COLON_LED_SEGMENT_ADDRESS, (toogleStatus<<6));
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6998      	ldr	r0, [r3, #24]
 800abee:	4b0c      	ldr	r3, [pc, #48]	@ (800ac20 <timeCircuit__toggleTimeColon+0xc0>)
 800abf0:	781b      	ldrb	r3, [r3, #0]
 800abf2:	019b      	lsls	r3, r3, #6
 800abf4:	b2db      	uxtb	r3, r3
 800abf6:	461a      	mov	r2, r3
 800abf8:	2107      	movs	r1, #7
 800abfa:	f7fe fcdc 	bl	80095b6 <dateTime_setLed>
 800abfe:	4603      	mov	r3, r0
 800ac00:	461a      	mov	r2, r3
 800ac02:	7bfb      	ldrb	r3, [r7, #15]
 800ac04:	4313      	orrs	r3, r2
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	bf14      	ite	ne
 800ac0c:	2301      	movne	r3, #1
 800ac0e:	2300      	moveq	r3, #0
 800ac10:	73fb      	strb	r3, [r7, #15]


  }

  return isSuccess;
 800ac12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3710      	adds	r7, #16
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}
 800ac1c:	2000044c 	.word	0x2000044c
 800ac20:	20000450 	.word	0x20000450

0800ac24 <timeCircuit_control_update>:



TimeCircuit_Control_Status_t timeCircuit_control_update(TimeCircuit_Control_Config_t * const pConfig)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b084      	sub	sp, #16
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = 1;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	73fb      	strb	r3, [r7, #15]

  //Update date times after time travel simulation event
  isSuccess &= timeCircuit_control_updateTimeTravelDateTimes(pConfig);
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f7ff fd45 	bl	800a6c0 <timeCircuit_control_updateTimeTravelDateTimes>
 800ac36:	4603      	mov	r3, r0
 800ac38:	461a      	mov	r2, r3
 800ac3a:	7bfb      	ldrb	r3, [r7, #15]
 800ac3c:	4013      	ands	r3, r2
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	bf14      	ite	ne
 800ac42:	2301      	movne	r3, #1
 800ac44:	2300      	moveq	r3, #0
 800ac46:	73fb      	strb	r3, [r7, #15]

  //Read user input date time
  isSuccess &= timeCircuit_control_readInputDateTime(pConfig);
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f7ff faeb 	bl	800a224 <timeCircuit_control_readInputDateTime>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	461a      	mov	r2, r3
 800ac52:	7bfb      	ldrb	r3, [r7, #15]
 800ac54:	4013      	ands	r3, r2
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	bf14      	ite	ne
 800ac5a:	2301      	movne	r3, #1
 800ac5c:	2300      	moveq	r3, #0
 800ac5e:	73fb      	strb	r3, [r7, #15]

  //Update Destination Time from user input
  isSuccess &= timeCircuit_control_updateDestinationDateTime(pConfig);
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f7ff fdcb 	bl	800a7fc <timeCircuit_control_updateDestinationDateTime>
 800ac66:	4603      	mov	r3, r0
 800ac68:	461a      	mov	r2, r3
 800ac6a:	7bfb      	ldrb	r3, [r7, #15]
 800ac6c:	4013      	ands	r3, r2
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	bf14      	ite	ne
 800ac72:	2301      	movne	r3, #1
 800ac74:	2300      	moveq	r3, #0
 800ac76:	73fb      	strb	r3, [r7, #15]


  //Update Present Time from RTC
  isSuccess &= timeCircuit_control_updatePresentDateTime(pConfig);
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f7ff fcbf 	bl	800a5fc <timeCircuit_control_updatePresentDateTime>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	461a      	mov	r2, r3
 800ac82:	7bfb      	ldrb	r3, [r7, #15]
 800ac84:	4013      	ands	r3, r2
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	bf14      	ite	ne
 800ac8a:	2301      	movne	r3, #1
 800ac8c:	2300      	moveq	r3, #0
 800ac8e:	73fb      	strb	r3, [r7, #15]

  //Update Glitch
  isSuccess &= timeCircuit_control_updateGlitch(pConfig);
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f7ff fe3d 	bl	800a910 <timeCircuit_control_updateGlitch>
 800ac96:	4603      	mov	r3, r0
 800ac98:	461a      	mov	r2, r3
 800ac9a:	7bfb      	ldrb	r3, [r7, #15]
 800ac9c:	4013      	ands	r3, r2
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	bf14      	ite	ne
 800aca2:	2301      	movne	r3, #1
 800aca4:	2300      	moveq	r3, #0
 800aca6:	73fb      	strb	r3, [r7, #15]


  return isSuccess;
 800aca8:	7bfb      	ldrb	r3, [r7, #15]
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3710      	adds	r7, #16
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}
	...

0800acb4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800acb4:	b480      	push	{r7}
 800acb6:	b087      	sub	sp, #28
 800acb8:	af00      	add	r7, sp, #0
 800acba:	60f8      	str	r0, [r7, #12]
 800acbc:	60b9      	str	r1, [r7, #8]
 800acbe:	4613      	mov	r3, r2
 800acc0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800acc2:	2301      	movs	r3, #1
 800acc4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800acc6:	2300      	movs	r3, #0
 800acc8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800acca:	4b1f      	ldr	r3, [pc, #124]	@ (800ad48 <FATFS_LinkDriverEx+0x94>)
 800accc:	7a5b      	ldrb	r3, [r3, #9]
 800acce:	b2db      	uxtb	r3, r3
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d131      	bne.n	800ad38 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800acd4:	4b1c      	ldr	r3, [pc, #112]	@ (800ad48 <FATFS_LinkDriverEx+0x94>)
 800acd6:	7a5b      	ldrb	r3, [r3, #9]
 800acd8:	b2db      	uxtb	r3, r3
 800acda:	461a      	mov	r2, r3
 800acdc:	4b1a      	ldr	r3, [pc, #104]	@ (800ad48 <FATFS_LinkDriverEx+0x94>)
 800acde:	2100      	movs	r1, #0
 800ace0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ace2:	4b19      	ldr	r3, [pc, #100]	@ (800ad48 <FATFS_LinkDriverEx+0x94>)
 800ace4:	7a5b      	ldrb	r3, [r3, #9]
 800ace6:	b2db      	uxtb	r3, r3
 800ace8:	4a17      	ldr	r2, [pc, #92]	@ (800ad48 <FATFS_LinkDriverEx+0x94>)
 800acea:	009b      	lsls	r3, r3, #2
 800acec:	4413      	add	r3, r2
 800acee:	68fa      	ldr	r2, [r7, #12]
 800acf0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800acf2:	4b15      	ldr	r3, [pc, #84]	@ (800ad48 <FATFS_LinkDriverEx+0x94>)
 800acf4:	7a5b      	ldrb	r3, [r3, #9]
 800acf6:	b2db      	uxtb	r3, r3
 800acf8:	461a      	mov	r2, r3
 800acfa:	4b13      	ldr	r3, [pc, #76]	@ (800ad48 <FATFS_LinkDriverEx+0x94>)
 800acfc:	4413      	add	r3, r2
 800acfe:	79fa      	ldrb	r2, [r7, #7]
 800ad00:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ad02:	4b11      	ldr	r3, [pc, #68]	@ (800ad48 <FATFS_LinkDriverEx+0x94>)
 800ad04:	7a5b      	ldrb	r3, [r3, #9]
 800ad06:	b2db      	uxtb	r3, r3
 800ad08:	1c5a      	adds	r2, r3, #1
 800ad0a:	b2d1      	uxtb	r1, r2
 800ad0c:	4a0e      	ldr	r2, [pc, #56]	@ (800ad48 <FATFS_LinkDriverEx+0x94>)
 800ad0e:	7251      	strb	r1, [r2, #9]
 800ad10:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ad12:	7dbb      	ldrb	r3, [r7, #22]
 800ad14:	3330      	adds	r3, #48	@ 0x30
 800ad16:	b2da      	uxtb	r2, r3
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	3301      	adds	r3, #1
 800ad20:	223a      	movs	r2, #58	@ 0x3a
 800ad22:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	3302      	adds	r3, #2
 800ad28:	222f      	movs	r2, #47	@ 0x2f
 800ad2a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	3303      	adds	r3, #3
 800ad30:	2200      	movs	r2, #0
 800ad32:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ad34:	2300      	movs	r3, #0
 800ad36:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ad38:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	371c      	adds	r7, #28
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad44:	4770      	bx	lr
 800ad46:	bf00      	nop
 800ad48:	20000454 	.word	0x20000454

0800ad4c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b082      	sub	sp, #8
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ad56:	2200      	movs	r2, #0
 800ad58:	6839      	ldr	r1, [r7, #0]
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f7ff ffaa 	bl	800acb4 <FATFS_LinkDriverEx>
 800ad60:	4603      	mov	r3, r0
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3708      	adds	r7, #8
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
	...

0800ad6c <__NVIC_SetPriority>:
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b083      	sub	sp, #12
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	4603      	mov	r3, r0
 800ad74:	6039      	str	r1, [r7, #0]
 800ad76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ad78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	db0a      	blt.n	800ad96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	b2da      	uxtb	r2, r3
 800ad84:	490c      	ldr	r1, [pc, #48]	@ (800adb8 <__NVIC_SetPriority+0x4c>)
 800ad86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad8a:	0112      	lsls	r2, r2, #4
 800ad8c:	b2d2      	uxtb	r2, r2
 800ad8e:	440b      	add	r3, r1
 800ad90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ad94:	e00a      	b.n	800adac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	b2da      	uxtb	r2, r3
 800ad9a:	4908      	ldr	r1, [pc, #32]	@ (800adbc <__NVIC_SetPriority+0x50>)
 800ad9c:	79fb      	ldrb	r3, [r7, #7]
 800ad9e:	f003 030f 	and.w	r3, r3, #15
 800ada2:	3b04      	subs	r3, #4
 800ada4:	0112      	lsls	r2, r2, #4
 800ada6:	b2d2      	uxtb	r2, r2
 800ada8:	440b      	add	r3, r1
 800adaa:	761a      	strb	r2, [r3, #24]
}
 800adac:	bf00      	nop
 800adae:	370c      	adds	r7, #12
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr
 800adb8:	e000e100 	.word	0xe000e100
 800adbc:	e000ed00 	.word	0xe000ed00

0800adc0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800adc0:	b580      	push	{r7, lr}
 800adc2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800adc4:	4b05      	ldr	r3, [pc, #20]	@ (800addc <SysTick_Handler+0x1c>)
 800adc6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800adc8:	f001 fda6 	bl	800c918 <xTaskGetSchedulerState>
 800adcc:	4603      	mov	r3, r0
 800adce:	2b01      	cmp	r3, #1
 800add0:	d001      	beq.n	800add6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800add2:	f002 fba1 	bl	800d518 <xPortSysTickHandler>
  }
}
 800add6:	bf00      	nop
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop
 800addc:	e000e010 	.word	0xe000e010

0800ade0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ade0:	b580      	push	{r7, lr}
 800ade2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ade4:	2100      	movs	r1, #0
 800ade6:	f06f 0004 	mvn.w	r0, #4
 800adea:	f7ff ffbf 	bl	800ad6c <__NVIC_SetPriority>
#endif
}
 800adee:	bf00      	nop
 800adf0:	bd80      	pop	{r7, pc}
	...

0800adf4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800adf4:	b480      	push	{r7}
 800adf6:	b083      	sub	sp, #12
 800adf8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800adfa:	f3ef 8305 	mrs	r3, IPSR
 800adfe:	603b      	str	r3, [r7, #0]
  return(result);
 800ae00:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d003      	beq.n	800ae0e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ae06:	f06f 0305 	mvn.w	r3, #5
 800ae0a:	607b      	str	r3, [r7, #4]
 800ae0c:	e00c      	b.n	800ae28 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ae0e:	4b0a      	ldr	r3, [pc, #40]	@ (800ae38 <osKernelInitialize+0x44>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d105      	bne.n	800ae22 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ae16:	4b08      	ldr	r3, [pc, #32]	@ (800ae38 <osKernelInitialize+0x44>)
 800ae18:	2201      	movs	r2, #1
 800ae1a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	607b      	str	r3, [r7, #4]
 800ae20:	e002      	b.n	800ae28 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ae22:	f04f 33ff 	mov.w	r3, #4294967295
 800ae26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ae28:	687b      	ldr	r3, [r7, #4]
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	370c      	adds	r7, #12
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae34:	4770      	bx	lr
 800ae36:	bf00      	nop
 800ae38:	20000460 	.word	0x20000460

0800ae3c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae42:	f3ef 8305 	mrs	r3, IPSR
 800ae46:	603b      	str	r3, [r7, #0]
  return(result);
 800ae48:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d003      	beq.n	800ae56 <osKernelStart+0x1a>
    stat = osErrorISR;
 800ae4e:	f06f 0305 	mvn.w	r3, #5
 800ae52:	607b      	str	r3, [r7, #4]
 800ae54:	e010      	b.n	800ae78 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ae56:	4b0b      	ldr	r3, [pc, #44]	@ (800ae84 <osKernelStart+0x48>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	2b01      	cmp	r3, #1
 800ae5c:	d109      	bne.n	800ae72 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ae5e:	f7ff ffbf 	bl	800ade0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ae62:	4b08      	ldr	r3, [pc, #32]	@ (800ae84 <osKernelStart+0x48>)
 800ae64:	2202      	movs	r2, #2
 800ae66:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ae68:	f001 f8f2 	bl	800c050 <vTaskStartScheduler>
      stat = osOK;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	607b      	str	r3, [r7, #4]
 800ae70:	e002      	b.n	800ae78 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ae72:	f04f 33ff 	mov.w	r3, #4294967295
 800ae76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ae78:	687b      	ldr	r3, [r7, #4]
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3708      	adds	r7, #8
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
 800ae82:	bf00      	nop
 800ae84:	20000460 	.word	0x20000460

0800ae88 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b08e      	sub	sp, #56	@ 0x38
 800ae8c:	af04      	add	r7, sp, #16
 800ae8e:	60f8      	str	r0, [r7, #12]
 800ae90:	60b9      	str	r1, [r7, #8]
 800ae92:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ae94:	2300      	movs	r3, #0
 800ae96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae98:	f3ef 8305 	mrs	r3, IPSR
 800ae9c:	617b      	str	r3, [r7, #20]
  return(result);
 800ae9e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d17e      	bne.n	800afa2 <osThreadNew+0x11a>
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d07b      	beq.n	800afa2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800aeaa:	2380      	movs	r3, #128	@ 0x80
 800aeac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800aeae:	2318      	movs	r3, #24
 800aeb0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800aeb6:	f04f 33ff 	mov.w	r3, #4294967295
 800aeba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d045      	beq.n	800af4e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d002      	beq.n	800aed0 <osThreadNew+0x48>
        name = attr->name;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	699b      	ldr	r3, [r3, #24]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d002      	beq.n	800aede <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	699b      	ldr	r3, [r3, #24]
 800aedc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800aede:	69fb      	ldr	r3, [r7, #28]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d008      	beq.n	800aef6 <osThreadNew+0x6e>
 800aee4:	69fb      	ldr	r3, [r7, #28]
 800aee6:	2b38      	cmp	r3, #56	@ 0x38
 800aee8:	d805      	bhi.n	800aef6 <osThreadNew+0x6e>
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	685b      	ldr	r3, [r3, #4]
 800aeee:	f003 0301 	and.w	r3, r3, #1
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d001      	beq.n	800aefa <osThreadNew+0x72>
        return (NULL);
 800aef6:	2300      	movs	r3, #0
 800aef8:	e054      	b.n	800afa4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	695b      	ldr	r3, [r3, #20]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d003      	beq.n	800af0a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	695b      	ldr	r3, [r3, #20]
 800af06:	089b      	lsrs	r3, r3, #2
 800af08:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	689b      	ldr	r3, [r3, #8]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d00e      	beq.n	800af30 <osThreadNew+0xa8>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	68db      	ldr	r3, [r3, #12]
 800af16:	2ba7      	cmp	r3, #167	@ 0xa7
 800af18:	d90a      	bls.n	800af30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d006      	beq.n	800af30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	695b      	ldr	r3, [r3, #20]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d002      	beq.n	800af30 <osThreadNew+0xa8>
        mem = 1;
 800af2a:	2301      	movs	r3, #1
 800af2c:	61bb      	str	r3, [r7, #24]
 800af2e:	e010      	b.n	800af52 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	689b      	ldr	r3, [r3, #8]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d10c      	bne.n	800af52 <osThreadNew+0xca>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	68db      	ldr	r3, [r3, #12]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d108      	bne.n	800af52 <osThreadNew+0xca>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	691b      	ldr	r3, [r3, #16]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d104      	bne.n	800af52 <osThreadNew+0xca>
          mem = 0;
 800af48:	2300      	movs	r3, #0
 800af4a:	61bb      	str	r3, [r7, #24]
 800af4c:	e001      	b.n	800af52 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800af4e:	2300      	movs	r3, #0
 800af50:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800af52:	69bb      	ldr	r3, [r7, #24]
 800af54:	2b01      	cmp	r3, #1
 800af56:	d110      	bne.n	800af7a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800af5c:	687a      	ldr	r2, [r7, #4]
 800af5e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800af60:	9202      	str	r2, [sp, #8]
 800af62:	9301      	str	r3, [sp, #4]
 800af64:	69fb      	ldr	r3, [r7, #28]
 800af66:	9300      	str	r3, [sp, #0]
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	6a3a      	ldr	r2, [r7, #32]
 800af6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800af6e:	68f8      	ldr	r0, [r7, #12]
 800af70:	f000 fe7a 	bl	800bc68 <xTaskCreateStatic>
 800af74:	4603      	mov	r3, r0
 800af76:	613b      	str	r3, [r7, #16]
 800af78:	e013      	b.n	800afa2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800af7a:	69bb      	ldr	r3, [r7, #24]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d110      	bne.n	800afa2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800af80:	6a3b      	ldr	r3, [r7, #32]
 800af82:	b29a      	uxth	r2, r3
 800af84:	f107 0310 	add.w	r3, r7, #16
 800af88:	9301      	str	r3, [sp, #4]
 800af8a:	69fb      	ldr	r3, [r7, #28]
 800af8c:	9300      	str	r3, [sp, #0]
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800af92:	68f8      	ldr	r0, [r7, #12]
 800af94:	f000 fec8 	bl	800bd28 <xTaskCreate>
 800af98:	4603      	mov	r3, r0
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	d001      	beq.n	800afa2 <osThreadNew+0x11a>
            hTask = NULL;
 800af9e:	2300      	movs	r3, #0
 800afa0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800afa2:	693b      	ldr	r3, [r7, #16]
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3728      	adds	r7, #40	@ 0x28
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}

0800afac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800afac:	b580      	push	{r7, lr}
 800afae:	b084      	sub	sp, #16
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800afb4:	f3ef 8305 	mrs	r3, IPSR
 800afb8:	60bb      	str	r3, [r7, #8]
  return(result);
 800afba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d003      	beq.n	800afc8 <osDelay+0x1c>
    stat = osErrorISR;
 800afc0:	f06f 0305 	mvn.w	r3, #5
 800afc4:	60fb      	str	r3, [r7, #12]
 800afc6:	e007      	b.n	800afd8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800afc8:	2300      	movs	r3, #0
 800afca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d002      	beq.n	800afd8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f001 f806 	bl	800bfe4 <vTaskDelay>
    }
  }

  return (stat);
 800afd8:	68fb      	ldr	r3, [r7, #12]
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3710      	adds	r7, #16
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
	...

0800afe4 <osMessageQueuePut>:
  }

  return ((osMessageQueueId_t)hQueue);
}

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b088      	sub	sp, #32
 800afe8:	af00      	add	r7, sp, #0
 800afea:	60f8      	str	r0, [r7, #12]
 800afec:	60b9      	str	r1, [r7, #8]
 800afee:	603b      	str	r3, [r7, #0]
 800aff0:	4613      	mov	r3, r2
 800aff2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800aff8:	2300      	movs	r3, #0
 800affa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800affc:	f3ef 8305 	mrs	r3, IPSR
 800b000:	617b      	str	r3, [r7, #20]
  return(result);
 800b002:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b004:	2b00      	cmp	r3, #0
 800b006:	d028      	beq.n	800b05a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b008:	69bb      	ldr	r3, [r7, #24]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d005      	beq.n	800b01a <osMessageQueuePut+0x36>
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d002      	beq.n	800b01a <osMessageQueuePut+0x36>
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d003      	beq.n	800b022 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b01a:	f06f 0303 	mvn.w	r3, #3
 800b01e:	61fb      	str	r3, [r7, #28]
 800b020:	e038      	b.n	800b094 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b022:	2300      	movs	r3, #0
 800b024:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b026:	f107 0210 	add.w	r2, r7, #16
 800b02a:	2300      	movs	r3, #0
 800b02c:	68b9      	ldr	r1, [r7, #8]
 800b02e:	69b8      	ldr	r0, [r7, #24]
 800b030:	f000 fb2c 	bl	800b68c <xQueueGenericSendFromISR>
 800b034:	4603      	mov	r3, r0
 800b036:	2b01      	cmp	r3, #1
 800b038:	d003      	beq.n	800b042 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b03a:	f06f 0302 	mvn.w	r3, #2
 800b03e:	61fb      	str	r3, [r7, #28]
 800b040:	e028      	b.n	800b094 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b042:	693b      	ldr	r3, [r7, #16]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d025      	beq.n	800b094 <osMessageQueuePut+0xb0>
 800b048:	4b15      	ldr	r3, [pc, #84]	@ (800b0a0 <osMessageQueuePut+0xbc>)
 800b04a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b04e:	601a      	str	r2, [r3, #0]
 800b050:	f3bf 8f4f 	dsb	sy
 800b054:	f3bf 8f6f 	isb	sy
 800b058:	e01c      	b.n	800b094 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b05a:	69bb      	ldr	r3, [r7, #24]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d002      	beq.n	800b066 <osMessageQueuePut+0x82>
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d103      	bne.n	800b06e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b066:	f06f 0303 	mvn.w	r3, #3
 800b06a:	61fb      	str	r3, [r7, #28]
 800b06c:	e012      	b.n	800b094 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b06e:	2300      	movs	r3, #0
 800b070:	683a      	ldr	r2, [r7, #0]
 800b072:	68b9      	ldr	r1, [r7, #8]
 800b074:	69b8      	ldr	r0, [r7, #24]
 800b076:	f000 fa07 	bl	800b488 <xQueueGenericSend>
 800b07a:	4603      	mov	r3, r0
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d009      	beq.n	800b094 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d003      	beq.n	800b08e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b086:	f06f 0301 	mvn.w	r3, #1
 800b08a:	61fb      	str	r3, [r7, #28]
 800b08c:	e002      	b.n	800b094 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b08e:	f06f 0302 	mvn.w	r3, #2
 800b092:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b094:	69fb      	ldr	r3, [r7, #28]
}
 800b096:	4618      	mov	r0, r3
 800b098:	3720      	adds	r7, #32
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}
 800b09e:	bf00      	nop
 800b0a0:	e000ed04 	.word	0xe000ed04

0800b0a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b0a4:	b480      	push	{r7}
 800b0a6:	b085      	sub	sp, #20
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	60f8      	str	r0, [r7, #12]
 800b0ac:	60b9      	str	r1, [r7, #8]
 800b0ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	4a07      	ldr	r2, [pc, #28]	@ (800b0d0 <vApplicationGetIdleTaskMemory+0x2c>)
 800b0b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	4a06      	ldr	r2, [pc, #24]	@ (800b0d4 <vApplicationGetIdleTaskMemory+0x30>)
 800b0ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2280      	movs	r2, #128	@ 0x80
 800b0c0:	601a      	str	r2, [r3, #0]
}
 800b0c2:	bf00      	nop
 800b0c4:	3714      	adds	r7, #20
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0cc:	4770      	bx	lr
 800b0ce:	bf00      	nop
 800b0d0:	20000464 	.word	0x20000464
 800b0d4:	2000050c 	.word	0x2000050c

0800b0d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b0d8:	b480      	push	{r7}
 800b0da:	b085      	sub	sp, #20
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	60f8      	str	r0, [r7, #12]
 800b0e0:	60b9      	str	r1, [r7, #8]
 800b0e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	4a07      	ldr	r2, [pc, #28]	@ (800b104 <vApplicationGetTimerTaskMemory+0x2c>)
 800b0e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	4a06      	ldr	r2, [pc, #24]	@ (800b108 <vApplicationGetTimerTaskMemory+0x30>)
 800b0ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b0f6:	601a      	str	r2, [r3, #0]
}
 800b0f8:	bf00      	nop
 800b0fa:	3714      	adds	r7, #20
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b102:	4770      	bx	lr
 800b104:	2000070c 	.word	0x2000070c
 800b108:	200007b4 	.word	0x200007b4

0800b10c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b10c:	b480      	push	{r7}
 800b10e:	b083      	sub	sp, #12
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f103 0208 	add.w	r2, r3, #8
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f04f 32ff 	mov.w	r2, #4294967295
 800b124:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f103 0208 	add.w	r2, r3, #8
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f103 0208 	add.w	r2, r3, #8
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2200      	movs	r2, #0
 800b13e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b140:	bf00      	nop
 800b142:	370c      	adds	r7, #12
 800b144:	46bd      	mov	sp, r7
 800b146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14a:	4770      	bx	lr

0800b14c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b14c:	b480      	push	{r7}
 800b14e:	b083      	sub	sp, #12
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2200      	movs	r2, #0
 800b158:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b15a:	bf00      	nop
 800b15c:	370c      	adds	r7, #12
 800b15e:	46bd      	mov	sp, r7
 800b160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b164:	4770      	bx	lr

0800b166 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b166:	b480      	push	{r7}
 800b168:	b085      	sub	sp, #20
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
 800b16e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	68fa      	ldr	r2, [r7, #12]
 800b17a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	689a      	ldr	r2, [r3, #8]
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	689b      	ldr	r3, [r3, #8]
 800b188:	683a      	ldr	r2, [r7, #0]
 800b18a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	683a      	ldr	r2, [r7, #0]
 800b190:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	1c5a      	adds	r2, r3, #1
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	601a      	str	r2, [r3, #0]
}
 800b1a2:	bf00      	nop
 800b1a4:	3714      	adds	r7, #20
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ac:	4770      	bx	lr

0800b1ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b1ae:	b480      	push	{r7}
 800b1b0:	b085      	sub	sp, #20
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
 800b1b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1c4:	d103      	bne.n	800b1ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	691b      	ldr	r3, [r3, #16]
 800b1ca:	60fb      	str	r3, [r7, #12]
 800b1cc:	e00c      	b.n	800b1e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	3308      	adds	r3, #8
 800b1d2:	60fb      	str	r3, [r7, #12]
 800b1d4:	e002      	b.n	800b1dc <vListInsert+0x2e>
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	685b      	ldr	r3, [r3, #4]
 800b1da:	60fb      	str	r3, [r7, #12]
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	685b      	ldr	r3, [r3, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	68ba      	ldr	r2, [r7, #8]
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	d2f6      	bcs.n	800b1d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	685a      	ldr	r2, [r3, #4]
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	685b      	ldr	r3, [r3, #4]
 800b1f4:	683a      	ldr	r2, [r7, #0]
 800b1f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	68fa      	ldr	r2, [r7, #12]
 800b1fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	683a      	ldr	r2, [r7, #0]
 800b202:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	687a      	ldr	r2, [r7, #4]
 800b208:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	1c5a      	adds	r2, r3, #1
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	601a      	str	r2, [r3, #0]
}
 800b214:	bf00      	nop
 800b216:	3714      	adds	r7, #20
 800b218:	46bd      	mov	sp, r7
 800b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21e:	4770      	bx	lr

0800b220 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b220:	b480      	push	{r7}
 800b222:	b085      	sub	sp, #20
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	691b      	ldr	r3, [r3, #16]
 800b22c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	687a      	ldr	r2, [r7, #4]
 800b234:	6892      	ldr	r2, [r2, #8]
 800b236:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	689b      	ldr	r3, [r3, #8]
 800b23c:	687a      	ldr	r2, [r7, #4]
 800b23e:	6852      	ldr	r2, [r2, #4]
 800b240:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	685b      	ldr	r3, [r3, #4]
 800b246:	687a      	ldr	r2, [r7, #4]
 800b248:	429a      	cmp	r2, r3
 800b24a:	d103      	bne.n	800b254 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	689a      	ldr	r2, [r3, #8]
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2200      	movs	r2, #0
 800b258:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	1e5a      	subs	r2, r3, #1
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681b      	ldr	r3, [r3, #0]
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3714      	adds	r7, #20
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr

0800b274 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b084      	sub	sp, #16
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
 800b27c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d10b      	bne.n	800b2a0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b28c:	f383 8811 	msr	BASEPRI, r3
 800b290:	f3bf 8f6f 	isb	sy
 800b294:	f3bf 8f4f 	dsb	sy
 800b298:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b29a:	bf00      	nop
 800b29c:	bf00      	nop
 800b29e:	e7fd      	b.n	800b29c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b2a0:	f002 f8aa 	bl	800d3f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681a      	ldr	r2, [r3, #0]
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2ac:	68f9      	ldr	r1, [r7, #12]
 800b2ae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b2b0:	fb01 f303 	mul.w	r3, r1, r3
 800b2b4:	441a      	add	r2, r3
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681a      	ldr	r2, [r3, #0]
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681a      	ldr	r2, [r3, #0]
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2d0:	3b01      	subs	r3, #1
 800b2d2:	68f9      	ldr	r1, [r7, #12]
 800b2d4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b2d6:	fb01 f303 	mul.w	r3, r1, r3
 800b2da:	441a      	add	r2, r3
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	22ff      	movs	r2, #255	@ 0xff
 800b2e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	22ff      	movs	r2, #255	@ 0xff
 800b2ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d114      	bne.n	800b320 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	691b      	ldr	r3, [r3, #16]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d01a      	beq.n	800b334 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	3310      	adds	r3, #16
 800b302:	4618      	mov	r0, r3
 800b304:	f001 f942 	bl	800c58c <xTaskRemoveFromEventList>
 800b308:	4603      	mov	r3, r0
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d012      	beq.n	800b334 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b30e:	4b0d      	ldr	r3, [pc, #52]	@ (800b344 <xQueueGenericReset+0xd0>)
 800b310:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b314:	601a      	str	r2, [r3, #0]
 800b316:	f3bf 8f4f 	dsb	sy
 800b31a:	f3bf 8f6f 	isb	sy
 800b31e:	e009      	b.n	800b334 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	3310      	adds	r3, #16
 800b324:	4618      	mov	r0, r3
 800b326:	f7ff fef1 	bl	800b10c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	3324      	adds	r3, #36	@ 0x24
 800b32e:	4618      	mov	r0, r3
 800b330:	f7ff feec 	bl	800b10c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b334:	f002 f892 	bl	800d45c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b338:	2301      	movs	r3, #1
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3710      	adds	r7, #16
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	e000ed04 	.word	0xe000ed04

0800b348 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b08e      	sub	sp, #56	@ 0x38
 800b34c:	af02      	add	r7, sp, #8
 800b34e:	60f8      	str	r0, [r7, #12]
 800b350:	60b9      	str	r1, [r7, #8]
 800b352:	607a      	str	r2, [r7, #4]
 800b354:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d10b      	bne.n	800b374 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800b35c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b360:	f383 8811 	msr	BASEPRI, r3
 800b364:	f3bf 8f6f 	isb	sy
 800b368:	f3bf 8f4f 	dsb	sy
 800b36c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b36e:	bf00      	nop
 800b370:	bf00      	nop
 800b372:	e7fd      	b.n	800b370 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d10b      	bne.n	800b392 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800b37a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b37e:	f383 8811 	msr	BASEPRI, r3
 800b382:	f3bf 8f6f 	isb	sy
 800b386:	f3bf 8f4f 	dsb	sy
 800b38a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b38c:	bf00      	nop
 800b38e:	bf00      	nop
 800b390:	e7fd      	b.n	800b38e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d002      	beq.n	800b39e <xQueueGenericCreateStatic+0x56>
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d001      	beq.n	800b3a2 <xQueueGenericCreateStatic+0x5a>
 800b39e:	2301      	movs	r3, #1
 800b3a0:	e000      	b.n	800b3a4 <xQueueGenericCreateStatic+0x5c>
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d10b      	bne.n	800b3c0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800b3a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3ac:	f383 8811 	msr	BASEPRI, r3
 800b3b0:	f3bf 8f6f 	isb	sy
 800b3b4:	f3bf 8f4f 	dsb	sy
 800b3b8:	623b      	str	r3, [r7, #32]
}
 800b3ba:	bf00      	nop
 800b3bc:	bf00      	nop
 800b3be:	e7fd      	b.n	800b3bc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d102      	bne.n	800b3cc <xQueueGenericCreateStatic+0x84>
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d101      	bne.n	800b3d0 <xQueueGenericCreateStatic+0x88>
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	e000      	b.n	800b3d2 <xQueueGenericCreateStatic+0x8a>
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d10b      	bne.n	800b3ee <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b3d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3da:	f383 8811 	msr	BASEPRI, r3
 800b3de:	f3bf 8f6f 	isb	sy
 800b3e2:	f3bf 8f4f 	dsb	sy
 800b3e6:	61fb      	str	r3, [r7, #28]
}
 800b3e8:	bf00      	nop
 800b3ea:	bf00      	nop
 800b3ec:	e7fd      	b.n	800b3ea <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b3ee:	2350      	movs	r3, #80	@ 0x50
 800b3f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	2b50      	cmp	r3, #80	@ 0x50
 800b3f6:	d00b      	beq.n	800b410 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b3f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3fc:	f383 8811 	msr	BASEPRI, r3
 800b400:	f3bf 8f6f 	isb	sy
 800b404:	f3bf 8f4f 	dsb	sy
 800b408:	61bb      	str	r3, [r7, #24]
}
 800b40a:	bf00      	nop
 800b40c:	bf00      	nop
 800b40e:	e7fd      	b.n	800b40c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b410:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d00d      	beq.n	800b438 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b41c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b41e:	2201      	movs	r2, #1
 800b420:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b424:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b42a:	9300      	str	r3, [sp, #0]
 800b42c:	4613      	mov	r3, r2
 800b42e:	687a      	ldr	r2, [r7, #4]
 800b430:	68b9      	ldr	r1, [r7, #8]
 800b432:	68f8      	ldr	r0, [r7, #12]
 800b434:	f000 f805 	bl	800b442 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3730      	adds	r7, #48	@ 0x30
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}

0800b442 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b442:	b580      	push	{r7, lr}
 800b444:	b084      	sub	sp, #16
 800b446:	af00      	add	r7, sp, #0
 800b448:	60f8      	str	r0, [r7, #12]
 800b44a:	60b9      	str	r1, [r7, #8]
 800b44c:	607a      	str	r2, [r7, #4]
 800b44e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d103      	bne.n	800b45e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b456:	69bb      	ldr	r3, [r7, #24]
 800b458:	69ba      	ldr	r2, [r7, #24]
 800b45a:	601a      	str	r2, [r3, #0]
 800b45c:	e002      	b.n	800b464 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b45e:	69bb      	ldr	r3, [r7, #24]
 800b460:	687a      	ldr	r2, [r7, #4]
 800b462:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b464:	69bb      	ldr	r3, [r7, #24]
 800b466:	68fa      	ldr	r2, [r7, #12]
 800b468:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b46a:	69bb      	ldr	r3, [r7, #24]
 800b46c:	68ba      	ldr	r2, [r7, #8]
 800b46e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b470:	2101      	movs	r1, #1
 800b472:	69b8      	ldr	r0, [r7, #24]
 800b474:	f7ff fefe 	bl	800b274 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b478:	69bb      	ldr	r3, [r7, #24]
 800b47a:	78fa      	ldrb	r2, [r7, #3]
 800b47c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b480:	bf00      	nop
 800b482:	3710      	adds	r7, #16
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b08e      	sub	sp, #56	@ 0x38
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	60f8      	str	r0, [r7, #12]
 800b490:	60b9      	str	r1, [r7, #8]
 800b492:	607a      	str	r2, [r7, #4]
 800b494:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b496:	2300      	movs	r3, #0
 800b498:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b49e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d10b      	bne.n	800b4bc <xQueueGenericSend+0x34>
	__asm volatile
 800b4a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4a8:	f383 8811 	msr	BASEPRI, r3
 800b4ac:	f3bf 8f6f 	isb	sy
 800b4b0:	f3bf 8f4f 	dsb	sy
 800b4b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b4b6:	bf00      	nop
 800b4b8:	bf00      	nop
 800b4ba:	e7fd      	b.n	800b4b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d103      	bne.n	800b4ca <xQueueGenericSend+0x42>
 800b4c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d101      	bne.n	800b4ce <xQueueGenericSend+0x46>
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	e000      	b.n	800b4d0 <xQueueGenericSend+0x48>
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d10b      	bne.n	800b4ec <xQueueGenericSend+0x64>
	__asm volatile
 800b4d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4d8:	f383 8811 	msr	BASEPRI, r3
 800b4dc:	f3bf 8f6f 	isb	sy
 800b4e0:	f3bf 8f4f 	dsb	sy
 800b4e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b4e6:	bf00      	nop
 800b4e8:	bf00      	nop
 800b4ea:	e7fd      	b.n	800b4e8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	2b02      	cmp	r3, #2
 800b4f0:	d103      	bne.n	800b4fa <xQueueGenericSend+0x72>
 800b4f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4f6:	2b01      	cmp	r3, #1
 800b4f8:	d101      	bne.n	800b4fe <xQueueGenericSend+0x76>
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	e000      	b.n	800b500 <xQueueGenericSend+0x78>
 800b4fe:	2300      	movs	r3, #0
 800b500:	2b00      	cmp	r3, #0
 800b502:	d10b      	bne.n	800b51c <xQueueGenericSend+0x94>
	__asm volatile
 800b504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b508:	f383 8811 	msr	BASEPRI, r3
 800b50c:	f3bf 8f6f 	isb	sy
 800b510:	f3bf 8f4f 	dsb	sy
 800b514:	623b      	str	r3, [r7, #32]
}
 800b516:	bf00      	nop
 800b518:	bf00      	nop
 800b51a:	e7fd      	b.n	800b518 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b51c:	f001 f9fc 	bl	800c918 <xTaskGetSchedulerState>
 800b520:	4603      	mov	r3, r0
 800b522:	2b00      	cmp	r3, #0
 800b524:	d102      	bne.n	800b52c <xQueueGenericSend+0xa4>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d101      	bne.n	800b530 <xQueueGenericSend+0xa8>
 800b52c:	2301      	movs	r3, #1
 800b52e:	e000      	b.n	800b532 <xQueueGenericSend+0xaa>
 800b530:	2300      	movs	r3, #0
 800b532:	2b00      	cmp	r3, #0
 800b534:	d10b      	bne.n	800b54e <xQueueGenericSend+0xc6>
	__asm volatile
 800b536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b53a:	f383 8811 	msr	BASEPRI, r3
 800b53e:	f3bf 8f6f 	isb	sy
 800b542:	f3bf 8f4f 	dsb	sy
 800b546:	61fb      	str	r3, [r7, #28]
}
 800b548:	bf00      	nop
 800b54a:	bf00      	nop
 800b54c:	e7fd      	b.n	800b54a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b54e:	f001 ff53 	bl	800d3f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b554:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d302      	bcc.n	800b564 <xQueueGenericSend+0xdc>
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	2b02      	cmp	r3, #2
 800b562:	d129      	bne.n	800b5b8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b564:	683a      	ldr	r2, [r7, #0]
 800b566:	68b9      	ldr	r1, [r7, #8]
 800b568:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b56a:	f000 fa0f 	bl	800b98c <prvCopyDataToQueue>
 800b56e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b574:	2b00      	cmp	r3, #0
 800b576:	d010      	beq.n	800b59a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b57a:	3324      	adds	r3, #36	@ 0x24
 800b57c:	4618      	mov	r0, r3
 800b57e:	f001 f805 	bl	800c58c <xTaskRemoveFromEventList>
 800b582:	4603      	mov	r3, r0
 800b584:	2b00      	cmp	r3, #0
 800b586:	d013      	beq.n	800b5b0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b588:	4b3f      	ldr	r3, [pc, #252]	@ (800b688 <xQueueGenericSend+0x200>)
 800b58a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b58e:	601a      	str	r2, [r3, #0]
 800b590:	f3bf 8f4f 	dsb	sy
 800b594:	f3bf 8f6f 	isb	sy
 800b598:	e00a      	b.n	800b5b0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b59a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d007      	beq.n	800b5b0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b5a0:	4b39      	ldr	r3, [pc, #228]	@ (800b688 <xQueueGenericSend+0x200>)
 800b5a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5a6:	601a      	str	r2, [r3, #0]
 800b5a8:	f3bf 8f4f 	dsb	sy
 800b5ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b5b0:	f001 ff54 	bl	800d45c <vPortExitCritical>
				return pdPASS;
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	e063      	b.n	800b680 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d103      	bne.n	800b5c6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b5be:	f001 ff4d 	bl	800d45c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	e05c      	b.n	800b680 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b5c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d106      	bne.n	800b5da <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b5cc:	f107 0314 	add.w	r3, r7, #20
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f001 f83f 	bl	800c654 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b5da:	f001 ff3f 	bl	800d45c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b5de:	f000 fda7 	bl	800c130 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b5e2:	f001 ff09 	bl	800d3f8 <vPortEnterCritical>
 800b5e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b5ec:	b25b      	sxtb	r3, r3
 800b5ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5f2:	d103      	bne.n	800b5fc <xQueueGenericSend+0x174>
 800b5f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b5fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b602:	b25b      	sxtb	r3, r3
 800b604:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b608:	d103      	bne.n	800b612 <xQueueGenericSend+0x18a>
 800b60a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b60c:	2200      	movs	r2, #0
 800b60e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b612:	f001 ff23 	bl	800d45c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b616:	1d3a      	adds	r2, r7, #4
 800b618:	f107 0314 	add.w	r3, r7, #20
 800b61c:	4611      	mov	r1, r2
 800b61e:	4618      	mov	r0, r3
 800b620:	f001 f82e 	bl	800c680 <xTaskCheckForTimeOut>
 800b624:	4603      	mov	r3, r0
 800b626:	2b00      	cmp	r3, #0
 800b628:	d124      	bne.n	800b674 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b62a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b62c:	f000 faa6 	bl	800bb7c <prvIsQueueFull>
 800b630:	4603      	mov	r3, r0
 800b632:	2b00      	cmp	r3, #0
 800b634:	d018      	beq.n	800b668 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b638:	3310      	adds	r3, #16
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	4611      	mov	r1, r2
 800b63e:	4618      	mov	r0, r3
 800b640:	f000 ff52 	bl	800c4e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b644:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b646:	f000 fa31 	bl	800baac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b64a:	f000 fd7f 	bl	800c14c <xTaskResumeAll>
 800b64e:	4603      	mov	r3, r0
 800b650:	2b00      	cmp	r3, #0
 800b652:	f47f af7c 	bne.w	800b54e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b656:	4b0c      	ldr	r3, [pc, #48]	@ (800b688 <xQueueGenericSend+0x200>)
 800b658:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b65c:	601a      	str	r2, [r3, #0]
 800b65e:	f3bf 8f4f 	dsb	sy
 800b662:	f3bf 8f6f 	isb	sy
 800b666:	e772      	b.n	800b54e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b668:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b66a:	f000 fa1f 	bl	800baac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b66e:	f000 fd6d 	bl	800c14c <xTaskResumeAll>
 800b672:	e76c      	b.n	800b54e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b674:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b676:	f000 fa19 	bl	800baac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b67a:	f000 fd67 	bl	800c14c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b67e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b680:	4618      	mov	r0, r3
 800b682:	3738      	adds	r7, #56	@ 0x38
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}
 800b688:	e000ed04 	.word	0xe000ed04

0800b68c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b090      	sub	sp, #64	@ 0x40
 800b690:	af00      	add	r7, sp, #0
 800b692:	60f8      	str	r0, [r7, #12]
 800b694:	60b9      	str	r1, [r7, #8]
 800b696:	607a      	str	r2, [r7, #4]
 800b698:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b69e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d10b      	bne.n	800b6bc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b6a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6a8:	f383 8811 	msr	BASEPRI, r3
 800b6ac:	f3bf 8f6f 	isb	sy
 800b6b0:	f3bf 8f4f 	dsb	sy
 800b6b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b6b6:	bf00      	nop
 800b6b8:	bf00      	nop
 800b6ba:	e7fd      	b.n	800b6b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d103      	bne.n	800b6ca <xQueueGenericSendFromISR+0x3e>
 800b6c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d101      	bne.n	800b6ce <xQueueGenericSendFromISR+0x42>
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	e000      	b.n	800b6d0 <xQueueGenericSendFromISR+0x44>
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d10b      	bne.n	800b6ec <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b6d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6d8:	f383 8811 	msr	BASEPRI, r3
 800b6dc:	f3bf 8f6f 	isb	sy
 800b6e0:	f3bf 8f4f 	dsb	sy
 800b6e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b6e6:	bf00      	nop
 800b6e8:	bf00      	nop
 800b6ea:	e7fd      	b.n	800b6e8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	2b02      	cmp	r3, #2
 800b6f0:	d103      	bne.n	800b6fa <xQueueGenericSendFromISR+0x6e>
 800b6f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6f6:	2b01      	cmp	r3, #1
 800b6f8:	d101      	bne.n	800b6fe <xQueueGenericSendFromISR+0x72>
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	e000      	b.n	800b700 <xQueueGenericSendFromISR+0x74>
 800b6fe:	2300      	movs	r3, #0
 800b700:	2b00      	cmp	r3, #0
 800b702:	d10b      	bne.n	800b71c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b708:	f383 8811 	msr	BASEPRI, r3
 800b70c:	f3bf 8f6f 	isb	sy
 800b710:	f3bf 8f4f 	dsb	sy
 800b714:	623b      	str	r3, [r7, #32]
}
 800b716:	bf00      	nop
 800b718:	bf00      	nop
 800b71a:	e7fd      	b.n	800b718 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b71c:	f001 ff4c 	bl	800d5b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b720:	f3ef 8211 	mrs	r2, BASEPRI
 800b724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b728:	f383 8811 	msr	BASEPRI, r3
 800b72c:	f3bf 8f6f 	isb	sy
 800b730:	f3bf 8f4f 	dsb	sy
 800b734:	61fa      	str	r2, [r7, #28]
 800b736:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b738:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b73a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b73c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b73e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b744:	429a      	cmp	r2, r3
 800b746:	d302      	bcc.n	800b74e <xQueueGenericSendFromISR+0xc2>
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	2b02      	cmp	r3, #2
 800b74c:	d12f      	bne.n	800b7ae <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b74e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b750:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b754:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b75a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b75c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b75e:	683a      	ldr	r2, [r7, #0]
 800b760:	68b9      	ldr	r1, [r7, #8]
 800b762:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b764:	f000 f912 	bl	800b98c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b768:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b76c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b770:	d112      	bne.n	800b798 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b776:	2b00      	cmp	r3, #0
 800b778:	d016      	beq.n	800b7a8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b77a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b77c:	3324      	adds	r3, #36	@ 0x24
 800b77e:	4618      	mov	r0, r3
 800b780:	f000 ff04 	bl	800c58c <xTaskRemoveFromEventList>
 800b784:	4603      	mov	r3, r0
 800b786:	2b00      	cmp	r3, #0
 800b788:	d00e      	beq.n	800b7a8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d00b      	beq.n	800b7a8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2201      	movs	r2, #1
 800b794:	601a      	str	r2, [r3, #0]
 800b796:	e007      	b.n	800b7a8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b798:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b79c:	3301      	adds	r3, #1
 800b79e:	b2db      	uxtb	r3, r3
 800b7a0:	b25a      	sxtb	r2, r3
 800b7a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b7ac:	e001      	b.n	800b7b2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b7b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7b4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b7bc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b7be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	3740      	adds	r7, #64	@ 0x40
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}

0800b7c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b08c      	sub	sp, #48	@ 0x30
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	60f8      	str	r0, [r7, #12]
 800b7d0:	60b9      	str	r1, [r7, #8]
 800b7d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b7dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d10b      	bne.n	800b7fa <xQueueReceive+0x32>
	__asm volatile
 800b7e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7e6:	f383 8811 	msr	BASEPRI, r3
 800b7ea:	f3bf 8f6f 	isb	sy
 800b7ee:	f3bf 8f4f 	dsb	sy
 800b7f2:	623b      	str	r3, [r7, #32]
}
 800b7f4:	bf00      	nop
 800b7f6:	bf00      	nop
 800b7f8:	e7fd      	b.n	800b7f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d103      	bne.n	800b808 <xQueueReceive+0x40>
 800b800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b804:	2b00      	cmp	r3, #0
 800b806:	d101      	bne.n	800b80c <xQueueReceive+0x44>
 800b808:	2301      	movs	r3, #1
 800b80a:	e000      	b.n	800b80e <xQueueReceive+0x46>
 800b80c:	2300      	movs	r3, #0
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d10b      	bne.n	800b82a <xQueueReceive+0x62>
	__asm volatile
 800b812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b816:	f383 8811 	msr	BASEPRI, r3
 800b81a:	f3bf 8f6f 	isb	sy
 800b81e:	f3bf 8f4f 	dsb	sy
 800b822:	61fb      	str	r3, [r7, #28]
}
 800b824:	bf00      	nop
 800b826:	bf00      	nop
 800b828:	e7fd      	b.n	800b826 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b82a:	f001 f875 	bl	800c918 <xTaskGetSchedulerState>
 800b82e:	4603      	mov	r3, r0
 800b830:	2b00      	cmp	r3, #0
 800b832:	d102      	bne.n	800b83a <xQueueReceive+0x72>
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d101      	bne.n	800b83e <xQueueReceive+0x76>
 800b83a:	2301      	movs	r3, #1
 800b83c:	e000      	b.n	800b840 <xQueueReceive+0x78>
 800b83e:	2300      	movs	r3, #0
 800b840:	2b00      	cmp	r3, #0
 800b842:	d10b      	bne.n	800b85c <xQueueReceive+0x94>
	__asm volatile
 800b844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b848:	f383 8811 	msr	BASEPRI, r3
 800b84c:	f3bf 8f6f 	isb	sy
 800b850:	f3bf 8f4f 	dsb	sy
 800b854:	61bb      	str	r3, [r7, #24]
}
 800b856:	bf00      	nop
 800b858:	bf00      	nop
 800b85a:	e7fd      	b.n	800b858 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b85c:	f001 fdcc 	bl	800d3f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b864:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d01f      	beq.n	800b8ac <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b86c:	68b9      	ldr	r1, [r7, #8]
 800b86e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b870:	f000 f8f6 	bl	800ba60 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b876:	1e5a      	subs	r2, r3, #1
 800b878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b87a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b87c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b87e:	691b      	ldr	r3, [r3, #16]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d00f      	beq.n	800b8a4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b886:	3310      	adds	r3, #16
 800b888:	4618      	mov	r0, r3
 800b88a:	f000 fe7f 	bl	800c58c <xTaskRemoveFromEventList>
 800b88e:	4603      	mov	r3, r0
 800b890:	2b00      	cmp	r3, #0
 800b892:	d007      	beq.n	800b8a4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b894:	4b3c      	ldr	r3, [pc, #240]	@ (800b988 <xQueueReceive+0x1c0>)
 800b896:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b89a:	601a      	str	r2, [r3, #0]
 800b89c:	f3bf 8f4f 	dsb	sy
 800b8a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b8a4:	f001 fdda 	bl	800d45c <vPortExitCritical>
				return pdPASS;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	e069      	b.n	800b980 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d103      	bne.n	800b8ba <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b8b2:	f001 fdd3 	bl	800d45c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	e062      	b.n	800b980 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b8ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d106      	bne.n	800b8ce <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b8c0:	f107 0310 	add.w	r3, r7, #16
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f000 fec5 	bl	800c654 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b8ce:	f001 fdc5 	bl	800d45c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b8d2:	f000 fc2d 	bl	800c130 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b8d6:	f001 fd8f 	bl	800d3f8 <vPortEnterCritical>
 800b8da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b8e0:	b25b      	sxtb	r3, r3
 800b8e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8e6:	d103      	bne.n	800b8f0 <xQueueReceive+0x128>
 800b8e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b8f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b8f6:	b25b      	sxtb	r3, r3
 800b8f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8fc:	d103      	bne.n	800b906 <xQueueReceive+0x13e>
 800b8fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b900:	2200      	movs	r2, #0
 800b902:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b906:	f001 fda9 	bl	800d45c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b90a:	1d3a      	adds	r2, r7, #4
 800b90c:	f107 0310 	add.w	r3, r7, #16
 800b910:	4611      	mov	r1, r2
 800b912:	4618      	mov	r0, r3
 800b914:	f000 feb4 	bl	800c680 <xTaskCheckForTimeOut>
 800b918:	4603      	mov	r3, r0
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d123      	bne.n	800b966 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b91e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b920:	f000 f916 	bl	800bb50 <prvIsQueueEmpty>
 800b924:	4603      	mov	r3, r0
 800b926:	2b00      	cmp	r3, #0
 800b928:	d017      	beq.n	800b95a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b92a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b92c:	3324      	adds	r3, #36	@ 0x24
 800b92e:	687a      	ldr	r2, [r7, #4]
 800b930:	4611      	mov	r1, r2
 800b932:	4618      	mov	r0, r3
 800b934:	f000 fdd8 	bl	800c4e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b938:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b93a:	f000 f8b7 	bl	800baac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b93e:	f000 fc05 	bl	800c14c <xTaskResumeAll>
 800b942:	4603      	mov	r3, r0
 800b944:	2b00      	cmp	r3, #0
 800b946:	d189      	bne.n	800b85c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b948:	4b0f      	ldr	r3, [pc, #60]	@ (800b988 <xQueueReceive+0x1c0>)
 800b94a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b94e:	601a      	str	r2, [r3, #0]
 800b950:	f3bf 8f4f 	dsb	sy
 800b954:	f3bf 8f6f 	isb	sy
 800b958:	e780      	b.n	800b85c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b95a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b95c:	f000 f8a6 	bl	800baac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b960:	f000 fbf4 	bl	800c14c <xTaskResumeAll>
 800b964:	e77a      	b.n	800b85c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b966:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b968:	f000 f8a0 	bl	800baac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b96c:	f000 fbee 	bl	800c14c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b970:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b972:	f000 f8ed 	bl	800bb50 <prvIsQueueEmpty>
 800b976:	4603      	mov	r3, r0
 800b978:	2b00      	cmp	r3, #0
 800b97a:	f43f af6f 	beq.w	800b85c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b97e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b980:	4618      	mov	r0, r3
 800b982:	3730      	adds	r7, #48	@ 0x30
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}
 800b988:	e000ed04 	.word	0xe000ed04

0800b98c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b086      	sub	sp, #24
 800b990:	af00      	add	r7, sp, #0
 800b992:	60f8      	str	r0, [r7, #12]
 800b994:	60b9      	str	r1, [r7, #8]
 800b996:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b998:	2300      	movs	r3, #0
 800b99a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d10d      	bne.n	800b9c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d14d      	bne.n	800ba4e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	689b      	ldr	r3, [r3, #8]
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f000 ffcc 	bl	800c954 <xTaskPriorityDisinherit>
 800b9bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	609a      	str	r2, [r3, #8]
 800b9c4:	e043      	b.n	800ba4e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d119      	bne.n	800ba00 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	6858      	ldr	r0, [r3, #4]
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9d4:	461a      	mov	r2, r3
 800b9d6:	68b9      	ldr	r1, [r7, #8]
 800b9d8:	f002 fc8f 	bl	800e2fa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	685a      	ldr	r2, [r3, #4]
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9e4:	441a      	add	r2, r3
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	685a      	ldr	r2, [r3, #4]
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	689b      	ldr	r3, [r3, #8]
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d32b      	bcc.n	800ba4e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681a      	ldr	r2, [r3, #0]
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	605a      	str	r2, [r3, #4]
 800b9fe:	e026      	b.n	800ba4e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	68d8      	ldr	r0, [r3, #12]
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba08:	461a      	mov	r2, r3
 800ba0a:	68b9      	ldr	r1, [r7, #8]
 800ba0c:	f002 fc75 	bl	800e2fa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	68da      	ldr	r2, [r3, #12]
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba18:	425b      	negs	r3, r3
 800ba1a:	441a      	add	r2, r3
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	68da      	ldr	r2, [r3, #12]
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d207      	bcs.n	800ba3c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	689a      	ldr	r2, [r3, #8]
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba34:	425b      	negs	r3, r3
 800ba36:	441a      	add	r2, r3
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2b02      	cmp	r3, #2
 800ba40:	d105      	bne.n	800ba4e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d002      	beq.n	800ba4e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ba48:	693b      	ldr	r3, [r7, #16]
 800ba4a:	3b01      	subs	r3, #1
 800ba4c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ba4e:	693b      	ldr	r3, [r7, #16]
 800ba50:	1c5a      	adds	r2, r3, #1
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ba56:	697b      	ldr	r3, [r7, #20]
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3718      	adds	r7, #24
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b082      	sub	sp, #8
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
 800ba68:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d018      	beq.n	800baa4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	68da      	ldr	r2, [r3, #12]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba7a:	441a      	add	r2, r3
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	68da      	ldr	r2, [r3, #12]
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	689b      	ldr	r3, [r3, #8]
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	d303      	bcc.n	800ba94 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681a      	ldr	r2, [r3, #0]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	68d9      	ldr	r1, [r3, #12]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	6838      	ldr	r0, [r7, #0]
 800baa0:	f002 fc2b 	bl	800e2fa <memcpy>
	}
}
 800baa4:	bf00      	nop
 800baa6:	3708      	adds	r7, #8
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}

0800baac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b084      	sub	sp, #16
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bab4:	f001 fca0 	bl	800d3f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800babe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bac0:	e011      	b.n	800bae6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d012      	beq.n	800baf0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	3324      	adds	r3, #36	@ 0x24
 800bace:	4618      	mov	r0, r3
 800bad0:	f000 fd5c 	bl	800c58c <xTaskRemoveFromEventList>
 800bad4:	4603      	mov	r3, r0
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d001      	beq.n	800bade <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bada:	f000 fe35 	bl	800c748 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bade:	7bfb      	ldrb	r3, [r7, #15]
 800bae0:	3b01      	subs	r3, #1
 800bae2:	b2db      	uxtb	r3, r3
 800bae4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800baea:	2b00      	cmp	r3, #0
 800baec:	dce9      	bgt.n	800bac2 <prvUnlockQueue+0x16>
 800baee:	e000      	b.n	800baf2 <prvUnlockQueue+0x46>
					break;
 800baf0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	22ff      	movs	r2, #255	@ 0xff
 800baf6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800bafa:	f001 fcaf 	bl	800d45c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bafe:	f001 fc7b 	bl	800d3f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bb08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bb0a:	e011      	b.n	800bb30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	691b      	ldr	r3, [r3, #16]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d012      	beq.n	800bb3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	3310      	adds	r3, #16
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f000 fd37 	bl	800c58c <xTaskRemoveFromEventList>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d001      	beq.n	800bb28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bb24:	f000 fe10 	bl	800c748 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bb28:	7bbb      	ldrb	r3, [r7, #14]
 800bb2a:	3b01      	subs	r3, #1
 800bb2c:	b2db      	uxtb	r3, r3
 800bb2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bb30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	dce9      	bgt.n	800bb0c <prvUnlockQueue+0x60>
 800bb38:	e000      	b.n	800bb3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bb3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	22ff      	movs	r2, #255	@ 0xff
 800bb40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800bb44:	f001 fc8a 	bl	800d45c <vPortExitCritical>
}
 800bb48:	bf00      	nop
 800bb4a:	3710      	adds	r7, #16
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}

0800bb50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b084      	sub	sp, #16
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bb58:	f001 fc4e 	bl	800d3f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d102      	bne.n	800bb6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bb64:	2301      	movs	r3, #1
 800bb66:	60fb      	str	r3, [r7, #12]
 800bb68:	e001      	b.n	800bb6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bb6e:	f001 fc75 	bl	800d45c <vPortExitCritical>

	return xReturn;
 800bb72:	68fb      	ldr	r3, [r7, #12]
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3710      	adds	r7, #16
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b084      	sub	sp, #16
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bb84:	f001 fc38 	bl	800d3f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d102      	bne.n	800bb9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bb94:	2301      	movs	r3, #1
 800bb96:	60fb      	str	r3, [r7, #12]
 800bb98:	e001      	b.n	800bb9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bb9e:	f001 fc5d 	bl	800d45c <vPortExitCritical>

	return xReturn;
 800bba2:	68fb      	ldr	r3, [r7, #12]
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3710      	adds	r7, #16
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}

0800bbac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bbac:	b480      	push	{r7}
 800bbae:	b085      	sub	sp, #20
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
 800bbb4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	60fb      	str	r3, [r7, #12]
 800bbba:	e014      	b.n	800bbe6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bbbc:	4a0f      	ldr	r2, [pc, #60]	@ (800bbfc <vQueueAddToRegistry+0x50>)
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d10b      	bne.n	800bbe0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bbc8:	490c      	ldr	r1, [pc, #48]	@ (800bbfc <vQueueAddToRegistry+0x50>)
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	683a      	ldr	r2, [r7, #0]
 800bbce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bbd2:	4a0a      	ldr	r2, [pc, #40]	@ (800bbfc <vQueueAddToRegistry+0x50>)
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	00db      	lsls	r3, r3, #3
 800bbd8:	4413      	add	r3, r2
 800bbda:	687a      	ldr	r2, [r7, #4]
 800bbdc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bbde:	e006      	b.n	800bbee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	3301      	adds	r3, #1
 800bbe4:	60fb      	str	r3, [r7, #12]
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	2b07      	cmp	r3, #7
 800bbea:	d9e7      	bls.n	800bbbc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bbec:	bf00      	nop
 800bbee:	bf00      	nop
 800bbf0:	3714      	adds	r7, #20
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf8:	4770      	bx	lr
 800bbfa:	bf00      	nop
 800bbfc:	20000bb4 	.word	0x20000bb4

0800bc00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b086      	sub	sp, #24
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	60f8      	str	r0, [r7, #12]
 800bc08:	60b9      	str	r1, [r7, #8]
 800bc0a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bc10:	f001 fbf2 	bl	800d3f8 <vPortEnterCritical>
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bc1a:	b25b      	sxtb	r3, r3
 800bc1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc20:	d103      	bne.n	800bc2a <vQueueWaitForMessageRestricted+0x2a>
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	2200      	movs	r2, #0
 800bc26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bc30:	b25b      	sxtb	r3, r3
 800bc32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc36:	d103      	bne.n	800bc40 <vQueueWaitForMessageRestricted+0x40>
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bc40:	f001 fc0c 	bl	800d45c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bc44:	697b      	ldr	r3, [r7, #20]
 800bc46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d106      	bne.n	800bc5a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	3324      	adds	r3, #36	@ 0x24
 800bc50:	687a      	ldr	r2, [r7, #4]
 800bc52:	68b9      	ldr	r1, [r7, #8]
 800bc54:	4618      	mov	r0, r3
 800bc56:	f000 fc6d 	bl	800c534 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bc5a:	6978      	ldr	r0, [r7, #20]
 800bc5c:	f7ff ff26 	bl	800baac <prvUnlockQueue>
	}
 800bc60:	bf00      	nop
 800bc62:	3718      	adds	r7, #24
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}

0800bc68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b08e      	sub	sp, #56	@ 0x38
 800bc6c:	af04      	add	r7, sp, #16
 800bc6e:	60f8      	str	r0, [r7, #12]
 800bc70:	60b9      	str	r1, [r7, #8]
 800bc72:	607a      	str	r2, [r7, #4]
 800bc74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bc76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d10b      	bne.n	800bc94 <xTaskCreateStatic+0x2c>
	__asm volatile
 800bc7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc80:	f383 8811 	msr	BASEPRI, r3
 800bc84:	f3bf 8f6f 	isb	sy
 800bc88:	f3bf 8f4f 	dsb	sy
 800bc8c:	623b      	str	r3, [r7, #32]
}
 800bc8e:	bf00      	nop
 800bc90:	bf00      	nop
 800bc92:	e7fd      	b.n	800bc90 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bc94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d10b      	bne.n	800bcb2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800bc9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc9e:	f383 8811 	msr	BASEPRI, r3
 800bca2:	f3bf 8f6f 	isb	sy
 800bca6:	f3bf 8f4f 	dsb	sy
 800bcaa:	61fb      	str	r3, [r7, #28]
}
 800bcac:	bf00      	nop
 800bcae:	bf00      	nop
 800bcb0:	e7fd      	b.n	800bcae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bcb2:	23a8      	movs	r3, #168	@ 0xa8
 800bcb4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bcb6:	693b      	ldr	r3, [r7, #16]
 800bcb8:	2ba8      	cmp	r3, #168	@ 0xa8
 800bcba:	d00b      	beq.n	800bcd4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800bcbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcc0:	f383 8811 	msr	BASEPRI, r3
 800bcc4:	f3bf 8f6f 	isb	sy
 800bcc8:	f3bf 8f4f 	dsb	sy
 800bccc:	61bb      	str	r3, [r7, #24]
}
 800bcce:	bf00      	nop
 800bcd0:	bf00      	nop
 800bcd2:	e7fd      	b.n	800bcd0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bcd4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bcd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d01e      	beq.n	800bd1a <xTaskCreateStatic+0xb2>
 800bcdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d01b      	beq.n	800bd1a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bce4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bce8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bcea:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bcec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcee:	2202      	movs	r2, #2
 800bcf0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	9303      	str	r3, [sp, #12]
 800bcf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcfa:	9302      	str	r3, [sp, #8]
 800bcfc:	f107 0314 	add.w	r3, r7, #20
 800bd00:	9301      	str	r3, [sp, #4]
 800bd02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd04:	9300      	str	r3, [sp, #0]
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	687a      	ldr	r2, [r7, #4]
 800bd0a:	68b9      	ldr	r1, [r7, #8]
 800bd0c:	68f8      	ldr	r0, [r7, #12]
 800bd0e:	f000 f851 	bl	800bdb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bd12:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bd14:	f000 f8f6 	bl	800bf04 <prvAddNewTaskToReadyList>
 800bd18:	e001      	b.n	800bd1e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bd1e:	697b      	ldr	r3, [r7, #20]
	}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3728      	adds	r7, #40	@ 0x28
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}

0800bd28 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b08c      	sub	sp, #48	@ 0x30
 800bd2c:	af04      	add	r7, sp, #16
 800bd2e:	60f8      	str	r0, [r7, #12]
 800bd30:	60b9      	str	r1, [r7, #8]
 800bd32:	603b      	str	r3, [r7, #0]
 800bd34:	4613      	mov	r3, r2
 800bd36:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bd38:	88fb      	ldrh	r3, [r7, #6]
 800bd3a:	009b      	lsls	r3, r3, #2
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	f001 fc7d 	bl	800d63c <pvPortMalloc>
 800bd42:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d00e      	beq.n	800bd68 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bd4a:	20a8      	movs	r0, #168	@ 0xa8
 800bd4c:	f001 fc76 	bl	800d63c <pvPortMalloc>
 800bd50:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bd52:	69fb      	ldr	r3, [r7, #28]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d003      	beq.n	800bd60 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bd58:	69fb      	ldr	r3, [r7, #28]
 800bd5a:	697a      	ldr	r2, [r7, #20]
 800bd5c:	631a      	str	r2, [r3, #48]	@ 0x30
 800bd5e:	e005      	b.n	800bd6c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bd60:	6978      	ldr	r0, [r7, #20]
 800bd62:	f001 fd39 	bl	800d7d8 <vPortFree>
 800bd66:	e001      	b.n	800bd6c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bd6c:	69fb      	ldr	r3, [r7, #28]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d017      	beq.n	800bda2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bd72:	69fb      	ldr	r3, [r7, #28]
 800bd74:	2200      	movs	r2, #0
 800bd76:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bd7a:	88fa      	ldrh	r2, [r7, #6]
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	9303      	str	r3, [sp, #12]
 800bd80:	69fb      	ldr	r3, [r7, #28]
 800bd82:	9302      	str	r3, [sp, #8]
 800bd84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd86:	9301      	str	r3, [sp, #4]
 800bd88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd8a:	9300      	str	r3, [sp, #0]
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	68b9      	ldr	r1, [r7, #8]
 800bd90:	68f8      	ldr	r0, [r7, #12]
 800bd92:	f000 f80f 	bl	800bdb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bd96:	69f8      	ldr	r0, [r7, #28]
 800bd98:	f000 f8b4 	bl	800bf04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	61bb      	str	r3, [r7, #24]
 800bda0:	e002      	b.n	800bda8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bda2:	f04f 33ff 	mov.w	r3, #4294967295
 800bda6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bda8:	69bb      	ldr	r3, [r7, #24]
	}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3720      	adds	r7, #32
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
	...

0800bdb4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b088      	sub	sp, #32
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	60f8      	str	r0, [r7, #12]
 800bdbc:	60b9      	str	r1, [r7, #8]
 800bdbe:	607a      	str	r2, [r7, #4]
 800bdc0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bdc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdc4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	009b      	lsls	r3, r3, #2
 800bdca:	461a      	mov	r2, r3
 800bdcc:	21a5      	movs	r1, #165	@ 0xa5
 800bdce:	f002 f9b3 	bl	800e138 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bdd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bddc:	3b01      	subs	r3, #1
 800bdde:	009b      	lsls	r3, r3, #2
 800bde0:	4413      	add	r3, r2
 800bde2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bde4:	69bb      	ldr	r3, [r7, #24]
 800bde6:	f023 0307 	bic.w	r3, r3, #7
 800bdea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bdec:	69bb      	ldr	r3, [r7, #24]
 800bdee:	f003 0307 	and.w	r3, r3, #7
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d00b      	beq.n	800be0e <prvInitialiseNewTask+0x5a>
	__asm volatile
 800bdf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdfa:	f383 8811 	msr	BASEPRI, r3
 800bdfe:	f3bf 8f6f 	isb	sy
 800be02:	f3bf 8f4f 	dsb	sy
 800be06:	617b      	str	r3, [r7, #20]
}
 800be08:	bf00      	nop
 800be0a:	bf00      	nop
 800be0c:	e7fd      	b.n	800be0a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d01f      	beq.n	800be54 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800be14:	2300      	movs	r3, #0
 800be16:	61fb      	str	r3, [r7, #28]
 800be18:	e012      	b.n	800be40 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800be1a:	68ba      	ldr	r2, [r7, #8]
 800be1c:	69fb      	ldr	r3, [r7, #28]
 800be1e:	4413      	add	r3, r2
 800be20:	7819      	ldrb	r1, [r3, #0]
 800be22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be24:	69fb      	ldr	r3, [r7, #28]
 800be26:	4413      	add	r3, r2
 800be28:	3334      	adds	r3, #52	@ 0x34
 800be2a:	460a      	mov	r2, r1
 800be2c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800be2e:	68ba      	ldr	r2, [r7, #8]
 800be30:	69fb      	ldr	r3, [r7, #28]
 800be32:	4413      	add	r3, r2
 800be34:	781b      	ldrb	r3, [r3, #0]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d006      	beq.n	800be48 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800be3a:	69fb      	ldr	r3, [r7, #28]
 800be3c:	3301      	adds	r3, #1
 800be3e:	61fb      	str	r3, [r7, #28]
 800be40:	69fb      	ldr	r3, [r7, #28]
 800be42:	2b0f      	cmp	r3, #15
 800be44:	d9e9      	bls.n	800be1a <prvInitialiseNewTask+0x66>
 800be46:	e000      	b.n	800be4a <prvInitialiseNewTask+0x96>
			{
				break;
 800be48:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800be4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be4c:	2200      	movs	r2, #0
 800be4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800be52:	e003      	b.n	800be5c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800be54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be56:	2200      	movs	r2, #0
 800be58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800be5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be5e:	2b37      	cmp	r3, #55	@ 0x37
 800be60:	d901      	bls.n	800be66 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800be62:	2337      	movs	r3, #55	@ 0x37
 800be64:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800be66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be6a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800be6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be70:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800be72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be74:	2200      	movs	r2, #0
 800be76:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800be78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be7a:	3304      	adds	r3, #4
 800be7c:	4618      	mov	r0, r3
 800be7e:	f7ff f965 	bl	800b14c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800be82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be84:	3318      	adds	r3, #24
 800be86:	4618      	mov	r0, r3
 800be88:	f7ff f960 	bl	800b14c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800be8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be90:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be94:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800be98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be9a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800be9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bea0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bea4:	2200      	movs	r2, #0
 800bea6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800beaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beac:	2200      	movs	r2, #0
 800beae:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800beb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beb4:	3354      	adds	r3, #84	@ 0x54
 800beb6:	224c      	movs	r2, #76	@ 0x4c
 800beb8:	2100      	movs	r1, #0
 800beba:	4618      	mov	r0, r3
 800bebc:	f002 f93c 	bl	800e138 <memset>
 800bec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bec2:	4a0d      	ldr	r2, [pc, #52]	@ (800bef8 <prvInitialiseNewTask+0x144>)
 800bec4:	659a      	str	r2, [r3, #88]	@ 0x58
 800bec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bec8:	4a0c      	ldr	r2, [pc, #48]	@ (800befc <prvInitialiseNewTask+0x148>)
 800beca:	65da      	str	r2, [r3, #92]	@ 0x5c
 800becc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bece:	4a0c      	ldr	r2, [pc, #48]	@ (800bf00 <prvInitialiseNewTask+0x14c>)
 800bed0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bed2:	683a      	ldr	r2, [r7, #0]
 800bed4:	68f9      	ldr	r1, [r7, #12]
 800bed6:	69b8      	ldr	r0, [r7, #24]
 800bed8:	f001 f95a 	bl	800d190 <pxPortInitialiseStack>
 800bedc:	4602      	mov	r2, r0
 800bede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bee0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d002      	beq.n	800beee <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800beec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800beee:	bf00      	nop
 800bef0:	3720      	adds	r7, #32
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}
 800bef6:	bf00      	nop
 800bef8:	20005250 	.word	0x20005250
 800befc:	200052b8 	.word	0x200052b8
 800bf00:	20005320 	.word	0x20005320

0800bf04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b082      	sub	sp, #8
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bf0c:	f001 fa74 	bl	800d3f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bf10:	4b2d      	ldr	r3, [pc, #180]	@ (800bfc8 <prvAddNewTaskToReadyList+0xc4>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	3301      	adds	r3, #1
 800bf16:	4a2c      	ldr	r2, [pc, #176]	@ (800bfc8 <prvAddNewTaskToReadyList+0xc4>)
 800bf18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bf1a:	4b2c      	ldr	r3, [pc, #176]	@ (800bfcc <prvAddNewTaskToReadyList+0xc8>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d109      	bne.n	800bf36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bf22:	4a2a      	ldr	r2, [pc, #168]	@ (800bfcc <prvAddNewTaskToReadyList+0xc8>)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bf28:	4b27      	ldr	r3, [pc, #156]	@ (800bfc8 <prvAddNewTaskToReadyList+0xc4>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	2b01      	cmp	r3, #1
 800bf2e:	d110      	bne.n	800bf52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bf30:	f000 fc2e 	bl	800c790 <prvInitialiseTaskLists>
 800bf34:	e00d      	b.n	800bf52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bf36:	4b26      	ldr	r3, [pc, #152]	@ (800bfd0 <prvAddNewTaskToReadyList+0xcc>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d109      	bne.n	800bf52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bf3e:	4b23      	ldr	r3, [pc, #140]	@ (800bfcc <prvAddNewTaskToReadyList+0xc8>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf48:	429a      	cmp	r2, r3
 800bf4a:	d802      	bhi.n	800bf52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bf4c:	4a1f      	ldr	r2, [pc, #124]	@ (800bfcc <prvAddNewTaskToReadyList+0xc8>)
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bf52:	4b20      	ldr	r3, [pc, #128]	@ (800bfd4 <prvAddNewTaskToReadyList+0xd0>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	3301      	adds	r3, #1
 800bf58:	4a1e      	ldr	r2, [pc, #120]	@ (800bfd4 <prvAddNewTaskToReadyList+0xd0>)
 800bf5a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bf5c:	4b1d      	ldr	r3, [pc, #116]	@ (800bfd4 <prvAddNewTaskToReadyList+0xd0>)
 800bf5e:	681a      	ldr	r2, [r3, #0]
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf68:	4b1b      	ldr	r3, [pc, #108]	@ (800bfd8 <prvAddNewTaskToReadyList+0xd4>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	d903      	bls.n	800bf78 <prvAddNewTaskToReadyList+0x74>
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf74:	4a18      	ldr	r2, [pc, #96]	@ (800bfd8 <prvAddNewTaskToReadyList+0xd4>)
 800bf76:	6013      	str	r3, [r2, #0]
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf7c:	4613      	mov	r3, r2
 800bf7e:	009b      	lsls	r3, r3, #2
 800bf80:	4413      	add	r3, r2
 800bf82:	009b      	lsls	r3, r3, #2
 800bf84:	4a15      	ldr	r2, [pc, #84]	@ (800bfdc <prvAddNewTaskToReadyList+0xd8>)
 800bf86:	441a      	add	r2, r3
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	3304      	adds	r3, #4
 800bf8c:	4619      	mov	r1, r3
 800bf8e:	4610      	mov	r0, r2
 800bf90:	f7ff f8e9 	bl	800b166 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bf94:	f001 fa62 	bl	800d45c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bf98:	4b0d      	ldr	r3, [pc, #52]	@ (800bfd0 <prvAddNewTaskToReadyList+0xcc>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d00e      	beq.n	800bfbe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bfa0:	4b0a      	ldr	r3, [pc, #40]	@ (800bfcc <prvAddNewTaskToReadyList+0xc8>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfaa:	429a      	cmp	r2, r3
 800bfac:	d207      	bcs.n	800bfbe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bfae:	4b0c      	ldr	r3, [pc, #48]	@ (800bfe0 <prvAddNewTaskToReadyList+0xdc>)
 800bfb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bfb4:	601a      	str	r2, [r3, #0]
 800bfb6:	f3bf 8f4f 	dsb	sy
 800bfba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bfbe:	bf00      	nop
 800bfc0:	3708      	adds	r7, #8
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}
 800bfc6:	bf00      	nop
 800bfc8:	200010c8 	.word	0x200010c8
 800bfcc:	20000bf4 	.word	0x20000bf4
 800bfd0:	200010d4 	.word	0x200010d4
 800bfd4:	200010e4 	.word	0x200010e4
 800bfd8:	200010d0 	.word	0x200010d0
 800bfdc:	20000bf8 	.word	0x20000bf8
 800bfe0:	e000ed04 	.word	0xe000ed04

0800bfe4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b084      	sub	sp, #16
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bfec:	2300      	movs	r3, #0
 800bfee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d018      	beq.n	800c028 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bff6:	4b14      	ldr	r3, [pc, #80]	@ (800c048 <vTaskDelay+0x64>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d00b      	beq.n	800c016 <vTaskDelay+0x32>
	__asm volatile
 800bffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c002:	f383 8811 	msr	BASEPRI, r3
 800c006:	f3bf 8f6f 	isb	sy
 800c00a:	f3bf 8f4f 	dsb	sy
 800c00e:	60bb      	str	r3, [r7, #8]
}
 800c010:	bf00      	nop
 800c012:	bf00      	nop
 800c014:	e7fd      	b.n	800c012 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c016:	f000 f88b 	bl	800c130 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c01a:	2100      	movs	r1, #0
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f000 fd09 	bl	800ca34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c022:	f000 f893 	bl	800c14c <xTaskResumeAll>
 800c026:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d107      	bne.n	800c03e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c02e:	4b07      	ldr	r3, [pc, #28]	@ (800c04c <vTaskDelay+0x68>)
 800c030:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c034:	601a      	str	r2, [r3, #0]
 800c036:	f3bf 8f4f 	dsb	sy
 800c03a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c03e:	bf00      	nop
 800c040:	3710      	adds	r7, #16
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}
 800c046:	bf00      	nop
 800c048:	200010f0 	.word	0x200010f0
 800c04c:	e000ed04 	.word	0xe000ed04

0800c050 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b08a      	sub	sp, #40	@ 0x28
 800c054:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c056:	2300      	movs	r3, #0
 800c058:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c05a:	2300      	movs	r3, #0
 800c05c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c05e:	463a      	mov	r2, r7
 800c060:	1d39      	adds	r1, r7, #4
 800c062:	f107 0308 	add.w	r3, r7, #8
 800c066:	4618      	mov	r0, r3
 800c068:	f7ff f81c 	bl	800b0a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c06c:	6839      	ldr	r1, [r7, #0]
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	68ba      	ldr	r2, [r7, #8]
 800c072:	9202      	str	r2, [sp, #8]
 800c074:	9301      	str	r3, [sp, #4]
 800c076:	2300      	movs	r3, #0
 800c078:	9300      	str	r3, [sp, #0]
 800c07a:	2300      	movs	r3, #0
 800c07c:	460a      	mov	r2, r1
 800c07e:	4924      	ldr	r1, [pc, #144]	@ (800c110 <vTaskStartScheduler+0xc0>)
 800c080:	4824      	ldr	r0, [pc, #144]	@ (800c114 <vTaskStartScheduler+0xc4>)
 800c082:	f7ff fdf1 	bl	800bc68 <xTaskCreateStatic>
 800c086:	4603      	mov	r3, r0
 800c088:	4a23      	ldr	r2, [pc, #140]	@ (800c118 <vTaskStartScheduler+0xc8>)
 800c08a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c08c:	4b22      	ldr	r3, [pc, #136]	@ (800c118 <vTaskStartScheduler+0xc8>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d002      	beq.n	800c09a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c094:	2301      	movs	r3, #1
 800c096:	617b      	str	r3, [r7, #20]
 800c098:	e001      	b.n	800c09e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c09a:	2300      	movs	r3, #0
 800c09c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c09e:	697b      	ldr	r3, [r7, #20]
 800c0a0:	2b01      	cmp	r3, #1
 800c0a2:	d102      	bne.n	800c0aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c0a4:	f000 fd1a 	bl	800cadc <xTimerCreateTimerTask>
 800c0a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c0aa:	697b      	ldr	r3, [r7, #20]
 800c0ac:	2b01      	cmp	r3, #1
 800c0ae:	d11b      	bne.n	800c0e8 <vTaskStartScheduler+0x98>
	__asm volatile
 800c0b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0b4:	f383 8811 	msr	BASEPRI, r3
 800c0b8:	f3bf 8f6f 	isb	sy
 800c0bc:	f3bf 8f4f 	dsb	sy
 800c0c0:	613b      	str	r3, [r7, #16]
}
 800c0c2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c0c4:	4b15      	ldr	r3, [pc, #84]	@ (800c11c <vTaskStartScheduler+0xcc>)
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	3354      	adds	r3, #84	@ 0x54
 800c0ca:	4a15      	ldr	r2, [pc, #84]	@ (800c120 <vTaskStartScheduler+0xd0>)
 800c0cc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c0ce:	4b15      	ldr	r3, [pc, #84]	@ (800c124 <vTaskStartScheduler+0xd4>)
 800c0d0:	f04f 32ff 	mov.w	r2, #4294967295
 800c0d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c0d6:	4b14      	ldr	r3, [pc, #80]	@ (800c128 <vTaskStartScheduler+0xd8>)
 800c0d8:	2201      	movs	r2, #1
 800c0da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c0dc:	4b13      	ldr	r3, [pc, #76]	@ (800c12c <vTaskStartScheduler+0xdc>)
 800c0de:	2200      	movs	r2, #0
 800c0e0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c0e2:	f001 f8e5 	bl	800d2b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c0e6:	e00f      	b.n	800c108 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0ee:	d10b      	bne.n	800c108 <vTaskStartScheduler+0xb8>
	__asm volatile
 800c0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0f4:	f383 8811 	msr	BASEPRI, r3
 800c0f8:	f3bf 8f6f 	isb	sy
 800c0fc:	f3bf 8f4f 	dsb	sy
 800c100:	60fb      	str	r3, [r7, #12]
}
 800c102:	bf00      	nop
 800c104:	bf00      	nop
 800c106:	e7fd      	b.n	800c104 <vTaskStartScheduler+0xb4>
}
 800c108:	bf00      	nop
 800c10a:	3718      	adds	r7, #24
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}
 800c110:	0800ef44 	.word	0x0800ef44
 800c114:	0800c761 	.word	0x0800c761
 800c118:	200010ec 	.word	0x200010ec
 800c11c:	20000bf4 	.word	0x20000bf4
 800c120:	20000034 	.word	0x20000034
 800c124:	200010e8 	.word	0x200010e8
 800c128:	200010d4 	.word	0x200010d4
 800c12c:	200010cc 	.word	0x200010cc

0800c130 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c130:	b480      	push	{r7}
 800c132:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c134:	4b04      	ldr	r3, [pc, #16]	@ (800c148 <vTaskSuspendAll+0x18>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	3301      	adds	r3, #1
 800c13a:	4a03      	ldr	r2, [pc, #12]	@ (800c148 <vTaskSuspendAll+0x18>)
 800c13c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c13e:	bf00      	nop
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr
 800c148:	200010f0 	.word	0x200010f0

0800c14c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b084      	sub	sp, #16
 800c150:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c152:	2300      	movs	r3, #0
 800c154:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c156:	2300      	movs	r3, #0
 800c158:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c15a:	4b42      	ldr	r3, [pc, #264]	@ (800c264 <xTaskResumeAll+0x118>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d10b      	bne.n	800c17a <xTaskResumeAll+0x2e>
	__asm volatile
 800c162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c166:	f383 8811 	msr	BASEPRI, r3
 800c16a:	f3bf 8f6f 	isb	sy
 800c16e:	f3bf 8f4f 	dsb	sy
 800c172:	603b      	str	r3, [r7, #0]
}
 800c174:	bf00      	nop
 800c176:	bf00      	nop
 800c178:	e7fd      	b.n	800c176 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c17a:	f001 f93d 	bl	800d3f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c17e:	4b39      	ldr	r3, [pc, #228]	@ (800c264 <xTaskResumeAll+0x118>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	3b01      	subs	r3, #1
 800c184:	4a37      	ldr	r2, [pc, #220]	@ (800c264 <xTaskResumeAll+0x118>)
 800c186:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c188:	4b36      	ldr	r3, [pc, #216]	@ (800c264 <xTaskResumeAll+0x118>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d162      	bne.n	800c256 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c190:	4b35      	ldr	r3, [pc, #212]	@ (800c268 <xTaskResumeAll+0x11c>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d05e      	beq.n	800c256 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c198:	e02f      	b.n	800c1fa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c19a:	4b34      	ldr	r3, [pc, #208]	@ (800c26c <xTaskResumeAll+0x120>)
 800c19c:	68db      	ldr	r3, [r3, #12]
 800c19e:	68db      	ldr	r3, [r3, #12]
 800c1a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	3318      	adds	r3, #24
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f7ff f83a 	bl	800b220 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	3304      	adds	r3, #4
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f7ff f835 	bl	800b220 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1ba:	4b2d      	ldr	r3, [pc, #180]	@ (800c270 <xTaskResumeAll+0x124>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	d903      	bls.n	800c1ca <xTaskResumeAll+0x7e>
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1c6:	4a2a      	ldr	r2, [pc, #168]	@ (800c270 <xTaskResumeAll+0x124>)
 800c1c8:	6013      	str	r3, [r2, #0]
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1ce:	4613      	mov	r3, r2
 800c1d0:	009b      	lsls	r3, r3, #2
 800c1d2:	4413      	add	r3, r2
 800c1d4:	009b      	lsls	r3, r3, #2
 800c1d6:	4a27      	ldr	r2, [pc, #156]	@ (800c274 <xTaskResumeAll+0x128>)
 800c1d8:	441a      	add	r2, r3
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	3304      	adds	r3, #4
 800c1de:	4619      	mov	r1, r3
 800c1e0:	4610      	mov	r0, r2
 800c1e2:	f7fe ffc0 	bl	800b166 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1ea:	4b23      	ldr	r3, [pc, #140]	@ (800c278 <xTaskResumeAll+0x12c>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	d302      	bcc.n	800c1fa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c1f4:	4b21      	ldr	r3, [pc, #132]	@ (800c27c <xTaskResumeAll+0x130>)
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c1fa:	4b1c      	ldr	r3, [pc, #112]	@ (800c26c <xTaskResumeAll+0x120>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d1cb      	bne.n	800c19a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d001      	beq.n	800c20c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c208:	f000 fb66 	bl	800c8d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c20c:	4b1c      	ldr	r3, [pc, #112]	@ (800c280 <xTaskResumeAll+0x134>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d010      	beq.n	800c23a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c218:	f000 f846 	bl	800c2a8 <xTaskIncrementTick>
 800c21c:	4603      	mov	r3, r0
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d002      	beq.n	800c228 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c222:	4b16      	ldr	r3, [pc, #88]	@ (800c27c <xTaskResumeAll+0x130>)
 800c224:	2201      	movs	r2, #1
 800c226:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	3b01      	subs	r3, #1
 800c22c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d1f1      	bne.n	800c218 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800c234:	4b12      	ldr	r3, [pc, #72]	@ (800c280 <xTaskResumeAll+0x134>)
 800c236:	2200      	movs	r2, #0
 800c238:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c23a:	4b10      	ldr	r3, [pc, #64]	@ (800c27c <xTaskResumeAll+0x130>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d009      	beq.n	800c256 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c242:	2301      	movs	r3, #1
 800c244:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c246:	4b0f      	ldr	r3, [pc, #60]	@ (800c284 <xTaskResumeAll+0x138>)
 800c248:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c24c:	601a      	str	r2, [r3, #0]
 800c24e:	f3bf 8f4f 	dsb	sy
 800c252:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c256:	f001 f901 	bl	800d45c <vPortExitCritical>

	return xAlreadyYielded;
 800c25a:	68bb      	ldr	r3, [r7, #8]
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3710      	adds	r7, #16
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}
 800c264:	200010f0 	.word	0x200010f0
 800c268:	200010c8 	.word	0x200010c8
 800c26c:	20001088 	.word	0x20001088
 800c270:	200010d0 	.word	0x200010d0
 800c274:	20000bf8 	.word	0x20000bf8
 800c278:	20000bf4 	.word	0x20000bf4
 800c27c:	200010dc 	.word	0x200010dc
 800c280:	200010d8 	.word	0x200010d8
 800c284:	e000ed04 	.word	0xe000ed04

0800c288 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c288:	b480      	push	{r7}
 800c28a:	b083      	sub	sp, #12
 800c28c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c28e:	4b05      	ldr	r3, [pc, #20]	@ (800c2a4 <xTaskGetTickCount+0x1c>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c294:	687b      	ldr	r3, [r7, #4]
}
 800c296:	4618      	mov	r0, r3
 800c298:	370c      	adds	r7, #12
 800c29a:	46bd      	mov	sp, r7
 800c29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a0:	4770      	bx	lr
 800c2a2:	bf00      	nop
 800c2a4:	200010cc 	.word	0x200010cc

0800c2a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b086      	sub	sp, #24
 800c2ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c2b2:	4b4f      	ldr	r3, [pc, #316]	@ (800c3f0 <xTaskIncrementTick+0x148>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	f040 8090 	bne.w	800c3dc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c2bc:	4b4d      	ldr	r3, [pc, #308]	@ (800c3f4 <xTaskIncrementTick+0x14c>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	3301      	adds	r3, #1
 800c2c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c2c4:	4a4b      	ldr	r2, [pc, #300]	@ (800c3f4 <xTaskIncrementTick+0x14c>)
 800c2c6:	693b      	ldr	r3, [r7, #16]
 800c2c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d121      	bne.n	800c314 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c2d0:	4b49      	ldr	r3, [pc, #292]	@ (800c3f8 <xTaskIncrementTick+0x150>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d00b      	beq.n	800c2f2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800c2da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2de:	f383 8811 	msr	BASEPRI, r3
 800c2e2:	f3bf 8f6f 	isb	sy
 800c2e6:	f3bf 8f4f 	dsb	sy
 800c2ea:	603b      	str	r3, [r7, #0]
}
 800c2ec:	bf00      	nop
 800c2ee:	bf00      	nop
 800c2f0:	e7fd      	b.n	800c2ee <xTaskIncrementTick+0x46>
 800c2f2:	4b41      	ldr	r3, [pc, #260]	@ (800c3f8 <xTaskIncrementTick+0x150>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	60fb      	str	r3, [r7, #12]
 800c2f8:	4b40      	ldr	r3, [pc, #256]	@ (800c3fc <xTaskIncrementTick+0x154>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	4a3e      	ldr	r2, [pc, #248]	@ (800c3f8 <xTaskIncrementTick+0x150>)
 800c2fe:	6013      	str	r3, [r2, #0]
 800c300:	4a3e      	ldr	r2, [pc, #248]	@ (800c3fc <xTaskIncrementTick+0x154>)
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	6013      	str	r3, [r2, #0]
 800c306:	4b3e      	ldr	r3, [pc, #248]	@ (800c400 <xTaskIncrementTick+0x158>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	3301      	adds	r3, #1
 800c30c:	4a3c      	ldr	r2, [pc, #240]	@ (800c400 <xTaskIncrementTick+0x158>)
 800c30e:	6013      	str	r3, [r2, #0]
 800c310:	f000 fae2 	bl	800c8d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c314:	4b3b      	ldr	r3, [pc, #236]	@ (800c404 <xTaskIncrementTick+0x15c>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	693a      	ldr	r2, [r7, #16]
 800c31a:	429a      	cmp	r2, r3
 800c31c:	d349      	bcc.n	800c3b2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c31e:	4b36      	ldr	r3, [pc, #216]	@ (800c3f8 <xTaskIncrementTick+0x150>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d104      	bne.n	800c332 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c328:	4b36      	ldr	r3, [pc, #216]	@ (800c404 <xTaskIncrementTick+0x15c>)
 800c32a:	f04f 32ff 	mov.w	r2, #4294967295
 800c32e:	601a      	str	r2, [r3, #0]
					break;
 800c330:	e03f      	b.n	800c3b2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c332:	4b31      	ldr	r3, [pc, #196]	@ (800c3f8 <xTaskIncrementTick+0x150>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	68db      	ldr	r3, [r3, #12]
 800c338:	68db      	ldr	r3, [r3, #12]
 800c33a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	685b      	ldr	r3, [r3, #4]
 800c340:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c342:	693a      	ldr	r2, [r7, #16]
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	429a      	cmp	r2, r3
 800c348:	d203      	bcs.n	800c352 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c34a:	4a2e      	ldr	r2, [pc, #184]	@ (800c404 <xTaskIncrementTick+0x15c>)
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c350:	e02f      	b.n	800c3b2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	3304      	adds	r3, #4
 800c356:	4618      	mov	r0, r3
 800c358:	f7fe ff62 	bl	800b220 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c360:	2b00      	cmp	r3, #0
 800c362:	d004      	beq.n	800c36e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	3318      	adds	r3, #24
 800c368:	4618      	mov	r0, r3
 800c36a:	f7fe ff59 	bl	800b220 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c372:	4b25      	ldr	r3, [pc, #148]	@ (800c408 <xTaskIncrementTick+0x160>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	429a      	cmp	r2, r3
 800c378:	d903      	bls.n	800c382 <xTaskIncrementTick+0xda>
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c37e:	4a22      	ldr	r2, [pc, #136]	@ (800c408 <xTaskIncrementTick+0x160>)
 800c380:	6013      	str	r3, [r2, #0]
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c386:	4613      	mov	r3, r2
 800c388:	009b      	lsls	r3, r3, #2
 800c38a:	4413      	add	r3, r2
 800c38c:	009b      	lsls	r3, r3, #2
 800c38e:	4a1f      	ldr	r2, [pc, #124]	@ (800c40c <xTaskIncrementTick+0x164>)
 800c390:	441a      	add	r2, r3
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	3304      	adds	r3, #4
 800c396:	4619      	mov	r1, r3
 800c398:	4610      	mov	r0, r2
 800c39a:	f7fe fee4 	bl	800b166 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3a2:	4b1b      	ldr	r3, [pc, #108]	@ (800c410 <xTaskIncrementTick+0x168>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3a8:	429a      	cmp	r2, r3
 800c3aa:	d3b8      	bcc.n	800c31e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c3b0:	e7b5      	b.n	800c31e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c3b2:	4b17      	ldr	r3, [pc, #92]	@ (800c410 <xTaskIncrementTick+0x168>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3b8:	4914      	ldr	r1, [pc, #80]	@ (800c40c <xTaskIncrementTick+0x164>)
 800c3ba:	4613      	mov	r3, r2
 800c3bc:	009b      	lsls	r3, r3, #2
 800c3be:	4413      	add	r3, r2
 800c3c0:	009b      	lsls	r3, r3, #2
 800c3c2:	440b      	add	r3, r1
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	2b01      	cmp	r3, #1
 800c3c8:	d901      	bls.n	800c3ce <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c3ce:	4b11      	ldr	r3, [pc, #68]	@ (800c414 <xTaskIncrementTick+0x16c>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d007      	beq.n	800c3e6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	617b      	str	r3, [r7, #20]
 800c3da:	e004      	b.n	800c3e6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c3dc:	4b0e      	ldr	r3, [pc, #56]	@ (800c418 <xTaskIncrementTick+0x170>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	3301      	adds	r3, #1
 800c3e2:	4a0d      	ldr	r2, [pc, #52]	@ (800c418 <xTaskIncrementTick+0x170>)
 800c3e4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c3e6:	697b      	ldr	r3, [r7, #20]
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3718      	adds	r7, #24
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}
 800c3f0:	200010f0 	.word	0x200010f0
 800c3f4:	200010cc 	.word	0x200010cc
 800c3f8:	20001080 	.word	0x20001080
 800c3fc:	20001084 	.word	0x20001084
 800c400:	200010e0 	.word	0x200010e0
 800c404:	200010e8 	.word	0x200010e8
 800c408:	200010d0 	.word	0x200010d0
 800c40c:	20000bf8 	.word	0x20000bf8
 800c410:	20000bf4 	.word	0x20000bf4
 800c414:	200010dc 	.word	0x200010dc
 800c418:	200010d8 	.word	0x200010d8

0800c41c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c41c:	b480      	push	{r7}
 800c41e:	b085      	sub	sp, #20
 800c420:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c422:	4b2b      	ldr	r3, [pc, #172]	@ (800c4d0 <vTaskSwitchContext+0xb4>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d003      	beq.n	800c432 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c42a:	4b2a      	ldr	r3, [pc, #168]	@ (800c4d4 <vTaskSwitchContext+0xb8>)
 800c42c:	2201      	movs	r2, #1
 800c42e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c430:	e047      	b.n	800c4c2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800c432:	4b28      	ldr	r3, [pc, #160]	@ (800c4d4 <vTaskSwitchContext+0xb8>)
 800c434:	2200      	movs	r2, #0
 800c436:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c438:	4b27      	ldr	r3, [pc, #156]	@ (800c4d8 <vTaskSwitchContext+0xbc>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	60fb      	str	r3, [r7, #12]
 800c43e:	e011      	b.n	800c464 <vTaskSwitchContext+0x48>
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d10b      	bne.n	800c45e <vTaskSwitchContext+0x42>
	__asm volatile
 800c446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c44a:	f383 8811 	msr	BASEPRI, r3
 800c44e:	f3bf 8f6f 	isb	sy
 800c452:	f3bf 8f4f 	dsb	sy
 800c456:	607b      	str	r3, [r7, #4]
}
 800c458:	bf00      	nop
 800c45a:	bf00      	nop
 800c45c:	e7fd      	b.n	800c45a <vTaskSwitchContext+0x3e>
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	3b01      	subs	r3, #1
 800c462:	60fb      	str	r3, [r7, #12]
 800c464:	491d      	ldr	r1, [pc, #116]	@ (800c4dc <vTaskSwitchContext+0xc0>)
 800c466:	68fa      	ldr	r2, [r7, #12]
 800c468:	4613      	mov	r3, r2
 800c46a:	009b      	lsls	r3, r3, #2
 800c46c:	4413      	add	r3, r2
 800c46e:	009b      	lsls	r3, r3, #2
 800c470:	440b      	add	r3, r1
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d0e3      	beq.n	800c440 <vTaskSwitchContext+0x24>
 800c478:	68fa      	ldr	r2, [r7, #12]
 800c47a:	4613      	mov	r3, r2
 800c47c:	009b      	lsls	r3, r3, #2
 800c47e:	4413      	add	r3, r2
 800c480:	009b      	lsls	r3, r3, #2
 800c482:	4a16      	ldr	r2, [pc, #88]	@ (800c4dc <vTaskSwitchContext+0xc0>)
 800c484:	4413      	add	r3, r2
 800c486:	60bb      	str	r3, [r7, #8]
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	685b      	ldr	r3, [r3, #4]
 800c48c:	685a      	ldr	r2, [r3, #4]
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	605a      	str	r2, [r3, #4]
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	685a      	ldr	r2, [r3, #4]
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	3308      	adds	r3, #8
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d104      	bne.n	800c4a8 <vTaskSwitchContext+0x8c>
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	685b      	ldr	r3, [r3, #4]
 800c4a2:	685a      	ldr	r2, [r3, #4]
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	605a      	str	r2, [r3, #4]
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	685b      	ldr	r3, [r3, #4]
 800c4ac:	68db      	ldr	r3, [r3, #12]
 800c4ae:	4a0c      	ldr	r2, [pc, #48]	@ (800c4e0 <vTaskSwitchContext+0xc4>)
 800c4b0:	6013      	str	r3, [r2, #0]
 800c4b2:	4a09      	ldr	r2, [pc, #36]	@ (800c4d8 <vTaskSwitchContext+0xbc>)
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c4b8:	4b09      	ldr	r3, [pc, #36]	@ (800c4e0 <vTaskSwitchContext+0xc4>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	3354      	adds	r3, #84	@ 0x54
 800c4be:	4a09      	ldr	r2, [pc, #36]	@ (800c4e4 <vTaskSwitchContext+0xc8>)
 800c4c0:	6013      	str	r3, [r2, #0]
}
 800c4c2:	bf00      	nop
 800c4c4:	3714      	adds	r7, #20
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4cc:	4770      	bx	lr
 800c4ce:	bf00      	nop
 800c4d0:	200010f0 	.word	0x200010f0
 800c4d4:	200010dc 	.word	0x200010dc
 800c4d8:	200010d0 	.word	0x200010d0
 800c4dc:	20000bf8 	.word	0x20000bf8
 800c4e0:	20000bf4 	.word	0x20000bf4
 800c4e4:	20000034 	.word	0x20000034

0800c4e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b084      	sub	sp, #16
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
 800c4f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d10b      	bne.n	800c510 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c4f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4fc:	f383 8811 	msr	BASEPRI, r3
 800c500:	f3bf 8f6f 	isb	sy
 800c504:	f3bf 8f4f 	dsb	sy
 800c508:	60fb      	str	r3, [r7, #12]
}
 800c50a:	bf00      	nop
 800c50c:	bf00      	nop
 800c50e:	e7fd      	b.n	800c50c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c510:	4b07      	ldr	r3, [pc, #28]	@ (800c530 <vTaskPlaceOnEventList+0x48>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	3318      	adds	r3, #24
 800c516:	4619      	mov	r1, r3
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f7fe fe48 	bl	800b1ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c51e:	2101      	movs	r1, #1
 800c520:	6838      	ldr	r0, [r7, #0]
 800c522:	f000 fa87 	bl	800ca34 <prvAddCurrentTaskToDelayedList>
}
 800c526:	bf00      	nop
 800c528:	3710      	adds	r7, #16
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}
 800c52e:	bf00      	nop
 800c530:	20000bf4 	.word	0x20000bf4

0800c534 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c534:	b580      	push	{r7, lr}
 800c536:	b086      	sub	sp, #24
 800c538:	af00      	add	r7, sp, #0
 800c53a:	60f8      	str	r0, [r7, #12]
 800c53c:	60b9      	str	r1, [r7, #8]
 800c53e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d10b      	bne.n	800c55e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c54a:	f383 8811 	msr	BASEPRI, r3
 800c54e:	f3bf 8f6f 	isb	sy
 800c552:	f3bf 8f4f 	dsb	sy
 800c556:	617b      	str	r3, [r7, #20]
}
 800c558:	bf00      	nop
 800c55a:	bf00      	nop
 800c55c:	e7fd      	b.n	800c55a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c55e:	4b0a      	ldr	r3, [pc, #40]	@ (800c588 <vTaskPlaceOnEventListRestricted+0x54>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	3318      	adds	r3, #24
 800c564:	4619      	mov	r1, r3
 800c566:	68f8      	ldr	r0, [r7, #12]
 800c568:	f7fe fdfd 	bl	800b166 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d002      	beq.n	800c578 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c572:	f04f 33ff 	mov.w	r3, #4294967295
 800c576:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c578:	6879      	ldr	r1, [r7, #4]
 800c57a:	68b8      	ldr	r0, [r7, #8]
 800c57c:	f000 fa5a 	bl	800ca34 <prvAddCurrentTaskToDelayedList>
	}
 800c580:	bf00      	nop
 800c582:	3718      	adds	r7, #24
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}
 800c588:	20000bf4 	.word	0x20000bf4

0800c58c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b086      	sub	sp, #24
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	68db      	ldr	r3, [r3, #12]
 800c598:	68db      	ldr	r3, [r3, #12]
 800c59a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c59c:	693b      	ldr	r3, [r7, #16]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d10b      	bne.n	800c5ba <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c5a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5a6:	f383 8811 	msr	BASEPRI, r3
 800c5aa:	f3bf 8f6f 	isb	sy
 800c5ae:	f3bf 8f4f 	dsb	sy
 800c5b2:	60fb      	str	r3, [r7, #12]
}
 800c5b4:	bf00      	nop
 800c5b6:	bf00      	nop
 800c5b8:	e7fd      	b.n	800c5b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c5ba:	693b      	ldr	r3, [r7, #16]
 800c5bc:	3318      	adds	r3, #24
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f7fe fe2e 	bl	800b220 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c5c4:	4b1d      	ldr	r3, [pc, #116]	@ (800c63c <xTaskRemoveFromEventList+0xb0>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d11d      	bne.n	800c608 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	3304      	adds	r3, #4
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	f7fe fe25 	bl	800b220 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5da:	4b19      	ldr	r3, [pc, #100]	@ (800c640 <xTaskRemoveFromEventList+0xb4>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	d903      	bls.n	800c5ea <xTaskRemoveFromEventList+0x5e>
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5e6:	4a16      	ldr	r2, [pc, #88]	@ (800c640 <xTaskRemoveFromEventList+0xb4>)
 800c5e8:	6013      	str	r3, [r2, #0]
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5ee:	4613      	mov	r3, r2
 800c5f0:	009b      	lsls	r3, r3, #2
 800c5f2:	4413      	add	r3, r2
 800c5f4:	009b      	lsls	r3, r3, #2
 800c5f6:	4a13      	ldr	r2, [pc, #76]	@ (800c644 <xTaskRemoveFromEventList+0xb8>)
 800c5f8:	441a      	add	r2, r3
 800c5fa:	693b      	ldr	r3, [r7, #16]
 800c5fc:	3304      	adds	r3, #4
 800c5fe:	4619      	mov	r1, r3
 800c600:	4610      	mov	r0, r2
 800c602:	f7fe fdb0 	bl	800b166 <vListInsertEnd>
 800c606:	e005      	b.n	800c614 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	3318      	adds	r3, #24
 800c60c:	4619      	mov	r1, r3
 800c60e:	480e      	ldr	r0, [pc, #56]	@ (800c648 <xTaskRemoveFromEventList+0xbc>)
 800c610:	f7fe fda9 	bl	800b166 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c618:	4b0c      	ldr	r3, [pc, #48]	@ (800c64c <xTaskRemoveFromEventList+0xc0>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c61e:	429a      	cmp	r2, r3
 800c620:	d905      	bls.n	800c62e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c622:	2301      	movs	r3, #1
 800c624:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c626:	4b0a      	ldr	r3, [pc, #40]	@ (800c650 <xTaskRemoveFromEventList+0xc4>)
 800c628:	2201      	movs	r2, #1
 800c62a:	601a      	str	r2, [r3, #0]
 800c62c:	e001      	b.n	800c632 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c62e:	2300      	movs	r3, #0
 800c630:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c632:	697b      	ldr	r3, [r7, #20]
}
 800c634:	4618      	mov	r0, r3
 800c636:	3718      	adds	r7, #24
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}
 800c63c:	200010f0 	.word	0x200010f0
 800c640:	200010d0 	.word	0x200010d0
 800c644:	20000bf8 	.word	0x20000bf8
 800c648:	20001088 	.word	0x20001088
 800c64c:	20000bf4 	.word	0x20000bf4
 800c650:	200010dc 	.word	0x200010dc

0800c654 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c654:	b480      	push	{r7}
 800c656:	b083      	sub	sp, #12
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c65c:	4b06      	ldr	r3, [pc, #24]	@ (800c678 <vTaskInternalSetTimeOutState+0x24>)
 800c65e:	681a      	ldr	r2, [r3, #0]
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c664:	4b05      	ldr	r3, [pc, #20]	@ (800c67c <vTaskInternalSetTimeOutState+0x28>)
 800c666:	681a      	ldr	r2, [r3, #0]
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	605a      	str	r2, [r3, #4]
}
 800c66c:	bf00      	nop
 800c66e:	370c      	adds	r7, #12
 800c670:	46bd      	mov	sp, r7
 800c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c676:	4770      	bx	lr
 800c678:	200010e0 	.word	0x200010e0
 800c67c:	200010cc 	.word	0x200010cc

0800c680 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b088      	sub	sp, #32
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
 800c688:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d10b      	bne.n	800c6a8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c694:	f383 8811 	msr	BASEPRI, r3
 800c698:	f3bf 8f6f 	isb	sy
 800c69c:	f3bf 8f4f 	dsb	sy
 800c6a0:	613b      	str	r3, [r7, #16]
}
 800c6a2:	bf00      	nop
 800c6a4:	bf00      	nop
 800c6a6:	e7fd      	b.n	800c6a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d10b      	bne.n	800c6c6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c6ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6b2:	f383 8811 	msr	BASEPRI, r3
 800c6b6:	f3bf 8f6f 	isb	sy
 800c6ba:	f3bf 8f4f 	dsb	sy
 800c6be:	60fb      	str	r3, [r7, #12]
}
 800c6c0:	bf00      	nop
 800c6c2:	bf00      	nop
 800c6c4:	e7fd      	b.n	800c6c2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c6c6:	f000 fe97 	bl	800d3f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c6ca:	4b1d      	ldr	r3, [pc, #116]	@ (800c740 <xTaskCheckForTimeOut+0xc0>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	685b      	ldr	r3, [r3, #4]
 800c6d4:	69ba      	ldr	r2, [r7, #24]
 800c6d6:	1ad3      	subs	r3, r2, r3
 800c6d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6e2:	d102      	bne.n	800c6ea <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	61fb      	str	r3, [r7, #28]
 800c6e8:	e023      	b.n	800c732 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681a      	ldr	r2, [r3, #0]
 800c6ee:	4b15      	ldr	r3, [pc, #84]	@ (800c744 <xTaskCheckForTimeOut+0xc4>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	429a      	cmp	r2, r3
 800c6f4:	d007      	beq.n	800c706 <xTaskCheckForTimeOut+0x86>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	685b      	ldr	r3, [r3, #4]
 800c6fa:	69ba      	ldr	r2, [r7, #24]
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	d302      	bcc.n	800c706 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c700:	2301      	movs	r3, #1
 800c702:	61fb      	str	r3, [r7, #28]
 800c704:	e015      	b.n	800c732 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	697a      	ldr	r2, [r7, #20]
 800c70c:	429a      	cmp	r2, r3
 800c70e:	d20b      	bcs.n	800c728 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	681a      	ldr	r2, [r3, #0]
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	1ad2      	subs	r2, r2, r3
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	f7ff ff99 	bl	800c654 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c722:	2300      	movs	r3, #0
 800c724:	61fb      	str	r3, [r7, #28]
 800c726:	e004      	b.n	800c732 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	2200      	movs	r2, #0
 800c72c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c72e:	2301      	movs	r3, #1
 800c730:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c732:	f000 fe93 	bl	800d45c <vPortExitCritical>

	return xReturn;
 800c736:	69fb      	ldr	r3, [r7, #28]
}
 800c738:	4618      	mov	r0, r3
 800c73a:	3720      	adds	r7, #32
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}
 800c740:	200010cc 	.word	0x200010cc
 800c744:	200010e0 	.word	0x200010e0

0800c748 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c748:	b480      	push	{r7}
 800c74a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c74c:	4b03      	ldr	r3, [pc, #12]	@ (800c75c <vTaskMissedYield+0x14>)
 800c74e:	2201      	movs	r2, #1
 800c750:	601a      	str	r2, [r3, #0]
}
 800c752:	bf00      	nop
 800c754:	46bd      	mov	sp, r7
 800c756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75a:	4770      	bx	lr
 800c75c:	200010dc 	.word	0x200010dc

0800c760 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b082      	sub	sp, #8
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c768:	f000 f852 	bl	800c810 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c76c:	4b06      	ldr	r3, [pc, #24]	@ (800c788 <prvIdleTask+0x28>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	2b01      	cmp	r3, #1
 800c772:	d9f9      	bls.n	800c768 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c774:	4b05      	ldr	r3, [pc, #20]	@ (800c78c <prvIdleTask+0x2c>)
 800c776:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c77a:	601a      	str	r2, [r3, #0]
 800c77c:	f3bf 8f4f 	dsb	sy
 800c780:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c784:	e7f0      	b.n	800c768 <prvIdleTask+0x8>
 800c786:	bf00      	nop
 800c788:	20000bf8 	.word	0x20000bf8
 800c78c:	e000ed04 	.word	0xe000ed04

0800c790 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b082      	sub	sp, #8
 800c794:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c796:	2300      	movs	r3, #0
 800c798:	607b      	str	r3, [r7, #4]
 800c79a:	e00c      	b.n	800c7b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c79c:	687a      	ldr	r2, [r7, #4]
 800c79e:	4613      	mov	r3, r2
 800c7a0:	009b      	lsls	r3, r3, #2
 800c7a2:	4413      	add	r3, r2
 800c7a4:	009b      	lsls	r3, r3, #2
 800c7a6:	4a12      	ldr	r2, [pc, #72]	@ (800c7f0 <prvInitialiseTaskLists+0x60>)
 800c7a8:	4413      	add	r3, r2
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f7fe fcae 	bl	800b10c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	3301      	adds	r3, #1
 800c7b4:	607b      	str	r3, [r7, #4]
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2b37      	cmp	r3, #55	@ 0x37
 800c7ba:	d9ef      	bls.n	800c79c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c7bc:	480d      	ldr	r0, [pc, #52]	@ (800c7f4 <prvInitialiseTaskLists+0x64>)
 800c7be:	f7fe fca5 	bl	800b10c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c7c2:	480d      	ldr	r0, [pc, #52]	@ (800c7f8 <prvInitialiseTaskLists+0x68>)
 800c7c4:	f7fe fca2 	bl	800b10c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c7c8:	480c      	ldr	r0, [pc, #48]	@ (800c7fc <prvInitialiseTaskLists+0x6c>)
 800c7ca:	f7fe fc9f 	bl	800b10c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c7ce:	480c      	ldr	r0, [pc, #48]	@ (800c800 <prvInitialiseTaskLists+0x70>)
 800c7d0:	f7fe fc9c 	bl	800b10c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c7d4:	480b      	ldr	r0, [pc, #44]	@ (800c804 <prvInitialiseTaskLists+0x74>)
 800c7d6:	f7fe fc99 	bl	800b10c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c7da:	4b0b      	ldr	r3, [pc, #44]	@ (800c808 <prvInitialiseTaskLists+0x78>)
 800c7dc:	4a05      	ldr	r2, [pc, #20]	@ (800c7f4 <prvInitialiseTaskLists+0x64>)
 800c7de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c7e0:	4b0a      	ldr	r3, [pc, #40]	@ (800c80c <prvInitialiseTaskLists+0x7c>)
 800c7e2:	4a05      	ldr	r2, [pc, #20]	@ (800c7f8 <prvInitialiseTaskLists+0x68>)
 800c7e4:	601a      	str	r2, [r3, #0]
}
 800c7e6:	bf00      	nop
 800c7e8:	3708      	adds	r7, #8
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}
 800c7ee:	bf00      	nop
 800c7f0:	20000bf8 	.word	0x20000bf8
 800c7f4:	20001058 	.word	0x20001058
 800c7f8:	2000106c 	.word	0x2000106c
 800c7fc:	20001088 	.word	0x20001088
 800c800:	2000109c 	.word	0x2000109c
 800c804:	200010b4 	.word	0x200010b4
 800c808:	20001080 	.word	0x20001080
 800c80c:	20001084 	.word	0x20001084

0800c810 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b082      	sub	sp, #8
 800c814:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c816:	e019      	b.n	800c84c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c818:	f000 fdee 	bl	800d3f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c81c:	4b10      	ldr	r3, [pc, #64]	@ (800c860 <prvCheckTasksWaitingTermination+0x50>)
 800c81e:	68db      	ldr	r3, [r3, #12]
 800c820:	68db      	ldr	r3, [r3, #12]
 800c822:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	3304      	adds	r3, #4
 800c828:	4618      	mov	r0, r3
 800c82a:	f7fe fcf9 	bl	800b220 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c82e:	4b0d      	ldr	r3, [pc, #52]	@ (800c864 <prvCheckTasksWaitingTermination+0x54>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	3b01      	subs	r3, #1
 800c834:	4a0b      	ldr	r2, [pc, #44]	@ (800c864 <prvCheckTasksWaitingTermination+0x54>)
 800c836:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c838:	4b0b      	ldr	r3, [pc, #44]	@ (800c868 <prvCheckTasksWaitingTermination+0x58>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	3b01      	subs	r3, #1
 800c83e:	4a0a      	ldr	r2, [pc, #40]	@ (800c868 <prvCheckTasksWaitingTermination+0x58>)
 800c840:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c842:	f000 fe0b 	bl	800d45c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f000 f810 	bl	800c86c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c84c:	4b06      	ldr	r3, [pc, #24]	@ (800c868 <prvCheckTasksWaitingTermination+0x58>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d1e1      	bne.n	800c818 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c854:	bf00      	nop
 800c856:	bf00      	nop
 800c858:	3708      	adds	r7, #8
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}
 800c85e:	bf00      	nop
 800c860:	2000109c 	.word	0x2000109c
 800c864:	200010c8 	.word	0x200010c8
 800c868:	200010b0 	.word	0x200010b0

0800c86c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b084      	sub	sp, #16
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	3354      	adds	r3, #84	@ 0x54
 800c878:	4618      	mov	r0, r3
 800c87a:	f001 fc75 	bl	800e168 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c884:	2b00      	cmp	r3, #0
 800c886:	d108      	bne.n	800c89a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c88c:	4618      	mov	r0, r3
 800c88e:	f000 ffa3 	bl	800d7d8 <vPortFree>
				vPortFree( pxTCB );
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f000 ffa0 	bl	800d7d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c898:	e019      	b.n	800c8ce <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c8a0:	2b01      	cmp	r3, #1
 800c8a2:	d103      	bne.n	800c8ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f000 ff97 	bl	800d7d8 <vPortFree>
	}
 800c8aa:	e010      	b.n	800c8ce <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c8b2:	2b02      	cmp	r3, #2
 800c8b4:	d00b      	beq.n	800c8ce <prvDeleteTCB+0x62>
	__asm volatile
 800c8b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8ba:	f383 8811 	msr	BASEPRI, r3
 800c8be:	f3bf 8f6f 	isb	sy
 800c8c2:	f3bf 8f4f 	dsb	sy
 800c8c6:	60fb      	str	r3, [r7, #12]
}
 800c8c8:	bf00      	nop
 800c8ca:	bf00      	nop
 800c8cc:	e7fd      	b.n	800c8ca <prvDeleteTCB+0x5e>
	}
 800c8ce:	bf00      	nop
 800c8d0:	3710      	adds	r7, #16
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}
	...

0800c8d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b083      	sub	sp, #12
 800c8dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c8de:	4b0c      	ldr	r3, [pc, #48]	@ (800c910 <prvResetNextTaskUnblockTime+0x38>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d104      	bne.n	800c8f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c8e8:	4b0a      	ldr	r3, [pc, #40]	@ (800c914 <prvResetNextTaskUnblockTime+0x3c>)
 800c8ea:	f04f 32ff 	mov.w	r2, #4294967295
 800c8ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c8f0:	e008      	b.n	800c904 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8f2:	4b07      	ldr	r3, [pc, #28]	@ (800c910 <prvResetNextTaskUnblockTime+0x38>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	68db      	ldr	r3, [r3, #12]
 800c8f8:	68db      	ldr	r3, [r3, #12]
 800c8fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	685b      	ldr	r3, [r3, #4]
 800c900:	4a04      	ldr	r2, [pc, #16]	@ (800c914 <prvResetNextTaskUnblockTime+0x3c>)
 800c902:	6013      	str	r3, [r2, #0]
}
 800c904:	bf00      	nop
 800c906:	370c      	adds	r7, #12
 800c908:	46bd      	mov	sp, r7
 800c90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90e:	4770      	bx	lr
 800c910:	20001080 	.word	0x20001080
 800c914:	200010e8 	.word	0x200010e8

0800c918 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c918:	b480      	push	{r7}
 800c91a:	b083      	sub	sp, #12
 800c91c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c91e:	4b0b      	ldr	r3, [pc, #44]	@ (800c94c <xTaskGetSchedulerState+0x34>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d102      	bne.n	800c92c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c926:	2301      	movs	r3, #1
 800c928:	607b      	str	r3, [r7, #4]
 800c92a:	e008      	b.n	800c93e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c92c:	4b08      	ldr	r3, [pc, #32]	@ (800c950 <xTaskGetSchedulerState+0x38>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d102      	bne.n	800c93a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c934:	2302      	movs	r3, #2
 800c936:	607b      	str	r3, [r7, #4]
 800c938:	e001      	b.n	800c93e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c93a:	2300      	movs	r3, #0
 800c93c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c93e:	687b      	ldr	r3, [r7, #4]
	}
 800c940:	4618      	mov	r0, r3
 800c942:	370c      	adds	r7, #12
 800c944:	46bd      	mov	sp, r7
 800c946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94a:	4770      	bx	lr
 800c94c:	200010d4 	.word	0x200010d4
 800c950:	200010f0 	.word	0x200010f0

0800c954 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c954:	b580      	push	{r7, lr}
 800c956:	b086      	sub	sp, #24
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c960:	2300      	movs	r3, #0
 800c962:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d058      	beq.n	800ca1c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c96a:	4b2f      	ldr	r3, [pc, #188]	@ (800ca28 <xTaskPriorityDisinherit+0xd4>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	693a      	ldr	r2, [r7, #16]
 800c970:	429a      	cmp	r2, r3
 800c972:	d00b      	beq.n	800c98c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c978:	f383 8811 	msr	BASEPRI, r3
 800c97c:	f3bf 8f6f 	isb	sy
 800c980:	f3bf 8f4f 	dsb	sy
 800c984:	60fb      	str	r3, [r7, #12]
}
 800c986:	bf00      	nop
 800c988:	bf00      	nop
 800c98a:	e7fd      	b.n	800c988 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c98c:	693b      	ldr	r3, [r7, #16]
 800c98e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c990:	2b00      	cmp	r3, #0
 800c992:	d10b      	bne.n	800c9ac <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c998:	f383 8811 	msr	BASEPRI, r3
 800c99c:	f3bf 8f6f 	isb	sy
 800c9a0:	f3bf 8f4f 	dsb	sy
 800c9a4:	60bb      	str	r3, [r7, #8]
}
 800c9a6:	bf00      	nop
 800c9a8:	bf00      	nop
 800c9aa:	e7fd      	b.n	800c9a8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c9b0:	1e5a      	subs	r2, r3, #1
 800c9b2:	693b      	ldr	r3, [r7, #16]
 800c9b4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c9b6:	693b      	ldr	r3, [r7, #16]
 800c9b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9ba:	693b      	ldr	r3, [r7, #16]
 800c9bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c9be:	429a      	cmp	r2, r3
 800c9c0:	d02c      	beq.n	800ca1c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d128      	bne.n	800ca1c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c9ca:	693b      	ldr	r3, [r7, #16]
 800c9cc:	3304      	adds	r3, #4
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f7fe fc26 	bl	800b220 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9e0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c9e4:	693b      	ldr	r3, [r7, #16]
 800c9e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9ec:	4b0f      	ldr	r3, [pc, #60]	@ (800ca2c <xTaskPriorityDisinherit+0xd8>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	429a      	cmp	r2, r3
 800c9f2:	d903      	bls.n	800c9fc <xTaskPriorityDisinherit+0xa8>
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9f8:	4a0c      	ldr	r2, [pc, #48]	@ (800ca2c <xTaskPriorityDisinherit+0xd8>)
 800c9fa:	6013      	str	r3, [r2, #0]
 800c9fc:	693b      	ldr	r3, [r7, #16]
 800c9fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca00:	4613      	mov	r3, r2
 800ca02:	009b      	lsls	r3, r3, #2
 800ca04:	4413      	add	r3, r2
 800ca06:	009b      	lsls	r3, r3, #2
 800ca08:	4a09      	ldr	r2, [pc, #36]	@ (800ca30 <xTaskPriorityDisinherit+0xdc>)
 800ca0a:	441a      	add	r2, r3
 800ca0c:	693b      	ldr	r3, [r7, #16]
 800ca0e:	3304      	adds	r3, #4
 800ca10:	4619      	mov	r1, r3
 800ca12:	4610      	mov	r0, r2
 800ca14:	f7fe fba7 	bl	800b166 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ca18:	2301      	movs	r3, #1
 800ca1a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ca1c:	697b      	ldr	r3, [r7, #20]
	}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	3718      	adds	r7, #24
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bd80      	pop	{r7, pc}
 800ca26:	bf00      	nop
 800ca28:	20000bf4 	.word	0x20000bf4
 800ca2c:	200010d0 	.word	0x200010d0
 800ca30:	20000bf8 	.word	0x20000bf8

0800ca34 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b084      	sub	sp, #16
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ca3e:	4b21      	ldr	r3, [pc, #132]	@ (800cac4 <prvAddCurrentTaskToDelayedList+0x90>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ca44:	4b20      	ldr	r3, [pc, #128]	@ (800cac8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	3304      	adds	r3, #4
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f7fe fbe8 	bl	800b220 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca56:	d10a      	bne.n	800ca6e <prvAddCurrentTaskToDelayedList+0x3a>
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d007      	beq.n	800ca6e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca5e:	4b1a      	ldr	r3, [pc, #104]	@ (800cac8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	3304      	adds	r3, #4
 800ca64:	4619      	mov	r1, r3
 800ca66:	4819      	ldr	r0, [pc, #100]	@ (800cacc <prvAddCurrentTaskToDelayedList+0x98>)
 800ca68:	f7fe fb7d 	bl	800b166 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ca6c:	e026      	b.n	800cabc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ca6e:	68fa      	ldr	r2, [r7, #12]
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	4413      	add	r3, r2
 800ca74:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ca76:	4b14      	ldr	r3, [pc, #80]	@ (800cac8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	68ba      	ldr	r2, [r7, #8]
 800ca7c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ca7e:	68ba      	ldr	r2, [r7, #8]
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	429a      	cmp	r2, r3
 800ca84:	d209      	bcs.n	800ca9a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca86:	4b12      	ldr	r3, [pc, #72]	@ (800cad0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ca88:	681a      	ldr	r2, [r3, #0]
 800ca8a:	4b0f      	ldr	r3, [pc, #60]	@ (800cac8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	3304      	adds	r3, #4
 800ca90:	4619      	mov	r1, r3
 800ca92:	4610      	mov	r0, r2
 800ca94:	f7fe fb8b 	bl	800b1ae <vListInsert>
}
 800ca98:	e010      	b.n	800cabc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca9a:	4b0e      	ldr	r3, [pc, #56]	@ (800cad4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ca9c:	681a      	ldr	r2, [r3, #0]
 800ca9e:	4b0a      	ldr	r3, [pc, #40]	@ (800cac8 <prvAddCurrentTaskToDelayedList+0x94>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	3304      	adds	r3, #4
 800caa4:	4619      	mov	r1, r3
 800caa6:	4610      	mov	r0, r2
 800caa8:	f7fe fb81 	bl	800b1ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800caac:	4b0a      	ldr	r3, [pc, #40]	@ (800cad8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	68ba      	ldr	r2, [r7, #8]
 800cab2:	429a      	cmp	r2, r3
 800cab4:	d202      	bcs.n	800cabc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cab6:	4a08      	ldr	r2, [pc, #32]	@ (800cad8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	6013      	str	r3, [r2, #0]
}
 800cabc:	bf00      	nop
 800cabe:	3710      	adds	r7, #16
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}
 800cac4:	200010cc 	.word	0x200010cc
 800cac8:	20000bf4 	.word	0x20000bf4
 800cacc:	200010b4 	.word	0x200010b4
 800cad0:	20001084 	.word	0x20001084
 800cad4:	20001080 	.word	0x20001080
 800cad8:	200010e8 	.word	0x200010e8

0800cadc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b08a      	sub	sp, #40	@ 0x28
 800cae0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cae2:	2300      	movs	r3, #0
 800cae4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cae6:	f000 fb13 	bl	800d110 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800caea:	4b1d      	ldr	r3, [pc, #116]	@ (800cb60 <xTimerCreateTimerTask+0x84>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d021      	beq.n	800cb36 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800caf2:	2300      	movs	r3, #0
 800caf4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800caf6:	2300      	movs	r3, #0
 800caf8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cafa:	1d3a      	adds	r2, r7, #4
 800cafc:	f107 0108 	add.w	r1, r7, #8
 800cb00:	f107 030c 	add.w	r3, r7, #12
 800cb04:	4618      	mov	r0, r3
 800cb06:	f7fe fae7 	bl	800b0d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cb0a:	6879      	ldr	r1, [r7, #4]
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	68fa      	ldr	r2, [r7, #12]
 800cb10:	9202      	str	r2, [sp, #8]
 800cb12:	9301      	str	r3, [sp, #4]
 800cb14:	2302      	movs	r3, #2
 800cb16:	9300      	str	r3, [sp, #0]
 800cb18:	2300      	movs	r3, #0
 800cb1a:	460a      	mov	r2, r1
 800cb1c:	4911      	ldr	r1, [pc, #68]	@ (800cb64 <xTimerCreateTimerTask+0x88>)
 800cb1e:	4812      	ldr	r0, [pc, #72]	@ (800cb68 <xTimerCreateTimerTask+0x8c>)
 800cb20:	f7ff f8a2 	bl	800bc68 <xTaskCreateStatic>
 800cb24:	4603      	mov	r3, r0
 800cb26:	4a11      	ldr	r2, [pc, #68]	@ (800cb6c <xTimerCreateTimerTask+0x90>)
 800cb28:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cb2a:	4b10      	ldr	r3, [pc, #64]	@ (800cb6c <xTimerCreateTimerTask+0x90>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d001      	beq.n	800cb36 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cb32:	2301      	movs	r3, #1
 800cb34:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d10b      	bne.n	800cb54 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800cb3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb40:	f383 8811 	msr	BASEPRI, r3
 800cb44:	f3bf 8f6f 	isb	sy
 800cb48:	f3bf 8f4f 	dsb	sy
 800cb4c:	613b      	str	r3, [r7, #16]
}
 800cb4e:	bf00      	nop
 800cb50:	bf00      	nop
 800cb52:	e7fd      	b.n	800cb50 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cb54:	697b      	ldr	r3, [r7, #20]
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	3718      	adds	r7, #24
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}
 800cb5e:	bf00      	nop
 800cb60:	20001124 	.word	0x20001124
 800cb64:	0800ef4c 	.word	0x0800ef4c
 800cb68:	0800cca9 	.word	0x0800cca9
 800cb6c:	20001128 	.word	0x20001128

0800cb70 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b08a      	sub	sp, #40	@ 0x28
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	60f8      	str	r0, [r7, #12]
 800cb78:	60b9      	str	r1, [r7, #8]
 800cb7a:	607a      	str	r2, [r7, #4]
 800cb7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d10b      	bne.n	800cba0 <xTimerGenericCommand+0x30>
	__asm volatile
 800cb88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb8c:	f383 8811 	msr	BASEPRI, r3
 800cb90:	f3bf 8f6f 	isb	sy
 800cb94:	f3bf 8f4f 	dsb	sy
 800cb98:	623b      	str	r3, [r7, #32]
}
 800cb9a:	bf00      	nop
 800cb9c:	bf00      	nop
 800cb9e:	e7fd      	b.n	800cb9c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cba0:	4b19      	ldr	r3, [pc, #100]	@ (800cc08 <xTimerGenericCommand+0x98>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d02a      	beq.n	800cbfe <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	2b05      	cmp	r3, #5
 800cbb8:	dc18      	bgt.n	800cbec <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cbba:	f7ff fead 	bl	800c918 <xTaskGetSchedulerState>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	2b02      	cmp	r3, #2
 800cbc2:	d109      	bne.n	800cbd8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cbc4:	4b10      	ldr	r3, [pc, #64]	@ (800cc08 <xTimerGenericCommand+0x98>)
 800cbc6:	6818      	ldr	r0, [r3, #0]
 800cbc8:	f107 0110 	add.w	r1, r7, #16
 800cbcc:	2300      	movs	r3, #0
 800cbce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cbd0:	f7fe fc5a 	bl	800b488 <xQueueGenericSend>
 800cbd4:	6278      	str	r0, [r7, #36]	@ 0x24
 800cbd6:	e012      	b.n	800cbfe <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cbd8:	4b0b      	ldr	r3, [pc, #44]	@ (800cc08 <xTimerGenericCommand+0x98>)
 800cbda:	6818      	ldr	r0, [r3, #0]
 800cbdc:	f107 0110 	add.w	r1, r7, #16
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	f7fe fc50 	bl	800b488 <xQueueGenericSend>
 800cbe8:	6278      	str	r0, [r7, #36]	@ 0x24
 800cbea:	e008      	b.n	800cbfe <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cbec:	4b06      	ldr	r3, [pc, #24]	@ (800cc08 <xTimerGenericCommand+0x98>)
 800cbee:	6818      	ldr	r0, [r3, #0]
 800cbf0:	f107 0110 	add.w	r1, r7, #16
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	683a      	ldr	r2, [r7, #0]
 800cbf8:	f7fe fd48 	bl	800b68c <xQueueGenericSendFromISR>
 800cbfc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cbfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cc00:	4618      	mov	r0, r3
 800cc02:	3728      	adds	r7, #40	@ 0x28
 800cc04:	46bd      	mov	sp, r7
 800cc06:	bd80      	pop	{r7, pc}
 800cc08:	20001124 	.word	0x20001124

0800cc0c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b088      	sub	sp, #32
 800cc10:	af02      	add	r7, sp, #8
 800cc12:	6078      	str	r0, [r7, #4]
 800cc14:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc16:	4b23      	ldr	r3, [pc, #140]	@ (800cca4 <prvProcessExpiredTimer+0x98>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	68db      	ldr	r3, [r3, #12]
 800cc1c:	68db      	ldr	r3, [r3, #12]
 800cc1e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	3304      	adds	r3, #4
 800cc24:	4618      	mov	r0, r3
 800cc26:	f7fe fafb 	bl	800b220 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cc30:	f003 0304 	and.w	r3, r3, #4
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d023      	beq.n	800cc80 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	699a      	ldr	r2, [r3, #24]
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	18d1      	adds	r1, r2, r3
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	683a      	ldr	r2, [r7, #0]
 800cc44:	6978      	ldr	r0, [r7, #20]
 800cc46:	f000 f8d5 	bl	800cdf4 <prvInsertTimerInActiveList>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d020      	beq.n	800cc92 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cc50:	2300      	movs	r3, #0
 800cc52:	9300      	str	r3, [sp, #0]
 800cc54:	2300      	movs	r3, #0
 800cc56:	687a      	ldr	r2, [r7, #4]
 800cc58:	2100      	movs	r1, #0
 800cc5a:	6978      	ldr	r0, [r7, #20]
 800cc5c:	f7ff ff88 	bl	800cb70 <xTimerGenericCommand>
 800cc60:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cc62:	693b      	ldr	r3, [r7, #16]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d114      	bne.n	800cc92 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800cc68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc6c:	f383 8811 	msr	BASEPRI, r3
 800cc70:	f3bf 8f6f 	isb	sy
 800cc74:	f3bf 8f4f 	dsb	sy
 800cc78:	60fb      	str	r3, [r7, #12]
}
 800cc7a:	bf00      	nop
 800cc7c:	bf00      	nop
 800cc7e:	e7fd      	b.n	800cc7c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cc80:	697b      	ldr	r3, [r7, #20]
 800cc82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cc86:	f023 0301 	bic.w	r3, r3, #1
 800cc8a:	b2da      	uxtb	r2, r3
 800cc8c:	697b      	ldr	r3, [r7, #20]
 800cc8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	6a1b      	ldr	r3, [r3, #32]
 800cc96:	6978      	ldr	r0, [r7, #20]
 800cc98:	4798      	blx	r3
}
 800cc9a:	bf00      	nop
 800cc9c:	3718      	adds	r7, #24
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}
 800cca2:	bf00      	nop
 800cca4:	2000111c 	.word	0x2000111c

0800cca8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b084      	sub	sp, #16
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ccb0:	f107 0308 	add.w	r3, r7, #8
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f000 f859 	bl	800cd6c <prvGetNextExpireTime>
 800ccba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	4619      	mov	r1, r3
 800ccc0:	68f8      	ldr	r0, [r7, #12]
 800ccc2:	f000 f805 	bl	800ccd0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ccc6:	f000 f8d7 	bl	800ce78 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ccca:	bf00      	nop
 800cccc:	e7f0      	b.n	800ccb0 <prvTimerTask+0x8>
	...

0800ccd0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b084      	sub	sp, #16
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
 800ccd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ccda:	f7ff fa29 	bl	800c130 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ccde:	f107 0308 	add.w	r3, r7, #8
 800cce2:	4618      	mov	r0, r3
 800cce4:	f000 f866 	bl	800cdb4 <prvSampleTimeNow>
 800cce8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d130      	bne.n	800cd52 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d10a      	bne.n	800cd0c <prvProcessTimerOrBlockTask+0x3c>
 800ccf6:	687a      	ldr	r2, [r7, #4]
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	429a      	cmp	r2, r3
 800ccfc:	d806      	bhi.n	800cd0c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ccfe:	f7ff fa25 	bl	800c14c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cd02:	68f9      	ldr	r1, [r7, #12]
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f7ff ff81 	bl	800cc0c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cd0a:	e024      	b.n	800cd56 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d008      	beq.n	800cd24 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cd12:	4b13      	ldr	r3, [pc, #76]	@ (800cd60 <prvProcessTimerOrBlockTask+0x90>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d101      	bne.n	800cd20 <prvProcessTimerOrBlockTask+0x50>
 800cd1c:	2301      	movs	r3, #1
 800cd1e:	e000      	b.n	800cd22 <prvProcessTimerOrBlockTask+0x52>
 800cd20:	2300      	movs	r3, #0
 800cd22:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cd24:	4b0f      	ldr	r3, [pc, #60]	@ (800cd64 <prvProcessTimerOrBlockTask+0x94>)
 800cd26:	6818      	ldr	r0, [r3, #0]
 800cd28:	687a      	ldr	r2, [r7, #4]
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	1ad3      	subs	r3, r2, r3
 800cd2e:	683a      	ldr	r2, [r7, #0]
 800cd30:	4619      	mov	r1, r3
 800cd32:	f7fe ff65 	bl	800bc00 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cd36:	f7ff fa09 	bl	800c14c <xTaskResumeAll>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d10a      	bne.n	800cd56 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cd40:	4b09      	ldr	r3, [pc, #36]	@ (800cd68 <prvProcessTimerOrBlockTask+0x98>)
 800cd42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd46:	601a      	str	r2, [r3, #0]
 800cd48:	f3bf 8f4f 	dsb	sy
 800cd4c:	f3bf 8f6f 	isb	sy
}
 800cd50:	e001      	b.n	800cd56 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cd52:	f7ff f9fb 	bl	800c14c <xTaskResumeAll>
}
 800cd56:	bf00      	nop
 800cd58:	3710      	adds	r7, #16
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}
 800cd5e:	bf00      	nop
 800cd60:	20001120 	.word	0x20001120
 800cd64:	20001124 	.word	0x20001124
 800cd68:	e000ed04 	.word	0xe000ed04

0800cd6c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cd6c:	b480      	push	{r7}
 800cd6e:	b085      	sub	sp, #20
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cd74:	4b0e      	ldr	r3, [pc, #56]	@ (800cdb0 <prvGetNextExpireTime+0x44>)
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d101      	bne.n	800cd82 <prvGetNextExpireTime+0x16>
 800cd7e:	2201      	movs	r2, #1
 800cd80:	e000      	b.n	800cd84 <prvGetNextExpireTime+0x18>
 800cd82:	2200      	movs	r2, #0
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d105      	bne.n	800cd9c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cd90:	4b07      	ldr	r3, [pc, #28]	@ (800cdb0 <prvGetNextExpireTime+0x44>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	68db      	ldr	r3, [r3, #12]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	60fb      	str	r3, [r7, #12]
 800cd9a:	e001      	b.n	800cda0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cda0:	68fb      	ldr	r3, [r7, #12]
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	3714      	adds	r7, #20
 800cda6:	46bd      	mov	sp, r7
 800cda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdac:	4770      	bx	lr
 800cdae:	bf00      	nop
 800cdb0:	2000111c 	.word	0x2000111c

0800cdb4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b084      	sub	sp, #16
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cdbc:	f7ff fa64 	bl	800c288 <xTaskGetTickCount>
 800cdc0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cdc2:	4b0b      	ldr	r3, [pc, #44]	@ (800cdf0 <prvSampleTimeNow+0x3c>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	68fa      	ldr	r2, [r7, #12]
 800cdc8:	429a      	cmp	r2, r3
 800cdca:	d205      	bcs.n	800cdd8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cdcc:	f000 f93a 	bl	800d044 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2201      	movs	r2, #1
 800cdd4:	601a      	str	r2, [r3, #0]
 800cdd6:	e002      	b.n	800cdde <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2200      	movs	r2, #0
 800cddc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cdde:	4a04      	ldr	r2, [pc, #16]	@ (800cdf0 <prvSampleTimeNow+0x3c>)
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cde4:	68fb      	ldr	r3, [r7, #12]
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	3710      	adds	r7, #16
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}
 800cdee:	bf00      	nop
 800cdf0:	2000112c 	.word	0x2000112c

0800cdf4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b086      	sub	sp, #24
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	60f8      	str	r0, [r7, #12]
 800cdfc:	60b9      	str	r1, [r7, #8]
 800cdfe:	607a      	str	r2, [r7, #4]
 800ce00:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ce02:	2300      	movs	r3, #0
 800ce04:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	68ba      	ldr	r2, [r7, #8]
 800ce0a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	68fa      	ldr	r2, [r7, #12]
 800ce10:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ce12:	68ba      	ldr	r2, [r7, #8]
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	429a      	cmp	r2, r3
 800ce18:	d812      	bhi.n	800ce40 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce1a:	687a      	ldr	r2, [r7, #4]
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	1ad2      	subs	r2, r2, r3
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	699b      	ldr	r3, [r3, #24]
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d302      	bcc.n	800ce2e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ce28:	2301      	movs	r3, #1
 800ce2a:	617b      	str	r3, [r7, #20]
 800ce2c:	e01b      	b.n	800ce66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ce2e:	4b10      	ldr	r3, [pc, #64]	@ (800ce70 <prvInsertTimerInActiveList+0x7c>)
 800ce30:	681a      	ldr	r2, [r3, #0]
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	3304      	adds	r3, #4
 800ce36:	4619      	mov	r1, r3
 800ce38:	4610      	mov	r0, r2
 800ce3a:	f7fe f9b8 	bl	800b1ae <vListInsert>
 800ce3e:	e012      	b.n	800ce66 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ce40:	687a      	ldr	r2, [r7, #4]
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	429a      	cmp	r2, r3
 800ce46:	d206      	bcs.n	800ce56 <prvInsertTimerInActiveList+0x62>
 800ce48:	68ba      	ldr	r2, [r7, #8]
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	d302      	bcc.n	800ce56 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ce50:	2301      	movs	r3, #1
 800ce52:	617b      	str	r3, [r7, #20]
 800ce54:	e007      	b.n	800ce66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ce56:	4b07      	ldr	r3, [pc, #28]	@ (800ce74 <prvInsertTimerInActiveList+0x80>)
 800ce58:	681a      	ldr	r2, [r3, #0]
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	3304      	adds	r3, #4
 800ce5e:	4619      	mov	r1, r3
 800ce60:	4610      	mov	r0, r2
 800ce62:	f7fe f9a4 	bl	800b1ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ce66:	697b      	ldr	r3, [r7, #20]
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3718      	adds	r7, #24
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}
 800ce70:	20001120 	.word	0x20001120
 800ce74:	2000111c 	.word	0x2000111c

0800ce78 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b08e      	sub	sp, #56	@ 0x38
 800ce7c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ce7e:	e0ce      	b.n	800d01e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	da19      	bge.n	800ceba <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ce86:	1d3b      	adds	r3, r7, #4
 800ce88:	3304      	adds	r3, #4
 800ce8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ce8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d10b      	bne.n	800ceaa <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ce92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce96:	f383 8811 	msr	BASEPRI, r3
 800ce9a:	f3bf 8f6f 	isb	sy
 800ce9e:	f3bf 8f4f 	dsb	sy
 800cea2:	61fb      	str	r3, [r7, #28]
}
 800cea4:	bf00      	nop
 800cea6:	bf00      	nop
 800cea8:	e7fd      	b.n	800cea6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ceaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ceb0:	6850      	ldr	r0, [r2, #4]
 800ceb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ceb4:	6892      	ldr	r2, [r2, #8]
 800ceb6:	4611      	mov	r1, r2
 800ceb8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	f2c0 80ae 	blt.w	800d01e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cec8:	695b      	ldr	r3, [r3, #20]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d004      	beq.n	800ced8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ced0:	3304      	adds	r3, #4
 800ced2:	4618      	mov	r0, r3
 800ced4:	f7fe f9a4 	bl	800b220 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ced8:	463b      	mov	r3, r7
 800ceda:	4618      	mov	r0, r3
 800cedc:	f7ff ff6a 	bl	800cdb4 <prvSampleTimeNow>
 800cee0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2b09      	cmp	r3, #9
 800cee6:	f200 8097 	bhi.w	800d018 <prvProcessReceivedCommands+0x1a0>
 800ceea:	a201      	add	r2, pc, #4	@ (adr r2, 800cef0 <prvProcessReceivedCommands+0x78>)
 800ceec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cef0:	0800cf19 	.word	0x0800cf19
 800cef4:	0800cf19 	.word	0x0800cf19
 800cef8:	0800cf19 	.word	0x0800cf19
 800cefc:	0800cf8f 	.word	0x0800cf8f
 800cf00:	0800cfa3 	.word	0x0800cfa3
 800cf04:	0800cfef 	.word	0x0800cfef
 800cf08:	0800cf19 	.word	0x0800cf19
 800cf0c:	0800cf19 	.word	0x0800cf19
 800cf10:	0800cf8f 	.word	0x0800cf8f
 800cf14:	0800cfa3 	.word	0x0800cfa3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cf18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf1a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cf1e:	f043 0301 	orr.w	r3, r3, #1
 800cf22:	b2da      	uxtb	r2, r3
 800cf24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf26:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cf2a:	68ba      	ldr	r2, [r7, #8]
 800cf2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf2e:	699b      	ldr	r3, [r3, #24]
 800cf30:	18d1      	adds	r1, r2, r3
 800cf32:	68bb      	ldr	r3, [r7, #8]
 800cf34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf38:	f7ff ff5c 	bl	800cdf4 <prvInsertTimerInActiveList>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d06c      	beq.n	800d01c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cf42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf44:	6a1b      	ldr	r3, [r3, #32]
 800cf46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf48:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cf4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cf50:	f003 0304 	and.w	r3, r3, #4
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d061      	beq.n	800d01c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cf58:	68ba      	ldr	r2, [r7, #8]
 800cf5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf5c:	699b      	ldr	r3, [r3, #24]
 800cf5e:	441a      	add	r2, r3
 800cf60:	2300      	movs	r3, #0
 800cf62:	9300      	str	r3, [sp, #0]
 800cf64:	2300      	movs	r3, #0
 800cf66:	2100      	movs	r1, #0
 800cf68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf6a:	f7ff fe01 	bl	800cb70 <xTimerGenericCommand>
 800cf6e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cf70:	6a3b      	ldr	r3, [r7, #32]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d152      	bne.n	800d01c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800cf76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf7a:	f383 8811 	msr	BASEPRI, r3
 800cf7e:	f3bf 8f6f 	isb	sy
 800cf82:	f3bf 8f4f 	dsb	sy
 800cf86:	61bb      	str	r3, [r7, #24]
}
 800cf88:	bf00      	nop
 800cf8a:	bf00      	nop
 800cf8c:	e7fd      	b.n	800cf8a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cf8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cf94:	f023 0301 	bic.w	r3, r3, #1
 800cf98:	b2da      	uxtb	r2, r3
 800cf9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf9c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800cfa0:	e03d      	b.n	800d01e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cfa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfa4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cfa8:	f043 0301 	orr.w	r3, r3, #1
 800cfac:	b2da      	uxtb	r2, r3
 800cfae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfb0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cfb4:	68ba      	ldr	r2, [r7, #8]
 800cfb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfb8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cfba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfbc:	699b      	ldr	r3, [r3, #24]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d10b      	bne.n	800cfda <prvProcessReceivedCommands+0x162>
	__asm volatile
 800cfc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfc6:	f383 8811 	msr	BASEPRI, r3
 800cfca:	f3bf 8f6f 	isb	sy
 800cfce:	f3bf 8f4f 	dsb	sy
 800cfd2:	617b      	str	r3, [r7, #20]
}
 800cfd4:	bf00      	nop
 800cfd6:	bf00      	nop
 800cfd8:	e7fd      	b.n	800cfd6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cfda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfdc:	699a      	ldr	r2, [r3, #24]
 800cfde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfe0:	18d1      	adds	r1, r2, r3
 800cfe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfe4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cfe6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cfe8:	f7ff ff04 	bl	800cdf4 <prvInsertTimerInActiveList>
					break;
 800cfec:	e017      	b.n	800d01e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cfee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cff0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cff4:	f003 0302 	and.w	r3, r3, #2
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d103      	bne.n	800d004 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800cffc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cffe:	f000 fbeb 	bl	800d7d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d002:	e00c      	b.n	800d01e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d006:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d00a:	f023 0301 	bic.w	r3, r3, #1
 800d00e:	b2da      	uxtb	r2, r3
 800d010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d012:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d016:	e002      	b.n	800d01e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800d018:	bf00      	nop
 800d01a:	e000      	b.n	800d01e <prvProcessReceivedCommands+0x1a6>
					break;
 800d01c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d01e:	4b08      	ldr	r3, [pc, #32]	@ (800d040 <prvProcessReceivedCommands+0x1c8>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	1d39      	adds	r1, r7, #4
 800d024:	2200      	movs	r2, #0
 800d026:	4618      	mov	r0, r3
 800d028:	f7fe fbce 	bl	800b7c8 <xQueueReceive>
 800d02c:	4603      	mov	r3, r0
 800d02e:	2b00      	cmp	r3, #0
 800d030:	f47f af26 	bne.w	800ce80 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d034:	bf00      	nop
 800d036:	bf00      	nop
 800d038:	3730      	adds	r7, #48	@ 0x30
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}
 800d03e:	bf00      	nop
 800d040:	20001124 	.word	0x20001124

0800d044 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b088      	sub	sp, #32
 800d048:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d04a:	e049      	b.n	800d0e0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d04c:	4b2e      	ldr	r3, [pc, #184]	@ (800d108 <prvSwitchTimerLists+0xc4>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	68db      	ldr	r3, [r3, #12]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d056:	4b2c      	ldr	r3, [pc, #176]	@ (800d108 <prvSwitchTimerLists+0xc4>)
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	68db      	ldr	r3, [r3, #12]
 800d05c:	68db      	ldr	r3, [r3, #12]
 800d05e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	3304      	adds	r3, #4
 800d064:	4618      	mov	r0, r3
 800d066:	f7fe f8db 	bl	800b220 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	6a1b      	ldr	r3, [r3, #32]
 800d06e:	68f8      	ldr	r0, [r7, #12]
 800d070:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d078:	f003 0304 	and.w	r3, r3, #4
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d02f      	beq.n	800d0e0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	699b      	ldr	r3, [r3, #24]
 800d084:	693a      	ldr	r2, [r7, #16]
 800d086:	4413      	add	r3, r2
 800d088:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d08a:	68ba      	ldr	r2, [r7, #8]
 800d08c:	693b      	ldr	r3, [r7, #16]
 800d08e:	429a      	cmp	r2, r3
 800d090:	d90e      	bls.n	800d0b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	68ba      	ldr	r2, [r7, #8]
 800d096:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	68fa      	ldr	r2, [r7, #12]
 800d09c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d09e:	4b1a      	ldr	r3, [pc, #104]	@ (800d108 <prvSwitchTimerLists+0xc4>)
 800d0a0:	681a      	ldr	r2, [r3, #0]
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	3304      	adds	r3, #4
 800d0a6:	4619      	mov	r1, r3
 800d0a8:	4610      	mov	r0, r2
 800d0aa:	f7fe f880 	bl	800b1ae <vListInsert>
 800d0ae:	e017      	b.n	800d0e0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	9300      	str	r3, [sp, #0]
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	693a      	ldr	r2, [r7, #16]
 800d0b8:	2100      	movs	r1, #0
 800d0ba:	68f8      	ldr	r0, [r7, #12]
 800d0bc:	f7ff fd58 	bl	800cb70 <xTimerGenericCommand>
 800d0c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d10b      	bne.n	800d0e0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800d0c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0cc:	f383 8811 	msr	BASEPRI, r3
 800d0d0:	f3bf 8f6f 	isb	sy
 800d0d4:	f3bf 8f4f 	dsb	sy
 800d0d8:	603b      	str	r3, [r7, #0]
}
 800d0da:	bf00      	nop
 800d0dc:	bf00      	nop
 800d0de:	e7fd      	b.n	800d0dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d0e0:	4b09      	ldr	r3, [pc, #36]	@ (800d108 <prvSwitchTimerLists+0xc4>)
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d1b0      	bne.n	800d04c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d0ea:	4b07      	ldr	r3, [pc, #28]	@ (800d108 <prvSwitchTimerLists+0xc4>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d0f0:	4b06      	ldr	r3, [pc, #24]	@ (800d10c <prvSwitchTimerLists+0xc8>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	4a04      	ldr	r2, [pc, #16]	@ (800d108 <prvSwitchTimerLists+0xc4>)
 800d0f6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d0f8:	4a04      	ldr	r2, [pc, #16]	@ (800d10c <prvSwitchTimerLists+0xc8>)
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	6013      	str	r3, [r2, #0]
}
 800d0fe:	bf00      	nop
 800d100:	3718      	adds	r7, #24
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}
 800d106:	bf00      	nop
 800d108:	2000111c 	.word	0x2000111c
 800d10c:	20001120 	.word	0x20001120

0800d110 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b082      	sub	sp, #8
 800d114:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d116:	f000 f96f 	bl	800d3f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d11a:	4b15      	ldr	r3, [pc, #84]	@ (800d170 <prvCheckForValidListAndQueue+0x60>)
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d120      	bne.n	800d164 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d122:	4814      	ldr	r0, [pc, #80]	@ (800d174 <prvCheckForValidListAndQueue+0x64>)
 800d124:	f7fd fff2 	bl	800b10c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d128:	4813      	ldr	r0, [pc, #76]	@ (800d178 <prvCheckForValidListAndQueue+0x68>)
 800d12a:	f7fd ffef 	bl	800b10c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d12e:	4b13      	ldr	r3, [pc, #76]	@ (800d17c <prvCheckForValidListAndQueue+0x6c>)
 800d130:	4a10      	ldr	r2, [pc, #64]	@ (800d174 <prvCheckForValidListAndQueue+0x64>)
 800d132:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d134:	4b12      	ldr	r3, [pc, #72]	@ (800d180 <prvCheckForValidListAndQueue+0x70>)
 800d136:	4a10      	ldr	r2, [pc, #64]	@ (800d178 <prvCheckForValidListAndQueue+0x68>)
 800d138:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d13a:	2300      	movs	r3, #0
 800d13c:	9300      	str	r3, [sp, #0]
 800d13e:	4b11      	ldr	r3, [pc, #68]	@ (800d184 <prvCheckForValidListAndQueue+0x74>)
 800d140:	4a11      	ldr	r2, [pc, #68]	@ (800d188 <prvCheckForValidListAndQueue+0x78>)
 800d142:	2110      	movs	r1, #16
 800d144:	200a      	movs	r0, #10
 800d146:	f7fe f8ff 	bl	800b348 <xQueueGenericCreateStatic>
 800d14a:	4603      	mov	r3, r0
 800d14c:	4a08      	ldr	r2, [pc, #32]	@ (800d170 <prvCheckForValidListAndQueue+0x60>)
 800d14e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d150:	4b07      	ldr	r3, [pc, #28]	@ (800d170 <prvCheckForValidListAndQueue+0x60>)
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d005      	beq.n	800d164 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d158:	4b05      	ldr	r3, [pc, #20]	@ (800d170 <prvCheckForValidListAndQueue+0x60>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	490b      	ldr	r1, [pc, #44]	@ (800d18c <prvCheckForValidListAndQueue+0x7c>)
 800d15e:	4618      	mov	r0, r3
 800d160:	f7fe fd24 	bl	800bbac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d164:	f000 f97a 	bl	800d45c <vPortExitCritical>
}
 800d168:	bf00      	nop
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}
 800d16e:	bf00      	nop
 800d170:	20001124 	.word	0x20001124
 800d174:	200010f4 	.word	0x200010f4
 800d178:	20001108 	.word	0x20001108
 800d17c:	2000111c 	.word	0x2000111c
 800d180:	20001120 	.word	0x20001120
 800d184:	200011d0 	.word	0x200011d0
 800d188:	20001130 	.word	0x20001130
 800d18c:	0800ef54 	.word	0x0800ef54

0800d190 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d190:	b480      	push	{r7}
 800d192:	b085      	sub	sp, #20
 800d194:	af00      	add	r7, sp, #0
 800d196:	60f8      	str	r0, [r7, #12]
 800d198:	60b9      	str	r1, [r7, #8]
 800d19a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	3b04      	subs	r3, #4
 800d1a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d1a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	3b04      	subs	r3, #4
 800d1ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	f023 0201 	bic.w	r2, r3, #1
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	3b04      	subs	r3, #4
 800d1be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d1c0:	4a0c      	ldr	r2, [pc, #48]	@ (800d1f4 <pxPortInitialiseStack+0x64>)
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	3b14      	subs	r3, #20
 800d1ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d1cc:	687a      	ldr	r2, [r7, #4]
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	3b04      	subs	r3, #4
 800d1d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	f06f 0202 	mvn.w	r2, #2
 800d1de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	3b20      	subs	r3, #32
 800d1e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3714      	adds	r7, #20
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f2:	4770      	bx	lr
 800d1f4:	0800d1f9 	.word	0x0800d1f9

0800d1f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d1f8:	b480      	push	{r7}
 800d1fa:	b085      	sub	sp, #20
 800d1fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d1fe:	2300      	movs	r3, #0
 800d200:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d202:	4b13      	ldr	r3, [pc, #76]	@ (800d250 <prvTaskExitError+0x58>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d20a:	d00b      	beq.n	800d224 <prvTaskExitError+0x2c>
	__asm volatile
 800d20c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d210:	f383 8811 	msr	BASEPRI, r3
 800d214:	f3bf 8f6f 	isb	sy
 800d218:	f3bf 8f4f 	dsb	sy
 800d21c:	60fb      	str	r3, [r7, #12]
}
 800d21e:	bf00      	nop
 800d220:	bf00      	nop
 800d222:	e7fd      	b.n	800d220 <prvTaskExitError+0x28>
	__asm volatile
 800d224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d228:	f383 8811 	msr	BASEPRI, r3
 800d22c:	f3bf 8f6f 	isb	sy
 800d230:	f3bf 8f4f 	dsb	sy
 800d234:	60bb      	str	r3, [r7, #8]
}
 800d236:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d238:	bf00      	nop
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d0fc      	beq.n	800d23a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d240:	bf00      	nop
 800d242:	bf00      	nop
 800d244:	3714      	adds	r7, #20
 800d246:	46bd      	mov	sp, r7
 800d248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24c:	4770      	bx	lr
 800d24e:	bf00      	nop
 800d250:	20000024 	.word	0x20000024
	...

0800d260 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d260:	4b07      	ldr	r3, [pc, #28]	@ (800d280 <pxCurrentTCBConst2>)
 800d262:	6819      	ldr	r1, [r3, #0]
 800d264:	6808      	ldr	r0, [r1, #0]
 800d266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d26a:	f380 8809 	msr	PSP, r0
 800d26e:	f3bf 8f6f 	isb	sy
 800d272:	f04f 0000 	mov.w	r0, #0
 800d276:	f380 8811 	msr	BASEPRI, r0
 800d27a:	4770      	bx	lr
 800d27c:	f3af 8000 	nop.w

0800d280 <pxCurrentTCBConst2>:
 800d280:	20000bf4 	.word	0x20000bf4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d284:	bf00      	nop
 800d286:	bf00      	nop

0800d288 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d288:	4808      	ldr	r0, [pc, #32]	@ (800d2ac <prvPortStartFirstTask+0x24>)
 800d28a:	6800      	ldr	r0, [r0, #0]
 800d28c:	6800      	ldr	r0, [r0, #0]
 800d28e:	f380 8808 	msr	MSP, r0
 800d292:	f04f 0000 	mov.w	r0, #0
 800d296:	f380 8814 	msr	CONTROL, r0
 800d29a:	b662      	cpsie	i
 800d29c:	b661      	cpsie	f
 800d29e:	f3bf 8f4f 	dsb	sy
 800d2a2:	f3bf 8f6f 	isb	sy
 800d2a6:	df00      	svc	0
 800d2a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d2aa:	bf00      	nop
 800d2ac:	e000ed08 	.word	0xe000ed08

0800d2b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b086      	sub	sp, #24
 800d2b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d2b6:	4b47      	ldr	r3, [pc, #284]	@ (800d3d4 <xPortStartScheduler+0x124>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	4a47      	ldr	r2, [pc, #284]	@ (800d3d8 <xPortStartScheduler+0x128>)
 800d2bc:	4293      	cmp	r3, r2
 800d2be:	d10b      	bne.n	800d2d8 <xPortStartScheduler+0x28>
	__asm volatile
 800d2c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2c4:	f383 8811 	msr	BASEPRI, r3
 800d2c8:	f3bf 8f6f 	isb	sy
 800d2cc:	f3bf 8f4f 	dsb	sy
 800d2d0:	613b      	str	r3, [r7, #16]
}
 800d2d2:	bf00      	nop
 800d2d4:	bf00      	nop
 800d2d6:	e7fd      	b.n	800d2d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d2d8:	4b3e      	ldr	r3, [pc, #248]	@ (800d3d4 <xPortStartScheduler+0x124>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	4a3f      	ldr	r2, [pc, #252]	@ (800d3dc <xPortStartScheduler+0x12c>)
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	d10b      	bne.n	800d2fa <xPortStartScheduler+0x4a>
	__asm volatile
 800d2e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2e6:	f383 8811 	msr	BASEPRI, r3
 800d2ea:	f3bf 8f6f 	isb	sy
 800d2ee:	f3bf 8f4f 	dsb	sy
 800d2f2:	60fb      	str	r3, [r7, #12]
}
 800d2f4:	bf00      	nop
 800d2f6:	bf00      	nop
 800d2f8:	e7fd      	b.n	800d2f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d2fa:	4b39      	ldr	r3, [pc, #228]	@ (800d3e0 <xPortStartScheduler+0x130>)
 800d2fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d2fe:	697b      	ldr	r3, [r7, #20]
 800d300:	781b      	ldrb	r3, [r3, #0]
 800d302:	b2db      	uxtb	r3, r3
 800d304:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d306:	697b      	ldr	r3, [r7, #20]
 800d308:	22ff      	movs	r2, #255	@ 0xff
 800d30a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d30c:	697b      	ldr	r3, [r7, #20]
 800d30e:	781b      	ldrb	r3, [r3, #0]
 800d310:	b2db      	uxtb	r3, r3
 800d312:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d314:	78fb      	ldrb	r3, [r7, #3]
 800d316:	b2db      	uxtb	r3, r3
 800d318:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d31c:	b2da      	uxtb	r2, r3
 800d31e:	4b31      	ldr	r3, [pc, #196]	@ (800d3e4 <xPortStartScheduler+0x134>)
 800d320:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d322:	4b31      	ldr	r3, [pc, #196]	@ (800d3e8 <xPortStartScheduler+0x138>)
 800d324:	2207      	movs	r2, #7
 800d326:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d328:	e009      	b.n	800d33e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d32a:	4b2f      	ldr	r3, [pc, #188]	@ (800d3e8 <xPortStartScheduler+0x138>)
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	3b01      	subs	r3, #1
 800d330:	4a2d      	ldr	r2, [pc, #180]	@ (800d3e8 <xPortStartScheduler+0x138>)
 800d332:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d334:	78fb      	ldrb	r3, [r7, #3]
 800d336:	b2db      	uxtb	r3, r3
 800d338:	005b      	lsls	r3, r3, #1
 800d33a:	b2db      	uxtb	r3, r3
 800d33c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d33e:	78fb      	ldrb	r3, [r7, #3]
 800d340:	b2db      	uxtb	r3, r3
 800d342:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d346:	2b80      	cmp	r3, #128	@ 0x80
 800d348:	d0ef      	beq.n	800d32a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d34a:	4b27      	ldr	r3, [pc, #156]	@ (800d3e8 <xPortStartScheduler+0x138>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	f1c3 0307 	rsb	r3, r3, #7
 800d352:	2b04      	cmp	r3, #4
 800d354:	d00b      	beq.n	800d36e <xPortStartScheduler+0xbe>
	__asm volatile
 800d356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d35a:	f383 8811 	msr	BASEPRI, r3
 800d35e:	f3bf 8f6f 	isb	sy
 800d362:	f3bf 8f4f 	dsb	sy
 800d366:	60bb      	str	r3, [r7, #8]
}
 800d368:	bf00      	nop
 800d36a:	bf00      	nop
 800d36c:	e7fd      	b.n	800d36a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d36e:	4b1e      	ldr	r3, [pc, #120]	@ (800d3e8 <xPortStartScheduler+0x138>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	021b      	lsls	r3, r3, #8
 800d374:	4a1c      	ldr	r2, [pc, #112]	@ (800d3e8 <xPortStartScheduler+0x138>)
 800d376:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d378:	4b1b      	ldr	r3, [pc, #108]	@ (800d3e8 <xPortStartScheduler+0x138>)
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d380:	4a19      	ldr	r2, [pc, #100]	@ (800d3e8 <xPortStartScheduler+0x138>)
 800d382:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	b2da      	uxtb	r2, r3
 800d388:	697b      	ldr	r3, [r7, #20]
 800d38a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d38c:	4b17      	ldr	r3, [pc, #92]	@ (800d3ec <xPortStartScheduler+0x13c>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	4a16      	ldr	r2, [pc, #88]	@ (800d3ec <xPortStartScheduler+0x13c>)
 800d392:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d396:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d398:	4b14      	ldr	r3, [pc, #80]	@ (800d3ec <xPortStartScheduler+0x13c>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	4a13      	ldr	r2, [pc, #76]	@ (800d3ec <xPortStartScheduler+0x13c>)
 800d39e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d3a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d3a4:	f000 f8da 	bl	800d55c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d3a8:	4b11      	ldr	r3, [pc, #68]	@ (800d3f0 <xPortStartScheduler+0x140>)
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d3ae:	f000 f8f9 	bl	800d5a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d3b2:	4b10      	ldr	r3, [pc, #64]	@ (800d3f4 <xPortStartScheduler+0x144>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	4a0f      	ldr	r2, [pc, #60]	@ (800d3f4 <xPortStartScheduler+0x144>)
 800d3b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d3bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d3be:	f7ff ff63 	bl	800d288 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d3c2:	f7ff f82b 	bl	800c41c <vTaskSwitchContext>
	prvTaskExitError();
 800d3c6:	f7ff ff17 	bl	800d1f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d3ca:	2300      	movs	r3, #0
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3718      	adds	r7, #24
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}
 800d3d4:	e000ed00 	.word	0xe000ed00
 800d3d8:	410fc271 	.word	0x410fc271
 800d3dc:	410fc270 	.word	0x410fc270
 800d3e0:	e000e400 	.word	0xe000e400
 800d3e4:	20001220 	.word	0x20001220
 800d3e8:	20001224 	.word	0x20001224
 800d3ec:	e000ed20 	.word	0xe000ed20
 800d3f0:	20000024 	.word	0x20000024
 800d3f4:	e000ef34 	.word	0xe000ef34

0800d3f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	b083      	sub	sp, #12
 800d3fc:	af00      	add	r7, sp, #0
	__asm volatile
 800d3fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d402:	f383 8811 	msr	BASEPRI, r3
 800d406:	f3bf 8f6f 	isb	sy
 800d40a:	f3bf 8f4f 	dsb	sy
 800d40e:	607b      	str	r3, [r7, #4]
}
 800d410:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d412:	4b10      	ldr	r3, [pc, #64]	@ (800d454 <vPortEnterCritical+0x5c>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	3301      	adds	r3, #1
 800d418:	4a0e      	ldr	r2, [pc, #56]	@ (800d454 <vPortEnterCritical+0x5c>)
 800d41a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d41c:	4b0d      	ldr	r3, [pc, #52]	@ (800d454 <vPortEnterCritical+0x5c>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	2b01      	cmp	r3, #1
 800d422:	d110      	bne.n	800d446 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d424:	4b0c      	ldr	r3, [pc, #48]	@ (800d458 <vPortEnterCritical+0x60>)
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	b2db      	uxtb	r3, r3
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d00b      	beq.n	800d446 <vPortEnterCritical+0x4e>
	__asm volatile
 800d42e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d432:	f383 8811 	msr	BASEPRI, r3
 800d436:	f3bf 8f6f 	isb	sy
 800d43a:	f3bf 8f4f 	dsb	sy
 800d43e:	603b      	str	r3, [r7, #0]
}
 800d440:	bf00      	nop
 800d442:	bf00      	nop
 800d444:	e7fd      	b.n	800d442 <vPortEnterCritical+0x4a>
	}
}
 800d446:	bf00      	nop
 800d448:	370c      	adds	r7, #12
 800d44a:	46bd      	mov	sp, r7
 800d44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d450:	4770      	bx	lr
 800d452:	bf00      	nop
 800d454:	20000024 	.word	0x20000024
 800d458:	e000ed04 	.word	0xe000ed04

0800d45c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d45c:	b480      	push	{r7}
 800d45e:	b083      	sub	sp, #12
 800d460:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d462:	4b12      	ldr	r3, [pc, #72]	@ (800d4ac <vPortExitCritical+0x50>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d10b      	bne.n	800d482 <vPortExitCritical+0x26>
	__asm volatile
 800d46a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d46e:	f383 8811 	msr	BASEPRI, r3
 800d472:	f3bf 8f6f 	isb	sy
 800d476:	f3bf 8f4f 	dsb	sy
 800d47a:	607b      	str	r3, [r7, #4]
}
 800d47c:	bf00      	nop
 800d47e:	bf00      	nop
 800d480:	e7fd      	b.n	800d47e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d482:	4b0a      	ldr	r3, [pc, #40]	@ (800d4ac <vPortExitCritical+0x50>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	3b01      	subs	r3, #1
 800d488:	4a08      	ldr	r2, [pc, #32]	@ (800d4ac <vPortExitCritical+0x50>)
 800d48a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d48c:	4b07      	ldr	r3, [pc, #28]	@ (800d4ac <vPortExitCritical+0x50>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d105      	bne.n	800d4a0 <vPortExitCritical+0x44>
 800d494:	2300      	movs	r3, #0
 800d496:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	f383 8811 	msr	BASEPRI, r3
}
 800d49e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d4a0:	bf00      	nop
 800d4a2:	370c      	adds	r7, #12
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4aa:	4770      	bx	lr
 800d4ac:	20000024 	.word	0x20000024

0800d4b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d4b0:	f3ef 8009 	mrs	r0, PSP
 800d4b4:	f3bf 8f6f 	isb	sy
 800d4b8:	4b15      	ldr	r3, [pc, #84]	@ (800d510 <pxCurrentTCBConst>)
 800d4ba:	681a      	ldr	r2, [r3, #0]
 800d4bc:	f01e 0f10 	tst.w	lr, #16
 800d4c0:	bf08      	it	eq
 800d4c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d4c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4ca:	6010      	str	r0, [r2, #0]
 800d4cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d4d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d4d4:	f380 8811 	msr	BASEPRI, r0
 800d4d8:	f3bf 8f4f 	dsb	sy
 800d4dc:	f3bf 8f6f 	isb	sy
 800d4e0:	f7fe ff9c 	bl	800c41c <vTaskSwitchContext>
 800d4e4:	f04f 0000 	mov.w	r0, #0
 800d4e8:	f380 8811 	msr	BASEPRI, r0
 800d4ec:	bc09      	pop	{r0, r3}
 800d4ee:	6819      	ldr	r1, [r3, #0]
 800d4f0:	6808      	ldr	r0, [r1, #0]
 800d4f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4f6:	f01e 0f10 	tst.w	lr, #16
 800d4fa:	bf08      	it	eq
 800d4fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d500:	f380 8809 	msr	PSP, r0
 800d504:	f3bf 8f6f 	isb	sy
 800d508:	4770      	bx	lr
 800d50a:	bf00      	nop
 800d50c:	f3af 8000 	nop.w

0800d510 <pxCurrentTCBConst>:
 800d510:	20000bf4 	.word	0x20000bf4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d514:	bf00      	nop
 800d516:	bf00      	nop

0800d518 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b082      	sub	sp, #8
 800d51c:	af00      	add	r7, sp, #0
	__asm volatile
 800d51e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d522:	f383 8811 	msr	BASEPRI, r3
 800d526:	f3bf 8f6f 	isb	sy
 800d52a:	f3bf 8f4f 	dsb	sy
 800d52e:	607b      	str	r3, [r7, #4]
}
 800d530:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d532:	f7fe feb9 	bl	800c2a8 <xTaskIncrementTick>
 800d536:	4603      	mov	r3, r0
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d003      	beq.n	800d544 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d53c:	4b06      	ldr	r3, [pc, #24]	@ (800d558 <xPortSysTickHandler+0x40>)
 800d53e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d542:	601a      	str	r2, [r3, #0]
 800d544:	2300      	movs	r3, #0
 800d546:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	f383 8811 	msr	BASEPRI, r3
}
 800d54e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d550:	bf00      	nop
 800d552:	3708      	adds	r7, #8
 800d554:	46bd      	mov	sp, r7
 800d556:	bd80      	pop	{r7, pc}
 800d558:	e000ed04 	.word	0xe000ed04

0800d55c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d55c:	b480      	push	{r7}
 800d55e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d560:	4b0b      	ldr	r3, [pc, #44]	@ (800d590 <vPortSetupTimerInterrupt+0x34>)
 800d562:	2200      	movs	r2, #0
 800d564:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d566:	4b0b      	ldr	r3, [pc, #44]	@ (800d594 <vPortSetupTimerInterrupt+0x38>)
 800d568:	2200      	movs	r2, #0
 800d56a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d56c:	4b0a      	ldr	r3, [pc, #40]	@ (800d598 <vPortSetupTimerInterrupt+0x3c>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	4a0a      	ldr	r2, [pc, #40]	@ (800d59c <vPortSetupTimerInterrupt+0x40>)
 800d572:	fba2 2303 	umull	r2, r3, r2, r3
 800d576:	099b      	lsrs	r3, r3, #6
 800d578:	4a09      	ldr	r2, [pc, #36]	@ (800d5a0 <vPortSetupTimerInterrupt+0x44>)
 800d57a:	3b01      	subs	r3, #1
 800d57c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d57e:	4b04      	ldr	r3, [pc, #16]	@ (800d590 <vPortSetupTimerInterrupt+0x34>)
 800d580:	2207      	movs	r2, #7
 800d582:	601a      	str	r2, [r3, #0]
}
 800d584:	bf00      	nop
 800d586:	46bd      	mov	sp, r7
 800d588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58c:	4770      	bx	lr
 800d58e:	bf00      	nop
 800d590:	e000e010 	.word	0xe000e010
 800d594:	e000e018 	.word	0xe000e018
 800d598:	20000000 	.word	0x20000000
 800d59c:	10624dd3 	.word	0x10624dd3
 800d5a0:	e000e014 	.word	0xe000e014

0800d5a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d5a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d5b4 <vPortEnableVFP+0x10>
 800d5a8:	6801      	ldr	r1, [r0, #0]
 800d5aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d5ae:	6001      	str	r1, [r0, #0]
 800d5b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d5b2:	bf00      	nop
 800d5b4:	e000ed88 	.word	0xe000ed88

0800d5b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d5b8:	b480      	push	{r7}
 800d5ba:	b085      	sub	sp, #20
 800d5bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d5be:	f3ef 8305 	mrs	r3, IPSR
 800d5c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	2b0f      	cmp	r3, #15
 800d5c8:	d915      	bls.n	800d5f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d5ca:	4a18      	ldr	r2, [pc, #96]	@ (800d62c <vPortValidateInterruptPriority+0x74>)
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	4413      	add	r3, r2
 800d5d0:	781b      	ldrb	r3, [r3, #0]
 800d5d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d5d4:	4b16      	ldr	r3, [pc, #88]	@ (800d630 <vPortValidateInterruptPriority+0x78>)
 800d5d6:	781b      	ldrb	r3, [r3, #0]
 800d5d8:	7afa      	ldrb	r2, [r7, #11]
 800d5da:	429a      	cmp	r2, r3
 800d5dc:	d20b      	bcs.n	800d5f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d5de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5e2:	f383 8811 	msr	BASEPRI, r3
 800d5e6:	f3bf 8f6f 	isb	sy
 800d5ea:	f3bf 8f4f 	dsb	sy
 800d5ee:	607b      	str	r3, [r7, #4]
}
 800d5f0:	bf00      	nop
 800d5f2:	bf00      	nop
 800d5f4:	e7fd      	b.n	800d5f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d5f6:	4b0f      	ldr	r3, [pc, #60]	@ (800d634 <vPortValidateInterruptPriority+0x7c>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d5fe:	4b0e      	ldr	r3, [pc, #56]	@ (800d638 <vPortValidateInterruptPriority+0x80>)
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	429a      	cmp	r2, r3
 800d604:	d90b      	bls.n	800d61e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d60a:	f383 8811 	msr	BASEPRI, r3
 800d60e:	f3bf 8f6f 	isb	sy
 800d612:	f3bf 8f4f 	dsb	sy
 800d616:	603b      	str	r3, [r7, #0]
}
 800d618:	bf00      	nop
 800d61a:	bf00      	nop
 800d61c:	e7fd      	b.n	800d61a <vPortValidateInterruptPriority+0x62>
	}
 800d61e:	bf00      	nop
 800d620:	3714      	adds	r7, #20
 800d622:	46bd      	mov	sp, r7
 800d624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d628:	4770      	bx	lr
 800d62a:	bf00      	nop
 800d62c:	e000e3f0 	.word	0xe000e3f0
 800d630:	20001220 	.word	0x20001220
 800d634:	e000ed0c 	.word	0xe000ed0c
 800d638:	20001224 	.word	0x20001224

0800d63c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b08a      	sub	sp, #40	@ 0x28
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d644:	2300      	movs	r3, #0
 800d646:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d648:	f7fe fd72 	bl	800c130 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d64c:	4b5c      	ldr	r3, [pc, #368]	@ (800d7c0 <pvPortMalloc+0x184>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d101      	bne.n	800d658 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d654:	f000 f924 	bl	800d8a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d658:	4b5a      	ldr	r3, [pc, #360]	@ (800d7c4 <pvPortMalloc+0x188>)
 800d65a:	681a      	ldr	r2, [r3, #0]
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	4013      	ands	r3, r2
 800d660:	2b00      	cmp	r3, #0
 800d662:	f040 8095 	bne.w	800d790 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d01e      	beq.n	800d6aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d66c:	2208      	movs	r2, #8
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	4413      	add	r3, r2
 800d672:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	f003 0307 	and.w	r3, r3, #7
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d015      	beq.n	800d6aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f023 0307 	bic.w	r3, r3, #7
 800d684:	3308      	adds	r3, #8
 800d686:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	f003 0307 	and.w	r3, r3, #7
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d00b      	beq.n	800d6aa <pvPortMalloc+0x6e>
	__asm volatile
 800d692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d696:	f383 8811 	msr	BASEPRI, r3
 800d69a:	f3bf 8f6f 	isb	sy
 800d69e:	f3bf 8f4f 	dsb	sy
 800d6a2:	617b      	str	r3, [r7, #20]
}
 800d6a4:	bf00      	nop
 800d6a6:	bf00      	nop
 800d6a8:	e7fd      	b.n	800d6a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d06f      	beq.n	800d790 <pvPortMalloc+0x154>
 800d6b0:	4b45      	ldr	r3, [pc, #276]	@ (800d7c8 <pvPortMalloc+0x18c>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	687a      	ldr	r2, [r7, #4]
 800d6b6:	429a      	cmp	r2, r3
 800d6b8:	d86a      	bhi.n	800d790 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d6ba:	4b44      	ldr	r3, [pc, #272]	@ (800d7cc <pvPortMalloc+0x190>)
 800d6bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d6be:	4b43      	ldr	r3, [pc, #268]	@ (800d7cc <pvPortMalloc+0x190>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d6c4:	e004      	b.n	800d6d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d6c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d6d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6d2:	685b      	ldr	r3, [r3, #4]
 800d6d4:	687a      	ldr	r2, [r7, #4]
 800d6d6:	429a      	cmp	r2, r3
 800d6d8:	d903      	bls.n	800d6e2 <pvPortMalloc+0xa6>
 800d6da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d1f1      	bne.n	800d6c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d6e2:	4b37      	ldr	r3, [pc, #220]	@ (800d7c0 <pvPortMalloc+0x184>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d6e8:	429a      	cmp	r2, r3
 800d6ea:	d051      	beq.n	800d790 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d6ec:	6a3b      	ldr	r3, [r7, #32]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	2208      	movs	r2, #8
 800d6f2:	4413      	add	r3, r2
 800d6f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d6f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6f8:	681a      	ldr	r2, [r3, #0]
 800d6fa:	6a3b      	ldr	r3, [r7, #32]
 800d6fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d6fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d700:	685a      	ldr	r2, [r3, #4]
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	1ad2      	subs	r2, r2, r3
 800d706:	2308      	movs	r3, #8
 800d708:	005b      	lsls	r3, r3, #1
 800d70a:	429a      	cmp	r2, r3
 800d70c:	d920      	bls.n	800d750 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d70e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	4413      	add	r3, r2
 800d714:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d716:	69bb      	ldr	r3, [r7, #24]
 800d718:	f003 0307 	and.w	r3, r3, #7
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d00b      	beq.n	800d738 <pvPortMalloc+0xfc>
	__asm volatile
 800d720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d724:	f383 8811 	msr	BASEPRI, r3
 800d728:	f3bf 8f6f 	isb	sy
 800d72c:	f3bf 8f4f 	dsb	sy
 800d730:	613b      	str	r3, [r7, #16]
}
 800d732:	bf00      	nop
 800d734:	bf00      	nop
 800d736:	e7fd      	b.n	800d734 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d73a:	685a      	ldr	r2, [r3, #4]
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	1ad2      	subs	r2, r2, r3
 800d740:	69bb      	ldr	r3, [r7, #24]
 800d742:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d746:	687a      	ldr	r2, [r7, #4]
 800d748:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d74a:	69b8      	ldr	r0, [r7, #24]
 800d74c:	f000 f90a 	bl	800d964 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d750:	4b1d      	ldr	r3, [pc, #116]	@ (800d7c8 <pvPortMalloc+0x18c>)
 800d752:	681a      	ldr	r2, [r3, #0]
 800d754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d756:	685b      	ldr	r3, [r3, #4]
 800d758:	1ad3      	subs	r3, r2, r3
 800d75a:	4a1b      	ldr	r2, [pc, #108]	@ (800d7c8 <pvPortMalloc+0x18c>)
 800d75c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d75e:	4b1a      	ldr	r3, [pc, #104]	@ (800d7c8 <pvPortMalloc+0x18c>)
 800d760:	681a      	ldr	r2, [r3, #0]
 800d762:	4b1b      	ldr	r3, [pc, #108]	@ (800d7d0 <pvPortMalloc+0x194>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	429a      	cmp	r2, r3
 800d768:	d203      	bcs.n	800d772 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d76a:	4b17      	ldr	r3, [pc, #92]	@ (800d7c8 <pvPortMalloc+0x18c>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	4a18      	ldr	r2, [pc, #96]	@ (800d7d0 <pvPortMalloc+0x194>)
 800d770:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d774:	685a      	ldr	r2, [r3, #4]
 800d776:	4b13      	ldr	r3, [pc, #76]	@ (800d7c4 <pvPortMalloc+0x188>)
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	431a      	orrs	r2, r3
 800d77c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d77e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d782:	2200      	movs	r2, #0
 800d784:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d786:	4b13      	ldr	r3, [pc, #76]	@ (800d7d4 <pvPortMalloc+0x198>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	3301      	adds	r3, #1
 800d78c:	4a11      	ldr	r2, [pc, #68]	@ (800d7d4 <pvPortMalloc+0x198>)
 800d78e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d790:	f7fe fcdc 	bl	800c14c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d794:	69fb      	ldr	r3, [r7, #28]
 800d796:	f003 0307 	and.w	r3, r3, #7
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d00b      	beq.n	800d7b6 <pvPortMalloc+0x17a>
	__asm volatile
 800d79e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7a2:	f383 8811 	msr	BASEPRI, r3
 800d7a6:	f3bf 8f6f 	isb	sy
 800d7aa:	f3bf 8f4f 	dsb	sy
 800d7ae:	60fb      	str	r3, [r7, #12]
}
 800d7b0:	bf00      	nop
 800d7b2:	bf00      	nop
 800d7b4:	e7fd      	b.n	800d7b2 <pvPortMalloc+0x176>
	return pvReturn;
 800d7b6:	69fb      	ldr	r3, [r7, #28]
}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	3728      	adds	r7, #40	@ 0x28
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}
 800d7c0:	20005230 	.word	0x20005230
 800d7c4:	20005244 	.word	0x20005244
 800d7c8:	20005234 	.word	0x20005234
 800d7cc:	20005228 	.word	0x20005228
 800d7d0:	20005238 	.word	0x20005238
 800d7d4:	2000523c 	.word	0x2000523c

0800d7d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b086      	sub	sp, #24
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d04f      	beq.n	800d88a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d7ea:	2308      	movs	r3, #8
 800d7ec:	425b      	negs	r3, r3
 800d7ee:	697a      	ldr	r2, [r7, #20]
 800d7f0:	4413      	add	r3, r2
 800d7f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d7f4:	697b      	ldr	r3, [r7, #20]
 800d7f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d7f8:	693b      	ldr	r3, [r7, #16]
 800d7fa:	685a      	ldr	r2, [r3, #4]
 800d7fc:	4b25      	ldr	r3, [pc, #148]	@ (800d894 <vPortFree+0xbc>)
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	4013      	ands	r3, r2
 800d802:	2b00      	cmp	r3, #0
 800d804:	d10b      	bne.n	800d81e <vPortFree+0x46>
	__asm volatile
 800d806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d80a:	f383 8811 	msr	BASEPRI, r3
 800d80e:	f3bf 8f6f 	isb	sy
 800d812:	f3bf 8f4f 	dsb	sy
 800d816:	60fb      	str	r3, [r7, #12]
}
 800d818:	bf00      	nop
 800d81a:	bf00      	nop
 800d81c:	e7fd      	b.n	800d81a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d81e:	693b      	ldr	r3, [r7, #16]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d00b      	beq.n	800d83e <vPortFree+0x66>
	__asm volatile
 800d826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d82a:	f383 8811 	msr	BASEPRI, r3
 800d82e:	f3bf 8f6f 	isb	sy
 800d832:	f3bf 8f4f 	dsb	sy
 800d836:	60bb      	str	r3, [r7, #8]
}
 800d838:	bf00      	nop
 800d83a:	bf00      	nop
 800d83c:	e7fd      	b.n	800d83a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d83e:	693b      	ldr	r3, [r7, #16]
 800d840:	685a      	ldr	r2, [r3, #4]
 800d842:	4b14      	ldr	r3, [pc, #80]	@ (800d894 <vPortFree+0xbc>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	4013      	ands	r3, r2
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d01e      	beq.n	800d88a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d84c:	693b      	ldr	r3, [r7, #16]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d11a      	bne.n	800d88a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d854:	693b      	ldr	r3, [r7, #16]
 800d856:	685a      	ldr	r2, [r3, #4]
 800d858:	4b0e      	ldr	r3, [pc, #56]	@ (800d894 <vPortFree+0xbc>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	43db      	mvns	r3, r3
 800d85e:	401a      	ands	r2, r3
 800d860:	693b      	ldr	r3, [r7, #16]
 800d862:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d864:	f7fe fc64 	bl	800c130 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d868:	693b      	ldr	r3, [r7, #16]
 800d86a:	685a      	ldr	r2, [r3, #4]
 800d86c:	4b0a      	ldr	r3, [pc, #40]	@ (800d898 <vPortFree+0xc0>)
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	4413      	add	r3, r2
 800d872:	4a09      	ldr	r2, [pc, #36]	@ (800d898 <vPortFree+0xc0>)
 800d874:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d876:	6938      	ldr	r0, [r7, #16]
 800d878:	f000 f874 	bl	800d964 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d87c:	4b07      	ldr	r3, [pc, #28]	@ (800d89c <vPortFree+0xc4>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	3301      	adds	r3, #1
 800d882:	4a06      	ldr	r2, [pc, #24]	@ (800d89c <vPortFree+0xc4>)
 800d884:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d886:	f7fe fc61 	bl	800c14c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d88a:	bf00      	nop
 800d88c:	3718      	adds	r7, #24
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}
 800d892:	bf00      	nop
 800d894:	20005244 	.word	0x20005244
 800d898:	20005234 	.word	0x20005234
 800d89c:	20005240 	.word	0x20005240

0800d8a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d8a0:	b480      	push	{r7}
 800d8a2:	b085      	sub	sp, #20
 800d8a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d8a6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d8aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d8ac:	4b27      	ldr	r3, [pc, #156]	@ (800d94c <prvHeapInit+0xac>)
 800d8ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	f003 0307 	and.w	r3, r3, #7
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d00c      	beq.n	800d8d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	3307      	adds	r3, #7
 800d8be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	f023 0307 	bic.w	r3, r3, #7
 800d8c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d8c8:	68ba      	ldr	r2, [r7, #8]
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	1ad3      	subs	r3, r2, r3
 800d8ce:	4a1f      	ldr	r2, [pc, #124]	@ (800d94c <prvHeapInit+0xac>)
 800d8d0:	4413      	add	r3, r2
 800d8d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d8d8:	4a1d      	ldr	r2, [pc, #116]	@ (800d950 <prvHeapInit+0xb0>)
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d8de:	4b1c      	ldr	r3, [pc, #112]	@ (800d950 <prvHeapInit+0xb0>)
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	68ba      	ldr	r2, [r7, #8]
 800d8e8:	4413      	add	r3, r2
 800d8ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d8ec:	2208      	movs	r2, #8
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	1a9b      	subs	r3, r3, r2
 800d8f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	f023 0307 	bic.w	r3, r3, #7
 800d8fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	4a15      	ldr	r2, [pc, #84]	@ (800d954 <prvHeapInit+0xb4>)
 800d900:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d902:	4b14      	ldr	r3, [pc, #80]	@ (800d954 <prvHeapInit+0xb4>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	2200      	movs	r2, #0
 800d908:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d90a:	4b12      	ldr	r3, [pc, #72]	@ (800d954 <prvHeapInit+0xb4>)
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	2200      	movs	r2, #0
 800d910:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	68fa      	ldr	r2, [r7, #12]
 800d91a:	1ad2      	subs	r2, r2, r3
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d920:	4b0c      	ldr	r3, [pc, #48]	@ (800d954 <prvHeapInit+0xb4>)
 800d922:	681a      	ldr	r2, [r3, #0]
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	685b      	ldr	r3, [r3, #4]
 800d92c:	4a0a      	ldr	r2, [pc, #40]	@ (800d958 <prvHeapInit+0xb8>)
 800d92e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	685b      	ldr	r3, [r3, #4]
 800d934:	4a09      	ldr	r2, [pc, #36]	@ (800d95c <prvHeapInit+0xbc>)
 800d936:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d938:	4b09      	ldr	r3, [pc, #36]	@ (800d960 <prvHeapInit+0xc0>)
 800d93a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d93e:	601a      	str	r2, [r3, #0]
}
 800d940:	bf00      	nop
 800d942:	3714      	adds	r7, #20
 800d944:	46bd      	mov	sp, r7
 800d946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94a:	4770      	bx	lr
 800d94c:	20001228 	.word	0x20001228
 800d950:	20005228 	.word	0x20005228
 800d954:	20005230 	.word	0x20005230
 800d958:	20005238 	.word	0x20005238
 800d95c:	20005234 	.word	0x20005234
 800d960:	20005244 	.word	0x20005244

0800d964 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d964:	b480      	push	{r7}
 800d966:	b085      	sub	sp, #20
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d96c:	4b28      	ldr	r3, [pc, #160]	@ (800da10 <prvInsertBlockIntoFreeList+0xac>)
 800d96e:	60fb      	str	r3, [r7, #12]
 800d970:	e002      	b.n	800d978 <prvInsertBlockIntoFreeList+0x14>
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	60fb      	str	r3, [r7, #12]
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	687a      	ldr	r2, [r7, #4]
 800d97e:	429a      	cmp	r2, r3
 800d980:	d8f7      	bhi.n	800d972 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	685b      	ldr	r3, [r3, #4]
 800d98a:	68ba      	ldr	r2, [r7, #8]
 800d98c:	4413      	add	r3, r2
 800d98e:	687a      	ldr	r2, [r7, #4]
 800d990:	429a      	cmp	r2, r3
 800d992:	d108      	bne.n	800d9a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	685a      	ldr	r2, [r3, #4]
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	685b      	ldr	r3, [r3, #4]
 800d99c:	441a      	add	r2, r3
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	685b      	ldr	r3, [r3, #4]
 800d9ae:	68ba      	ldr	r2, [r7, #8]
 800d9b0:	441a      	add	r2, r3
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	429a      	cmp	r2, r3
 800d9b8:	d118      	bne.n	800d9ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	681a      	ldr	r2, [r3, #0]
 800d9be:	4b15      	ldr	r3, [pc, #84]	@ (800da14 <prvInsertBlockIntoFreeList+0xb0>)
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	d00d      	beq.n	800d9e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	685a      	ldr	r2, [r3, #4]
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	685b      	ldr	r3, [r3, #4]
 800d9d0:	441a      	add	r2, r3
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	681a      	ldr	r2, [r3, #0]
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	601a      	str	r2, [r3, #0]
 800d9e0:	e008      	b.n	800d9f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d9e2:	4b0c      	ldr	r3, [pc, #48]	@ (800da14 <prvInsertBlockIntoFreeList+0xb0>)
 800d9e4:	681a      	ldr	r2, [r3, #0]
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	601a      	str	r2, [r3, #0]
 800d9ea:	e003      	b.n	800d9f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	681a      	ldr	r2, [r3, #0]
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d9f4:	68fa      	ldr	r2, [r7, #12]
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	429a      	cmp	r2, r3
 800d9fa:	d002      	beq.n	800da02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	687a      	ldr	r2, [r7, #4]
 800da00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da02:	bf00      	nop
 800da04:	3714      	adds	r7, #20
 800da06:	46bd      	mov	sp, r7
 800da08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0c:	4770      	bx	lr
 800da0e:	bf00      	nop
 800da10:	20005228 	.word	0x20005228
 800da14:	20005230 	.word	0x20005230

0800da18 <malloc>:
 800da18:	4b02      	ldr	r3, [pc, #8]	@ (800da24 <malloc+0xc>)
 800da1a:	4601      	mov	r1, r0
 800da1c:	6818      	ldr	r0, [r3, #0]
 800da1e:	f000 b82d 	b.w	800da7c <_malloc_r>
 800da22:	bf00      	nop
 800da24:	20000034 	.word	0x20000034

0800da28 <free>:
 800da28:	4b02      	ldr	r3, [pc, #8]	@ (800da34 <free+0xc>)
 800da2a:	4601      	mov	r1, r0
 800da2c:	6818      	ldr	r0, [r3, #0]
 800da2e:	f000 bc91 	b.w	800e354 <_free_r>
 800da32:	bf00      	nop
 800da34:	20000034 	.word	0x20000034

0800da38 <sbrk_aligned>:
 800da38:	b570      	push	{r4, r5, r6, lr}
 800da3a:	4e0f      	ldr	r6, [pc, #60]	@ (800da78 <sbrk_aligned+0x40>)
 800da3c:	460c      	mov	r4, r1
 800da3e:	6831      	ldr	r1, [r6, #0]
 800da40:	4605      	mov	r5, r0
 800da42:	b911      	cbnz	r1, 800da4a <sbrk_aligned+0x12>
 800da44:	f000 fc0a 	bl	800e25c <_sbrk_r>
 800da48:	6030      	str	r0, [r6, #0]
 800da4a:	4621      	mov	r1, r4
 800da4c:	4628      	mov	r0, r5
 800da4e:	f000 fc05 	bl	800e25c <_sbrk_r>
 800da52:	1c43      	adds	r3, r0, #1
 800da54:	d103      	bne.n	800da5e <sbrk_aligned+0x26>
 800da56:	f04f 34ff 	mov.w	r4, #4294967295
 800da5a:	4620      	mov	r0, r4
 800da5c:	bd70      	pop	{r4, r5, r6, pc}
 800da5e:	1cc4      	adds	r4, r0, #3
 800da60:	f024 0403 	bic.w	r4, r4, #3
 800da64:	42a0      	cmp	r0, r4
 800da66:	d0f8      	beq.n	800da5a <sbrk_aligned+0x22>
 800da68:	1a21      	subs	r1, r4, r0
 800da6a:	4628      	mov	r0, r5
 800da6c:	f000 fbf6 	bl	800e25c <_sbrk_r>
 800da70:	3001      	adds	r0, #1
 800da72:	d1f2      	bne.n	800da5a <sbrk_aligned+0x22>
 800da74:	e7ef      	b.n	800da56 <sbrk_aligned+0x1e>
 800da76:	bf00      	nop
 800da78:	20005248 	.word	0x20005248

0800da7c <_malloc_r>:
 800da7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da80:	1ccd      	adds	r5, r1, #3
 800da82:	f025 0503 	bic.w	r5, r5, #3
 800da86:	3508      	adds	r5, #8
 800da88:	2d0c      	cmp	r5, #12
 800da8a:	bf38      	it	cc
 800da8c:	250c      	movcc	r5, #12
 800da8e:	2d00      	cmp	r5, #0
 800da90:	4606      	mov	r6, r0
 800da92:	db01      	blt.n	800da98 <_malloc_r+0x1c>
 800da94:	42a9      	cmp	r1, r5
 800da96:	d904      	bls.n	800daa2 <_malloc_r+0x26>
 800da98:	230c      	movs	r3, #12
 800da9a:	6033      	str	r3, [r6, #0]
 800da9c:	2000      	movs	r0, #0
 800da9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800daa2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800db78 <_malloc_r+0xfc>
 800daa6:	f000 f869 	bl	800db7c <__malloc_lock>
 800daaa:	f8d8 3000 	ldr.w	r3, [r8]
 800daae:	461c      	mov	r4, r3
 800dab0:	bb44      	cbnz	r4, 800db04 <_malloc_r+0x88>
 800dab2:	4629      	mov	r1, r5
 800dab4:	4630      	mov	r0, r6
 800dab6:	f7ff ffbf 	bl	800da38 <sbrk_aligned>
 800daba:	1c43      	adds	r3, r0, #1
 800dabc:	4604      	mov	r4, r0
 800dabe:	d158      	bne.n	800db72 <_malloc_r+0xf6>
 800dac0:	f8d8 4000 	ldr.w	r4, [r8]
 800dac4:	4627      	mov	r7, r4
 800dac6:	2f00      	cmp	r7, #0
 800dac8:	d143      	bne.n	800db52 <_malloc_r+0xd6>
 800daca:	2c00      	cmp	r4, #0
 800dacc:	d04b      	beq.n	800db66 <_malloc_r+0xea>
 800dace:	6823      	ldr	r3, [r4, #0]
 800dad0:	4639      	mov	r1, r7
 800dad2:	4630      	mov	r0, r6
 800dad4:	eb04 0903 	add.w	r9, r4, r3
 800dad8:	f000 fbc0 	bl	800e25c <_sbrk_r>
 800dadc:	4581      	cmp	r9, r0
 800dade:	d142      	bne.n	800db66 <_malloc_r+0xea>
 800dae0:	6821      	ldr	r1, [r4, #0]
 800dae2:	1a6d      	subs	r5, r5, r1
 800dae4:	4629      	mov	r1, r5
 800dae6:	4630      	mov	r0, r6
 800dae8:	f7ff ffa6 	bl	800da38 <sbrk_aligned>
 800daec:	3001      	adds	r0, #1
 800daee:	d03a      	beq.n	800db66 <_malloc_r+0xea>
 800daf0:	6823      	ldr	r3, [r4, #0]
 800daf2:	442b      	add	r3, r5
 800daf4:	6023      	str	r3, [r4, #0]
 800daf6:	f8d8 3000 	ldr.w	r3, [r8]
 800dafa:	685a      	ldr	r2, [r3, #4]
 800dafc:	bb62      	cbnz	r2, 800db58 <_malloc_r+0xdc>
 800dafe:	f8c8 7000 	str.w	r7, [r8]
 800db02:	e00f      	b.n	800db24 <_malloc_r+0xa8>
 800db04:	6822      	ldr	r2, [r4, #0]
 800db06:	1b52      	subs	r2, r2, r5
 800db08:	d420      	bmi.n	800db4c <_malloc_r+0xd0>
 800db0a:	2a0b      	cmp	r2, #11
 800db0c:	d917      	bls.n	800db3e <_malloc_r+0xc2>
 800db0e:	1961      	adds	r1, r4, r5
 800db10:	42a3      	cmp	r3, r4
 800db12:	6025      	str	r5, [r4, #0]
 800db14:	bf18      	it	ne
 800db16:	6059      	strne	r1, [r3, #4]
 800db18:	6863      	ldr	r3, [r4, #4]
 800db1a:	bf08      	it	eq
 800db1c:	f8c8 1000 	streq.w	r1, [r8]
 800db20:	5162      	str	r2, [r4, r5]
 800db22:	604b      	str	r3, [r1, #4]
 800db24:	4630      	mov	r0, r6
 800db26:	f000 f82f 	bl	800db88 <__malloc_unlock>
 800db2a:	f104 000b 	add.w	r0, r4, #11
 800db2e:	1d23      	adds	r3, r4, #4
 800db30:	f020 0007 	bic.w	r0, r0, #7
 800db34:	1ac2      	subs	r2, r0, r3
 800db36:	bf1c      	itt	ne
 800db38:	1a1b      	subne	r3, r3, r0
 800db3a:	50a3      	strne	r3, [r4, r2]
 800db3c:	e7af      	b.n	800da9e <_malloc_r+0x22>
 800db3e:	6862      	ldr	r2, [r4, #4]
 800db40:	42a3      	cmp	r3, r4
 800db42:	bf0c      	ite	eq
 800db44:	f8c8 2000 	streq.w	r2, [r8]
 800db48:	605a      	strne	r2, [r3, #4]
 800db4a:	e7eb      	b.n	800db24 <_malloc_r+0xa8>
 800db4c:	4623      	mov	r3, r4
 800db4e:	6864      	ldr	r4, [r4, #4]
 800db50:	e7ae      	b.n	800dab0 <_malloc_r+0x34>
 800db52:	463c      	mov	r4, r7
 800db54:	687f      	ldr	r7, [r7, #4]
 800db56:	e7b6      	b.n	800dac6 <_malloc_r+0x4a>
 800db58:	461a      	mov	r2, r3
 800db5a:	685b      	ldr	r3, [r3, #4]
 800db5c:	42a3      	cmp	r3, r4
 800db5e:	d1fb      	bne.n	800db58 <_malloc_r+0xdc>
 800db60:	2300      	movs	r3, #0
 800db62:	6053      	str	r3, [r2, #4]
 800db64:	e7de      	b.n	800db24 <_malloc_r+0xa8>
 800db66:	230c      	movs	r3, #12
 800db68:	6033      	str	r3, [r6, #0]
 800db6a:	4630      	mov	r0, r6
 800db6c:	f000 f80c 	bl	800db88 <__malloc_unlock>
 800db70:	e794      	b.n	800da9c <_malloc_r+0x20>
 800db72:	6005      	str	r5, [r0, #0]
 800db74:	e7d6      	b.n	800db24 <_malloc_r+0xa8>
 800db76:	bf00      	nop
 800db78:	2000524c 	.word	0x2000524c

0800db7c <__malloc_lock>:
 800db7c:	4801      	ldr	r0, [pc, #4]	@ (800db84 <__malloc_lock+0x8>)
 800db7e:	f000 bbba 	b.w	800e2f6 <__retarget_lock_acquire_recursive>
 800db82:	bf00      	nop
 800db84:	20005390 	.word	0x20005390

0800db88 <__malloc_unlock>:
 800db88:	4801      	ldr	r0, [pc, #4]	@ (800db90 <__malloc_unlock+0x8>)
 800db8a:	f000 bbb5 	b.w	800e2f8 <__retarget_lock_release_recursive>
 800db8e:	bf00      	nop
 800db90:	20005390 	.word	0x20005390

0800db94 <rand>:
 800db94:	4b16      	ldr	r3, [pc, #88]	@ (800dbf0 <rand+0x5c>)
 800db96:	b510      	push	{r4, lr}
 800db98:	681c      	ldr	r4, [r3, #0]
 800db9a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800db9c:	b9b3      	cbnz	r3, 800dbcc <rand+0x38>
 800db9e:	2018      	movs	r0, #24
 800dba0:	f7ff ff3a 	bl	800da18 <malloc>
 800dba4:	4602      	mov	r2, r0
 800dba6:	6320      	str	r0, [r4, #48]	@ 0x30
 800dba8:	b920      	cbnz	r0, 800dbb4 <rand+0x20>
 800dbaa:	4b12      	ldr	r3, [pc, #72]	@ (800dbf4 <rand+0x60>)
 800dbac:	4812      	ldr	r0, [pc, #72]	@ (800dbf8 <rand+0x64>)
 800dbae:	2152      	movs	r1, #82	@ 0x52
 800dbb0:	f000 fbb2 	bl	800e318 <__assert_func>
 800dbb4:	4911      	ldr	r1, [pc, #68]	@ (800dbfc <rand+0x68>)
 800dbb6:	4b12      	ldr	r3, [pc, #72]	@ (800dc00 <rand+0x6c>)
 800dbb8:	e9c0 1300 	strd	r1, r3, [r0]
 800dbbc:	4b11      	ldr	r3, [pc, #68]	@ (800dc04 <rand+0x70>)
 800dbbe:	6083      	str	r3, [r0, #8]
 800dbc0:	230b      	movs	r3, #11
 800dbc2:	8183      	strh	r3, [r0, #12]
 800dbc4:	2100      	movs	r1, #0
 800dbc6:	2001      	movs	r0, #1
 800dbc8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800dbcc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800dbce:	480e      	ldr	r0, [pc, #56]	@ (800dc08 <rand+0x74>)
 800dbd0:	690b      	ldr	r3, [r1, #16]
 800dbd2:	694c      	ldr	r4, [r1, #20]
 800dbd4:	4a0d      	ldr	r2, [pc, #52]	@ (800dc0c <rand+0x78>)
 800dbd6:	4358      	muls	r0, r3
 800dbd8:	fb02 0004 	mla	r0, r2, r4, r0
 800dbdc:	fba3 3202 	umull	r3, r2, r3, r2
 800dbe0:	3301      	adds	r3, #1
 800dbe2:	eb40 0002 	adc.w	r0, r0, r2
 800dbe6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800dbea:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800dbee:	bd10      	pop	{r4, pc}
 800dbf0:	20000034 	.word	0x20000034
 800dbf4:	0800f0f8 	.word	0x0800f0f8
 800dbf8:	0800f10f 	.word	0x0800f10f
 800dbfc:	abcd330e 	.word	0xabcd330e
 800dc00:	e66d1234 	.word	0xe66d1234
 800dc04:	0005deec 	.word	0x0005deec
 800dc08:	5851f42d 	.word	0x5851f42d
 800dc0c:	4c957f2d 	.word	0x4c957f2d

0800dc10 <__sflush_r>:
 800dc10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dc14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc18:	0716      	lsls	r6, r2, #28
 800dc1a:	4605      	mov	r5, r0
 800dc1c:	460c      	mov	r4, r1
 800dc1e:	d454      	bmi.n	800dcca <__sflush_r+0xba>
 800dc20:	684b      	ldr	r3, [r1, #4]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	dc02      	bgt.n	800dc2c <__sflush_r+0x1c>
 800dc26:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	dd48      	ble.n	800dcbe <__sflush_r+0xae>
 800dc2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dc2e:	2e00      	cmp	r6, #0
 800dc30:	d045      	beq.n	800dcbe <__sflush_r+0xae>
 800dc32:	2300      	movs	r3, #0
 800dc34:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dc38:	682f      	ldr	r7, [r5, #0]
 800dc3a:	6a21      	ldr	r1, [r4, #32]
 800dc3c:	602b      	str	r3, [r5, #0]
 800dc3e:	d030      	beq.n	800dca2 <__sflush_r+0x92>
 800dc40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dc42:	89a3      	ldrh	r3, [r4, #12]
 800dc44:	0759      	lsls	r1, r3, #29
 800dc46:	d505      	bpl.n	800dc54 <__sflush_r+0x44>
 800dc48:	6863      	ldr	r3, [r4, #4]
 800dc4a:	1ad2      	subs	r2, r2, r3
 800dc4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dc4e:	b10b      	cbz	r3, 800dc54 <__sflush_r+0x44>
 800dc50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dc52:	1ad2      	subs	r2, r2, r3
 800dc54:	2300      	movs	r3, #0
 800dc56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dc58:	6a21      	ldr	r1, [r4, #32]
 800dc5a:	4628      	mov	r0, r5
 800dc5c:	47b0      	blx	r6
 800dc5e:	1c43      	adds	r3, r0, #1
 800dc60:	89a3      	ldrh	r3, [r4, #12]
 800dc62:	d106      	bne.n	800dc72 <__sflush_r+0x62>
 800dc64:	6829      	ldr	r1, [r5, #0]
 800dc66:	291d      	cmp	r1, #29
 800dc68:	d82b      	bhi.n	800dcc2 <__sflush_r+0xb2>
 800dc6a:	4a2a      	ldr	r2, [pc, #168]	@ (800dd14 <__sflush_r+0x104>)
 800dc6c:	410a      	asrs	r2, r1
 800dc6e:	07d6      	lsls	r6, r2, #31
 800dc70:	d427      	bmi.n	800dcc2 <__sflush_r+0xb2>
 800dc72:	2200      	movs	r2, #0
 800dc74:	6062      	str	r2, [r4, #4]
 800dc76:	04d9      	lsls	r1, r3, #19
 800dc78:	6922      	ldr	r2, [r4, #16]
 800dc7a:	6022      	str	r2, [r4, #0]
 800dc7c:	d504      	bpl.n	800dc88 <__sflush_r+0x78>
 800dc7e:	1c42      	adds	r2, r0, #1
 800dc80:	d101      	bne.n	800dc86 <__sflush_r+0x76>
 800dc82:	682b      	ldr	r3, [r5, #0]
 800dc84:	b903      	cbnz	r3, 800dc88 <__sflush_r+0x78>
 800dc86:	6560      	str	r0, [r4, #84]	@ 0x54
 800dc88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dc8a:	602f      	str	r7, [r5, #0]
 800dc8c:	b1b9      	cbz	r1, 800dcbe <__sflush_r+0xae>
 800dc8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dc92:	4299      	cmp	r1, r3
 800dc94:	d002      	beq.n	800dc9c <__sflush_r+0x8c>
 800dc96:	4628      	mov	r0, r5
 800dc98:	f000 fb5c 	bl	800e354 <_free_r>
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	6363      	str	r3, [r4, #52]	@ 0x34
 800dca0:	e00d      	b.n	800dcbe <__sflush_r+0xae>
 800dca2:	2301      	movs	r3, #1
 800dca4:	4628      	mov	r0, r5
 800dca6:	47b0      	blx	r6
 800dca8:	4602      	mov	r2, r0
 800dcaa:	1c50      	adds	r0, r2, #1
 800dcac:	d1c9      	bne.n	800dc42 <__sflush_r+0x32>
 800dcae:	682b      	ldr	r3, [r5, #0]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d0c6      	beq.n	800dc42 <__sflush_r+0x32>
 800dcb4:	2b1d      	cmp	r3, #29
 800dcb6:	d001      	beq.n	800dcbc <__sflush_r+0xac>
 800dcb8:	2b16      	cmp	r3, #22
 800dcba:	d11e      	bne.n	800dcfa <__sflush_r+0xea>
 800dcbc:	602f      	str	r7, [r5, #0]
 800dcbe:	2000      	movs	r0, #0
 800dcc0:	e022      	b.n	800dd08 <__sflush_r+0xf8>
 800dcc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dcc6:	b21b      	sxth	r3, r3
 800dcc8:	e01b      	b.n	800dd02 <__sflush_r+0xf2>
 800dcca:	690f      	ldr	r7, [r1, #16]
 800dccc:	2f00      	cmp	r7, #0
 800dcce:	d0f6      	beq.n	800dcbe <__sflush_r+0xae>
 800dcd0:	0793      	lsls	r3, r2, #30
 800dcd2:	680e      	ldr	r6, [r1, #0]
 800dcd4:	bf08      	it	eq
 800dcd6:	694b      	ldreq	r3, [r1, #20]
 800dcd8:	600f      	str	r7, [r1, #0]
 800dcda:	bf18      	it	ne
 800dcdc:	2300      	movne	r3, #0
 800dcde:	eba6 0807 	sub.w	r8, r6, r7
 800dce2:	608b      	str	r3, [r1, #8]
 800dce4:	f1b8 0f00 	cmp.w	r8, #0
 800dce8:	dde9      	ble.n	800dcbe <__sflush_r+0xae>
 800dcea:	6a21      	ldr	r1, [r4, #32]
 800dcec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dcee:	4643      	mov	r3, r8
 800dcf0:	463a      	mov	r2, r7
 800dcf2:	4628      	mov	r0, r5
 800dcf4:	47b0      	blx	r6
 800dcf6:	2800      	cmp	r0, #0
 800dcf8:	dc08      	bgt.n	800dd0c <__sflush_r+0xfc>
 800dcfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd02:	81a3      	strh	r3, [r4, #12]
 800dd04:	f04f 30ff 	mov.w	r0, #4294967295
 800dd08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd0c:	4407      	add	r7, r0
 800dd0e:	eba8 0800 	sub.w	r8, r8, r0
 800dd12:	e7e7      	b.n	800dce4 <__sflush_r+0xd4>
 800dd14:	dfbffffe 	.word	0xdfbffffe

0800dd18 <_fflush_r>:
 800dd18:	b538      	push	{r3, r4, r5, lr}
 800dd1a:	690b      	ldr	r3, [r1, #16]
 800dd1c:	4605      	mov	r5, r0
 800dd1e:	460c      	mov	r4, r1
 800dd20:	b913      	cbnz	r3, 800dd28 <_fflush_r+0x10>
 800dd22:	2500      	movs	r5, #0
 800dd24:	4628      	mov	r0, r5
 800dd26:	bd38      	pop	{r3, r4, r5, pc}
 800dd28:	b118      	cbz	r0, 800dd32 <_fflush_r+0x1a>
 800dd2a:	6a03      	ldr	r3, [r0, #32]
 800dd2c:	b90b      	cbnz	r3, 800dd32 <_fflush_r+0x1a>
 800dd2e:	f000 f8a7 	bl	800de80 <__sinit>
 800dd32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d0f3      	beq.n	800dd22 <_fflush_r+0xa>
 800dd3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dd3c:	07d0      	lsls	r0, r2, #31
 800dd3e:	d404      	bmi.n	800dd4a <_fflush_r+0x32>
 800dd40:	0599      	lsls	r1, r3, #22
 800dd42:	d402      	bmi.n	800dd4a <_fflush_r+0x32>
 800dd44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dd46:	f000 fad6 	bl	800e2f6 <__retarget_lock_acquire_recursive>
 800dd4a:	4628      	mov	r0, r5
 800dd4c:	4621      	mov	r1, r4
 800dd4e:	f7ff ff5f 	bl	800dc10 <__sflush_r>
 800dd52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dd54:	07da      	lsls	r2, r3, #31
 800dd56:	4605      	mov	r5, r0
 800dd58:	d4e4      	bmi.n	800dd24 <_fflush_r+0xc>
 800dd5a:	89a3      	ldrh	r3, [r4, #12]
 800dd5c:	059b      	lsls	r3, r3, #22
 800dd5e:	d4e1      	bmi.n	800dd24 <_fflush_r+0xc>
 800dd60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dd62:	f000 fac9 	bl	800e2f8 <__retarget_lock_release_recursive>
 800dd66:	e7dd      	b.n	800dd24 <_fflush_r+0xc>

0800dd68 <std>:
 800dd68:	2300      	movs	r3, #0
 800dd6a:	b510      	push	{r4, lr}
 800dd6c:	4604      	mov	r4, r0
 800dd6e:	e9c0 3300 	strd	r3, r3, [r0]
 800dd72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dd76:	6083      	str	r3, [r0, #8]
 800dd78:	8181      	strh	r1, [r0, #12]
 800dd7a:	6643      	str	r3, [r0, #100]	@ 0x64
 800dd7c:	81c2      	strh	r2, [r0, #14]
 800dd7e:	6183      	str	r3, [r0, #24]
 800dd80:	4619      	mov	r1, r3
 800dd82:	2208      	movs	r2, #8
 800dd84:	305c      	adds	r0, #92	@ 0x5c
 800dd86:	f000 f9d7 	bl	800e138 <memset>
 800dd8a:	4b0d      	ldr	r3, [pc, #52]	@ (800ddc0 <std+0x58>)
 800dd8c:	6263      	str	r3, [r4, #36]	@ 0x24
 800dd8e:	4b0d      	ldr	r3, [pc, #52]	@ (800ddc4 <std+0x5c>)
 800dd90:	62a3      	str	r3, [r4, #40]	@ 0x28
 800dd92:	4b0d      	ldr	r3, [pc, #52]	@ (800ddc8 <std+0x60>)
 800dd94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dd96:	4b0d      	ldr	r3, [pc, #52]	@ (800ddcc <std+0x64>)
 800dd98:	6323      	str	r3, [r4, #48]	@ 0x30
 800dd9a:	4b0d      	ldr	r3, [pc, #52]	@ (800ddd0 <std+0x68>)
 800dd9c:	6224      	str	r4, [r4, #32]
 800dd9e:	429c      	cmp	r4, r3
 800dda0:	d006      	beq.n	800ddb0 <std+0x48>
 800dda2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800dda6:	4294      	cmp	r4, r2
 800dda8:	d002      	beq.n	800ddb0 <std+0x48>
 800ddaa:	33d0      	adds	r3, #208	@ 0xd0
 800ddac:	429c      	cmp	r4, r3
 800ddae:	d105      	bne.n	800ddbc <std+0x54>
 800ddb0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ddb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ddb8:	f000 ba9c 	b.w	800e2f4 <__retarget_lock_init_recursive>
 800ddbc:	bd10      	pop	{r4, pc}
 800ddbe:	bf00      	nop
 800ddc0:	0800df55 	.word	0x0800df55
 800ddc4:	0800df77 	.word	0x0800df77
 800ddc8:	0800dfaf 	.word	0x0800dfaf
 800ddcc:	0800dfd3 	.word	0x0800dfd3
 800ddd0:	20005250 	.word	0x20005250

0800ddd4 <stdio_exit_handler>:
 800ddd4:	4a02      	ldr	r2, [pc, #8]	@ (800dde0 <stdio_exit_handler+0xc>)
 800ddd6:	4903      	ldr	r1, [pc, #12]	@ (800dde4 <stdio_exit_handler+0x10>)
 800ddd8:	4803      	ldr	r0, [pc, #12]	@ (800dde8 <stdio_exit_handler+0x14>)
 800ddda:	f000 b869 	b.w	800deb0 <_fwalk_sglue>
 800ddde:	bf00      	nop
 800dde0:	20000028 	.word	0x20000028
 800dde4:	0800dd19 	.word	0x0800dd19
 800dde8:	20000038 	.word	0x20000038

0800ddec <cleanup_stdio>:
 800ddec:	6841      	ldr	r1, [r0, #4]
 800ddee:	4b0c      	ldr	r3, [pc, #48]	@ (800de20 <cleanup_stdio+0x34>)
 800ddf0:	4299      	cmp	r1, r3
 800ddf2:	b510      	push	{r4, lr}
 800ddf4:	4604      	mov	r4, r0
 800ddf6:	d001      	beq.n	800ddfc <cleanup_stdio+0x10>
 800ddf8:	f7ff ff8e 	bl	800dd18 <_fflush_r>
 800ddfc:	68a1      	ldr	r1, [r4, #8]
 800ddfe:	4b09      	ldr	r3, [pc, #36]	@ (800de24 <cleanup_stdio+0x38>)
 800de00:	4299      	cmp	r1, r3
 800de02:	d002      	beq.n	800de0a <cleanup_stdio+0x1e>
 800de04:	4620      	mov	r0, r4
 800de06:	f7ff ff87 	bl	800dd18 <_fflush_r>
 800de0a:	68e1      	ldr	r1, [r4, #12]
 800de0c:	4b06      	ldr	r3, [pc, #24]	@ (800de28 <cleanup_stdio+0x3c>)
 800de0e:	4299      	cmp	r1, r3
 800de10:	d004      	beq.n	800de1c <cleanup_stdio+0x30>
 800de12:	4620      	mov	r0, r4
 800de14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de18:	f7ff bf7e 	b.w	800dd18 <_fflush_r>
 800de1c:	bd10      	pop	{r4, pc}
 800de1e:	bf00      	nop
 800de20:	20005250 	.word	0x20005250
 800de24:	200052b8 	.word	0x200052b8
 800de28:	20005320 	.word	0x20005320

0800de2c <global_stdio_init.part.0>:
 800de2c:	b510      	push	{r4, lr}
 800de2e:	4b0b      	ldr	r3, [pc, #44]	@ (800de5c <global_stdio_init.part.0+0x30>)
 800de30:	4c0b      	ldr	r4, [pc, #44]	@ (800de60 <global_stdio_init.part.0+0x34>)
 800de32:	4a0c      	ldr	r2, [pc, #48]	@ (800de64 <global_stdio_init.part.0+0x38>)
 800de34:	601a      	str	r2, [r3, #0]
 800de36:	4620      	mov	r0, r4
 800de38:	2200      	movs	r2, #0
 800de3a:	2104      	movs	r1, #4
 800de3c:	f7ff ff94 	bl	800dd68 <std>
 800de40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800de44:	2201      	movs	r2, #1
 800de46:	2109      	movs	r1, #9
 800de48:	f7ff ff8e 	bl	800dd68 <std>
 800de4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800de50:	2202      	movs	r2, #2
 800de52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de56:	2112      	movs	r1, #18
 800de58:	f7ff bf86 	b.w	800dd68 <std>
 800de5c:	20005388 	.word	0x20005388
 800de60:	20005250 	.word	0x20005250
 800de64:	0800ddd5 	.word	0x0800ddd5

0800de68 <__sfp_lock_acquire>:
 800de68:	4801      	ldr	r0, [pc, #4]	@ (800de70 <__sfp_lock_acquire+0x8>)
 800de6a:	f000 ba44 	b.w	800e2f6 <__retarget_lock_acquire_recursive>
 800de6e:	bf00      	nop
 800de70:	20005391 	.word	0x20005391

0800de74 <__sfp_lock_release>:
 800de74:	4801      	ldr	r0, [pc, #4]	@ (800de7c <__sfp_lock_release+0x8>)
 800de76:	f000 ba3f 	b.w	800e2f8 <__retarget_lock_release_recursive>
 800de7a:	bf00      	nop
 800de7c:	20005391 	.word	0x20005391

0800de80 <__sinit>:
 800de80:	b510      	push	{r4, lr}
 800de82:	4604      	mov	r4, r0
 800de84:	f7ff fff0 	bl	800de68 <__sfp_lock_acquire>
 800de88:	6a23      	ldr	r3, [r4, #32]
 800de8a:	b11b      	cbz	r3, 800de94 <__sinit+0x14>
 800de8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de90:	f7ff bff0 	b.w	800de74 <__sfp_lock_release>
 800de94:	4b04      	ldr	r3, [pc, #16]	@ (800dea8 <__sinit+0x28>)
 800de96:	6223      	str	r3, [r4, #32]
 800de98:	4b04      	ldr	r3, [pc, #16]	@ (800deac <__sinit+0x2c>)
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d1f5      	bne.n	800de8c <__sinit+0xc>
 800dea0:	f7ff ffc4 	bl	800de2c <global_stdio_init.part.0>
 800dea4:	e7f2      	b.n	800de8c <__sinit+0xc>
 800dea6:	bf00      	nop
 800dea8:	0800dded 	.word	0x0800dded
 800deac:	20005388 	.word	0x20005388

0800deb0 <_fwalk_sglue>:
 800deb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800deb4:	4607      	mov	r7, r0
 800deb6:	4688      	mov	r8, r1
 800deb8:	4614      	mov	r4, r2
 800deba:	2600      	movs	r6, #0
 800debc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dec0:	f1b9 0901 	subs.w	r9, r9, #1
 800dec4:	d505      	bpl.n	800ded2 <_fwalk_sglue+0x22>
 800dec6:	6824      	ldr	r4, [r4, #0]
 800dec8:	2c00      	cmp	r4, #0
 800deca:	d1f7      	bne.n	800debc <_fwalk_sglue+0xc>
 800decc:	4630      	mov	r0, r6
 800dece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ded2:	89ab      	ldrh	r3, [r5, #12]
 800ded4:	2b01      	cmp	r3, #1
 800ded6:	d907      	bls.n	800dee8 <_fwalk_sglue+0x38>
 800ded8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dedc:	3301      	adds	r3, #1
 800dede:	d003      	beq.n	800dee8 <_fwalk_sglue+0x38>
 800dee0:	4629      	mov	r1, r5
 800dee2:	4638      	mov	r0, r7
 800dee4:	47c0      	blx	r8
 800dee6:	4306      	orrs	r6, r0
 800dee8:	3568      	adds	r5, #104	@ 0x68
 800deea:	e7e9      	b.n	800dec0 <_fwalk_sglue+0x10>

0800deec <sniprintf>:
 800deec:	b40c      	push	{r2, r3}
 800deee:	b530      	push	{r4, r5, lr}
 800def0:	4b17      	ldr	r3, [pc, #92]	@ (800df50 <sniprintf+0x64>)
 800def2:	1e0c      	subs	r4, r1, #0
 800def4:	681d      	ldr	r5, [r3, #0]
 800def6:	b09d      	sub	sp, #116	@ 0x74
 800def8:	da08      	bge.n	800df0c <sniprintf+0x20>
 800defa:	238b      	movs	r3, #139	@ 0x8b
 800defc:	602b      	str	r3, [r5, #0]
 800defe:	f04f 30ff 	mov.w	r0, #4294967295
 800df02:	b01d      	add	sp, #116	@ 0x74
 800df04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800df08:	b002      	add	sp, #8
 800df0a:	4770      	bx	lr
 800df0c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800df10:	f8ad 3014 	strh.w	r3, [sp, #20]
 800df14:	bf14      	ite	ne
 800df16:	f104 33ff 	addne.w	r3, r4, #4294967295
 800df1a:	4623      	moveq	r3, r4
 800df1c:	9304      	str	r3, [sp, #16]
 800df1e:	9307      	str	r3, [sp, #28]
 800df20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800df24:	9002      	str	r0, [sp, #8]
 800df26:	9006      	str	r0, [sp, #24]
 800df28:	f8ad 3016 	strh.w	r3, [sp, #22]
 800df2c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800df2e:	ab21      	add	r3, sp, #132	@ 0x84
 800df30:	a902      	add	r1, sp, #8
 800df32:	4628      	mov	r0, r5
 800df34:	9301      	str	r3, [sp, #4]
 800df36:	f000 fab3 	bl	800e4a0 <_svfiprintf_r>
 800df3a:	1c43      	adds	r3, r0, #1
 800df3c:	bfbc      	itt	lt
 800df3e:	238b      	movlt	r3, #139	@ 0x8b
 800df40:	602b      	strlt	r3, [r5, #0]
 800df42:	2c00      	cmp	r4, #0
 800df44:	d0dd      	beq.n	800df02 <sniprintf+0x16>
 800df46:	9b02      	ldr	r3, [sp, #8]
 800df48:	2200      	movs	r2, #0
 800df4a:	701a      	strb	r2, [r3, #0]
 800df4c:	e7d9      	b.n	800df02 <sniprintf+0x16>
 800df4e:	bf00      	nop
 800df50:	20000034 	.word	0x20000034

0800df54 <__sread>:
 800df54:	b510      	push	{r4, lr}
 800df56:	460c      	mov	r4, r1
 800df58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df5c:	f000 f96c 	bl	800e238 <_read_r>
 800df60:	2800      	cmp	r0, #0
 800df62:	bfab      	itete	ge
 800df64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800df66:	89a3      	ldrhlt	r3, [r4, #12]
 800df68:	181b      	addge	r3, r3, r0
 800df6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800df6e:	bfac      	ite	ge
 800df70:	6563      	strge	r3, [r4, #84]	@ 0x54
 800df72:	81a3      	strhlt	r3, [r4, #12]
 800df74:	bd10      	pop	{r4, pc}

0800df76 <__swrite>:
 800df76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df7a:	461f      	mov	r7, r3
 800df7c:	898b      	ldrh	r3, [r1, #12]
 800df7e:	05db      	lsls	r3, r3, #23
 800df80:	4605      	mov	r5, r0
 800df82:	460c      	mov	r4, r1
 800df84:	4616      	mov	r6, r2
 800df86:	d505      	bpl.n	800df94 <__swrite+0x1e>
 800df88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df8c:	2302      	movs	r3, #2
 800df8e:	2200      	movs	r2, #0
 800df90:	f000 f940 	bl	800e214 <_lseek_r>
 800df94:	89a3      	ldrh	r3, [r4, #12]
 800df96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800df9e:	81a3      	strh	r3, [r4, #12]
 800dfa0:	4632      	mov	r2, r6
 800dfa2:	463b      	mov	r3, r7
 800dfa4:	4628      	mov	r0, r5
 800dfa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dfaa:	f000 b967 	b.w	800e27c <_write_r>

0800dfae <__sseek>:
 800dfae:	b510      	push	{r4, lr}
 800dfb0:	460c      	mov	r4, r1
 800dfb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfb6:	f000 f92d 	bl	800e214 <_lseek_r>
 800dfba:	1c43      	adds	r3, r0, #1
 800dfbc:	89a3      	ldrh	r3, [r4, #12]
 800dfbe:	bf15      	itete	ne
 800dfc0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dfc2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dfc6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dfca:	81a3      	strheq	r3, [r4, #12]
 800dfcc:	bf18      	it	ne
 800dfce:	81a3      	strhne	r3, [r4, #12]
 800dfd0:	bd10      	pop	{r4, pc}

0800dfd2 <__sclose>:
 800dfd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfd6:	f000 b8b7 	b.w	800e148 <_close_r>

0800dfda <__swbuf_r>:
 800dfda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfdc:	460e      	mov	r6, r1
 800dfde:	4614      	mov	r4, r2
 800dfe0:	4605      	mov	r5, r0
 800dfe2:	b118      	cbz	r0, 800dfec <__swbuf_r+0x12>
 800dfe4:	6a03      	ldr	r3, [r0, #32]
 800dfe6:	b90b      	cbnz	r3, 800dfec <__swbuf_r+0x12>
 800dfe8:	f7ff ff4a 	bl	800de80 <__sinit>
 800dfec:	69a3      	ldr	r3, [r4, #24]
 800dfee:	60a3      	str	r3, [r4, #8]
 800dff0:	89a3      	ldrh	r3, [r4, #12]
 800dff2:	071a      	lsls	r2, r3, #28
 800dff4:	d501      	bpl.n	800dffa <__swbuf_r+0x20>
 800dff6:	6923      	ldr	r3, [r4, #16]
 800dff8:	b943      	cbnz	r3, 800e00c <__swbuf_r+0x32>
 800dffa:	4621      	mov	r1, r4
 800dffc:	4628      	mov	r0, r5
 800dffe:	f000 f82b 	bl	800e058 <__swsetup_r>
 800e002:	b118      	cbz	r0, 800e00c <__swbuf_r+0x32>
 800e004:	f04f 37ff 	mov.w	r7, #4294967295
 800e008:	4638      	mov	r0, r7
 800e00a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e00c:	6823      	ldr	r3, [r4, #0]
 800e00e:	6922      	ldr	r2, [r4, #16]
 800e010:	1a98      	subs	r0, r3, r2
 800e012:	6963      	ldr	r3, [r4, #20]
 800e014:	b2f6      	uxtb	r6, r6
 800e016:	4283      	cmp	r3, r0
 800e018:	4637      	mov	r7, r6
 800e01a:	dc05      	bgt.n	800e028 <__swbuf_r+0x4e>
 800e01c:	4621      	mov	r1, r4
 800e01e:	4628      	mov	r0, r5
 800e020:	f7ff fe7a 	bl	800dd18 <_fflush_r>
 800e024:	2800      	cmp	r0, #0
 800e026:	d1ed      	bne.n	800e004 <__swbuf_r+0x2a>
 800e028:	68a3      	ldr	r3, [r4, #8]
 800e02a:	3b01      	subs	r3, #1
 800e02c:	60a3      	str	r3, [r4, #8]
 800e02e:	6823      	ldr	r3, [r4, #0]
 800e030:	1c5a      	adds	r2, r3, #1
 800e032:	6022      	str	r2, [r4, #0]
 800e034:	701e      	strb	r6, [r3, #0]
 800e036:	6962      	ldr	r2, [r4, #20]
 800e038:	1c43      	adds	r3, r0, #1
 800e03a:	429a      	cmp	r2, r3
 800e03c:	d004      	beq.n	800e048 <__swbuf_r+0x6e>
 800e03e:	89a3      	ldrh	r3, [r4, #12]
 800e040:	07db      	lsls	r3, r3, #31
 800e042:	d5e1      	bpl.n	800e008 <__swbuf_r+0x2e>
 800e044:	2e0a      	cmp	r6, #10
 800e046:	d1df      	bne.n	800e008 <__swbuf_r+0x2e>
 800e048:	4621      	mov	r1, r4
 800e04a:	4628      	mov	r0, r5
 800e04c:	f7ff fe64 	bl	800dd18 <_fflush_r>
 800e050:	2800      	cmp	r0, #0
 800e052:	d0d9      	beq.n	800e008 <__swbuf_r+0x2e>
 800e054:	e7d6      	b.n	800e004 <__swbuf_r+0x2a>
	...

0800e058 <__swsetup_r>:
 800e058:	b538      	push	{r3, r4, r5, lr}
 800e05a:	4b29      	ldr	r3, [pc, #164]	@ (800e100 <__swsetup_r+0xa8>)
 800e05c:	4605      	mov	r5, r0
 800e05e:	6818      	ldr	r0, [r3, #0]
 800e060:	460c      	mov	r4, r1
 800e062:	b118      	cbz	r0, 800e06c <__swsetup_r+0x14>
 800e064:	6a03      	ldr	r3, [r0, #32]
 800e066:	b90b      	cbnz	r3, 800e06c <__swsetup_r+0x14>
 800e068:	f7ff ff0a 	bl	800de80 <__sinit>
 800e06c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e070:	0719      	lsls	r1, r3, #28
 800e072:	d422      	bmi.n	800e0ba <__swsetup_r+0x62>
 800e074:	06da      	lsls	r2, r3, #27
 800e076:	d407      	bmi.n	800e088 <__swsetup_r+0x30>
 800e078:	2209      	movs	r2, #9
 800e07a:	602a      	str	r2, [r5, #0]
 800e07c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e080:	81a3      	strh	r3, [r4, #12]
 800e082:	f04f 30ff 	mov.w	r0, #4294967295
 800e086:	e033      	b.n	800e0f0 <__swsetup_r+0x98>
 800e088:	0758      	lsls	r0, r3, #29
 800e08a:	d512      	bpl.n	800e0b2 <__swsetup_r+0x5a>
 800e08c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e08e:	b141      	cbz	r1, 800e0a2 <__swsetup_r+0x4a>
 800e090:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e094:	4299      	cmp	r1, r3
 800e096:	d002      	beq.n	800e09e <__swsetup_r+0x46>
 800e098:	4628      	mov	r0, r5
 800e09a:	f000 f95b 	bl	800e354 <_free_r>
 800e09e:	2300      	movs	r3, #0
 800e0a0:	6363      	str	r3, [r4, #52]	@ 0x34
 800e0a2:	89a3      	ldrh	r3, [r4, #12]
 800e0a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e0a8:	81a3      	strh	r3, [r4, #12]
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	6063      	str	r3, [r4, #4]
 800e0ae:	6923      	ldr	r3, [r4, #16]
 800e0b0:	6023      	str	r3, [r4, #0]
 800e0b2:	89a3      	ldrh	r3, [r4, #12]
 800e0b4:	f043 0308 	orr.w	r3, r3, #8
 800e0b8:	81a3      	strh	r3, [r4, #12]
 800e0ba:	6923      	ldr	r3, [r4, #16]
 800e0bc:	b94b      	cbnz	r3, 800e0d2 <__swsetup_r+0x7a>
 800e0be:	89a3      	ldrh	r3, [r4, #12]
 800e0c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e0c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e0c8:	d003      	beq.n	800e0d2 <__swsetup_r+0x7a>
 800e0ca:	4621      	mov	r1, r4
 800e0cc:	4628      	mov	r0, r5
 800e0ce:	f000 fdeb 	bl	800eca8 <__smakebuf_r>
 800e0d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0d6:	f013 0201 	ands.w	r2, r3, #1
 800e0da:	d00a      	beq.n	800e0f2 <__swsetup_r+0x9a>
 800e0dc:	2200      	movs	r2, #0
 800e0de:	60a2      	str	r2, [r4, #8]
 800e0e0:	6962      	ldr	r2, [r4, #20]
 800e0e2:	4252      	negs	r2, r2
 800e0e4:	61a2      	str	r2, [r4, #24]
 800e0e6:	6922      	ldr	r2, [r4, #16]
 800e0e8:	b942      	cbnz	r2, 800e0fc <__swsetup_r+0xa4>
 800e0ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e0ee:	d1c5      	bne.n	800e07c <__swsetup_r+0x24>
 800e0f0:	bd38      	pop	{r3, r4, r5, pc}
 800e0f2:	0799      	lsls	r1, r3, #30
 800e0f4:	bf58      	it	pl
 800e0f6:	6962      	ldrpl	r2, [r4, #20]
 800e0f8:	60a2      	str	r2, [r4, #8]
 800e0fa:	e7f4      	b.n	800e0e6 <__swsetup_r+0x8e>
 800e0fc:	2000      	movs	r0, #0
 800e0fe:	e7f7      	b.n	800e0f0 <__swsetup_r+0x98>
 800e100:	20000034 	.word	0x20000034

0800e104 <memmove>:
 800e104:	4288      	cmp	r0, r1
 800e106:	b510      	push	{r4, lr}
 800e108:	eb01 0402 	add.w	r4, r1, r2
 800e10c:	d902      	bls.n	800e114 <memmove+0x10>
 800e10e:	4284      	cmp	r4, r0
 800e110:	4623      	mov	r3, r4
 800e112:	d807      	bhi.n	800e124 <memmove+0x20>
 800e114:	1e43      	subs	r3, r0, #1
 800e116:	42a1      	cmp	r1, r4
 800e118:	d008      	beq.n	800e12c <memmove+0x28>
 800e11a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e11e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e122:	e7f8      	b.n	800e116 <memmove+0x12>
 800e124:	4402      	add	r2, r0
 800e126:	4601      	mov	r1, r0
 800e128:	428a      	cmp	r2, r1
 800e12a:	d100      	bne.n	800e12e <memmove+0x2a>
 800e12c:	bd10      	pop	{r4, pc}
 800e12e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e132:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e136:	e7f7      	b.n	800e128 <memmove+0x24>

0800e138 <memset>:
 800e138:	4402      	add	r2, r0
 800e13a:	4603      	mov	r3, r0
 800e13c:	4293      	cmp	r3, r2
 800e13e:	d100      	bne.n	800e142 <memset+0xa>
 800e140:	4770      	bx	lr
 800e142:	f803 1b01 	strb.w	r1, [r3], #1
 800e146:	e7f9      	b.n	800e13c <memset+0x4>

0800e148 <_close_r>:
 800e148:	b538      	push	{r3, r4, r5, lr}
 800e14a:	4d06      	ldr	r5, [pc, #24]	@ (800e164 <_close_r+0x1c>)
 800e14c:	2300      	movs	r3, #0
 800e14e:	4604      	mov	r4, r0
 800e150:	4608      	mov	r0, r1
 800e152:	602b      	str	r3, [r5, #0]
 800e154:	f7f3 f9d8 	bl	8001508 <_close>
 800e158:	1c43      	adds	r3, r0, #1
 800e15a:	d102      	bne.n	800e162 <_close_r+0x1a>
 800e15c:	682b      	ldr	r3, [r5, #0]
 800e15e:	b103      	cbz	r3, 800e162 <_close_r+0x1a>
 800e160:	6023      	str	r3, [r4, #0]
 800e162:	bd38      	pop	{r3, r4, r5, pc}
 800e164:	2000538c 	.word	0x2000538c

0800e168 <_reclaim_reent>:
 800e168:	4b29      	ldr	r3, [pc, #164]	@ (800e210 <_reclaim_reent+0xa8>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	4283      	cmp	r3, r0
 800e16e:	b570      	push	{r4, r5, r6, lr}
 800e170:	4604      	mov	r4, r0
 800e172:	d04b      	beq.n	800e20c <_reclaim_reent+0xa4>
 800e174:	69c3      	ldr	r3, [r0, #28]
 800e176:	b1ab      	cbz	r3, 800e1a4 <_reclaim_reent+0x3c>
 800e178:	68db      	ldr	r3, [r3, #12]
 800e17a:	b16b      	cbz	r3, 800e198 <_reclaim_reent+0x30>
 800e17c:	2500      	movs	r5, #0
 800e17e:	69e3      	ldr	r3, [r4, #28]
 800e180:	68db      	ldr	r3, [r3, #12]
 800e182:	5959      	ldr	r1, [r3, r5]
 800e184:	2900      	cmp	r1, #0
 800e186:	d13b      	bne.n	800e200 <_reclaim_reent+0x98>
 800e188:	3504      	adds	r5, #4
 800e18a:	2d80      	cmp	r5, #128	@ 0x80
 800e18c:	d1f7      	bne.n	800e17e <_reclaim_reent+0x16>
 800e18e:	69e3      	ldr	r3, [r4, #28]
 800e190:	4620      	mov	r0, r4
 800e192:	68d9      	ldr	r1, [r3, #12]
 800e194:	f000 f8de 	bl	800e354 <_free_r>
 800e198:	69e3      	ldr	r3, [r4, #28]
 800e19a:	6819      	ldr	r1, [r3, #0]
 800e19c:	b111      	cbz	r1, 800e1a4 <_reclaim_reent+0x3c>
 800e19e:	4620      	mov	r0, r4
 800e1a0:	f000 f8d8 	bl	800e354 <_free_r>
 800e1a4:	6961      	ldr	r1, [r4, #20]
 800e1a6:	b111      	cbz	r1, 800e1ae <_reclaim_reent+0x46>
 800e1a8:	4620      	mov	r0, r4
 800e1aa:	f000 f8d3 	bl	800e354 <_free_r>
 800e1ae:	69e1      	ldr	r1, [r4, #28]
 800e1b0:	b111      	cbz	r1, 800e1b8 <_reclaim_reent+0x50>
 800e1b2:	4620      	mov	r0, r4
 800e1b4:	f000 f8ce 	bl	800e354 <_free_r>
 800e1b8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e1ba:	b111      	cbz	r1, 800e1c2 <_reclaim_reent+0x5a>
 800e1bc:	4620      	mov	r0, r4
 800e1be:	f000 f8c9 	bl	800e354 <_free_r>
 800e1c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e1c4:	b111      	cbz	r1, 800e1cc <_reclaim_reent+0x64>
 800e1c6:	4620      	mov	r0, r4
 800e1c8:	f000 f8c4 	bl	800e354 <_free_r>
 800e1cc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800e1ce:	b111      	cbz	r1, 800e1d6 <_reclaim_reent+0x6e>
 800e1d0:	4620      	mov	r0, r4
 800e1d2:	f000 f8bf 	bl	800e354 <_free_r>
 800e1d6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800e1d8:	b111      	cbz	r1, 800e1e0 <_reclaim_reent+0x78>
 800e1da:	4620      	mov	r0, r4
 800e1dc:	f000 f8ba 	bl	800e354 <_free_r>
 800e1e0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800e1e2:	b111      	cbz	r1, 800e1ea <_reclaim_reent+0x82>
 800e1e4:	4620      	mov	r0, r4
 800e1e6:	f000 f8b5 	bl	800e354 <_free_r>
 800e1ea:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e1ec:	b111      	cbz	r1, 800e1f4 <_reclaim_reent+0x8c>
 800e1ee:	4620      	mov	r0, r4
 800e1f0:	f000 f8b0 	bl	800e354 <_free_r>
 800e1f4:	6a23      	ldr	r3, [r4, #32]
 800e1f6:	b14b      	cbz	r3, 800e20c <_reclaim_reent+0xa4>
 800e1f8:	4620      	mov	r0, r4
 800e1fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e1fe:	4718      	bx	r3
 800e200:	680e      	ldr	r6, [r1, #0]
 800e202:	4620      	mov	r0, r4
 800e204:	f000 f8a6 	bl	800e354 <_free_r>
 800e208:	4631      	mov	r1, r6
 800e20a:	e7bb      	b.n	800e184 <_reclaim_reent+0x1c>
 800e20c:	bd70      	pop	{r4, r5, r6, pc}
 800e20e:	bf00      	nop
 800e210:	20000034 	.word	0x20000034

0800e214 <_lseek_r>:
 800e214:	b538      	push	{r3, r4, r5, lr}
 800e216:	4d07      	ldr	r5, [pc, #28]	@ (800e234 <_lseek_r+0x20>)
 800e218:	4604      	mov	r4, r0
 800e21a:	4608      	mov	r0, r1
 800e21c:	4611      	mov	r1, r2
 800e21e:	2200      	movs	r2, #0
 800e220:	602a      	str	r2, [r5, #0]
 800e222:	461a      	mov	r2, r3
 800e224:	f7f3 f997 	bl	8001556 <_lseek>
 800e228:	1c43      	adds	r3, r0, #1
 800e22a:	d102      	bne.n	800e232 <_lseek_r+0x1e>
 800e22c:	682b      	ldr	r3, [r5, #0]
 800e22e:	b103      	cbz	r3, 800e232 <_lseek_r+0x1e>
 800e230:	6023      	str	r3, [r4, #0]
 800e232:	bd38      	pop	{r3, r4, r5, pc}
 800e234:	2000538c 	.word	0x2000538c

0800e238 <_read_r>:
 800e238:	b538      	push	{r3, r4, r5, lr}
 800e23a:	4d07      	ldr	r5, [pc, #28]	@ (800e258 <_read_r+0x20>)
 800e23c:	4604      	mov	r4, r0
 800e23e:	4608      	mov	r0, r1
 800e240:	4611      	mov	r1, r2
 800e242:	2200      	movs	r2, #0
 800e244:	602a      	str	r2, [r5, #0]
 800e246:	461a      	mov	r2, r3
 800e248:	f7f3 f925 	bl	8001496 <_read>
 800e24c:	1c43      	adds	r3, r0, #1
 800e24e:	d102      	bne.n	800e256 <_read_r+0x1e>
 800e250:	682b      	ldr	r3, [r5, #0]
 800e252:	b103      	cbz	r3, 800e256 <_read_r+0x1e>
 800e254:	6023      	str	r3, [r4, #0]
 800e256:	bd38      	pop	{r3, r4, r5, pc}
 800e258:	2000538c 	.word	0x2000538c

0800e25c <_sbrk_r>:
 800e25c:	b538      	push	{r3, r4, r5, lr}
 800e25e:	4d06      	ldr	r5, [pc, #24]	@ (800e278 <_sbrk_r+0x1c>)
 800e260:	2300      	movs	r3, #0
 800e262:	4604      	mov	r4, r0
 800e264:	4608      	mov	r0, r1
 800e266:	602b      	str	r3, [r5, #0]
 800e268:	f7f3 f982 	bl	8001570 <_sbrk>
 800e26c:	1c43      	adds	r3, r0, #1
 800e26e:	d102      	bne.n	800e276 <_sbrk_r+0x1a>
 800e270:	682b      	ldr	r3, [r5, #0]
 800e272:	b103      	cbz	r3, 800e276 <_sbrk_r+0x1a>
 800e274:	6023      	str	r3, [r4, #0]
 800e276:	bd38      	pop	{r3, r4, r5, pc}
 800e278:	2000538c 	.word	0x2000538c

0800e27c <_write_r>:
 800e27c:	b538      	push	{r3, r4, r5, lr}
 800e27e:	4d07      	ldr	r5, [pc, #28]	@ (800e29c <_write_r+0x20>)
 800e280:	4604      	mov	r4, r0
 800e282:	4608      	mov	r0, r1
 800e284:	4611      	mov	r1, r2
 800e286:	2200      	movs	r2, #0
 800e288:	602a      	str	r2, [r5, #0]
 800e28a:	461a      	mov	r2, r3
 800e28c:	f7f3 f920 	bl	80014d0 <_write>
 800e290:	1c43      	adds	r3, r0, #1
 800e292:	d102      	bne.n	800e29a <_write_r+0x1e>
 800e294:	682b      	ldr	r3, [r5, #0]
 800e296:	b103      	cbz	r3, 800e29a <_write_r+0x1e>
 800e298:	6023      	str	r3, [r4, #0]
 800e29a:	bd38      	pop	{r3, r4, r5, pc}
 800e29c:	2000538c 	.word	0x2000538c

0800e2a0 <__errno>:
 800e2a0:	4b01      	ldr	r3, [pc, #4]	@ (800e2a8 <__errno+0x8>)
 800e2a2:	6818      	ldr	r0, [r3, #0]
 800e2a4:	4770      	bx	lr
 800e2a6:	bf00      	nop
 800e2a8:	20000034 	.word	0x20000034

0800e2ac <__libc_init_array>:
 800e2ac:	b570      	push	{r4, r5, r6, lr}
 800e2ae:	4d0d      	ldr	r5, [pc, #52]	@ (800e2e4 <__libc_init_array+0x38>)
 800e2b0:	4c0d      	ldr	r4, [pc, #52]	@ (800e2e8 <__libc_init_array+0x3c>)
 800e2b2:	1b64      	subs	r4, r4, r5
 800e2b4:	10a4      	asrs	r4, r4, #2
 800e2b6:	2600      	movs	r6, #0
 800e2b8:	42a6      	cmp	r6, r4
 800e2ba:	d109      	bne.n	800e2d0 <__libc_init_array+0x24>
 800e2bc:	4d0b      	ldr	r5, [pc, #44]	@ (800e2ec <__libc_init_array+0x40>)
 800e2be:	4c0c      	ldr	r4, [pc, #48]	@ (800e2f0 <__libc_init_array+0x44>)
 800e2c0:	f000 fdd2 	bl	800ee68 <_init>
 800e2c4:	1b64      	subs	r4, r4, r5
 800e2c6:	10a4      	asrs	r4, r4, #2
 800e2c8:	2600      	movs	r6, #0
 800e2ca:	42a6      	cmp	r6, r4
 800e2cc:	d105      	bne.n	800e2da <__libc_init_array+0x2e>
 800e2ce:	bd70      	pop	{r4, r5, r6, pc}
 800e2d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2d4:	4798      	blx	r3
 800e2d6:	3601      	adds	r6, #1
 800e2d8:	e7ee      	b.n	800e2b8 <__libc_init_array+0xc>
 800e2da:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2de:	4798      	blx	r3
 800e2e0:	3601      	adds	r6, #1
 800e2e2:	e7f2      	b.n	800e2ca <__libc_init_array+0x1e>
 800e2e4:	0800f1e0 	.word	0x0800f1e0
 800e2e8:	0800f1e0 	.word	0x0800f1e0
 800e2ec:	0800f1e0 	.word	0x0800f1e0
 800e2f0:	0800f1e4 	.word	0x0800f1e4

0800e2f4 <__retarget_lock_init_recursive>:
 800e2f4:	4770      	bx	lr

0800e2f6 <__retarget_lock_acquire_recursive>:
 800e2f6:	4770      	bx	lr

0800e2f8 <__retarget_lock_release_recursive>:
 800e2f8:	4770      	bx	lr

0800e2fa <memcpy>:
 800e2fa:	440a      	add	r2, r1
 800e2fc:	4291      	cmp	r1, r2
 800e2fe:	f100 33ff 	add.w	r3, r0, #4294967295
 800e302:	d100      	bne.n	800e306 <memcpy+0xc>
 800e304:	4770      	bx	lr
 800e306:	b510      	push	{r4, lr}
 800e308:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e30c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e310:	4291      	cmp	r1, r2
 800e312:	d1f9      	bne.n	800e308 <memcpy+0xe>
 800e314:	bd10      	pop	{r4, pc}
	...

0800e318 <__assert_func>:
 800e318:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e31a:	4614      	mov	r4, r2
 800e31c:	461a      	mov	r2, r3
 800e31e:	4b09      	ldr	r3, [pc, #36]	@ (800e344 <__assert_func+0x2c>)
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	4605      	mov	r5, r0
 800e324:	68d8      	ldr	r0, [r3, #12]
 800e326:	b954      	cbnz	r4, 800e33e <__assert_func+0x26>
 800e328:	4b07      	ldr	r3, [pc, #28]	@ (800e348 <__assert_func+0x30>)
 800e32a:	461c      	mov	r4, r3
 800e32c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e330:	9100      	str	r1, [sp, #0]
 800e332:	462b      	mov	r3, r5
 800e334:	4905      	ldr	r1, [pc, #20]	@ (800e34c <__assert_func+0x34>)
 800e336:	f000 fc7f 	bl	800ec38 <fiprintf>
 800e33a:	f000 fd13 	bl	800ed64 <abort>
 800e33e:	4b04      	ldr	r3, [pc, #16]	@ (800e350 <__assert_func+0x38>)
 800e340:	e7f4      	b.n	800e32c <__assert_func+0x14>
 800e342:	bf00      	nop
 800e344:	20000034 	.word	0x20000034
 800e348:	0800f1a2 	.word	0x0800f1a2
 800e34c:	0800f174 	.word	0x0800f174
 800e350:	0800f167 	.word	0x0800f167

0800e354 <_free_r>:
 800e354:	b538      	push	{r3, r4, r5, lr}
 800e356:	4605      	mov	r5, r0
 800e358:	2900      	cmp	r1, #0
 800e35a:	d041      	beq.n	800e3e0 <_free_r+0x8c>
 800e35c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e360:	1f0c      	subs	r4, r1, #4
 800e362:	2b00      	cmp	r3, #0
 800e364:	bfb8      	it	lt
 800e366:	18e4      	addlt	r4, r4, r3
 800e368:	f7ff fc08 	bl	800db7c <__malloc_lock>
 800e36c:	4a1d      	ldr	r2, [pc, #116]	@ (800e3e4 <_free_r+0x90>)
 800e36e:	6813      	ldr	r3, [r2, #0]
 800e370:	b933      	cbnz	r3, 800e380 <_free_r+0x2c>
 800e372:	6063      	str	r3, [r4, #4]
 800e374:	6014      	str	r4, [r2, #0]
 800e376:	4628      	mov	r0, r5
 800e378:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e37c:	f7ff bc04 	b.w	800db88 <__malloc_unlock>
 800e380:	42a3      	cmp	r3, r4
 800e382:	d908      	bls.n	800e396 <_free_r+0x42>
 800e384:	6820      	ldr	r0, [r4, #0]
 800e386:	1821      	adds	r1, r4, r0
 800e388:	428b      	cmp	r3, r1
 800e38a:	bf01      	itttt	eq
 800e38c:	6819      	ldreq	r1, [r3, #0]
 800e38e:	685b      	ldreq	r3, [r3, #4]
 800e390:	1809      	addeq	r1, r1, r0
 800e392:	6021      	streq	r1, [r4, #0]
 800e394:	e7ed      	b.n	800e372 <_free_r+0x1e>
 800e396:	461a      	mov	r2, r3
 800e398:	685b      	ldr	r3, [r3, #4]
 800e39a:	b10b      	cbz	r3, 800e3a0 <_free_r+0x4c>
 800e39c:	42a3      	cmp	r3, r4
 800e39e:	d9fa      	bls.n	800e396 <_free_r+0x42>
 800e3a0:	6811      	ldr	r1, [r2, #0]
 800e3a2:	1850      	adds	r0, r2, r1
 800e3a4:	42a0      	cmp	r0, r4
 800e3a6:	d10b      	bne.n	800e3c0 <_free_r+0x6c>
 800e3a8:	6820      	ldr	r0, [r4, #0]
 800e3aa:	4401      	add	r1, r0
 800e3ac:	1850      	adds	r0, r2, r1
 800e3ae:	4283      	cmp	r3, r0
 800e3b0:	6011      	str	r1, [r2, #0]
 800e3b2:	d1e0      	bne.n	800e376 <_free_r+0x22>
 800e3b4:	6818      	ldr	r0, [r3, #0]
 800e3b6:	685b      	ldr	r3, [r3, #4]
 800e3b8:	6053      	str	r3, [r2, #4]
 800e3ba:	4408      	add	r0, r1
 800e3bc:	6010      	str	r0, [r2, #0]
 800e3be:	e7da      	b.n	800e376 <_free_r+0x22>
 800e3c0:	d902      	bls.n	800e3c8 <_free_r+0x74>
 800e3c2:	230c      	movs	r3, #12
 800e3c4:	602b      	str	r3, [r5, #0]
 800e3c6:	e7d6      	b.n	800e376 <_free_r+0x22>
 800e3c8:	6820      	ldr	r0, [r4, #0]
 800e3ca:	1821      	adds	r1, r4, r0
 800e3cc:	428b      	cmp	r3, r1
 800e3ce:	bf04      	itt	eq
 800e3d0:	6819      	ldreq	r1, [r3, #0]
 800e3d2:	685b      	ldreq	r3, [r3, #4]
 800e3d4:	6063      	str	r3, [r4, #4]
 800e3d6:	bf04      	itt	eq
 800e3d8:	1809      	addeq	r1, r1, r0
 800e3da:	6021      	streq	r1, [r4, #0]
 800e3dc:	6054      	str	r4, [r2, #4]
 800e3de:	e7ca      	b.n	800e376 <_free_r+0x22>
 800e3e0:	bd38      	pop	{r3, r4, r5, pc}
 800e3e2:	bf00      	nop
 800e3e4:	2000524c 	.word	0x2000524c

0800e3e8 <__ssputs_r>:
 800e3e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3ec:	688e      	ldr	r6, [r1, #8]
 800e3ee:	461f      	mov	r7, r3
 800e3f0:	42be      	cmp	r6, r7
 800e3f2:	680b      	ldr	r3, [r1, #0]
 800e3f4:	4682      	mov	sl, r0
 800e3f6:	460c      	mov	r4, r1
 800e3f8:	4690      	mov	r8, r2
 800e3fa:	d82d      	bhi.n	800e458 <__ssputs_r+0x70>
 800e3fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e400:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e404:	d026      	beq.n	800e454 <__ssputs_r+0x6c>
 800e406:	6965      	ldr	r5, [r4, #20]
 800e408:	6909      	ldr	r1, [r1, #16]
 800e40a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e40e:	eba3 0901 	sub.w	r9, r3, r1
 800e412:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e416:	1c7b      	adds	r3, r7, #1
 800e418:	444b      	add	r3, r9
 800e41a:	106d      	asrs	r5, r5, #1
 800e41c:	429d      	cmp	r5, r3
 800e41e:	bf38      	it	cc
 800e420:	461d      	movcc	r5, r3
 800e422:	0553      	lsls	r3, r2, #21
 800e424:	d527      	bpl.n	800e476 <__ssputs_r+0x8e>
 800e426:	4629      	mov	r1, r5
 800e428:	f7ff fb28 	bl	800da7c <_malloc_r>
 800e42c:	4606      	mov	r6, r0
 800e42e:	b360      	cbz	r0, 800e48a <__ssputs_r+0xa2>
 800e430:	6921      	ldr	r1, [r4, #16]
 800e432:	464a      	mov	r2, r9
 800e434:	f7ff ff61 	bl	800e2fa <memcpy>
 800e438:	89a3      	ldrh	r3, [r4, #12]
 800e43a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e43e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e442:	81a3      	strh	r3, [r4, #12]
 800e444:	6126      	str	r6, [r4, #16]
 800e446:	6165      	str	r5, [r4, #20]
 800e448:	444e      	add	r6, r9
 800e44a:	eba5 0509 	sub.w	r5, r5, r9
 800e44e:	6026      	str	r6, [r4, #0]
 800e450:	60a5      	str	r5, [r4, #8]
 800e452:	463e      	mov	r6, r7
 800e454:	42be      	cmp	r6, r7
 800e456:	d900      	bls.n	800e45a <__ssputs_r+0x72>
 800e458:	463e      	mov	r6, r7
 800e45a:	6820      	ldr	r0, [r4, #0]
 800e45c:	4632      	mov	r2, r6
 800e45e:	4641      	mov	r1, r8
 800e460:	f7ff fe50 	bl	800e104 <memmove>
 800e464:	68a3      	ldr	r3, [r4, #8]
 800e466:	1b9b      	subs	r3, r3, r6
 800e468:	60a3      	str	r3, [r4, #8]
 800e46a:	6823      	ldr	r3, [r4, #0]
 800e46c:	4433      	add	r3, r6
 800e46e:	6023      	str	r3, [r4, #0]
 800e470:	2000      	movs	r0, #0
 800e472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e476:	462a      	mov	r2, r5
 800e478:	f000 fc7b 	bl	800ed72 <_realloc_r>
 800e47c:	4606      	mov	r6, r0
 800e47e:	2800      	cmp	r0, #0
 800e480:	d1e0      	bne.n	800e444 <__ssputs_r+0x5c>
 800e482:	6921      	ldr	r1, [r4, #16]
 800e484:	4650      	mov	r0, sl
 800e486:	f7ff ff65 	bl	800e354 <_free_r>
 800e48a:	230c      	movs	r3, #12
 800e48c:	f8ca 3000 	str.w	r3, [sl]
 800e490:	89a3      	ldrh	r3, [r4, #12]
 800e492:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e496:	81a3      	strh	r3, [r4, #12]
 800e498:	f04f 30ff 	mov.w	r0, #4294967295
 800e49c:	e7e9      	b.n	800e472 <__ssputs_r+0x8a>
	...

0800e4a0 <_svfiprintf_r>:
 800e4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4a4:	4698      	mov	r8, r3
 800e4a6:	898b      	ldrh	r3, [r1, #12]
 800e4a8:	061b      	lsls	r3, r3, #24
 800e4aa:	b09d      	sub	sp, #116	@ 0x74
 800e4ac:	4607      	mov	r7, r0
 800e4ae:	460d      	mov	r5, r1
 800e4b0:	4614      	mov	r4, r2
 800e4b2:	d510      	bpl.n	800e4d6 <_svfiprintf_r+0x36>
 800e4b4:	690b      	ldr	r3, [r1, #16]
 800e4b6:	b973      	cbnz	r3, 800e4d6 <_svfiprintf_r+0x36>
 800e4b8:	2140      	movs	r1, #64	@ 0x40
 800e4ba:	f7ff fadf 	bl	800da7c <_malloc_r>
 800e4be:	6028      	str	r0, [r5, #0]
 800e4c0:	6128      	str	r0, [r5, #16]
 800e4c2:	b930      	cbnz	r0, 800e4d2 <_svfiprintf_r+0x32>
 800e4c4:	230c      	movs	r3, #12
 800e4c6:	603b      	str	r3, [r7, #0]
 800e4c8:	f04f 30ff 	mov.w	r0, #4294967295
 800e4cc:	b01d      	add	sp, #116	@ 0x74
 800e4ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4d2:	2340      	movs	r3, #64	@ 0x40
 800e4d4:	616b      	str	r3, [r5, #20]
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4da:	2320      	movs	r3, #32
 800e4dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e4e0:	f8cd 800c 	str.w	r8, [sp, #12]
 800e4e4:	2330      	movs	r3, #48	@ 0x30
 800e4e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e684 <_svfiprintf_r+0x1e4>
 800e4ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e4ee:	f04f 0901 	mov.w	r9, #1
 800e4f2:	4623      	mov	r3, r4
 800e4f4:	469a      	mov	sl, r3
 800e4f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e4fa:	b10a      	cbz	r2, 800e500 <_svfiprintf_r+0x60>
 800e4fc:	2a25      	cmp	r2, #37	@ 0x25
 800e4fe:	d1f9      	bne.n	800e4f4 <_svfiprintf_r+0x54>
 800e500:	ebba 0b04 	subs.w	fp, sl, r4
 800e504:	d00b      	beq.n	800e51e <_svfiprintf_r+0x7e>
 800e506:	465b      	mov	r3, fp
 800e508:	4622      	mov	r2, r4
 800e50a:	4629      	mov	r1, r5
 800e50c:	4638      	mov	r0, r7
 800e50e:	f7ff ff6b 	bl	800e3e8 <__ssputs_r>
 800e512:	3001      	adds	r0, #1
 800e514:	f000 80a7 	beq.w	800e666 <_svfiprintf_r+0x1c6>
 800e518:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e51a:	445a      	add	r2, fp
 800e51c:	9209      	str	r2, [sp, #36]	@ 0x24
 800e51e:	f89a 3000 	ldrb.w	r3, [sl]
 800e522:	2b00      	cmp	r3, #0
 800e524:	f000 809f 	beq.w	800e666 <_svfiprintf_r+0x1c6>
 800e528:	2300      	movs	r3, #0
 800e52a:	f04f 32ff 	mov.w	r2, #4294967295
 800e52e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e532:	f10a 0a01 	add.w	sl, sl, #1
 800e536:	9304      	str	r3, [sp, #16]
 800e538:	9307      	str	r3, [sp, #28]
 800e53a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e53e:	931a      	str	r3, [sp, #104]	@ 0x68
 800e540:	4654      	mov	r4, sl
 800e542:	2205      	movs	r2, #5
 800e544:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e548:	484e      	ldr	r0, [pc, #312]	@ (800e684 <_svfiprintf_r+0x1e4>)
 800e54a:	f7f1 fe41 	bl	80001d0 <memchr>
 800e54e:	9a04      	ldr	r2, [sp, #16]
 800e550:	b9d8      	cbnz	r0, 800e58a <_svfiprintf_r+0xea>
 800e552:	06d0      	lsls	r0, r2, #27
 800e554:	bf44      	itt	mi
 800e556:	2320      	movmi	r3, #32
 800e558:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e55c:	0711      	lsls	r1, r2, #28
 800e55e:	bf44      	itt	mi
 800e560:	232b      	movmi	r3, #43	@ 0x2b
 800e562:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e566:	f89a 3000 	ldrb.w	r3, [sl]
 800e56a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e56c:	d015      	beq.n	800e59a <_svfiprintf_r+0xfa>
 800e56e:	9a07      	ldr	r2, [sp, #28]
 800e570:	4654      	mov	r4, sl
 800e572:	2000      	movs	r0, #0
 800e574:	f04f 0c0a 	mov.w	ip, #10
 800e578:	4621      	mov	r1, r4
 800e57a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e57e:	3b30      	subs	r3, #48	@ 0x30
 800e580:	2b09      	cmp	r3, #9
 800e582:	d94b      	bls.n	800e61c <_svfiprintf_r+0x17c>
 800e584:	b1b0      	cbz	r0, 800e5b4 <_svfiprintf_r+0x114>
 800e586:	9207      	str	r2, [sp, #28]
 800e588:	e014      	b.n	800e5b4 <_svfiprintf_r+0x114>
 800e58a:	eba0 0308 	sub.w	r3, r0, r8
 800e58e:	fa09 f303 	lsl.w	r3, r9, r3
 800e592:	4313      	orrs	r3, r2
 800e594:	9304      	str	r3, [sp, #16]
 800e596:	46a2      	mov	sl, r4
 800e598:	e7d2      	b.n	800e540 <_svfiprintf_r+0xa0>
 800e59a:	9b03      	ldr	r3, [sp, #12]
 800e59c:	1d19      	adds	r1, r3, #4
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	9103      	str	r1, [sp, #12]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	bfbb      	ittet	lt
 800e5a6:	425b      	neglt	r3, r3
 800e5a8:	f042 0202 	orrlt.w	r2, r2, #2
 800e5ac:	9307      	strge	r3, [sp, #28]
 800e5ae:	9307      	strlt	r3, [sp, #28]
 800e5b0:	bfb8      	it	lt
 800e5b2:	9204      	strlt	r2, [sp, #16]
 800e5b4:	7823      	ldrb	r3, [r4, #0]
 800e5b6:	2b2e      	cmp	r3, #46	@ 0x2e
 800e5b8:	d10a      	bne.n	800e5d0 <_svfiprintf_r+0x130>
 800e5ba:	7863      	ldrb	r3, [r4, #1]
 800e5bc:	2b2a      	cmp	r3, #42	@ 0x2a
 800e5be:	d132      	bne.n	800e626 <_svfiprintf_r+0x186>
 800e5c0:	9b03      	ldr	r3, [sp, #12]
 800e5c2:	1d1a      	adds	r2, r3, #4
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	9203      	str	r2, [sp, #12]
 800e5c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e5cc:	3402      	adds	r4, #2
 800e5ce:	9305      	str	r3, [sp, #20]
 800e5d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e694 <_svfiprintf_r+0x1f4>
 800e5d4:	7821      	ldrb	r1, [r4, #0]
 800e5d6:	2203      	movs	r2, #3
 800e5d8:	4650      	mov	r0, sl
 800e5da:	f7f1 fdf9 	bl	80001d0 <memchr>
 800e5de:	b138      	cbz	r0, 800e5f0 <_svfiprintf_r+0x150>
 800e5e0:	9b04      	ldr	r3, [sp, #16]
 800e5e2:	eba0 000a 	sub.w	r0, r0, sl
 800e5e6:	2240      	movs	r2, #64	@ 0x40
 800e5e8:	4082      	lsls	r2, r0
 800e5ea:	4313      	orrs	r3, r2
 800e5ec:	3401      	adds	r4, #1
 800e5ee:	9304      	str	r3, [sp, #16]
 800e5f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5f4:	4824      	ldr	r0, [pc, #144]	@ (800e688 <_svfiprintf_r+0x1e8>)
 800e5f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e5fa:	2206      	movs	r2, #6
 800e5fc:	f7f1 fde8 	bl	80001d0 <memchr>
 800e600:	2800      	cmp	r0, #0
 800e602:	d036      	beq.n	800e672 <_svfiprintf_r+0x1d2>
 800e604:	4b21      	ldr	r3, [pc, #132]	@ (800e68c <_svfiprintf_r+0x1ec>)
 800e606:	bb1b      	cbnz	r3, 800e650 <_svfiprintf_r+0x1b0>
 800e608:	9b03      	ldr	r3, [sp, #12]
 800e60a:	3307      	adds	r3, #7
 800e60c:	f023 0307 	bic.w	r3, r3, #7
 800e610:	3308      	adds	r3, #8
 800e612:	9303      	str	r3, [sp, #12]
 800e614:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e616:	4433      	add	r3, r6
 800e618:	9309      	str	r3, [sp, #36]	@ 0x24
 800e61a:	e76a      	b.n	800e4f2 <_svfiprintf_r+0x52>
 800e61c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e620:	460c      	mov	r4, r1
 800e622:	2001      	movs	r0, #1
 800e624:	e7a8      	b.n	800e578 <_svfiprintf_r+0xd8>
 800e626:	2300      	movs	r3, #0
 800e628:	3401      	adds	r4, #1
 800e62a:	9305      	str	r3, [sp, #20]
 800e62c:	4619      	mov	r1, r3
 800e62e:	f04f 0c0a 	mov.w	ip, #10
 800e632:	4620      	mov	r0, r4
 800e634:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e638:	3a30      	subs	r2, #48	@ 0x30
 800e63a:	2a09      	cmp	r2, #9
 800e63c:	d903      	bls.n	800e646 <_svfiprintf_r+0x1a6>
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d0c6      	beq.n	800e5d0 <_svfiprintf_r+0x130>
 800e642:	9105      	str	r1, [sp, #20]
 800e644:	e7c4      	b.n	800e5d0 <_svfiprintf_r+0x130>
 800e646:	fb0c 2101 	mla	r1, ip, r1, r2
 800e64a:	4604      	mov	r4, r0
 800e64c:	2301      	movs	r3, #1
 800e64e:	e7f0      	b.n	800e632 <_svfiprintf_r+0x192>
 800e650:	ab03      	add	r3, sp, #12
 800e652:	9300      	str	r3, [sp, #0]
 800e654:	462a      	mov	r2, r5
 800e656:	4b0e      	ldr	r3, [pc, #56]	@ (800e690 <_svfiprintf_r+0x1f0>)
 800e658:	a904      	add	r1, sp, #16
 800e65a:	4638      	mov	r0, r7
 800e65c:	f3af 8000 	nop.w
 800e660:	1c42      	adds	r2, r0, #1
 800e662:	4606      	mov	r6, r0
 800e664:	d1d6      	bne.n	800e614 <_svfiprintf_r+0x174>
 800e666:	89ab      	ldrh	r3, [r5, #12]
 800e668:	065b      	lsls	r3, r3, #25
 800e66a:	f53f af2d 	bmi.w	800e4c8 <_svfiprintf_r+0x28>
 800e66e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e670:	e72c      	b.n	800e4cc <_svfiprintf_r+0x2c>
 800e672:	ab03      	add	r3, sp, #12
 800e674:	9300      	str	r3, [sp, #0]
 800e676:	462a      	mov	r2, r5
 800e678:	4b05      	ldr	r3, [pc, #20]	@ (800e690 <_svfiprintf_r+0x1f0>)
 800e67a:	a904      	add	r1, sp, #16
 800e67c:	4638      	mov	r0, r7
 800e67e:	f000 f9bb 	bl	800e9f8 <_printf_i>
 800e682:	e7ed      	b.n	800e660 <_svfiprintf_r+0x1c0>
 800e684:	0800f1a3 	.word	0x0800f1a3
 800e688:	0800f1ad 	.word	0x0800f1ad
 800e68c:	00000000 	.word	0x00000000
 800e690:	0800e3e9 	.word	0x0800e3e9
 800e694:	0800f1a9 	.word	0x0800f1a9

0800e698 <__sfputc_r>:
 800e698:	6893      	ldr	r3, [r2, #8]
 800e69a:	3b01      	subs	r3, #1
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	b410      	push	{r4}
 800e6a0:	6093      	str	r3, [r2, #8]
 800e6a2:	da08      	bge.n	800e6b6 <__sfputc_r+0x1e>
 800e6a4:	6994      	ldr	r4, [r2, #24]
 800e6a6:	42a3      	cmp	r3, r4
 800e6a8:	db01      	blt.n	800e6ae <__sfputc_r+0x16>
 800e6aa:	290a      	cmp	r1, #10
 800e6ac:	d103      	bne.n	800e6b6 <__sfputc_r+0x1e>
 800e6ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6b2:	f7ff bc92 	b.w	800dfda <__swbuf_r>
 800e6b6:	6813      	ldr	r3, [r2, #0]
 800e6b8:	1c58      	adds	r0, r3, #1
 800e6ba:	6010      	str	r0, [r2, #0]
 800e6bc:	7019      	strb	r1, [r3, #0]
 800e6be:	4608      	mov	r0, r1
 800e6c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6c4:	4770      	bx	lr

0800e6c6 <__sfputs_r>:
 800e6c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6c8:	4606      	mov	r6, r0
 800e6ca:	460f      	mov	r7, r1
 800e6cc:	4614      	mov	r4, r2
 800e6ce:	18d5      	adds	r5, r2, r3
 800e6d0:	42ac      	cmp	r4, r5
 800e6d2:	d101      	bne.n	800e6d8 <__sfputs_r+0x12>
 800e6d4:	2000      	movs	r0, #0
 800e6d6:	e007      	b.n	800e6e8 <__sfputs_r+0x22>
 800e6d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6dc:	463a      	mov	r2, r7
 800e6de:	4630      	mov	r0, r6
 800e6e0:	f7ff ffda 	bl	800e698 <__sfputc_r>
 800e6e4:	1c43      	adds	r3, r0, #1
 800e6e6:	d1f3      	bne.n	800e6d0 <__sfputs_r+0xa>
 800e6e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e6ec <_vfiprintf_r>:
 800e6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6f0:	460d      	mov	r5, r1
 800e6f2:	b09d      	sub	sp, #116	@ 0x74
 800e6f4:	4614      	mov	r4, r2
 800e6f6:	4698      	mov	r8, r3
 800e6f8:	4606      	mov	r6, r0
 800e6fa:	b118      	cbz	r0, 800e704 <_vfiprintf_r+0x18>
 800e6fc:	6a03      	ldr	r3, [r0, #32]
 800e6fe:	b90b      	cbnz	r3, 800e704 <_vfiprintf_r+0x18>
 800e700:	f7ff fbbe 	bl	800de80 <__sinit>
 800e704:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e706:	07d9      	lsls	r1, r3, #31
 800e708:	d405      	bmi.n	800e716 <_vfiprintf_r+0x2a>
 800e70a:	89ab      	ldrh	r3, [r5, #12]
 800e70c:	059a      	lsls	r2, r3, #22
 800e70e:	d402      	bmi.n	800e716 <_vfiprintf_r+0x2a>
 800e710:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e712:	f7ff fdf0 	bl	800e2f6 <__retarget_lock_acquire_recursive>
 800e716:	89ab      	ldrh	r3, [r5, #12]
 800e718:	071b      	lsls	r3, r3, #28
 800e71a:	d501      	bpl.n	800e720 <_vfiprintf_r+0x34>
 800e71c:	692b      	ldr	r3, [r5, #16]
 800e71e:	b99b      	cbnz	r3, 800e748 <_vfiprintf_r+0x5c>
 800e720:	4629      	mov	r1, r5
 800e722:	4630      	mov	r0, r6
 800e724:	f7ff fc98 	bl	800e058 <__swsetup_r>
 800e728:	b170      	cbz	r0, 800e748 <_vfiprintf_r+0x5c>
 800e72a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e72c:	07dc      	lsls	r4, r3, #31
 800e72e:	d504      	bpl.n	800e73a <_vfiprintf_r+0x4e>
 800e730:	f04f 30ff 	mov.w	r0, #4294967295
 800e734:	b01d      	add	sp, #116	@ 0x74
 800e736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e73a:	89ab      	ldrh	r3, [r5, #12]
 800e73c:	0598      	lsls	r0, r3, #22
 800e73e:	d4f7      	bmi.n	800e730 <_vfiprintf_r+0x44>
 800e740:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e742:	f7ff fdd9 	bl	800e2f8 <__retarget_lock_release_recursive>
 800e746:	e7f3      	b.n	800e730 <_vfiprintf_r+0x44>
 800e748:	2300      	movs	r3, #0
 800e74a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e74c:	2320      	movs	r3, #32
 800e74e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e752:	f8cd 800c 	str.w	r8, [sp, #12]
 800e756:	2330      	movs	r3, #48	@ 0x30
 800e758:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e908 <_vfiprintf_r+0x21c>
 800e75c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e760:	f04f 0901 	mov.w	r9, #1
 800e764:	4623      	mov	r3, r4
 800e766:	469a      	mov	sl, r3
 800e768:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e76c:	b10a      	cbz	r2, 800e772 <_vfiprintf_r+0x86>
 800e76e:	2a25      	cmp	r2, #37	@ 0x25
 800e770:	d1f9      	bne.n	800e766 <_vfiprintf_r+0x7a>
 800e772:	ebba 0b04 	subs.w	fp, sl, r4
 800e776:	d00b      	beq.n	800e790 <_vfiprintf_r+0xa4>
 800e778:	465b      	mov	r3, fp
 800e77a:	4622      	mov	r2, r4
 800e77c:	4629      	mov	r1, r5
 800e77e:	4630      	mov	r0, r6
 800e780:	f7ff ffa1 	bl	800e6c6 <__sfputs_r>
 800e784:	3001      	adds	r0, #1
 800e786:	f000 80a7 	beq.w	800e8d8 <_vfiprintf_r+0x1ec>
 800e78a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e78c:	445a      	add	r2, fp
 800e78e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e790:	f89a 3000 	ldrb.w	r3, [sl]
 800e794:	2b00      	cmp	r3, #0
 800e796:	f000 809f 	beq.w	800e8d8 <_vfiprintf_r+0x1ec>
 800e79a:	2300      	movs	r3, #0
 800e79c:	f04f 32ff 	mov.w	r2, #4294967295
 800e7a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e7a4:	f10a 0a01 	add.w	sl, sl, #1
 800e7a8:	9304      	str	r3, [sp, #16]
 800e7aa:	9307      	str	r3, [sp, #28]
 800e7ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e7b0:	931a      	str	r3, [sp, #104]	@ 0x68
 800e7b2:	4654      	mov	r4, sl
 800e7b4:	2205      	movs	r2, #5
 800e7b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7ba:	4853      	ldr	r0, [pc, #332]	@ (800e908 <_vfiprintf_r+0x21c>)
 800e7bc:	f7f1 fd08 	bl	80001d0 <memchr>
 800e7c0:	9a04      	ldr	r2, [sp, #16]
 800e7c2:	b9d8      	cbnz	r0, 800e7fc <_vfiprintf_r+0x110>
 800e7c4:	06d1      	lsls	r1, r2, #27
 800e7c6:	bf44      	itt	mi
 800e7c8:	2320      	movmi	r3, #32
 800e7ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e7ce:	0713      	lsls	r3, r2, #28
 800e7d0:	bf44      	itt	mi
 800e7d2:	232b      	movmi	r3, #43	@ 0x2b
 800e7d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e7d8:	f89a 3000 	ldrb.w	r3, [sl]
 800e7dc:	2b2a      	cmp	r3, #42	@ 0x2a
 800e7de:	d015      	beq.n	800e80c <_vfiprintf_r+0x120>
 800e7e0:	9a07      	ldr	r2, [sp, #28]
 800e7e2:	4654      	mov	r4, sl
 800e7e4:	2000      	movs	r0, #0
 800e7e6:	f04f 0c0a 	mov.w	ip, #10
 800e7ea:	4621      	mov	r1, r4
 800e7ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e7f0:	3b30      	subs	r3, #48	@ 0x30
 800e7f2:	2b09      	cmp	r3, #9
 800e7f4:	d94b      	bls.n	800e88e <_vfiprintf_r+0x1a2>
 800e7f6:	b1b0      	cbz	r0, 800e826 <_vfiprintf_r+0x13a>
 800e7f8:	9207      	str	r2, [sp, #28]
 800e7fa:	e014      	b.n	800e826 <_vfiprintf_r+0x13a>
 800e7fc:	eba0 0308 	sub.w	r3, r0, r8
 800e800:	fa09 f303 	lsl.w	r3, r9, r3
 800e804:	4313      	orrs	r3, r2
 800e806:	9304      	str	r3, [sp, #16]
 800e808:	46a2      	mov	sl, r4
 800e80a:	e7d2      	b.n	800e7b2 <_vfiprintf_r+0xc6>
 800e80c:	9b03      	ldr	r3, [sp, #12]
 800e80e:	1d19      	adds	r1, r3, #4
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	9103      	str	r1, [sp, #12]
 800e814:	2b00      	cmp	r3, #0
 800e816:	bfbb      	ittet	lt
 800e818:	425b      	neglt	r3, r3
 800e81a:	f042 0202 	orrlt.w	r2, r2, #2
 800e81e:	9307      	strge	r3, [sp, #28]
 800e820:	9307      	strlt	r3, [sp, #28]
 800e822:	bfb8      	it	lt
 800e824:	9204      	strlt	r2, [sp, #16]
 800e826:	7823      	ldrb	r3, [r4, #0]
 800e828:	2b2e      	cmp	r3, #46	@ 0x2e
 800e82a:	d10a      	bne.n	800e842 <_vfiprintf_r+0x156>
 800e82c:	7863      	ldrb	r3, [r4, #1]
 800e82e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e830:	d132      	bne.n	800e898 <_vfiprintf_r+0x1ac>
 800e832:	9b03      	ldr	r3, [sp, #12]
 800e834:	1d1a      	adds	r2, r3, #4
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	9203      	str	r2, [sp, #12]
 800e83a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e83e:	3402      	adds	r4, #2
 800e840:	9305      	str	r3, [sp, #20]
 800e842:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e918 <_vfiprintf_r+0x22c>
 800e846:	7821      	ldrb	r1, [r4, #0]
 800e848:	2203      	movs	r2, #3
 800e84a:	4650      	mov	r0, sl
 800e84c:	f7f1 fcc0 	bl	80001d0 <memchr>
 800e850:	b138      	cbz	r0, 800e862 <_vfiprintf_r+0x176>
 800e852:	9b04      	ldr	r3, [sp, #16]
 800e854:	eba0 000a 	sub.w	r0, r0, sl
 800e858:	2240      	movs	r2, #64	@ 0x40
 800e85a:	4082      	lsls	r2, r0
 800e85c:	4313      	orrs	r3, r2
 800e85e:	3401      	adds	r4, #1
 800e860:	9304      	str	r3, [sp, #16]
 800e862:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e866:	4829      	ldr	r0, [pc, #164]	@ (800e90c <_vfiprintf_r+0x220>)
 800e868:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e86c:	2206      	movs	r2, #6
 800e86e:	f7f1 fcaf 	bl	80001d0 <memchr>
 800e872:	2800      	cmp	r0, #0
 800e874:	d03f      	beq.n	800e8f6 <_vfiprintf_r+0x20a>
 800e876:	4b26      	ldr	r3, [pc, #152]	@ (800e910 <_vfiprintf_r+0x224>)
 800e878:	bb1b      	cbnz	r3, 800e8c2 <_vfiprintf_r+0x1d6>
 800e87a:	9b03      	ldr	r3, [sp, #12]
 800e87c:	3307      	adds	r3, #7
 800e87e:	f023 0307 	bic.w	r3, r3, #7
 800e882:	3308      	adds	r3, #8
 800e884:	9303      	str	r3, [sp, #12]
 800e886:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e888:	443b      	add	r3, r7
 800e88a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e88c:	e76a      	b.n	800e764 <_vfiprintf_r+0x78>
 800e88e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e892:	460c      	mov	r4, r1
 800e894:	2001      	movs	r0, #1
 800e896:	e7a8      	b.n	800e7ea <_vfiprintf_r+0xfe>
 800e898:	2300      	movs	r3, #0
 800e89a:	3401      	adds	r4, #1
 800e89c:	9305      	str	r3, [sp, #20]
 800e89e:	4619      	mov	r1, r3
 800e8a0:	f04f 0c0a 	mov.w	ip, #10
 800e8a4:	4620      	mov	r0, r4
 800e8a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e8aa:	3a30      	subs	r2, #48	@ 0x30
 800e8ac:	2a09      	cmp	r2, #9
 800e8ae:	d903      	bls.n	800e8b8 <_vfiprintf_r+0x1cc>
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d0c6      	beq.n	800e842 <_vfiprintf_r+0x156>
 800e8b4:	9105      	str	r1, [sp, #20]
 800e8b6:	e7c4      	b.n	800e842 <_vfiprintf_r+0x156>
 800e8b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800e8bc:	4604      	mov	r4, r0
 800e8be:	2301      	movs	r3, #1
 800e8c0:	e7f0      	b.n	800e8a4 <_vfiprintf_r+0x1b8>
 800e8c2:	ab03      	add	r3, sp, #12
 800e8c4:	9300      	str	r3, [sp, #0]
 800e8c6:	462a      	mov	r2, r5
 800e8c8:	4b12      	ldr	r3, [pc, #72]	@ (800e914 <_vfiprintf_r+0x228>)
 800e8ca:	a904      	add	r1, sp, #16
 800e8cc:	4630      	mov	r0, r6
 800e8ce:	f3af 8000 	nop.w
 800e8d2:	4607      	mov	r7, r0
 800e8d4:	1c78      	adds	r0, r7, #1
 800e8d6:	d1d6      	bne.n	800e886 <_vfiprintf_r+0x19a>
 800e8d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e8da:	07d9      	lsls	r1, r3, #31
 800e8dc:	d405      	bmi.n	800e8ea <_vfiprintf_r+0x1fe>
 800e8de:	89ab      	ldrh	r3, [r5, #12]
 800e8e0:	059a      	lsls	r2, r3, #22
 800e8e2:	d402      	bmi.n	800e8ea <_vfiprintf_r+0x1fe>
 800e8e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e8e6:	f7ff fd07 	bl	800e2f8 <__retarget_lock_release_recursive>
 800e8ea:	89ab      	ldrh	r3, [r5, #12]
 800e8ec:	065b      	lsls	r3, r3, #25
 800e8ee:	f53f af1f 	bmi.w	800e730 <_vfiprintf_r+0x44>
 800e8f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e8f4:	e71e      	b.n	800e734 <_vfiprintf_r+0x48>
 800e8f6:	ab03      	add	r3, sp, #12
 800e8f8:	9300      	str	r3, [sp, #0]
 800e8fa:	462a      	mov	r2, r5
 800e8fc:	4b05      	ldr	r3, [pc, #20]	@ (800e914 <_vfiprintf_r+0x228>)
 800e8fe:	a904      	add	r1, sp, #16
 800e900:	4630      	mov	r0, r6
 800e902:	f000 f879 	bl	800e9f8 <_printf_i>
 800e906:	e7e4      	b.n	800e8d2 <_vfiprintf_r+0x1e6>
 800e908:	0800f1a3 	.word	0x0800f1a3
 800e90c:	0800f1ad 	.word	0x0800f1ad
 800e910:	00000000 	.word	0x00000000
 800e914:	0800e6c7 	.word	0x0800e6c7
 800e918:	0800f1a9 	.word	0x0800f1a9

0800e91c <_printf_common>:
 800e91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e920:	4616      	mov	r6, r2
 800e922:	4698      	mov	r8, r3
 800e924:	688a      	ldr	r2, [r1, #8]
 800e926:	690b      	ldr	r3, [r1, #16]
 800e928:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e92c:	4293      	cmp	r3, r2
 800e92e:	bfb8      	it	lt
 800e930:	4613      	movlt	r3, r2
 800e932:	6033      	str	r3, [r6, #0]
 800e934:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e938:	4607      	mov	r7, r0
 800e93a:	460c      	mov	r4, r1
 800e93c:	b10a      	cbz	r2, 800e942 <_printf_common+0x26>
 800e93e:	3301      	adds	r3, #1
 800e940:	6033      	str	r3, [r6, #0]
 800e942:	6823      	ldr	r3, [r4, #0]
 800e944:	0699      	lsls	r1, r3, #26
 800e946:	bf42      	ittt	mi
 800e948:	6833      	ldrmi	r3, [r6, #0]
 800e94a:	3302      	addmi	r3, #2
 800e94c:	6033      	strmi	r3, [r6, #0]
 800e94e:	6825      	ldr	r5, [r4, #0]
 800e950:	f015 0506 	ands.w	r5, r5, #6
 800e954:	d106      	bne.n	800e964 <_printf_common+0x48>
 800e956:	f104 0a19 	add.w	sl, r4, #25
 800e95a:	68e3      	ldr	r3, [r4, #12]
 800e95c:	6832      	ldr	r2, [r6, #0]
 800e95e:	1a9b      	subs	r3, r3, r2
 800e960:	42ab      	cmp	r3, r5
 800e962:	dc26      	bgt.n	800e9b2 <_printf_common+0x96>
 800e964:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e968:	6822      	ldr	r2, [r4, #0]
 800e96a:	3b00      	subs	r3, #0
 800e96c:	bf18      	it	ne
 800e96e:	2301      	movne	r3, #1
 800e970:	0692      	lsls	r2, r2, #26
 800e972:	d42b      	bmi.n	800e9cc <_printf_common+0xb0>
 800e974:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e978:	4641      	mov	r1, r8
 800e97a:	4638      	mov	r0, r7
 800e97c:	47c8      	blx	r9
 800e97e:	3001      	adds	r0, #1
 800e980:	d01e      	beq.n	800e9c0 <_printf_common+0xa4>
 800e982:	6823      	ldr	r3, [r4, #0]
 800e984:	6922      	ldr	r2, [r4, #16]
 800e986:	f003 0306 	and.w	r3, r3, #6
 800e98a:	2b04      	cmp	r3, #4
 800e98c:	bf02      	ittt	eq
 800e98e:	68e5      	ldreq	r5, [r4, #12]
 800e990:	6833      	ldreq	r3, [r6, #0]
 800e992:	1aed      	subeq	r5, r5, r3
 800e994:	68a3      	ldr	r3, [r4, #8]
 800e996:	bf0c      	ite	eq
 800e998:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e99c:	2500      	movne	r5, #0
 800e99e:	4293      	cmp	r3, r2
 800e9a0:	bfc4      	itt	gt
 800e9a2:	1a9b      	subgt	r3, r3, r2
 800e9a4:	18ed      	addgt	r5, r5, r3
 800e9a6:	2600      	movs	r6, #0
 800e9a8:	341a      	adds	r4, #26
 800e9aa:	42b5      	cmp	r5, r6
 800e9ac:	d11a      	bne.n	800e9e4 <_printf_common+0xc8>
 800e9ae:	2000      	movs	r0, #0
 800e9b0:	e008      	b.n	800e9c4 <_printf_common+0xa8>
 800e9b2:	2301      	movs	r3, #1
 800e9b4:	4652      	mov	r2, sl
 800e9b6:	4641      	mov	r1, r8
 800e9b8:	4638      	mov	r0, r7
 800e9ba:	47c8      	blx	r9
 800e9bc:	3001      	adds	r0, #1
 800e9be:	d103      	bne.n	800e9c8 <_printf_common+0xac>
 800e9c0:	f04f 30ff 	mov.w	r0, #4294967295
 800e9c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9c8:	3501      	adds	r5, #1
 800e9ca:	e7c6      	b.n	800e95a <_printf_common+0x3e>
 800e9cc:	18e1      	adds	r1, r4, r3
 800e9ce:	1c5a      	adds	r2, r3, #1
 800e9d0:	2030      	movs	r0, #48	@ 0x30
 800e9d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e9d6:	4422      	add	r2, r4
 800e9d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e9dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e9e0:	3302      	adds	r3, #2
 800e9e2:	e7c7      	b.n	800e974 <_printf_common+0x58>
 800e9e4:	2301      	movs	r3, #1
 800e9e6:	4622      	mov	r2, r4
 800e9e8:	4641      	mov	r1, r8
 800e9ea:	4638      	mov	r0, r7
 800e9ec:	47c8      	blx	r9
 800e9ee:	3001      	adds	r0, #1
 800e9f0:	d0e6      	beq.n	800e9c0 <_printf_common+0xa4>
 800e9f2:	3601      	adds	r6, #1
 800e9f4:	e7d9      	b.n	800e9aa <_printf_common+0x8e>
	...

0800e9f8 <_printf_i>:
 800e9f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e9fc:	7e0f      	ldrb	r7, [r1, #24]
 800e9fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ea00:	2f78      	cmp	r7, #120	@ 0x78
 800ea02:	4691      	mov	r9, r2
 800ea04:	4680      	mov	r8, r0
 800ea06:	460c      	mov	r4, r1
 800ea08:	469a      	mov	sl, r3
 800ea0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ea0e:	d807      	bhi.n	800ea20 <_printf_i+0x28>
 800ea10:	2f62      	cmp	r7, #98	@ 0x62
 800ea12:	d80a      	bhi.n	800ea2a <_printf_i+0x32>
 800ea14:	2f00      	cmp	r7, #0
 800ea16:	f000 80d2 	beq.w	800ebbe <_printf_i+0x1c6>
 800ea1a:	2f58      	cmp	r7, #88	@ 0x58
 800ea1c:	f000 80b9 	beq.w	800eb92 <_printf_i+0x19a>
 800ea20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ea24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ea28:	e03a      	b.n	800eaa0 <_printf_i+0xa8>
 800ea2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ea2e:	2b15      	cmp	r3, #21
 800ea30:	d8f6      	bhi.n	800ea20 <_printf_i+0x28>
 800ea32:	a101      	add	r1, pc, #4	@ (adr r1, 800ea38 <_printf_i+0x40>)
 800ea34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ea38:	0800ea91 	.word	0x0800ea91
 800ea3c:	0800eaa5 	.word	0x0800eaa5
 800ea40:	0800ea21 	.word	0x0800ea21
 800ea44:	0800ea21 	.word	0x0800ea21
 800ea48:	0800ea21 	.word	0x0800ea21
 800ea4c:	0800ea21 	.word	0x0800ea21
 800ea50:	0800eaa5 	.word	0x0800eaa5
 800ea54:	0800ea21 	.word	0x0800ea21
 800ea58:	0800ea21 	.word	0x0800ea21
 800ea5c:	0800ea21 	.word	0x0800ea21
 800ea60:	0800ea21 	.word	0x0800ea21
 800ea64:	0800eba5 	.word	0x0800eba5
 800ea68:	0800eacf 	.word	0x0800eacf
 800ea6c:	0800eb5f 	.word	0x0800eb5f
 800ea70:	0800ea21 	.word	0x0800ea21
 800ea74:	0800ea21 	.word	0x0800ea21
 800ea78:	0800ebc7 	.word	0x0800ebc7
 800ea7c:	0800ea21 	.word	0x0800ea21
 800ea80:	0800eacf 	.word	0x0800eacf
 800ea84:	0800ea21 	.word	0x0800ea21
 800ea88:	0800ea21 	.word	0x0800ea21
 800ea8c:	0800eb67 	.word	0x0800eb67
 800ea90:	6833      	ldr	r3, [r6, #0]
 800ea92:	1d1a      	adds	r2, r3, #4
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	6032      	str	r2, [r6, #0]
 800ea98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ea9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800eaa0:	2301      	movs	r3, #1
 800eaa2:	e09d      	b.n	800ebe0 <_printf_i+0x1e8>
 800eaa4:	6833      	ldr	r3, [r6, #0]
 800eaa6:	6820      	ldr	r0, [r4, #0]
 800eaa8:	1d19      	adds	r1, r3, #4
 800eaaa:	6031      	str	r1, [r6, #0]
 800eaac:	0606      	lsls	r6, r0, #24
 800eaae:	d501      	bpl.n	800eab4 <_printf_i+0xbc>
 800eab0:	681d      	ldr	r5, [r3, #0]
 800eab2:	e003      	b.n	800eabc <_printf_i+0xc4>
 800eab4:	0645      	lsls	r5, r0, #25
 800eab6:	d5fb      	bpl.n	800eab0 <_printf_i+0xb8>
 800eab8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800eabc:	2d00      	cmp	r5, #0
 800eabe:	da03      	bge.n	800eac8 <_printf_i+0xd0>
 800eac0:	232d      	movs	r3, #45	@ 0x2d
 800eac2:	426d      	negs	r5, r5
 800eac4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eac8:	4859      	ldr	r0, [pc, #356]	@ (800ec30 <_printf_i+0x238>)
 800eaca:	230a      	movs	r3, #10
 800eacc:	e011      	b.n	800eaf2 <_printf_i+0xfa>
 800eace:	6821      	ldr	r1, [r4, #0]
 800ead0:	6833      	ldr	r3, [r6, #0]
 800ead2:	0608      	lsls	r0, r1, #24
 800ead4:	f853 5b04 	ldr.w	r5, [r3], #4
 800ead8:	d402      	bmi.n	800eae0 <_printf_i+0xe8>
 800eada:	0649      	lsls	r1, r1, #25
 800eadc:	bf48      	it	mi
 800eade:	b2ad      	uxthmi	r5, r5
 800eae0:	2f6f      	cmp	r7, #111	@ 0x6f
 800eae2:	4853      	ldr	r0, [pc, #332]	@ (800ec30 <_printf_i+0x238>)
 800eae4:	6033      	str	r3, [r6, #0]
 800eae6:	bf14      	ite	ne
 800eae8:	230a      	movne	r3, #10
 800eaea:	2308      	moveq	r3, #8
 800eaec:	2100      	movs	r1, #0
 800eaee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800eaf2:	6866      	ldr	r6, [r4, #4]
 800eaf4:	60a6      	str	r6, [r4, #8]
 800eaf6:	2e00      	cmp	r6, #0
 800eaf8:	bfa2      	ittt	ge
 800eafa:	6821      	ldrge	r1, [r4, #0]
 800eafc:	f021 0104 	bicge.w	r1, r1, #4
 800eb00:	6021      	strge	r1, [r4, #0]
 800eb02:	b90d      	cbnz	r5, 800eb08 <_printf_i+0x110>
 800eb04:	2e00      	cmp	r6, #0
 800eb06:	d04b      	beq.n	800eba0 <_printf_i+0x1a8>
 800eb08:	4616      	mov	r6, r2
 800eb0a:	fbb5 f1f3 	udiv	r1, r5, r3
 800eb0e:	fb03 5711 	mls	r7, r3, r1, r5
 800eb12:	5dc7      	ldrb	r7, [r0, r7]
 800eb14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800eb18:	462f      	mov	r7, r5
 800eb1a:	42bb      	cmp	r3, r7
 800eb1c:	460d      	mov	r5, r1
 800eb1e:	d9f4      	bls.n	800eb0a <_printf_i+0x112>
 800eb20:	2b08      	cmp	r3, #8
 800eb22:	d10b      	bne.n	800eb3c <_printf_i+0x144>
 800eb24:	6823      	ldr	r3, [r4, #0]
 800eb26:	07df      	lsls	r7, r3, #31
 800eb28:	d508      	bpl.n	800eb3c <_printf_i+0x144>
 800eb2a:	6923      	ldr	r3, [r4, #16]
 800eb2c:	6861      	ldr	r1, [r4, #4]
 800eb2e:	4299      	cmp	r1, r3
 800eb30:	bfde      	ittt	le
 800eb32:	2330      	movle	r3, #48	@ 0x30
 800eb34:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eb38:	f106 36ff 	addle.w	r6, r6, #4294967295
 800eb3c:	1b92      	subs	r2, r2, r6
 800eb3e:	6122      	str	r2, [r4, #16]
 800eb40:	f8cd a000 	str.w	sl, [sp]
 800eb44:	464b      	mov	r3, r9
 800eb46:	aa03      	add	r2, sp, #12
 800eb48:	4621      	mov	r1, r4
 800eb4a:	4640      	mov	r0, r8
 800eb4c:	f7ff fee6 	bl	800e91c <_printf_common>
 800eb50:	3001      	adds	r0, #1
 800eb52:	d14a      	bne.n	800ebea <_printf_i+0x1f2>
 800eb54:	f04f 30ff 	mov.w	r0, #4294967295
 800eb58:	b004      	add	sp, #16
 800eb5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb5e:	6823      	ldr	r3, [r4, #0]
 800eb60:	f043 0320 	orr.w	r3, r3, #32
 800eb64:	6023      	str	r3, [r4, #0]
 800eb66:	4833      	ldr	r0, [pc, #204]	@ (800ec34 <_printf_i+0x23c>)
 800eb68:	2778      	movs	r7, #120	@ 0x78
 800eb6a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800eb6e:	6823      	ldr	r3, [r4, #0]
 800eb70:	6831      	ldr	r1, [r6, #0]
 800eb72:	061f      	lsls	r7, r3, #24
 800eb74:	f851 5b04 	ldr.w	r5, [r1], #4
 800eb78:	d402      	bmi.n	800eb80 <_printf_i+0x188>
 800eb7a:	065f      	lsls	r7, r3, #25
 800eb7c:	bf48      	it	mi
 800eb7e:	b2ad      	uxthmi	r5, r5
 800eb80:	6031      	str	r1, [r6, #0]
 800eb82:	07d9      	lsls	r1, r3, #31
 800eb84:	bf44      	itt	mi
 800eb86:	f043 0320 	orrmi.w	r3, r3, #32
 800eb8a:	6023      	strmi	r3, [r4, #0]
 800eb8c:	b11d      	cbz	r5, 800eb96 <_printf_i+0x19e>
 800eb8e:	2310      	movs	r3, #16
 800eb90:	e7ac      	b.n	800eaec <_printf_i+0xf4>
 800eb92:	4827      	ldr	r0, [pc, #156]	@ (800ec30 <_printf_i+0x238>)
 800eb94:	e7e9      	b.n	800eb6a <_printf_i+0x172>
 800eb96:	6823      	ldr	r3, [r4, #0]
 800eb98:	f023 0320 	bic.w	r3, r3, #32
 800eb9c:	6023      	str	r3, [r4, #0]
 800eb9e:	e7f6      	b.n	800eb8e <_printf_i+0x196>
 800eba0:	4616      	mov	r6, r2
 800eba2:	e7bd      	b.n	800eb20 <_printf_i+0x128>
 800eba4:	6833      	ldr	r3, [r6, #0]
 800eba6:	6825      	ldr	r5, [r4, #0]
 800eba8:	6961      	ldr	r1, [r4, #20]
 800ebaa:	1d18      	adds	r0, r3, #4
 800ebac:	6030      	str	r0, [r6, #0]
 800ebae:	062e      	lsls	r6, r5, #24
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	d501      	bpl.n	800ebb8 <_printf_i+0x1c0>
 800ebb4:	6019      	str	r1, [r3, #0]
 800ebb6:	e002      	b.n	800ebbe <_printf_i+0x1c6>
 800ebb8:	0668      	lsls	r0, r5, #25
 800ebba:	d5fb      	bpl.n	800ebb4 <_printf_i+0x1bc>
 800ebbc:	8019      	strh	r1, [r3, #0]
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	6123      	str	r3, [r4, #16]
 800ebc2:	4616      	mov	r6, r2
 800ebc4:	e7bc      	b.n	800eb40 <_printf_i+0x148>
 800ebc6:	6833      	ldr	r3, [r6, #0]
 800ebc8:	1d1a      	adds	r2, r3, #4
 800ebca:	6032      	str	r2, [r6, #0]
 800ebcc:	681e      	ldr	r6, [r3, #0]
 800ebce:	6862      	ldr	r2, [r4, #4]
 800ebd0:	2100      	movs	r1, #0
 800ebd2:	4630      	mov	r0, r6
 800ebd4:	f7f1 fafc 	bl	80001d0 <memchr>
 800ebd8:	b108      	cbz	r0, 800ebde <_printf_i+0x1e6>
 800ebda:	1b80      	subs	r0, r0, r6
 800ebdc:	6060      	str	r0, [r4, #4]
 800ebde:	6863      	ldr	r3, [r4, #4]
 800ebe0:	6123      	str	r3, [r4, #16]
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ebe8:	e7aa      	b.n	800eb40 <_printf_i+0x148>
 800ebea:	6923      	ldr	r3, [r4, #16]
 800ebec:	4632      	mov	r2, r6
 800ebee:	4649      	mov	r1, r9
 800ebf0:	4640      	mov	r0, r8
 800ebf2:	47d0      	blx	sl
 800ebf4:	3001      	adds	r0, #1
 800ebf6:	d0ad      	beq.n	800eb54 <_printf_i+0x15c>
 800ebf8:	6823      	ldr	r3, [r4, #0]
 800ebfa:	079b      	lsls	r3, r3, #30
 800ebfc:	d413      	bmi.n	800ec26 <_printf_i+0x22e>
 800ebfe:	68e0      	ldr	r0, [r4, #12]
 800ec00:	9b03      	ldr	r3, [sp, #12]
 800ec02:	4298      	cmp	r0, r3
 800ec04:	bfb8      	it	lt
 800ec06:	4618      	movlt	r0, r3
 800ec08:	e7a6      	b.n	800eb58 <_printf_i+0x160>
 800ec0a:	2301      	movs	r3, #1
 800ec0c:	4632      	mov	r2, r6
 800ec0e:	4649      	mov	r1, r9
 800ec10:	4640      	mov	r0, r8
 800ec12:	47d0      	blx	sl
 800ec14:	3001      	adds	r0, #1
 800ec16:	d09d      	beq.n	800eb54 <_printf_i+0x15c>
 800ec18:	3501      	adds	r5, #1
 800ec1a:	68e3      	ldr	r3, [r4, #12]
 800ec1c:	9903      	ldr	r1, [sp, #12]
 800ec1e:	1a5b      	subs	r3, r3, r1
 800ec20:	42ab      	cmp	r3, r5
 800ec22:	dcf2      	bgt.n	800ec0a <_printf_i+0x212>
 800ec24:	e7eb      	b.n	800ebfe <_printf_i+0x206>
 800ec26:	2500      	movs	r5, #0
 800ec28:	f104 0619 	add.w	r6, r4, #25
 800ec2c:	e7f5      	b.n	800ec1a <_printf_i+0x222>
 800ec2e:	bf00      	nop
 800ec30:	0800f1b4 	.word	0x0800f1b4
 800ec34:	0800f1c5 	.word	0x0800f1c5

0800ec38 <fiprintf>:
 800ec38:	b40e      	push	{r1, r2, r3}
 800ec3a:	b503      	push	{r0, r1, lr}
 800ec3c:	4601      	mov	r1, r0
 800ec3e:	ab03      	add	r3, sp, #12
 800ec40:	4805      	ldr	r0, [pc, #20]	@ (800ec58 <fiprintf+0x20>)
 800ec42:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec46:	6800      	ldr	r0, [r0, #0]
 800ec48:	9301      	str	r3, [sp, #4]
 800ec4a:	f7ff fd4f 	bl	800e6ec <_vfiprintf_r>
 800ec4e:	b002      	add	sp, #8
 800ec50:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec54:	b003      	add	sp, #12
 800ec56:	4770      	bx	lr
 800ec58:	20000034 	.word	0x20000034

0800ec5c <__swhatbuf_r>:
 800ec5c:	b570      	push	{r4, r5, r6, lr}
 800ec5e:	460c      	mov	r4, r1
 800ec60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec64:	2900      	cmp	r1, #0
 800ec66:	b096      	sub	sp, #88	@ 0x58
 800ec68:	4615      	mov	r5, r2
 800ec6a:	461e      	mov	r6, r3
 800ec6c:	da0d      	bge.n	800ec8a <__swhatbuf_r+0x2e>
 800ec6e:	89a3      	ldrh	r3, [r4, #12]
 800ec70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ec74:	f04f 0100 	mov.w	r1, #0
 800ec78:	bf14      	ite	ne
 800ec7a:	2340      	movne	r3, #64	@ 0x40
 800ec7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ec80:	2000      	movs	r0, #0
 800ec82:	6031      	str	r1, [r6, #0]
 800ec84:	602b      	str	r3, [r5, #0]
 800ec86:	b016      	add	sp, #88	@ 0x58
 800ec88:	bd70      	pop	{r4, r5, r6, pc}
 800ec8a:	466a      	mov	r2, sp
 800ec8c:	f000 f848 	bl	800ed20 <_fstat_r>
 800ec90:	2800      	cmp	r0, #0
 800ec92:	dbec      	blt.n	800ec6e <__swhatbuf_r+0x12>
 800ec94:	9901      	ldr	r1, [sp, #4]
 800ec96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ec9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ec9e:	4259      	negs	r1, r3
 800eca0:	4159      	adcs	r1, r3
 800eca2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eca6:	e7eb      	b.n	800ec80 <__swhatbuf_r+0x24>

0800eca8 <__smakebuf_r>:
 800eca8:	898b      	ldrh	r3, [r1, #12]
 800ecaa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ecac:	079d      	lsls	r5, r3, #30
 800ecae:	4606      	mov	r6, r0
 800ecb0:	460c      	mov	r4, r1
 800ecb2:	d507      	bpl.n	800ecc4 <__smakebuf_r+0x1c>
 800ecb4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ecb8:	6023      	str	r3, [r4, #0]
 800ecba:	6123      	str	r3, [r4, #16]
 800ecbc:	2301      	movs	r3, #1
 800ecbe:	6163      	str	r3, [r4, #20]
 800ecc0:	b003      	add	sp, #12
 800ecc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecc4:	ab01      	add	r3, sp, #4
 800ecc6:	466a      	mov	r2, sp
 800ecc8:	f7ff ffc8 	bl	800ec5c <__swhatbuf_r>
 800eccc:	9f00      	ldr	r7, [sp, #0]
 800ecce:	4605      	mov	r5, r0
 800ecd0:	4639      	mov	r1, r7
 800ecd2:	4630      	mov	r0, r6
 800ecd4:	f7fe fed2 	bl	800da7c <_malloc_r>
 800ecd8:	b948      	cbnz	r0, 800ecee <__smakebuf_r+0x46>
 800ecda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecde:	059a      	lsls	r2, r3, #22
 800ece0:	d4ee      	bmi.n	800ecc0 <__smakebuf_r+0x18>
 800ece2:	f023 0303 	bic.w	r3, r3, #3
 800ece6:	f043 0302 	orr.w	r3, r3, #2
 800ecea:	81a3      	strh	r3, [r4, #12]
 800ecec:	e7e2      	b.n	800ecb4 <__smakebuf_r+0xc>
 800ecee:	89a3      	ldrh	r3, [r4, #12]
 800ecf0:	6020      	str	r0, [r4, #0]
 800ecf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ecf6:	81a3      	strh	r3, [r4, #12]
 800ecf8:	9b01      	ldr	r3, [sp, #4]
 800ecfa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ecfe:	b15b      	cbz	r3, 800ed18 <__smakebuf_r+0x70>
 800ed00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed04:	4630      	mov	r0, r6
 800ed06:	f000 f81d 	bl	800ed44 <_isatty_r>
 800ed0a:	b128      	cbz	r0, 800ed18 <__smakebuf_r+0x70>
 800ed0c:	89a3      	ldrh	r3, [r4, #12]
 800ed0e:	f023 0303 	bic.w	r3, r3, #3
 800ed12:	f043 0301 	orr.w	r3, r3, #1
 800ed16:	81a3      	strh	r3, [r4, #12]
 800ed18:	89a3      	ldrh	r3, [r4, #12]
 800ed1a:	431d      	orrs	r5, r3
 800ed1c:	81a5      	strh	r5, [r4, #12]
 800ed1e:	e7cf      	b.n	800ecc0 <__smakebuf_r+0x18>

0800ed20 <_fstat_r>:
 800ed20:	b538      	push	{r3, r4, r5, lr}
 800ed22:	4d07      	ldr	r5, [pc, #28]	@ (800ed40 <_fstat_r+0x20>)
 800ed24:	2300      	movs	r3, #0
 800ed26:	4604      	mov	r4, r0
 800ed28:	4608      	mov	r0, r1
 800ed2a:	4611      	mov	r1, r2
 800ed2c:	602b      	str	r3, [r5, #0]
 800ed2e:	f7f2 fbf7 	bl	8001520 <_fstat>
 800ed32:	1c43      	adds	r3, r0, #1
 800ed34:	d102      	bne.n	800ed3c <_fstat_r+0x1c>
 800ed36:	682b      	ldr	r3, [r5, #0]
 800ed38:	b103      	cbz	r3, 800ed3c <_fstat_r+0x1c>
 800ed3a:	6023      	str	r3, [r4, #0]
 800ed3c:	bd38      	pop	{r3, r4, r5, pc}
 800ed3e:	bf00      	nop
 800ed40:	2000538c 	.word	0x2000538c

0800ed44 <_isatty_r>:
 800ed44:	b538      	push	{r3, r4, r5, lr}
 800ed46:	4d06      	ldr	r5, [pc, #24]	@ (800ed60 <_isatty_r+0x1c>)
 800ed48:	2300      	movs	r3, #0
 800ed4a:	4604      	mov	r4, r0
 800ed4c:	4608      	mov	r0, r1
 800ed4e:	602b      	str	r3, [r5, #0]
 800ed50:	f7f2 fbf6 	bl	8001540 <_isatty>
 800ed54:	1c43      	adds	r3, r0, #1
 800ed56:	d102      	bne.n	800ed5e <_isatty_r+0x1a>
 800ed58:	682b      	ldr	r3, [r5, #0]
 800ed5a:	b103      	cbz	r3, 800ed5e <_isatty_r+0x1a>
 800ed5c:	6023      	str	r3, [r4, #0]
 800ed5e:	bd38      	pop	{r3, r4, r5, pc}
 800ed60:	2000538c 	.word	0x2000538c

0800ed64 <abort>:
 800ed64:	b508      	push	{r3, lr}
 800ed66:	2006      	movs	r0, #6
 800ed68:	f000 f85a 	bl	800ee20 <raise>
 800ed6c:	2001      	movs	r0, #1
 800ed6e:	f7f2 fb87 	bl	8001480 <_exit>

0800ed72 <_realloc_r>:
 800ed72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed76:	4680      	mov	r8, r0
 800ed78:	4615      	mov	r5, r2
 800ed7a:	460c      	mov	r4, r1
 800ed7c:	b921      	cbnz	r1, 800ed88 <_realloc_r+0x16>
 800ed7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ed82:	4611      	mov	r1, r2
 800ed84:	f7fe be7a 	b.w	800da7c <_malloc_r>
 800ed88:	b92a      	cbnz	r2, 800ed96 <_realloc_r+0x24>
 800ed8a:	f7ff fae3 	bl	800e354 <_free_r>
 800ed8e:	2400      	movs	r4, #0
 800ed90:	4620      	mov	r0, r4
 800ed92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed96:	f000 f85f 	bl	800ee58 <_malloc_usable_size_r>
 800ed9a:	4285      	cmp	r5, r0
 800ed9c:	4606      	mov	r6, r0
 800ed9e:	d802      	bhi.n	800eda6 <_realloc_r+0x34>
 800eda0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800eda4:	d8f4      	bhi.n	800ed90 <_realloc_r+0x1e>
 800eda6:	4629      	mov	r1, r5
 800eda8:	4640      	mov	r0, r8
 800edaa:	f7fe fe67 	bl	800da7c <_malloc_r>
 800edae:	4607      	mov	r7, r0
 800edb0:	2800      	cmp	r0, #0
 800edb2:	d0ec      	beq.n	800ed8e <_realloc_r+0x1c>
 800edb4:	42b5      	cmp	r5, r6
 800edb6:	462a      	mov	r2, r5
 800edb8:	4621      	mov	r1, r4
 800edba:	bf28      	it	cs
 800edbc:	4632      	movcs	r2, r6
 800edbe:	f7ff fa9c 	bl	800e2fa <memcpy>
 800edc2:	4621      	mov	r1, r4
 800edc4:	4640      	mov	r0, r8
 800edc6:	f7ff fac5 	bl	800e354 <_free_r>
 800edca:	463c      	mov	r4, r7
 800edcc:	e7e0      	b.n	800ed90 <_realloc_r+0x1e>

0800edce <_raise_r>:
 800edce:	291f      	cmp	r1, #31
 800edd0:	b538      	push	{r3, r4, r5, lr}
 800edd2:	4605      	mov	r5, r0
 800edd4:	460c      	mov	r4, r1
 800edd6:	d904      	bls.n	800ede2 <_raise_r+0x14>
 800edd8:	2316      	movs	r3, #22
 800edda:	6003      	str	r3, [r0, #0]
 800eddc:	f04f 30ff 	mov.w	r0, #4294967295
 800ede0:	bd38      	pop	{r3, r4, r5, pc}
 800ede2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ede4:	b112      	cbz	r2, 800edec <_raise_r+0x1e>
 800ede6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800edea:	b94b      	cbnz	r3, 800ee00 <_raise_r+0x32>
 800edec:	4628      	mov	r0, r5
 800edee:	f000 f831 	bl	800ee54 <_getpid_r>
 800edf2:	4622      	mov	r2, r4
 800edf4:	4601      	mov	r1, r0
 800edf6:	4628      	mov	r0, r5
 800edf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800edfc:	f000 b818 	b.w	800ee30 <_kill_r>
 800ee00:	2b01      	cmp	r3, #1
 800ee02:	d00a      	beq.n	800ee1a <_raise_r+0x4c>
 800ee04:	1c59      	adds	r1, r3, #1
 800ee06:	d103      	bne.n	800ee10 <_raise_r+0x42>
 800ee08:	2316      	movs	r3, #22
 800ee0a:	6003      	str	r3, [r0, #0]
 800ee0c:	2001      	movs	r0, #1
 800ee0e:	e7e7      	b.n	800ede0 <_raise_r+0x12>
 800ee10:	2100      	movs	r1, #0
 800ee12:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ee16:	4620      	mov	r0, r4
 800ee18:	4798      	blx	r3
 800ee1a:	2000      	movs	r0, #0
 800ee1c:	e7e0      	b.n	800ede0 <_raise_r+0x12>
	...

0800ee20 <raise>:
 800ee20:	4b02      	ldr	r3, [pc, #8]	@ (800ee2c <raise+0xc>)
 800ee22:	4601      	mov	r1, r0
 800ee24:	6818      	ldr	r0, [r3, #0]
 800ee26:	f7ff bfd2 	b.w	800edce <_raise_r>
 800ee2a:	bf00      	nop
 800ee2c:	20000034 	.word	0x20000034

0800ee30 <_kill_r>:
 800ee30:	b538      	push	{r3, r4, r5, lr}
 800ee32:	4d07      	ldr	r5, [pc, #28]	@ (800ee50 <_kill_r+0x20>)
 800ee34:	2300      	movs	r3, #0
 800ee36:	4604      	mov	r4, r0
 800ee38:	4608      	mov	r0, r1
 800ee3a:	4611      	mov	r1, r2
 800ee3c:	602b      	str	r3, [r5, #0]
 800ee3e:	f7f2 fb0f 	bl	8001460 <_kill>
 800ee42:	1c43      	adds	r3, r0, #1
 800ee44:	d102      	bne.n	800ee4c <_kill_r+0x1c>
 800ee46:	682b      	ldr	r3, [r5, #0]
 800ee48:	b103      	cbz	r3, 800ee4c <_kill_r+0x1c>
 800ee4a:	6023      	str	r3, [r4, #0]
 800ee4c:	bd38      	pop	{r3, r4, r5, pc}
 800ee4e:	bf00      	nop
 800ee50:	2000538c 	.word	0x2000538c

0800ee54 <_getpid_r>:
 800ee54:	f7f2 bafc 	b.w	8001450 <_getpid>

0800ee58 <_malloc_usable_size_r>:
 800ee58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee5c:	1f18      	subs	r0, r3, #4
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	bfbc      	itt	lt
 800ee62:	580b      	ldrlt	r3, [r1, r0]
 800ee64:	18c0      	addlt	r0, r0, r3
 800ee66:	4770      	bx	lr

0800ee68 <_init>:
 800ee68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee6a:	bf00      	nop
 800ee6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee6e:	bc08      	pop	{r3}
 800ee70:	469e      	mov	lr, r3
 800ee72:	4770      	bx	lr

0800ee74 <_fini>:
 800ee74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee76:	bf00      	nop
 800ee78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee7a:	bc08      	pop	{r3}
 800ee7c:	469e      	mov	lr, r3
 800ee7e:	4770      	bx	lr
