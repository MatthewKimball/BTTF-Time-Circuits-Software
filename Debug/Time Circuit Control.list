
Time Circuit Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c958  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  0800cae8  0800cae8  0000dae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cde0  0800cde0  0000e080  2**0
                  CONTENTS
  4 .ARM          00000008  0800cde0  0800cde0  0000dde0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cde8  0800cde8  0000e080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cde8  0800cde8  0000dde8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cdec  0800cdec  0000ddec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800cdf0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e080  2**0
                  CONTENTS
 10 .bss          00004350  20000080  20000080  0000e080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200043d0  200043d0  0000e080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001df60  00000000  00000000  0000e0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005156  00000000  00000000  0002c010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001868  00000000  00000000  00031168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012a7  00000000  00000000  000329d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028217  00000000  00000000  00033c77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027bbf  00000000  00000000  0005be8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d97e5  00000000  00000000  00083a4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015d232  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006d50  00000000  00000000  0015d278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  00163fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cad0 	.word	0x0800cad0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800cad0 	.word	0x0800cad0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000566:	463b      	mov	r3, r7
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000572:	4b21      	ldr	r3, [pc, #132]	@ (80005f8 <MX_ADC1_Init+0x98>)
 8000574:	4a21      	ldr	r2, [pc, #132]	@ (80005fc <MX_ADC1_Init+0x9c>)
 8000576:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000578:	4b1f      	ldr	r3, [pc, #124]	@ (80005f8 <MX_ADC1_Init+0x98>)
 800057a:	2200      	movs	r2, #0
 800057c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800057e:	4b1e      	ldr	r3, [pc, #120]	@ (80005f8 <MX_ADC1_Init+0x98>)
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000584:	4b1c      	ldr	r3, [pc, #112]	@ (80005f8 <MX_ADC1_Init+0x98>)
 8000586:	2200      	movs	r2, #0
 8000588:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800058a:	4b1b      	ldr	r3, [pc, #108]	@ (80005f8 <MX_ADC1_Init+0x98>)
 800058c:	2200      	movs	r2, #0
 800058e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000590:	4b19      	ldr	r3, [pc, #100]	@ (80005f8 <MX_ADC1_Init+0x98>)
 8000592:	2200      	movs	r2, #0
 8000594:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000598:	4b17      	ldr	r3, [pc, #92]	@ (80005f8 <MX_ADC1_Init+0x98>)
 800059a:	2200      	movs	r2, #0
 800059c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800059e:	4b16      	ldr	r3, [pc, #88]	@ (80005f8 <MX_ADC1_Init+0x98>)
 80005a0:	4a17      	ldr	r2, [pc, #92]	@ (8000600 <MX_ADC1_Init+0xa0>)
 80005a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005a4:	4b14      	ldr	r3, [pc, #80]	@ (80005f8 <MX_ADC1_Init+0x98>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005aa:	4b13      	ldr	r3, [pc, #76]	@ (80005f8 <MX_ADC1_Init+0x98>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005b0:	4b11      	ldr	r3, [pc, #68]	@ (80005f8 <MX_ADC1_Init+0x98>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005b8:	4b0f      	ldr	r3, [pc, #60]	@ (80005f8 <MX_ADC1_Init+0x98>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005be:	480e      	ldr	r0, [pc, #56]	@ (80005f8 <MX_ADC1_Init+0x98>)
 80005c0:	f001 f840 	bl	8001644 <HAL_ADC_Init>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80005ca:	f000 fcbb 	bl	8000f44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005d2:	2301      	movs	r3, #1
 80005d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005da:	463b      	mov	r3, r7
 80005dc:	4619      	mov	r1, r3
 80005de:	4806      	ldr	r0, [pc, #24]	@ (80005f8 <MX_ADC1_Init+0x98>)
 80005e0:	f001 f874 	bl	80016cc <HAL_ADC_ConfigChannel>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80005ea:	f000 fcab 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005ee:	bf00      	nop
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	2000009c 	.word	0x2000009c
 80005fc:	40012000 	.word	0x40012000
 8000600:	0f000001 	.word	0x0f000001

08000604 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08a      	sub	sp, #40	@ 0x28
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a17      	ldr	r2, [pc, #92]	@ (8000680 <HAL_ADC_MspInit+0x7c>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d127      	bne.n	8000676 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	613b      	str	r3, [r7, #16]
 800062a:	4b16      	ldr	r3, [pc, #88]	@ (8000684 <HAL_ADC_MspInit+0x80>)
 800062c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800062e:	4a15      	ldr	r2, [pc, #84]	@ (8000684 <HAL_ADC_MspInit+0x80>)
 8000630:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000634:	6453      	str	r3, [r2, #68]	@ 0x44
 8000636:	4b13      	ldr	r3, [pc, #76]	@ (8000684 <HAL_ADC_MspInit+0x80>)
 8000638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800063a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800063e:	613b      	str	r3, [r7, #16]
 8000640:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	4b0f      	ldr	r3, [pc, #60]	@ (8000684 <HAL_ADC_MspInit+0x80>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	4a0e      	ldr	r2, [pc, #56]	@ (8000684 <HAL_ADC_MspInit+0x80>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6313      	str	r3, [r2, #48]	@ 0x30
 8000652:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <HAL_ADC_MspInit+0x80>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = CAN_ID_SWITCH_4_Pin;
 800065e:	2301      	movs	r3, #1
 8000660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000662:	2303      	movs	r3, #3
 8000664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CAN_ID_SWITCH_4_GPIO_Port, &GPIO_InitStruct);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4619      	mov	r1, r3
 8000670:	4805      	ldr	r0, [pc, #20]	@ (8000688 <HAL_ADC_MspInit+0x84>)
 8000672:	f002 f837 	bl	80026e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000676:	bf00      	nop
 8000678:	3728      	adds	r7, #40	@ 0x28
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40012000 	.word	0x40012000
 8000684:	40023800 	.word	0x40023800
 8000688:	40020000 	.word	0x40020000

0800068c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000690:	4b16      	ldr	r3, [pc, #88]	@ (80006ec <MX_CAN1_Init+0x60>)
 8000692:	4a17      	ldr	r2, [pc, #92]	@ (80006f0 <MX_CAN1_Init+0x64>)
 8000694:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000696:	4b15      	ldr	r3, [pc, #84]	@ (80006ec <MX_CAN1_Init+0x60>)
 8000698:	2210      	movs	r2, #16
 800069a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800069c:	4b13      	ldr	r3, [pc, #76]	@ (80006ec <MX_CAN1_Init+0x60>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006a2:	4b12      	ldr	r3, [pc, #72]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80006a8:	4b10      	ldr	r3, [pc, #64]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80006ae:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006b4:	4b0d      	ldr	r3, [pc, #52]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006ba:	4b0c      	ldr	r3, [pc, #48]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006bc:	2200      	movs	r2, #0
 80006be:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006c0:	4b0a      	ldr	r3, [pc, #40]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006c6:	4b09      	ldr	r3, [pc, #36]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006cc:	4b07      	ldr	r3, [pc, #28]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006d2:	4b06      	ldr	r3, [pc, #24]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006d8:	4804      	ldr	r0, [pc, #16]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006da:	f001 fa15 	bl	8001b08 <HAL_CAN_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80006e4:	f000 fc2e 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	200000e4 	.word	0x200000e4
 80006f0:	40006400 	.word	0x40006400

080006f4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08a      	sub	sp, #40	@ 0x28
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a19      	ldr	r2, [pc, #100]	@ (8000778 <HAL_CAN_MspInit+0x84>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d12c      	bne.n	8000770 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
 800071a:	4b18      	ldr	r3, [pc, #96]	@ (800077c <HAL_CAN_MspInit+0x88>)
 800071c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800071e:	4a17      	ldr	r2, [pc, #92]	@ (800077c <HAL_CAN_MspInit+0x88>)
 8000720:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000724:	6413      	str	r3, [r2, #64]	@ 0x40
 8000726:	4b15      	ldr	r3, [pc, #84]	@ (800077c <HAL_CAN_MspInit+0x88>)
 8000728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800072a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	4b11      	ldr	r3, [pc, #68]	@ (800077c <HAL_CAN_MspInit+0x88>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a10      	ldr	r2, [pc, #64]	@ (800077c <HAL_CAN_MspInit+0x88>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <HAL_CAN_MspInit+0x88>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800074e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000754:	2302      	movs	r3, #2
 8000756:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075c:	2303      	movs	r3, #3
 800075e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000760:	2309      	movs	r3, #9
 8000762:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4619      	mov	r1, r3
 800076a:	4805      	ldr	r0, [pc, #20]	@ (8000780 <HAL_CAN_MspInit+0x8c>)
 800076c:	f001 ffba 	bl	80026e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000770:	bf00      	nop
 8000772:	3728      	adds	r7, #40	@ 0x28
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40006400 	.word	0x40006400
 800077c:	40023800 	.word	0x40023800
 8000780:	40020000 	.word	0x40020000

08000784 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <MX_DMA_Init+0x3c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a0b      	ldr	r2, [pc, #44]	@ (80007c0 <MX_DMA_Init+0x3c>)
 8000794:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <MX_DMA_Init+0x3c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2100      	movs	r1, #0
 80007aa:	200f      	movs	r0, #15
 80007ac:	f001 fb83 	bl	8001eb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80007b0:	200f      	movs	r0, #15
 80007b2:	f001 fb9c 	bl	8001eee <HAL_NVIC_EnableIRQ>

}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800

080007c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	@ 0x28
 80007c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	4b6e      	ldr	r3, [pc, #440]	@ (8000998 <MX_GPIO_Init+0x1d4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a6d      	ldr	r2, [pc, #436]	@ (8000998 <MX_GPIO_Init+0x1d4>)
 80007e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b6b      	ldr	r3, [pc, #428]	@ (8000998 <MX_GPIO_Init+0x1d4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	4b67      	ldr	r3, [pc, #412]	@ (8000998 <MX_GPIO_Init+0x1d4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a66      	ldr	r2, [pc, #408]	@ (8000998 <MX_GPIO_Init+0x1d4>)
 8000800:	f043 0304 	orr.w	r3, r3, #4
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b64      	ldr	r3, [pc, #400]	@ (8000998 <MX_GPIO_Init+0x1d4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0304 	and.w	r3, r3, #4
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	4b60      	ldr	r3, [pc, #384]	@ (8000998 <MX_GPIO_Init+0x1d4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	4a5f      	ldr	r2, [pc, #380]	@ (8000998 <MX_GPIO_Init+0x1d4>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6313      	str	r3, [r2, #48]	@ 0x30
 8000822:	4b5d      	ldr	r3, [pc, #372]	@ (8000998 <MX_GPIO_Init+0x1d4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b59      	ldr	r3, [pc, #356]	@ (8000998 <MX_GPIO_Init+0x1d4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	4a58      	ldr	r2, [pc, #352]	@ (8000998 <MX_GPIO_Init+0x1d4>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	6313      	str	r3, [r2, #48]	@ 0x30
 800083e:	4b56      	ldr	r3, [pc, #344]	@ (8000998 <MX_GPIO_Init+0x1d4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	603b      	str	r3, [r7, #0]
 800084e:	4b52      	ldr	r3, [pc, #328]	@ (8000998 <MX_GPIO_Init+0x1d4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a51      	ldr	r2, [pc, #324]	@ (8000998 <MX_GPIO_Init+0x1d4>)
 8000854:	f043 0308 	orr.w	r3, r3, #8
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b4f      	ldr	r3, [pc, #316]	@ (8000998 <MX_GPIO_Init+0x1d4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0308 	and.w	r3, r3, #8
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, KEYPAD_COL_2_Pin|KEYPAD_COL_1_Pin|DIAGNOSTIC_RGB_LED_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	f241 0105 	movw	r1, #4101	@ 0x1005
 800086c:	484b      	ldr	r0, [pc, #300]	@ (800099c <MX_GPIO_Init+0x1d8>)
 800086e:	f002 f8ed 	bl	8002a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WHITE_LED_Pin|KEYPAD_COL_3_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2118      	movs	r1, #24
 8000876:	484a      	ldr	r0, [pc, #296]	@ (80009a0 <MX_GPIO_Init+0x1dc>)
 8000878:	f002 f8e8 	bl	8002a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800087c:	2201      	movs	r2, #1
 800087e:	2120      	movs	r1, #32
 8000880:	4846      	ldr	r0, [pc, #280]	@ (800099c <MX_GPIO_Init+0x1d8>)
 8000882:	f002 f8e3 	bl	8002a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_MODE_GPIO_Port, SD_MODE_Pin, GPIO_PIN_SET);
 8000886:	2201      	movs	r2, #1
 8000888:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800088c:	4845      	ldr	r0, [pc, #276]	@ (80009a4 <MX_GPIO_Init+0x1e0>)
 800088e:	f002 f8dd 	bl	8002a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = KEYPAD_COL_2_Pin|KEYPAD_COL_1_Pin|SD_CS_Pin|DIAGNOSTIC_RGB_LED_Pin;
 8000892:	f241 0325 	movw	r3, #4133	@ 0x1025
 8000896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000898:	2301      	movs	r3, #1
 800089a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4619      	mov	r1, r3
 80008aa:	483c      	ldr	r0, [pc, #240]	@ (800099c <MX_GPIO_Init+0x1d8>)
 80008ac:	f001 ff1a 	bl	80026e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = KEYPAD_ROW_1_Pin|KEYPAD_ROW_4_Pin|KEYPAD_ROW_3_Pin;
 80008b0:	231a      	movs	r3, #26
 80008b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008b8:	2302      	movs	r3, #2
 80008ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	4619      	mov	r1, r3
 80008c2:	4836      	ldr	r0, [pc, #216]	@ (800099c <MX_GPIO_Init+0x1d8>)
 80008c4:	f001 ff0e 	bl	80026e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEYPAD_ROW_2_Pin;
 80008c8:	2302      	movs	r3, #2
 80008ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008d0:	2302      	movs	r3, #2
 80008d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEYPAD_ROW_2_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4619      	mov	r1, r3
 80008da:	4831      	ldr	r0, [pc, #196]	@ (80009a0 <MX_GPIO_Init+0x1dc>)
 80008dc:	f001 ff02 	bl	80026e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = WHITE_LED_Pin|KEYPAD_COL_3_Pin;
 80008e0:	2318      	movs	r3, #24
 80008e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e4:	2301      	movs	r3, #1
 80008e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	4619      	mov	r1, r3
 80008f6:	482a      	ldr	r0, [pc, #168]	@ (80009a0 <MX_GPIO_Init+0x1dc>)
 80008f8:	f001 fef4 	bl	80026e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SD_CD_Pin|KEYPAD_ENTER_Pin|GLITCH_SWITCH_Pin;
 80008fc:	2323      	movs	r3, #35	@ 0x23
 80008fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000900:	2300      	movs	r3, #0
 8000902:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	4619      	mov	r1, r3
 800090e:	4825      	ldr	r0, [pc, #148]	@ (80009a4 <MX_GPIO_Init+0x1e0>)
 8000910:	f001 fee8 	bl	80026e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_MODE_Pin;
 8000914:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800091a:	2311      	movs	r3, #17
 800091c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_MODE_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	4619      	mov	r1, r3
 800092c:	481d      	ldr	r0, [pc, #116]	@ (80009a4 <MX_GPIO_Init+0x1e0>)
 800092e:	f001 fed9 	bl	80026e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CAN_ID_SWITCH_1_Pin|CAN_ID_SWITCH_2_Pin|CAN_ID_SWITCH_3_Pin|MUTE_SWITCH_Pin;
 8000932:	f44f 63b8 	mov.w	r3, #1472	@ 0x5c0
 8000936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000938:	2300      	movs	r3, #0
 800093a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	4619      	mov	r1, r3
 8000946:	4815      	ldr	r0, [pc, #84]	@ (800099c <MX_GPIO_Init+0x1d8>)
 8000948:	f001 fecc 	bl	80026e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TIME_TRAVEL_SIM_Pin;
 800094c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000952:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000956:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TIME_TRAVEL_SIM_GPIO_Port, &GPIO_InitStruct);
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4619      	mov	r1, r3
 8000962:	480e      	ldr	r0, [pc, #56]	@ (800099c <MX_GPIO_Init+0x1d8>)
 8000964:	f001 febe 	bl	80026e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INTERRUPT_Pin;
 8000968:	2304      	movs	r3, #4
 800096a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096c:	2300      	movs	r3, #0
 800096e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4619      	mov	r1, r3
 800097a:	480b      	ldr	r0, [pc, #44]	@ (80009a8 <MX_GPIO_Init+0x1e4>)
 800097c:	f001 feb2 	bl	80026e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000980:	2200      	movs	r2, #0
 8000982:	2100      	movs	r1, #0
 8000984:	2028      	movs	r0, #40	@ 0x28
 8000986:	f001 fa96 	bl	8001eb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800098a:	2028      	movs	r0, #40	@ 0x28
 800098c:	f001 faaf 	bl	8001eee <HAL_NVIC_EnableIRQ>

}
 8000990:	bf00      	nop
 8000992:	3728      	adds	r7, #40	@ 0x28
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40023800 	.word	0x40023800
 800099c:	40020800 	.word	0x40020800
 80009a0:	40020000 	.word	0x40020000
 80009a4:	40020400 	.word	0x40020400
 80009a8:	40020c00 	.word	0x40020c00

080009ac <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009b0:	4b12      	ldr	r3, [pc, #72]	@ (80009fc <MX_I2C1_Init+0x50>)
 80009b2:	4a13      	ldr	r2, [pc, #76]	@ (8000a00 <MX_I2C1_Init+0x54>)
 80009b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009b6:	4b11      	ldr	r3, [pc, #68]	@ (80009fc <MX_I2C1_Init+0x50>)
 80009b8:	4a12      	ldr	r2, [pc, #72]	@ (8000a04 <MX_I2C1_Init+0x58>)
 80009ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	@ (80009fc <MX_I2C1_Init+0x50>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	@ (80009fc <MX_I2C1_Init+0x50>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	@ (80009fc <MX_I2C1_Init+0x50>)
 80009ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009d0:	4b0a      	ldr	r3, [pc, #40]	@ (80009fc <MX_I2C1_Init+0x50>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009d6:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <MX_I2C1_Init+0x50>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009dc:	4b07      	ldr	r3, [pc, #28]	@ (80009fc <MX_I2C1_Init+0x50>)
 80009de:	2200      	movs	r2, #0
 80009e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009e2:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <MX_I2C1_Init+0x50>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009e8:	4804      	ldr	r0, [pc, #16]	@ (80009fc <MX_I2C1_Init+0x50>)
 80009ea:	f002 f86d 	bl	8002ac8 <HAL_I2C_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009f4:	f000 faa6 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	2000010c 	.word	0x2000010c
 8000a00:	40005400 	.word	0x40005400
 8000a04:	000186a0 	.word	0x000186a0

08000a08 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a0c:	4b12      	ldr	r3, [pc, #72]	@ (8000a58 <MX_I2C2_Init+0x50>)
 8000a0e:	4a13      	ldr	r2, [pc, #76]	@ (8000a5c <MX_I2C2_Init+0x54>)
 8000a10:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a12:	4b11      	ldr	r3, [pc, #68]	@ (8000a58 <MX_I2C2_Init+0x50>)
 8000a14:	4a12      	ldr	r2, [pc, #72]	@ (8000a60 <MX_I2C2_Init+0x58>)
 8000a16:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	@ (8000a58 <MX_I2C2_Init+0x50>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a58 <MX_I2C2_Init+0x50>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <MX_I2C2_Init+0x50>)
 8000a26:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a2a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a58 <MX_I2C2_Init+0x50>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a32:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <MX_I2C2_Init+0x50>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a38:	4b07      	ldr	r3, [pc, #28]	@ (8000a58 <MX_I2C2_Init+0x50>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a3e:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <MX_I2C2_Init+0x50>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a44:	4804      	ldr	r0, [pc, #16]	@ (8000a58 <MX_I2C2_Init+0x50>)
 8000a46:	f002 f83f 	bl	8002ac8 <HAL_I2C_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a50:	f000 fa78 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000160 	.word	0x20000160
 8000a5c:	40005800 	.word	0x40005800
 8000a60:	000186a0 	.word	0x000186a0

08000a64 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a68:	4b12      	ldr	r3, [pc, #72]	@ (8000ab4 <MX_I2C3_Init+0x50>)
 8000a6a:	4a13      	ldr	r2, [pc, #76]	@ (8000ab8 <MX_I2C3_Init+0x54>)
 8000a6c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000a6e:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <MX_I2C3_Init+0x50>)
 8000a70:	4a12      	ldr	r2, [pc, #72]	@ (8000abc <MX_I2C3_Init+0x58>)
 8000a72:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab4 <MX_I2C3_Init+0x50>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab4 <MX_I2C3_Init+0x50>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab4 <MX_I2C3_Init+0x50>)
 8000a82:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a86:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a88:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab4 <MX_I2C3_Init+0x50>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000a8e:	4b09      	ldr	r3, [pc, #36]	@ (8000ab4 <MX_I2C3_Init+0x50>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a94:	4b07      	ldr	r3, [pc, #28]	@ (8000ab4 <MX_I2C3_Init+0x50>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a9a:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <MX_I2C3_Init+0x50>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000aa0:	4804      	ldr	r0, [pc, #16]	@ (8000ab4 <MX_I2C3_Init+0x50>)
 8000aa2:	f002 f811 	bl	8002ac8 <HAL_I2C_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000aac:	f000 fa4a 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	200001b4 	.word	0x200001b4
 8000ab8:	40005c00 	.word	0x40005c00
 8000abc:	000186a0 	.word	0x000186a0

08000ac0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08e      	sub	sp, #56	@ 0x38
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a5b      	ldr	r2, [pc, #364]	@ (8000c4c <HAL_I2C_MspInit+0x18c>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d12c      	bne.n	8000b3c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	623b      	str	r3, [r7, #32]
 8000ae6:	4b5a      	ldr	r3, [pc, #360]	@ (8000c50 <HAL_I2C_MspInit+0x190>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	4a59      	ldr	r2, [pc, #356]	@ (8000c50 <HAL_I2C_MspInit+0x190>)
 8000aec:	f043 0302 	orr.w	r3, r3, #2
 8000af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af2:	4b57      	ldr	r3, [pc, #348]	@ (8000c50 <HAL_I2C_MspInit+0x190>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	f003 0302 	and.w	r3, r3, #2
 8000afa:	623b      	str	r3, [r7, #32]
 8000afc:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 8000afe:	23c0      	movs	r3, #192	@ 0xc0
 8000b00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b02:	2312      	movs	r3, #18
 8000b04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b0e:	2304      	movs	r3, #4
 8000b10:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b16:	4619      	mov	r1, r3
 8000b18:	484e      	ldr	r0, [pc, #312]	@ (8000c54 <HAL_I2C_MspInit+0x194>)
 8000b1a:	f001 fde3 	bl	80026e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
 8000b22:	4b4b      	ldr	r3, [pc, #300]	@ (8000c50 <HAL_I2C_MspInit+0x190>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b26:	4a4a      	ldr	r2, [pc, #296]	@ (8000c50 <HAL_I2C_MspInit+0x190>)
 8000b28:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b2e:	4b48      	ldr	r3, [pc, #288]	@ (8000c50 <HAL_I2C_MspInit+0x190>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b36:	61fb      	str	r3, [r7, #28]
 8000b38:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000b3a:	e083      	b.n	8000c44 <HAL_I2C_MspInit+0x184>
  else if(i2cHandle->Instance==I2C2)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a45      	ldr	r2, [pc, #276]	@ (8000c58 <HAL_I2C_MspInit+0x198>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d12d      	bne.n	8000ba2 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	61bb      	str	r3, [r7, #24]
 8000b4a:	4b41      	ldr	r3, [pc, #260]	@ (8000c50 <HAL_I2C_MspInit+0x190>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	4a40      	ldr	r2, [pc, #256]	@ (8000c50 <HAL_I2C_MspInit+0x190>)
 8000b50:	f043 0302 	orr.w	r3, r3, #2
 8000b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b56:	4b3e      	ldr	r3, [pc, #248]	@ (8000c50 <HAL_I2C_MspInit+0x190>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	f003 0302 	and.w	r3, r3, #2
 8000b5e:	61bb      	str	r3, [r7, #24]
 8000b60:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b62:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000b66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b68:	2312      	movs	r3, #18
 8000b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b70:	2303      	movs	r3, #3
 8000b72:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b74:	2304      	movs	r3, #4
 8000b76:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4835      	ldr	r0, [pc, #212]	@ (8000c54 <HAL_I2C_MspInit+0x194>)
 8000b80:	f001 fdb0 	bl	80026e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	4b31      	ldr	r3, [pc, #196]	@ (8000c50 <HAL_I2C_MspInit+0x190>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8c:	4a30      	ldr	r2, [pc, #192]	@ (8000c50 <HAL_I2C_MspInit+0x190>)
 8000b8e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b94:	4b2e      	ldr	r3, [pc, #184]	@ (8000c50 <HAL_I2C_MspInit+0x190>)
 8000b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b9c:	617b      	str	r3, [r7, #20]
 8000b9e:	697b      	ldr	r3, [r7, #20]
}
 8000ba0:	e050      	b.n	8000c44 <HAL_I2C_MspInit+0x184>
  else if(i2cHandle->Instance==I2C3)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a2d      	ldr	r2, [pc, #180]	@ (8000c5c <HAL_I2C_MspInit+0x19c>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d14b      	bne.n	8000c44 <HAL_I2C_MspInit+0x184>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bac:	2300      	movs	r3, #0
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	4b27      	ldr	r3, [pc, #156]	@ (8000c50 <HAL_I2C_MspInit+0x190>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb4:	4a26      	ldr	r2, [pc, #152]	@ (8000c50 <HAL_I2C_MspInit+0x190>)
 8000bb6:	f043 0304 	orr.w	r3, r3, #4
 8000bba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bbc:	4b24      	ldr	r3, [pc, #144]	@ (8000c50 <HAL_I2C_MspInit+0x190>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc0:	f003 0304 	and.w	r3, r3, #4
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	4b20      	ldr	r3, [pc, #128]	@ (8000c50 <HAL_I2C_MspInit+0x190>)
 8000bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd0:	4a1f      	ldr	r2, [pc, #124]	@ (8000c50 <HAL_I2C_MspInit+0x190>)
 8000bd2:	f043 0301 	orr.w	r3, r3, #1
 8000bd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c50 <HAL_I2C_MspInit+0x190>)
 8000bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bdc:	f003 0301 	and.w	r3, r3, #1
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TC_DISPLAY_SDA_Pin;
 8000be4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000be8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bea:	2312      	movs	r3, #18
 8000bec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bf6:	2304      	movs	r3, #4
 8000bf8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(TC_DISPLAY_SDA_GPIO_Port, &GPIO_InitStruct);
 8000bfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4817      	ldr	r0, [pc, #92]	@ (8000c60 <HAL_I2C_MspInit+0x1a0>)
 8000c02:	f001 fd6f 	bl	80026e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TC_DISPLAY_SCL_Pin;
 8000c06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c0c:	2312      	movs	r3, #18
 8000c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c14:	2303      	movs	r3, #3
 8000c16:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c18:	2304      	movs	r3, #4
 8000c1a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(TC_DISPLAY_SCL_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c20:	4619      	mov	r1, r3
 8000c22:	4810      	ldr	r0, [pc, #64]	@ (8000c64 <HAL_I2C_MspInit+0x1a4>)
 8000c24:	f001 fd5e 	bl	80026e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	4b08      	ldr	r3, [pc, #32]	@ (8000c50 <HAL_I2C_MspInit+0x190>)
 8000c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c30:	4a07      	ldr	r2, [pc, #28]	@ (8000c50 <HAL_I2C_MspInit+0x190>)
 8000c32:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000c36:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c38:	4b05      	ldr	r3, [pc, #20]	@ (8000c50 <HAL_I2C_MspInit+0x190>)
 8000c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	68bb      	ldr	r3, [r7, #8]
}
 8000c44:	bf00      	nop
 8000c46:	3738      	adds	r7, #56	@ 0x38
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40005400 	.word	0x40005400
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40020400 	.word	0x40020400
 8000c58:	40005800 	.word	0x40005800
 8000c5c:	40005c00 	.word	0x40005c00
 8000c60:	40020800 	.word	0x40020800
 8000c64:	40020000 	.word	0x40020000

08000c68 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000c6c:	4b13      	ldr	r3, [pc, #76]	@ (8000cbc <MX_I2S2_Init+0x54>)
 8000c6e:	4a14      	ldr	r2, [pc, #80]	@ (8000cc0 <MX_I2S2_Init+0x58>)
 8000c70:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000c72:	4b12      	ldr	r3, [pc, #72]	@ (8000cbc <MX_I2S2_Init+0x54>)
 8000c74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c78:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000c7a:	4b10      	ldr	r3, [pc, #64]	@ (8000cbc <MX_I2S2_Init+0x54>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000c80:	4b0e      	ldr	r3, [pc, #56]	@ (8000cbc <MX_I2S2_Init+0x54>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000c86:	4b0d      	ldr	r3, [pc, #52]	@ (8000cbc <MX_I2S2_Init+0x54>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000cbc <MX_I2S2_Init+0x54>)
 8000c8e:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000c92:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000c94:	4b09      	ldr	r3, [pc, #36]	@ (8000cbc <MX_I2S2_Init+0x54>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000c9a:	4b08      	ldr	r3, [pc, #32]	@ (8000cbc <MX_I2S2_Init+0x54>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <MX_I2S2_Init+0x54>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000ca6:	4805      	ldr	r0, [pc, #20]	@ (8000cbc <MX_I2S2_Init+0x54>)
 8000ca8:	f002 ff08 	bl	8003abc <HAL_I2S_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000cb2:	f000 f947 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000208 	.word	0x20000208
 8000cc0:	40003800 	.word	0x40003800

08000cc4 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08e      	sub	sp, #56	@ 0x38
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI2)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a3e      	ldr	r2, [pc, #248]	@ (8000de8 <HAL_I2S_MspInit+0x124>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d175      	bne.n	8000de0 <HAL_I2S_MspInit+0x11c>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 96;
 8000cf8:	2360      	movs	r3, #96	@ 0x60
 8000cfa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	4618      	mov	r0, r3
 8000d06:	f004 fb13 	bl	8005330 <HAL_RCCEx_PeriphCLKConfig>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000d10:	f000 f918 	bl	8000f44 <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d14:	2300      	movs	r3, #0
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	4b34      	ldr	r3, [pc, #208]	@ (8000dec <HAL_I2S_MspInit+0x128>)
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1c:	4a33      	ldr	r2, [pc, #204]	@ (8000dec <HAL_I2S_MspInit+0x128>)
 8000d1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d22:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d24:	4b31      	ldr	r3, [pc, #196]	@ (8000dec <HAL_I2S_MspInit+0x128>)
 8000d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d30:	2300      	movs	r3, #0
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	4b2d      	ldr	r3, [pc, #180]	@ (8000dec <HAL_I2S_MspInit+0x128>)
 8000d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d38:	4a2c      	ldr	r2, [pc, #176]	@ (8000dec <HAL_I2S_MspInit+0x128>)
 8000d3a:	f043 0302 	orr.w	r3, r3, #2
 8000d3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d40:	4b2a      	ldr	r3, [pc, #168]	@ (8000dec <HAL_I2S_MspInit+0x128>)
 8000d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d44:	f003 0302 	and.w	r3, r3, #2
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000d4c:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8000d50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d5e:	2305      	movs	r3, #5
 8000d60:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d66:	4619      	mov	r1, r3
 8000d68:	4821      	ldr	r0, [pc, #132]	@ (8000df0 <HAL_I2S_MspInit+0x12c>)
 8000d6a:	f001 fcbb 	bl	80026e4 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000d6e:	4b21      	ldr	r3, [pc, #132]	@ (8000df4 <HAL_I2S_MspInit+0x130>)
 8000d70:	4a21      	ldr	r2, [pc, #132]	@ (8000df8 <HAL_I2S_MspInit+0x134>)
 8000d72:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000d74:	4b1f      	ldr	r3, [pc, #124]	@ (8000df4 <HAL_I2S_MspInit+0x130>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000df4 <HAL_I2S_MspInit+0x130>)
 8000d7c:	2240      	movs	r2, #64	@ 0x40
 8000d7e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d80:	4b1c      	ldr	r3, [pc, #112]	@ (8000df4 <HAL_I2S_MspInit+0x130>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d86:	4b1b      	ldr	r3, [pc, #108]	@ (8000df4 <HAL_I2S_MspInit+0x130>)
 8000d88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d8c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d8e:	4b19      	ldr	r3, [pc, #100]	@ (8000df4 <HAL_I2S_MspInit+0x130>)
 8000d90:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d94:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d96:	4b17      	ldr	r3, [pc, #92]	@ (8000df4 <HAL_I2S_MspInit+0x130>)
 8000d98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d9c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000d9e:	4b15      	ldr	r3, [pc, #84]	@ (8000df4 <HAL_I2S_MspInit+0x130>)
 8000da0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000da4:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000da6:	4b13      	ldr	r3, [pc, #76]	@ (8000df4 <HAL_I2S_MspInit+0x130>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000dac:	4b11      	ldr	r3, [pc, #68]	@ (8000df4 <HAL_I2S_MspInit+0x130>)
 8000dae:	2204      	movs	r2, #4
 8000db0:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000db2:	4b10      	ldr	r3, [pc, #64]	@ (8000df4 <HAL_I2S_MspInit+0x130>)
 8000db4:	2203      	movs	r2, #3
 8000db6:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000db8:	4b0e      	ldr	r3, [pc, #56]	@ (8000df4 <HAL_I2S_MspInit+0x130>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000df4 <HAL_I2S_MspInit+0x130>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000dc4:	480b      	ldr	r0, [pc, #44]	@ (8000df4 <HAL_I2S_MspInit+0x130>)
 8000dc6:	f001 f8ad 	bl	8001f24 <HAL_DMA_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <HAL_I2S_MspInit+0x110>
    {
      Error_Handler();
 8000dd0:	f000 f8b8 	bl	8000f44 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4a07      	ldr	r2, [pc, #28]	@ (8000df4 <HAL_I2S_MspInit+0x130>)
 8000dd8:	639a      	str	r2, [r3, #56]	@ 0x38
 8000dda:	4a06      	ldr	r2, [pc, #24]	@ (8000df4 <HAL_I2S_MspInit+0x130>)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000de0:	bf00      	nop
 8000de2:	3738      	adds	r7, #56	@ 0x38
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40003800 	.word	0x40003800
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40020400 	.word	0x40020400
 8000df4:	20000250 	.word	0x20000250
 8000df8:	40026070 	.word	0x40026070

08000dfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e02:	f000 fb89 	bl	8001518 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e06:	f000 f82b 	bl	8000e60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e0a:	f7ff fcdb 	bl	80007c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e0e:	f7ff fcb9 	bl	8000784 <MX_DMA_Init>
  MX_CAN1_Init();
 8000e12:	f7ff fc3b 	bl	800068c <MX_CAN1_Init>
  MX_I2C1_Init();
 8000e16:	f7ff fdc9 	bl	80009ac <MX_I2C1_Init>
  MX_I2C2_Init();
 8000e1a:	f7ff fdf5 	bl	8000a08 <MX_I2C2_Init>
  MX_I2S2_Init();
 8000e1e:	f7ff ff23 	bl	8000c68 <MX_I2S2_Init>
  MX_I2C3_Init();
 8000e22:	f7ff fe1f 	bl	8000a64 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8000e26:	f000 fadb 	bl	80013e0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000e2a:	f7ff fb99 	bl	8000560 <MX_ADC1_Init>
  MX_FATFS_Init();
 8000e2e:	f005 fde3 	bl	80069f8 <MX_FATFS_Init>
  MX_RTC_Init();
 8000e32:	f000 f88d 	bl	8000f50 <MX_RTC_Init>
  MX_SPI1_Init();
 8000e36:	f000 f913 	bl	8001060 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */


  TimeCircuit_Control_Config_t* ptimeCircuitControl  = timeCircuit_control_init(&hi2c3, &hrtc, &hspi1, &hi2s2);
 8000e3a:	4b05      	ldr	r3, [pc, #20]	@ (8000e50 <main+0x54>)
 8000e3c:	4a05      	ldr	r2, [pc, #20]	@ (8000e54 <main+0x58>)
 8000e3e:	4906      	ldr	r1, [pc, #24]	@ (8000e58 <main+0x5c>)
 8000e40:	4806      	ldr	r0, [pc, #24]	@ (8000e5c <main+0x60>)
 8000e42:	f007 fc39 	bl	80086b8 <timeCircuit_control_init>
 8000e46:	6078      	str	r0, [r7, #4]


  while (1)
  {

    timeCircuit_control_update(ptimeCircuitControl);
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f008 f949 	bl	80090e0 <timeCircuit_control_update>
 8000e4e:	e7fb      	b.n	8000e48 <main+0x4c>
 8000e50:	20000208 	.word	0x20000208
 8000e54:	200002d0 	.word	0x200002d0
 8000e58:	200002b0 	.word	0x200002b0
 8000e5c:	200001b4 	.word	0x200001b4

08000e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b094      	sub	sp, #80	@ 0x50
 8000e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e66:	f107 0320 	add.w	r3, r7, #32
 8000e6a:	2230      	movs	r2, #48	@ 0x30
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f00a fe93 	bl	800bb9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e74:	f107 030c 	add.w	r3, r7, #12
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(4);
 8000e84:	4b2d      	ldr	r3, [pc, #180]	@ (8000f3c <SystemClock_Config+0xdc>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000e8c:	4a2b      	ldr	r2, [pc, #172]	@ (8000f3c <SystemClock_Config+0xdc>)
 8000e8e:	f043 0304 	orr.w	r3, r3, #4
 8000e92:	6053      	str	r3, [r2, #4]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000e94:	4b29      	ldr	r3, [pc, #164]	@ (8000f3c <SystemClock_Config+0xdc>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	4a28      	ldr	r2, [pc, #160]	@ (8000f3c <SystemClock_Config+0xdc>)
 8000e9a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e9e:	6053      	str	r3, [r2, #4]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	4b25      	ldr	r3, [pc, #148]	@ (8000f3c <SystemClock_Config+0xdc>)
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea8:	4a24      	ldr	r2, [pc, #144]	@ (8000f3c <SystemClock_Config+0xdc>)
 8000eaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eae:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eb0:	4b22      	ldr	r3, [pc, #136]	@ (8000f3c <SystemClock_Config+0xdc>)
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f40 <SystemClock_Config+0xe0>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a1e      	ldr	r2, [pc, #120]	@ (8000f40 <SystemClock_Config+0xe0>)
 8000ec6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eca:	6013      	str	r3, [r2, #0]
 8000ecc:	4b1c      	ldr	r3, [pc, #112]	@ (8000f40 <SystemClock_Config+0xe0>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ed4:	607b      	str	r3, [r7, #4]
 8000ed6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000edc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ee0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ee6:	2310      	movs	r3, #16
 8000ee8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef4:	f107 0320 	add.w	r3, r7, #32
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f003 fd81 	bl	8004a00 <HAL_RCC_OscConfig>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000f04:	f000 f81e 	bl	8000f44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f08:	230f      	movs	r3, #15
 8000f0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f1e:	f107 030c 	add.w	r3, r7, #12
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f003 ffe3 	bl	8004ef0 <HAL_RCC_ClockConfig>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000f30:	f000 f808 	bl	8000f44 <Error_Handler>
  }
}
 8000f34:	bf00      	nop
 8000f36:	3750      	adds	r7, #80	@ 0x50
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40007000 	.word	0x40007000

08000f44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f48:	b672      	cpsid	i
}
 8000f4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f4c:	bf00      	nop
 8000f4e:	e7fd      	b.n	8000f4c <Error_Handler+0x8>

08000f50 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000f64:	2300      	movs	r3, #0
 8000f66:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f68:	4b25      	ldr	r3, [pc, #148]	@ (8001000 <MX_RTC_Init+0xb0>)
 8000f6a:	4a26      	ldr	r2, [pc, #152]	@ (8001004 <MX_RTC_Init+0xb4>)
 8000f6c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000f6e:	4b24      	ldr	r3, [pc, #144]	@ (8001000 <MX_RTC_Init+0xb0>)
 8000f70:	2240      	movs	r2, #64	@ 0x40
 8000f72:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 124;
 8000f74:	4b22      	ldr	r3, [pc, #136]	@ (8001000 <MX_RTC_Init+0xb0>)
 8000f76:	227c      	movs	r2, #124	@ 0x7c
 8000f78:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 7999;
 8000f7a:	4b21      	ldr	r3, [pc, #132]	@ (8001000 <MX_RTC_Init+0xb0>)
 8000f7c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000f80:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f82:	4b1f      	ldr	r3, [pc, #124]	@ (8001000 <MX_RTC_Init+0xb0>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f88:	4b1d      	ldr	r3, [pc, #116]	@ (8001000 <MX_RTC_Init+0xb0>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001000 <MX_RTC_Init+0xb0>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f94:	481a      	ldr	r0, [pc, #104]	@ (8001000 <MX_RTC_Init+0xb0>)
 8000f96:	f004 fb0d 	bl	80055b4 <HAL_RTC_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000fa0:	f7ff ffd0 	bl	8000f44 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	71bb      	strb	r3, [r7, #6]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	71fb      	strb	r3, [r7, #7]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	480f      	ldr	r0, [pc, #60]	@ (8001000 <MX_RTC_Init+0xb0>)
 8000fc4:	f004 fb79 	bl	80056ba <HAL_RTC_SetTime>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000fce:	f7ff ffb9 	bl	8000f44 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4805      	ldr	r0, [pc, #20]	@ (8001000 <MX_RTC_Init+0xb0>)
 8000fea:	f004 fc5e 	bl	80058aa <HAL_RTC_SetDate>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000ff4:	f7ff ffa6 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ff8:	bf00      	nop
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	200002b0 	.word	0x200002b0
 8001004:	40002800 	.word	0x40002800

08001008 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001010:	f107 0308 	add.w	r3, r7, #8
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a0c      	ldr	r2, [pc, #48]	@ (8001054 <HAL_RTC_MspInit+0x4c>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d110      	bne.n	800104a <HAL_RTC_MspInit+0x42>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001028:	2302      	movs	r3, #2
 800102a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV8;
 800102c:	4b0a      	ldr	r3, [pc, #40]	@ (8001058 <HAL_RTC_MspInit+0x50>)
 800102e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001030:	f107 0308 	add.w	r3, r7, #8
 8001034:	4618      	mov	r0, r3
 8001036:	f004 f97b 	bl	8005330 <HAL_RCCEx_PeriphCLKConfig>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <HAL_RTC_MspInit+0x3c>
    {
      Error_Handler();
 8001040:	f7ff ff80 	bl	8000f44 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001044:	4b05      	ldr	r3, [pc, #20]	@ (800105c <HAL_RTC_MspInit+0x54>)
 8001046:	2201      	movs	r2, #1
 8001048:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800104a:	bf00      	nop
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40002800 	.word	0x40002800
 8001058:	00080300 	.word	0x00080300
 800105c:	42470e3c 	.word	0x42470e3c

08001060 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001064:	4b17      	ldr	r3, [pc, #92]	@ (80010c4 <MX_SPI1_Init+0x64>)
 8001066:	4a18      	ldr	r2, [pc, #96]	@ (80010c8 <MX_SPI1_Init+0x68>)
 8001068:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800106a:	4b16      	ldr	r3, [pc, #88]	@ (80010c4 <MX_SPI1_Init+0x64>)
 800106c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001070:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001072:	4b14      	ldr	r3, [pc, #80]	@ (80010c4 <MX_SPI1_Init+0x64>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001078:	4b12      	ldr	r3, [pc, #72]	@ (80010c4 <MX_SPI1_Init+0x64>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800107e:	4b11      	ldr	r3, [pc, #68]	@ (80010c4 <MX_SPI1_Init+0x64>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001084:	4b0f      	ldr	r3, [pc, #60]	@ (80010c4 <MX_SPI1_Init+0x64>)
 8001086:	2200      	movs	r2, #0
 8001088:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800108a:	4b0e      	ldr	r3, [pc, #56]	@ (80010c4 <MX_SPI1_Init+0x64>)
 800108c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001090:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001092:	4b0c      	ldr	r3, [pc, #48]	@ (80010c4 <MX_SPI1_Init+0x64>)
 8001094:	2208      	movs	r2, #8
 8001096:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001098:	4b0a      	ldr	r3, [pc, #40]	@ (80010c4 <MX_SPI1_Init+0x64>)
 800109a:	2200      	movs	r2, #0
 800109c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800109e:	4b09      	ldr	r3, [pc, #36]	@ (80010c4 <MX_SPI1_Init+0x64>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010a4:	4b07      	ldr	r3, [pc, #28]	@ (80010c4 <MX_SPI1_Init+0x64>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010aa:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <MX_SPI1_Init+0x64>)
 80010ac:	220a      	movs	r2, #10
 80010ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010b0:	4804      	ldr	r0, [pc, #16]	@ (80010c4 <MX_SPI1_Init+0x64>)
 80010b2:	f004 fd8b 	bl	8005bcc <HAL_SPI_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010bc:	f7ff ff42 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	200002d0 	.word	0x200002d0
 80010c8:	40013000 	.word	0x40013000

080010cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	@ 0x28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a19      	ldr	r2, [pc, #100]	@ (8001150 <HAL_SPI_MspInit+0x84>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d12b      	bne.n	8001146 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]
 80010f2:	4b18      	ldr	r3, [pc, #96]	@ (8001154 <HAL_SPI_MspInit+0x88>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f6:	4a17      	ldr	r2, [pc, #92]	@ (8001154 <HAL_SPI_MspInit+0x88>)
 80010f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80010fe:	4b15      	ldr	r3, [pc, #84]	@ (8001154 <HAL_SPI_MspInit+0x88>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001102:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <HAL_SPI_MspInit+0x88>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	4a10      	ldr	r2, [pc, #64]	@ (8001154 <HAL_SPI_MspInit+0x88>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	6313      	str	r3, [r2, #48]	@ 0x30
 800111a:	4b0e      	ldr	r3, [pc, #56]	@ (8001154 <HAL_SPI_MspInit+0x88>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001126:	23e0      	movs	r3, #224	@ 0xe0
 8001128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112a:	2302      	movs	r3, #2
 800112c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001132:	2303      	movs	r3, #3
 8001134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001136:	2305      	movs	r3, #5
 8001138:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	4619      	mov	r1, r3
 8001140:	4805      	ldr	r0, [pc, #20]	@ (8001158 <HAL_SPI_MspInit+0x8c>)
 8001142:	f001 facf 	bl	80026e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001146:	bf00      	nop
 8001148:	3728      	adds	r7, #40	@ 0x28
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40013000 	.word	0x40013000
 8001154:	40023800 	.word	0x40023800
 8001158:	40020000 	.word	0x40020000

0800115c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	4b10      	ldr	r3, [pc, #64]	@ (80011a8 <HAL_MspInit+0x4c>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800116a:	4a0f      	ldr	r2, [pc, #60]	@ (80011a8 <HAL_MspInit+0x4c>)
 800116c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001170:	6453      	str	r3, [r2, #68]	@ 0x44
 8001172:	4b0d      	ldr	r3, [pc, #52]	@ (80011a8 <HAL_MspInit+0x4c>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001176:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	603b      	str	r3, [r7, #0]
 8001182:	4b09      	ldr	r3, [pc, #36]	@ (80011a8 <HAL_MspInit+0x4c>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001186:	4a08      	ldr	r2, [pc, #32]	@ (80011a8 <HAL_MspInit+0x4c>)
 8001188:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800118c:	6413      	str	r3, [r2, #64]	@ 0x40
 800118e:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <HAL_MspInit+0x4c>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001192:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800

080011ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011b0:	bf00      	nop
 80011b2:	e7fd      	b.n	80011b0 <NMI_Handler+0x4>

080011b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b8:	bf00      	nop
 80011ba:	e7fd      	b.n	80011b8 <HardFault_Handler+0x4>

080011bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c0:	bf00      	nop
 80011c2:	e7fd      	b.n	80011c0 <MemManage_Handler+0x4>

080011c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <BusFault_Handler+0x4>

080011cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <UsageFault_Handler+0x4>

080011d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001202:	f000 f9db 	bl	80015bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001210:	4802      	ldr	r0, [pc, #8]	@ (800121c <DMA1_Stream4_IRQHandler+0x10>)
 8001212:	f000 fffd 	bl	8002210 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000250 	.word	0x20000250

08001220 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TIME_TRAVEL_SIM_Pin);
 8001224:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001228:	f001 fc2a 	bl	8002a80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}

08001230 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
	return 1;
 8001234:	2301      	movs	r3, #1
}
 8001236:	4618      	mov	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <_kill>:

int _kill(int pid, int sig)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800124a:	f00a fd05 	bl	800bc58 <__errno>
 800124e:	4603      	mov	r3, r0
 8001250:	2216      	movs	r2, #22
 8001252:	601a      	str	r2, [r3, #0]
	return -1;
 8001254:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001258:	4618      	mov	r0, r3
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <_exit>:

void _exit (int status)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001268:	f04f 31ff 	mov.w	r1, #4294967295
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ffe7 	bl	8001240 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001272:	bf00      	nop
 8001274:	e7fd      	b.n	8001272 <_exit+0x12>

08001276 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	60f8      	str	r0, [r7, #12]
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	e00a      	b.n	800129e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001288:	f3af 8000 	nop.w
 800128c:	4601      	mov	r1, r0
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	1c5a      	adds	r2, r3, #1
 8001292:	60ba      	str	r2, [r7, #8]
 8001294:	b2ca      	uxtb	r2, r1
 8001296:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	3301      	adds	r3, #1
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	697a      	ldr	r2, [r7, #20]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	dbf0      	blt.n	8001288 <_read+0x12>
	}

return len;
 80012a6:	687b      	ldr	r3, [r7, #4]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3718      	adds	r7, #24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	e009      	b.n	80012d6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	1c5a      	adds	r2, r3, #1
 80012c6:	60ba      	str	r2, [r7, #8]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	3301      	adds	r3, #1
 80012d4:	617b      	str	r3, [r7, #20]
 80012d6:	697a      	ldr	r2, [r7, #20]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	429a      	cmp	r2, r3
 80012dc:	dbf1      	blt.n	80012c2 <_write+0x12>
	}
	return len;
 80012de:	687b      	ldr	r3, [r7, #4]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <_close>:

int _close(int file)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	return -1;
 80012f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001310:	605a      	str	r2, [r3, #4]
	return 0;
 8001312:	2300      	movs	r3, #0
}
 8001314:	4618      	mov	r0, r3
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <_isatty>:

int _isatty(int file)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	return 1;
 8001328:	2301      	movs	r3, #1
}
 800132a:	4618      	mov	r0, r3
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001336:	b480      	push	{r7}
 8001338:	b085      	sub	sp, #20
 800133a:	af00      	add	r7, sp, #0
 800133c:	60f8      	str	r0, [r7, #12]
 800133e:	60b9      	str	r1, [r7, #8]
 8001340:	607a      	str	r2, [r7, #4]
	return 0;
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001358:	4a14      	ldr	r2, [pc, #80]	@ (80013ac <_sbrk+0x5c>)
 800135a:	4b15      	ldr	r3, [pc, #84]	@ (80013b0 <_sbrk+0x60>)
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001364:	4b13      	ldr	r3, [pc, #76]	@ (80013b4 <_sbrk+0x64>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d102      	bne.n	8001372 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800136c:	4b11      	ldr	r3, [pc, #68]	@ (80013b4 <_sbrk+0x64>)
 800136e:	4a12      	ldr	r2, [pc, #72]	@ (80013b8 <_sbrk+0x68>)
 8001370:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001372:	4b10      	ldr	r3, [pc, #64]	@ (80013b4 <_sbrk+0x64>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	429a      	cmp	r2, r3
 800137e:	d207      	bcs.n	8001390 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001380:	f00a fc6a 	bl	800bc58 <__errno>
 8001384:	4603      	mov	r3, r0
 8001386:	220c      	movs	r2, #12
 8001388:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800138a:	f04f 33ff 	mov.w	r3, #4294967295
 800138e:	e009      	b.n	80013a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001390:	4b08      	ldr	r3, [pc, #32]	@ (80013b4 <_sbrk+0x64>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001396:	4b07      	ldr	r3, [pc, #28]	@ (80013b4 <_sbrk+0x64>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4413      	add	r3, r2
 800139e:	4a05      	ldr	r2, [pc, #20]	@ (80013b4 <_sbrk+0x64>)
 80013a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013a2:	68fb      	ldr	r3, [r7, #12]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20020000 	.word	0x20020000
 80013b0:	00000400 	.word	0x00000400
 80013b4:	20000328 	.word	0x20000328
 80013b8:	200043d0 	.word	0x200043d0

080013bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013c0:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <SystemInit+0x20>)
 80013c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013c6:	4a05      	ldr	r2, [pc, #20]	@ (80013dc <SystemInit+0x20>)
 80013c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013e4:	4b11      	ldr	r3, [pc, #68]	@ (800142c <MX_USART1_UART_Init+0x4c>)
 80013e6:	4a12      	ldr	r2, [pc, #72]	@ (8001430 <MX_USART1_UART_Init+0x50>)
 80013e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013ea:	4b10      	ldr	r3, [pc, #64]	@ (800142c <MX_USART1_UART_Init+0x4c>)
 80013ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013f2:	4b0e      	ldr	r3, [pc, #56]	@ (800142c <MX_USART1_UART_Init+0x4c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013f8:	4b0c      	ldr	r3, [pc, #48]	@ (800142c <MX_USART1_UART_Init+0x4c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013fe:	4b0b      	ldr	r3, [pc, #44]	@ (800142c <MX_USART1_UART_Init+0x4c>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001404:	4b09      	ldr	r3, [pc, #36]	@ (800142c <MX_USART1_UART_Init+0x4c>)
 8001406:	220c      	movs	r2, #12
 8001408:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800140a:	4b08      	ldr	r3, [pc, #32]	@ (800142c <MX_USART1_UART_Init+0x4c>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001410:	4b06      	ldr	r3, [pc, #24]	@ (800142c <MX_USART1_UART_Init+0x4c>)
 8001412:	2200      	movs	r2, #0
 8001414:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001416:	4805      	ldr	r0, [pc, #20]	@ (800142c <MX_USART1_UART_Init+0x4c>)
 8001418:	f005 f82a 	bl	8006470 <HAL_UART_Init>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001422:	f7ff fd8f 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	2000032c 	.word	0x2000032c
 8001430:	40011000 	.word	0x40011000

08001434 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08a      	sub	sp, #40	@ 0x28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a19      	ldr	r2, [pc, #100]	@ (80014b8 <HAL_UART_MspInit+0x84>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d12c      	bne.n	80014b0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	4b18      	ldr	r3, [pc, #96]	@ (80014bc <HAL_UART_MspInit+0x88>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800145e:	4a17      	ldr	r2, [pc, #92]	@ (80014bc <HAL_UART_MspInit+0x88>)
 8001460:	f043 0310 	orr.w	r3, r3, #16
 8001464:	6453      	str	r3, [r2, #68]	@ 0x44
 8001466:	4b15      	ldr	r3, [pc, #84]	@ (80014bc <HAL_UART_MspInit+0x88>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146a:	f003 0310 	and.w	r3, r3, #16
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	4b11      	ldr	r3, [pc, #68]	@ (80014bc <HAL_UART_MspInit+0x88>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	4a10      	ldr	r2, [pc, #64]	@ (80014bc <HAL_UART_MspInit+0x88>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6313      	str	r3, [r2, #48]	@ 0x30
 8001482:	4b0e      	ldr	r3, [pc, #56]	@ (80014bc <HAL_UART_MspInit+0x88>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800148e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001494:	2302      	movs	r3, #2
 8001496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149c:	2303      	movs	r3, #3
 800149e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014a0:	2307      	movs	r3, #7
 80014a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	4619      	mov	r1, r3
 80014aa:	4805      	ldr	r0, [pc, #20]	@ (80014c0 <HAL_UART_MspInit+0x8c>)
 80014ac:	f001 f91a 	bl	80026e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80014b0:	bf00      	nop
 80014b2:	3728      	adds	r7, #40	@ 0x28
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40011000 	.word	0x40011000
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40020000 	.word	0x40020000

080014c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014c8:	480d      	ldr	r0, [pc, #52]	@ (8001500 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014ca:	490e      	ldr	r1, [pc, #56]	@ (8001504 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014cc:	4a0e      	ldr	r2, [pc, #56]	@ (8001508 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d0:	e002      	b.n	80014d8 <LoopCopyDataInit>

080014d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014d6:	3304      	adds	r3, #4

080014d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014dc:	d3f9      	bcc.n	80014d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014de:	4a0b      	ldr	r2, [pc, #44]	@ (800150c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014e0:	4c0b      	ldr	r4, [pc, #44]	@ (8001510 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014e4:	e001      	b.n	80014ea <LoopFillZerobss>

080014e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e8:	3204      	adds	r2, #4

080014ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014ec:	d3fb      	bcc.n	80014e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014ee:	f7ff ff65 	bl	80013bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014f2:	f00a fbb7 	bl	800bc64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014f6:	f7ff fc81 	bl	8000dfc <main>
  bx  lr    
 80014fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001504:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001508:	0800cdf0 	.word	0x0800cdf0
  ldr r2, =_sbss
 800150c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001510:	200043d0 	.word	0x200043d0

08001514 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001514:	e7fe      	b.n	8001514 <ADC_IRQHandler>
	...

08001518 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800151c:	4b0e      	ldr	r3, [pc, #56]	@ (8001558 <HAL_Init+0x40>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a0d      	ldr	r2, [pc, #52]	@ (8001558 <HAL_Init+0x40>)
 8001522:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001526:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001528:	4b0b      	ldr	r3, [pc, #44]	@ (8001558 <HAL_Init+0x40>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a0a      	ldr	r2, [pc, #40]	@ (8001558 <HAL_Init+0x40>)
 800152e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001532:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001534:	4b08      	ldr	r3, [pc, #32]	@ (8001558 <HAL_Init+0x40>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a07      	ldr	r2, [pc, #28]	@ (8001558 <HAL_Init+0x40>)
 800153a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800153e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001540:	2003      	movs	r0, #3
 8001542:	f000 fcad 	bl	8001ea0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001546:	200f      	movs	r0, #15
 8001548:	f000 f808 	bl	800155c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800154c:	f7ff fe06 	bl	800115c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40023c00 	.word	0x40023c00

0800155c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001564:	4b12      	ldr	r3, [pc, #72]	@ (80015b0 <HAL_InitTick+0x54>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4b12      	ldr	r3, [pc, #72]	@ (80015b4 <HAL_InitTick+0x58>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	4619      	mov	r1, r3
 800156e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001572:	fbb3 f3f1 	udiv	r3, r3, r1
 8001576:	fbb2 f3f3 	udiv	r3, r2, r3
 800157a:	4618      	mov	r0, r3
 800157c:	f000 fcc5 	bl	8001f0a <HAL_SYSTICK_Config>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e00e      	b.n	80015a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b0f      	cmp	r3, #15
 800158e:	d80a      	bhi.n	80015a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001590:	2200      	movs	r2, #0
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	f04f 30ff 	mov.w	r0, #4294967295
 8001598:	f000 fc8d 	bl	8001eb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800159c:	4a06      	ldr	r2, [pc, #24]	@ (80015b8 <HAL_InitTick+0x5c>)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015a2:	2300      	movs	r3, #0
 80015a4:	e000      	b.n	80015a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000000 	.word	0x20000000
 80015b4:	20000008 	.word	0x20000008
 80015b8:	20000004 	.word	0x20000004

080015bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015c0:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <HAL_IncTick+0x20>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	461a      	mov	r2, r3
 80015c6:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <HAL_IncTick+0x24>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4413      	add	r3, r2
 80015cc:	4a04      	ldr	r2, [pc, #16]	@ (80015e0 <HAL_IncTick+0x24>)
 80015ce:	6013      	str	r3, [r2, #0]
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	20000008 	.word	0x20000008
 80015e0:	20000374 	.word	0x20000374

080015e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return uwTick;
 80015e8:	4b03      	ldr	r3, [pc, #12]	@ (80015f8 <HAL_GetTick+0x14>)
 80015ea:	681b      	ldr	r3, [r3, #0]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	20000374 	.word	0x20000374

080015fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001604:	f7ff ffee 	bl	80015e4 <HAL_GetTick>
 8001608:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001614:	d005      	beq.n	8001622 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001616:	4b0a      	ldr	r3, [pc, #40]	@ (8001640 <HAL_Delay+0x44>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	461a      	mov	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4413      	add	r3, r2
 8001620:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001622:	bf00      	nop
 8001624:	f7ff ffde 	bl	80015e4 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	429a      	cmp	r2, r3
 8001632:	d8f7      	bhi.n	8001624 <HAL_Delay+0x28>
  {
  }
}
 8001634:	bf00      	nop
 8001636:	bf00      	nop
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000008 	.word	0x20000008

08001644 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800164c:	2300      	movs	r3, #0
 800164e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e033      	b.n	80016c2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165e:	2b00      	cmp	r3, #0
 8001660:	d109      	bne.n	8001676 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7fe ffce 	bl	8000604 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167a:	f003 0310 	and.w	r3, r3, #16
 800167e:	2b00      	cmp	r3, #0
 8001680:	d118      	bne.n	80016b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001686:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800168a:	f023 0302 	bic.w	r3, r3, #2
 800168e:	f043 0202 	orr.w	r2, r3, #2
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 f93a 	bl	8001910 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a6:	f023 0303 	bic.w	r3, r3, #3
 80016aa:	f043 0201 	orr.w	r2, r3, #1
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80016b2:	e001      	b.n	80016b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d101      	bne.n	80016e8 <HAL_ADC_ConfigChannel+0x1c>
 80016e4:	2302      	movs	r3, #2
 80016e6:	e105      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x228>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b09      	cmp	r3, #9
 80016f6:	d925      	bls.n	8001744 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	68d9      	ldr	r1, [r3, #12]
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	b29b      	uxth	r3, r3
 8001704:	461a      	mov	r2, r3
 8001706:	4613      	mov	r3, r2
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	4413      	add	r3, r2
 800170c:	3b1e      	subs	r3, #30
 800170e:	2207      	movs	r2, #7
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43da      	mvns	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	400a      	ands	r2, r1
 800171c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	68d9      	ldr	r1, [r3, #12]
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	b29b      	uxth	r3, r3
 800172e:	4618      	mov	r0, r3
 8001730:	4603      	mov	r3, r0
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	4403      	add	r3, r0
 8001736:	3b1e      	subs	r3, #30
 8001738:	409a      	lsls	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	430a      	orrs	r2, r1
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	e022      	b.n	800178a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6919      	ldr	r1, [r3, #16]
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	b29b      	uxth	r3, r3
 8001750:	461a      	mov	r2, r3
 8001752:	4613      	mov	r3, r2
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	4413      	add	r3, r2
 8001758:	2207      	movs	r2, #7
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43da      	mvns	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	400a      	ands	r2, r1
 8001766:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6919      	ldr	r1, [r3, #16]
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	b29b      	uxth	r3, r3
 8001778:	4618      	mov	r0, r3
 800177a:	4603      	mov	r3, r0
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4403      	add	r3, r0
 8001780:	409a      	lsls	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	430a      	orrs	r2, r1
 8001788:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b06      	cmp	r3, #6
 8001790:	d824      	bhi.n	80017dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	3b05      	subs	r3, #5
 80017a4:	221f      	movs	r2, #31
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43da      	mvns	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	400a      	ands	r2, r1
 80017b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	b29b      	uxth	r3, r3
 80017c0:	4618      	mov	r0, r3
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	3b05      	subs	r3, #5
 80017ce:	fa00 f203 	lsl.w	r2, r0, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	430a      	orrs	r2, r1
 80017d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80017da:	e04c      	b.n	8001876 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2b0c      	cmp	r3, #12
 80017e2:	d824      	bhi.n	800182e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	3b23      	subs	r3, #35	@ 0x23
 80017f6:	221f      	movs	r2, #31
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43da      	mvns	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	400a      	ands	r2, r1
 8001804:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	b29b      	uxth	r3, r3
 8001812:	4618      	mov	r0, r3
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	4613      	mov	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	3b23      	subs	r3, #35	@ 0x23
 8001820:	fa00 f203 	lsl.w	r2, r0, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	430a      	orrs	r2, r1
 800182a:	631a      	str	r2, [r3, #48]	@ 0x30
 800182c:	e023      	b.n	8001876 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	3b41      	subs	r3, #65	@ 0x41
 8001840:	221f      	movs	r2, #31
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43da      	mvns	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	400a      	ands	r2, r1
 800184e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	b29b      	uxth	r3, r3
 800185c:	4618      	mov	r0, r3
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	3b41      	subs	r3, #65	@ 0x41
 800186a:	fa00 f203 	lsl.w	r2, r0, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	430a      	orrs	r2, r1
 8001874:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001876:	4b22      	ldr	r3, [pc, #136]	@ (8001900 <HAL_ADC_ConfigChannel+0x234>)
 8001878:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a21      	ldr	r2, [pc, #132]	@ (8001904 <HAL_ADC_ConfigChannel+0x238>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d109      	bne.n	8001898 <HAL_ADC_ConfigChannel+0x1cc>
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b12      	cmp	r3, #18
 800188a:	d105      	bne.n	8001898 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a19      	ldr	r2, [pc, #100]	@ (8001904 <HAL_ADC_ConfigChannel+0x238>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d123      	bne.n	80018ea <HAL_ADC_ConfigChannel+0x21e>
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2b10      	cmp	r3, #16
 80018a8:	d003      	beq.n	80018b2 <HAL_ADC_ConfigChannel+0x1e6>
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2b11      	cmp	r3, #17
 80018b0:	d11b      	bne.n	80018ea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b10      	cmp	r3, #16
 80018c4:	d111      	bne.n	80018ea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018c6:	4b10      	ldr	r3, [pc, #64]	@ (8001908 <HAL_ADC_ConfigChannel+0x23c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a10      	ldr	r2, [pc, #64]	@ (800190c <HAL_ADC_ConfigChannel+0x240>)
 80018cc:	fba2 2303 	umull	r2, r3, r2, r3
 80018d0:	0c9a      	lsrs	r2, r3, #18
 80018d2:	4613      	mov	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80018dc:	e002      	b.n	80018e4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	3b01      	subs	r3, #1
 80018e2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f9      	bne.n	80018de <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	40012300 	.word	0x40012300
 8001904:	40012000 	.word	0x40012000
 8001908:	20000000 	.word	0x20000000
 800190c:	431bde83 	.word	0x431bde83

08001910 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001918:	4b79      	ldr	r3, [pc, #484]	@ (8001b00 <ADC_Init+0x1f0>)
 800191a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	431a      	orrs	r2, r3
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001944:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6859      	ldr	r1, [r3, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	021a      	lsls	r2, r3, #8
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	430a      	orrs	r2, r1
 8001958:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001968:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6859      	ldr	r1, [r3, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	689a      	ldr	r2, [r3, #8]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800198a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6899      	ldr	r1, [r3, #8]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68da      	ldr	r2, [r3, #12]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	430a      	orrs	r2, r1
 800199c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a2:	4a58      	ldr	r2, [pc, #352]	@ (8001b04 <ADC_Init+0x1f4>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d022      	beq.n	80019ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80019b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6899      	ldr	r1, [r3, #8]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80019d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6899      	ldr	r1, [r3, #8]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	e00f      	b.n	8001a0e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80019fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001a0c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 0202 	bic.w	r2, r2, #2
 8001a1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6899      	ldr	r1, [r3, #8]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	7e1b      	ldrb	r3, [r3, #24]
 8001a28:	005a      	lsls	r2, r3, #1
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d01b      	beq.n	8001a74 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a4a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001a5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6859      	ldr	r1, [r3, #4]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a66:	3b01      	subs	r3, #1
 8001a68:	035a      	lsls	r2, r3, #13
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	e007      	b.n	8001a84 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a82:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001a92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	051a      	lsls	r2, r3, #20
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001ab8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6899      	ldr	r1, [r3, #8]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001ac6:	025a      	lsls	r2, r3, #9
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	430a      	orrs	r2, r1
 8001ace:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	689a      	ldr	r2, [r3, #8]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ade:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6899      	ldr	r1, [r3, #8]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	029a      	lsls	r2, r3, #10
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	609a      	str	r2, [r3, #8]
}
 8001af4:	bf00      	nop
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	40012300 	.word	0x40012300
 8001b04:	0f000001 	.word	0x0f000001

08001b08 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e0ed      	b.n	8001cf6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d102      	bne.n	8001b2c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7fe fde4 	bl	80006f4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f042 0201 	orr.w	r2, r2, #1
 8001b3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b3c:	f7ff fd52 	bl	80015e4 <HAL_GetTick>
 8001b40:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b42:	e012      	b.n	8001b6a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b44:	f7ff fd4e 	bl	80015e4 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b0a      	cmp	r3, #10
 8001b50:	d90b      	bls.n	8001b6a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b56:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2205      	movs	r2, #5
 8001b62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e0c5      	b.n	8001cf6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0e5      	beq.n	8001b44 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f022 0202 	bic.w	r2, r2, #2
 8001b86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b88:	f7ff fd2c 	bl	80015e4 <HAL_GetTick>
 8001b8c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b8e:	e012      	b.n	8001bb6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b90:	f7ff fd28 	bl	80015e4 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b0a      	cmp	r3, #10
 8001b9c:	d90b      	bls.n	8001bb6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2205      	movs	r2, #5
 8001bae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e09f      	b.n	8001cf6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1e5      	bne.n	8001b90 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	7e1b      	ldrb	r3, [r3, #24]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d108      	bne.n	8001bde <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	e007      	b.n	8001bee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001bec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	7e5b      	ldrb	r3, [r3, #25]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d108      	bne.n	8001c08 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	e007      	b.n	8001c18 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c16:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	7e9b      	ldrb	r3, [r3, #26]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d108      	bne.n	8001c32 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f042 0220 	orr.w	r2, r2, #32
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	e007      	b.n	8001c42 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f022 0220 	bic.w	r2, r2, #32
 8001c40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	7edb      	ldrb	r3, [r3, #27]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d108      	bne.n	8001c5c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 0210 	bic.w	r2, r2, #16
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	e007      	b.n	8001c6c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0210 	orr.w	r2, r2, #16
 8001c6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	7f1b      	ldrb	r3, [r3, #28]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d108      	bne.n	8001c86 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f042 0208 	orr.w	r2, r2, #8
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	e007      	b.n	8001c96 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 0208 	bic.w	r2, r2, #8
 8001c94:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	7f5b      	ldrb	r3, [r3, #29]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d108      	bne.n	8001cb0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f042 0204 	orr.w	r2, r2, #4
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	e007      	b.n	8001cc0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0204 	bic.w	r2, r2, #4
 8001cbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	ea42 0103 	orr.w	r1, r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	1e5a      	subs	r2, r3, #1
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d10:	4b0c      	ldr	r3, [pc, #48]	@ (8001d44 <__NVIC_SetPriorityGrouping+0x44>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d32:	4a04      	ldr	r2, [pc, #16]	@ (8001d44 <__NVIC_SetPriorityGrouping+0x44>)
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	60d3      	str	r3, [r2, #12]
}
 8001d38:	bf00      	nop
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d4c:	4b04      	ldr	r3, [pc, #16]	@ (8001d60 <__NVIC_GetPriorityGrouping+0x18>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	0a1b      	lsrs	r3, r3, #8
 8001d52:	f003 0307 	and.w	r3, r3, #7
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	db0b      	blt.n	8001d8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	f003 021f 	and.w	r2, r3, #31
 8001d7c:	4907      	ldr	r1, [pc, #28]	@ (8001d9c <__NVIC_EnableIRQ+0x38>)
 8001d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d82:	095b      	lsrs	r3, r3, #5
 8001d84:	2001      	movs	r0, #1
 8001d86:	fa00 f202 	lsl.w	r2, r0, r2
 8001d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	e000e100 	.word	0xe000e100

08001da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	6039      	str	r1, [r7, #0]
 8001daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	db0a      	blt.n	8001dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	490c      	ldr	r1, [pc, #48]	@ (8001dec <__NVIC_SetPriority+0x4c>)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	0112      	lsls	r2, r2, #4
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc8:	e00a      	b.n	8001de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	4908      	ldr	r1, [pc, #32]	@ (8001df0 <__NVIC_SetPriority+0x50>)
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	3b04      	subs	r3, #4
 8001dd8:	0112      	lsls	r2, r2, #4
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	440b      	add	r3, r1
 8001dde:	761a      	strb	r2, [r3, #24]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	e000e100 	.word	0xe000e100
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b089      	sub	sp, #36	@ 0x24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f1c3 0307 	rsb	r3, r3, #7
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	bf28      	it	cs
 8001e12:	2304      	movcs	r3, #4
 8001e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	2b06      	cmp	r3, #6
 8001e1c:	d902      	bls.n	8001e24 <NVIC_EncodePriority+0x30>
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3b03      	subs	r3, #3
 8001e22:	e000      	b.n	8001e26 <NVIC_EncodePriority+0x32>
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e28:	f04f 32ff 	mov.w	r2, #4294967295
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43da      	mvns	r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	401a      	ands	r2, r3
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	fa01 f303 	lsl.w	r3, r1, r3
 8001e46:	43d9      	mvns	r1, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e4c:	4313      	orrs	r3, r2
         );
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3724      	adds	r7, #36	@ 0x24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
	...

08001e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e6c:	d301      	bcc.n	8001e72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e00f      	b.n	8001e92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e72:	4a0a      	ldr	r2, [pc, #40]	@ (8001e9c <SysTick_Config+0x40>)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e7a:	210f      	movs	r1, #15
 8001e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e80:	f7ff ff8e 	bl	8001da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e84:	4b05      	ldr	r3, [pc, #20]	@ (8001e9c <SysTick_Config+0x40>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e8a:	4b04      	ldr	r3, [pc, #16]	@ (8001e9c <SysTick_Config+0x40>)
 8001e8c:	2207      	movs	r2, #7
 8001e8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	e000e010 	.word	0xe000e010

08001ea0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff ff29 	bl	8001d00 <__NVIC_SetPriorityGrouping>
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b086      	sub	sp, #24
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	607a      	str	r2, [r7, #4]
 8001ec2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec8:	f7ff ff3e 	bl	8001d48 <__NVIC_GetPriorityGrouping>
 8001ecc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	68b9      	ldr	r1, [r7, #8]
 8001ed2:	6978      	ldr	r0, [r7, #20]
 8001ed4:	f7ff ff8e 	bl	8001df4 <NVIC_EncodePriority>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff5d 	bl	8001da0 <__NVIC_SetPriority>
}
 8001ee6:	bf00      	nop
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff ff31 	bl	8001d64 <__NVIC_EnableIRQ>
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7ff ffa2 	bl	8001e5c <SysTick_Config>
 8001f18:	4603      	mov	r3, r0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f30:	f7ff fb58 	bl	80015e4 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e099      	b.n	8002074 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2202      	movs	r2, #2
 8001f44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 0201 	bic.w	r2, r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f60:	e00f      	b.n	8001f82 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f62:	f7ff fb3f 	bl	80015e4 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b05      	cmp	r3, #5
 8001f6e:	d908      	bls.n	8001f82 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2220      	movs	r2, #32
 8001f74:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2203      	movs	r2, #3
 8001f7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e078      	b.n	8002074 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1e8      	bne.n	8001f62 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	4b38      	ldr	r3, [pc, #224]	@ (800207c <HAL_DMA_Init+0x158>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd8:	2b04      	cmp	r3, #4
 8001fda:	d107      	bne.n	8001fec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	f023 0307 	bic.w	r3, r3, #7
 8002002:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	4313      	orrs	r3, r2
 800200c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002012:	2b04      	cmp	r3, #4
 8002014:	d117      	bne.n	8002046 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	4313      	orrs	r3, r2
 800201e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00e      	beq.n	8002046 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 fadf 	bl	80025ec <DMA_CheckFifoParam>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d008      	beq.n	8002046 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2240      	movs	r2, #64	@ 0x40
 8002038:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002042:	2301      	movs	r3, #1
 8002044:	e016      	b.n	8002074 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 fa96 	bl	8002580 <DMA_CalcBaseAndBitshift>
 8002054:	4603      	mov	r3, r0
 8002056:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800205c:	223f      	movs	r2, #63	@ 0x3f
 800205e:	409a      	lsls	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	f010803f 	.word	0xf010803f

08002080 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
 800208c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800208e:	2300      	movs	r3, #0
 8002090:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002096:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d101      	bne.n	80020a6 <HAL_DMA_Start_IT+0x26>
 80020a2:	2302      	movs	r3, #2
 80020a4:	e040      	b.n	8002128 <HAL_DMA_Start_IT+0xa8>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d12f      	bne.n	800211a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2202      	movs	r2, #2
 80020be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	68b9      	ldr	r1, [r7, #8]
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f000 fa28 	bl	8002524 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d8:	223f      	movs	r2, #63	@ 0x3f
 80020da:	409a      	lsls	r2, r3
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 0216 	orr.w	r2, r2, #22
 80020ee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d007      	beq.n	8002108 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0208 	orr.w	r2, r2, #8
 8002106:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f042 0201 	orr.w	r2, r2, #1
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	e005      	b.n	8002126 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002122:	2302      	movs	r3, #2
 8002124:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002126:	7dfb      	ldrb	r3, [r7, #23]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3718      	adds	r7, #24
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800213e:	f7ff fa51 	bl	80015e4 <HAL_GetTick>
 8002142:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d008      	beq.n	8002162 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2280      	movs	r2, #128	@ 0x80
 8002154:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e052      	b.n	8002208 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 0216 	bic.w	r2, r2, #22
 8002170:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	695a      	ldr	r2, [r3, #20]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002180:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002186:	2b00      	cmp	r3, #0
 8002188:	d103      	bne.n	8002192 <HAL_DMA_Abort+0x62>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800218e:	2b00      	cmp	r3, #0
 8002190:	d007      	beq.n	80021a2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0208 	bic.w	r2, r2, #8
 80021a0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0201 	bic.w	r2, r2, #1
 80021b0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021b2:	e013      	b.n	80021dc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021b4:	f7ff fa16 	bl	80015e4 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b05      	cmp	r3, #5
 80021c0:	d90c      	bls.n	80021dc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2220      	movs	r2, #32
 80021c6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2203      	movs	r2, #3
 80021cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e015      	b.n	8002208 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1e4      	bne.n	80021b4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ee:	223f      	movs	r2, #63	@ 0x3f
 80021f0:	409a      	lsls	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002218:	2300      	movs	r3, #0
 800221a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800221c:	4b8e      	ldr	r3, [pc, #568]	@ (8002458 <HAL_DMA_IRQHandler+0x248>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a8e      	ldr	r2, [pc, #568]	@ (800245c <HAL_DMA_IRQHandler+0x24c>)
 8002222:	fba2 2303 	umull	r2, r3, r2, r3
 8002226:	0a9b      	lsrs	r3, r3, #10
 8002228:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800222e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800223a:	2208      	movs	r2, #8
 800223c:	409a      	lsls	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	4013      	ands	r3, r2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d01a      	beq.n	800227c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b00      	cmp	r3, #0
 8002252:	d013      	beq.n	800227c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0204 	bic.w	r2, r2, #4
 8002262:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002268:	2208      	movs	r2, #8
 800226a:	409a      	lsls	r2, r3
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002274:	f043 0201 	orr.w	r2, r3, #1
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002280:	2201      	movs	r2, #1
 8002282:	409a      	lsls	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4013      	ands	r3, r2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d012      	beq.n	80022b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00b      	beq.n	80022b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800229e:	2201      	movs	r2, #1
 80022a0:	409a      	lsls	r2, r3
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022aa:	f043 0202 	orr.w	r2, r3, #2
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b6:	2204      	movs	r2, #4
 80022b8:	409a      	lsls	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	4013      	ands	r3, r2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d012      	beq.n	80022e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00b      	beq.n	80022e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022d4:	2204      	movs	r2, #4
 80022d6:	409a      	lsls	r2, r3
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022e0:	f043 0204 	orr.w	r2, r3, #4
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ec:	2210      	movs	r2, #16
 80022ee:	409a      	lsls	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4013      	ands	r3, r2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d043      	beq.n	8002380 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b00      	cmp	r3, #0
 8002304:	d03c      	beq.n	8002380 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800230a:	2210      	movs	r2, #16
 800230c:	409a      	lsls	r2, r3
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d018      	beq.n	8002352 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d108      	bne.n	8002340 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002332:	2b00      	cmp	r3, #0
 8002334:	d024      	beq.n	8002380 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	4798      	blx	r3
 800233e:	e01f      	b.n	8002380 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002344:	2b00      	cmp	r3, #0
 8002346:	d01b      	beq.n	8002380 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	4798      	blx	r3
 8002350:	e016      	b.n	8002380 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800235c:	2b00      	cmp	r3, #0
 800235e:	d107      	bne.n	8002370 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 0208 	bic.w	r2, r2, #8
 800236e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002374:	2b00      	cmp	r3, #0
 8002376:	d003      	beq.n	8002380 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002384:	2220      	movs	r2, #32
 8002386:	409a      	lsls	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	4013      	ands	r3, r2
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 808f 	beq.w	80024b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0310 	and.w	r3, r3, #16
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 8087 	beq.w	80024b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a6:	2220      	movs	r2, #32
 80023a8:	409a      	lsls	r2, r3
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b05      	cmp	r3, #5
 80023b8:	d136      	bne.n	8002428 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 0216 	bic.w	r2, r2, #22
 80023c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	695a      	ldr	r2, [r3, #20]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d103      	bne.n	80023ea <HAL_DMA_IRQHandler+0x1da>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d007      	beq.n	80023fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 0208 	bic.w	r2, r2, #8
 80023f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023fe:	223f      	movs	r2, #63	@ 0x3f
 8002400:	409a      	lsls	r2, r3
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800241a:	2b00      	cmp	r3, #0
 800241c:	d07e      	beq.n	800251c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	4798      	blx	r3
        }
        return;
 8002426:	e079      	b.n	800251c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d01d      	beq.n	8002472 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10d      	bne.n	8002460 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002448:	2b00      	cmp	r3, #0
 800244a:	d031      	beq.n	80024b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	4798      	blx	r3
 8002454:	e02c      	b.n	80024b0 <HAL_DMA_IRQHandler+0x2a0>
 8002456:	bf00      	nop
 8002458:	20000000 	.word	0x20000000
 800245c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002464:	2b00      	cmp	r3, #0
 8002466:	d023      	beq.n	80024b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	4798      	blx	r3
 8002470:	e01e      	b.n	80024b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10f      	bne.n	80024a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0210 	bic.w	r2, r2, #16
 800248e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d032      	beq.n	800251e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d022      	beq.n	800250a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2205      	movs	r2, #5
 80024c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0201 	bic.w	r2, r2, #1
 80024da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	3301      	adds	r3, #1
 80024e0:	60bb      	str	r3, [r7, #8]
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d307      	bcc.n	80024f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f2      	bne.n	80024dc <HAL_DMA_IRQHandler+0x2cc>
 80024f6:	e000      	b.n	80024fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80024f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800250e:	2b00      	cmp	r3, #0
 8002510:	d005      	beq.n	800251e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	4798      	blx	r3
 800251a:	e000      	b.n	800251e <HAL_DMA_IRQHandler+0x30e>
        return;
 800251c:	bf00      	nop
    }
  }
}
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
 8002530:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002540:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	2b40      	cmp	r3, #64	@ 0x40
 8002550:	d108      	bne.n	8002564 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002562:	e007      	b.n	8002574 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68ba      	ldr	r2, [r7, #8]
 800256a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	60da      	str	r2, [r3, #12]
}
 8002574:	bf00      	nop
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	3b10      	subs	r3, #16
 8002590:	4a14      	ldr	r2, [pc, #80]	@ (80025e4 <DMA_CalcBaseAndBitshift+0x64>)
 8002592:	fba2 2303 	umull	r2, r3, r2, r3
 8002596:	091b      	lsrs	r3, r3, #4
 8002598:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800259a:	4a13      	ldr	r2, [pc, #76]	@ (80025e8 <DMA_CalcBaseAndBitshift+0x68>)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4413      	add	r3, r2
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	461a      	mov	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2b03      	cmp	r3, #3
 80025ac:	d909      	bls.n	80025c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80025b6:	f023 0303 	bic.w	r3, r3, #3
 80025ba:	1d1a      	adds	r2, r3, #4
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	659a      	str	r2, [r3, #88]	@ 0x58
 80025c0:	e007      	b.n	80025d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80025ca:	f023 0303 	bic.w	r3, r3, #3
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	aaaaaaab 	.word	0xaaaaaaab
 80025e8:	0800cb68 	.word	0x0800cb68

080025ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025f4:	2300      	movs	r3, #0
 80025f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d11f      	bne.n	8002646 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	2b03      	cmp	r3, #3
 800260a:	d856      	bhi.n	80026ba <DMA_CheckFifoParam+0xce>
 800260c:	a201      	add	r2, pc, #4	@ (adr r2, 8002614 <DMA_CheckFifoParam+0x28>)
 800260e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002612:	bf00      	nop
 8002614:	08002625 	.word	0x08002625
 8002618:	08002637 	.word	0x08002637
 800261c:	08002625 	.word	0x08002625
 8002620:	080026bb 	.word	0x080026bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002628:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d046      	beq.n	80026be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002634:	e043      	b.n	80026be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800263a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800263e:	d140      	bne.n	80026c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002644:	e03d      	b.n	80026c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800264e:	d121      	bne.n	8002694 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	2b03      	cmp	r3, #3
 8002654:	d837      	bhi.n	80026c6 <DMA_CheckFifoParam+0xda>
 8002656:	a201      	add	r2, pc, #4	@ (adr r2, 800265c <DMA_CheckFifoParam+0x70>)
 8002658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265c:	0800266d 	.word	0x0800266d
 8002660:	08002673 	.word	0x08002673
 8002664:	0800266d 	.word	0x0800266d
 8002668:	08002685 	.word	0x08002685
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	73fb      	strb	r3, [r7, #15]
      break;
 8002670:	e030      	b.n	80026d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002676:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d025      	beq.n	80026ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002682:	e022      	b.n	80026ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002688:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800268c:	d11f      	bne.n	80026ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002692:	e01c      	b.n	80026ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	2b02      	cmp	r3, #2
 8002698:	d903      	bls.n	80026a2 <DMA_CheckFifoParam+0xb6>
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	2b03      	cmp	r3, #3
 800269e:	d003      	beq.n	80026a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80026a0:	e018      	b.n	80026d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	73fb      	strb	r3, [r7, #15]
      break;
 80026a6:	e015      	b.n	80026d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00e      	beq.n	80026d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	73fb      	strb	r3, [r7, #15]
      break;
 80026b8:	e00b      	b.n	80026d2 <DMA_CheckFifoParam+0xe6>
      break;
 80026ba:	bf00      	nop
 80026bc:	e00a      	b.n	80026d4 <DMA_CheckFifoParam+0xe8>
      break;
 80026be:	bf00      	nop
 80026c0:	e008      	b.n	80026d4 <DMA_CheckFifoParam+0xe8>
      break;
 80026c2:	bf00      	nop
 80026c4:	e006      	b.n	80026d4 <DMA_CheckFifoParam+0xe8>
      break;
 80026c6:	bf00      	nop
 80026c8:	e004      	b.n	80026d4 <DMA_CheckFifoParam+0xe8>
      break;
 80026ca:	bf00      	nop
 80026cc:	e002      	b.n	80026d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80026ce:	bf00      	nop
 80026d0:	e000      	b.n	80026d4 <DMA_CheckFifoParam+0xe8>
      break;
 80026d2:	bf00      	nop
    }
  } 
  
  return status; 
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop

080026e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b089      	sub	sp, #36	@ 0x24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026fa:	2300      	movs	r3, #0
 80026fc:	61fb      	str	r3, [r7, #28]
 80026fe:	e16b      	b.n	80029d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002700:	2201      	movs	r2, #1
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	4013      	ands	r3, r2
 8002712:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	429a      	cmp	r2, r3
 800271a:	f040 815a 	bne.w	80029d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	2b01      	cmp	r3, #1
 8002728:	d005      	beq.n	8002736 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002732:	2b02      	cmp	r3, #2
 8002734:	d130      	bne.n	8002798 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	2203      	movs	r2, #3
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43db      	mvns	r3, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4013      	ands	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	68da      	ldr	r2, [r3, #12]
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4313      	orrs	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800276c:	2201      	movs	r2, #1
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	f003 0201 	and.w	r2, r3, #1
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4313      	orrs	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 0303 	and.w	r3, r3, #3
 80027a0:	2b03      	cmp	r3, #3
 80027a2:	d017      	beq.n	80027d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	2203      	movs	r2, #3
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 0303 	and.w	r3, r3, #3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d123      	bne.n	8002828 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	08da      	lsrs	r2, r3, #3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3208      	adds	r2, #8
 80027e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	220f      	movs	r2, #15
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43db      	mvns	r3, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4013      	ands	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	691a      	ldr	r2, [r3, #16]
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4313      	orrs	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	08da      	lsrs	r2, r3, #3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	3208      	adds	r2, #8
 8002822:	69b9      	ldr	r1, [r7, #24]
 8002824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	2203      	movs	r2, #3
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 0203 	and.w	r2, r3, #3
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 80b4 	beq.w	80029d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	4b60      	ldr	r3, [pc, #384]	@ (80029f0 <HAL_GPIO_Init+0x30c>)
 8002870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002872:	4a5f      	ldr	r2, [pc, #380]	@ (80029f0 <HAL_GPIO_Init+0x30c>)
 8002874:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002878:	6453      	str	r3, [r2, #68]	@ 0x44
 800287a:	4b5d      	ldr	r3, [pc, #372]	@ (80029f0 <HAL_GPIO_Init+0x30c>)
 800287c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002886:	4a5b      	ldr	r2, [pc, #364]	@ (80029f4 <HAL_GPIO_Init+0x310>)
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	089b      	lsrs	r3, r3, #2
 800288c:	3302      	adds	r3, #2
 800288e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002892:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	220f      	movs	r2, #15
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43db      	mvns	r3, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4013      	ands	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a52      	ldr	r2, [pc, #328]	@ (80029f8 <HAL_GPIO_Init+0x314>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d02b      	beq.n	800290a <HAL_GPIO_Init+0x226>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a51      	ldr	r2, [pc, #324]	@ (80029fc <HAL_GPIO_Init+0x318>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d025      	beq.n	8002906 <HAL_GPIO_Init+0x222>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a50      	ldr	r2, [pc, #320]	@ (8002a00 <HAL_GPIO_Init+0x31c>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d01f      	beq.n	8002902 <HAL_GPIO_Init+0x21e>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a4f      	ldr	r2, [pc, #316]	@ (8002a04 <HAL_GPIO_Init+0x320>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d019      	beq.n	80028fe <HAL_GPIO_Init+0x21a>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a4e      	ldr	r2, [pc, #312]	@ (8002a08 <HAL_GPIO_Init+0x324>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d013      	beq.n	80028fa <HAL_GPIO_Init+0x216>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a4d      	ldr	r2, [pc, #308]	@ (8002a0c <HAL_GPIO_Init+0x328>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d00d      	beq.n	80028f6 <HAL_GPIO_Init+0x212>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a4c      	ldr	r2, [pc, #304]	@ (8002a10 <HAL_GPIO_Init+0x32c>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d007      	beq.n	80028f2 <HAL_GPIO_Init+0x20e>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a4b      	ldr	r2, [pc, #300]	@ (8002a14 <HAL_GPIO_Init+0x330>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d101      	bne.n	80028ee <HAL_GPIO_Init+0x20a>
 80028ea:	2307      	movs	r3, #7
 80028ec:	e00e      	b.n	800290c <HAL_GPIO_Init+0x228>
 80028ee:	2308      	movs	r3, #8
 80028f0:	e00c      	b.n	800290c <HAL_GPIO_Init+0x228>
 80028f2:	2306      	movs	r3, #6
 80028f4:	e00a      	b.n	800290c <HAL_GPIO_Init+0x228>
 80028f6:	2305      	movs	r3, #5
 80028f8:	e008      	b.n	800290c <HAL_GPIO_Init+0x228>
 80028fa:	2304      	movs	r3, #4
 80028fc:	e006      	b.n	800290c <HAL_GPIO_Init+0x228>
 80028fe:	2303      	movs	r3, #3
 8002900:	e004      	b.n	800290c <HAL_GPIO_Init+0x228>
 8002902:	2302      	movs	r3, #2
 8002904:	e002      	b.n	800290c <HAL_GPIO_Init+0x228>
 8002906:	2301      	movs	r3, #1
 8002908:	e000      	b.n	800290c <HAL_GPIO_Init+0x228>
 800290a:	2300      	movs	r3, #0
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	f002 0203 	and.w	r2, r2, #3
 8002912:	0092      	lsls	r2, r2, #2
 8002914:	4093      	lsls	r3, r2
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4313      	orrs	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800291c:	4935      	ldr	r1, [pc, #212]	@ (80029f4 <HAL_GPIO_Init+0x310>)
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	089b      	lsrs	r3, r3, #2
 8002922:	3302      	adds	r3, #2
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800292a:	4b3b      	ldr	r3, [pc, #236]	@ (8002a18 <HAL_GPIO_Init+0x334>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	43db      	mvns	r3, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4013      	ands	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800294e:	4a32      	ldr	r2, [pc, #200]	@ (8002a18 <HAL_GPIO_Init+0x334>)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002954:	4b30      	ldr	r3, [pc, #192]	@ (8002a18 <HAL_GPIO_Init+0x334>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	43db      	mvns	r3, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002978:	4a27      	ldr	r2, [pc, #156]	@ (8002a18 <HAL_GPIO_Init+0x334>)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800297e:	4b26      	ldr	r3, [pc, #152]	@ (8002a18 <HAL_GPIO_Init+0x334>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	43db      	mvns	r3, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4013      	ands	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4313      	orrs	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002a18 <HAL_GPIO_Init+0x334>)
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a18 <HAL_GPIO_Init+0x334>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029cc:	4a12      	ldr	r2, [pc, #72]	@ (8002a18 <HAL_GPIO_Init+0x334>)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	3301      	adds	r3, #1
 80029d6:	61fb      	str	r3, [r7, #28]
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	2b0f      	cmp	r3, #15
 80029dc:	f67f ae90 	bls.w	8002700 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029e0:	bf00      	nop
 80029e2:	bf00      	nop
 80029e4:	3724      	adds	r7, #36	@ 0x24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40023800 	.word	0x40023800
 80029f4:	40013800 	.word	0x40013800
 80029f8:	40020000 	.word	0x40020000
 80029fc:	40020400 	.word	0x40020400
 8002a00:	40020800 	.word	0x40020800
 8002a04:	40020c00 	.word	0x40020c00
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	40021400 	.word	0x40021400
 8002a10:	40021800 	.word	0x40021800
 8002a14:	40021c00 	.word	0x40021c00
 8002a18:	40013c00 	.word	0x40013c00

08002a1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	460b      	mov	r3, r1
 8002a26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691a      	ldr	r2, [r3, #16]
 8002a2c:	887b      	ldrh	r3, [r7, #2]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d002      	beq.n	8002a3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a34:	2301      	movs	r3, #1
 8002a36:	73fb      	strb	r3, [r7, #15]
 8002a38:	e001      	b.n	8002a3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	460b      	mov	r3, r1
 8002a56:	807b      	strh	r3, [r7, #2]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a5c:	787b      	ldrb	r3, [r7, #1]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a62:	887a      	ldrh	r2, [r7, #2]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a68:	e003      	b.n	8002a72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a6a:	887b      	ldrh	r3, [r7, #2]
 8002a6c:	041a      	lsls	r2, r3, #16
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	619a      	str	r2, [r3, #24]
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
	...

08002a80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4603      	mov	r3, r0
 8002a88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a8a:	4b08      	ldr	r3, [pc, #32]	@ (8002aac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a8c:	695a      	ldr	r2, [r3, #20]
 8002a8e:	88fb      	ldrh	r3, [r7, #6]
 8002a90:	4013      	ands	r3, r2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d006      	beq.n	8002aa4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a96:	4a05      	ldr	r2, [pc, #20]	@ (8002aac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a98:	88fb      	ldrh	r3, [r7, #6]
 8002a9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a9c:	88fb      	ldrh	r3, [r7, #6]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 f806 	bl	8002ab0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002aa4:	bf00      	nop
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40013c00 	.word	0x40013c00

08002ab0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
	...

08002ac8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e12b      	b.n	8002d32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d106      	bne.n	8002af4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7fd ffe6 	bl	8000ac0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2224      	movs	r2, #36	@ 0x24
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 0201 	bic.w	r2, r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b2c:	f002 fbd8 	bl	80052e0 <HAL_RCC_GetPCLK1Freq>
 8002b30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	4a81      	ldr	r2, [pc, #516]	@ (8002d3c <HAL_I2C_Init+0x274>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d807      	bhi.n	8002b4c <HAL_I2C_Init+0x84>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	4a80      	ldr	r2, [pc, #512]	@ (8002d40 <HAL_I2C_Init+0x278>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	bf94      	ite	ls
 8002b44:	2301      	movls	r3, #1
 8002b46:	2300      	movhi	r3, #0
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	e006      	b.n	8002b5a <HAL_I2C_Init+0x92>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4a7d      	ldr	r2, [pc, #500]	@ (8002d44 <HAL_I2C_Init+0x27c>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	bf94      	ite	ls
 8002b54:	2301      	movls	r3, #1
 8002b56:	2300      	movhi	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e0e7      	b.n	8002d32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	4a78      	ldr	r2, [pc, #480]	@ (8002d48 <HAL_I2C_Init+0x280>)
 8002b66:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6a:	0c9b      	lsrs	r3, r3, #18
 8002b6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	4a6a      	ldr	r2, [pc, #424]	@ (8002d3c <HAL_I2C_Init+0x274>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d802      	bhi.n	8002b9c <HAL_I2C_Init+0xd4>
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	e009      	b.n	8002bb0 <HAL_I2C_Init+0xe8>
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002ba2:	fb02 f303 	mul.w	r3, r2, r3
 8002ba6:	4a69      	ldr	r2, [pc, #420]	@ (8002d4c <HAL_I2C_Init+0x284>)
 8002ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bac:	099b      	lsrs	r3, r3, #6
 8002bae:	3301      	adds	r3, #1
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6812      	ldr	r2, [r2, #0]
 8002bb4:	430b      	orrs	r3, r1
 8002bb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002bc2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	495c      	ldr	r1, [pc, #368]	@ (8002d3c <HAL_I2C_Init+0x274>)
 8002bcc:	428b      	cmp	r3, r1
 8002bce:	d819      	bhi.n	8002c04 <HAL_I2C_Init+0x13c>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	1e59      	subs	r1, r3, #1
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bde:	1c59      	adds	r1, r3, #1
 8002be0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002be4:	400b      	ands	r3, r1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00a      	beq.n	8002c00 <HAL_I2C_Init+0x138>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	1e59      	subs	r1, r3, #1
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bfe:	e051      	b.n	8002ca4 <HAL_I2C_Init+0x1dc>
 8002c00:	2304      	movs	r3, #4
 8002c02:	e04f      	b.n	8002ca4 <HAL_I2C_Init+0x1dc>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d111      	bne.n	8002c30 <HAL_I2C_Init+0x168>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	1e58      	subs	r0, r3, #1
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6859      	ldr	r1, [r3, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	440b      	add	r3, r1
 8002c1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c1e:	3301      	adds	r3, #1
 8002c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	bf0c      	ite	eq
 8002c28:	2301      	moveq	r3, #1
 8002c2a:	2300      	movne	r3, #0
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	e012      	b.n	8002c56 <HAL_I2C_Init+0x18e>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	1e58      	subs	r0, r3, #1
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6859      	ldr	r1, [r3, #4]
 8002c38:	460b      	mov	r3, r1
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	0099      	lsls	r1, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c46:	3301      	adds	r3, #1
 8002c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	bf0c      	ite	eq
 8002c50:	2301      	moveq	r3, #1
 8002c52:	2300      	movne	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <HAL_I2C_Init+0x196>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e022      	b.n	8002ca4 <HAL_I2C_Init+0x1dc>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10e      	bne.n	8002c84 <HAL_I2C_Init+0x1bc>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	1e58      	subs	r0, r3, #1
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6859      	ldr	r1, [r3, #4]
 8002c6e:	460b      	mov	r3, r1
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	440b      	add	r3, r1
 8002c74:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c78:	3301      	adds	r3, #1
 8002c7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c82:	e00f      	b.n	8002ca4 <HAL_I2C_Init+0x1dc>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	1e58      	subs	r0, r3, #1
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6859      	ldr	r1, [r3, #4]
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	0099      	lsls	r1, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	6809      	ldr	r1, [r1, #0]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	69da      	ldr	r2, [r3, #28]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002cd2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	6911      	ldr	r1, [r2, #16]
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	68d2      	ldr	r2, [r2, #12]
 8002cde:	4311      	orrs	r1, r2
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6812      	ldr	r2, [r2, #0]
 8002ce4:	430b      	orrs	r3, r1
 8002ce6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	695a      	ldr	r2, [r3, #20]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0201 	orr.w	r2, r2, #1
 8002d12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	000186a0 	.word	0x000186a0
 8002d40:	001e847f 	.word	0x001e847f
 8002d44:	003d08ff 	.word	0x003d08ff
 8002d48:	431bde83 	.word	0x431bde83
 8002d4c:	10624dd3 	.word	0x10624dd3

08002d50 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b088      	sub	sp, #32
 8002d54:	af02      	add	r7, sp, #8
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	607a      	str	r2, [r7, #4]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	817b      	strh	r3, [r7, #10]
 8002d60:	4613      	mov	r3, r2
 8002d62:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d64:	f7fe fc3e 	bl	80015e4 <HAL_GetTick>
 8002d68:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b20      	cmp	r3, #32
 8002d74:	f040 80e0 	bne.w	8002f38 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	2319      	movs	r3, #25
 8002d7e:	2201      	movs	r2, #1
 8002d80:	4970      	ldr	r1, [pc, #448]	@ (8002f44 <HAL_I2C_Master_Transmit+0x1f4>)
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f000 fc64 	bl	8003650 <I2C_WaitOnFlagUntilTimeout>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d8e:	2302      	movs	r3, #2
 8002d90:	e0d3      	b.n	8002f3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d101      	bne.n	8002da0 <HAL_I2C_Master_Transmit+0x50>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e0cc      	b.n	8002f3a <HAL_I2C_Master_Transmit+0x1ea>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d007      	beq.n	8002dc6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f042 0201 	orr.w	r2, r2, #1
 8002dc4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002dd4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2221      	movs	r2, #33	@ 0x21
 8002dda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2210      	movs	r2, #16
 8002de2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	893a      	ldrh	r2, [r7, #8]
 8002df6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	4a50      	ldr	r2, [pc, #320]	@ (8002f48 <HAL_I2C_Master_Transmit+0x1f8>)
 8002e06:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e08:	8979      	ldrh	r1, [r7, #10]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	6a3a      	ldr	r2, [r7, #32]
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 face 	bl	80033b0 <I2C_MasterRequestWrite>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e08d      	b.n	8002f3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e1e:	2300      	movs	r3, #0
 8002e20:	613b      	str	r3, [r7, #16]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e34:	e066      	b.n	8002f04 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	6a39      	ldr	r1, [r7, #32]
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 fd22 	bl	8003884 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00d      	beq.n	8002e62 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	d107      	bne.n	8002e5e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e06b      	b.n	8002f3a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e66:	781a      	ldrb	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e72:	1c5a      	adds	r2, r3, #1
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b04      	cmp	r3, #4
 8002e9e:	d11b      	bne.n	8002ed8 <HAL_I2C_Master_Transmit+0x188>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d017      	beq.n	8002ed8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eac:	781a      	ldrb	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb8:	1c5a      	adds	r2, r3, #1
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	6a39      	ldr	r1, [r7, #32]
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 fd19 	bl	8003914 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00d      	beq.n	8002f04 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eec:	2b04      	cmp	r3, #4
 8002eee:	d107      	bne.n	8002f00 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002efe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e01a      	b.n	8002f3a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d194      	bne.n	8002e36 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f34:	2300      	movs	r3, #0
 8002f36:	e000      	b.n	8002f3a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f38:	2302      	movs	r3, #2
  }
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3718      	adds	r7, #24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	00100002 	.word	0x00100002
 8002f48:	ffff0000 	.word	0xffff0000

08002f4c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b08c      	sub	sp, #48	@ 0x30
 8002f50:	af02      	add	r7, sp, #8
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	607a      	str	r2, [r7, #4]
 8002f56:	461a      	mov	r2, r3
 8002f58:	460b      	mov	r3, r1
 8002f5a:	817b      	strh	r3, [r7, #10]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f60:	f7fe fb40 	bl	80015e4 <HAL_GetTick>
 8002f64:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b20      	cmp	r3, #32
 8002f70:	f040 8217 	bne.w	80033a2 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	2319      	movs	r3, #25
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	497c      	ldr	r1, [pc, #496]	@ (8003170 <HAL_I2C_Master_Receive+0x224>)
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 fb66 	bl	8003650 <I2C_WaitOnFlagUntilTimeout>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	e20a      	b.n	80033a4 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d101      	bne.n	8002f9c <HAL_I2C_Master_Receive+0x50>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	e203      	b.n	80033a4 <HAL_I2C_Master_Receive+0x458>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d007      	beq.n	8002fc2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f042 0201 	orr.w	r2, r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fd0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2222      	movs	r2, #34	@ 0x22
 8002fd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2210      	movs	r2, #16
 8002fde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	893a      	ldrh	r2, [r7, #8]
 8002ff2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	4a5c      	ldr	r2, [pc, #368]	@ (8003174 <HAL_I2C_Master_Receive+0x228>)
 8003002:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003004:	8979      	ldrh	r1, [r7, #10]
 8003006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003008:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 fa52 	bl	80034b4 <I2C_MasterRequestRead>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e1c4      	b.n	80033a4 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800301e:	2b00      	cmp	r3, #0
 8003020:	d113      	bne.n	800304a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003022:	2300      	movs	r3, #0
 8003024:	623b      	str	r3, [r7, #32]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	623b      	str	r3, [r7, #32]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	623b      	str	r3, [r7, #32]
 8003036:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	e198      	b.n	800337c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800304e:	2b01      	cmp	r3, #1
 8003050:	d11b      	bne.n	800308a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003060:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003062:	2300      	movs	r3, #0
 8003064:	61fb      	str	r3, [r7, #28]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	61fb      	str	r3, [r7, #28]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	61fb      	str	r3, [r7, #28]
 8003076:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	e178      	b.n	800337c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800308e:	2b02      	cmp	r3, #2
 8003090:	d11b      	bne.n	80030ca <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030b2:	2300      	movs	r3, #0
 80030b4:	61bb      	str	r3, [r7, #24]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	61bb      	str	r3, [r7, #24]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	61bb      	str	r3, [r7, #24]
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	e158      	b.n	800337c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80030d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030da:	2300      	movs	r3, #0
 80030dc:	617b      	str	r3, [r7, #20]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	617b      	str	r3, [r7, #20]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	617b      	str	r3, [r7, #20]
 80030ee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80030f0:	e144      	b.n	800337c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030f6:	2b03      	cmp	r3, #3
 80030f8:	f200 80f1 	bhi.w	80032de <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003100:	2b01      	cmp	r3, #1
 8003102:	d123      	bne.n	800314c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003104:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003106:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 fc4b 	bl	80039a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e145      	b.n	80033a4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	691a      	ldr	r2, [r3, #16]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003122:	b2d2      	uxtb	r2, r2
 8003124:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312a:	1c5a      	adds	r2, r3, #1
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003134:	3b01      	subs	r3, #1
 8003136:	b29a      	uxth	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003140:	b29b      	uxth	r3, r3
 8003142:	3b01      	subs	r3, #1
 8003144:	b29a      	uxth	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800314a:	e117      	b.n	800337c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003150:	2b02      	cmp	r3, #2
 8003152:	d14e      	bne.n	80031f2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800315a:	2200      	movs	r2, #0
 800315c:	4906      	ldr	r1, [pc, #24]	@ (8003178 <HAL_I2C_Master_Receive+0x22c>)
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 fa76 	bl	8003650 <I2C_WaitOnFlagUntilTimeout>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d008      	beq.n	800317c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e11a      	b.n	80033a4 <HAL_I2C_Master_Receive+0x458>
 800316e:	bf00      	nop
 8003170:	00100002 	.word	0x00100002
 8003174:	ffff0000 	.word	0xffff0000
 8003178:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800318a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	691a      	ldr	r2, [r3, #16]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003196:	b2d2      	uxtb	r2, r2
 8003198:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319e:	1c5a      	adds	r2, r3, #1
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	3b01      	subs	r3, #1
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	691a      	ldr	r2, [r3, #16]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d0:	1c5a      	adds	r2, r3, #1
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031da:	3b01      	subs	r3, #1
 80031dc:	b29a      	uxth	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	3b01      	subs	r3, #1
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80031f0:	e0c4      	b.n	800337c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f8:	2200      	movs	r2, #0
 80031fa:	496c      	ldr	r1, [pc, #432]	@ (80033ac <HAL_I2C_Master_Receive+0x460>)
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f000 fa27 	bl	8003650 <I2C_WaitOnFlagUntilTimeout>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e0cb      	b.n	80033a4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800321a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	691a      	ldr	r2, [r3, #16]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322e:	1c5a      	adds	r2, r3, #1
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003238:	3b01      	subs	r3, #1
 800323a:	b29a      	uxth	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003244:	b29b      	uxth	r3, r3
 8003246:	3b01      	subs	r3, #1
 8003248:	b29a      	uxth	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800324e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003254:	2200      	movs	r2, #0
 8003256:	4955      	ldr	r1, [pc, #340]	@ (80033ac <HAL_I2C_Master_Receive+0x460>)
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 f9f9 	bl	8003650 <I2C_WaitOnFlagUntilTimeout>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e09d      	b.n	80033a4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003276:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	691a      	ldr	r2, [r3, #16]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003282:	b2d2      	uxtb	r2, r2
 8003284:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328a:	1c5a      	adds	r2, r3, #1
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003294:	3b01      	subs	r3, #1
 8003296:	b29a      	uxth	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	3b01      	subs	r3, #1
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032bc:	1c5a      	adds	r2, r3, #1
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032c6:	3b01      	subs	r3, #1
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	3b01      	subs	r3, #1
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80032dc:	e04e      	b.n	800337c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f000 fb5e 	bl	80039a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e058      	b.n	80033a4 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	691a      	ldr	r2, [r3, #16]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fc:	b2d2      	uxtb	r2, r2
 80032fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003304:	1c5a      	adds	r2, r3, #1
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800330e:	3b01      	subs	r3, #1
 8003310:	b29a      	uxth	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800331a:	b29b      	uxth	r3, r3
 800331c:	3b01      	subs	r3, #1
 800331e:	b29a      	uxth	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	f003 0304 	and.w	r3, r3, #4
 800332e:	2b04      	cmp	r3, #4
 8003330:	d124      	bne.n	800337c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003336:	2b03      	cmp	r3, #3
 8003338:	d107      	bne.n	800334a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003348:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	691a      	ldr	r2, [r3, #16]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003354:	b2d2      	uxtb	r2, r2
 8003356:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335c:	1c5a      	adds	r2, r3, #1
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003366:	3b01      	subs	r3, #1
 8003368:	b29a      	uxth	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003372:	b29b      	uxth	r3, r3
 8003374:	3b01      	subs	r3, #1
 8003376:	b29a      	uxth	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003380:	2b00      	cmp	r3, #0
 8003382:	f47f aeb6 	bne.w	80030f2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2220      	movs	r2, #32
 800338a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800339e:	2300      	movs	r3, #0
 80033a0:	e000      	b.n	80033a4 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80033a2:	2302      	movs	r3, #2
  }
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3728      	adds	r7, #40	@ 0x28
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	00010004 	.word	0x00010004

080033b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b088      	sub	sp, #32
 80033b4:	af02      	add	r7, sp, #8
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	607a      	str	r2, [r7, #4]
 80033ba:	603b      	str	r3, [r7, #0]
 80033bc:	460b      	mov	r3, r1
 80033be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	2b08      	cmp	r3, #8
 80033ca:	d006      	beq.n	80033da <I2C_MasterRequestWrite+0x2a>
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d003      	beq.n	80033da <I2C_MasterRequestWrite+0x2a>
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80033d8:	d108      	bne.n	80033ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	e00b      	b.n	8003404 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f0:	2b12      	cmp	r3, #18
 80033f2:	d107      	bne.n	8003404 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003402:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	9300      	str	r3, [sp, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f000 f91d 	bl	8003650 <I2C_WaitOnFlagUntilTimeout>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00d      	beq.n	8003438 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003426:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800342a:	d103      	bne.n	8003434 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003432:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e035      	b.n	80034a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003440:	d108      	bne.n	8003454 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003442:	897b      	ldrh	r3, [r7, #10]
 8003444:	b2db      	uxtb	r3, r3
 8003446:	461a      	mov	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003450:	611a      	str	r2, [r3, #16]
 8003452:	e01b      	b.n	800348c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003454:	897b      	ldrh	r3, [r7, #10]
 8003456:	11db      	asrs	r3, r3, #7
 8003458:	b2db      	uxtb	r3, r3
 800345a:	f003 0306 	and.w	r3, r3, #6
 800345e:	b2db      	uxtb	r3, r3
 8003460:	f063 030f 	orn	r3, r3, #15
 8003464:	b2da      	uxtb	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	490e      	ldr	r1, [pc, #56]	@ (80034ac <I2C_MasterRequestWrite+0xfc>)
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 f966 	bl	8003744 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e010      	b.n	80034a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003482:	897b      	ldrh	r3, [r7, #10]
 8003484:	b2da      	uxtb	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	4907      	ldr	r1, [pc, #28]	@ (80034b0 <I2C_MasterRequestWrite+0x100>)
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f000 f956 	bl	8003744 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e000      	b.n	80034a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	00010008 	.word	0x00010008
 80034b0:	00010002 	.word	0x00010002

080034b4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b088      	sub	sp, #32
 80034b8:	af02      	add	r7, sp, #8
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	607a      	str	r2, [r7, #4]
 80034be:	603b      	str	r3, [r7, #0]
 80034c0:	460b      	mov	r3, r1
 80034c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80034d8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	2b08      	cmp	r3, #8
 80034de:	d006      	beq.n	80034ee <I2C_MasterRequestRead+0x3a>
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d003      	beq.n	80034ee <I2C_MasterRequestRead+0x3a>
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80034ec:	d108      	bne.n	8003500 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	e00b      	b.n	8003518 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003504:	2b11      	cmp	r3, #17
 8003506:	d107      	bne.n	8003518 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003516:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 f893 	bl	8003650 <I2C_WaitOnFlagUntilTimeout>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00d      	beq.n	800354c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800353a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800353e:	d103      	bne.n	8003548 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003546:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e079      	b.n	8003640 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003554:	d108      	bne.n	8003568 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003556:	897b      	ldrh	r3, [r7, #10]
 8003558:	b2db      	uxtb	r3, r3
 800355a:	f043 0301 	orr.w	r3, r3, #1
 800355e:	b2da      	uxtb	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	611a      	str	r2, [r3, #16]
 8003566:	e05f      	b.n	8003628 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003568:	897b      	ldrh	r3, [r7, #10]
 800356a:	11db      	asrs	r3, r3, #7
 800356c:	b2db      	uxtb	r3, r3
 800356e:	f003 0306 	and.w	r3, r3, #6
 8003572:	b2db      	uxtb	r3, r3
 8003574:	f063 030f 	orn	r3, r3, #15
 8003578:	b2da      	uxtb	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	4930      	ldr	r1, [pc, #192]	@ (8003648 <I2C_MasterRequestRead+0x194>)
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 f8dc 	bl	8003744 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e054      	b.n	8003640 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003596:	897b      	ldrh	r3, [r7, #10]
 8003598:	b2da      	uxtb	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	4929      	ldr	r1, [pc, #164]	@ (800364c <I2C_MasterRequestRead+0x198>)
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 f8cc 	bl	8003744 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e044      	b.n	8003640 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035b6:	2300      	movs	r3, #0
 80035b8:	613b      	str	r3, [r7, #16]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	613b      	str	r3, [r7, #16]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	613b      	str	r3, [r7, #16]
 80035ca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035da:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 f831 	bl	8003650 <I2C_WaitOnFlagUntilTimeout>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00d      	beq.n	8003610 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003602:	d103      	bne.n	800360c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800360a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e017      	b.n	8003640 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003610:	897b      	ldrh	r3, [r7, #10]
 8003612:	11db      	asrs	r3, r3, #7
 8003614:	b2db      	uxtb	r3, r3
 8003616:	f003 0306 	and.w	r3, r3, #6
 800361a:	b2db      	uxtb	r3, r3
 800361c:	f063 030e 	orn	r3, r3, #14
 8003620:	b2da      	uxtb	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	4907      	ldr	r1, [pc, #28]	@ (800364c <I2C_MasterRequestRead+0x198>)
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 f888 	bl	8003744 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e000      	b.n	8003640 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3718      	adds	r7, #24
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	00010008 	.word	0x00010008
 800364c:	00010002 	.word	0x00010002

08003650 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	603b      	str	r3, [r7, #0]
 800365c:	4613      	mov	r3, r2
 800365e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003660:	e048      	b.n	80036f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003668:	d044      	beq.n	80036f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800366a:	f7fd ffbb 	bl	80015e4 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	429a      	cmp	r2, r3
 8003678:	d302      	bcc.n	8003680 <I2C_WaitOnFlagUntilTimeout+0x30>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d139      	bne.n	80036f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	0c1b      	lsrs	r3, r3, #16
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b01      	cmp	r3, #1
 8003688:	d10d      	bne.n	80036a6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	43da      	mvns	r2, r3
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	4013      	ands	r3, r2
 8003696:	b29b      	uxth	r3, r3
 8003698:	2b00      	cmp	r3, #0
 800369a:	bf0c      	ite	eq
 800369c:	2301      	moveq	r3, #1
 800369e:	2300      	movne	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	461a      	mov	r2, r3
 80036a4:	e00c      	b.n	80036c0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	43da      	mvns	r2, r3
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	4013      	ands	r3, r2
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	bf0c      	ite	eq
 80036b8:	2301      	moveq	r3, #1
 80036ba:	2300      	movne	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	461a      	mov	r2, r3
 80036c0:	79fb      	ldrb	r3, [r7, #7]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d116      	bne.n	80036f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e0:	f043 0220 	orr.w	r2, r3, #32
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e023      	b.n	800373c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	0c1b      	lsrs	r3, r3, #16
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d10d      	bne.n	800371a <I2C_WaitOnFlagUntilTimeout+0xca>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	43da      	mvns	r2, r3
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	4013      	ands	r3, r2
 800370a:	b29b      	uxth	r3, r3
 800370c:	2b00      	cmp	r3, #0
 800370e:	bf0c      	ite	eq
 8003710:	2301      	moveq	r3, #1
 8003712:	2300      	movne	r3, #0
 8003714:	b2db      	uxtb	r3, r3
 8003716:	461a      	mov	r2, r3
 8003718:	e00c      	b.n	8003734 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	43da      	mvns	r2, r3
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	4013      	ands	r3, r2
 8003726:	b29b      	uxth	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	bf0c      	ite	eq
 800372c:	2301      	moveq	r3, #1
 800372e:	2300      	movne	r3, #0
 8003730:	b2db      	uxtb	r3, r3
 8003732:	461a      	mov	r2, r3
 8003734:	79fb      	ldrb	r3, [r7, #7]
 8003736:	429a      	cmp	r2, r3
 8003738:	d093      	beq.n	8003662 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
 8003750:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003752:	e071      	b.n	8003838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800375e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003762:	d123      	bne.n	80037ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003772:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800377c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2220      	movs	r2, #32
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003798:	f043 0204 	orr.w	r2, r3, #4
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e067      	b.n	800387c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b2:	d041      	beq.n	8003838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037b4:	f7fd ff16 	bl	80015e4 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d302      	bcc.n	80037ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d136      	bne.n	8003838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	0c1b      	lsrs	r3, r3, #16
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d10c      	bne.n	80037ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	43da      	mvns	r2, r3
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	4013      	ands	r3, r2
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	bf14      	ite	ne
 80037e6:	2301      	movne	r3, #1
 80037e8:	2300      	moveq	r3, #0
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	e00b      	b.n	8003806 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	43da      	mvns	r2, r3
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	4013      	ands	r3, r2
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	bf14      	ite	ne
 8003800:	2301      	movne	r3, #1
 8003802:	2300      	moveq	r3, #0
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d016      	beq.n	8003838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003824:	f043 0220 	orr.w	r2, r3, #32
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e021      	b.n	800387c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	0c1b      	lsrs	r3, r3, #16
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b01      	cmp	r3, #1
 8003840:	d10c      	bne.n	800385c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	43da      	mvns	r2, r3
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	4013      	ands	r3, r2
 800384e:	b29b      	uxth	r3, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	bf14      	ite	ne
 8003854:	2301      	movne	r3, #1
 8003856:	2300      	moveq	r3, #0
 8003858:	b2db      	uxtb	r3, r3
 800385a:	e00b      	b.n	8003874 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	43da      	mvns	r2, r3
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	4013      	ands	r3, r2
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	bf14      	ite	ne
 800386e:	2301      	movne	r3, #1
 8003870:	2300      	moveq	r3, #0
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	f47f af6d 	bne.w	8003754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003890:	e034      	b.n	80038fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f000 f8e3 	bl	8003a5e <I2C_IsAcknowledgeFailed>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e034      	b.n	800390c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a8:	d028      	beq.n	80038fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038aa:	f7fd fe9b 	bl	80015e4 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d302      	bcc.n	80038c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d11d      	bne.n	80038fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ca:	2b80      	cmp	r3, #128	@ 0x80
 80038cc:	d016      	beq.n	80038fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e8:	f043 0220 	orr.w	r2, r3, #32
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e007      	b.n	800390c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003906:	2b80      	cmp	r3, #128	@ 0x80
 8003908:	d1c3      	bne.n	8003892 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003920:	e034      	b.n	800398c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f000 f89b 	bl	8003a5e <I2C_IsAcknowledgeFailed>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e034      	b.n	800399c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003938:	d028      	beq.n	800398c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800393a:	f7fd fe53 	bl	80015e4 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	429a      	cmp	r2, r3
 8003948:	d302      	bcc.n	8003950 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d11d      	bne.n	800398c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	f003 0304 	and.w	r3, r3, #4
 800395a:	2b04      	cmp	r3, #4
 800395c:	d016      	beq.n	800398c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003978:	f043 0220 	orr.w	r2, r3, #32
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e007      	b.n	800399c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	f003 0304 	and.w	r3, r3, #4
 8003996:	2b04      	cmp	r3, #4
 8003998:	d1c3      	bne.n	8003922 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039b0:	e049      	b.n	8003a46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	f003 0310 	and.w	r3, r3, #16
 80039bc:	2b10      	cmp	r3, #16
 80039be:	d119      	bne.n	80039f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f06f 0210 	mvn.w	r2, #16
 80039c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2220      	movs	r2, #32
 80039d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e030      	b.n	8003a56 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039f4:	f7fd fdf6 	bl	80015e4 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d302      	bcc.n	8003a0a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d11d      	bne.n	8003a46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a14:	2b40      	cmp	r3, #64	@ 0x40
 8003a16:	d016      	beq.n	8003a46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a32:	f043 0220 	orr.w	r2, r3, #32
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e007      	b.n	8003a56 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a50:	2b40      	cmp	r3, #64	@ 0x40
 8003a52:	d1ae      	bne.n	80039b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a74:	d11b      	bne.n	8003aae <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a7e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9a:	f043 0204 	orr.w	r2, r3, #4
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e000      	b.n	8003ab0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b088      	sub	sp, #32
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e128      	b.n	8003d20 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d109      	bne.n	8003aee <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a90      	ldr	r2, [pc, #576]	@ (8003d28 <HAL_I2S_Init+0x26c>)
 8003ae6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f7fd f8eb 	bl	8000cc4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2202      	movs	r2, #2
 8003af2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	69db      	ldr	r3, [r3, #28]
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6812      	ldr	r2, [r2, #0]
 8003b00:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003b04:	f023 030f 	bic.w	r3, r3, #15
 8003b08:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d060      	beq.n	8003bdc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d102      	bne.n	8003b28 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003b22:	2310      	movs	r3, #16
 8003b24:	617b      	str	r3, [r7, #20]
 8003b26:	e001      	b.n	8003b2c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003b28:	2320      	movs	r3, #32
 8003b2a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	2b20      	cmp	r3, #32
 8003b32:	d802      	bhi.n	8003b3a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003b3a:	2001      	movs	r0, #1
 8003b3c:	f001 fcda 	bl	80054f4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003b40:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b4a:	d125      	bne.n	8003b98 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d010      	beq.n	8003b76 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b5e:	4613      	mov	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	461a      	mov	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b70:	3305      	adds	r3, #5
 8003b72:	613b      	str	r3, [r7, #16]
 8003b74:	e01f      	b.n	8003bb6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	00db      	lsls	r3, r3, #3
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b80:	4613      	mov	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	461a      	mov	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b92:	3305      	adds	r3, #5
 8003b94:	613b      	str	r3, [r7, #16]
 8003b96:	e00e      	b.n	8003bb6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4413      	add	r3, r2
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	461a      	mov	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb2:	3305      	adds	r3, #5
 8003bb4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	4a5c      	ldr	r2, [pc, #368]	@ (8003d2c <HAL_I2S_Init+0x270>)
 8003bba:	fba2 2303 	umull	r2, r3, r2, r3
 8003bbe:	08db      	lsrs	r3, r3, #3
 8003bc0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	085b      	lsrs	r3, r3, #1
 8003bd2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	021b      	lsls	r3, r3, #8
 8003bd8:	61bb      	str	r3, [r7, #24]
 8003bda:	e003      	b.n	8003be4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003bdc:	2302      	movs	r3, #2
 8003bde:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d902      	bls.n	8003bf0 <HAL_I2S_Init+0x134>
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	2bff      	cmp	r3, #255	@ 0xff
 8003bee:	d907      	bls.n	8003c00 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bf4:	f043 0210 	orr.w	r2, r3, #16
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e08f      	b.n	8003d20 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691a      	ldr	r2, [r3, #16]
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	ea42 0103 	orr.w	r1, r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	69fa      	ldr	r2, [r7, #28]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003c1e:	f023 030f 	bic.w	r3, r3, #15
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	6851      	ldr	r1, [r2, #4]
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	6892      	ldr	r2, [r2, #8]
 8003c2a:	4311      	orrs	r1, r2
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	68d2      	ldr	r2, [r2, #12]
 8003c30:	4311      	orrs	r1, r2
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6992      	ldr	r2, [r2, #24]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c42:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d161      	bne.n	8003d10 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a38      	ldr	r2, [pc, #224]	@ (8003d30 <HAL_I2S_Init+0x274>)
 8003c50:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a37      	ldr	r2, [pc, #220]	@ (8003d34 <HAL_I2S_Init+0x278>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d101      	bne.n	8003c60 <HAL_I2S_Init+0x1a4>
 8003c5c:	4b36      	ldr	r3, [pc, #216]	@ (8003d38 <HAL_I2S_Init+0x27c>)
 8003c5e:	e001      	b.n	8003c64 <HAL_I2S_Init+0x1a8>
 8003c60:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6812      	ldr	r2, [r2, #0]
 8003c6a:	4932      	ldr	r1, [pc, #200]	@ (8003d34 <HAL_I2S_Init+0x278>)
 8003c6c:	428a      	cmp	r2, r1
 8003c6e:	d101      	bne.n	8003c74 <HAL_I2S_Init+0x1b8>
 8003c70:	4a31      	ldr	r2, [pc, #196]	@ (8003d38 <HAL_I2S_Init+0x27c>)
 8003c72:	e001      	b.n	8003c78 <HAL_I2S_Init+0x1bc>
 8003c74:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003c78:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003c7c:	f023 030f 	bic.w	r3, r3, #15
 8003c80:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a2b      	ldr	r2, [pc, #172]	@ (8003d34 <HAL_I2S_Init+0x278>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d101      	bne.n	8003c90 <HAL_I2S_Init+0x1d4>
 8003c8c:	4b2a      	ldr	r3, [pc, #168]	@ (8003d38 <HAL_I2S_Init+0x27c>)
 8003c8e:	e001      	b.n	8003c94 <HAL_I2S_Init+0x1d8>
 8003c90:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c94:	2202      	movs	r2, #2
 8003c96:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a25      	ldr	r2, [pc, #148]	@ (8003d34 <HAL_I2S_Init+0x278>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d101      	bne.n	8003ca6 <HAL_I2S_Init+0x1ea>
 8003ca2:	4b25      	ldr	r3, [pc, #148]	@ (8003d38 <HAL_I2S_Init+0x27c>)
 8003ca4:	e001      	b.n	8003caa <HAL_I2S_Init+0x1ee>
 8003ca6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cb6:	d003      	beq.n	8003cc0 <HAL_I2S_Init+0x204>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d103      	bne.n	8003cc8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003cc0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003cc4:	613b      	str	r3, [r7, #16]
 8003cc6:	e001      	b.n	8003ccc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003cea:	4313      	orrs	r3, r2
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	897b      	ldrh	r3, [r7, #10]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003cf8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a0d      	ldr	r2, [pc, #52]	@ (8003d34 <HAL_I2S_Init+0x278>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d101      	bne.n	8003d08 <HAL_I2S_Init+0x24c>
 8003d04:	4b0c      	ldr	r3, [pc, #48]	@ (8003d38 <HAL_I2S_Init+0x27c>)
 8003d06:	e001      	b.n	8003d0c <HAL_I2S_Init+0x250>
 8003d08:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d0c:	897a      	ldrh	r2, [r7, #10]
 8003d0e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3720      	adds	r7, #32
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	080043c5 	.word	0x080043c5
 8003d2c:	cccccccd 	.word	0xcccccccd
 8003d30:	0800454d 	.word	0x0800454d
 8003d34:	40003800 	.word	0x40003800
 8003d38:	40003400 	.word	0x40003400

08003d3c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	4613      	mov	r3, r2
 8003d48:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d002      	beq.n	8003d56 <HAL_I2S_Transmit_DMA+0x1a>
 8003d50:	88fb      	ldrh	r3, [r7, #6]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e08a      	b.n	8003e70 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d001      	beq.n	8003d6a <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8003d66:	2302      	movs	r3, #2
 8003d68:	e082      	b.n	8003e70 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d101      	bne.n	8003d7a <HAL_I2S_Transmit_DMA+0x3e>
 8003d76:	2302      	movs	r3, #2
 8003d78:	e07a      	b.n	8003e70 <HAL_I2S_Transmit_DMA+0x134>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2203      	movs	r2, #3
 8003d86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	68ba      	ldr	r2, [r7, #8]
 8003d94:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2b03      	cmp	r3, #3
 8003da6:	d002      	beq.n	8003dae <HAL_I2S_Transmit_DMA+0x72>
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	2b05      	cmp	r3, #5
 8003dac:	d10a      	bne.n	8003dc4 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 8003dae:	88fb      	ldrh	r3, [r7, #6]
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003db8:	88fb      	ldrh	r3, [r7, #6]
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003dc2:	e005      	b.n	8003dd0 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	88fa      	ldrh	r2, [r7, #6]
 8003dc8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	88fa      	ldrh	r2, [r7, #6]
 8003dce:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd4:	4a28      	ldr	r2, [pc, #160]	@ (8003e78 <HAL_I2S_Transmit_DMA+0x13c>)
 8003dd6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ddc:	4a27      	ldr	r2, [pc, #156]	@ (8003e7c <HAL_I2S_Transmit_DMA+0x140>)
 8003dde:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003de4:	4a26      	ldr	r2, [pc, #152]	@ (8003e80 <HAL_I2S_Transmit_DMA+0x144>)
 8003de6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003df0:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003df8:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dfe:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003e00:	f7fe f93e 	bl	8002080 <HAL_DMA_Start_IT>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00f      	beq.n	8003e2a <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e0e:	f043 0208 	orr.w	r2, r3, #8
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e022      	b.n	8003e70 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d107      	bne.n	8003e50 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	685a      	ldr	r2, [r3, #4]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0202 	orr.w	r2, r2, #2
 8003e4e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d107      	bne.n	8003e6e <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	69da      	ldr	r2, [r3, #28]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e6c:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3718      	adds	r7, #24
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	080042a3 	.word	0x080042a3
 8003e7c:	08004261 	.word	0x08004261
 8003e80:	080042bf 	.word	0x080042bf

08003e84 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b088      	sub	sp, #32
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e98:	d004      	beq.n	8003ea4 <HAL_I2S_DMAStop+0x20>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f040 80d1 	bne.w	8004046 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00f      	beq.n	8003ecc <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7fe f93d 	bl	8002130 <HAL_DMA_Abort>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d007      	beq.n	8003ecc <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec0:	f043 0208 	orr.w	r2, r3, #8
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8003ecc:	2364      	movs	r3, #100	@ 0x64
 8003ece:	2201      	movs	r2, #1
 8003ed0:	2102      	movs	r1, #2
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 fb00 	bl	80044d8 <I2S_WaitFlagStateUntilTimeout>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00b      	beq.n	8003ef6 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee2:	f043 0201 	orr.w	r2, r3, #1
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8003ef6:	2364      	movs	r3, #100	@ 0x64
 8003ef8:	2200      	movs	r2, #0
 8003efa:	2180      	movs	r1, #128	@ 0x80
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 faeb 	bl	80044d8 <I2S_WaitFlagStateUntilTimeout>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00b      	beq.n	8003f20 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f0c:	f043 0201 	orr.w	r2, r3, #1
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	69da      	ldr	r2, [r3, #28]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f2e:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f30:	2300      	movs	r3, #0
 8003f32:	617b      	str	r3, [r7, #20]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	617b      	str	r3, [r7, #20]
 8003f3c:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 0202 	bic.w	r2, r2, #2
 8003f4c:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b05      	cmp	r3, #5
 8003f58:	f040 8165 	bne.w	8004226 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00f      	beq.n	8003f84 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7fe f8e1 	bl	8002130 <HAL_DMA_Abort>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d007      	beq.n	8003f84 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f78:	f043 0208 	orr.w	r2, r3, #8
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a8a      	ldr	r2, [pc, #552]	@ (80041b4 <HAL_I2S_DMAStop+0x330>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d101      	bne.n	8003f92 <HAL_I2S_DMAStop+0x10e>
 8003f8e:	4b8a      	ldr	r3, [pc, #552]	@ (80041b8 <HAL_I2S_DMAStop+0x334>)
 8003f90:	e001      	b.n	8003f96 <HAL_I2S_DMAStop+0x112>
 8003f92:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f96:	69da      	ldr	r2, [r3, #28]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4985      	ldr	r1, [pc, #532]	@ (80041b4 <HAL_I2S_DMAStop+0x330>)
 8003f9e:	428b      	cmp	r3, r1
 8003fa0:	d101      	bne.n	8003fa6 <HAL_I2S_DMAStop+0x122>
 8003fa2:	4b85      	ldr	r3, [pc, #532]	@ (80041b8 <HAL_I2S_DMAStop+0x334>)
 8003fa4:	e001      	b.n	8003faa <HAL_I2S_DMAStop+0x126>
 8003fa6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003faa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fae:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	613b      	str	r3, [r7, #16]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a7e      	ldr	r2, [pc, #504]	@ (80041b4 <HAL_I2S_DMAStop+0x330>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d101      	bne.n	8003fc2 <HAL_I2S_DMAStop+0x13e>
 8003fbe:	4b7e      	ldr	r3, [pc, #504]	@ (80041b8 <HAL_I2S_DMAStop+0x334>)
 8003fc0:	e001      	b.n	8003fc6 <HAL_I2S_DMAStop+0x142>
 8003fc2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	613b      	str	r3, [r7, #16]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a79      	ldr	r2, [pc, #484]	@ (80041b4 <HAL_I2S_DMAStop+0x330>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d101      	bne.n	8003fd8 <HAL_I2S_DMAStop+0x154>
 8003fd4:	4b78      	ldr	r3, [pc, #480]	@ (80041b8 <HAL_I2S_DMAStop+0x334>)
 8003fd6:	e001      	b.n	8003fdc <HAL_I2S_DMAStop+0x158>
 8003fd8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	613b      	str	r3, [r7, #16]
 8003fe0:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a73      	ldr	r2, [pc, #460]	@ (80041b4 <HAL_I2S_DMAStop+0x330>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d101      	bne.n	8003ff0 <HAL_I2S_DMAStop+0x16c>
 8003fec:	4b72      	ldr	r3, [pc, #456]	@ (80041b8 <HAL_I2S_DMAStop+0x334>)
 8003fee:	e001      	b.n	8003ff4 <HAL_I2S_DMAStop+0x170>
 8003ff0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	496e      	ldr	r1, [pc, #440]	@ (80041b4 <HAL_I2S_DMAStop+0x330>)
 8003ffc:	428b      	cmp	r3, r1
 8003ffe:	d101      	bne.n	8004004 <HAL_I2S_DMAStop+0x180>
 8004000:	4b6d      	ldr	r3, [pc, #436]	@ (80041b8 <HAL_I2S_DMAStop+0x334>)
 8004002:	e001      	b.n	8004008 <HAL_I2S_DMAStop+0x184>
 8004004:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004008:	f022 0201 	bic.w	r2, r2, #1
 800400c:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10c      	bne.n	8004030 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        errorcode = HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800402e:	e0fa      	b.n	8004226 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a5f      	ldr	r2, [pc, #380]	@ (80041b4 <HAL_I2S_DMAStop+0x330>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d101      	bne.n	800403e <HAL_I2S_DMAStop+0x1ba>
 800403a:	4b5f      	ldr	r3, [pc, #380]	@ (80041b8 <HAL_I2S_DMAStop+0x334>)
 800403c:	e001      	b.n	8004042 <HAL_I2S_DMAStop+0x1be>
 800403e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004042:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8004044:	e0ef      	b.n	8004226 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800404e:	d005      	beq.n	800405c <HAL_I2S_DMAStop+0x1d8>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004058:	f040 80e5 	bne.w	8004226 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00f      	beq.n	8004084 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004068:	4618      	mov	r0, r3
 800406a:	f7fe f861 	bl	8002130 <HAL_DMA_Abort>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d007      	beq.n	8004084 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004078:	f043 0208 	orr.w	r2, r3, #8
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b05      	cmp	r3, #5
 800408e:	f040 809a 	bne.w	80041c6 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00f      	beq.n	80040ba <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fe f846 	bl	8002130 <HAL_DMA_Abort>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d007      	beq.n	80040ba <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ae:	f043 0208 	orr.w	r2, r3, #8
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 80040ba:	f7fd fa93 	bl	80015e4 <HAL_GetTick>
 80040be:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80040c0:	e012      	b.n	80040e8 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80040c2:	f7fd fa8f 	bl	80015e4 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b64      	cmp	r3, #100	@ 0x64
 80040ce:	d90b      	bls.n	80040e8 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d4:	f043 0201 	orr.w	r2, r3, #1
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a31      	ldr	r2, [pc, #196]	@ (80041b4 <HAL_I2S_DMAStop+0x330>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d101      	bne.n	80040f6 <HAL_I2S_DMAStop+0x272>
 80040f2:	4b31      	ldr	r3, [pc, #196]	@ (80041b8 <HAL_I2S_DMAStop+0x334>)
 80040f4:	e001      	b.n	80040fa <HAL_I2S_DMAStop+0x276>
 80040f6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b02      	cmp	r3, #2
 8004102:	d1de      	bne.n	80040c2 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8004104:	e012      	b.n	800412c <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8004106:	f7fd fa6d 	bl	80015e4 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b64      	cmp	r3, #100	@ 0x64
 8004112:	d90b      	bls.n	800412c <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004118:	f043 0201 	orr.w	r2, r3, #1
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a20      	ldr	r2, [pc, #128]	@ (80041b4 <HAL_I2S_DMAStop+0x330>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d101      	bne.n	800413a <HAL_I2S_DMAStop+0x2b6>
 8004136:	4b20      	ldr	r3, [pc, #128]	@ (80041b8 <HAL_I2S_DMAStop+0x334>)
 8004138:	e001      	b.n	800413e <HAL_I2S_DMAStop+0x2ba>
 800413a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004144:	2b80      	cmp	r3, #128	@ 0x80
 8004146:	d0de      	beq.n	8004106 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a19      	ldr	r2, [pc, #100]	@ (80041b4 <HAL_I2S_DMAStop+0x330>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d101      	bne.n	8004156 <HAL_I2S_DMAStop+0x2d2>
 8004152:	4b19      	ldr	r3, [pc, #100]	@ (80041b8 <HAL_I2S_DMAStop+0x334>)
 8004154:	e001      	b.n	800415a <HAL_I2S_DMAStop+0x2d6>
 8004156:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800415a:	69da      	ldr	r2, [r3, #28]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4914      	ldr	r1, [pc, #80]	@ (80041b4 <HAL_I2S_DMAStop+0x330>)
 8004162:	428b      	cmp	r3, r1
 8004164:	d101      	bne.n	800416a <HAL_I2S_DMAStop+0x2e6>
 8004166:	4b14      	ldr	r3, [pc, #80]	@ (80041b8 <HAL_I2S_DMAStop+0x334>)
 8004168:	e001      	b.n	800416e <HAL_I2S_DMAStop+0x2ea>
 800416a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800416e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004172:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8004174:	2300      	movs	r3, #0
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a0d      	ldr	r2, [pc, #52]	@ (80041b4 <HAL_I2S_DMAStop+0x330>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d101      	bne.n	8004186 <HAL_I2S_DMAStop+0x302>
 8004182:	4b0d      	ldr	r3, [pc, #52]	@ (80041b8 <HAL_I2S_DMAStop+0x334>)
 8004184:	e001      	b.n	800418a <HAL_I2S_DMAStop+0x306>
 8004186:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	60fb      	str	r3, [r7, #12]
 800418e:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a07      	ldr	r2, [pc, #28]	@ (80041b4 <HAL_I2S_DMAStop+0x330>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d101      	bne.n	800419e <HAL_I2S_DMAStop+0x31a>
 800419a:	4b07      	ldr	r3, [pc, #28]	@ (80041b8 <HAL_I2S_DMAStop+0x334>)
 800419c:	e001      	b.n	80041a2 <HAL_I2S_DMAStop+0x31e>
 800419e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4902      	ldr	r1, [pc, #8]	@ (80041b4 <HAL_I2S_DMAStop+0x330>)
 80041aa:	428b      	cmp	r3, r1
 80041ac:	d106      	bne.n	80041bc <HAL_I2S_DMAStop+0x338>
 80041ae:	4b02      	ldr	r3, [pc, #8]	@ (80041b8 <HAL_I2S_DMAStop+0x334>)
 80041b0:	e006      	b.n	80041c0 <HAL_I2S_DMAStop+0x33c>
 80041b2:	bf00      	nop
 80041b4:	40003800 	.word	0x40003800
 80041b8:	40003400 	.word	0x40003400
 80041bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041c0:	f022 0202 	bic.w	r2, r2, #2
 80041c4:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	69da      	ldr	r2, [r3, #28]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041d4:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80041d6:	2300      	movs	r3, #0
 80041d8:	60bb      	str	r3, [r7, #8]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	60bb      	str	r3, [r7, #8]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	60bb      	str	r3, [r7, #8]
 80041ea:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 0201 	bic.w	r2, r2, #1
 80041fa:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004204:	d10c      	bne.n	8004220 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800420a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	77fb      	strb	r3, [r7, #31]
 800421e:	e002      	b.n	8004226 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return errorcode;
 800422e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004230:	4618      	mov	r0, r3
 8004232:	3720      	adds	r7, #32
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800426c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10e      	bne.n	8004294 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 0202 	bic.w	r2, r2, #2
 8004284:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f004 f91d 	bl	80084d4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800429a:	bf00      	nop
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b084      	sub	sp, #16
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ae:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f004 f8ff 	bl	80084b4 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80042b6:	bf00      	nop
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b084      	sub	sp, #16
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ca:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 0203 	bic.w	r2, r2, #3
 80042da:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042f4:	f043 0208 	orr.w	r2, r3, #8
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f7ff ffa5 	bl	800424c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004302:	bf00      	nop
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b082      	sub	sp, #8
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004316:	881a      	ldrh	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004322:	1c9a      	adds	r2, r3, #2
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800432c:	b29b      	uxth	r3, r3
 800432e:	3b01      	subs	r3, #1
 8004330:	b29a      	uxth	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800433a:	b29b      	uxth	r3, r3
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10e      	bne.n	800435e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800434e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f004 f8bb 	bl	80084d4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800435e:	bf00      	nop
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b082      	sub	sp, #8
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004378:	b292      	uxth	r2, r2
 800437a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004380:	1c9a      	adds	r2, r3, #2
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800438a:	b29b      	uxth	r3, r3
 800438c:	3b01      	subs	r3, #1
 800438e:	b29a      	uxth	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004398:	b29b      	uxth	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10e      	bne.n	80043bc <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80043ac:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7ff ff3e 	bl	8004238 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80043bc:	bf00      	nop
 80043be:	3708      	adds	r7, #8
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	2b04      	cmp	r3, #4
 80043de:	d13a      	bne.n	8004456 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d109      	bne.n	80043fe <I2S_IRQHandler+0x3a>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043f4:	2b40      	cmp	r3, #64	@ 0x40
 80043f6:	d102      	bne.n	80043fe <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f7ff ffb4 	bl	8004366 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004404:	2b40      	cmp	r3, #64	@ 0x40
 8004406:	d126      	bne.n	8004456 <I2S_IRQHandler+0x92>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f003 0320 	and.w	r3, r3, #32
 8004412:	2b20      	cmp	r3, #32
 8004414:	d11f      	bne.n	8004456 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004424:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004426:	2300      	movs	r3, #0
 8004428:	613b      	str	r3, [r7, #16]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	613b      	str	r3, [r7, #16]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	613b      	str	r3, [r7, #16]
 800443a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004448:	f043 0202 	orr.w	r2, r3, #2
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f7ff fefb 	bl	800424c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b03      	cmp	r3, #3
 8004460:	d136      	bne.n	80044d0 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f003 0302 	and.w	r3, r3, #2
 8004468:	2b02      	cmp	r3, #2
 800446a:	d109      	bne.n	8004480 <I2S_IRQHandler+0xbc>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004476:	2b80      	cmp	r3, #128	@ 0x80
 8004478:	d102      	bne.n	8004480 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7ff ff45 	bl	800430a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f003 0308 	and.w	r3, r3, #8
 8004486:	2b08      	cmp	r3, #8
 8004488:	d122      	bne.n	80044d0 <I2S_IRQHandler+0x10c>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f003 0320 	and.w	r3, r3, #32
 8004494:	2b20      	cmp	r3, #32
 8004496:	d11b      	bne.n	80044d0 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80044a6:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80044a8:	2300      	movs	r3, #0
 80044aa:	60fb      	str	r3, [r7, #12]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	60fb      	str	r3, [r7, #12]
 80044b4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044c2:	f043 0204 	orr.w	r2, r3, #4
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7ff febe 	bl	800424c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044d0:	bf00      	nop
 80044d2:	3718      	adds	r7, #24
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	603b      	str	r3, [r7, #0]
 80044e4:	4613      	mov	r3, r2
 80044e6:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80044e8:	f7fd f87c 	bl	80015e4 <HAL_GetTick>
 80044ec:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80044ee:	e018      	b.n	8004522 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f6:	d014      	beq.n	8004522 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80044f8:	f7fd f874 	bl	80015e4 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	683a      	ldr	r2, [r7, #0]
 8004504:	429a      	cmp	r2, r3
 8004506:	d902      	bls.n	800450e <I2S_WaitFlagStateUntilTimeout+0x36>
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d109      	bne.n	8004522 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2201      	movs	r2, #1
 8004512:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e00f      	b.n	8004542 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	4013      	ands	r3, r2
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	429a      	cmp	r2, r3
 8004530:	bf0c      	ite	eq
 8004532:	2301      	moveq	r3, #1
 8004534:	2300      	movne	r3, #0
 8004536:	b2db      	uxtb	r3, r3
 8004538:	461a      	mov	r2, r3
 800453a:	79fb      	ldrb	r3, [r7, #7]
 800453c:	429a      	cmp	r2, r3
 800453e:	d1d7      	bne.n	80044f0 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3718      	adds	r7, #24
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
	...

0800454c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b088      	sub	sp, #32
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a92      	ldr	r2, [pc, #584]	@ (80047ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d101      	bne.n	800456a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004566:	4b92      	ldr	r3, [pc, #584]	@ (80047b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004568:	e001      	b.n	800456e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800456a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a8b      	ldr	r2, [pc, #556]	@ (80047ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d101      	bne.n	8004588 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004584:	4b8a      	ldr	r3, [pc, #552]	@ (80047b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004586:	e001      	b.n	800458c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004588:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004598:	d004      	beq.n	80045a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f040 8099 	bne.w	80046d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d107      	bne.n	80045be <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d002      	beq.n	80045be <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 f925 	bl	8004808 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d107      	bne.n	80045d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d002      	beq.n	80045d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f9c8 	bl	8004968 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045de:	2b40      	cmp	r3, #64	@ 0x40
 80045e0:	d13a      	bne.n	8004658 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	f003 0320 	and.w	r3, r3, #32
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d035      	beq.n	8004658 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a6e      	ldr	r2, [pc, #440]	@ (80047ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d101      	bne.n	80045fa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80045f6:	4b6e      	ldr	r3, [pc, #440]	@ (80047b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045f8:	e001      	b.n	80045fe <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80045fa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4969      	ldr	r1, [pc, #420]	@ (80047ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004606:	428b      	cmp	r3, r1
 8004608:	d101      	bne.n	800460e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800460a:	4b69      	ldr	r3, [pc, #420]	@ (80047b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800460c:	e001      	b.n	8004612 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800460e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004612:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004616:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685a      	ldr	r2, [r3, #4]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004626:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004628:	2300      	movs	r3, #0
 800462a:	60fb      	str	r3, [r7, #12]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	60fb      	str	r3, [r7, #12]
 800463c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800464a:	f043 0202 	orr.w	r2, r3, #2
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7ff fdfa 	bl	800424c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	f003 0308 	and.w	r3, r3, #8
 800465e:	2b08      	cmp	r3, #8
 8004660:	f040 80c3 	bne.w	80047ea <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f003 0320 	and.w	r3, r3, #32
 800466a:	2b00      	cmp	r3, #0
 800466c:	f000 80bd 	beq.w	80047ea <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800467e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a49      	ldr	r2, [pc, #292]	@ (80047ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d101      	bne.n	800468e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800468a:	4b49      	ldr	r3, [pc, #292]	@ (80047b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800468c:	e001      	b.n	8004692 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800468e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4944      	ldr	r1, [pc, #272]	@ (80047ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800469a:	428b      	cmp	r3, r1
 800469c:	d101      	bne.n	80046a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800469e:	4b44      	ldr	r3, [pc, #272]	@ (80047b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046a0:	e001      	b.n	80046a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80046a2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80046a6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80046aa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80046ac:	2300      	movs	r3, #0
 80046ae:	60bb      	str	r3, [r7, #8]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	60bb      	str	r3, [r7, #8]
 80046b8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046c6:	f043 0204 	orr.w	r2, r3, #4
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7ff fdbc 	bl	800424c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80046d4:	e089      	b.n	80047ea <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d107      	bne.n	80046f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f8be 	bl	800486c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d107      	bne.n	800470a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004700:	2b00      	cmp	r3, #0
 8004702:	d002      	beq.n	800470a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 f8fd 	bl	8004904 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004710:	2b40      	cmp	r3, #64	@ 0x40
 8004712:	d12f      	bne.n	8004774 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	f003 0320 	and.w	r3, r3, #32
 800471a:	2b00      	cmp	r3, #0
 800471c:	d02a      	beq.n	8004774 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800472c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a1e      	ldr	r2, [pc, #120]	@ (80047ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d101      	bne.n	800473c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004738:	4b1d      	ldr	r3, [pc, #116]	@ (80047b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800473a:	e001      	b.n	8004740 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800473c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004740:	685a      	ldr	r2, [r3, #4]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4919      	ldr	r1, [pc, #100]	@ (80047ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004748:	428b      	cmp	r3, r1
 800474a:	d101      	bne.n	8004750 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800474c:	4b18      	ldr	r3, [pc, #96]	@ (80047b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800474e:	e001      	b.n	8004754 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004750:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004754:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004758:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004766:	f043 0202 	orr.w	r2, r3, #2
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7ff fd6c 	bl	800424c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	f003 0308 	and.w	r3, r3, #8
 800477a:	2b08      	cmp	r3, #8
 800477c:	d136      	bne.n	80047ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	f003 0320 	and.w	r3, r3, #32
 8004784:	2b00      	cmp	r3, #0
 8004786:	d031      	beq.n	80047ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a07      	ldr	r2, [pc, #28]	@ (80047ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d101      	bne.n	8004796 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004792:	4b07      	ldr	r3, [pc, #28]	@ (80047b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004794:	e001      	b.n	800479a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004796:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4902      	ldr	r1, [pc, #8]	@ (80047ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047a2:	428b      	cmp	r3, r1
 80047a4:	d106      	bne.n	80047b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80047a6:	4b02      	ldr	r3, [pc, #8]	@ (80047b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047a8:	e006      	b.n	80047b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80047aa:	bf00      	nop
 80047ac:	40003800 	.word	0x40003800
 80047b0:	40003400 	.word	0x40003400
 80047b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047b8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80047bc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80047cc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047da:	f043 0204 	orr.w	r2, r3, #4
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7ff fd32 	bl	800424c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80047e8:	e000      	b.n	80047ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80047ea:	bf00      	nop
}
 80047ec:	bf00      	nop
 80047ee:	3720      	adds	r7, #32
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004814:	1c99      	adds	r1, r3, #2
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	6251      	str	r1, [r2, #36]	@ 0x24
 800481a:	881a      	ldrh	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004826:	b29b      	uxth	r3, r3
 8004828:	3b01      	subs	r3, #1
 800482a:	b29a      	uxth	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004834:	b29b      	uxth	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d113      	bne.n	8004862 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004848:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800484e:	b29b      	uxth	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	d106      	bne.n	8004862 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f7ff ffc9 	bl	80047f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004862:	bf00      	nop
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
	...

0800486c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004878:	1c99      	adds	r1, r3, #2
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	6251      	str	r1, [r2, #36]	@ 0x24
 800487e:	8819      	ldrh	r1, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a1d      	ldr	r2, [pc, #116]	@ (80048fc <I2SEx_TxISR_I2SExt+0x90>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d101      	bne.n	800488e <I2SEx_TxISR_I2SExt+0x22>
 800488a:	4b1d      	ldr	r3, [pc, #116]	@ (8004900 <I2SEx_TxISR_I2SExt+0x94>)
 800488c:	e001      	b.n	8004892 <I2SEx_TxISR_I2SExt+0x26>
 800488e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004892:	460a      	mov	r2, r1
 8004894:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800489a:	b29b      	uxth	r3, r3
 800489c:	3b01      	subs	r3, #1
 800489e:	b29a      	uxth	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d121      	bne.n	80048f2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a12      	ldr	r2, [pc, #72]	@ (80048fc <I2SEx_TxISR_I2SExt+0x90>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d101      	bne.n	80048bc <I2SEx_TxISR_I2SExt+0x50>
 80048b8:	4b11      	ldr	r3, [pc, #68]	@ (8004900 <I2SEx_TxISR_I2SExt+0x94>)
 80048ba:	e001      	b.n	80048c0 <I2SEx_TxISR_I2SExt+0x54>
 80048bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80048c0:	685a      	ldr	r2, [r3, #4]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	490d      	ldr	r1, [pc, #52]	@ (80048fc <I2SEx_TxISR_I2SExt+0x90>)
 80048c8:	428b      	cmp	r3, r1
 80048ca:	d101      	bne.n	80048d0 <I2SEx_TxISR_I2SExt+0x64>
 80048cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004900 <I2SEx_TxISR_I2SExt+0x94>)
 80048ce:	e001      	b.n	80048d4 <I2SEx_TxISR_I2SExt+0x68>
 80048d0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80048d4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80048d8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80048de:	b29b      	uxth	r3, r3
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d106      	bne.n	80048f2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f7ff ff81 	bl	80047f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80048f2:	bf00      	nop
 80048f4:	3708      	adds	r7, #8
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	40003800 	.word	0x40003800
 8004900:	40003400 	.word	0x40003400

08004904 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68d8      	ldr	r0, [r3, #12]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004916:	1c99      	adds	r1, r3, #2
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800491c:	b282      	uxth	r2, r0
 800491e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004924:	b29b      	uxth	r3, r3
 8004926:	3b01      	subs	r3, #1
 8004928:	b29a      	uxth	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004932:	b29b      	uxth	r3, r3
 8004934:	2b00      	cmp	r3, #0
 8004936:	d113      	bne.n	8004960 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004946:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800494c:	b29b      	uxth	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d106      	bne.n	8004960 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7ff ff4a 	bl	80047f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004960:	bf00      	nop
 8004962:	3708      	adds	r7, #8
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a20      	ldr	r2, [pc, #128]	@ (80049f8 <I2SEx_RxISR_I2SExt+0x90>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d101      	bne.n	800497e <I2SEx_RxISR_I2SExt+0x16>
 800497a:	4b20      	ldr	r3, [pc, #128]	@ (80049fc <I2SEx_RxISR_I2SExt+0x94>)
 800497c:	e001      	b.n	8004982 <I2SEx_RxISR_I2SExt+0x1a>
 800497e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004982:	68d8      	ldr	r0, [r3, #12]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004988:	1c99      	adds	r1, r3, #2
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800498e:	b282      	uxth	r2, r0
 8004990:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004996:	b29b      	uxth	r3, r3
 8004998:	3b01      	subs	r3, #1
 800499a:	b29a      	uxth	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d121      	bne.n	80049ee <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a12      	ldr	r2, [pc, #72]	@ (80049f8 <I2SEx_RxISR_I2SExt+0x90>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d101      	bne.n	80049b8 <I2SEx_RxISR_I2SExt+0x50>
 80049b4:	4b11      	ldr	r3, [pc, #68]	@ (80049fc <I2SEx_RxISR_I2SExt+0x94>)
 80049b6:	e001      	b.n	80049bc <I2SEx_RxISR_I2SExt+0x54>
 80049b8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	490d      	ldr	r1, [pc, #52]	@ (80049f8 <I2SEx_RxISR_I2SExt+0x90>)
 80049c4:	428b      	cmp	r3, r1
 80049c6:	d101      	bne.n	80049cc <I2SEx_RxISR_I2SExt+0x64>
 80049c8:	4b0c      	ldr	r3, [pc, #48]	@ (80049fc <I2SEx_RxISR_I2SExt+0x94>)
 80049ca:	e001      	b.n	80049d0 <I2SEx_RxISR_I2SExt+0x68>
 80049cc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80049d0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80049d4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049da:	b29b      	uxth	r3, r3
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d106      	bne.n	80049ee <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f7ff ff03 	bl	80047f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80049ee:	bf00      	nop
 80049f0:	3708      	adds	r7, #8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	40003800 	.word	0x40003800
 80049fc:	40003400 	.word	0x40003400

08004a00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b086      	sub	sp, #24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e267      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d075      	beq.n	8004b0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a1e:	4b88      	ldr	r3, [pc, #544]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f003 030c 	and.w	r3, r3, #12
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	d00c      	beq.n	8004a44 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a2a:	4b85      	ldr	r3, [pc, #532]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a32:	2b08      	cmp	r3, #8
 8004a34:	d112      	bne.n	8004a5c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a36:	4b82      	ldr	r3, [pc, #520]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a42:	d10b      	bne.n	8004a5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a44:	4b7e      	ldr	r3, [pc, #504]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d05b      	beq.n	8004b08 <HAL_RCC_OscConfig+0x108>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d157      	bne.n	8004b08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e242      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a64:	d106      	bne.n	8004a74 <HAL_RCC_OscConfig+0x74>
 8004a66:	4b76      	ldr	r3, [pc, #472]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a75      	ldr	r2, [pc, #468]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004a6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	e01d      	b.n	8004ab0 <HAL_RCC_OscConfig+0xb0>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a7c:	d10c      	bne.n	8004a98 <HAL_RCC_OscConfig+0x98>
 8004a7e:	4b70      	ldr	r3, [pc, #448]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a6f      	ldr	r2, [pc, #444]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004a84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a88:	6013      	str	r3, [r2, #0]
 8004a8a:	4b6d      	ldr	r3, [pc, #436]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a6c      	ldr	r2, [pc, #432]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004a90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a94:	6013      	str	r3, [r2, #0]
 8004a96:	e00b      	b.n	8004ab0 <HAL_RCC_OscConfig+0xb0>
 8004a98:	4b69      	ldr	r3, [pc, #420]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a68      	ldr	r2, [pc, #416]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004a9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aa2:	6013      	str	r3, [r2, #0]
 8004aa4:	4b66      	ldr	r3, [pc, #408]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a65      	ldr	r2, [pc, #404]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004aaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004aae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d013      	beq.n	8004ae0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab8:	f7fc fd94 	bl	80015e4 <HAL_GetTick>
 8004abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004abe:	e008      	b.n	8004ad2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ac0:	f7fc fd90 	bl	80015e4 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b64      	cmp	r3, #100	@ 0x64
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e207      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ad2:	4b5b      	ldr	r3, [pc, #364]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0f0      	beq.n	8004ac0 <HAL_RCC_OscConfig+0xc0>
 8004ade:	e014      	b.n	8004b0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae0:	f7fc fd80 	bl	80015e4 <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ae8:	f7fc fd7c 	bl	80015e4 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b64      	cmp	r3, #100	@ 0x64
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e1f3      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004afa:	4b51      	ldr	r3, [pc, #324]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1f0      	bne.n	8004ae8 <HAL_RCC_OscConfig+0xe8>
 8004b06:	e000      	b.n	8004b0a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d063      	beq.n	8004bde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b16:	4b4a      	ldr	r3, [pc, #296]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f003 030c 	and.w	r3, r3, #12
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00b      	beq.n	8004b3a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b22:	4b47      	ldr	r3, [pc, #284]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b2a:	2b08      	cmp	r3, #8
 8004b2c:	d11c      	bne.n	8004b68 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b2e:	4b44      	ldr	r3, [pc, #272]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d116      	bne.n	8004b68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b3a:	4b41      	ldr	r3, [pc, #260]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d005      	beq.n	8004b52 <HAL_RCC_OscConfig+0x152>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d001      	beq.n	8004b52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e1c7      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b52:	4b3b      	ldr	r3, [pc, #236]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	00db      	lsls	r3, r3, #3
 8004b60:	4937      	ldr	r1, [pc, #220]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b66:	e03a      	b.n	8004bde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d020      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b70:	4b34      	ldr	r3, [pc, #208]	@ (8004c44 <HAL_RCC_OscConfig+0x244>)
 8004b72:	2201      	movs	r2, #1
 8004b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b76:	f7fc fd35 	bl	80015e4 <HAL_GetTick>
 8004b7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b7c:	e008      	b.n	8004b90 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b7e:	f7fc fd31 	bl	80015e4 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d901      	bls.n	8004b90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e1a8      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b90:	4b2b      	ldr	r3, [pc, #172]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d0f0      	beq.n	8004b7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b9c:	4b28      	ldr	r3, [pc, #160]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	00db      	lsls	r3, r3, #3
 8004baa:	4925      	ldr	r1, [pc, #148]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	600b      	str	r3, [r1, #0]
 8004bb0:	e015      	b.n	8004bde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bb2:	4b24      	ldr	r3, [pc, #144]	@ (8004c44 <HAL_RCC_OscConfig+0x244>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb8:	f7fc fd14 	bl	80015e4 <HAL_GetTick>
 8004bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bc0:	f7fc fd10 	bl	80015e4 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e187      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1f0      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0308 	and.w	r3, r3, #8
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d036      	beq.n	8004c58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d016      	beq.n	8004c20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bf2:	4b15      	ldr	r3, [pc, #84]	@ (8004c48 <HAL_RCC_OscConfig+0x248>)
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf8:	f7fc fcf4 	bl	80015e4 <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c00:	f7fc fcf0 	bl	80015e4 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e167      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c12:	4b0b      	ldr	r3, [pc, #44]	@ (8004c40 <HAL_RCC_OscConfig+0x240>)
 8004c14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d0f0      	beq.n	8004c00 <HAL_RCC_OscConfig+0x200>
 8004c1e:	e01b      	b.n	8004c58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c20:	4b09      	ldr	r3, [pc, #36]	@ (8004c48 <HAL_RCC_OscConfig+0x248>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c26:	f7fc fcdd 	bl	80015e4 <HAL_GetTick>
 8004c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c2c:	e00e      	b.n	8004c4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c2e:	f7fc fcd9 	bl	80015e4 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d907      	bls.n	8004c4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e150      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4e2>
 8004c40:	40023800 	.word	0x40023800
 8004c44:	42470000 	.word	0x42470000
 8004c48:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c4c:	4b88      	ldr	r3, [pc, #544]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004c4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1ea      	bne.n	8004c2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f000 8097 	beq.w	8004d94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c66:	2300      	movs	r3, #0
 8004c68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c6a:	4b81      	ldr	r3, [pc, #516]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10f      	bne.n	8004c96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c76:	2300      	movs	r3, #0
 8004c78:	60bb      	str	r3, [r7, #8]
 8004c7a:	4b7d      	ldr	r3, [pc, #500]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c7e:	4a7c      	ldr	r2, [pc, #496]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004c80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c84:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c86:	4b7a      	ldr	r3, [pc, #488]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c8e:	60bb      	str	r3, [r7, #8]
 8004c90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c92:	2301      	movs	r3, #1
 8004c94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c96:	4b77      	ldr	r3, [pc, #476]	@ (8004e74 <HAL_RCC_OscConfig+0x474>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d118      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ca2:	4b74      	ldr	r3, [pc, #464]	@ (8004e74 <HAL_RCC_OscConfig+0x474>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a73      	ldr	r2, [pc, #460]	@ (8004e74 <HAL_RCC_OscConfig+0x474>)
 8004ca8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cae:	f7fc fc99 	bl	80015e4 <HAL_GetTick>
 8004cb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb4:	e008      	b.n	8004cc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cb6:	f7fc fc95 	bl	80015e4 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d901      	bls.n	8004cc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e10c      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cc8:	4b6a      	ldr	r3, [pc, #424]	@ (8004e74 <HAL_RCC_OscConfig+0x474>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d0f0      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d106      	bne.n	8004cea <HAL_RCC_OscConfig+0x2ea>
 8004cdc:	4b64      	ldr	r3, [pc, #400]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ce0:	4a63      	ldr	r2, [pc, #396]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004ce2:	f043 0301 	orr.w	r3, r3, #1
 8004ce6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ce8:	e01c      	b.n	8004d24 <HAL_RCC_OscConfig+0x324>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	2b05      	cmp	r3, #5
 8004cf0:	d10c      	bne.n	8004d0c <HAL_RCC_OscConfig+0x30c>
 8004cf2:	4b5f      	ldr	r3, [pc, #380]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cf6:	4a5e      	ldr	r2, [pc, #376]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004cf8:	f043 0304 	orr.w	r3, r3, #4
 8004cfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cfe:	4b5c      	ldr	r3, [pc, #368]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d02:	4a5b      	ldr	r2, [pc, #364]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004d04:	f043 0301 	orr.w	r3, r3, #1
 8004d08:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d0a:	e00b      	b.n	8004d24 <HAL_RCC_OscConfig+0x324>
 8004d0c:	4b58      	ldr	r3, [pc, #352]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004d0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d10:	4a57      	ldr	r2, [pc, #348]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004d12:	f023 0301 	bic.w	r3, r3, #1
 8004d16:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d18:	4b55      	ldr	r3, [pc, #340]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004d1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d1c:	4a54      	ldr	r2, [pc, #336]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004d1e:	f023 0304 	bic.w	r3, r3, #4
 8004d22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d015      	beq.n	8004d58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d2c:	f7fc fc5a 	bl	80015e4 <HAL_GetTick>
 8004d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d32:	e00a      	b.n	8004d4a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d34:	f7fc fc56 	bl	80015e4 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e0cb      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d4a:	4b49      	ldr	r3, [pc, #292]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d0ee      	beq.n	8004d34 <HAL_RCC_OscConfig+0x334>
 8004d56:	e014      	b.n	8004d82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d58:	f7fc fc44 	bl	80015e4 <HAL_GetTick>
 8004d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d5e:	e00a      	b.n	8004d76 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d60:	f7fc fc40 	bl	80015e4 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e0b5      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d76:	4b3e      	ldr	r3, [pc, #248]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1ee      	bne.n	8004d60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d82:	7dfb      	ldrb	r3, [r7, #23]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d105      	bne.n	8004d94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d88:	4b39      	ldr	r3, [pc, #228]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d8c:	4a38      	ldr	r2, [pc, #224]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004d8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d92:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 80a1 	beq.w	8004ee0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d9e:	4b34      	ldr	r3, [pc, #208]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f003 030c 	and.w	r3, r3, #12
 8004da6:	2b08      	cmp	r3, #8
 8004da8:	d05c      	beq.n	8004e64 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d141      	bne.n	8004e36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004db2:	4b31      	ldr	r3, [pc, #196]	@ (8004e78 <HAL_RCC_OscConfig+0x478>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004db8:	f7fc fc14 	bl	80015e4 <HAL_GetTick>
 8004dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dbe:	e008      	b.n	8004dd2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dc0:	f7fc fc10 	bl	80015e4 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e087      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dd2:	4b27      	ldr	r3, [pc, #156]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1f0      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	69da      	ldr	r2, [r3, #28]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	431a      	orrs	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dec:	019b      	lsls	r3, r3, #6
 8004dee:	431a      	orrs	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df4:	085b      	lsrs	r3, r3, #1
 8004df6:	3b01      	subs	r3, #1
 8004df8:	041b      	lsls	r3, r3, #16
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e00:	061b      	lsls	r3, r3, #24
 8004e02:	491b      	ldr	r1, [pc, #108]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e08:	4b1b      	ldr	r3, [pc, #108]	@ (8004e78 <HAL_RCC_OscConfig+0x478>)
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e0e:	f7fc fbe9 	bl	80015e4 <HAL_GetTick>
 8004e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e14:	e008      	b.n	8004e28 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e16:	f7fc fbe5 	bl	80015e4 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d901      	bls.n	8004e28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e05c      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e28:	4b11      	ldr	r3, [pc, #68]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d0f0      	beq.n	8004e16 <HAL_RCC_OscConfig+0x416>
 8004e34:	e054      	b.n	8004ee0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e36:	4b10      	ldr	r3, [pc, #64]	@ (8004e78 <HAL_RCC_OscConfig+0x478>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e3c:	f7fc fbd2 	bl	80015e4 <HAL_GetTick>
 8004e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e42:	e008      	b.n	8004e56 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e44:	f7fc fbce 	bl	80015e4 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e045      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e56:	4b06      	ldr	r3, [pc, #24]	@ (8004e70 <HAL_RCC_OscConfig+0x470>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1f0      	bne.n	8004e44 <HAL_RCC_OscConfig+0x444>
 8004e62:	e03d      	b.n	8004ee0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d107      	bne.n	8004e7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e038      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4e2>
 8004e70:	40023800 	.word	0x40023800
 8004e74:	40007000 	.word	0x40007000
 8004e78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e7c:	4b1b      	ldr	r3, [pc, #108]	@ (8004eec <HAL_RCC_OscConfig+0x4ec>)
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d028      	beq.n	8004edc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d121      	bne.n	8004edc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d11a      	bne.n	8004edc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004eac:	4013      	ands	r3, r2
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004eb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d111      	bne.n	8004edc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec2:	085b      	lsrs	r3, r3, #1
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d107      	bne.n	8004edc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d001      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e000      	b.n	8004ee2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3718      	adds	r7, #24
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	40023800 	.word	0x40023800

08004ef0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d101      	bne.n	8004f04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e0cc      	b.n	800509e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f04:	4b68      	ldr	r3, [pc, #416]	@ (80050a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0307 	and.w	r3, r3, #7
 8004f0c:	683a      	ldr	r2, [r7, #0]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d90c      	bls.n	8004f2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f12:	4b65      	ldr	r3, [pc, #404]	@ (80050a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	b2d2      	uxtb	r2, r2
 8004f18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f1a:	4b63      	ldr	r3, [pc, #396]	@ (80050a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0307 	and.w	r3, r3, #7
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d001      	beq.n	8004f2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e0b8      	b.n	800509e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d020      	beq.n	8004f7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0304 	and.w	r3, r3, #4
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d005      	beq.n	8004f50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f44:	4b59      	ldr	r3, [pc, #356]	@ (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	4a58      	ldr	r2, [pc, #352]	@ (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8004f4a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004f4e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0308 	and.w	r3, r3, #8
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d005      	beq.n	8004f68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f5c:	4b53      	ldr	r3, [pc, #332]	@ (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	4a52      	ldr	r2, [pc, #328]	@ (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8004f62:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004f66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f68:	4b50      	ldr	r3, [pc, #320]	@ (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	494d      	ldr	r1, [pc, #308]	@ (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d044      	beq.n	8005010 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d107      	bne.n	8004f9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f8e:	4b47      	ldr	r3, [pc, #284]	@ (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d119      	bne.n	8004fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e07f      	b.n	800509e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d003      	beq.n	8004fae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004faa:	2b03      	cmp	r3, #3
 8004fac:	d107      	bne.n	8004fbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fae:	4b3f      	ldr	r3, [pc, #252]	@ (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d109      	bne.n	8004fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e06f      	b.n	800509e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fbe:	4b3b      	ldr	r3, [pc, #236]	@ (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e067      	b.n	800509e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fce:	4b37      	ldr	r3, [pc, #220]	@ (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f023 0203 	bic.w	r2, r3, #3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	4934      	ldr	r1, [pc, #208]	@ (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fe0:	f7fc fb00 	bl	80015e4 <HAL_GetTick>
 8004fe4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fe6:	e00a      	b.n	8004ffe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fe8:	f7fc fafc 	bl	80015e4 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e04f      	b.n	800509e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ffe:	4b2b      	ldr	r3, [pc, #172]	@ (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f003 020c 	and.w	r2, r3, #12
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	429a      	cmp	r2, r3
 800500e:	d1eb      	bne.n	8004fe8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005010:	4b25      	ldr	r3, [pc, #148]	@ (80050a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0307 	and.w	r3, r3, #7
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	429a      	cmp	r2, r3
 800501c:	d20c      	bcs.n	8005038 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800501e:	4b22      	ldr	r3, [pc, #136]	@ (80050a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005020:	683a      	ldr	r2, [r7, #0]
 8005022:	b2d2      	uxtb	r2, r2
 8005024:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005026:	4b20      	ldr	r3, [pc, #128]	@ (80050a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0307 	and.w	r3, r3, #7
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	429a      	cmp	r2, r3
 8005032:	d001      	beq.n	8005038 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e032      	b.n	800509e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0304 	and.w	r3, r3, #4
 8005040:	2b00      	cmp	r3, #0
 8005042:	d008      	beq.n	8005056 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005044:	4b19      	ldr	r3, [pc, #100]	@ (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	4916      	ldr	r1, [pc, #88]	@ (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8005052:	4313      	orrs	r3, r2
 8005054:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0308 	and.w	r3, r3, #8
 800505e:	2b00      	cmp	r3, #0
 8005060:	d009      	beq.n	8005076 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005062:	4b12      	ldr	r3, [pc, #72]	@ (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	00db      	lsls	r3, r3, #3
 8005070:	490e      	ldr	r1, [pc, #56]	@ (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 8005072:	4313      	orrs	r3, r2
 8005074:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005076:	f000 f821 	bl	80050bc <HAL_RCC_GetSysClockFreq>
 800507a:	4602      	mov	r2, r0
 800507c:	4b0b      	ldr	r3, [pc, #44]	@ (80050ac <HAL_RCC_ClockConfig+0x1bc>)
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	091b      	lsrs	r3, r3, #4
 8005082:	f003 030f 	and.w	r3, r3, #15
 8005086:	490a      	ldr	r1, [pc, #40]	@ (80050b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005088:	5ccb      	ldrb	r3, [r1, r3]
 800508a:	fa22 f303 	lsr.w	r3, r2, r3
 800508e:	4a09      	ldr	r2, [pc, #36]	@ (80050b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005090:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005092:	4b09      	ldr	r3, [pc, #36]	@ (80050b8 <HAL_RCC_ClockConfig+0x1c8>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4618      	mov	r0, r3
 8005098:	f7fc fa60 	bl	800155c <HAL_InitTick>

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	40023c00 	.word	0x40023c00
 80050ac:	40023800 	.word	0x40023800
 80050b0:	0800cb50 	.word	0x0800cb50
 80050b4:	20000000 	.word	0x20000000
 80050b8:	20000004 	.word	0x20000004

080050bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050c0:	b094      	sub	sp, #80	@ 0x50
 80050c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80050c4:	2300      	movs	r3, #0
 80050c6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80050cc:	2300      	movs	r3, #0
 80050ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050d4:	4b79      	ldr	r3, [pc, #484]	@ (80052bc <HAL_RCC_GetSysClockFreq+0x200>)
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f003 030c 	and.w	r3, r3, #12
 80050dc:	2b08      	cmp	r3, #8
 80050de:	d00d      	beq.n	80050fc <HAL_RCC_GetSysClockFreq+0x40>
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	f200 80e1 	bhi.w	80052a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d002      	beq.n	80050f0 <HAL_RCC_GetSysClockFreq+0x34>
 80050ea:	2b04      	cmp	r3, #4
 80050ec:	d003      	beq.n	80050f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80050ee:	e0db      	b.n	80052a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050f0:	4b73      	ldr	r3, [pc, #460]	@ (80052c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80050f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80050f4:	e0db      	b.n	80052ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050f6:	4b73      	ldr	r3, [pc, #460]	@ (80052c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80050f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80050fa:	e0d8      	b.n	80052ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050fc:	4b6f      	ldr	r3, [pc, #444]	@ (80052bc <HAL_RCC_GetSysClockFreq+0x200>)
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005104:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005106:	4b6d      	ldr	r3, [pc, #436]	@ (80052bc <HAL_RCC_GetSysClockFreq+0x200>)
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d063      	beq.n	80051da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005112:	4b6a      	ldr	r3, [pc, #424]	@ (80052bc <HAL_RCC_GetSysClockFreq+0x200>)
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	099b      	lsrs	r3, r3, #6
 8005118:	2200      	movs	r2, #0
 800511a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800511c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800511e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005120:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005124:	633b      	str	r3, [r7, #48]	@ 0x30
 8005126:	2300      	movs	r3, #0
 8005128:	637b      	str	r3, [r7, #52]	@ 0x34
 800512a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800512e:	4622      	mov	r2, r4
 8005130:	462b      	mov	r3, r5
 8005132:	f04f 0000 	mov.w	r0, #0
 8005136:	f04f 0100 	mov.w	r1, #0
 800513a:	0159      	lsls	r1, r3, #5
 800513c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005140:	0150      	lsls	r0, r2, #5
 8005142:	4602      	mov	r2, r0
 8005144:	460b      	mov	r3, r1
 8005146:	4621      	mov	r1, r4
 8005148:	1a51      	subs	r1, r2, r1
 800514a:	6139      	str	r1, [r7, #16]
 800514c:	4629      	mov	r1, r5
 800514e:	eb63 0301 	sbc.w	r3, r3, r1
 8005152:	617b      	str	r3, [r7, #20]
 8005154:	f04f 0200 	mov.w	r2, #0
 8005158:	f04f 0300 	mov.w	r3, #0
 800515c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005160:	4659      	mov	r1, fp
 8005162:	018b      	lsls	r3, r1, #6
 8005164:	4651      	mov	r1, sl
 8005166:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800516a:	4651      	mov	r1, sl
 800516c:	018a      	lsls	r2, r1, #6
 800516e:	4651      	mov	r1, sl
 8005170:	ebb2 0801 	subs.w	r8, r2, r1
 8005174:	4659      	mov	r1, fp
 8005176:	eb63 0901 	sbc.w	r9, r3, r1
 800517a:	f04f 0200 	mov.w	r2, #0
 800517e:	f04f 0300 	mov.w	r3, #0
 8005182:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005186:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800518a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800518e:	4690      	mov	r8, r2
 8005190:	4699      	mov	r9, r3
 8005192:	4623      	mov	r3, r4
 8005194:	eb18 0303 	adds.w	r3, r8, r3
 8005198:	60bb      	str	r3, [r7, #8]
 800519a:	462b      	mov	r3, r5
 800519c:	eb49 0303 	adc.w	r3, r9, r3
 80051a0:	60fb      	str	r3, [r7, #12]
 80051a2:	f04f 0200 	mov.w	r2, #0
 80051a6:	f04f 0300 	mov.w	r3, #0
 80051aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80051ae:	4629      	mov	r1, r5
 80051b0:	024b      	lsls	r3, r1, #9
 80051b2:	4621      	mov	r1, r4
 80051b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80051b8:	4621      	mov	r1, r4
 80051ba:	024a      	lsls	r2, r1, #9
 80051bc:	4610      	mov	r0, r2
 80051be:	4619      	mov	r1, r3
 80051c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051c2:	2200      	movs	r2, #0
 80051c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80051cc:	f7fb f850 	bl	8000270 <__aeabi_uldivmod>
 80051d0:	4602      	mov	r2, r0
 80051d2:	460b      	mov	r3, r1
 80051d4:	4613      	mov	r3, r2
 80051d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051d8:	e058      	b.n	800528c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051da:	4b38      	ldr	r3, [pc, #224]	@ (80052bc <HAL_RCC_GetSysClockFreq+0x200>)
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	099b      	lsrs	r3, r3, #6
 80051e0:	2200      	movs	r2, #0
 80051e2:	4618      	mov	r0, r3
 80051e4:	4611      	mov	r1, r2
 80051e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80051ea:	623b      	str	r3, [r7, #32]
 80051ec:	2300      	movs	r3, #0
 80051ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80051f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80051f4:	4642      	mov	r2, r8
 80051f6:	464b      	mov	r3, r9
 80051f8:	f04f 0000 	mov.w	r0, #0
 80051fc:	f04f 0100 	mov.w	r1, #0
 8005200:	0159      	lsls	r1, r3, #5
 8005202:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005206:	0150      	lsls	r0, r2, #5
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	4641      	mov	r1, r8
 800520e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005212:	4649      	mov	r1, r9
 8005214:	eb63 0b01 	sbc.w	fp, r3, r1
 8005218:	f04f 0200 	mov.w	r2, #0
 800521c:	f04f 0300 	mov.w	r3, #0
 8005220:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005224:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005228:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800522c:	ebb2 040a 	subs.w	r4, r2, sl
 8005230:	eb63 050b 	sbc.w	r5, r3, fp
 8005234:	f04f 0200 	mov.w	r2, #0
 8005238:	f04f 0300 	mov.w	r3, #0
 800523c:	00eb      	lsls	r3, r5, #3
 800523e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005242:	00e2      	lsls	r2, r4, #3
 8005244:	4614      	mov	r4, r2
 8005246:	461d      	mov	r5, r3
 8005248:	4643      	mov	r3, r8
 800524a:	18e3      	adds	r3, r4, r3
 800524c:	603b      	str	r3, [r7, #0]
 800524e:	464b      	mov	r3, r9
 8005250:	eb45 0303 	adc.w	r3, r5, r3
 8005254:	607b      	str	r3, [r7, #4]
 8005256:	f04f 0200 	mov.w	r2, #0
 800525a:	f04f 0300 	mov.w	r3, #0
 800525e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005262:	4629      	mov	r1, r5
 8005264:	028b      	lsls	r3, r1, #10
 8005266:	4621      	mov	r1, r4
 8005268:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800526c:	4621      	mov	r1, r4
 800526e:	028a      	lsls	r2, r1, #10
 8005270:	4610      	mov	r0, r2
 8005272:	4619      	mov	r1, r3
 8005274:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005276:	2200      	movs	r2, #0
 8005278:	61bb      	str	r3, [r7, #24]
 800527a:	61fa      	str	r2, [r7, #28]
 800527c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005280:	f7fa fff6 	bl	8000270 <__aeabi_uldivmod>
 8005284:	4602      	mov	r2, r0
 8005286:	460b      	mov	r3, r1
 8005288:	4613      	mov	r3, r2
 800528a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800528c:	4b0b      	ldr	r3, [pc, #44]	@ (80052bc <HAL_RCC_GetSysClockFreq+0x200>)
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	0c1b      	lsrs	r3, r3, #16
 8005292:	f003 0303 	and.w	r3, r3, #3
 8005296:	3301      	adds	r3, #1
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800529c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800529e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052a6:	e002      	b.n	80052ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052a8:	4b05      	ldr	r3, [pc, #20]	@ (80052c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80052aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3750      	adds	r7, #80	@ 0x50
 80052b4:	46bd      	mov	sp, r7
 80052b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052ba:	bf00      	nop
 80052bc:	40023800 	.word	0x40023800
 80052c0:	00f42400 	.word	0x00f42400
 80052c4:	007a1200 	.word	0x007a1200

080052c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052c8:	b480      	push	{r7}
 80052ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052cc:	4b03      	ldr	r3, [pc, #12]	@ (80052dc <HAL_RCC_GetHCLKFreq+0x14>)
 80052ce:	681b      	ldr	r3, [r3, #0]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	20000000 	.word	0x20000000

080052e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052e4:	f7ff fff0 	bl	80052c8 <HAL_RCC_GetHCLKFreq>
 80052e8:	4602      	mov	r2, r0
 80052ea:	4b05      	ldr	r3, [pc, #20]	@ (8005300 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	0a9b      	lsrs	r3, r3, #10
 80052f0:	f003 0307 	and.w	r3, r3, #7
 80052f4:	4903      	ldr	r1, [pc, #12]	@ (8005304 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052f6:	5ccb      	ldrb	r3, [r1, r3]
 80052f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	40023800 	.word	0x40023800
 8005304:	0800cb60 	.word	0x0800cb60

08005308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800530c:	f7ff ffdc 	bl	80052c8 <HAL_RCC_GetHCLKFreq>
 8005310:	4602      	mov	r2, r0
 8005312:	4b05      	ldr	r3, [pc, #20]	@ (8005328 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	0b5b      	lsrs	r3, r3, #13
 8005318:	f003 0307 	and.w	r3, r3, #7
 800531c:	4903      	ldr	r1, [pc, #12]	@ (800532c <HAL_RCC_GetPCLK2Freq+0x24>)
 800531e:	5ccb      	ldrb	r3, [r1, r3]
 8005320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005324:	4618      	mov	r0, r3
 8005326:	bd80      	pop	{r7, pc}
 8005328:	40023800 	.word	0x40023800
 800532c:	0800cb60 	.word	0x0800cb60

08005330 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005338:	2300      	movs	r3, #0
 800533a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800533c:	2300      	movs	r3, #0
 800533e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	2b00      	cmp	r3, #0
 800534a:	d105      	bne.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005354:	2b00      	cmp	r3, #0
 8005356:	d035      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005358:	4b62      	ldr	r3, [pc, #392]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800535a:	2200      	movs	r2, #0
 800535c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800535e:	f7fc f941 	bl	80015e4 <HAL_GetTick>
 8005362:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005364:	e008      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005366:	f7fc f93d 	bl	80015e4 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	2b02      	cmp	r3, #2
 8005372:	d901      	bls.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e0b0      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005378:	4b5b      	ldr	r3, [pc, #364]	@ (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1f0      	bne.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	019a      	lsls	r2, r3, #6
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	071b      	lsls	r3, r3, #28
 8005390:	4955      	ldr	r1, [pc, #340]	@ (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005392:	4313      	orrs	r3, r2
 8005394:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005398:	4b52      	ldr	r3, [pc, #328]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800539a:	2201      	movs	r2, #1
 800539c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800539e:	f7fc f921 	bl	80015e4 <HAL_GetTick>
 80053a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053a4:	e008      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80053a6:	f7fc f91d 	bl	80015e4 <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d901      	bls.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e090      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053b8:	4b4b      	ldr	r3, [pc, #300]	@ (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d0f0      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0302 	and.w	r3, r3, #2
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f000 8083 	beq.w	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80053d2:	2300      	movs	r3, #0
 80053d4:	60fb      	str	r3, [r7, #12]
 80053d6:	4b44      	ldr	r3, [pc, #272]	@ (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053da:	4a43      	ldr	r2, [pc, #268]	@ (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80053e2:	4b41      	ldr	r3, [pc, #260]	@ (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053ea:	60fb      	str	r3, [r7, #12]
 80053ec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80053ee:	4b3f      	ldr	r3, [pc, #252]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a3e      	ldr	r2, [pc, #248]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80053f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053f8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80053fa:	f7fc f8f3 	bl	80015e4 <HAL_GetTick>
 80053fe:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005400:	e008      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005402:	f7fc f8ef 	bl	80015e4 <HAL_GetTick>
 8005406:	4602      	mov	r2, r0
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	2b02      	cmp	r3, #2
 800540e:	d901      	bls.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e062      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005414:	4b35      	ldr	r3, [pc, #212]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800541c:	2b00      	cmp	r3, #0
 800541e:	d0f0      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005420:	4b31      	ldr	r3, [pc, #196]	@ (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005424:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005428:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d02f      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	429a      	cmp	r2, r3
 800543c:	d028      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800543e:	4b2a      	ldr	r3, [pc, #168]	@ (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005442:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005446:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005448:	4b29      	ldr	r3, [pc, #164]	@ (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800544a:	2201      	movs	r2, #1
 800544c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800544e:	4b28      	ldr	r3, [pc, #160]	@ (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005450:	2200      	movs	r2, #0
 8005452:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005454:	4a24      	ldr	r2, [pc, #144]	@ (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800545a:	4b23      	ldr	r3, [pc, #140]	@ (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800545c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b01      	cmp	r3, #1
 8005464:	d114      	bne.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005466:	f7fc f8bd 	bl	80015e4 <HAL_GetTick>
 800546a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800546c:	e00a      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800546e:	f7fc f8b9 	bl	80015e4 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	f241 3288 	movw	r2, #5000	@ 0x1388
 800547c:	4293      	cmp	r3, r2
 800547e:	d901      	bls.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e02a      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005484:	4b18      	ldr	r3, [pc, #96]	@ (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	2b00      	cmp	r3, #0
 800548e:	d0ee      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005498:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800549c:	d10d      	bne.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800549e:	4b12      	ldr	r3, [pc, #72]	@ (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80054ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054b2:	490d      	ldr	r1, [pc, #52]	@ (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	608b      	str	r3, [r1, #8]
 80054b8:	e005      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80054ba:	4b0b      	ldr	r3, [pc, #44]	@ (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	4a0a      	ldr	r2, [pc, #40]	@ (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054c0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80054c4:	6093      	str	r3, [r2, #8]
 80054c6:	4b08      	ldr	r3, [pc, #32]	@ (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054c8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054d2:	4905      	ldr	r1, [pc, #20]	@ (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3718      	adds	r7, #24
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	42470068 	.word	0x42470068
 80054e8:	40023800 	.word	0x40023800
 80054ec:	40007000 	.word	0x40007000
 80054f0:	42470e40 	.word	0x42470e40

080054f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b087      	sub	sp, #28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80054fc:	2300      	movs	r3, #0
 80054fe:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005500:	2300      	movs	r3, #0
 8005502:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005504:	2300      	movs	r3, #0
 8005506:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005508:	2300      	movs	r3, #0
 800550a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d13f      	bne.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005512:	4b24      	ldr	r3, [pc, #144]	@ (80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800551a:	60fb      	str	r3, [r7, #12]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d006      	beq.n	8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005528:	d12f      	bne.n	800558a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800552a:	4b1f      	ldr	r3, [pc, #124]	@ (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800552c:	617b      	str	r3, [r7, #20]
          break;
 800552e:	e02f      	b.n	8005590 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005530:	4b1c      	ldr	r3, [pc, #112]	@ (80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005538:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800553c:	d108      	bne.n	8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800553e:	4b19      	ldr	r3, [pc, #100]	@ (80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005546:	4a19      	ldr	r2, [pc, #100]	@ (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005548:	fbb2 f3f3 	udiv	r3, r2, r3
 800554c:	613b      	str	r3, [r7, #16]
 800554e:	e007      	b.n	8005560 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005550:	4b14      	ldr	r3, [pc, #80]	@ (80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005558:	4a15      	ldr	r2, [pc, #84]	@ (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800555a:	fbb2 f3f3 	udiv	r3, r2, r3
 800555e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005560:	4b10      	ldr	r3, [pc, #64]	@ (80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005562:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005566:	099b      	lsrs	r3, r3, #6
 8005568:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	fb02 f303 	mul.w	r3, r2, r3
 8005572:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005574:	4b0b      	ldr	r3, [pc, #44]	@ (80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005576:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800557a:	0f1b      	lsrs	r3, r3, #28
 800557c:	f003 0307 	and.w	r3, r3, #7
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	fbb2 f3f3 	udiv	r3, r2, r3
 8005586:	617b      	str	r3, [r7, #20]
          break;
 8005588:	e002      	b.n	8005590 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800558a:	2300      	movs	r3, #0
 800558c:	617b      	str	r3, [r7, #20]
          break;
 800558e:	bf00      	nop
        }
      }
      break;
 8005590:	e000      	b.n	8005594 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8005592:	bf00      	nop
    }
  }
  return frequency;
 8005594:	697b      	ldr	r3, [r7, #20]
}
 8005596:	4618      	mov	r0, r3
 8005598:	371c      	adds	r7, #28
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	40023800 	.word	0x40023800
 80055a8:	00bb8000 	.word	0x00bb8000
 80055ac:	007a1200 	.word	0x007a1200
 80055b0:	00f42400 	.word	0x00f42400

080055b4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e073      	b.n	80056b2 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	7f5b      	ldrb	r3, [r3, #29]
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d105      	bne.n	80055e0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f7fb fd14 	bl	8001008 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2202      	movs	r2, #2
 80055e4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f003 0310 	and.w	r3, r3, #16
 80055f0:	2b10      	cmp	r3, #16
 80055f2:	d055      	beq.n	80056a0 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	22ca      	movs	r2, #202	@ 0xca
 80055fa:	625a      	str	r2, [r3, #36]	@ 0x24
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2253      	movs	r2, #83	@ 0x53
 8005602:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 fa49 	bl	8005a9c <RTC_EnterInitMode>
 800560a:	4603      	mov	r3, r0
 800560c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800560e:	7bfb      	ldrb	r3, [r7, #15]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d12c      	bne.n	800566e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	6812      	ldr	r2, [r2, #0]
 800561e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005622:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005626:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6899      	ldr	r1, [r3, #8]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	431a      	orrs	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	431a      	orrs	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	68d2      	ldr	r2, [r2, #12]
 800564e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6919      	ldr	r1, [r3, #16]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	041a      	lsls	r2, r3, #16
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	430a      	orrs	r2, r1
 8005662:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 fa50 	bl	8005b0a <RTC_ExitInitMode>
 800566a:	4603      	mov	r3, r0
 800566c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800566e:	7bfb      	ldrb	r3, [r7, #15]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d110      	bne.n	8005696 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005682:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	699a      	ldr	r2, [r3, #24]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	430a      	orrs	r2, r1
 8005694:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	22ff      	movs	r2, #255	@ 0xff
 800569c:	625a      	str	r2, [r3, #36]	@ 0x24
 800569e:	e001      	b.n	80056a4 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80056a0:	2300      	movs	r3, #0
 80056a2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80056a4:	7bfb      	ldrb	r3, [r7, #15]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d102      	bne.n	80056b0 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2201      	movs	r2, #1
 80056ae:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80056b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80056ba:	b590      	push	{r4, r7, lr}
 80056bc:	b087      	sub	sp, #28
 80056be:	af00      	add	r7, sp, #0
 80056c0:	60f8      	str	r0, [r7, #12]
 80056c2:	60b9      	str	r1, [r7, #8]
 80056c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80056c6:	2300      	movs	r3, #0
 80056c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	7f1b      	ldrb	r3, [r3, #28]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d101      	bne.n	80056d6 <HAL_RTC_SetTime+0x1c>
 80056d2:	2302      	movs	r3, #2
 80056d4:	e087      	b.n	80057e6 <HAL_RTC_SetTime+0x12c>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2201      	movs	r2, #1
 80056da:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2202      	movs	r2, #2
 80056e0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d126      	bne.n	8005736 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d102      	bne.n	80056fc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	2200      	movs	r2, #0
 80056fa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	4618      	mov	r0, r3
 8005702:	f000 fa27 	bl	8005b54 <RTC_ByteToBcd2>
 8005706:	4603      	mov	r3, r0
 8005708:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	785b      	ldrb	r3, [r3, #1]
 800570e:	4618      	mov	r0, r3
 8005710:	f000 fa20 	bl	8005b54 <RTC_ByteToBcd2>
 8005714:	4603      	mov	r3, r0
 8005716:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005718:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	789b      	ldrb	r3, [r3, #2]
 800571e:	4618      	mov	r0, r3
 8005720:	f000 fa18 	bl	8005b54 <RTC_ByteToBcd2>
 8005724:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005726:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	78db      	ldrb	r3, [r3, #3]
 800572e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005730:	4313      	orrs	r3, r2
 8005732:	617b      	str	r3, [r7, #20]
 8005734:	e018      	b.n	8005768 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005740:	2b00      	cmp	r3, #0
 8005742:	d102      	bne.n	800574a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	2200      	movs	r2, #0
 8005748:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	785b      	ldrb	r3, [r3, #1]
 8005754:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005756:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800575c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	78db      	ldrb	r3, [r3, #3]
 8005762:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005764:	4313      	orrs	r3, r2
 8005766:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	22ca      	movs	r2, #202	@ 0xca
 800576e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2253      	movs	r2, #83	@ 0x53
 8005776:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f000 f98f 	bl	8005a9c <RTC_EnterInitMode>
 800577e:	4603      	mov	r3, r0
 8005780:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005782:	7cfb      	ldrb	r3, [r7, #19]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d120      	bne.n	80057ca <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005792:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005796:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689a      	ldr	r2, [r3, #8]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80057a6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6899      	ldr	r1, [r3, #8]
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	68da      	ldr	r2, [r3, #12]
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	431a      	orrs	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	430a      	orrs	r2, r1
 80057be:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f000 f9a2 	bl	8005b0a <RTC_ExitInitMode>
 80057c6:	4603      	mov	r3, r0
 80057c8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80057ca:	7cfb      	ldrb	r3, [r7, #19]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d102      	bne.n	80057d6 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2201      	movs	r2, #1
 80057d4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	22ff      	movs	r2, #255	@ 0xff
 80057dc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	771a      	strb	r2, [r3, #28]

  return status;
 80057e4:	7cfb      	ldrb	r3, [r7, #19]
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	371c      	adds	r7, #28
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd90      	pop	{r4, r7, pc}

080057ee <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b086      	sub	sp, #24
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	60f8      	str	r0, [r7, #12]
 80057f6:	60b9      	str	r1, [r7, #8]
 80057f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80057fa:	2300      	movs	r3, #0
 80057fc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005820:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005824:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	0c1b      	lsrs	r3, r3, #16
 800582a:	b2db      	uxtb	r3, r3
 800582c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005830:	b2da      	uxtb	r2, r3
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	0a1b      	lsrs	r3, r3, #8
 800583a:	b2db      	uxtb	r3, r3
 800583c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005840:	b2da      	uxtb	r2, r3
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	b2db      	uxtb	r3, r3
 800584a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800584e:	b2da      	uxtb	r2, r3
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	0d9b      	lsrs	r3, r3, #22
 8005858:	b2db      	uxtb	r3, r3
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	b2da      	uxtb	r2, r3
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d11a      	bne.n	80058a0 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	4618      	mov	r0, r3
 8005870:	f000 f98e 	bl	8005b90 <RTC_Bcd2ToByte>
 8005874:	4603      	mov	r3, r0
 8005876:	461a      	mov	r2, r3
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	785b      	ldrb	r3, [r3, #1]
 8005880:	4618      	mov	r0, r3
 8005882:	f000 f985 	bl	8005b90 <RTC_Bcd2ToByte>
 8005886:	4603      	mov	r3, r0
 8005888:	461a      	mov	r2, r3
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	789b      	ldrb	r3, [r3, #2]
 8005892:	4618      	mov	r0, r3
 8005894:	f000 f97c 	bl	8005b90 <RTC_Bcd2ToByte>
 8005898:	4603      	mov	r3, r0
 800589a:	461a      	mov	r2, r3
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3718      	adds	r7, #24
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80058aa:	b590      	push	{r4, r7, lr}
 80058ac:	b087      	sub	sp, #28
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	60f8      	str	r0, [r7, #12]
 80058b2:	60b9      	str	r1, [r7, #8]
 80058b4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80058b6:	2300      	movs	r3, #0
 80058b8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	7f1b      	ldrb	r3, [r3, #28]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d101      	bne.n	80058c6 <HAL_RTC_SetDate+0x1c>
 80058c2:	2302      	movs	r3, #2
 80058c4:	e071      	b.n	80059aa <HAL_RTC_SetDate+0x100>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2201      	movs	r2, #1
 80058ca:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2202      	movs	r2, #2
 80058d0:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10e      	bne.n	80058f6 <HAL_RTC_SetDate+0x4c>
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	785b      	ldrb	r3, [r3, #1]
 80058dc:	f003 0310 	and.w	r3, r3, #16
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d008      	beq.n	80058f6 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	785b      	ldrb	r3, [r3, #1]
 80058e8:	f023 0310 	bic.w	r3, r3, #16
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	330a      	adds	r3, #10
 80058f0:	b2da      	uxtb	r2, r3
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d11c      	bne.n	8005936 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	78db      	ldrb	r3, [r3, #3]
 8005900:	4618      	mov	r0, r3
 8005902:	f000 f927 	bl	8005b54 <RTC_ByteToBcd2>
 8005906:	4603      	mov	r3, r0
 8005908:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	785b      	ldrb	r3, [r3, #1]
 800590e:	4618      	mov	r0, r3
 8005910:	f000 f920 	bl	8005b54 <RTC_ByteToBcd2>
 8005914:	4603      	mov	r3, r0
 8005916:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005918:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	789b      	ldrb	r3, [r3, #2]
 800591e:	4618      	mov	r0, r3
 8005920:	f000 f918 	bl	8005b54 <RTC_ByteToBcd2>
 8005924:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005926:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005930:	4313      	orrs	r3, r2
 8005932:	617b      	str	r3, [r7, #20]
 8005934:	e00e      	b.n	8005954 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	78db      	ldrb	r3, [r3, #3]
 800593a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	785b      	ldrb	r3, [r3, #1]
 8005940:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005942:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005948:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005950:	4313      	orrs	r3, r2
 8005952:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	22ca      	movs	r2, #202	@ 0xca
 800595a:	625a      	str	r2, [r3, #36]	@ 0x24
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2253      	movs	r2, #83	@ 0x53
 8005962:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f000 f899 	bl	8005a9c <RTC_EnterInitMode>
 800596a:	4603      	mov	r3, r0
 800596c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800596e:	7cfb      	ldrb	r3, [r7, #19]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10c      	bne.n	800598e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800597e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005982:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f000 f8c0 	bl	8005b0a <RTC_ExitInitMode>
 800598a:	4603      	mov	r3, r0
 800598c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800598e:	7cfb      	ldrb	r3, [r7, #19]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d102      	bne.n	800599a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2201      	movs	r2, #1
 8005998:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	22ff      	movs	r2, #255	@ 0xff
 80059a0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	771a      	strb	r2, [r3, #28]

  return status;
 80059a8:	7cfb      	ldrb	r3, [r7, #19]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	371c      	adds	r7, #28
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd90      	pop	{r4, r7, pc}

080059b2 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b086      	sub	sp, #24
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	60f8      	str	r0, [r7, #12]
 80059ba:	60b9      	str	r1, [r7, #8]
 80059bc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80059be:	2300      	movs	r3, #0
 80059c0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80059cc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80059d0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	0c1b      	lsrs	r3, r3, #16
 80059d6:	b2da      	uxtb	r2, r3
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	0a1b      	lsrs	r3, r3, #8
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	f003 031f 	and.w	r3, r3, #31
 80059e6:	b2da      	uxtb	r2, r3
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80059f4:	b2da      	uxtb	r2, r3
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	0b5b      	lsrs	r3, r3, #13
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	f003 0307 	and.w	r3, r3, #7
 8005a04:	b2da      	uxtb	r2, r3
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d11a      	bne.n	8005a46 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	78db      	ldrb	r3, [r3, #3]
 8005a14:	4618      	mov	r0, r3
 8005a16:	f000 f8bb 	bl	8005b90 <RTC_Bcd2ToByte>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	785b      	ldrb	r3, [r3, #1]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f000 f8b2 	bl	8005b90 <RTC_Bcd2ToByte>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	461a      	mov	r2, r3
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	789b      	ldrb	r3, [r3, #2]
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f000 f8a9 	bl	8005b90 <RTC_Bcd2ToByte>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	461a      	mov	r2, r3
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3718      	adds	r7, #24
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a0d      	ldr	r2, [pc, #52]	@ (8005a98 <HAL_RTC_WaitForSynchro+0x48>)
 8005a62:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a64:	f7fb fdbe 	bl	80015e4 <HAL_GetTick>
 8005a68:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005a6a:	e009      	b.n	8005a80 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005a6c:	f7fb fdba 	bl	80015e4 <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005a7a:	d901      	bls.n	8005a80 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e007      	b.n	8005a90 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	f003 0320 	and.w	r3, r3, #32
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d0ee      	beq.n	8005a6c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	00017f5f 	.word	0x00017f5f

08005a9c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d122      	bne.n	8005b00 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68da      	ldr	r2, [r3, #12]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005ac8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005aca:	f7fb fd8b 	bl	80015e4 <HAL_GetTick>
 8005ace:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005ad0:	e00c      	b.n	8005aec <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ad2:	f7fb fd87 	bl	80015e4 <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ae0:	d904      	bls.n	8005aec <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2204      	movs	r2, #4
 8005ae6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d102      	bne.n	8005b00 <RTC_EnterInitMode+0x64>
 8005afa:	7bfb      	ldrb	r3, [r7, #15]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d1e8      	bne.n	8005ad2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b084      	sub	sp, #16
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b12:	2300      	movs	r3, #0
 8005b14:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68da      	ldr	r2, [r3, #12]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b24:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f003 0320 	and.w	r3, r3, #32
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10a      	bne.n	8005b4a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f7ff ff8b 	bl	8005a50 <HAL_RTC_WaitForSynchro>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d004      	beq.n	8005b4a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2204      	movs	r2, #4
 8005b44:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005b62:	e005      	b.n	8005b70 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	3301      	adds	r3, #1
 8005b68:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8005b6a:	79fb      	ldrb	r3, [r7, #7]
 8005b6c:	3b0a      	subs	r3, #10
 8005b6e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005b70:	79fb      	ldrb	r3, [r7, #7]
 8005b72:	2b09      	cmp	r3, #9
 8005b74:	d8f6      	bhi.n	8005b64 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	011b      	lsls	r3, r3, #4
 8005b7c:	b2da      	uxtb	r2, r3
 8005b7e:	79fb      	ldrb	r3, [r7, #7]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	b2db      	uxtb	r3, r3
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3714      	adds	r7, #20
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	4603      	mov	r3, r0
 8005b98:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8005b9e:	79fb      	ldrb	r3, [r7, #7]
 8005ba0:	091b      	lsrs	r3, r3, #4
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4413      	add	r3, r2
 8005bac:	005b      	lsls	r3, r3, #1
 8005bae:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	79fb      	ldrb	r3, [r7, #7]
 8005bb6:	f003 030f 	and.w	r3, r3, #15
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	4413      	add	r3, r2
 8005bbe:	b2db      	uxtb	r3, r3
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3714      	adds	r7, #20
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e07b      	b.n	8005cd6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d108      	bne.n	8005bf8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bee:	d009      	beq.n	8005c04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	61da      	str	r2, [r3, #28]
 8005bf6:	e005      	b.n	8005c04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d106      	bne.n	8005c24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f7fb fa54 	bl	80010cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2202      	movs	r2, #2
 8005c28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005c4c:	431a      	orrs	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c56:	431a      	orrs	r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	f003 0302 	and.w	r3, r3, #2
 8005c60:	431a      	orrs	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	431a      	orrs	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c74:	431a      	orrs	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	69db      	ldr	r3, [r3, #28]
 8005c7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c7e:	431a      	orrs	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a1b      	ldr	r3, [r3, #32]
 8005c84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c88:	ea42 0103 	orr.w	r1, r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c90:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	0c1b      	lsrs	r3, r3, #16
 8005ca2:	f003 0104 	and.w	r1, r3, #4
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005caa:	f003 0210 	and.w	r2, r3, #16
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	69da      	ldr	r2, [r3, #28]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005cc4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3708      	adds	r7, #8
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b088      	sub	sp, #32
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	60f8      	str	r0, [r7, #12]
 8005ce6:	60b9      	str	r1, [r7, #8]
 8005ce8:	603b      	str	r3, [r7, #0]
 8005cea:	4613      	mov	r3, r2
 8005cec:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cee:	f7fb fc79 	bl	80015e4 <HAL_GetTick>
 8005cf2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005cf4:	88fb      	ldrh	r3, [r7, #6]
 8005cf6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d001      	beq.n	8005d08 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005d04:	2302      	movs	r3, #2
 8005d06:	e12a      	b.n	8005f5e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d002      	beq.n	8005d14 <HAL_SPI_Transmit+0x36>
 8005d0e:	88fb      	ldrh	r3, [r7, #6]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d101      	bne.n	8005d18 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e122      	b.n	8005f5e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d101      	bne.n	8005d26 <HAL_SPI_Transmit+0x48>
 8005d22:	2302      	movs	r3, #2
 8005d24:	e11b      	b.n	8005f5e <HAL_SPI_Transmit+0x280>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2203      	movs	r2, #3
 8005d32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	88fa      	ldrh	r2, [r7, #6]
 8005d46:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	88fa      	ldrh	r2, [r7, #6]
 8005d4c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d74:	d10f      	bne.n	8005d96 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d94:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005da0:	2b40      	cmp	r3, #64	@ 0x40
 8005da2:	d007      	beq.n	8005db4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005db2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005dbc:	d152      	bne.n	8005e64 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d002      	beq.n	8005dcc <HAL_SPI_Transmit+0xee>
 8005dc6:	8b7b      	ldrh	r3, [r7, #26]
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d145      	bne.n	8005e58 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dd0:	881a      	ldrh	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ddc:	1c9a      	adds	r2, r3, #2
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	3b01      	subs	r3, #1
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005df0:	e032      	b.n	8005e58 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f003 0302 	and.w	r3, r3, #2
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d112      	bne.n	8005e26 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e04:	881a      	ldrh	r2, [r3, #0]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e10:	1c9a      	adds	r2, r3, #2
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005e24:	e018      	b.n	8005e58 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e26:	f7fb fbdd 	bl	80015e4 <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	683a      	ldr	r2, [r7, #0]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d803      	bhi.n	8005e3e <HAL_SPI_Transmit+0x160>
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e3c:	d102      	bne.n	8005e44 <HAL_SPI_Transmit+0x166>
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d109      	bne.n	8005e58 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005e54:	2303      	movs	r3, #3
 8005e56:	e082      	b.n	8005f5e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1c7      	bne.n	8005df2 <HAL_SPI_Transmit+0x114>
 8005e62:	e053      	b.n	8005f0c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d002      	beq.n	8005e72 <HAL_SPI_Transmit+0x194>
 8005e6c:	8b7b      	ldrh	r3, [r7, #26]
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d147      	bne.n	8005f02 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	330c      	adds	r3, #12
 8005e7c:	7812      	ldrb	r2, [r2, #0]
 8005e7e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e84:	1c5a      	adds	r2, r3, #1
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	3b01      	subs	r3, #1
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005e98:	e033      	b.n	8005f02 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f003 0302 	and.w	r3, r3, #2
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d113      	bne.n	8005ed0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	330c      	adds	r3, #12
 8005eb2:	7812      	ldrb	r2, [r2, #0]
 8005eb4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eba:	1c5a      	adds	r2, r3, #1
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005ece:	e018      	b.n	8005f02 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ed0:	f7fb fb88 	bl	80015e4 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	683a      	ldr	r2, [r7, #0]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d803      	bhi.n	8005ee8 <HAL_SPI_Transmit+0x20a>
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee6:	d102      	bne.n	8005eee <HAL_SPI_Transmit+0x210>
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d109      	bne.n	8005f02 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e02d      	b.n	8005f5e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1c6      	bne.n	8005e9a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f0c:	69fa      	ldr	r2, [r7, #28]
 8005f0e:	6839      	ldr	r1, [r7, #0]
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f000 fa59 	bl	80063c8 <SPI_EndRxTxTransaction>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d002      	beq.n	8005f22 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2220      	movs	r2, #32
 8005f20:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d10a      	bne.n	8005f40 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	617b      	str	r3, [r7, #20]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	617b      	str	r3, [r7, #20]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	617b      	str	r3, [r7, #20]
 8005f3e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d001      	beq.n	8005f5c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e000      	b.n	8005f5e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
  }
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3720      	adds	r7, #32
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b08a      	sub	sp, #40	@ 0x28
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	60f8      	str	r0, [r7, #12]
 8005f6e:	60b9      	str	r1, [r7, #8]
 8005f70:	607a      	str	r2, [r7, #4]
 8005f72:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005f74:	2301      	movs	r3, #1
 8005f76:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f78:	f7fb fb34 	bl	80015e4 <HAL_GetTick>
 8005f7c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f84:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005f8c:	887b      	ldrh	r3, [r7, #2]
 8005f8e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005f90:	7ffb      	ldrb	r3, [r7, #31]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d00c      	beq.n	8005fb0 <HAL_SPI_TransmitReceive+0x4a>
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f9c:	d106      	bne.n	8005fac <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d102      	bne.n	8005fac <HAL_SPI_TransmitReceive+0x46>
 8005fa6:	7ffb      	ldrb	r3, [r7, #31]
 8005fa8:	2b04      	cmp	r3, #4
 8005faa:	d001      	beq.n	8005fb0 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005fac:	2302      	movs	r3, #2
 8005fae:	e17f      	b.n	80062b0 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d005      	beq.n	8005fc2 <HAL_SPI_TransmitReceive+0x5c>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d002      	beq.n	8005fc2 <HAL_SPI_TransmitReceive+0x5c>
 8005fbc:	887b      	ldrh	r3, [r7, #2]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d101      	bne.n	8005fc6 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e174      	b.n	80062b0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d101      	bne.n	8005fd4 <HAL_SPI_TransmitReceive+0x6e>
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	e16d      	b.n	80062b0 <HAL_SPI_TransmitReceive+0x34a>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	2b04      	cmp	r3, #4
 8005fe6:	d003      	beq.n	8005ff0 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2205      	movs	r2, #5
 8005fec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	887a      	ldrh	r2, [r7, #2]
 8006000:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	887a      	ldrh	r2, [r7, #2]
 8006006:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	887a      	ldrh	r2, [r7, #2]
 8006012:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	887a      	ldrh	r2, [r7, #2]
 8006018:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2200      	movs	r2, #0
 8006024:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006030:	2b40      	cmp	r3, #64	@ 0x40
 8006032:	d007      	beq.n	8006044 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006042:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800604c:	d17e      	bne.n	800614c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d002      	beq.n	800605c <HAL_SPI_TransmitReceive+0xf6>
 8006056:	8afb      	ldrh	r3, [r7, #22]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d16c      	bne.n	8006136 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006060:	881a      	ldrh	r2, [r3, #0]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800606c:	1c9a      	adds	r2, r3, #2
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006076:	b29b      	uxth	r3, r3
 8006078:	3b01      	subs	r3, #1
 800607a:	b29a      	uxth	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006080:	e059      	b.n	8006136 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f003 0302 	and.w	r3, r3, #2
 800608c:	2b02      	cmp	r3, #2
 800608e:	d11b      	bne.n	80060c8 <HAL_SPI_TransmitReceive+0x162>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006094:	b29b      	uxth	r3, r3
 8006096:	2b00      	cmp	r3, #0
 8006098:	d016      	beq.n	80060c8 <HAL_SPI_TransmitReceive+0x162>
 800609a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609c:	2b01      	cmp	r3, #1
 800609e:	d113      	bne.n	80060c8 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060a4:	881a      	ldrh	r2, [r3, #0]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060b0:	1c9a      	adds	r2, r3, #2
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	3b01      	subs	r3, #1
 80060be:	b29a      	uxth	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060c4:	2300      	movs	r3, #0
 80060c6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d119      	bne.n	800610a <HAL_SPI_TransmitReceive+0x1a4>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060da:	b29b      	uxth	r3, r3
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d014      	beq.n	800610a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68da      	ldr	r2, [r3, #12]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ea:	b292      	uxth	r2, r2
 80060ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060f2:	1c9a      	adds	r2, r3, #2
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	3b01      	subs	r3, #1
 8006100:	b29a      	uxth	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006106:	2301      	movs	r3, #1
 8006108:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800610a:	f7fb fa6b 	bl	80015e4 <HAL_GetTick>
 800610e:	4602      	mov	r2, r0
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006116:	429a      	cmp	r2, r3
 8006118:	d80d      	bhi.n	8006136 <HAL_SPI_TransmitReceive+0x1d0>
 800611a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006120:	d009      	beq.n	8006136 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2201      	movs	r2, #1
 8006126:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e0bc      	b.n	80062b0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800613a:	b29b      	uxth	r3, r3
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1a0      	bne.n	8006082 <HAL_SPI_TransmitReceive+0x11c>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006144:	b29b      	uxth	r3, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	d19b      	bne.n	8006082 <HAL_SPI_TransmitReceive+0x11c>
 800614a:	e082      	b.n	8006252 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d002      	beq.n	800615a <HAL_SPI_TransmitReceive+0x1f4>
 8006154:	8afb      	ldrh	r3, [r7, #22]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d171      	bne.n	800623e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	330c      	adds	r3, #12
 8006164:	7812      	ldrb	r2, [r2, #0]
 8006166:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800616c:	1c5a      	adds	r2, r3, #1
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006176:	b29b      	uxth	r3, r3
 8006178:	3b01      	subs	r3, #1
 800617a:	b29a      	uxth	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006180:	e05d      	b.n	800623e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f003 0302 	and.w	r3, r3, #2
 800618c:	2b02      	cmp	r3, #2
 800618e:	d11c      	bne.n	80061ca <HAL_SPI_TransmitReceive+0x264>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006194:	b29b      	uxth	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d017      	beq.n	80061ca <HAL_SPI_TransmitReceive+0x264>
 800619a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619c:	2b01      	cmp	r3, #1
 800619e:	d114      	bne.n	80061ca <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	330c      	adds	r3, #12
 80061aa:	7812      	ldrb	r2, [r2, #0]
 80061ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061b2:	1c5a      	adds	r2, r3, #1
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061bc:	b29b      	uxth	r3, r3
 80061be:	3b01      	subs	r3, #1
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061c6:	2300      	movs	r3, #0
 80061c8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f003 0301 	and.w	r3, r3, #1
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d119      	bne.n	800620c <HAL_SPI_TransmitReceive+0x2a6>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061dc:	b29b      	uxth	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d014      	beq.n	800620c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68da      	ldr	r2, [r3, #12]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ec:	b2d2      	uxtb	r2, r2
 80061ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061f4:	1c5a      	adds	r2, r3, #1
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061fe:	b29b      	uxth	r3, r3
 8006200:	3b01      	subs	r3, #1
 8006202:	b29a      	uxth	r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006208:	2301      	movs	r3, #1
 800620a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800620c:	f7fb f9ea 	bl	80015e4 <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	6a3b      	ldr	r3, [r7, #32]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006218:	429a      	cmp	r2, r3
 800621a:	d803      	bhi.n	8006224 <HAL_SPI_TransmitReceive+0x2be>
 800621c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800621e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006222:	d102      	bne.n	800622a <HAL_SPI_TransmitReceive+0x2c4>
 8006224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006226:	2b00      	cmp	r3, #0
 8006228:	d109      	bne.n	800623e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e038      	b.n	80062b0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006242:	b29b      	uxth	r3, r3
 8006244:	2b00      	cmp	r3, #0
 8006246:	d19c      	bne.n	8006182 <HAL_SPI_TransmitReceive+0x21c>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800624c:	b29b      	uxth	r3, r3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d197      	bne.n	8006182 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006252:	6a3a      	ldr	r2, [r7, #32]
 8006254:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f000 f8b6 	bl	80063c8 <SPI_EndRxTxTransaction>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d008      	beq.n	8006274 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2220      	movs	r2, #32
 8006266:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e01d      	b.n	80062b0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d10a      	bne.n	8006292 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800627c:	2300      	movs	r3, #0
 800627e:	613b      	str	r3, [r7, #16]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	613b      	str	r3, [r7, #16]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	613b      	str	r3, [r7, #16]
 8006290:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2201      	movs	r2, #1
 8006296:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d001      	beq.n	80062ae <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e000      	b.n	80062b0 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80062ae:	2300      	movs	r3, #0
  }
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3728      	adds	r7, #40	@ 0x28
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b088      	sub	sp, #32
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	603b      	str	r3, [r7, #0]
 80062c4:	4613      	mov	r3, r2
 80062c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80062c8:	f7fb f98c 	bl	80015e4 <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d0:	1a9b      	subs	r3, r3, r2
 80062d2:	683a      	ldr	r2, [r7, #0]
 80062d4:	4413      	add	r3, r2
 80062d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80062d8:	f7fb f984 	bl	80015e4 <HAL_GetTick>
 80062dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80062de:	4b39      	ldr	r3, [pc, #228]	@ (80063c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	015b      	lsls	r3, r3, #5
 80062e4:	0d1b      	lsrs	r3, r3, #20
 80062e6:	69fa      	ldr	r2, [r7, #28]
 80062e8:	fb02 f303 	mul.w	r3, r2, r3
 80062ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062ee:	e054      	b.n	800639a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f6:	d050      	beq.n	800639a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80062f8:	f7fb f974 	bl	80015e4 <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	69fa      	ldr	r2, [r7, #28]
 8006304:	429a      	cmp	r2, r3
 8006306:	d902      	bls.n	800630e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d13d      	bne.n	800638a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	685a      	ldr	r2, [r3, #4]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800631c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006326:	d111      	bne.n	800634c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006330:	d004      	beq.n	800633c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800633a:	d107      	bne.n	800634c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800634a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006350:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006354:	d10f      	bne.n	8006376 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006364:	601a      	str	r2, [r3, #0]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006374:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e017      	b.n	80063ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d101      	bne.n	8006394 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006390:	2300      	movs	r3, #0
 8006392:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	3b01      	subs	r3, #1
 8006398:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	689a      	ldr	r2, [r3, #8]
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	4013      	ands	r3, r2
 80063a4:	68ba      	ldr	r2, [r7, #8]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	bf0c      	ite	eq
 80063aa:	2301      	moveq	r3, #1
 80063ac:	2300      	movne	r3, #0
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	461a      	mov	r2, r3
 80063b2:	79fb      	ldrb	r3, [r7, #7]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d19b      	bne.n	80062f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3720      	adds	r7, #32
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	20000000 	.word	0x20000000

080063c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b088      	sub	sp, #32
 80063cc:	af02      	add	r7, sp, #8
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	9300      	str	r3, [sp, #0]
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	2201      	movs	r2, #1
 80063dc:	2102      	movs	r1, #2
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f7ff ff6a 	bl	80062b8 <SPI_WaitFlagStateUntilTimeout>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d007      	beq.n	80063fa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ee:	f043 0220 	orr.w	r2, r3, #32
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e032      	b.n	8006460 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80063fa:	4b1b      	ldr	r3, [pc, #108]	@ (8006468 <SPI_EndRxTxTransaction+0xa0>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a1b      	ldr	r2, [pc, #108]	@ (800646c <SPI_EndRxTxTransaction+0xa4>)
 8006400:	fba2 2303 	umull	r2, r3, r2, r3
 8006404:	0d5b      	lsrs	r3, r3, #21
 8006406:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800640a:	fb02 f303 	mul.w	r3, r2, r3
 800640e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006418:	d112      	bne.n	8006440 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	9300      	str	r3, [sp, #0]
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	2200      	movs	r2, #0
 8006422:	2180      	movs	r1, #128	@ 0x80
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f7ff ff47 	bl	80062b8 <SPI_WaitFlagStateUntilTimeout>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d016      	beq.n	800645e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006434:	f043 0220 	orr.w	r2, r3, #32
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e00f      	b.n	8006460 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00a      	beq.n	800645c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	3b01      	subs	r3, #1
 800644a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006456:	2b80      	cmp	r3, #128	@ 0x80
 8006458:	d0f2      	beq.n	8006440 <SPI_EndRxTxTransaction+0x78>
 800645a:	e000      	b.n	800645e <SPI_EndRxTxTransaction+0x96>
        break;
 800645c:	bf00      	nop
  }

  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3718      	adds	r7, #24
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	20000000 	.word	0x20000000
 800646c:	165e9f81 	.word	0x165e9f81

08006470 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d101      	bne.n	8006482 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e042      	b.n	8006508 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006488:	b2db      	uxtb	r3, r3
 800648a:	2b00      	cmp	r3, #0
 800648c:	d106      	bne.n	800649c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f7fa ffcc 	bl	8001434 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2224      	movs	r2, #36	@ 0x24
 80064a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68da      	ldr	r2, [r3, #12]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80064b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 f82b 	bl	8006510 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	691a      	ldr	r2, [r3, #16]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80064c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	695a      	ldr	r2, [r3, #20]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80064d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68da      	ldr	r2, [r3, #12]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80064e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2220      	movs	r2, #32
 80064f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2220      	movs	r2, #32
 80064fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	3708      	adds	r7, #8
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006510:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006514:	b0c0      	sub	sp, #256	@ 0x100
 8006516:	af00      	add	r7, sp, #0
 8006518:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800651c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800652c:	68d9      	ldr	r1, [r3, #12]
 800652e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	ea40 0301 	orr.w	r3, r0, r1
 8006538:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800653a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800653e:	689a      	ldr	r2, [r3, #8]
 8006540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	431a      	orrs	r2, r3
 8006548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	431a      	orrs	r2, r3
 8006550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	4313      	orrs	r3, r2
 8006558:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800655c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006568:	f021 010c 	bic.w	r1, r1, #12
 800656c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006576:	430b      	orrs	r3, r1
 8006578:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800657a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800658a:	6999      	ldr	r1, [r3, #24]
 800658c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	ea40 0301 	orr.w	r3, r0, r1
 8006596:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	4b8f      	ldr	r3, [pc, #572]	@ (80067dc <UART_SetConfig+0x2cc>)
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d005      	beq.n	80065b0 <UART_SetConfig+0xa0>
 80065a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	4b8d      	ldr	r3, [pc, #564]	@ (80067e0 <UART_SetConfig+0x2d0>)
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d104      	bne.n	80065ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80065b0:	f7fe feaa 	bl	8005308 <HAL_RCC_GetPCLK2Freq>
 80065b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80065b8:	e003      	b.n	80065c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80065ba:	f7fe fe91 	bl	80052e0 <HAL_RCC_GetPCLK1Freq>
 80065be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065c6:	69db      	ldr	r3, [r3, #28]
 80065c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065cc:	f040 810c 	bne.w	80067e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065d4:	2200      	movs	r2, #0
 80065d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80065da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80065de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80065e2:	4622      	mov	r2, r4
 80065e4:	462b      	mov	r3, r5
 80065e6:	1891      	adds	r1, r2, r2
 80065e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80065ea:	415b      	adcs	r3, r3
 80065ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80065f2:	4621      	mov	r1, r4
 80065f4:	eb12 0801 	adds.w	r8, r2, r1
 80065f8:	4629      	mov	r1, r5
 80065fa:	eb43 0901 	adc.w	r9, r3, r1
 80065fe:	f04f 0200 	mov.w	r2, #0
 8006602:	f04f 0300 	mov.w	r3, #0
 8006606:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800660a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800660e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006612:	4690      	mov	r8, r2
 8006614:	4699      	mov	r9, r3
 8006616:	4623      	mov	r3, r4
 8006618:	eb18 0303 	adds.w	r3, r8, r3
 800661c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006620:	462b      	mov	r3, r5
 8006622:	eb49 0303 	adc.w	r3, r9, r3
 8006626:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800662a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006636:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800663a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800663e:	460b      	mov	r3, r1
 8006640:	18db      	adds	r3, r3, r3
 8006642:	653b      	str	r3, [r7, #80]	@ 0x50
 8006644:	4613      	mov	r3, r2
 8006646:	eb42 0303 	adc.w	r3, r2, r3
 800664a:	657b      	str	r3, [r7, #84]	@ 0x54
 800664c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006650:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006654:	f7f9 fe0c 	bl	8000270 <__aeabi_uldivmod>
 8006658:	4602      	mov	r2, r0
 800665a:	460b      	mov	r3, r1
 800665c:	4b61      	ldr	r3, [pc, #388]	@ (80067e4 <UART_SetConfig+0x2d4>)
 800665e:	fba3 2302 	umull	r2, r3, r3, r2
 8006662:	095b      	lsrs	r3, r3, #5
 8006664:	011c      	lsls	r4, r3, #4
 8006666:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800666a:	2200      	movs	r2, #0
 800666c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006670:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006674:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006678:	4642      	mov	r2, r8
 800667a:	464b      	mov	r3, r9
 800667c:	1891      	adds	r1, r2, r2
 800667e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006680:	415b      	adcs	r3, r3
 8006682:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006684:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006688:	4641      	mov	r1, r8
 800668a:	eb12 0a01 	adds.w	sl, r2, r1
 800668e:	4649      	mov	r1, r9
 8006690:	eb43 0b01 	adc.w	fp, r3, r1
 8006694:	f04f 0200 	mov.w	r2, #0
 8006698:	f04f 0300 	mov.w	r3, #0
 800669c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80066a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80066a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066a8:	4692      	mov	sl, r2
 80066aa:	469b      	mov	fp, r3
 80066ac:	4643      	mov	r3, r8
 80066ae:	eb1a 0303 	adds.w	r3, sl, r3
 80066b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066b6:	464b      	mov	r3, r9
 80066b8:	eb4b 0303 	adc.w	r3, fp, r3
 80066bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80066c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80066cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80066d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80066d4:	460b      	mov	r3, r1
 80066d6:	18db      	adds	r3, r3, r3
 80066d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80066da:	4613      	mov	r3, r2
 80066dc:	eb42 0303 	adc.w	r3, r2, r3
 80066e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80066e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80066e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80066ea:	f7f9 fdc1 	bl	8000270 <__aeabi_uldivmod>
 80066ee:	4602      	mov	r2, r0
 80066f0:	460b      	mov	r3, r1
 80066f2:	4611      	mov	r1, r2
 80066f4:	4b3b      	ldr	r3, [pc, #236]	@ (80067e4 <UART_SetConfig+0x2d4>)
 80066f6:	fba3 2301 	umull	r2, r3, r3, r1
 80066fa:	095b      	lsrs	r3, r3, #5
 80066fc:	2264      	movs	r2, #100	@ 0x64
 80066fe:	fb02 f303 	mul.w	r3, r2, r3
 8006702:	1acb      	subs	r3, r1, r3
 8006704:	00db      	lsls	r3, r3, #3
 8006706:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800670a:	4b36      	ldr	r3, [pc, #216]	@ (80067e4 <UART_SetConfig+0x2d4>)
 800670c:	fba3 2302 	umull	r2, r3, r3, r2
 8006710:	095b      	lsrs	r3, r3, #5
 8006712:	005b      	lsls	r3, r3, #1
 8006714:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006718:	441c      	add	r4, r3
 800671a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800671e:	2200      	movs	r2, #0
 8006720:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006724:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006728:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800672c:	4642      	mov	r2, r8
 800672e:	464b      	mov	r3, r9
 8006730:	1891      	adds	r1, r2, r2
 8006732:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006734:	415b      	adcs	r3, r3
 8006736:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006738:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800673c:	4641      	mov	r1, r8
 800673e:	1851      	adds	r1, r2, r1
 8006740:	6339      	str	r1, [r7, #48]	@ 0x30
 8006742:	4649      	mov	r1, r9
 8006744:	414b      	adcs	r3, r1
 8006746:	637b      	str	r3, [r7, #52]	@ 0x34
 8006748:	f04f 0200 	mov.w	r2, #0
 800674c:	f04f 0300 	mov.w	r3, #0
 8006750:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006754:	4659      	mov	r1, fp
 8006756:	00cb      	lsls	r3, r1, #3
 8006758:	4651      	mov	r1, sl
 800675a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800675e:	4651      	mov	r1, sl
 8006760:	00ca      	lsls	r2, r1, #3
 8006762:	4610      	mov	r0, r2
 8006764:	4619      	mov	r1, r3
 8006766:	4603      	mov	r3, r0
 8006768:	4642      	mov	r2, r8
 800676a:	189b      	adds	r3, r3, r2
 800676c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006770:	464b      	mov	r3, r9
 8006772:	460a      	mov	r2, r1
 8006774:	eb42 0303 	adc.w	r3, r2, r3
 8006778:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800677c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006788:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800678c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006790:	460b      	mov	r3, r1
 8006792:	18db      	adds	r3, r3, r3
 8006794:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006796:	4613      	mov	r3, r2
 8006798:	eb42 0303 	adc.w	r3, r2, r3
 800679c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800679e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80067a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80067a6:	f7f9 fd63 	bl	8000270 <__aeabi_uldivmod>
 80067aa:	4602      	mov	r2, r0
 80067ac:	460b      	mov	r3, r1
 80067ae:	4b0d      	ldr	r3, [pc, #52]	@ (80067e4 <UART_SetConfig+0x2d4>)
 80067b0:	fba3 1302 	umull	r1, r3, r3, r2
 80067b4:	095b      	lsrs	r3, r3, #5
 80067b6:	2164      	movs	r1, #100	@ 0x64
 80067b8:	fb01 f303 	mul.w	r3, r1, r3
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	00db      	lsls	r3, r3, #3
 80067c0:	3332      	adds	r3, #50	@ 0x32
 80067c2:	4a08      	ldr	r2, [pc, #32]	@ (80067e4 <UART_SetConfig+0x2d4>)
 80067c4:	fba2 2303 	umull	r2, r3, r2, r3
 80067c8:	095b      	lsrs	r3, r3, #5
 80067ca:	f003 0207 	and.w	r2, r3, #7
 80067ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4422      	add	r2, r4
 80067d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80067d8:	e106      	b.n	80069e8 <UART_SetConfig+0x4d8>
 80067da:	bf00      	nop
 80067dc:	40011000 	.word	0x40011000
 80067e0:	40011400 	.word	0x40011400
 80067e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067ec:	2200      	movs	r2, #0
 80067ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80067f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80067f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80067fa:	4642      	mov	r2, r8
 80067fc:	464b      	mov	r3, r9
 80067fe:	1891      	adds	r1, r2, r2
 8006800:	6239      	str	r1, [r7, #32]
 8006802:	415b      	adcs	r3, r3
 8006804:	627b      	str	r3, [r7, #36]	@ 0x24
 8006806:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800680a:	4641      	mov	r1, r8
 800680c:	1854      	adds	r4, r2, r1
 800680e:	4649      	mov	r1, r9
 8006810:	eb43 0501 	adc.w	r5, r3, r1
 8006814:	f04f 0200 	mov.w	r2, #0
 8006818:	f04f 0300 	mov.w	r3, #0
 800681c:	00eb      	lsls	r3, r5, #3
 800681e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006822:	00e2      	lsls	r2, r4, #3
 8006824:	4614      	mov	r4, r2
 8006826:	461d      	mov	r5, r3
 8006828:	4643      	mov	r3, r8
 800682a:	18e3      	adds	r3, r4, r3
 800682c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006830:	464b      	mov	r3, r9
 8006832:	eb45 0303 	adc.w	r3, r5, r3
 8006836:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800683a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006846:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800684a:	f04f 0200 	mov.w	r2, #0
 800684e:	f04f 0300 	mov.w	r3, #0
 8006852:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006856:	4629      	mov	r1, r5
 8006858:	008b      	lsls	r3, r1, #2
 800685a:	4621      	mov	r1, r4
 800685c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006860:	4621      	mov	r1, r4
 8006862:	008a      	lsls	r2, r1, #2
 8006864:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006868:	f7f9 fd02 	bl	8000270 <__aeabi_uldivmod>
 800686c:	4602      	mov	r2, r0
 800686e:	460b      	mov	r3, r1
 8006870:	4b60      	ldr	r3, [pc, #384]	@ (80069f4 <UART_SetConfig+0x4e4>)
 8006872:	fba3 2302 	umull	r2, r3, r3, r2
 8006876:	095b      	lsrs	r3, r3, #5
 8006878:	011c      	lsls	r4, r3, #4
 800687a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800687e:	2200      	movs	r2, #0
 8006880:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006884:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006888:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800688c:	4642      	mov	r2, r8
 800688e:	464b      	mov	r3, r9
 8006890:	1891      	adds	r1, r2, r2
 8006892:	61b9      	str	r1, [r7, #24]
 8006894:	415b      	adcs	r3, r3
 8006896:	61fb      	str	r3, [r7, #28]
 8006898:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800689c:	4641      	mov	r1, r8
 800689e:	1851      	adds	r1, r2, r1
 80068a0:	6139      	str	r1, [r7, #16]
 80068a2:	4649      	mov	r1, r9
 80068a4:	414b      	adcs	r3, r1
 80068a6:	617b      	str	r3, [r7, #20]
 80068a8:	f04f 0200 	mov.w	r2, #0
 80068ac:	f04f 0300 	mov.w	r3, #0
 80068b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80068b4:	4659      	mov	r1, fp
 80068b6:	00cb      	lsls	r3, r1, #3
 80068b8:	4651      	mov	r1, sl
 80068ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068be:	4651      	mov	r1, sl
 80068c0:	00ca      	lsls	r2, r1, #3
 80068c2:	4610      	mov	r0, r2
 80068c4:	4619      	mov	r1, r3
 80068c6:	4603      	mov	r3, r0
 80068c8:	4642      	mov	r2, r8
 80068ca:	189b      	adds	r3, r3, r2
 80068cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80068d0:	464b      	mov	r3, r9
 80068d2:	460a      	mov	r2, r1
 80068d4:	eb42 0303 	adc.w	r3, r2, r3
 80068d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80068dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80068e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80068e8:	f04f 0200 	mov.w	r2, #0
 80068ec:	f04f 0300 	mov.w	r3, #0
 80068f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80068f4:	4649      	mov	r1, r9
 80068f6:	008b      	lsls	r3, r1, #2
 80068f8:	4641      	mov	r1, r8
 80068fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068fe:	4641      	mov	r1, r8
 8006900:	008a      	lsls	r2, r1, #2
 8006902:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006906:	f7f9 fcb3 	bl	8000270 <__aeabi_uldivmod>
 800690a:	4602      	mov	r2, r0
 800690c:	460b      	mov	r3, r1
 800690e:	4611      	mov	r1, r2
 8006910:	4b38      	ldr	r3, [pc, #224]	@ (80069f4 <UART_SetConfig+0x4e4>)
 8006912:	fba3 2301 	umull	r2, r3, r3, r1
 8006916:	095b      	lsrs	r3, r3, #5
 8006918:	2264      	movs	r2, #100	@ 0x64
 800691a:	fb02 f303 	mul.w	r3, r2, r3
 800691e:	1acb      	subs	r3, r1, r3
 8006920:	011b      	lsls	r3, r3, #4
 8006922:	3332      	adds	r3, #50	@ 0x32
 8006924:	4a33      	ldr	r2, [pc, #204]	@ (80069f4 <UART_SetConfig+0x4e4>)
 8006926:	fba2 2303 	umull	r2, r3, r2, r3
 800692a:	095b      	lsrs	r3, r3, #5
 800692c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006930:	441c      	add	r4, r3
 8006932:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006936:	2200      	movs	r2, #0
 8006938:	673b      	str	r3, [r7, #112]	@ 0x70
 800693a:	677a      	str	r2, [r7, #116]	@ 0x74
 800693c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006940:	4642      	mov	r2, r8
 8006942:	464b      	mov	r3, r9
 8006944:	1891      	adds	r1, r2, r2
 8006946:	60b9      	str	r1, [r7, #8]
 8006948:	415b      	adcs	r3, r3
 800694a:	60fb      	str	r3, [r7, #12]
 800694c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006950:	4641      	mov	r1, r8
 8006952:	1851      	adds	r1, r2, r1
 8006954:	6039      	str	r1, [r7, #0]
 8006956:	4649      	mov	r1, r9
 8006958:	414b      	adcs	r3, r1
 800695a:	607b      	str	r3, [r7, #4]
 800695c:	f04f 0200 	mov.w	r2, #0
 8006960:	f04f 0300 	mov.w	r3, #0
 8006964:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006968:	4659      	mov	r1, fp
 800696a:	00cb      	lsls	r3, r1, #3
 800696c:	4651      	mov	r1, sl
 800696e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006972:	4651      	mov	r1, sl
 8006974:	00ca      	lsls	r2, r1, #3
 8006976:	4610      	mov	r0, r2
 8006978:	4619      	mov	r1, r3
 800697a:	4603      	mov	r3, r0
 800697c:	4642      	mov	r2, r8
 800697e:	189b      	adds	r3, r3, r2
 8006980:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006982:	464b      	mov	r3, r9
 8006984:	460a      	mov	r2, r1
 8006986:	eb42 0303 	adc.w	r3, r2, r3
 800698a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800698c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	663b      	str	r3, [r7, #96]	@ 0x60
 8006996:	667a      	str	r2, [r7, #100]	@ 0x64
 8006998:	f04f 0200 	mov.w	r2, #0
 800699c:	f04f 0300 	mov.w	r3, #0
 80069a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80069a4:	4649      	mov	r1, r9
 80069a6:	008b      	lsls	r3, r1, #2
 80069a8:	4641      	mov	r1, r8
 80069aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069ae:	4641      	mov	r1, r8
 80069b0:	008a      	lsls	r2, r1, #2
 80069b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80069b6:	f7f9 fc5b 	bl	8000270 <__aeabi_uldivmod>
 80069ba:	4602      	mov	r2, r0
 80069bc:	460b      	mov	r3, r1
 80069be:	4b0d      	ldr	r3, [pc, #52]	@ (80069f4 <UART_SetConfig+0x4e4>)
 80069c0:	fba3 1302 	umull	r1, r3, r3, r2
 80069c4:	095b      	lsrs	r3, r3, #5
 80069c6:	2164      	movs	r1, #100	@ 0x64
 80069c8:	fb01 f303 	mul.w	r3, r1, r3
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	011b      	lsls	r3, r3, #4
 80069d0:	3332      	adds	r3, #50	@ 0x32
 80069d2:	4a08      	ldr	r2, [pc, #32]	@ (80069f4 <UART_SetConfig+0x4e4>)
 80069d4:	fba2 2303 	umull	r2, r3, r2, r3
 80069d8:	095b      	lsrs	r3, r3, #5
 80069da:	f003 020f 	and.w	r2, r3, #15
 80069de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4422      	add	r2, r4
 80069e6:	609a      	str	r2, [r3, #8]
}
 80069e8:	bf00      	nop
 80069ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80069ee:	46bd      	mov	sp, r7
 80069f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069f4:	51eb851f 	.word	0x51eb851f

080069f8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80069fc:	4904      	ldr	r1, [pc, #16]	@ (8006a10 <MX_FATFS_Init+0x18>)
 80069fe:	4805      	ldr	r0, [pc, #20]	@ (8006a14 <MX_FATFS_Init+0x1c>)
 8006a00:	f004 fe86 	bl	800b710 <FATFS_LinkDriver>
 8006a04:	4603      	mov	r3, r0
 8006a06:	461a      	mov	r2, r3
 8006a08:	4b03      	ldr	r3, [pc, #12]	@ (8006a18 <MX_FATFS_Init+0x20>)
 8006a0a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006a0c:	bf00      	nop
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	2000037c 	.word	0x2000037c
 8006a14:	2000000c 	.word	0x2000000c
 8006a18:	20000378 	.word	0x20000378

08006a1c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006a20:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	4603      	mov	r3, r0
 8006a34:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 8006a36:	79fb      	ldrb	r3, [r7, #7]
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f000 f9d3 	bl	8006de4 <USER_SPI_initialize>
 8006a3e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3708      	adds	r7, #8
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	4603      	mov	r3, r0
 8006a50:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
  return USER_SPI_status(pdrv);
 8006a52:	79fb      	ldrb	r3, [r7, #7]
 8006a54:	4618      	mov	r0, r3
 8006a56:	f000 fab1 	bl	8006fbc <USER_SPI_status>
 8006a5a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3708      	adds	r7, #8
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60b9      	str	r1, [r7, #8]
 8006a6c:	607a      	str	r2, [r7, #4]
 8006a6e:	603b      	str	r3, [r7, #0]
 8006a70:	4603      	mov	r3, r0
 8006a72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
  return USER_SPI_read(pdrv, buff, sector, count);
 8006a74:	7bf8      	ldrb	r0, [r7, #15]
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	68b9      	ldr	r1, [r7, #8]
 8006a7c:	f000 fab4 	bl	8006fe8 <USER_SPI_read>
 8006a80:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b084      	sub	sp, #16
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	607a      	str	r2, [r7, #4]
 8006a94:	603b      	str	r3, [r7, #0]
 8006a96:	4603      	mov	r3, r0
 8006a98:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 8006a9a:	7bf8      	ldrb	r0, [r7, #15]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	68b9      	ldr	r1, [r7, #8]
 8006aa2:	f000 fb07 	bl	80070b4 <USER_SPI_write>
 8006aa6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3710      	adds	r7, #16
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	603a      	str	r2, [r7, #0]
 8006aba:	71fb      	strb	r3, [r7, #7]
 8006abc:	460b      	mov	r3, r1
 8006abe:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
  return USER_SPI_ioctl(pdrv, cmd, buff);
 8006ac0:	79b9      	ldrb	r1, [r7, #6]
 8006ac2:	79fb      	ldrb	r3, [r7, #7]
 8006ac4:	683a      	ldr	r2, [r7, #0]
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f000 fb70 	bl	80071ac <USER_SPI_ioctl>
 8006acc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3708      	adds	r7, #8
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
	...

08006ad8 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8006ae0:	f7fa fd80 	bl	80015e4 <HAL_GetTick>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	4a04      	ldr	r2, [pc, #16]	@ (8006af8 <SPI_Timer_On+0x20>)
 8006ae8:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8006aea:	4a04      	ldr	r2, [pc, #16]	@ (8006afc <SPI_Timer_On+0x24>)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6013      	str	r3, [r2, #0]
}
 8006af0:	bf00      	nop
 8006af2:	3708      	adds	r7, #8
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	20000384 	.word	0x20000384
 8006afc:	20000388 	.word	0x20000388

08006b00 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8006b00:	b580      	push	{r7, lr}
 8006b02:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8006b04:	f7fa fd6e 	bl	80015e4 <HAL_GetTick>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	4b06      	ldr	r3, [pc, #24]	@ (8006b24 <SPI_Timer_Status+0x24>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	1ad2      	subs	r2, r2, r3
 8006b10:	4b05      	ldr	r3, [pc, #20]	@ (8006b28 <SPI_Timer_Status+0x28>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	bf34      	ite	cc
 8006b18:	2301      	movcc	r3, #1
 8006b1a:	2300      	movcs	r3, #0
 8006b1c:	b2db      	uxtb	r3, r3
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	20000384 	.word	0x20000384
 8006b28:	20000388 	.word	0x20000388

08006b2c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b086      	sub	sp, #24
 8006b30:	af02      	add	r7, sp, #8
 8006b32:	4603      	mov	r3, r0
 8006b34:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006b36:	f107 020f 	add.w	r2, r7, #15
 8006b3a:	1df9      	adds	r1, r7, #7
 8006b3c:	2332      	movs	r3, #50	@ 0x32
 8006b3e:	9300      	str	r3, [sp, #0]
 8006b40:	2301      	movs	r3, #1
 8006b42:	4804      	ldr	r0, [pc, #16]	@ (8006b54 <xchg_spi+0x28>)
 8006b44:	f7ff fa0f 	bl	8005f66 <HAL_SPI_TransmitReceive>
    return rxDat;
 8006b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	200002d0 	.word	0x200002d0

08006b58 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8006b58:	b590      	push	{r4, r7, lr}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8006b62:	2300      	movs	r3, #0
 8006b64:	60fb      	str	r3, [r7, #12]
 8006b66:	e00a      	b.n	8006b7e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	18d4      	adds	r4, r2, r3
 8006b6e:	20ff      	movs	r0, #255	@ 0xff
 8006b70:	f7ff ffdc 	bl	8006b2c <xchg_spi>
 8006b74:	4603      	mov	r3, r0
 8006b76:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	60fb      	str	r3, [r7, #12]
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d3f0      	bcc.n	8006b68 <rcvr_spi_multi+0x10>
	}
}
 8006b86:	bf00      	nop
 8006b88:	bf00      	nop
 8006b8a:	3714      	adds	r7, #20
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd90      	pop	{r4, r7, pc}

08006b90 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	b29a      	uxth	r2, r3
 8006b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8006ba2:	6879      	ldr	r1, [r7, #4]
 8006ba4:	4803      	ldr	r0, [pc, #12]	@ (8006bb4 <xmit_spi_multi+0x24>)
 8006ba6:	f7ff f89a 	bl	8005cde <HAL_SPI_Transmit>
}
 8006baa:	bf00      	nop
 8006bac:	3708      	adds	r7, #8
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	200002d0 	.word	0x200002d0

08006bb8 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b086      	sub	sp, #24
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8006bc0:	f7fa fd10 	bl	80015e4 <HAL_GetTick>
 8006bc4:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8006bca:	20ff      	movs	r0, #255	@ 0xff
 8006bcc:	f7ff ffae 	bl	8006b2c <xchg_spi>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8006bd4:	7bfb      	ldrb	r3, [r7, #15]
 8006bd6:	2bff      	cmp	r3, #255	@ 0xff
 8006bd8:	d007      	beq.n	8006bea <wait_ready+0x32>
 8006bda:	f7fa fd03 	bl	80015e4 <HAL_GetTick>
 8006bde:	4602      	mov	r2, r0
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	1ad3      	subs	r3, r2, r3
 8006be4:	693a      	ldr	r2, [r7, #16]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d8ef      	bhi.n	8006bca <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8006bea:	7bfb      	ldrb	r3, [r7, #15]
 8006bec:	2bff      	cmp	r3, #255	@ 0xff
 8006bee:	bf0c      	ite	eq
 8006bf0:	2301      	moveq	r3, #1
 8006bf2:	2300      	movne	r3, #0
 8006bf4:	b2db      	uxtb	r3, r3
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3718      	adds	r7, #24
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
	...

08006c00 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8006c04:	2201      	movs	r2, #1
 8006c06:	2120      	movs	r1, #32
 8006c08:	4803      	ldr	r0, [pc, #12]	@ (8006c18 <despiselect+0x18>)
 8006c0a:	f7fb ff1f 	bl	8002a4c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8006c0e:	20ff      	movs	r0, #255	@ 0xff
 8006c10:	f7ff ff8c 	bl	8006b2c <xchg_spi>

}
 8006c14:	bf00      	nop
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	40020800 	.word	0x40020800

08006c1c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8006c20:	2200      	movs	r2, #0
 8006c22:	2120      	movs	r1, #32
 8006c24:	4809      	ldr	r0, [pc, #36]	@ (8006c4c <spiselect+0x30>)
 8006c26:	f7fb ff11 	bl	8002a4c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8006c2a:	20ff      	movs	r0, #255	@ 0xff
 8006c2c:	f7ff ff7e 	bl	8006b2c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8006c30:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8006c34:	f7ff ffc0 	bl	8006bb8 <wait_ready>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d001      	beq.n	8006c42 <spiselect+0x26>
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e002      	b.n	8006c48 <spiselect+0x2c>

	despiselect();
 8006c42:	f7ff ffdd 	bl	8006c00 <despiselect>
	return 0;	/* Timeout */
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	40020800 	.word	0x40020800

08006c50 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8006c5a:	20c8      	movs	r0, #200	@ 0xc8
 8006c5c:	f7ff ff3c 	bl	8006ad8 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8006c60:	20ff      	movs	r0, #255	@ 0xff
 8006c62:	f7ff ff63 	bl	8006b2c <xchg_spi>
 8006c66:	4603      	mov	r3, r0
 8006c68:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8006c6a:	7bfb      	ldrb	r3, [r7, #15]
 8006c6c:	2bff      	cmp	r3, #255	@ 0xff
 8006c6e:	d104      	bne.n	8006c7a <rcvr_datablock+0x2a>
 8006c70:	f7ff ff46 	bl	8006b00 <SPI_Timer_Status>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1f2      	bne.n	8006c60 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8006c7a:	7bfb      	ldrb	r3, [r7, #15]
 8006c7c:	2bfe      	cmp	r3, #254	@ 0xfe
 8006c7e:	d001      	beq.n	8006c84 <rcvr_datablock+0x34>
 8006c80:	2300      	movs	r3, #0
 8006c82:	e00a      	b.n	8006c9a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8006c84:	6839      	ldr	r1, [r7, #0]
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f7ff ff66 	bl	8006b58 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8006c8c:	20ff      	movs	r0, #255	@ 0xff
 8006c8e:	f7ff ff4d 	bl	8006b2c <xchg_spi>
 8006c92:	20ff      	movs	r0, #255	@ 0xff
 8006c94:	f7ff ff4a 	bl	8006b2c <xchg_spi>

	return 1;						/* Function succeeded */
 8006c98:	2301      	movs	r3, #1
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b084      	sub	sp, #16
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	460b      	mov	r3, r1
 8006cac:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8006cae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8006cb2:	f7ff ff81 	bl	8006bb8 <wait_ready>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d101      	bne.n	8006cc0 <xmit_datablock+0x1e>
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	e01e      	b.n	8006cfe <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8006cc0:	78fb      	ldrb	r3, [r7, #3]
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7ff ff32 	bl	8006b2c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8006cc8:	78fb      	ldrb	r3, [r7, #3]
 8006cca:	2bfd      	cmp	r3, #253	@ 0xfd
 8006ccc:	d016      	beq.n	8006cfc <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8006cce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f7ff ff5c 	bl	8006b90 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8006cd8:	20ff      	movs	r0, #255	@ 0xff
 8006cda:	f7ff ff27 	bl	8006b2c <xchg_spi>
 8006cde:	20ff      	movs	r0, #255	@ 0xff
 8006ce0:	f7ff ff24 	bl	8006b2c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8006ce4:	20ff      	movs	r0, #255	@ 0xff
 8006ce6:	f7ff ff21 	bl	8006b2c <xchg_spi>
 8006cea:	4603      	mov	r3, r0
 8006cec:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8006cee:	7bfb      	ldrb	r3, [r7, #15]
 8006cf0:	f003 031f 	and.w	r3, r3, #31
 8006cf4:	2b05      	cmp	r3, #5
 8006cf6:	d001      	beq.n	8006cfc <xmit_datablock+0x5a>
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	e000      	b.n	8006cfe <xmit_datablock+0x5c>
	}
	return 1;
 8006cfc:	2301      	movs	r3, #1
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b084      	sub	sp, #16
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	6039      	str	r1, [r7, #0]
 8006d10:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8006d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	da0e      	bge.n	8006d38 <send_cmd+0x32>
		cmd &= 0x7F;
 8006d1a:	79fb      	ldrb	r3, [r7, #7]
 8006d1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d20:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8006d22:	2100      	movs	r1, #0
 8006d24:	2037      	movs	r0, #55	@ 0x37
 8006d26:	f7ff ffee 	bl	8006d06 <send_cmd>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8006d2e:	7bbb      	ldrb	r3, [r7, #14]
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d901      	bls.n	8006d38 <send_cmd+0x32>
 8006d34:	7bbb      	ldrb	r3, [r7, #14]
 8006d36:	e051      	b.n	8006ddc <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8006d38:	79fb      	ldrb	r3, [r7, #7]
 8006d3a:	2b0c      	cmp	r3, #12
 8006d3c:	d008      	beq.n	8006d50 <send_cmd+0x4a>
		despiselect();
 8006d3e:	f7ff ff5f 	bl	8006c00 <despiselect>
		if (!spiselect()) return 0xFF;
 8006d42:	f7ff ff6b 	bl	8006c1c <spiselect>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d101      	bne.n	8006d50 <send_cmd+0x4a>
 8006d4c:	23ff      	movs	r3, #255	@ 0xff
 8006d4e:	e045      	b.n	8006ddc <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8006d50:	79fb      	ldrb	r3, [r7, #7]
 8006d52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7ff fee7 	bl	8006b2c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	0e1b      	lsrs	r3, r3, #24
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7ff fee1 	bl	8006b2c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	0c1b      	lsrs	r3, r3, #16
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	4618      	mov	r0, r3
 8006d72:	f7ff fedb 	bl	8006b2c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	0a1b      	lsrs	r3, r3, #8
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f7ff fed5 	bl	8006b2c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7ff fed0 	bl	8006b2c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8006d90:	79fb      	ldrb	r3, [r7, #7]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d101      	bne.n	8006d9a <send_cmd+0x94>
 8006d96:	2395      	movs	r3, #149	@ 0x95
 8006d98:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8006d9a:	79fb      	ldrb	r3, [r7, #7]
 8006d9c:	2b08      	cmp	r3, #8
 8006d9e:	d101      	bne.n	8006da4 <send_cmd+0x9e>
 8006da0:	2387      	movs	r3, #135	@ 0x87
 8006da2:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8006da4:	7bfb      	ldrb	r3, [r7, #15]
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7ff fec0 	bl	8006b2c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8006dac:	79fb      	ldrb	r3, [r7, #7]
 8006dae:	2b0c      	cmp	r3, #12
 8006db0:	d102      	bne.n	8006db8 <send_cmd+0xb2>
 8006db2:	20ff      	movs	r0, #255	@ 0xff
 8006db4:	f7ff feba 	bl	8006b2c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8006db8:	230a      	movs	r3, #10
 8006dba:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8006dbc:	20ff      	movs	r0, #255	@ 0xff
 8006dbe:	f7ff feb5 	bl	8006b2c <xchg_spi>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8006dc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	da05      	bge.n	8006dda <send_cmd+0xd4>
 8006dce:	7bfb      	ldrb	r3, [r7, #15]
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	73fb      	strb	r3, [r7, #15]
 8006dd4:	7bfb      	ldrb	r3, [r7, #15]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1f0      	bne.n	8006dbc <send_cmd+0xb6>

	return res;							/* Return received response */
 8006dda:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3710      	adds	r7, #16
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006de4:	b590      	push	{r4, r7, lr}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	4603      	mov	r3, r0
 8006dec:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8006dee:	79fb      	ldrb	r3, [r7, #7]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d001      	beq.n	8006df8 <USER_SPI_initialize+0x14>
 8006df4:	2301      	movs	r3, #1
 8006df6:	e0d6      	b.n	8006fa6 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8006df8:	4b6d      	ldr	r3, [pc, #436]	@ (8006fb0 <USER_SPI_initialize+0x1cc>)
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	f003 0302 	and.w	r3, r3, #2
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d003      	beq.n	8006e0e <USER_SPI_initialize+0x2a>
 8006e06:	4b6a      	ldr	r3, [pc, #424]	@ (8006fb0 <USER_SPI_initialize+0x1cc>)
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	e0cb      	b.n	8006fa6 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8006e0e:	4b69      	ldr	r3, [pc, #420]	@ (8006fb4 <USER_SPI_initialize+0x1d0>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8006e18:	4b66      	ldr	r3, [pc, #408]	@ (8006fb4 <USER_SPI_initialize+0x1d0>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8006e20:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8006e22:	230a      	movs	r3, #10
 8006e24:	73fb      	strb	r3, [r7, #15]
 8006e26:	e005      	b.n	8006e34 <USER_SPI_initialize+0x50>
 8006e28:	20ff      	movs	r0, #255	@ 0xff
 8006e2a:	f7ff fe7f 	bl	8006b2c <xchg_spi>
 8006e2e:	7bfb      	ldrb	r3, [r7, #15]
 8006e30:	3b01      	subs	r3, #1
 8006e32:	73fb      	strb	r3, [r7, #15]
 8006e34:	7bfb      	ldrb	r3, [r7, #15]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1f6      	bne.n	8006e28 <USER_SPI_initialize+0x44>

	ty = 0;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8006e3e:	2100      	movs	r1, #0
 8006e40:	2000      	movs	r0, #0
 8006e42:	f7ff ff60 	bl	8006d06 <send_cmd>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	f040 808b 	bne.w	8006f64 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8006e4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006e52:	f7ff fe41 	bl	8006ad8 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8006e56:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8006e5a:	2008      	movs	r0, #8
 8006e5c:	f7ff ff53 	bl	8006d06 <send_cmd>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d151      	bne.n	8006f0a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8006e66:	2300      	movs	r3, #0
 8006e68:	73fb      	strb	r3, [r7, #15]
 8006e6a:	e00d      	b.n	8006e88 <USER_SPI_initialize+0xa4>
 8006e6c:	7bfc      	ldrb	r4, [r7, #15]
 8006e6e:	20ff      	movs	r0, #255	@ 0xff
 8006e70:	f7ff fe5c 	bl	8006b2c <xchg_spi>
 8006e74:	4603      	mov	r3, r0
 8006e76:	461a      	mov	r2, r3
 8006e78:	f104 0310 	add.w	r3, r4, #16
 8006e7c:	443b      	add	r3, r7
 8006e7e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006e82:	7bfb      	ldrb	r3, [r7, #15]
 8006e84:	3301      	adds	r3, #1
 8006e86:	73fb      	strb	r3, [r7, #15]
 8006e88:	7bfb      	ldrb	r3, [r7, #15]
 8006e8a:	2b03      	cmp	r3, #3
 8006e8c:	d9ee      	bls.n	8006e6c <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8006e8e:	7abb      	ldrb	r3, [r7, #10]
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d167      	bne.n	8006f64 <USER_SPI_initialize+0x180>
 8006e94:	7afb      	ldrb	r3, [r7, #11]
 8006e96:	2baa      	cmp	r3, #170	@ 0xaa
 8006e98:	d164      	bne.n	8006f64 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8006e9a:	bf00      	nop
 8006e9c:	f7ff fe30 	bl	8006b00 <SPI_Timer_Status>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d007      	beq.n	8006eb6 <USER_SPI_initialize+0xd2>
 8006ea6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8006eaa:	20a9      	movs	r0, #169	@ 0xa9
 8006eac:	f7ff ff2b 	bl	8006d06 <send_cmd>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1f2      	bne.n	8006e9c <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8006eb6:	f7ff fe23 	bl	8006b00 <SPI_Timer_Status>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d051      	beq.n	8006f64 <USER_SPI_initialize+0x180>
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	203a      	movs	r0, #58	@ 0x3a
 8006ec4:	f7ff ff1f 	bl	8006d06 <send_cmd>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d14a      	bne.n	8006f64 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8006ece:	2300      	movs	r3, #0
 8006ed0:	73fb      	strb	r3, [r7, #15]
 8006ed2:	e00d      	b.n	8006ef0 <USER_SPI_initialize+0x10c>
 8006ed4:	7bfc      	ldrb	r4, [r7, #15]
 8006ed6:	20ff      	movs	r0, #255	@ 0xff
 8006ed8:	f7ff fe28 	bl	8006b2c <xchg_spi>
 8006edc:	4603      	mov	r3, r0
 8006ede:	461a      	mov	r2, r3
 8006ee0:	f104 0310 	add.w	r3, r4, #16
 8006ee4:	443b      	add	r3, r7
 8006ee6:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006eea:	7bfb      	ldrb	r3, [r7, #15]
 8006eec:	3301      	adds	r3, #1
 8006eee:	73fb      	strb	r3, [r7, #15]
 8006ef0:	7bfb      	ldrb	r3, [r7, #15]
 8006ef2:	2b03      	cmp	r3, #3
 8006ef4:	d9ee      	bls.n	8006ed4 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8006ef6:	7a3b      	ldrb	r3, [r7, #8]
 8006ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d001      	beq.n	8006f04 <USER_SPI_initialize+0x120>
 8006f00:	230c      	movs	r3, #12
 8006f02:	e000      	b.n	8006f06 <USER_SPI_initialize+0x122>
 8006f04:	2304      	movs	r3, #4
 8006f06:	737b      	strb	r3, [r7, #13]
 8006f08:	e02c      	b.n	8006f64 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8006f0a:	2100      	movs	r1, #0
 8006f0c:	20a9      	movs	r0, #169	@ 0xa9
 8006f0e:	f7ff fefa 	bl	8006d06 <send_cmd>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d804      	bhi.n	8006f22 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8006f18:	2302      	movs	r3, #2
 8006f1a:	737b      	strb	r3, [r7, #13]
 8006f1c:	23a9      	movs	r3, #169	@ 0xa9
 8006f1e:	73bb      	strb	r3, [r7, #14]
 8006f20:	e003      	b.n	8006f2a <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8006f22:	2301      	movs	r3, #1
 8006f24:	737b      	strb	r3, [r7, #13]
 8006f26:	2301      	movs	r3, #1
 8006f28:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8006f2a:	bf00      	nop
 8006f2c:	f7ff fde8 	bl	8006b00 <SPI_Timer_Status>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d007      	beq.n	8006f46 <USER_SPI_initialize+0x162>
 8006f36:	7bbb      	ldrb	r3, [r7, #14]
 8006f38:	2100      	movs	r1, #0
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7ff fee3 	bl	8006d06 <send_cmd>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1f2      	bne.n	8006f2c <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8006f46:	f7ff fddb 	bl	8006b00 <SPI_Timer_Status>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d007      	beq.n	8006f60 <USER_SPI_initialize+0x17c>
 8006f50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006f54:	2010      	movs	r0, #16
 8006f56:	f7ff fed6 	bl	8006d06 <send_cmd>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d001      	beq.n	8006f64 <USER_SPI_initialize+0x180>
				ty = 0;
 8006f60:	2300      	movs	r3, #0
 8006f62:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8006f64:	4a14      	ldr	r2, [pc, #80]	@ (8006fb8 <USER_SPI_initialize+0x1d4>)
 8006f66:	7b7b      	ldrb	r3, [r7, #13]
 8006f68:	7013      	strb	r3, [r2, #0]
	despiselect();
 8006f6a:	f7ff fe49 	bl	8006c00 <despiselect>

	if (ty) {			/* OK */
 8006f6e:	7b7b      	ldrb	r3, [r7, #13]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d012      	beq.n	8006f9a <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8006f74:	4b0f      	ldr	r3, [pc, #60]	@ (8006fb4 <USER_SPI_initialize+0x1d0>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8006f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8006fb4 <USER_SPI_initialize+0x1d0>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f042 0210 	orr.w	r2, r2, #16
 8006f86:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8006f88:	4b09      	ldr	r3, [pc, #36]	@ (8006fb0 <USER_SPI_initialize+0x1cc>)
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	f023 0301 	bic.w	r3, r3, #1
 8006f92:	b2da      	uxtb	r2, r3
 8006f94:	4b06      	ldr	r3, [pc, #24]	@ (8006fb0 <USER_SPI_initialize+0x1cc>)
 8006f96:	701a      	strb	r2, [r3, #0]
 8006f98:	e002      	b.n	8006fa0 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8006f9a:	4b05      	ldr	r3, [pc, #20]	@ (8006fb0 <USER_SPI_initialize+0x1cc>)
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8006fa0:	4b03      	ldr	r3, [pc, #12]	@ (8006fb0 <USER_SPI_initialize+0x1cc>)
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	b2db      	uxtb	r3, r3
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3714      	adds	r7, #20
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd90      	pop	{r4, r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	20000020 	.word	0x20000020
 8006fb4:	200002d0 	.word	0x200002d0
 8006fb8:	20000380 	.word	0x20000380

08006fbc <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8006fc6:	79fb      	ldrb	r3, [r7, #7]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d001      	beq.n	8006fd0 <USER_SPI_status+0x14>
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e002      	b.n	8006fd6 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8006fd0:	4b04      	ldr	r3, [pc, #16]	@ (8006fe4 <USER_SPI_status+0x28>)
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	b2db      	uxtb	r3, r3
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	20000020 	.word	0x20000020

08006fe8 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60b9      	str	r1, [r7, #8]
 8006ff0:	607a      	str	r2, [r7, #4]
 8006ff2:	603b      	str	r3, [r7, #0]
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006ff8:	7bfb      	ldrb	r3, [r7, #15]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d102      	bne.n	8007004 <USER_SPI_read+0x1c>
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d101      	bne.n	8007008 <USER_SPI_read+0x20>
 8007004:	2304      	movs	r3, #4
 8007006:	e04d      	b.n	80070a4 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007008:	4b28      	ldr	r3, [pc, #160]	@ (80070ac <USER_SPI_read+0xc4>)
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	b2db      	uxtb	r3, r3
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	2b00      	cmp	r3, #0
 8007014:	d001      	beq.n	800701a <USER_SPI_read+0x32>
 8007016:	2303      	movs	r3, #3
 8007018:	e044      	b.n	80070a4 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800701a:	4b25      	ldr	r3, [pc, #148]	@ (80070b0 <USER_SPI_read+0xc8>)
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	f003 0308 	and.w	r3, r3, #8
 8007022:	2b00      	cmp	r3, #0
 8007024:	d102      	bne.n	800702c <USER_SPI_read+0x44>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	025b      	lsls	r3, r3, #9
 800702a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	2b01      	cmp	r3, #1
 8007030:	d111      	bne.n	8007056 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8007032:	6879      	ldr	r1, [r7, #4]
 8007034:	2011      	movs	r0, #17
 8007036:	f7ff fe66 	bl	8006d06 <send_cmd>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d129      	bne.n	8007094 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8007040:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007044:	68b8      	ldr	r0, [r7, #8]
 8007046:	f7ff fe03 	bl	8006c50 <rcvr_datablock>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d021      	beq.n	8007094 <USER_SPI_read+0xac>
			count = 0;
 8007050:	2300      	movs	r3, #0
 8007052:	603b      	str	r3, [r7, #0]
 8007054:	e01e      	b.n	8007094 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8007056:	6879      	ldr	r1, [r7, #4]
 8007058:	2012      	movs	r0, #18
 800705a:	f7ff fe54 	bl	8006d06 <send_cmd>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d117      	bne.n	8007094 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8007064:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007068:	68b8      	ldr	r0, [r7, #8]
 800706a:	f7ff fdf1 	bl	8006c50 <rcvr_datablock>
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00a      	beq.n	800708a <USER_SPI_read+0xa2>
				buff += 512;
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800707a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	3b01      	subs	r3, #1
 8007080:	603b      	str	r3, [r7, #0]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d1ed      	bne.n	8007064 <USER_SPI_read+0x7c>
 8007088:	e000      	b.n	800708c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800708a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800708c:	2100      	movs	r1, #0
 800708e:	200c      	movs	r0, #12
 8007090:	f7ff fe39 	bl	8006d06 <send_cmd>
		}
	}
	despiselect();
 8007094:	f7ff fdb4 	bl	8006c00 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	bf14      	ite	ne
 800709e:	2301      	movne	r3, #1
 80070a0:	2300      	moveq	r3, #0
 80070a2:	b2db      	uxtb	r3, r3
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	20000020 	.word	0x20000020
 80070b0:	20000380 	.word	0x20000380

080070b4 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60b9      	str	r1, [r7, #8]
 80070bc:	607a      	str	r2, [r7, #4]
 80070be:	603b      	str	r3, [r7, #0]
 80070c0:	4603      	mov	r3, r0
 80070c2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80070c4:	7bfb      	ldrb	r3, [r7, #15]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d102      	bne.n	80070d0 <USER_SPI_write+0x1c>
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d101      	bne.n	80070d4 <USER_SPI_write+0x20>
 80070d0:	2304      	movs	r3, #4
 80070d2:	e063      	b.n	800719c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80070d4:	4b33      	ldr	r3, [pc, #204]	@ (80071a4 <USER_SPI_write+0xf0>)
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	f003 0301 	and.w	r3, r3, #1
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d001      	beq.n	80070e6 <USER_SPI_write+0x32>
 80070e2:	2303      	movs	r3, #3
 80070e4:	e05a      	b.n	800719c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80070e6:	4b2f      	ldr	r3, [pc, #188]	@ (80071a4 <USER_SPI_write+0xf0>)
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	f003 0304 	and.w	r3, r3, #4
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d001      	beq.n	80070f8 <USER_SPI_write+0x44>
 80070f4:	2302      	movs	r3, #2
 80070f6:	e051      	b.n	800719c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80070f8:	4b2b      	ldr	r3, [pc, #172]	@ (80071a8 <USER_SPI_write+0xf4>)
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	f003 0308 	and.w	r3, r3, #8
 8007100:	2b00      	cmp	r3, #0
 8007102:	d102      	bne.n	800710a <USER_SPI_write+0x56>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	025b      	lsls	r3, r3, #9
 8007108:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d110      	bne.n	8007132 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8007110:	6879      	ldr	r1, [r7, #4]
 8007112:	2018      	movs	r0, #24
 8007114:	f7ff fdf7 	bl	8006d06 <send_cmd>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d136      	bne.n	800718c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800711e:	21fe      	movs	r1, #254	@ 0xfe
 8007120:	68b8      	ldr	r0, [r7, #8]
 8007122:	f7ff fdbe 	bl	8006ca2 <xmit_datablock>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d02f      	beq.n	800718c <USER_SPI_write+0xd8>
			count = 0;
 800712c:	2300      	movs	r3, #0
 800712e:	603b      	str	r3, [r7, #0]
 8007130:	e02c      	b.n	800718c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8007132:	4b1d      	ldr	r3, [pc, #116]	@ (80071a8 <USER_SPI_write+0xf4>)
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	f003 0306 	and.w	r3, r3, #6
 800713a:	2b00      	cmp	r3, #0
 800713c:	d003      	beq.n	8007146 <USER_SPI_write+0x92>
 800713e:	6839      	ldr	r1, [r7, #0]
 8007140:	2097      	movs	r0, #151	@ 0x97
 8007142:	f7ff fde0 	bl	8006d06 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8007146:	6879      	ldr	r1, [r7, #4]
 8007148:	2019      	movs	r0, #25
 800714a:	f7ff fddc 	bl	8006d06 <send_cmd>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d11b      	bne.n	800718c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8007154:	21fc      	movs	r1, #252	@ 0xfc
 8007156:	68b8      	ldr	r0, [r7, #8]
 8007158:	f7ff fda3 	bl	8006ca2 <xmit_datablock>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00a      	beq.n	8007178 <USER_SPI_write+0xc4>
				buff += 512;
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8007168:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	3b01      	subs	r3, #1
 800716e:	603b      	str	r3, [r7, #0]
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d1ee      	bne.n	8007154 <USER_SPI_write+0xa0>
 8007176:	e000      	b.n	800717a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8007178:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800717a:	21fd      	movs	r1, #253	@ 0xfd
 800717c:	2000      	movs	r0, #0
 800717e:	f7ff fd90 	bl	8006ca2 <xmit_datablock>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d101      	bne.n	800718c <USER_SPI_write+0xd8>
 8007188:	2301      	movs	r3, #1
 800718a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800718c:	f7ff fd38 	bl	8006c00 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	bf14      	ite	ne
 8007196:	2301      	movne	r3, #1
 8007198:	2300      	moveq	r3, #0
 800719a:	b2db      	uxtb	r3, r3
}
 800719c:	4618      	mov	r0, r3
 800719e:	3710      	adds	r7, #16
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	20000020 	.word	0x20000020
 80071a8:	20000380 	.word	0x20000380

080071ac <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b08c      	sub	sp, #48	@ 0x30
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	4603      	mov	r3, r0
 80071b4:	603a      	str	r2, [r7, #0]
 80071b6:	71fb      	strb	r3, [r7, #7]
 80071b8:	460b      	mov	r3, r1
 80071ba:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80071bc:	79fb      	ldrb	r3, [r7, #7]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d001      	beq.n	80071c6 <USER_SPI_ioctl+0x1a>
 80071c2:	2304      	movs	r3, #4
 80071c4:	e15a      	b.n	800747c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80071c6:	4baf      	ldr	r3, [pc, #700]	@ (8007484 <USER_SPI_ioctl+0x2d8>)
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	f003 0301 	and.w	r3, r3, #1
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d001      	beq.n	80071d8 <USER_SPI_ioctl+0x2c>
 80071d4:	2303      	movs	r3, #3
 80071d6:	e151      	b.n	800747c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 80071de:	79bb      	ldrb	r3, [r7, #6]
 80071e0:	2b04      	cmp	r3, #4
 80071e2:	f200 8136 	bhi.w	8007452 <USER_SPI_ioctl+0x2a6>
 80071e6:	a201      	add	r2, pc, #4	@ (adr r2, 80071ec <USER_SPI_ioctl+0x40>)
 80071e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ec:	08007201 	.word	0x08007201
 80071f0:	08007215 	.word	0x08007215
 80071f4:	08007453 	.word	0x08007453
 80071f8:	080072c1 	.word	0x080072c1
 80071fc:	080073b7 	.word	0x080073b7
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8007200:	f7ff fd0c 	bl	8006c1c <spiselect>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	f000 8127 	beq.w	800745a <USER_SPI_ioctl+0x2ae>
 800720c:	2300      	movs	r3, #0
 800720e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8007212:	e122      	b.n	800745a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8007214:	2100      	movs	r1, #0
 8007216:	2009      	movs	r0, #9
 8007218:	f7ff fd75 	bl	8006d06 <send_cmd>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	f040 811d 	bne.w	800745e <USER_SPI_ioctl+0x2b2>
 8007224:	f107 030c 	add.w	r3, r7, #12
 8007228:	2110      	movs	r1, #16
 800722a:	4618      	mov	r0, r3
 800722c:	f7ff fd10 	bl	8006c50 <rcvr_datablock>
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	f000 8113 	beq.w	800745e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8007238:	7b3b      	ldrb	r3, [r7, #12]
 800723a:	099b      	lsrs	r3, r3, #6
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b01      	cmp	r3, #1
 8007240:	d111      	bne.n	8007266 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8007242:	7d7b      	ldrb	r3, [r7, #21]
 8007244:	461a      	mov	r2, r3
 8007246:	7d3b      	ldrb	r3, [r7, #20]
 8007248:	021b      	lsls	r3, r3, #8
 800724a:	4413      	add	r3, r2
 800724c:	461a      	mov	r2, r3
 800724e:	7cfb      	ldrb	r3, [r7, #19]
 8007250:	041b      	lsls	r3, r3, #16
 8007252:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8007256:	4413      	add	r3, r2
 8007258:	3301      	adds	r3, #1
 800725a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	029a      	lsls	r2, r3, #10
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	601a      	str	r2, [r3, #0]
 8007264:	e028      	b.n	80072b8 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8007266:	7c7b      	ldrb	r3, [r7, #17]
 8007268:	f003 030f 	and.w	r3, r3, #15
 800726c:	b2da      	uxtb	r2, r3
 800726e:	7dbb      	ldrb	r3, [r7, #22]
 8007270:	09db      	lsrs	r3, r3, #7
 8007272:	b2db      	uxtb	r3, r3
 8007274:	4413      	add	r3, r2
 8007276:	b2da      	uxtb	r2, r3
 8007278:	7d7b      	ldrb	r3, [r7, #21]
 800727a:	005b      	lsls	r3, r3, #1
 800727c:	b2db      	uxtb	r3, r3
 800727e:	f003 0306 	and.w	r3, r3, #6
 8007282:	b2db      	uxtb	r3, r3
 8007284:	4413      	add	r3, r2
 8007286:	b2db      	uxtb	r3, r3
 8007288:	3302      	adds	r3, #2
 800728a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800728e:	7d3b      	ldrb	r3, [r7, #20]
 8007290:	099b      	lsrs	r3, r3, #6
 8007292:	b2db      	uxtb	r3, r3
 8007294:	461a      	mov	r2, r3
 8007296:	7cfb      	ldrb	r3, [r7, #19]
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	441a      	add	r2, r3
 800729c:	7cbb      	ldrb	r3, [r7, #18]
 800729e:	029b      	lsls	r3, r3, #10
 80072a0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80072a4:	4413      	add	r3, r2
 80072a6:	3301      	adds	r3, #1
 80072a8:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80072aa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80072ae:	3b09      	subs	r3, #9
 80072b0:	69fa      	ldr	r2, [r7, #28]
 80072b2:	409a      	lsls	r2, r3
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80072b8:	2300      	movs	r3, #0
 80072ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80072be:	e0ce      	b.n	800745e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80072c0:	4b71      	ldr	r3, [pc, #452]	@ (8007488 <USER_SPI_ioctl+0x2dc>)
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	f003 0304 	and.w	r3, r3, #4
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d031      	beq.n	8007330 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80072cc:	2100      	movs	r1, #0
 80072ce:	208d      	movs	r0, #141	@ 0x8d
 80072d0:	f7ff fd19 	bl	8006d06 <send_cmd>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f040 80c3 	bne.w	8007462 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80072dc:	20ff      	movs	r0, #255	@ 0xff
 80072de:	f7ff fc25 	bl	8006b2c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80072e2:	f107 030c 	add.w	r3, r7, #12
 80072e6:	2110      	movs	r1, #16
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7ff fcb1 	bl	8006c50 <rcvr_datablock>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f000 80b6 	beq.w	8007462 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80072f6:	2330      	movs	r3, #48	@ 0x30
 80072f8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80072fc:	e007      	b.n	800730e <USER_SPI_ioctl+0x162>
 80072fe:	20ff      	movs	r0, #255	@ 0xff
 8007300:	f7ff fc14 	bl	8006b2c <xchg_spi>
 8007304:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007308:	3b01      	subs	r3, #1
 800730a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800730e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1f3      	bne.n	80072fe <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8007316:	7dbb      	ldrb	r3, [r7, #22]
 8007318:	091b      	lsrs	r3, r3, #4
 800731a:	b2db      	uxtb	r3, r3
 800731c:	461a      	mov	r2, r3
 800731e:	2310      	movs	r3, #16
 8007320:	fa03 f202 	lsl.w	r2, r3, r2
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8007328:	2300      	movs	r3, #0
 800732a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800732e:	e098      	b.n	8007462 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8007330:	2100      	movs	r1, #0
 8007332:	2009      	movs	r0, #9
 8007334:	f7ff fce7 	bl	8006d06 <send_cmd>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	f040 8091 	bne.w	8007462 <USER_SPI_ioctl+0x2b6>
 8007340:	f107 030c 	add.w	r3, r7, #12
 8007344:	2110      	movs	r1, #16
 8007346:	4618      	mov	r0, r3
 8007348:	f7ff fc82 	bl	8006c50 <rcvr_datablock>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	f000 8087 	beq.w	8007462 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8007354:	4b4c      	ldr	r3, [pc, #304]	@ (8007488 <USER_SPI_ioctl+0x2dc>)
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	f003 0302 	and.w	r3, r3, #2
 800735c:	2b00      	cmp	r3, #0
 800735e:	d012      	beq.n	8007386 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8007360:	7dbb      	ldrb	r3, [r7, #22]
 8007362:	005b      	lsls	r3, r3, #1
 8007364:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8007368:	7dfa      	ldrb	r2, [r7, #23]
 800736a:	09d2      	lsrs	r2, r2, #7
 800736c:	b2d2      	uxtb	r2, r2
 800736e:	4413      	add	r3, r2
 8007370:	1c5a      	adds	r2, r3, #1
 8007372:	7e7b      	ldrb	r3, [r7, #25]
 8007374:	099b      	lsrs	r3, r3, #6
 8007376:	b2db      	uxtb	r3, r3
 8007378:	3b01      	subs	r3, #1
 800737a:	fa02 f303 	lsl.w	r3, r2, r3
 800737e:	461a      	mov	r2, r3
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	601a      	str	r2, [r3, #0]
 8007384:	e013      	b.n	80073ae <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8007386:	7dbb      	ldrb	r3, [r7, #22]
 8007388:	109b      	asrs	r3, r3, #2
 800738a:	b29b      	uxth	r3, r3
 800738c:	f003 031f 	and.w	r3, r3, #31
 8007390:	3301      	adds	r3, #1
 8007392:	7dfa      	ldrb	r2, [r7, #23]
 8007394:	00d2      	lsls	r2, r2, #3
 8007396:	f002 0218 	and.w	r2, r2, #24
 800739a:	7df9      	ldrb	r1, [r7, #23]
 800739c:	0949      	lsrs	r1, r1, #5
 800739e:	b2c9      	uxtb	r1, r1
 80073a0:	440a      	add	r2, r1
 80073a2:	3201      	adds	r2, #1
 80073a4:	fb02 f303 	mul.w	r3, r2, r3
 80073a8:	461a      	mov	r2, r3
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80073ae:	2300      	movs	r3, #0
 80073b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80073b4:	e055      	b.n	8007462 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80073b6:	4b34      	ldr	r3, [pc, #208]	@ (8007488 <USER_SPI_ioctl+0x2dc>)
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	f003 0306 	and.w	r3, r3, #6
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d051      	beq.n	8007466 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80073c2:	f107 020c 	add.w	r2, r7, #12
 80073c6:	79fb      	ldrb	r3, [r7, #7]
 80073c8:	210b      	movs	r1, #11
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7ff feee 	bl	80071ac <USER_SPI_ioctl>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d149      	bne.n	800746a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80073d6:	7b3b      	ldrb	r3, [r7, #12]
 80073d8:	099b      	lsrs	r3, r3, #6
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d104      	bne.n	80073ea <USER_SPI_ioctl+0x23e>
 80073e0:	7dbb      	ldrb	r3, [r7, #22]
 80073e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d041      	beq.n	800746e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	623b      	str	r3, [r7, #32]
 80073ee:	6a3b      	ldr	r3, [r7, #32]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073f4:	6a3b      	ldr	r3, [r7, #32]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 80073fa:	4b23      	ldr	r3, [pc, #140]	@ (8007488 <USER_SPI_ioctl+0x2dc>)
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	f003 0308 	and.w	r3, r3, #8
 8007402:	2b00      	cmp	r3, #0
 8007404:	d105      	bne.n	8007412 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8007406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007408:	025b      	lsls	r3, r3, #9
 800740a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800740c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740e:	025b      	lsls	r3, r3, #9
 8007410:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8007412:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007414:	2020      	movs	r0, #32
 8007416:	f7ff fc76 	bl	8006d06 <send_cmd>
 800741a:	4603      	mov	r3, r0
 800741c:	2b00      	cmp	r3, #0
 800741e:	d128      	bne.n	8007472 <USER_SPI_ioctl+0x2c6>
 8007420:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007422:	2021      	movs	r0, #33	@ 0x21
 8007424:	f7ff fc6f 	bl	8006d06 <send_cmd>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d121      	bne.n	8007472 <USER_SPI_ioctl+0x2c6>
 800742e:	2100      	movs	r1, #0
 8007430:	2026      	movs	r0, #38	@ 0x26
 8007432:	f7ff fc68 	bl	8006d06 <send_cmd>
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d11a      	bne.n	8007472 <USER_SPI_ioctl+0x2c6>
 800743c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8007440:	f7ff fbba 	bl	8006bb8 <wait_ready>
 8007444:	4603      	mov	r3, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	d013      	beq.n	8007472 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800744a:	2300      	movs	r3, #0
 800744c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8007450:	e00f      	b.n	8007472 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8007452:	2304      	movs	r3, #4
 8007454:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007458:	e00c      	b.n	8007474 <USER_SPI_ioctl+0x2c8>
		break;
 800745a:	bf00      	nop
 800745c:	e00a      	b.n	8007474 <USER_SPI_ioctl+0x2c8>
		break;
 800745e:	bf00      	nop
 8007460:	e008      	b.n	8007474 <USER_SPI_ioctl+0x2c8>
		break;
 8007462:	bf00      	nop
 8007464:	e006      	b.n	8007474 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007466:	bf00      	nop
 8007468:	e004      	b.n	8007474 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800746a:	bf00      	nop
 800746c:	e002      	b.n	8007474 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800746e:	bf00      	nop
 8007470:	e000      	b.n	8007474 <USER_SPI_ioctl+0x2c8>
		break;
 8007472:	bf00      	nop
	}

	despiselect();
 8007474:	f7ff fbc4 	bl	8006c00 <despiselect>

	return res;
 8007478:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800747c:	4618      	mov	r0, r3
 800747e:	3730      	adds	r7, #48	@ 0x30
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}
 8007484:	20000020 	.word	0x20000020
 8007488:	20000380 	.word	0x20000380

0800748c <ht16k33_init>:

} Ht16k33_Config;


Ht16k33_Config_t* ht16k33_init(I2C_HandleTypeDef* const hi2c, const uint8_t addrs)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	460b      	mov	r3, r1
 8007496:	70fb      	strb	r3, [r7, #3]
  Ht16k33_Config_t* pConfig = malloc(sizeof(Ht16k33_Config_t));
 8007498:	200c      	movs	r0, #12
 800749a:	f004 f949 	bl	800b730 <malloc>
 800749e:	4603      	mov	r3, r0
 80074a0:	60fb      	str	r3, [r7, #12]
  pConfig->i2cAddrs = addrs << 1;
 80074a2:	78fb      	ldrb	r3, [r7, #3]
 80074a4:	005b      	lsls	r3, r3, #1
 80074a6:	b2da      	uxtb	r2, r3
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	711a      	strb	r2, [r3, #4]
  pConfig->hi2c = hi2c;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	601a      	str	r2, [r3, #0]

  pConfig->hSysSetupReg.regAddrs        = SYSTEM_SETUP_REG_ADDRESS;
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	7953      	ldrb	r3, [r2, #5]
 80074b6:	2102      	movs	r1, #2
 80074b8:	f361 1307 	bfi	r3, r1, #4, #4
 80074bc:	7153      	strb	r3, [r2, #5]
  pConfig->hDisplayReg.regAddrs         = DISPLAY_SETUP_REG_ADDRESS;
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	7993      	ldrb	r3, [r2, #6]
 80074c2:	2108      	movs	r1, #8
 80074c4:	f361 1307 	bfi	r3, r1, #4, #4
 80074c8:	7193      	strb	r3, [r2, #6]
  pConfig->hDimmingSetReg.regAddrs      = DIMMING_SET_REG_ADDRESS;
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	79d3      	ldrb	r3, [r2, #7]
 80074ce:	210e      	movs	r1, #14
 80074d0:	f361 1307 	bfi	r3, r1, #4, #4
 80074d4:	71d3      	strb	r3, [r2, #7]
  pConfig->hDisplayAddrsPtrReg.regAddrs = DISPLAY_DATA_REG_ADDRESS;
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	7a13      	ldrb	r3, [r2, #8]
 80074da:	f36f 1307 	bfc	r3, #4, #4
 80074de:	7213      	strb	r3, [r2, #8]
  return pConfig;
 80074e0:	68fb      	ldr	r3, [r7, #12]
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <ht16k33_setSystemSetup>:

Ht16k33_Status_t ht16k33_setSystemSetup(Ht16k33_Config_t* const pConfig, const Ht16k33_DisplayStatus_e displayStatus)
{
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b086      	sub	sp, #24
 80074ee:	af02      	add	r7, sp, #8
 80074f0:	6078      	str	r0, [r7, #4]
 80074f2:	460b      	mov	r3, r1
 80074f4:	70fb      	strb	r3, [r7, #3]
  pConfig->hSysSetupReg.s = displayStatus;
 80074f6:	78fb      	ldrb	r3, [r7, #3]
 80074f8:	f003 0301 	and.w	r3, r3, #1
 80074fc:	b2d9      	uxtb	r1, r3
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	7953      	ldrb	r3, [r2, #5]
 8007502:	f361 0300 	bfi	r3, r1, #0, #1
 8007506:	7153      	strb	r3, [r2, #5]

  uint8_t sysSetupReg = 0;
 8007508:	2300      	movs	r3, #0
 800750a:	73fb      	strb	r3, [r7, #15]
  sysSetupReg |= (pConfig->hSysSetupReg.s & 0x01) << 0;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	795b      	ldrb	r3, [r3, #5]
 8007510:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007514:	b2db      	uxtb	r3, r3
 8007516:	b25b      	sxtb	r3, r3
 8007518:	f003 0301 	and.w	r3, r3, #1
 800751c:	b25a      	sxtb	r2, r3
 800751e:	7bfb      	ldrb	r3, [r7, #15]
 8007520:	b25b      	sxtb	r3, r3
 8007522:	4313      	orrs	r3, r2
 8007524:	b25b      	sxtb	r3, r3
 8007526:	b2db      	uxtb	r3, r3
 8007528:	73fb      	strb	r3, [r7, #15]
  sysSetupReg |= (pConfig->hSysSetupReg.regAddrs & 0x0F) << 4;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	795b      	ldrb	r3, [r3, #5]
 800752e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007532:	b2db      	uxtb	r3, r3
 8007534:	011b      	lsls	r3, r3, #4
 8007536:	b25a      	sxtb	r2, r3
 8007538:	7bfb      	ldrb	r3, [r7, #15]
 800753a:	b25b      	sxtb	r3, r3
 800753c:	4313      	orrs	r3, r2
 800753e:	b25b      	sxtb	r3, r3
 8007540:	b2db      	uxtb	r3, r3
 8007542:	73fb      	strb	r3, [r7, #15]

  return
      HAL_I2C_Master_Transmit(pConfig->hi2c, pConfig->i2cAddrs, &sysSetupReg, sizeof(sysSetupReg),HAL_MAX_DELAY);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6818      	ldr	r0, [r3, #0]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	791b      	ldrb	r3, [r3, #4]
 800754c:	4619      	mov	r1, r3
 800754e:	f107 020f 	add.w	r2, r7, #15
 8007552:	f04f 33ff 	mov.w	r3, #4294967295
 8007556:	9300      	str	r3, [sp, #0]
 8007558:	2301      	movs	r3, #1
 800755a:	f7fb fbf9 	bl	8002d50 <HAL_I2C_Master_Transmit>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	bf14      	ite	ne
 8007564:	2301      	movne	r3, #1
 8007566:	2300      	moveq	r3, #0
 8007568:	b2db      	uxtb	r3, r3
}
 800756a:	4618      	mov	r0, r3
 800756c:	3710      	adds	r7, #16
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <ht16k33_setDisplaySetup>:

Ht16k33_Status_t ht16k33_setDisplaySetup(Ht16k33_Config_t* const pConfig, const Ht16k33_DisplayStatus_e dispStatus,
    const Ht16k33_BlinkingFreq_e frequency)
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b086      	sub	sp, #24
 8007576:	af02      	add	r7, sp, #8
 8007578:	6078      	str	r0, [r7, #4]
 800757a:	460b      	mov	r3, r1
 800757c:	70fb      	strb	r3, [r7, #3]
 800757e:	4613      	mov	r3, r2
 8007580:	70bb      	strb	r3, [r7, #2]
  pConfig->hDisplayReg.d = dispStatus;
 8007582:	78fb      	ldrb	r3, [r7, #3]
 8007584:	f003 0301 	and.w	r3, r3, #1
 8007588:	b2d9      	uxtb	r1, r3
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	7993      	ldrb	r3, [r2, #6]
 800758e:	f361 0300 	bfi	r3, r1, #0, #1
 8007592:	7193      	strb	r3, [r2, #6]
  pConfig->hDisplayReg.b = frequency;
 8007594:	78bb      	ldrb	r3, [r7, #2]
 8007596:	f003 0303 	and.w	r3, r3, #3
 800759a:	b2d9      	uxtb	r1, r3
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	7993      	ldrb	r3, [r2, #6]
 80075a0:	f361 0342 	bfi	r3, r1, #1, #2
 80075a4:	7193      	strb	r3, [r2, #6]

  uint8_t dispSetupReg = 0;
 80075a6:	2300      	movs	r3, #0
 80075a8:	73fb      	strb	r3, [r7, #15]

  dispSetupReg |= (pConfig->hDisplayReg.d & 0x01) << 0;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	799b      	ldrb	r3, [r3, #6]
 80075ae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	b25b      	sxtb	r3, r3
 80075b6:	f003 0301 	and.w	r3, r3, #1
 80075ba:	b25a      	sxtb	r2, r3
 80075bc:	7bfb      	ldrb	r3, [r7, #15]
 80075be:	b25b      	sxtb	r3, r3
 80075c0:	4313      	orrs	r3, r2
 80075c2:	b25b      	sxtb	r3, r3
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	73fb      	strb	r3, [r7, #15]
  dispSetupReg |= (pConfig->hDisplayReg.b & 0x03) << 1;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	799b      	ldrb	r3, [r3, #6]
 80075cc:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	005b      	lsls	r3, r3, #1
 80075d4:	b25b      	sxtb	r3, r3
 80075d6:	f003 0306 	and.w	r3, r3, #6
 80075da:	b25a      	sxtb	r2, r3
 80075dc:	7bfb      	ldrb	r3, [r7, #15]
 80075de:	b25b      	sxtb	r3, r3
 80075e0:	4313      	orrs	r3, r2
 80075e2:	b25b      	sxtb	r3, r3
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	73fb      	strb	r3, [r7, #15]
  dispSetupReg |= (pConfig->hDisplayReg.regAddrs & 0x0F) << 4;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	799b      	ldrb	r3, [r3, #6]
 80075ec:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	011b      	lsls	r3, r3, #4
 80075f4:	b25a      	sxtb	r2, r3
 80075f6:	7bfb      	ldrb	r3, [r7, #15]
 80075f8:	b25b      	sxtb	r3, r3
 80075fa:	4313      	orrs	r3, r2
 80075fc:	b25b      	sxtb	r3, r3
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	73fb      	strb	r3, [r7, #15]

  return
      HAL_I2C_Master_Transmit(pConfig->hi2c, pConfig->i2cAddrs, &dispSetupReg, sizeof(dispSetupReg),HAL_MAX_DELAY);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6818      	ldr	r0, [r3, #0]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	791b      	ldrb	r3, [r3, #4]
 800760a:	4619      	mov	r1, r3
 800760c:	f107 020f 	add.w	r2, r7, #15
 8007610:	f04f 33ff 	mov.w	r3, #4294967295
 8007614:	9300      	str	r3, [sp, #0]
 8007616:	2301      	movs	r3, #1
 8007618:	f7fb fb9a 	bl	8002d50 <HAL_I2C_Master_Transmit>
 800761c:	4603      	mov	r3, r0
 800761e:	2b00      	cmp	r3, #0
 8007620:	bf14      	ite	ne
 8007622:	2301      	movne	r3, #1
 8007624:	2300      	moveq	r3, #0
 8007626:	b2db      	uxtb	r3, r3
}
 8007628:	4618      	mov	r0, r3
 800762a:	3710      	adds	r7, #16
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <ht16k33_updateDisplayData>:
      HAL_I2C_Master_Transmit(pConfig->hi2c, pConfig->i2cAddrs, &dimmingSetReg, sizeof(dimmingSetReg),HAL_MAX_DELAY);
}

Ht16k33_Status_t ht16k33_updateDisplayData (Ht16k33_Config_t* const pConfig, const uint8_t ramAddrs,
    uint8_t* const dispDataBuffer, const uint8_t dispDataBufferSize)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b088      	sub	sp, #32
 8007634:	af02      	add	r7, sp, #8
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	607a      	str	r2, [r7, #4]
 800763a:	461a      	mov	r2, r3
 800763c:	460b      	mov	r3, r1
 800763e:	72fb      	strb	r3, [r7, #11]
 8007640:	4613      	mov	r3, r2
 8007642:	72bb      	strb	r3, [r7, #10]
  uint8_t* transmitBuffer     = malloc (dispDataBufferSize + 1);
 8007644:	7abb      	ldrb	r3, [r7, #10]
 8007646:	3301      	adds	r3, #1
 8007648:	4618      	mov	r0, r3
 800764a:	f004 f871 	bl	800b730 <malloc>
 800764e:	4603      	mov	r3, r0
 8007650:	617b      	str	r3, [r7, #20]
  Ht16k33_Status_t isSuccess   = 0;
 8007652:	2300      	movs	r3, #0
 8007654:	74fb      	strb	r3, [r7, #19]
  uint8_t dispDataAddrsPtrReg = 0;
 8007656:	2300      	movs	r3, #0
 8007658:	74bb      	strb	r3, [r7, #18]

  pConfig->hDisplayAddrsPtrReg.a = ramAddrs;
 800765a:	7afb      	ldrb	r3, [r7, #11]
 800765c:	f003 030f 	and.w	r3, r3, #15
 8007660:	b2d9      	uxtb	r1, r3
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	7a13      	ldrb	r3, [r2, #8]
 8007666:	f361 0303 	bfi	r3, r1, #0, #4
 800766a:	7213      	strb	r3, [r2, #8]

  dispDataAddrsPtrReg |= (pConfig->hDisplayAddrsPtrReg.a & 0x0F) << 0;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	7a1b      	ldrb	r3, [r3, #8]
 8007670:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007674:	b2db      	uxtb	r3, r3
 8007676:	b25b      	sxtb	r3, r3
 8007678:	f003 030f 	and.w	r3, r3, #15
 800767c:	b25a      	sxtb	r2, r3
 800767e:	7cbb      	ldrb	r3, [r7, #18]
 8007680:	b25b      	sxtb	r3, r3
 8007682:	4313      	orrs	r3, r2
 8007684:	b25b      	sxtb	r3, r3
 8007686:	b2db      	uxtb	r3, r3
 8007688:	74bb      	strb	r3, [r7, #18]
  dispDataAddrsPtrReg |= (pConfig->hDisplayAddrsPtrReg.regAddrs & 0x0F) << 4;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	7a1b      	ldrb	r3, [r3, #8]
 800768e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007692:	b2db      	uxtb	r3, r3
 8007694:	011b      	lsls	r3, r3, #4
 8007696:	b25a      	sxtb	r2, r3
 8007698:	7cbb      	ldrb	r3, [r7, #18]
 800769a:	b25b      	sxtb	r3, r3
 800769c:	4313      	orrs	r3, r2
 800769e:	b25b      	sxtb	r3, r3
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	74bb      	strb	r3, [r7, #18]

  memcpy(transmitBuffer, &dispDataAddrsPtrReg, sizeof(dispDataAddrsPtrReg));
 80076a4:	7cba      	ldrb	r2, [r7, #18]
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	701a      	strb	r2, [r3, #0]
  memcpy(transmitBuffer + 1, dispDataBuffer, dispDataBufferSize);
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	3301      	adds	r3, #1
 80076ae:	7aba      	ldrb	r2, [r7, #10]
 80076b0:	6879      	ldr	r1, [r7, #4]
 80076b2:	4618      	mov	r0, r3
 80076b4:	f004 fafd 	bl	800bcb2 <memcpy>

  isSuccess = HAL_I2C_Master_Transmit(pConfig->hi2c, pConfig->i2cAddrs, transmitBuffer, (dispDataBufferSize + 1),
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6818      	ldr	r0, [r3, #0]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	791b      	ldrb	r3, [r3, #4]
 80076c0:	4619      	mov	r1, r3
 80076c2:	7abb      	ldrb	r3, [r7, #10]
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	3301      	adds	r3, #1
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	f04f 32ff 	mov.w	r2, #4294967295
 80076ce:	9200      	str	r2, [sp, #0]
 80076d0:	697a      	ldr	r2, [r7, #20]
 80076d2:	f7fb fb3d 	bl	8002d50 <HAL_I2C_Master_Transmit>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	bf14      	ite	ne
 80076dc:	2301      	movne	r3, #1
 80076de:	2300      	moveq	r3, #0
 80076e0:	74fb      	strb	r3, [r7, #19]
      HAL_MAX_DELAY);

  free(transmitBuffer);
 80076e2:	6978      	ldr	r0, [r7, #20]
 80076e4:	f004 f82c 	bl	800b740 <free>

  return isSuccess;
 80076e8:	7cfb      	ldrb	r3, [r7, #19]
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3718      	adds	r7, #24
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <keypad3x4w_init>:

} Keypad3x4w_Config;


Keypad3x4w_Config_t * keypad3x4w_init(const Keypad3x4w_PinConfig_t * const pPinConfig)
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b084      	sub	sp, #16
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  Keypad3x4w_Config_t * pConfig = malloc(sizeof(Keypad3x4w_Config_t));
 80076fa:	2008      	movs	r0, #8
 80076fc:	f004 f818 	bl	800b730 <malloc>
 8007700:	4603      	mov	r3, r0
 8007702:	60fb      	str	r3, [r7, #12]

  pConfig->pkeypadPinConfig = pPinConfig;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	601a      	str	r2, [r3, #0]

  return pConfig;
 800770a:	68fb      	ldr	r3, [r7, #12]
}
 800770c:	4618      	mov	r0, r3
 800770e:	3710      	adds	r7, #16
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <keypad3x4w_setColumnGpio>:

Keypad3x4w_Status_t keypad3x4w_setColumnGpio(Keypad3x4w_Config_t * pConfig, keypad3x4w_ColumnScanType_e columnScanType)
{
 8007714:	b5b0      	push	{r4, r5, r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	460b      	mov	r3, r1
 800771e:	70fb      	strb	r3, [r7, #3]

  for (uint8_t columnCount = 0; columnCount < KEYPAD_COLUMN_NUMBER; columnCount++)
 8007720:	2300      	movs	r3, #0
 8007722:	73fb      	strb	r3, [r7, #15]
 8007724:	e01b      	b.n	800775e <keypad3x4w_setColumnGpio+0x4a>
  {
    HAL_GPIO_WritePin(pConfig->pkeypadPinConfig->Column_Port[columnCount],
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	7bfa      	ldrb	r2, [r7, #15]
 800772c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
        pConfig->pkeypadPinConfig->Column_Pin[columnCount], columnScanConfig[columnScanType][columnCount]);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681a      	ldr	r2, [r3, #0]
    HAL_GPIO_WritePin(pConfig->pkeypadPinConfig->Column_Port[columnCount],
 8007734:	7bfb      	ldrb	r3, [r7, #15]
        pConfig->pkeypadPinConfig->Column_Pin[columnCount], columnScanConfig[columnScanType][columnCount]);
 8007736:	3304      	adds	r3, #4
 8007738:	005b      	lsls	r3, r3, #1
 800773a:	4413      	add	r3, r2
 800773c:	889c      	ldrh	r4, [r3, #4]
 800773e:	78fa      	ldrb	r2, [r7, #3]
 8007740:	7bf9      	ldrb	r1, [r7, #15]
 8007742:	4d0b      	ldr	r5, [pc, #44]	@ (8007770 <keypad3x4w_setColumnGpio+0x5c>)
 8007744:	4613      	mov	r3, r2
 8007746:	005b      	lsls	r3, r3, #1
 8007748:	4413      	add	r3, r2
 800774a:	442b      	add	r3, r5
 800774c:	440b      	add	r3, r1
 800774e:	781b      	ldrb	r3, [r3, #0]
    HAL_GPIO_WritePin(pConfig->pkeypadPinConfig->Column_Port[columnCount],
 8007750:	461a      	mov	r2, r3
 8007752:	4621      	mov	r1, r4
 8007754:	f7fb f97a 	bl	8002a4c <HAL_GPIO_WritePin>
  for (uint8_t columnCount = 0; columnCount < KEYPAD_COLUMN_NUMBER; columnCount++)
 8007758:	7bfb      	ldrb	r3, [r7, #15]
 800775a:	3301      	adds	r3, #1
 800775c:	73fb      	strb	r3, [r7, #15]
 800775e:	7bfb      	ldrb	r3, [r7, #15]
 8007760:	2b02      	cmp	r3, #2
 8007762:	d9e0      	bls.n	8007726 <keypad3x4w_setColumnGpio+0x12>
  }
  return 0;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bdb0      	pop	{r4, r5, r7, pc}
 800776e:	bf00      	nop
 8007770:	0800cb70 	.word	0x0800cb70

08007774 <keypad3x4w_readKeypad>:


Keypad3x4w_Status_t keypad3x4w_readKeypad(Keypad3x4w_Config_t * pConfig, uint8_t* pKey)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  Keypad3x4w_Status_t isPressed = false;
 800777e:	2300      	movs	r3, #0
 8007780:	73fb      	strb	r3, [r7, #15]

  //Turn on column GPIO outputs
  keypad3x4w_setColumnGpio(pConfig, keypad3x4w_ColumnScanType_Full);
 8007782:	2100      	movs	r1, #0
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f7ff ffc5 	bl	8007714 <keypad3x4w_setColumnGpio>

  //Check if a row has been activated
  for (uint8_t rowCount = 0; rowCount < KEYPAD_ROW_NUMBER; rowCount++)
 800778a:	2300      	movs	r3, #0
 800778c:	73bb      	strb	r3, [r7, #14]
 800778e:	e050      	b.n	8007832 <keypad3x4w_readKeypad+0xbe>
  {
    if (HAL_GPIO_ReadPin (pConfig->pkeypadPinConfig->Row_Port[rowCount], pConfig->pkeypadPinConfig->Row_Pin[rowCount]))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	7bbb      	ldrb	r3, [r7, #14]
 8007796:	3304      	adds	r3, #4
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	4413      	add	r3, r2
 800779c:	6858      	ldr	r0, [r3, #4]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	7bbb      	ldrb	r3, [r7, #14]
 80077a4:	3310      	adds	r3, #16
 80077a6:	005b      	lsls	r3, r3, #1
 80077a8:	4413      	add	r3, r2
 80077aa:	889b      	ldrh	r3, [r3, #4]
 80077ac:	4619      	mov	r1, r3
 80077ae:	f7fb f935 	bl	8002a1c <HAL_GPIO_ReadPin>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d039      	beq.n	800782c <keypad3x4w_readKeypad+0xb8>
    {
      //Determine Column Pressed
      for (uint8_t columnCount = 0; columnCount < KEYPAD_COLUMN_NUMBER; columnCount++)
 80077b8:	2300      	movs	r3, #0
 80077ba:	737b      	strb	r3, [r7, #13]
 80077bc:	e033      	b.n	8007826 <keypad3x4w_readKeypad+0xb2>
      {
        keypad3x4w_setColumnGpio(pConfig, keypad3x4w_ColumnScanType_Col1 + columnCount);
 80077be:	7b7b      	ldrb	r3, [r7, #13]
 80077c0:	3301      	adds	r3, #1
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	4619      	mov	r1, r3
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f7ff ffa4 	bl	8007714 <keypad3x4w_setColumnGpio>

        for (uint8_t rowCount = 0; rowCount < KEYPAD_ROW_NUMBER; rowCount++)
 80077cc:	2300      	movs	r3, #0
 80077ce:	733b      	strb	r3, [r7, #12]
 80077d0:	e023      	b.n	800781a <keypad3x4w_readKeypad+0xa6>
        {
          if (HAL_GPIO_ReadPin (pConfig->pkeypadPinConfig->Row_Port[rowCount], pConfig->pkeypadPinConfig->Row_Pin[rowCount]))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	7b3b      	ldrb	r3, [r7, #12]
 80077d8:	3304      	adds	r3, #4
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	4413      	add	r3, r2
 80077de:	6858      	ldr	r0, [r3, #4]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	7b3b      	ldrb	r3, [r7, #12]
 80077e6:	3310      	adds	r3, #16
 80077e8:	005b      	lsls	r3, r3, #1
 80077ea:	4413      	add	r3, r2
 80077ec:	889b      	ldrh	r3, [r3, #4]
 80077ee:	4619      	mov	r1, r3
 80077f0:	f7fb f914 	bl	8002a1c <HAL_GPIO_ReadPin>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00c      	beq.n	8007814 <keypad3x4w_readKeypad+0xa0>
          {
            isPressed = true;
 80077fa:	2301      	movs	r3, #1
 80077fc:	73fb      	strb	r3, [r7, #15]
            *pKey = keypadNumberOrder[rowCount][columnCount];
 80077fe:	7b3a      	ldrb	r2, [r7, #12]
 8007800:	7b79      	ldrb	r1, [r7, #13]
 8007802:	4810      	ldr	r0, [pc, #64]	@ (8007844 <keypad3x4w_readKeypad+0xd0>)
 8007804:	4613      	mov	r3, r2
 8007806:	005b      	lsls	r3, r3, #1
 8007808:	4413      	add	r3, r2
 800780a:	4403      	add	r3, r0
 800780c:	440b      	add	r3, r1
 800780e:	781a      	ldrb	r2, [r3, #0]
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	701a      	strb	r2, [r3, #0]
        for (uint8_t rowCount = 0; rowCount < KEYPAD_ROW_NUMBER; rowCount++)
 8007814:	7b3b      	ldrb	r3, [r7, #12]
 8007816:	3301      	adds	r3, #1
 8007818:	733b      	strb	r3, [r7, #12]
 800781a:	7b3b      	ldrb	r3, [r7, #12]
 800781c:	2b03      	cmp	r3, #3
 800781e:	d9d8      	bls.n	80077d2 <keypad3x4w_readKeypad+0x5e>
      for (uint8_t columnCount = 0; columnCount < KEYPAD_COLUMN_NUMBER; columnCount++)
 8007820:	7b7b      	ldrb	r3, [r7, #13]
 8007822:	3301      	adds	r3, #1
 8007824:	737b      	strb	r3, [r7, #13]
 8007826:	7b7b      	ldrb	r3, [r7, #13]
 8007828:	2b02      	cmp	r3, #2
 800782a:	d9c8      	bls.n	80077be <keypad3x4w_readKeypad+0x4a>
  for (uint8_t rowCount = 0; rowCount < KEYPAD_ROW_NUMBER; rowCount++)
 800782c:	7bbb      	ldrb	r3, [r7, #14]
 800782e:	3301      	adds	r3, #1
 8007830:	73bb      	strb	r3, [r7, #14]
 8007832:	7bbb      	ldrb	r3, [r7, #14]
 8007834:	2b03      	cmp	r3, #3
 8007836:	d9ab      	bls.n	8007790 <keypad3x4w_readKeypad+0x1c>
        }
      }
    }
  }

  return isPressed;
 8007838:	7bfb      	ldrb	r3, [r7, #15]
 }
 800783a:	4618      	mov	r0, r3
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	0800cb7c 	.word	0x0800cb7c

08007848 <dateTime_display_init>:

} DateTime_Display_Config;


DateTime_Display_Config_t * dateTime_display_init(I2C_HandleTypeDef* const hi2c, const uint8_t addrs)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	460b      	mov	r3, r1
 8007852:	70fb      	strb	r3, [r7, #3]
  DateTime_Display_Config_t* pConfig = malloc(sizeof(DateTime_Display_Config_t));
 8007854:	2018      	movs	r0, #24
 8007856:	f003 ff6b 	bl	800b730 <malloc>
 800785a:	4603      	mov	r3, r0
 800785c:	60fb      	str	r3, [r7, #12]
  pConfig->i2cAddrs = addrs;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	78fa      	ldrb	r2, [r7, #3]
 8007862:	711a      	strb	r2, [r3, #4]
  pConfig->hi2c = hi2c;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	601a      	str	r2, [r3, #0]
  pConfig->hDisplayDriver = ht16k33_init(hi2c, addrs);
 800786a:	78fb      	ldrb	r3, [r7, #3]
 800786c:	4619      	mov	r1, r3
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f7ff fe0c 	bl	800748c <ht16k33_init>
 8007874:	4602      	mov	r2, r0
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	609a      	str	r2, [r3, #8]

  ht16k33_setSystemSetup(pConfig->hDisplayDriver, Ht16k33_SystemOscillator_On);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	2101      	movs	r1, #1
 8007880:	4618      	mov	r0, r3
 8007882:	f7ff fe32 	bl	80074ea <ht16k33_setSystemSetup>
  ht16k33_setDisplaySetup(pConfig->hDisplayDriver, Ht16k33_DisplayStatus_On, Ht16k33_BlinkingFrequency_Off);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	2200      	movs	r2, #0
 800788c:	2101      	movs	r1, #1
 800788e:	4618      	mov	r0, r3
 8007890:	f7ff fe6f 	bl	8007572 <ht16k33_setDisplaySetup>

  return pConfig;
 8007894:	68fb      	ldr	r3, [r7, #12]
}
 8007896:	4618      	mov	r0, r3
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <dateTime_setDateTimeMonth>:

DateTime_Display_Status_t dateTime_setDateTimeMonth(DateTime_Display_Config_t* const pConfig,
    const uint8_t* const inputDateTime)
{
 800789e:	b480      	push	{r7}
 80078a0:	b083      	sub	sp, #12
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
 80078a6:	6039      	str	r1, [r7, #0]
  //Extract and check input month
  pConfig->dateTimeData.Month = (inputDateTime[0]*10) + (inputDateTime[1]);
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	461a      	mov	r2, r3
 80078ae:	0092      	lsls	r2, r2, #2
 80078b0:	4413      	add	r3, r2
 80078b2:	005b      	lsls	r3, r3, #1
 80078b4:	b2da      	uxtb	r2, r3
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	3301      	adds	r3, #1
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	4413      	add	r3, r2
 80078be:	b2da      	uxtb	r2, r3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	731a      	strb	r2, [r3, #12]
  if ((pConfig->dateTimeData.Month >= 1) && (pConfig->dateTimeData.Month <= 12))
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	7b1b      	ldrb	r3, [r3, #12]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d005      	beq.n	80078d8 <dateTime_setDateTimeMonth+0x3a>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	7b1b      	ldrb	r3, [r3, #12]
 80078d0:	2b0c      	cmp	r3, #12
 80078d2:	d801      	bhi.n	80078d8 <dateTime_setDateTimeMonth+0x3a>
  {
    return 1;
 80078d4:	2301      	movs	r3, #1
 80078d6:	e000      	b.n	80078da <dateTime_setDateTimeMonth+0x3c>
  }
  else
  {
    return 0;
 80078d8:	2300      	movs	r3, #0
  }
}
 80078da:	4618      	mov	r0, r3
 80078dc:	370c      	adds	r7, #12
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr
	...

080078e8 <dateTime_setDateTimeDay>:

DateTime_Display_Status_t dateTime_setDateTimeDay(DateTime_Display_Config_t* const pConfig,
    const uint8_t* const inputDateTime)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b085      	sub	sp, #20
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
  bool leapYear = false;
 80078f2:	2300      	movs	r3, #0
 80078f4:	73fb      	strb	r3, [r7, #15]

  //Extract input day and check for days per month
  pConfig->dateTimeData.Day = (inputDateTime[2]*10) + (inputDateTime[3]);
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	3302      	adds	r3, #2
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	461a      	mov	r2, r3
 80078fe:	0092      	lsls	r2, r2, #2
 8007900:	4413      	add	r3, r2
 8007902:	005b      	lsls	r3, r3, #1
 8007904:	b2da      	uxtb	r2, r3
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	3303      	adds	r3, #3
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	4413      	add	r3, r2
 800790e:	b2da      	uxtb	r2, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	735a      	strb	r2, [r3, #13]

  //Check for leap year
  if ((((pConfig->dateTimeData.Year % 4) == 0) && ((pConfig->dateTimeData.Year % 100) != 0)) ||
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	89db      	ldrh	r3, [r3, #14]
 8007918:	f003 0303 	and.w	r3, r3, #3
 800791c:	b29b      	uxth	r3, r3
 800791e:	2b00      	cmp	r3, #0
 8007920:	d10c      	bne.n	800793c <dateTime_setDateTimeDay+0x54>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	89db      	ldrh	r3, [r3, #14]
 8007926:	4a1a      	ldr	r2, [pc, #104]	@ (8007990 <dateTime_setDateTimeDay+0xa8>)
 8007928:	fba2 1203 	umull	r1, r2, r2, r3
 800792c:	0952      	lsrs	r2, r2, #5
 800792e:	2164      	movs	r1, #100	@ 0x64
 8007930:	fb01 f202 	mul.w	r2, r1, r2
 8007934:	1a9b      	subs	r3, r3, r2
 8007936:	b29b      	uxth	r3, r3
 8007938:	2b00      	cmp	r3, #0
 800793a:	d10d      	bne.n	8007958 <dateTime_setDateTimeDay+0x70>
      ((pConfig->dateTimeData.Year % 400) == 0))
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	89db      	ldrh	r3, [r3, #14]
 8007940:	4a13      	ldr	r2, [pc, #76]	@ (8007990 <dateTime_setDateTimeDay+0xa8>)
 8007942:	fba2 1203 	umull	r1, r2, r2, r3
 8007946:	09d2      	lsrs	r2, r2, #7
 8007948:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800794c:	fb01 f202 	mul.w	r2, r1, r2
 8007950:	1a9b      	subs	r3, r3, r2
 8007952:	b29b      	uxth	r3, r3
  if ((((pConfig->dateTimeData.Year % 4) == 0) && ((pConfig->dateTimeData.Year % 100) != 0)) ||
 8007954:	2b00      	cmp	r3, #0
 8007956:	d101      	bne.n	800795c <dateTime_setDateTimeDay+0x74>
  {
    leapYear = true;
 8007958:	2301      	movs	r3, #1
 800795a:	73fb      	strb	r3, [r7, #15]
  }

  if (pConfig->dateTimeData.Day <= (monthDaysCount[pConfig->dateTimeData.Month-1] + leapYear) &&
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	7b5b      	ldrb	r3, [r3, #13]
 8007960:	4619      	mov	r1, r3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	7b1b      	ldrb	r3, [r3, #12]
 8007966:	3b01      	subs	r3, #1
 8007968:	4a0a      	ldr	r2, [pc, #40]	@ (8007994 <dateTime_setDateTimeDay+0xac>)
 800796a:	5cd3      	ldrb	r3, [r2, r3]
 800796c:	461a      	mov	r2, r3
 800796e:	7bfb      	ldrb	r3, [r7, #15]
 8007970:	4413      	add	r3, r2
 8007972:	4299      	cmp	r1, r3
 8007974:	dc05      	bgt.n	8007982 <dateTime_setDateTimeDay+0x9a>
      (pConfig->dateTimeData.Day > 0))
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	7b5b      	ldrb	r3, [r3, #13]
  if (pConfig->dateTimeData.Day <= (monthDaysCount[pConfig->dateTimeData.Month-1] + leapYear) &&
 800797a:	2b00      	cmp	r3, #0
 800797c:	d001      	beq.n	8007982 <dateTime_setDateTimeDay+0x9a>
  {
    return 1;
 800797e:	2301      	movs	r3, #1
 8007980:	e000      	b.n	8007984 <dateTime_setDateTimeDay+0x9c>
  }
  else
  {
    return 0;
 8007982:	2300      	movs	r3, #0
  }
}
 8007984:	4618      	mov	r0, r3
 8007986:	3714      	adds	r7, #20
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr
 8007990:	51eb851f 	.word	0x51eb851f
 8007994:	0800cbf8 	.word	0x0800cbf8

08007998 <dateTime_setDateTimeYear>:

DateTime_Display_Status_t dateTime_setDateTimeYear(DateTime_Display_Config_t* const pConfig,
    const uint8_t* const inputDateTime)
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  //Extract input year
  pConfig->dateTimeData.Year = (inputDateTime[4]*1000)+(inputDateTime[5]*100)
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	3304      	adds	r3, #4
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	461a      	mov	r2, r3
 80079aa:	0152      	lsls	r2, r2, #5
 80079ac:	1ad2      	subs	r2, r2, r3
 80079ae:	0092      	lsls	r2, r2, #2
 80079b0:	4413      	add	r3, r2
 80079b2:	00db      	lsls	r3, r3, #3
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	3305      	adds	r3, #5
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	4619      	mov	r1, r3
 80079be:	0089      	lsls	r1, r1, #2
 80079c0:	440b      	add	r3, r1
 80079c2:	4619      	mov	r1, r3
 80079c4:	0088      	lsls	r0, r1, #2
 80079c6:	4619      	mov	r1, r3
 80079c8:	4603      	mov	r3, r0
 80079ca:	440b      	add	r3, r1
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	4413      	add	r3, r2
 80079d2:	b29a      	uxth	r2, r3
      + (inputDateTime[6]*10) + (inputDateTime[7]);
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	3306      	adds	r3, #6
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	4619      	mov	r1, r3
 80079dc:	0089      	lsls	r1, r1, #2
 80079de:	440b      	add	r3, r1
 80079e0:	005b      	lsls	r3, r3, #1
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	4413      	add	r3, r2
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	683a      	ldr	r2, [r7, #0]
 80079ea:	3207      	adds	r2, #7
 80079ec:	7812      	ldrb	r2, [r2, #0]
 80079ee:	4413      	add	r3, r2
 80079f0:	b29a      	uxth	r2, r3
  pConfig->dateTimeData.Year = (inputDateTime[4]*1000)+(inputDateTime[5]*100)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	81da      	strh	r2, [r3, #14]

  return 1;
 80079f6:	2301      	movs	r3, #1
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <dateTime_setDateTimeHour>:

DateTime_Display_Status_t dateTime_setDateTimeHour(DateTime_Display_Config_t* const pConfig,
    const uint8_t* const inputDateTime)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b085      	sub	sp, #20
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  DateTime_Display_Status_t isSuccess = 1;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	73fb      	strb	r3, [r7, #15]

  //Extract and check input hour
  pConfig->dateTimeData.Hour = (inputDateTime[8]*10) + (inputDateTime[9]);
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	3308      	adds	r3, #8
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	461a      	mov	r2, r3
 8007a1a:	0092      	lsls	r2, r2, #2
 8007a1c:	4413      	add	r3, r2
 8007a1e:	005b      	lsls	r3, r3, #1
 8007a20:	b2da      	uxtb	r2, r3
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	3309      	adds	r3, #9
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	4413      	add	r3, r2
 8007a2a:	b2da      	uxtb	r2, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	741a      	strb	r2, [r3, #16]

  if ((pConfig->dateTimeData.Hour >= 0) && (pConfig->dateTimeData.Hour <= 24))
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	7c1b      	ldrb	r3, [r3, #16]
 8007a34:	2b18      	cmp	r3, #24
 8007a36:	d827      	bhi.n	8007a88 <dateTime_setDateTimeHour+0x84>
  {
    //Convert to 12 hour time and set meridiem
    if ((pConfig->dateTimeData.Hour > 12))
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	7c1b      	ldrb	r3, [r3, #16]
 8007a3c:	2b0c      	cmp	r3, #12
 8007a3e:	d90f      	bls.n	8007a60 <dateTime_setDateTimeHour+0x5c>
    {
      pConfig->dateTimeData.Hour -= 12;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	7c1b      	ldrb	r3, [r3, #16]
 8007a44:	3b0c      	subs	r3, #12
 8007a46:	b2da      	uxtb	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	741a      	strb	r2, [r3, #16]
      pConfig->dateTimeData.Meridiem = (pConfig->dateTimeData.Hour == 12) ?
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	7c1b      	ldrb	r3, [r3, #16]
          DateTime_DisplayDataMeridiem_AM : DateTime_DisplayDataMeridiem_PM;
 8007a50:	2b0c      	cmp	r3, #12
 8007a52:	d101      	bne.n	8007a58 <dateTime_setDateTimeHour+0x54>
 8007a54:	2201      	movs	r2, #1
 8007a56:	e000      	b.n	8007a5a <dateTime_setDateTimeHour+0x56>
 8007a58:	2202      	movs	r2, #2
      pConfig->dateTimeData.Meridiem = (pConfig->dateTimeData.Hour == 12) ?
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	749a      	strb	r2, [r3, #18]
 8007a5e:	e015      	b.n	8007a8c <dateTime_setDateTimeHour+0x88>
    }
    else
    {
      pConfig->dateTimeData.Meridiem = (pConfig->dateTimeData.Hour == 12) ?
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	7c1b      	ldrb	r3, [r3, #16]
          DateTime_DisplayDataMeridiem_PM : DateTime_DisplayDataMeridiem_AM;
 8007a64:	2b0c      	cmp	r3, #12
 8007a66:	d101      	bne.n	8007a6c <dateTime_setDateTimeHour+0x68>
 8007a68:	2202      	movs	r2, #2
 8007a6a:	e000      	b.n	8007a6e <dateTime_setDateTimeHour+0x6a>
 8007a6c:	2201      	movs	r2, #1
      pConfig->dateTimeData.Meridiem = (pConfig->dateTimeData.Hour == 12) ?
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	749a      	strb	r2, [r3, #18]
      pConfig->dateTimeData.Hour = (pConfig->dateTimeData.Hour == 0) ? 12 : pConfig->dateTimeData.Hour;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	7c1b      	ldrb	r3, [r3, #16]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d002      	beq.n	8007a80 <dateTime_setDateTimeHour+0x7c>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	7c1a      	ldrb	r2, [r3, #16]
 8007a7e:	e000      	b.n	8007a82 <dateTime_setDateTimeHour+0x7e>
 8007a80:	220c      	movs	r2, #12
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	741a      	strb	r2, [r3, #16]
 8007a86:	e001      	b.n	8007a8c <dateTime_setDateTimeHour+0x88>
    }
  }
  else
  {
    isSuccess = 0;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	73fb      	strb	r3, [r7, #15]
  }

  return isSuccess;
 8007a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3714      	adds	r7, #20
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr

08007a9a <dateTime_setDateTimeMinute>:

DateTime_Display_Status_t dateTime_setDateTimeMinute(DateTime_Display_Config_t* const pConfig,
    const uint8_t* const inputDateTime)
{
 8007a9a:	b480      	push	{r7}
 8007a9c:	b083      	sub	sp, #12
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
 8007aa2:	6039      	str	r1, [r7, #0]
  //Extract and check input month
  pConfig->dateTimeData.Minute = (inputDateTime[10]*10) + (inputDateTime[11]);
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	330a      	adds	r3, #10
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	461a      	mov	r2, r3
 8007aac:	0092      	lsls	r2, r2, #2
 8007aae:	4413      	add	r3, r2
 8007ab0:	005b      	lsls	r3, r3, #1
 8007ab2:	b2da      	uxtb	r2, r3
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	330b      	adds	r3, #11
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	4413      	add	r3, r2
 8007abc:	b2da      	uxtb	r2, r3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	745a      	strb	r2, [r3, #17]
  if ((pConfig->dateTimeData.Minute >= 0) && (pConfig->dateTimeData.Minute < 60))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	7c5b      	ldrb	r3, [r3, #17]
 8007ac6:	2b3b      	cmp	r3, #59	@ 0x3b
 8007ac8:	d801      	bhi.n	8007ace <dateTime_setDateTimeMinute+0x34>
  {
    return 1;
 8007aca:	2301      	movs	r3, #1
 8007acc:	e000      	b.n	8007ad0 <dateTime_setDateTimeMinute+0x36>
  }
  else
  {
    return 0;
 8007ace:	2300      	movs	r3, #0

  }
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <dateTime_setDisplayData>:

DateTime_Display_Status_t dateTime_setDisplayData(DateTime_Display_Config_t* const pConfig,
    const uint8_t* const inputDateTime)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
  DateTime_Display_Status_t isSuccess = 1;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	73fb      	strb	r3, [r7, #15]

  isSuccess &= dateTime_setDateTimeMonth(pConfig, inputDateTime);
 8007aea:	6839      	ldr	r1, [r7, #0]
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f7ff fed6 	bl	800789e <dateTime_setDateTimeMonth>
 8007af2:	4603      	mov	r3, r0
 8007af4:	461a      	mov	r2, r3
 8007af6:	7bfb      	ldrb	r3, [r7, #15]
 8007af8:	4013      	ands	r3, r2
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	bf14      	ite	ne
 8007afe:	2301      	movne	r3, #1
 8007b00:	2300      	moveq	r3, #0
 8007b02:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_setDateTimeYear(pConfig, inputDateTime);
 8007b04:	6839      	ldr	r1, [r7, #0]
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f7ff ff46 	bl	8007998 <dateTime_setDateTimeYear>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	461a      	mov	r2, r3
 8007b10:	7bfb      	ldrb	r3, [r7, #15]
 8007b12:	4013      	ands	r3, r2
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	bf14      	ite	ne
 8007b18:	2301      	movne	r3, #1
 8007b1a:	2300      	moveq	r3, #0
 8007b1c:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_setDateTimeDay(pConfig, inputDateTime);
 8007b1e:	6839      	ldr	r1, [r7, #0]
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f7ff fee1 	bl	80078e8 <dateTime_setDateTimeDay>
 8007b26:	4603      	mov	r3, r0
 8007b28:	461a      	mov	r2, r3
 8007b2a:	7bfb      	ldrb	r3, [r7, #15]
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	bf14      	ite	ne
 8007b32:	2301      	movne	r3, #1
 8007b34:	2300      	moveq	r3, #0
 8007b36:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_setDateTimeHour(pConfig, inputDateTime);
 8007b38:	6839      	ldr	r1, [r7, #0]
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f7ff ff62 	bl	8007a04 <dateTime_setDateTimeHour>
 8007b40:	4603      	mov	r3, r0
 8007b42:	461a      	mov	r2, r3
 8007b44:	7bfb      	ldrb	r3, [r7, #15]
 8007b46:	4013      	ands	r3, r2
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	bf14      	ite	ne
 8007b4c:	2301      	movne	r3, #1
 8007b4e:	2300      	moveq	r3, #0
 8007b50:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_setDateTimeMinute(pConfig, inputDateTime);
 8007b52:	6839      	ldr	r1, [r7, #0]
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f7ff ffa0 	bl	8007a9a <dateTime_setDateTimeMinute>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	7bfb      	ldrb	r3, [r7, #15]
 8007b60:	4013      	ands	r3, r2
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	bf14      	ite	ne
 8007b66:	2301      	movne	r3, #1
 8007b68:	2300      	moveq	r3, #0
 8007b6a:	73fb      	strb	r3, [r7, #15]

  return isSuccess;
 8007b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <dateTime_getRtcDateTimeData>:

DateTime_Display_Status_t   dateTime_getRtcDateTimeData(DateTime_Display_Config_t* const pConfig,
    RTC_DateTypeDef* const pRtcDate, RTC_TimeTypeDef* const pRtcTime)
{
 8007b76:	b480      	push	{r7}
 8007b78:	b087      	sub	sp, #28
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	60f8      	str	r0, [r7, #12]
 8007b7e:	60b9      	str	r1, [r7, #8]
 8007b80:	607a      	str	r2, [r7, #4]
  DateTime_Display_Status_t isSuccess = 1;
 8007b82:	2301      	movs	r3, #1
 8007b84:	75fb      	strb	r3, [r7, #23]

  pRtcDate->Date        = pConfig->dateTimeData.Day;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	7b5a      	ldrb	r2, [r3, #13]
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	709a      	strb	r2, [r3, #2]
  pRtcDate->Month       = pConfig->dateTimeData.Month;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	7b1a      	ldrb	r2, [r3, #12]
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	705a      	strb	r2, [r3, #1]
  pRtcDate->Year        = 0;                            //Set to zero because maximum value from RTC is 99 years
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	70da      	strb	r2, [r3, #3]
  pRtcTime->Hours       = pConfig->dateTimeData.Hour;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	7c1a      	ldrb	r2, [r3, #16]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	701a      	strb	r2, [r3, #0]
  pRtcTime->Minutes     = pConfig->dateTimeData.Minute;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	7c5a      	ldrb	r2, [r3, #17]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	705a      	strb	r2, [r3, #1]
  pRtcTime->TimeFormat  = pConfig->dateTimeData.Meridiem - 1; //RTC AM = 0, RTC PM = 1;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	7c9b      	ldrb	r3, [r3, #18]
 8007bb0:	3b01      	subs	r3, #1
 8007bb2:	b2da      	uxtb	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	70da      	strb	r2, [r3, #3]
  pRtcTime->Seconds     = 0;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	709a      	strb	r2, [r3, #2]
  pRtcTime->SubSeconds  = 0;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	605a      	str	r2, [r3, #4]
  pConfig->orignalYear  = pConfig->dateTimeData.Year; //Hacky way to fix RTC year issue
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	89da      	ldrh	r2, [r3, #14]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	829a      	strh	r2, [r3, #20]
  return isSuccess;
 8007bcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	371c      	adds	r7, #28
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr

08007bda <dateTime_setRtcDateTimeData>:

DateTime_Display_Status_t   dateTime_setRtcDateTimeData(DateTime_Display_Config_t* const pConfig,
    RTC_DateTypeDef* const pRtcDate, RTC_TimeTypeDef* const pRtcTime)
{
 8007bda:	b480      	push	{r7}
 8007bdc:	b087      	sub	sp, #28
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	60f8      	str	r0, [r7, #12]
 8007be2:	60b9      	str	r1, [r7, #8]
 8007be4:	607a      	str	r2, [r7, #4]
  DateTime_Display_Status_t isSuccess = 1;
 8007be6:	2301      	movs	r3, #1
 8007be8:	75fb      	strb	r3, [r7, #23]

  pConfig->dateTimeData.Day       = pRtcDate->Date;
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	789a      	ldrb	r2, [r3, #2]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	735a      	strb	r2, [r3, #13]
  pConfig->dateTimeData.Month     = pRtcDate->Month;
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	785a      	ldrb	r2, [r3, #1]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	731a      	strb	r2, [r3, #12]
  pConfig->dateTimeData.Year      = pConfig->orignalYear + pRtcDate->Year;  //Add years because maximum value from RTC is 99 years
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	8a9b      	ldrh	r3, [r3, #20]
 8007bfe:	68ba      	ldr	r2, [r7, #8]
 8007c00:	78d2      	ldrb	r2, [r2, #3]
 8007c02:	4413      	add	r3, r2
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	81da      	strh	r2, [r3, #14]
  pConfig->dateTimeData.Hour      = pRtcTime->Hours;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	781a      	ldrb	r2, [r3, #0]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	741a      	strb	r2, [r3, #16]
  pConfig->dateTimeData.Minute    = pRtcTime->Minutes;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	785a      	ldrb	r2, [r3, #1]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	745a      	strb	r2, [r3, #17]
  pConfig->dateTimeData.Meridiem  = pRtcTime->TimeFormat + 1; //RTC AM = 0, RTC PM = 1;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	78db      	ldrb	r3, [r3, #3]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	b2da      	uxtb	r2, r3
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	749a      	strb	r2, [r3, #18]

  return isSuccess;
 8007c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	371c      	adds	r7, #28
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <dateTime_copyDateTime>:

DateTime_Display_Status_t dateTime_copyDateTime(DateTime_Display_Config_t* const pDestConfig,
    DateTime_Display_Config_t* const pSourceConfig)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  DateTime_Display_Status_t isSuccess = 1;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	73fb      	strb	r3, [r7, #15]

  memcpy(&pDestConfig->dateTimeData, &pSourceConfig->dateTimeData, sizeof(pDestConfig->dateTimeData));
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f103 000c 	add.w	r0, r3, #12
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	330c      	adds	r3, #12
 8007c4c:	2208      	movs	r2, #8
 8007c4e:	4619      	mov	r1, r3
 8007c50:	f004 f82f 	bl	800bcb2 <memcpy>

  return isSuccess;
 8007c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <dateTime_clearDisplay>:

DateTime_Display_Status_t dateTime_clearDisplay(DateTime_Display_Config_t* const pConfig)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b086      	sub	sp, #24
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
  uint8_t* clearBuffer = malloc (TOTAL_NUMBER_OF_ROWS);
 8007c66:	2010      	movs	r0, #16
 8007c68:	f003 fd62 	bl	800b730 <malloc>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	60fb      	str	r3, [r7, #12]
  DateTime_Display_Status_t isSuccess   = 0;
 8007c70:	2300      	movs	r3, #0
 8007c72:	75fb      	strb	r3, [r7, #23]

  for (int buffCount = 0; buffCount < TOTAL_NUMBER_OF_ROWS; buffCount++)
 8007c74:	2300      	movs	r3, #0
 8007c76:	613b      	str	r3, [r7, #16]
 8007c78:	e007      	b.n	8007c8a <dateTime_clearDisplay+0x2c>
  {
    clearBuffer[buffCount] = 0x00;
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	4413      	add	r3, r2
 8007c80:	2200      	movs	r2, #0
 8007c82:	701a      	strb	r2, [r3, #0]
  for (int buffCount = 0; buffCount < TOTAL_NUMBER_OF_ROWS; buffCount++)
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	3301      	adds	r3, #1
 8007c88:	613b      	str	r3, [r7, #16]
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	2b0f      	cmp	r3, #15
 8007c8e:	ddf4      	ble.n	8007c7a <dateTime_clearDisplay+0x1c>
  }

  isSuccess = ht16k33_updateDisplayData (pConfig->hDisplayDriver,DISPLAY_DATA_REG_ADDRESS, clearBuffer,
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6898      	ldr	r0, [r3, #8]
 8007c94:	2310      	movs	r3, #16
 8007c96:	68fa      	ldr	r2, [r7, #12]
 8007c98:	2100      	movs	r1, #0
 8007c9a:	f7ff fcc9 	bl	8007630 <ht16k33_updateDisplayData>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	75fb      	strb	r3, [r7, #23]
      TOTAL_NUMBER_OF_ROWS);

  if (isSuccess)
 8007ca2:	7dfb      	ldrb	r3, [r7, #23]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d010      	beq.n	8007cca <dateTime_clearDisplay+0x6c>
  {
    isSuccess |= ht16k33_setDisplaySetup(pConfig->hDisplayDriver, Ht16k33_DisplayStatus_On,
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	2200      	movs	r2, #0
 8007cae:	2101      	movs	r1, #1
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f7ff fc5e 	bl	8007572 <ht16k33_setDisplaySetup>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	461a      	mov	r2, r3
 8007cba:	7dfb      	ldrb	r3, [r7, #23]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	bf14      	ite	ne
 8007cc4:	2301      	movne	r3, #1
 8007cc6:	2300      	moveq	r3, #0
 8007cc8:	75fb      	strb	r3, [r7, #23]
        Ht16k33_BlinkingFrequency_Off);
  }

  free(clearBuffer);
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f003 fd38 	bl	800b740 <free>

  return isSuccess;
 8007cd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3718      	adds	r7, #24
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <dateTime_setLed>:
DateTime_Display_Status_t dateTime_setLed(DateTime_Display_Config_t* const pConfig, const uint8_t segmentNumber,
       const uint8_t ledState)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b086      	sub	sp, #24
 8007cde:	af02      	add	r7, sp, #8
 8007ce0:	6078      	str	r0, [r7, #4]
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	70fb      	strb	r3, [r7, #3]
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	70bb      	strb	r3, [r7, #2]
     DateTime_Display_Status_t isSuccess   = 0;
 8007cea:	2300      	movs	r3, #0
 8007cec:	73fb      	strb	r3, [r7, #15]
     uint8_t SegmentData = 0;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	73bb      	strb	r3, [r7, #14]
     uint8_t RequestData = segmentNumber;
 8007cf2:	78fb      	ldrb	r3, [r7, #3]
 8007cf4:	737b      	strb	r3, [r7, #13]

     isSuccess |= HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->i2cAddrs)<<1, &RequestData,  1, HAL_MAX_DELAY);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6818      	ldr	r0, [r3, #0]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	791b      	ldrb	r3, [r3, #4]
 8007cfe:	005b      	lsls	r3, r3, #1
 8007d00:	b299      	uxth	r1, r3
 8007d02:	f107 020d 	add.w	r2, r7, #13
 8007d06:	f04f 33ff 	mov.w	r3, #4294967295
 8007d0a:	9300      	str	r3, [sp, #0]
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	f7fb f81f 	bl	8002d50 <HAL_I2C_Master_Transmit>
 8007d12:	4603      	mov	r3, r0
 8007d14:	461a      	mov	r2, r3
 8007d16:	7bfb      	ldrb	r3, [r7, #15]
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	bf14      	ite	ne
 8007d1e:	2301      	movne	r3, #1
 8007d20:	2300      	moveq	r3, #0
 8007d22:	73fb      	strb	r3, [r7, #15]
     isSuccess |= HAL_I2C_Master_Receive(pConfig->hi2c, ((pConfig->i2cAddrs)<<1)|0x01, &SegmentData, 1, HAL_MAX_DELAY);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6818      	ldr	r0, [r3, #0]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	791b      	ldrb	r3, [r3, #4]
 8007d2c:	005b      	lsls	r3, r3, #1
 8007d2e:	b21b      	sxth	r3, r3
 8007d30:	f043 0301 	orr.w	r3, r3, #1
 8007d34:	b21b      	sxth	r3, r3
 8007d36:	b299      	uxth	r1, r3
 8007d38:	f107 020e 	add.w	r2, r7, #14
 8007d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8007d40:	9300      	str	r3, [sp, #0]
 8007d42:	2301      	movs	r3, #1
 8007d44:	f7fb f902 	bl	8002f4c <HAL_I2C_Master_Receive>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	7bfb      	ldrb	r3, [r7, #15]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	bf14      	ite	ne
 8007d54:	2301      	movne	r3, #1
 8007d56:	2300      	moveq	r3, #0
 8007d58:	73fb      	strb	r3, [r7, #15]
     SegmentData &= 0b00111111;
 8007d5a:	7bbb      	ldrb	r3, [r7, #14]
 8007d5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	73bb      	strb	r3, [r7, #14]
     SegmentData |= ledState;
 8007d64:	7bba      	ldrb	r2, [r7, #14]
 8007d66:	78bb      	ldrb	r3, [r7, #2]
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	73bb      	strb	r3, [r7, #14]
     isSuccess |= ht16k33_updateDisplayData (pConfig->hDisplayDriver, RequestData, &SegmentData, 1);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6898      	ldr	r0, [r3, #8]
 8007d72:	7b79      	ldrb	r1, [r7, #13]
 8007d74:	f107 020e 	add.w	r2, r7, #14
 8007d78:	2301      	movs	r3, #1
 8007d7a:	f7ff fc59 	bl	8007630 <ht16k33_updateDisplayData>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	461a      	mov	r2, r3
 8007d82:	7bfb      	ldrb	r3, [r7, #15]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	bf14      	ite	ne
 8007d8c:	2301      	movne	r3, #1
 8007d8e:	2300      	moveq	r3, #0
 8007d90:	73fb      	strb	r3, [r7, #15]

     return isSuccess;
 8007d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3710      	adds	r7, #16
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <dateTime_toggleTimeColon>:

DateTime_Display_Status_t dateTime_toggleTimeColon(DateTime_Display_Config_t* const pConfig,
    DateTime_Display_Config_t* const pConfig1, DateTime_Display_Config_t* const pConfig2)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b086      	sub	sp, #24
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	607a      	str	r2, [r7, #4]
  static uint8_t toogleStatus = 0;
  static uint32_t previousTime = 0;
  DateTime_Display_Status_t isSuccess   = 0;
 8007da8:	2300      	movs	r3, #0
 8007daa:	75fb      	strb	r3, [r7, #23]

  if ((HAL_GetTick()-previousTime) >= COLON_TIME_DELAY_MS)
 8007dac:	f7f9 fc1a 	bl	80015e4 <HAL_GetTick>
 8007db0:	4602      	mov	r2, r0
 8007db2:	4b29      	ldr	r3, [pc, #164]	@ (8007e58 <dateTime_toggleTimeColon+0xbc>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	1ad3      	subs	r3, r2, r3
 8007db8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8007dbc:	d346      	bcc.n	8007e4c <dateTime_toggleTimeColon+0xb0>
  {
    toogleStatus = ((toogleStatus) == 0) ? 3 : 0;
 8007dbe:	4b27      	ldr	r3, [pc, #156]	@ (8007e5c <dateTime_toggleTimeColon+0xc0>)
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d101      	bne.n	8007dca <dateTime_toggleTimeColon+0x2e>
 8007dc6:	2203      	movs	r2, #3
 8007dc8:	e000      	b.n	8007dcc <dateTime_toggleTimeColon+0x30>
 8007dca:	2200      	movs	r2, #0
 8007dcc:	4b23      	ldr	r3, [pc, #140]	@ (8007e5c <dateTime_toggleTimeColon+0xc0>)
 8007dce:	701a      	strb	r2, [r3, #0]
    previousTime = HAL_GetTick();
 8007dd0:	f7f9 fc08 	bl	80015e4 <HAL_GetTick>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	4a20      	ldr	r2, [pc, #128]	@ (8007e58 <dateTime_toggleTimeColon+0xbc>)
 8007dd8:	6013      	str	r3, [r2, #0]
    isSuccess |= dateTime_setLed(pConfig, COLON_LED_SEGMENT_ADDRESS, (toogleStatus<<6));
 8007dda:	4b20      	ldr	r3, [pc, #128]	@ (8007e5c <dateTime_toggleTimeColon+0xc0>)
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	019b      	lsls	r3, r3, #6
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	461a      	mov	r2, r3
 8007de4:	2107      	movs	r1, #7
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	f7ff ff77 	bl	8007cda <dateTime_setLed>
 8007dec:	4603      	mov	r3, r0
 8007dee:	461a      	mov	r2, r3
 8007df0:	7dfb      	ldrb	r3, [r7, #23]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	bf14      	ite	ne
 8007dfa:	2301      	movne	r3, #1
 8007dfc:	2300      	moveq	r3, #0
 8007dfe:	75fb      	strb	r3, [r7, #23]
    isSuccess |= dateTime_setLed(pConfig1, COLON_LED_SEGMENT_ADDRESS, (toogleStatus<<6));
 8007e00:	4b16      	ldr	r3, [pc, #88]	@ (8007e5c <dateTime_toggleTimeColon+0xc0>)
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	019b      	lsls	r3, r3, #6
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	461a      	mov	r2, r3
 8007e0a:	2107      	movs	r1, #7
 8007e0c:	68b8      	ldr	r0, [r7, #8]
 8007e0e:	f7ff ff64 	bl	8007cda <dateTime_setLed>
 8007e12:	4603      	mov	r3, r0
 8007e14:	461a      	mov	r2, r3
 8007e16:	7dfb      	ldrb	r3, [r7, #23]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	bf14      	ite	ne
 8007e20:	2301      	movne	r3, #1
 8007e22:	2300      	moveq	r3, #0
 8007e24:	75fb      	strb	r3, [r7, #23]
    isSuccess |= dateTime_setLed(pConfig2, COLON_LED_SEGMENT_ADDRESS, (toogleStatus<<6));
 8007e26:	4b0d      	ldr	r3, [pc, #52]	@ (8007e5c <dateTime_toggleTimeColon+0xc0>)
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	019b      	lsls	r3, r3, #6
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	461a      	mov	r2, r3
 8007e30:	2107      	movs	r1, #7
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f7ff ff51 	bl	8007cda <dateTime_setLed>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	7dfb      	ldrb	r3, [r7, #23]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	bf14      	ite	ne
 8007e46:	2301      	movne	r3, #1
 8007e48:	2300      	moveq	r3, #0
 8007e4a:	75fb      	strb	r3, [r7, #23]
  }

  return isSuccess;
 8007e4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3718      	adds	r7, #24
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	2000038c 	.word	0x2000038c
 8007e5c:	20000390 	.word	0x20000390

08007e60 <dateTime_setDigitSegments>:

//Hacky way of fixing wiring issue of LED numerical digits
DateTime_Display_Status_t dateTime_setDigitSegments(DateTime_Display_Config_t* const pConfig, const uint8_t segmentNum,
    const char dispDigit)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b088      	sub	sp, #32
 8007e64:	af02      	add	r7, sp, #8
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	460b      	mov	r3, r1
 8007e6a:	70fb      	strb	r3, [r7, #3]
 8007e6c:	4613      	mov	r3, r2
 8007e6e:	70bb      	strb	r3, [r7, #2]
  uint8_t* displayBuffer = malloc (2);
 8007e70:	2002      	movs	r0, #2
 8007e72:	f003 fc5d 	bl	800b730 <malloc>
 8007e76:	4603      	mov	r3, r0
 8007e78:	617b      	str	r3, [r7, #20]
  uint8_t test[] = {0,0};
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	823b      	strh	r3, [r7, #16]
  uint8_t boo[] = {0x00};
 8007e7e:	2300      	movs	r3, #0
 8007e80:	733b      	strb	r3, [r7, #12]

  if (segmentNum % 2)
 8007e82:	78fb      	ldrb	r3, [r7, #3]
 8007e84:	f003 0301 	and.w	r3, r3, #1
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d047      	beq.n	8007f1e <dateTime_setDigitSegments+0xbe>
  {
    boo[0] = segmentNum - 0x01;
 8007e8e:	78fb      	ldrb	r3, [r7, #3]
 8007e90:	3b01      	subs	r3, #1
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->i2cAddrs)<<1, boo,  sizeof(boo), HAL_MAX_DELAY);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6818      	ldr	r0, [r3, #0]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	791b      	ldrb	r3, [r3, #4]
 8007e9e:	005b      	lsls	r3, r3, #1
 8007ea0:	b299      	uxth	r1, r3
 8007ea2:	f107 020c 	add.w	r2, r7, #12
 8007ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8007eaa:	9300      	str	r3, [sp, #0]
 8007eac:	2301      	movs	r3, #1
 8007eae:	f7fa ff4f 	bl	8002d50 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(pConfig->hi2c, ((pConfig->i2cAddrs)<<1)|0x01, test, 1, HAL_MAX_DELAY);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6818      	ldr	r0, [r3, #0]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	791b      	ldrb	r3, [r3, #4]
 8007eba:	005b      	lsls	r3, r3, #1
 8007ebc:	b21b      	sxth	r3, r3
 8007ebe:	f043 0301 	orr.w	r3, r3, #1
 8007ec2:	b21b      	sxth	r3, r3
 8007ec4:	b299      	uxth	r1, r3
 8007ec6:	f107 0210 	add.w	r2, r7, #16
 8007eca:	f04f 33ff 	mov.w	r3, #4294967295
 8007ece:	9300      	str	r3, [sp, #0]
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	f7fb f83b 	bl	8002f4c <HAL_I2C_Master_Receive>
    test[0] = 0x7F & test[0];
 8007ed6:	7c3b      	ldrb	r3, [r7, #16]
 8007ed8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	743b      	strb	r3, [r7, #16]
    test[0] |= (sevenSegmentChars[(dispDigit-'0')] & 0x01 )<< 7;
 8007ee0:	7c3b      	ldrb	r3, [r7, #16]
 8007ee2:	b25a      	sxtb	r2, r3
 8007ee4:	78bb      	ldrb	r3, [r7, #2]
 8007ee6:	3b30      	subs	r3, #48	@ 0x30
 8007ee8:	492c      	ldr	r1, [pc, #176]	@ (8007f9c <dateTime_setDigitSegments+0x13c>)
 8007eea:	5ccb      	ldrb	r3, [r1, r3]
 8007eec:	01db      	lsls	r3, r3, #7
 8007eee:	b25b      	sxtb	r3, r3
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	b25b      	sxtb	r3, r3
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	743b      	strb	r3, [r7, #16]
    test[1] |= sevenSegmentChars[(dispDigit-'0')] >> 1;
 8007ef8:	7c7a      	ldrb	r2, [r7, #17]
 8007efa:	78bb      	ldrb	r3, [r7, #2]
 8007efc:	3b30      	subs	r3, #48	@ 0x30
 8007efe:	4927      	ldr	r1, [pc, #156]	@ (8007f9c <dateTime_setDigitSegments+0x13c>)
 8007f00:	5ccb      	ldrb	r3, [r1, r3]
 8007f02:	085b      	lsrs	r3, r3, #1
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	4313      	orrs	r3, r2
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	747b      	strb	r3, [r7, #17]
    ht16k33_updateDisplayData (pConfig->hDisplayDriver, boo[0], test, 2);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6898      	ldr	r0, [r3, #8]
 8007f10:	7b39      	ldrb	r1, [r7, #12]
 8007f12:	f107 0210 	add.w	r2, r7, #16
 8007f16:	2302      	movs	r3, #2
 8007f18:	f7ff fb8a 	bl	8007630 <ht16k33_updateDisplayData>
 8007f1c:	e036      	b.n	8007f8c <dateTime_setDigitSegments+0x12c>
  }
  else
  {
    boo[0] = segmentNum;
 8007f1e:	78fb      	ldrb	r3, [r7, #3]
 8007f20:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->i2cAddrs)<<1, boo,  1, HAL_MAX_DELAY);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6818      	ldr	r0, [r3, #0]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	791b      	ldrb	r3, [r3, #4]
 8007f2a:	005b      	lsls	r3, r3, #1
 8007f2c:	b299      	uxth	r1, r3
 8007f2e:	f107 020c 	add.w	r2, r7, #12
 8007f32:	f04f 33ff 	mov.w	r3, #4294967295
 8007f36:	9300      	str	r3, [sp, #0]
 8007f38:	2301      	movs	r3, #1
 8007f3a:	f7fa ff09 	bl	8002d50 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(pConfig->hi2c, ((pConfig->i2cAddrs)<<1)|0x01, test, 1, HAL_MAX_DELAY);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6818      	ldr	r0, [r3, #0]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	791b      	ldrb	r3, [r3, #4]
 8007f46:	005b      	lsls	r3, r3, #1
 8007f48:	b21b      	sxth	r3, r3
 8007f4a:	f043 0301 	orr.w	r3, r3, #1
 8007f4e:	b21b      	sxth	r3, r3
 8007f50:	b299      	uxth	r1, r3
 8007f52:	f107 0210 	add.w	r2, r7, #16
 8007f56:	f04f 33ff 	mov.w	r3, #4294967295
 8007f5a:	9300      	str	r3, [sp, #0]
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	f7fa fff5 	bl	8002f4c <HAL_I2C_Master_Receive>
    test[0] = 0x80 & test[0];
 8007f62:	7c3b      	ldrb	r3, [r7, #16]
 8007f64:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	743b      	strb	r3, [r7, #16]
    displayBuffer[0] = test[0] | sevenSegmentChars[(dispDigit-'0')];
 8007f6c:	7c3a      	ldrb	r2, [r7, #16]
 8007f6e:	78bb      	ldrb	r3, [r7, #2]
 8007f70:	3b30      	subs	r3, #48	@ 0x30
 8007f72:	490a      	ldr	r1, [pc, #40]	@ (8007f9c <dateTime_setDigitSegments+0x13c>)
 8007f74:	5ccb      	ldrb	r3, [r1, r3]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	b2da      	uxtb	r2, r3
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	701a      	strb	r2, [r3, #0]
    ht16k33_updateDisplayData (pConfig->hDisplayDriver, segmentNum, displayBuffer, 1);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6898      	ldr	r0, [r3, #8]
 8007f82:	78f9      	ldrb	r1, [r7, #3]
 8007f84:	2301      	movs	r3, #1
 8007f86:	697a      	ldr	r2, [r7, #20]
 8007f88:	f7ff fb52 	bl	8007630 <ht16k33_updateDisplayData>
  }

  free(displayBuffer);
 8007f8c:	6978      	ldr	r0, [r7, #20]
 8007f8e:	f003 fbd7 	bl	800b740 <free>
  return 1;
 8007f92:	2301      	movs	r3, #1
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3718      	adds	r7, #24
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	0800cbc8 	.word	0x0800cbc8

08007fa0 <dateTime_setAlphaSegments>:

DateTime_Display_Status_t dateTime_setAlphaSegments(DateTime_Display_Config_t* const pConfig, const uint8_t segmentNum,
    const char dispAlpha)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	460b      	mov	r3, r1
 8007faa:	70fb      	strb	r3, [r7, #3]
 8007fac:	4613      	mov	r3, r2
 8007fae:	70bb      	strb	r3, [r7, #2]
  uint8_t displayBuffer[2] = {0,0};
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	81bb      	strh	r3, [r7, #12]

  displayBuffer[0] = (uint8_t)((fourteenSegmentChars[(uint8_t)(dispAlpha-0x41)]>>0) & 0xFF);
 8007fb4:	78bb      	ldrb	r3, [r7, #2]
 8007fb6:	3b41      	subs	r3, #65	@ 0x41
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	461a      	mov	r2, r3
 8007fbc:	4b10      	ldr	r3, [pc, #64]	@ (8008000 <dateTime_setAlphaSegments+0x60>)
 8007fbe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	733b      	strb	r3, [r7, #12]
  displayBuffer[1] = (uint8_t)((fourteenSegmentChars[(uint8_t)(dispAlpha-0x41)]>>8) & 0xFF);
 8007fc6:	78bb      	ldrb	r3, [r7, #2]
 8007fc8:	3b41      	subs	r3, #65	@ 0x41
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	461a      	mov	r2, r3
 8007fce:	4b0c      	ldr	r3, [pc, #48]	@ (8008000 <dateTime_setAlphaSegments+0x60>)
 8007fd0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007fd4:	0a1b      	lsrs	r3, r3, #8
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	737b      	strb	r3, [r7, #13]
  ht16k33_updateDisplayData (pConfig->hDisplayDriver, (10 + (2*segmentNum)), displayBuffer, 2);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6898      	ldr	r0, [r3, #8]
 8007fe0:	78fb      	ldrb	r3, [r7, #3]
 8007fe2:	3305      	adds	r3, #5
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	005b      	lsls	r3, r3, #1
 8007fe8:	b2d9      	uxtb	r1, r3
 8007fea:	f107 020c 	add.w	r2, r7, #12
 8007fee:	2302      	movs	r3, #2
 8007ff0:	f7ff fb1e 	bl	8007630 <ht16k33_updateDisplayData>

  return 1;
 8007ff4:	2301      	movs	r3, #1
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3710      	adds	r7, #16
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	0800cb94 	.word	0x0800cb94

08008004 <dateTime_updateDisplayGlitch>:

DateTime_Display_Status_t dateTime_updateDisplayGlitch(DateTime_Display_Config_t* const pConfig,
    const char* const pGlitchData)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b086      	sub	sp, #24
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
  DateTime_Display_Status_t isSuccess           = 0;
 800800e:	2300      	movs	r3, #0
 8008010:	75fb      	strb	r3, [r7, #23]
  uint8_t                   segmentCount        = 0;
 8008012:	2300      	movs	r3, #0
 8008014:	75bb      	strb	r3, [r7, #22]
  char                      digitSegBuffer[11];

  memcpy(&digitSegBuffer, pGlitchData+3, sizeof(digitSegBuffer));
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	1cda      	adds	r2, r3, #3
 800801a:	f107 0308 	add.w	r3, r7, #8
 800801e:	6810      	ldr	r0, [r2, #0]
 8008020:	6851      	ldr	r1, [r2, #4]
 8008022:	c303      	stmia	r3!, {r0, r1}
 8008024:	8911      	ldrh	r1, [r2, #8]
 8008026:	7a92      	ldrb	r2, [r2, #10]
 8008028:	8019      	strh	r1, [r3, #0]
 800802a:	709a      	strb	r2, [r3, #2]


  //Update glitch alphanumeric display
  for (segmentCount = 0; segmentCount <= 2; segmentCount++)
 800802c:	2300      	movs	r3, #0
 800802e:	75bb      	strb	r3, [r7, #22]
 8008030:	e01e      	b.n	8008070 <dateTime_updateDisplayGlitch+0x6c>
  {
    if (pGlitchData[segmentCount] !=' ')
 8008032:	7dbb      	ldrb	r3, [r7, #22]
 8008034:	683a      	ldr	r2, [r7, #0]
 8008036:	4413      	add	r3, r2
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	2b20      	cmp	r3, #32
 800803c:	d015      	beq.n	800806a <dateTime_updateDisplayGlitch+0x66>
    {
      isSuccess |= dateTime_setAlphaSegments(pConfig, segmentCount, pGlitchData[2-segmentCount]);
 800803e:	7dbb      	ldrb	r3, [r7, #22]
 8008040:	f1c3 0302 	rsb	r3, r3, #2
 8008044:	461a      	mov	r2, r3
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	4413      	add	r3, r2
 800804a:	781a      	ldrb	r2, [r3, #0]
 800804c:	7dbb      	ldrb	r3, [r7, #22]
 800804e:	4619      	mov	r1, r3
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f7ff ffa5 	bl	8007fa0 <dateTime_setAlphaSegments>
 8008056:	4603      	mov	r3, r0
 8008058:	461a      	mov	r2, r3
 800805a:	7dfb      	ldrb	r3, [r7, #23]
 800805c:	4313      	orrs	r3, r2
 800805e:	b2db      	uxtb	r3, r3
 8008060:	2b00      	cmp	r3, #0
 8008062:	bf14      	ite	ne
 8008064:	2301      	movne	r3, #1
 8008066:	2300      	moveq	r3, #0
 8008068:	75fb      	strb	r3, [r7, #23]
  for (segmentCount = 0; segmentCount <= 2; segmentCount++)
 800806a:	7dbb      	ldrb	r3, [r7, #22]
 800806c:	3301      	adds	r3, #1
 800806e:	75bb      	strb	r3, [r7, #22]
 8008070:	7dbb      	ldrb	r3, [r7, #22]
 8008072:	2b02      	cmp	r3, #2
 8008074:	d9dd      	bls.n	8008032 <dateTime_updateDisplayGlitch+0x2e>
    }
  }

  //Update glitch digit display
  for (segmentCount = 0; segmentCount < (sizeof(digitSegBuffer)-1); segmentCount++)
 8008076:	2300      	movs	r3, #0
 8008078:	75bb      	strb	r3, [r7, #22]
 800807a:	e018      	b.n	80080ae <dateTime_updateDisplayGlitch+0xaa>
  {
    isSuccess |= dateTime_setDigitSegments(pConfig, digitSegmentOrder[segmentCount], digitSegBuffer[segmentCount]);
 800807c:	7dbb      	ldrb	r3, [r7, #22]
 800807e:	4a17      	ldr	r2, [pc, #92]	@ (80080dc <dateTime_updateDisplayGlitch+0xd8>)
 8008080:	5cd1      	ldrb	r1, [r2, r3]
 8008082:	7dbb      	ldrb	r3, [r7, #22]
 8008084:	3318      	adds	r3, #24
 8008086:	443b      	add	r3, r7
 8008088:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800808c:	461a      	mov	r2, r3
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f7ff fee6 	bl	8007e60 <dateTime_setDigitSegments>
 8008094:	4603      	mov	r3, r0
 8008096:	461a      	mov	r2, r3
 8008098:	7dfb      	ldrb	r3, [r7, #23]
 800809a:	4313      	orrs	r3, r2
 800809c:	b2db      	uxtb	r3, r3
 800809e:	2b00      	cmp	r3, #0
 80080a0:	bf14      	ite	ne
 80080a2:	2301      	movne	r3, #1
 80080a4:	2300      	moveq	r3, #0
 80080a6:	75fb      	strb	r3, [r7, #23]
  for (segmentCount = 0; segmentCount < (sizeof(digitSegBuffer)-1); segmentCount++)
 80080a8:	7dbb      	ldrb	r3, [r7, #22]
 80080aa:	3301      	adds	r3, #1
 80080ac:	75bb      	strb	r3, [r7, #22]
 80080ae:	7dbb      	ldrb	r3, [r7, #22]
 80080b0:	2b09      	cmp	r3, #9
 80080b2:	d9e3      	bls.n	800807c <dateTime_updateDisplayGlitch+0x78>
  }

  //Update Meridiem
  isSuccess |= dateTime_setLed(pConfig, MERIDIEM_LED_SEGMENT_ADDRESS, (DateTime_DisplayDataMeridiem_AM << 6));
 80080b4:	2240      	movs	r2, #64	@ 0x40
 80080b6:	2109      	movs	r1, #9
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f7ff fe0e 	bl	8007cda <dateTime_setLed>
 80080be:	4603      	mov	r3, r0
 80080c0:	461a      	mov	r2, r3
 80080c2:	7dfb      	ldrb	r3, [r7, #23]
 80080c4:	4313      	orrs	r3, r2
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	bf14      	ite	ne
 80080cc:	2301      	movne	r3, #1
 80080ce:	2300      	moveq	r3, #0
 80080d0:	75fb      	strb	r3, [r7, #23]

  return isSuccess;
 80080d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3718      	adds	r7, #24
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	0800cb88 	.word	0x0800cb88

080080e0 <dateTime_convertDateTimeToChar>:

DateTime_Display_Status_t dateTime_convertDateTimeToChar(DateTime_Display_Config_t* const pConfig,
    char* const writeBuf, uint8_t bufferSize, uint8_t* pBufferCount)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	603b      	str	r3, [r7, #0]
 80080ec:	4613      	mov	r3, r2
 80080ee:	71fb      	strb	r3, [r7, #7]
  DateTime_Display_Status_t isSuccess = 0;
 80080f0:	2300      	movs	r3, #0
 80080f2:	75bb      	strb	r3, [r7, #22]
  uint8_t convertedHour;

  *pBufferCount +=  snprintf(writeBuf+*pBufferCount, bufferSize-*pBufferCount,
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	461a      	mov	r2, r3
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	1898      	adds	r0, r3, r2
 80080fe:	79fb      	ldrb	r3, [r7, #7]
 8008100:	683a      	ldr	r2, [r7, #0]
 8008102:	7812      	ldrb	r2, [r2, #0]
 8008104:	1a9b      	subs	r3, r3, r2
 8008106:	4619      	mov	r1, r3
      "%02d", pConfig->dateTimeData.Month);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	7b1b      	ldrb	r3, [r3, #12]
  *pBufferCount +=  snprintf(writeBuf+*pBufferCount, bufferSize-*pBufferCount,
 800810c:	4a45      	ldr	r2, [pc, #276]	@ (8008224 <dateTime_convertDateTimeToChar+0x144>)
 800810e:	f003 fccd 	bl	800baac <sniprintf>
 8008112:	4601      	mov	r1, r0
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	781a      	ldrb	r2, [r3, #0]
 8008118:	b2cb      	uxtb	r3, r1
 800811a:	4413      	add	r3, r2
 800811c:	b2da      	uxtb	r2, r3
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	701a      	strb	r2, [r3, #0]
  *pBufferCount += snprintf(writeBuf+*pBufferCount, bufferSize-*pBufferCount,
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	461a      	mov	r2, r3
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	1898      	adds	r0, r3, r2
 800812c:	79fb      	ldrb	r3, [r7, #7]
 800812e:	683a      	ldr	r2, [r7, #0]
 8008130:	7812      	ldrb	r2, [r2, #0]
 8008132:	1a9b      	subs	r3, r3, r2
 8008134:	4619      	mov	r1, r3
      "%02d", pConfig->dateTimeData.Day);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	7b5b      	ldrb	r3, [r3, #13]
  *pBufferCount += snprintf(writeBuf+*pBufferCount, bufferSize-*pBufferCount,
 800813a:	4a3a      	ldr	r2, [pc, #232]	@ (8008224 <dateTime_convertDateTimeToChar+0x144>)
 800813c:	f003 fcb6 	bl	800baac <sniprintf>
 8008140:	4601      	mov	r1, r0
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	781a      	ldrb	r2, [r3, #0]
 8008146:	b2cb      	uxtb	r3, r1
 8008148:	4413      	add	r3, r2
 800814a:	b2da      	uxtb	r2, r3
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	701a      	strb	r2, [r3, #0]
  *pBufferCount += snprintf(writeBuf+*pBufferCount, bufferSize-*pBufferCount,
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	461a      	mov	r2, r3
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	1898      	adds	r0, r3, r2
 800815a:	79fb      	ldrb	r3, [r7, #7]
 800815c:	683a      	ldr	r2, [r7, #0]
 800815e:	7812      	ldrb	r2, [r2, #0]
 8008160:	1a9b      	subs	r3, r3, r2
 8008162:	4619      	mov	r1, r3
      "%04d", pConfig->dateTimeData.Year);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	89db      	ldrh	r3, [r3, #14]
  *pBufferCount += snprintf(writeBuf+*pBufferCount, bufferSize-*pBufferCount,
 8008168:	4a2f      	ldr	r2, [pc, #188]	@ (8008228 <dateTime_convertDateTimeToChar+0x148>)
 800816a:	f003 fc9f 	bl	800baac <sniprintf>
 800816e:	4601      	mov	r1, r0
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	781a      	ldrb	r2, [r3, #0]
 8008174:	b2cb      	uxtb	r3, r1
 8008176:	4413      	add	r3, r2
 8008178:	b2da      	uxtb	r2, r3
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	701a      	strb	r2, [r3, #0]
  switch (pConfig->dateTimeData.Meridiem)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	7c9b      	ldrb	r3, [r3, #18]
 8008182:	2b01      	cmp	r3, #1
 8008184:	d00e      	beq.n	80081a4 <dateTime_convertDateTimeToChar+0xc4>
 8008186:	2b02      	cmp	r3, #2
 8008188:	d119      	bne.n	80081be <dateTime_convertDateTimeToChar+0xde>
  {
    case  DateTime_DisplayDataMeridiem_PM:
      convertedHour = (pConfig->dateTimeData.Hour == 12) ? (pConfig->dateTimeData.Hour) : (pConfig->dateTimeData.Hour + 12);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	7c1b      	ldrb	r3, [r3, #16]
 800818e:	2b0c      	cmp	r3, #12
 8008190:	d102      	bne.n	8008198 <dateTime_convertDateTimeToChar+0xb8>
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	7c1b      	ldrb	r3, [r3, #16]
 8008196:	e003      	b.n	80081a0 <dateTime_convertDateTimeToChar+0xc0>
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	7c1b      	ldrb	r3, [r3, #16]
 800819c:	330c      	adds	r3, #12
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	75fb      	strb	r3, [r7, #23]
      break;
 80081a2:	e00c      	b.n	80081be <dateTime_convertDateTimeToChar+0xde>
    case  DateTime_DisplayDataMeridiem_AM:
      convertedHour = (pConfig->dateTimeData.Hour == 12) ? (pConfig->dateTimeData.Hour + 12) : (pConfig->dateTimeData.Hour);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	7c1b      	ldrb	r3, [r3, #16]
 80081a8:	2b0c      	cmp	r3, #12
 80081aa:	d104      	bne.n	80081b6 <dateTime_convertDateTimeToChar+0xd6>
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	7c1b      	ldrb	r3, [r3, #16]
 80081b0:	330c      	adds	r3, #12
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	e001      	b.n	80081ba <dateTime_convertDateTimeToChar+0xda>
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	7c1b      	ldrb	r3, [r3, #16]
 80081ba:	75fb      	strb	r3, [r7, #23]
      break;
 80081bc:	bf00      	nop
  }
  *pBufferCount += snprintf(writeBuf+*pBufferCount, bufferSize-*pBufferCount,
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	461a      	mov	r2, r3
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	1898      	adds	r0, r3, r2
 80081c8:	79fb      	ldrb	r3, [r7, #7]
 80081ca:	683a      	ldr	r2, [r7, #0]
 80081cc:	7812      	ldrb	r2, [r2, #0]
 80081ce:	1a9b      	subs	r3, r3, r2
 80081d0:	4619      	mov	r1, r3
 80081d2:	7dfb      	ldrb	r3, [r7, #23]
 80081d4:	4a13      	ldr	r2, [pc, #76]	@ (8008224 <dateTime_convertDateTimeToChar+0x144>)
 80081d6:	f003 fc69 	bl	800baac <sniprintf>
 80081da:	4601      	mov	r1, r0
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	781a      	ldrb	r2, [r3, #0]
 80081e0:	b2cb      	uxtb	r3, r1
 80081e2:	4413      	add	r3, r2
 80081e4:	b2da      	uxtb	r2, r3
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	701a      	strb	r2, [r3, #0]
      "%02d", convertedHour);
  *pBufferCount += snprintf(writeBuf+*pBufferCount, bufferSize-*pBufferCount,
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	461a      	mov	r2, r3
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	1898      	adds	r0, r3, r2
 80081f4:	79fb      	ldrb	r3, [r7, #7]
 80081f6:	683a      	ldr	r2, [r7, #0]
 80081f8:	7812      	ldrb	r2, [r2, #0]
 80081fa:	1a9b      	subs	r3, r3, r2
 80081fc:	4619      	mov	r1, r3
      "%02d", pConfig->dateTimeData.Minute);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	7c5b      	ldrb	r3, [r3, #17]
  *pBufferCount += snprintf(writeBuf+*pBufferCount, bufferSize-*pBufferCount,
 8008202:	4a08      	ldr	r2, [pc, #32]	@ (8008224 <dateTime_convertDateTimeToChar+0x144>)
 8008204:	f003 fc52 	bl	800baac <sniprintf>
 8008208:	4601      	mov	r1, r0
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	781a      	ldrb	r2, [r3, #0]
 800820e:	b2cb      	uxtb	r3, r1
 8008210:	4413      	add	r3, r2
 8008212:	b2da      	uxtb	r2, r3
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	701a      	strb	r2, [r3, #0]

  return isSuccess;
 8008218:	7dbb      	ldrb	r3, [r7, #22]
}
 800821a:	4618      	mov	r0, r3
 800821c:	3718      	adds	r7, #24
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	0800cae8 	.word	0x0800cae8
 8008228:	0800caf0 	.word	0x0800caf0

0800822c <dateTime_updateDisplay>:
DateTime_Display_Status_t dateTime_updateDisplay(DateTime_Display_Config_t* const pConfig)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b086      	sub	sp, #24
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  DateTime_Display_Status_t isSuccess           = 0;
 8008234:	2300      	movs	r3, #0
 8008236:	75fb      	strb	r3, [r7, #23]
  uint8_t                   digitSegBufferCount = 0;
 8008238:	2300      	movs	r3, #0
 800823a:	757b      	strb	r3, [r7, #21]
  uint8_t                   segmentCount        = 0;
 800823c:	2300      	movs	r3, #0
 800823e:	75bb      	strb	r3, [r7, #22]
  char                      digitSegBuffer[11];

  //Update Month Display Characters
  for (segmentCount = 0; segmentCount <= 2; segmentCount++)
 8008240:	2300      	movs	r3, #0
 8008242:	75bb      	strb	r3, [r7, #22]
 8008244:	e01e      	b.n	8008284 <dateTime_updateDisplay+0x58>
  {
    isSuccess |= dateTime_setAlphaSegments(pConfig, segmentCount,
        monthDisplayChars[(pConfig->dateTimeData.Month)-1][2-segmentCount]);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	7b1b      	ldrb	r3, [r3, #12]
 800824a:	1e5a      	subs	r2, r3, #1
 800824c:	7dbb      	ldrb	r3, [r7, #22]
 800824e:	f1c3 0102 	rsb	r1, r3, #2
 8008252:	4848      	ldr	r0, [pc, #288]	@ (8008374 <dateTime_updateDisplay+0x148>)
 8008254:	4613      	mov	r3, r2
 8008256:	005b      	lsls	r3, r3, #1
 8008258:	4413      	add	r3, r2
 800825a:	4403      	add	r3, r0
 800825c:	440b      	add	r3, r1
 800825e:	781a      	ldrb	r2, [r3, #0]
    isSuccess |= dateTime_setAlphaSegments(pConfig, segmentCount,
 8008260:	7dbb      	ldrb	r3, [r7, #22]
 8008262:	4619      	mov	r1, r3
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f7ff fe9b 	bl	8007fa0 <dateTime_setAlphaSegments>
 800826a:	4603      	mov	r3, r0
 800826c:	461a      	mov	r2, r3
 800826e:	7dfb      	ldrb	r3, [r7, #23]
 8008270:	4313      	orrs	r3, r2
 8008272:	b2db      	uxtb	r3, r3
 8008274:	2b00      	cmp	r3, #0
 8008276:	bf14      	ite	ne
 8008278:	2301      	movne	r3, #1
 800827a:	2300      	moveq	r3, #0
 800827c:	75fb      	strb	r3, [r7, #23]
  for (segmentCount = 0; segmentCount <= 2; segmentCount++)
 800827e:	7dbb      	ldrb	r3, [r7, #22]
 8008280:	3301      	adds	r3, #1
 8008282:	75bb      	strb	r3, [r7, #22]
 8008284:	7dbb      	ldrb	r3, [r7, #22]
 8008286:	2b02      	cmp	r3, #2
 8008288:	d9dd      	bls.n	8008246 <dateTime_updateDisplay+0x1a>
  }

  //Update Day, Year and Time
  digitSegBufferCount = snprintf(digitSegBuffer, sizeof(digitSegBuffer), "%02d", pConfig->dateTimeData.Day);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	7b5b      	ldrb	r3, [r3, #13]
 800828e:	f107 0008 	add.w	r0, r7, #8
 8008292:	4a39      	ldr	r2, [pc, #228]	@ (8008378 <dateTime_updateDisplay+0x14c>)
 8008294:	210b      	movs	r1, #11
 8008296:	f003 fc09 	bl	800baac <sniprintf>
 800829a:	4603      	mov	r3, r0
 800829c:	757b      	strb	r3, [r7, #21]
  digitSegBufferCount += snprintf(digitSegBuffer+digitSegBufferCount, sizeof(digitSegBuffer)-digitSegBufferCount,
 800829e:	7d7b      	ldrb	r3, [r7, #21]
 80082a0:	f107 0208 	add.w	r2, r7, #8
 80082a4:	18d0      	adds	r0, r2, r3
 80082a6:	7d7b      	ldrb	r3, [r7, #21]
 80082a8:	f1c3 010b 	rsb	r1, r3, #11
      "%04d", pConfig->dateTimeData.Year);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	89db      	ldrh	r3, [r3, #14]
  digitSegBufferCount += snprintf(digitSegBuffer+digitSegBufferCount, sizeof(digitSegBuffer)-digitSegBufferCount,
 80082b0:	4a32      	ldr	r2, [pc, #200]	@ (800837c <dateTime_updateDisplay+0x150>)
 80082b2:	f003 fbfb 	bl	800baac <sniprintf>
 80082b6:	4603      	mov	r3, r0
 80082b8:	b2da      	uxtb	r2, r3
 80082ba:	7d7b      	ldrb	r3, [r7, #21]
 80082bc:	4413      	add	r3, r2
 80082be:	757b      	strb	r3, [r7, #21]
  digitSegBufferCount += snprintf(digitSegBuffer+digitSegBufferCount, sizeof(digitSegBuffer)-digitSegBufferCount,
 80082c0:	7d7b      	ldrb	r3, [r7, #21]
 80082c2:	f107 0208 	add.w	r2, r7, #8
 80082c6:	18d0      	adds	r0, r2, r3
 80082c8:	7d7b      	ldrb	r3, [r7, #21]
 80082ca:	f1c3 010b 	rsb	r1, r3, #11
      "%02d", pConfig->dateTimeData.Hour);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	7c1b      	ldrb	r3, [r3, #16]
  digitSegBufferCount += snprintf(digitSegBuffer+digitSegBufferCount, sizeof(digitSegBuffer)-digitSegBufferCount,
 80082d2:	4a29      	ldr	r2, [pc, #164]	@ (8008378 <dateTime_updateDisplay+0x14c>)
 80082d4:	f003 fbea 	bl	800baac <sniprintf>
 80082d8:	4603      	mov	r3, r0
 80082da:	b2da      	uxtb	r2, r3
 80082dc:	7d7b      	ldrb	r3, [r7, #21]
 80082de:	4413      	add	r3, r2
 80082e0:	757b      	strb	r3, [r7, #21]
  digitSegBufferCount += snprintf(digitSegBuffer+digitSegBufferCount, sizeof(digitSegBuffer)-digitSegBufferCount,
 80082e2:	7d7b      	ldrb	r3, [r7, #21]
 80082e4:	f107 0208 	add.w	r2, r7, #8
 80082e8:	18d0      	adds	r0, r2, r3
 80082ea:	7d7b      	ldrb	r3, [r7, #21]
 80082ec:	f1c3 010b 	rsb	r1, r3, #11
      "%02d", pConfig->dateTimeData.Minute);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	7c5b      	ldrb	r3, [r3, #17]
  digitSegBufferCount += snprintf(digitSegBuffer+digitSegBufferCount, sizeof(digitSegBuffer)-digitSegBufferCount,
 80082f4:	4a20      	ldr	r2, [pc, #128]	@ (8008378 <dateTime_updateDisplay+0x14c>)
 80082f6:	f003 fbd9 	bl	800baac <sniprintf>
 80082fa:	4603      	mov	r3, r0
 80082fc:	b2da      	uxtb	r2, r3
 80082fe:	7d7b      	ldrb	r3, [r7, #21]
 8008300:	4413      	add	r3, r2
 8008302:	757b      	strb	r3, [r7, #21]

  for (segmentCount = 0; segmentCount < (sizeof(digitSegBuffer)-1); segmentCount++)
 8008304:	2300      	movs	r3, #0
 8008306:	75bb      	strb	r3, [r7, #22]
 8008308:	e018      	b.n	800833c <dateTime_updateDisplay+0x110>
  {
    isSuccess |= dateTime_setDigitSegments(pConfig, digitSegmentOrder[segmentCount], digitSegBuffer[segmentCount]);
 800830a:	7dbb      	ldrb	r3, [r7, #22]
 800830c:	4a1c      	ldr	r2, [pc, #112]	@ (8008380 <dateTime_updateDisplay+0x154>)
 800830e:	5cd1      	ldrb	r1, [r2, r3]
 8008310:	7dbb      	ldrb	r3, [r7, #22]
 8008312:	3318      	adds	r3, #24
 8008314:	443b      	add	r3, r7
 8008316:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800831a:	461a      	mov	r2, r3
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f7ff fd9f 	bl	8007e60 <dateTime_setDigitSegments>
 8008322:	4603      	mov	r3, r0
 8008324:	461a      	mov	r2, r3
 8008326:	7dfb      	ldrb	r3, [r7, #23]
 8008328:	4313      	orrs	r3, r2
 800832a:	b2db      	uxtb	r3, r3
 800832c:	2b00      	cmp	r3, #0
 800832e:	bf14      	ite	ne
 8008330:	2301      	movne	r3, #1
 8008332:	2300      	moveq	r3, #0
 8008334:	75fb      	strb	r3, [r7, #23]
  for (segmentCount = 0; segmentCount < (sizeof(digitSegBuffer)-1); segmentCount++)
 8008336:	7dbb      	ldrb	r3, [r7, #22]
 8008338:	3301      	adds	r3, #1
 800833a:	75bb      	strb	r3, [r7, #22]
 800833c:	7dbb      	ldrb	r3, [r7, #22]
 800833e:	2b09      	cmp	r3, #9
 8008340:	d9e3      	bls.n	800830a <dateTime_updateDisplay+0xde>
  }

  //Update Meridiem
  isSuccess |= dateTime_setLed(pConfig, MERIDIEM_LED_SEGMENT_ADDRESS, (pConfig->dateTimeData.Meridiem << 6));
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	7c9b      	ldrb	r3, [r3, #18]
 8008346:	019b      	lsls	r3, r3, #6
 8008348:	b2db      	uxtb	r3, r3
 800834a:	461a      	mov	r2, r3
 800834c:	2109      	movs	r1, #9
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f7ff fcc3 	bl	8007cda <dateTime_setLed>
 8008354:	4603      	mov	r3, r0
 8008356:	461a      	mov	r2, r3
 8008358:	7dfb      	ldrb	r3, [r7, #23]
 800835a:	4313      	orrs	r3, r2
 800835c:	b2db      	uxtb	r3, r3
 800835e:	2b00      	cmp	r3, #0
 8008360:	bf14      	ite	ne
 8008362:	2301      	movne	r3, #1
 8008364:	2300      	moveq	r3, #0
 8008366:	75fb      	strb	r3, [r7, #23]

  return isSuccess;
 8008368:	7dfb      	ldrb	r3, [r7, #23]
}
 800836a:	4618      	mov	r0, r3
 800836c:	3718      	adds	r7, #24
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	0800cbd4 	.word	0x0800cbd4
 8008378:	0800cae8 	.word	0x0800cae8
 800837c:	0800caf0 	.word	0x0800caf0
 8008380:	0800cb88 	.word	0x0800cb88

08008384 <soundEffects_init>:
uint32_t gRecordingSize           = 0;
uint32_t gPlayedSize              = 0;
uint16_t gSamples[8000];

SoundEffects_Config_t * soundEffects_init(I2S_HandleTypeDef* hi2s, GPIO_TypeDef* const pGpioPort, const uint16_t* const pGpioPin)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b086      	sub	sp, #24
 8008388:	af00      	add	r7, sp, #0
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	607a      	str	r2, [r7, #4]
  SoundEffects_Config_t* pConfig = malloc(sizeof(SoundEffects_Config_t));
 8008390:	2014      	movs	r0, #20
 8008392:	f003 f9cd 	bl	800b730 <malloc>
 8008396:	4603      	mov	r3, r0
 8008398:	617b      	str	r3, [r7, #20]
  pConfig->hi2s = hi2s;
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	68fa      	ldr	r2, [r7, #12]
 800839e:	601a      	str	r2, [r3, #0]
  pConfig->pMuteSwitchGpioPort = pGpioPort;
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	68ba      	ldr	r2, [r7, #8]
 80083a4:	605a      	str	r2, [r3, #4]
  pConfig->pMuteSwitchGpioPin = *pGpioPin;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	881a      	ldrh	r2, [r3, #0]
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	811a      	strh	r2, [r3, #8]

  return pConfig;
 80083ae:	697b      	ldr	r3, [r7, #20]
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3718      	adds	r7, #24
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <soundEffects_initPlaySound>:
  return 1;
}

SoundEffects_Status_t soundEffects_initPlaySound(SoundEffects_Config_t* pSoundEffectConfig,
    StorageDevice_Config_t* pStorageDeviceConfig)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]

  storageDevice_readWavDataSize(pStorageDeviceConfig, "enter_v1.wav", &gRecordingSize, &gFileReadSize);
 80083c2:	4b09      	ldr	r3, [pc, #36]	@ (80083e8 <soundEffects_initPlaySound+0x30>)
 80083c4:	4a09      	ldr	r2, [pc, #36]	@ (80083ec <soundEffects_initPlaySound+0x34>)
 80083c6:	490a      	ldr	r1, [pc, #40]	@ (80083f0 <soundEffects_initPlaySound+0x38>)
 80083c8:	6838      	ldr	r0, [r7, #0]
 80083ca:	f000 f927 	bl	800861c <storageDevice_readWavDataSize>
  storageDevice_readFileData(pStorageDeviceConfig, gSamples, 16000, &gFileReadSize);
 80083ce:	4b06      	ldr	r3, [pc, #24]	@ (80083e8 <soundEffects_initPlaySound+0x30>)
 80083d0:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80083d4:	4907      	ldr	r1, [pc, #28]	@ (80083f4 <soundEffects_initPlaySound+0x3c>)
 80083d6:	6838      	ldr	r0, [r7, #0]
 80083d8:	f000 f953 	bl	8008682 <storageDevice_readFileData>

  return 1;
 80083dc:	2301      	movs	r3, #1
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3708      	adds	r7, #8
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	20000394 	.word	0x20000394
 80083ec:	20000398 	.word	0x20000398
 80083f0:	0800caf8 	.word	0x0800caf8
 80083f4:	200003a0 	.word	0x200003a0

080083f8 <soundEffects_playSound>:

SoundEffects_Status_t soundEffects_playSound(SoundEffects_Config_t* pSoundEffectConfig,
    StorageDevice_Config_t* pStorageDeviceConfig)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
  gPlayedSize              = 0;
 8008402:	4b08      	ldr	r3, [pc, #32]	@ (8008424 <soundEffects_playSound+0x2c>)
 8008404:	2200      	movs	r2, #0
 8008406:	601a      	str	r2, [r3, #0]
  HAL_I2S_Transmit_DMA(pSoundEffectConfig->hi2s,(uint16_t *) gSamples, 8000);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8008410:	4905      	ldr	r1, [pc, #20]	@ (8008428 <soundEffects_playSound+0x30>)
 8008412:	4618      	mov	r0, r3
 8008414:	f7fb fc92 	bl	8003d3c <HAL_I2S_Transmit_DMA>


  return 1;
 8008418:	2301      	movs	r3, #1
}
 800841a:	4618      	mov	r0, r3
 800841c:	3708      	adds	r7, #8
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	2000039c 	.word	0x2000039c
 8008428:	200003a0 	.word	0x200003a0

0800842c <soundEffects_update>:

SoundEffects_Status_t soundEffects_update(SoundEffects_Config_t* pSoundEffectConfig,
    StorageDevice_Config_t * pStorageDeviceConfig)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]

  while(gPlayedSize < gRecordingSize)
 8008436:	e026      	b.n	8008486 <soundEffects_update+0x5a>
  {

    if(gCallbackResult == HALF_COMPLETED)
 8008438:	4b18      	ldr	r3, [pc, #96]	@ (800849c <soundEffects_update+0x70>)
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	2b01      	cmp	r3, #1
 800843e:	d109      	bne.n	8008454 <soundEffects_update+0x28>
    {
      storageDevice_readFileData(pStorageDeviceConfig, gSamples, 8000, &gFileReadSize);
 8008440:	4b17      	ldr	r3, [pc, #92]	@ (80084a0 <soundEffects_update+0x74>)
 8008442:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8008446:	4917      	ldr	r1, [pc, #92]	@ (80084a4 <soundEffects_update+0x78>)
 8008448:	6838      	ldr	r0, [r7, #0]
 800844a:	f000 f91a 	bl	8008682 <storageDevice_readFileData>

      gCallbackResult = UNKNOWN;
 800844e:	4b13      	ldr	r3, [pc, #76]	@ (800849c <soundEffects_update+0x70>)
 8008450:	2200      	movs	r2, #0
 8008452:	701a      	strb	r2, [r3, #0]
    }

    if(gCallbackResult == FULL_COMPLETED)
 8008454:	4b11      	ldr	r3, [pc, #68]	@ (800849c <soundEffects_update+0x70>)
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	2b02      	cmp	r3, #2
 800845a:	d109      	bne.n	8008470 <soundEffects_update+0x44>
    {
      storageDevice_readFileData(pStorageDeviceConfig, &gSamples[4000], 8000, &gFileReadSize);
 800845c:	4b10      	ldr	r3, [pc, #64]	@ (80084a0 <soundEffects_update+0x74>)
 800845e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8008462:	4911      	ldr	r1, [pc, #68]	@ (80084a8 <soundEffects_update+0x7c>)
 8008464:	6838      	ldr	r0, [r7, #0]
 8008466:	f000 f90c 	bl	8008682 <storageDevice_readFileData>

      gCallbackResult = UNKNOWN;
 800846a:	4b0c      	ldr	r3, [pc, #48]	@ (800849c <soundEffects_update+0x70>)
 800846c:	2200      	movs	r2, #0
 800846e:	701a      	strb	r2, [r3, #0]
    }

    if(gPlayedSize >= gRecordingSize)
 8008470:	4b0e      	ldr	r3, [pc, #56]	@ (80084ac <soundEffects_update+0x80>)
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	4b0e      	ldr	r3, [pc, #56]	@ (80084b0 <soundEffects_update+0x84>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	429a      	cmp	r2, r3
 800847a:	d304      	bcc.n	8008486 <soundEffects_update+0x5a>
    {
      HAL_I2S_DMAStop(pSoundEffectConfig->hi2s);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4618      	mov	r0, r3
 8008482:	f7fb fcff 	bl	8003e84 <HAL_I2S_DMAStop>
  while(gPlayedSize < gRecordingSize)
 8008486:	4b09      	ldr	r3, [pc, #36]	@ (80084ac <soundEffects_update+0x80>)
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	4b09      	ldr	r3, [pc, #36]	@ (80084b0 <soundEffects_update+0x84>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	429a      	cmp	r2, r3
 8008490:	d3d2      	bcc.n	8008438 <soundEffects_update+0xc>
    }
  }



return 1;
 8008492:	2301      	movs	r3, #1
}
 8008494:	4618      	mov	r0, r3
 8008496:	3708      	adds	r7, #8
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}
 800849c:	20000391 	.word	0x20000391
 80084a0:	20000394 	.word	0x20000394
 80084a4:	200003a0 	.word	0x200003a0
 80084a8:	200022e0 	.word	0x200022e0
 80084ac:	2000039c 	.word	0x2000039c
 80084b0:	20000398 	.word	0x20000398

080084b4 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  gCallbackResult = HALF_COMPLETED;
 80084bc:	4b04      	ldr	r3, [pc, #16]	@ (80084d0 <HAL_I2S_TxHalfCpltCallback+0x1c>)
 80084be:	2201      	movs	r2, #1
 80084c0:	701a      	strb	r2, [r3, #0]
}
 80084c2:	bf00      	nop
 80084c4:	370c      	adds	r7, #12
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr
 80084ce:	bf00      	nop
 80084d0:	20000391 	.word	0x20000391

080084d4 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  gCallbackResult =   FULL_COMPLETED;
 80084dc:	4b07      	ldr	r3, [pc, #28]	@ (80084fc <HAL_I2S_TxCpltCallback+0x28>)
 80084de:	2202      	movs	r2, #2
 80084e0:	701a      	strb	r2, [r3, #0]
  gPlayedSize     +=  8000;
 80084e2:	4b07      	ldr	r3, [pc, #28]	@ (8008500 <HAL_I2S_TxCpltCallback+0x2c>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f503 53fa 	add.w	r3, r3, #8000	@ 0x1f40
 80084ea:	4a05      	ldr	r2, [pc, #20]	@ (8008500 <HAL_I2S_TxCpltCallback+0x2c>)
 80084ec:	6013      	str	r3, [r2, #0]
}
 80084ee:	bf00      	nop
 80084f0:	370c      	adds	r7, #12
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr
 80084fa:	bf00      	nop
 80084fc:	20000391 	.word	0x20000391
 8008500:	2000039c 	.word	0x2000039c

08008504 <storageDevice_init>:
//Private Function Definitions
StorageDevice_Status_t storageDevice_closeFile(StorageDevice_Config_t * pConfig);


StorageDevice_Config_t* storageDevice_init(SPI_HandleTypeDef * hspi)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  StorageDevice_Config_t* pConfig = malloc(sizeof(StorageDevice_Config_t));
 800850c:	f240 407c 	movw	r0, #1148	@ 0x47c
 8008510:	f003 f90e 	bl	800b730 <malloc>
 8008514:	4603      	mov	r3, r0
 8008516:	60fb      	str	r3, [r7, #12]
  pConfig->hspi = hspi;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	605a      	str	r2, [r3, #4]

//  storageDevice_demountDrive(pConfig);

  storageDevice_mountDrive(pConfig);
 800851e:	68f8      	ldr	r0, [r7, #12]
 8008520:	f000 f806 	bl	8008530 <storageDevice_mountDrive>

  return pConfig;
 8008524:	68fb      	ldr	r3, [r7, #12]
}
 8008526:	4618      	mov	r0, r3
 8008528:	3710      	adds	r7, #16
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
	...

08008530 <storageDevice_mountDrive>:
  return isSuccess;

}

StorageDevice_Status_t storageDevice_mountDrive(StorageDevice_Config_t * pConfig)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  StorageDevice_Status_t isSuccess = true;
 8008538:	2301      	movs	r3, #1
 800853a:	73fb      	strb	r3, [r7, #15]

  //Recommended delay while SD Card Boots
  HAL_Delay(100);
 800853c:	2064      	movs	r0, #100	@ 0x64
 800853e:	f7f9 f85d 	bl	80015fc <HAL_Delay>

  pConfig->fres = f_mount(&pConfig->FatFs, "", 1); //1=mount now
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	3308      	adds	r3, #8
 8008546:	2201      	movs	r2, #1
 8008548:	4922      	ldr	r1, [pc, #136]	@ (80085d4 <storageDevice_mountDrive+0xa4>)
 800854a:	4618      	mov	r0, r3
 800854c:	f002 fa96 	bl	800aa7c <f_mount>
 8008550:	4603      	mov	r3, r0
 8008552:	461a      	mov	r2, r3
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f883 2468 	strb.w	r2, [r3, #1128]	@ 0x468
  if (pConfig->fres != FR_OK) {
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f893 3468 	ldrb.w	r3, [r3, #1128]	@ 0x468
 8008560:	2b00      	cmp	r3, #0
 8008562:	d001      	beq.n	8008568 <storageDevice_mountDrive+0x38>
    isSuccess = 0;
 8008564:	2300      	movs	r3, #0
 8008566:	73fb      	strb	r3, [r7, #15]
  //while(1);
  }

  pConfig->fres = f_getfree("", &pConfig->free_clusters, &pConfig->getFreeFs);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f203 416c 	addw	r1, r3, #1132	@ 0x46c
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 8008574:	461a      	mov	r2, r3
 8008576:	4817      	ldr	r0, [pc, #92]	@ (80085d4 <storageDevice_mountDrive+0xa4>)
 8008578:	f002 ffc8 	bl	800b50c <f_getfree>
 800857c:	4603      	mov	r3, r0
 800857e:	461a      	mov	r2, r3
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f883 2468 	strb.w	r2, [r3, #1128]	@ 0x468
  if (pConfig->fres != FR_OK) {
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f893 3468 	ldrb.w	r3, [r3, #1128]	@ 0x468
 800858c:	2b00      	cmp	r3, #0
 800858e:	d001      	beq.n	8008594 <storageDevice_mountDrive+0x64>
    isSuccess = 0;
 8008590:	2300      	movs	r3, #0
 8008592:	73fb      	strb	r3, [r7, #15]
  //while(1);
  }

  pConfig->total_sectors = (pConfig->getFreeFs->n_fatent - 2) * pConfig->getFreeFs->csize;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 3478 	ldr.w	r3, [r3, #1144]	@ 0x478
 800859a:	695b      	ldr	r3, [r3, #20]
 800859c:	3b02      	subs	r3, #2
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	f8d2 2478 	ldr.w	r2, [r2, #1144]	@ 0x478
 80085a4:	8952      	ldrh	r2, [r2, #10]
 80085a6:	fb03 f202 	mul.w	r2, r3, r2
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8c3 2474 	str.w	r2, [r3, #1140]	@ 0x474
  pConfig->free_sectors = pConfig->free_clusters * pConfig->getFreeFs->csize;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 346c 	ldr.w	r3, [r3, #1132]	@ 0x46c
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	f8d2 2478 	ldr.w	r2, [r2, #1144]	@ 0x478
 80085bc:	8952      	ldrh	r2, [r2, #10]
 80085be:	fb03 f202 	mul.w	r2, r3, r2
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8c3 2470 	str.w	r2, [r3, #1136]	@ 0x470

  return isSuccess;
 80085c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	0800cb08 	.word	0x0800cb08

080085d8 <storageDevice_openFile>:
  }
  return isSuccess;
}

StorageDevice_Status_t storageDevice_openFile(StorageDevice_Config_t * pConfig, TCHAR* const filename, BYTE mode)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b086      	sub	sp, #24
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	4613      	mov	r3, r2
 80085e4:	71fb      	strb	r3, [r7, #7]
  StorageDevice_Status_t isSuccess = true;
 80085e6:	2301      	movs	r3, #1
 80085e8:	75fb      	strb	r3, [r7, #23]

  pConfig->fres = f_open(&pConfig->fil, filename, mode);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 80085f0:	79fa      	ldrb	r2, [r7, #7]
 80085f2:	68b9      	ldr	r1, [r7, #8]
 80085f4:	4618      	mov	r0, r3
 80085f6:	f002 fa87 	bl	800ab08 <f_open>
 80085fa:	4603      	mov	r3, r0
 80085fc:	461a      	mov	r2, r3
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f883 2468 	strb.w	r2, [r3, #1128]	@ 0x468
  if (pConfig->fres != FR_OK) {
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f893 3468 	ldrb.w	r3, [r3, #1128]	@ 0x468
 800860a:	2b00      	cmp	r3, #0
 800860c:	d001      	beq.n	8008612 <storageDevice_openFile+0x3a>
    isSuccess = false;
 800860e:	2300      	movs	r3, #0
 8008610:	75fb      	strb	r3, [r7, #23]
  //while(1);
  }

  return isSuccess;
 8008612:	7dfb      	ldrb	r3, [r7, #23]
}
 8008614:	4618      	mov	r0, r3
 8008616:	3718      	adds	r7, #24
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <storageDevice_readWavDataSize>:
  return isSuccess;
}

StorageDevice_Status_t storageDevice_readWavDataSize(StorageDevice_Config_t * pConfig, const char* const filename,
    uint32_t* pRecordingSize, uint32_t* pPlayedSize)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b086      	sub	sp, #24
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	607a      	str	r2, [r7, #4]
 8008628:	603b      	str	r3, [r7, #0]
  StorageDevice_Status_t isSuccess = false;
 800862a:	2300      	movs	r3, #0
 800862c:	75fb      	strb	r3, [r7, #23]

  isSuccess = storageDevice_openFile(pConfig, (TCHAR*)filename, FA_READ);
 800862e:	2201      	movs	r2, #1
 8008630:	68b9      	ldr	r1, [r7, #8]
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	f7ff ffd0 	bl	80085d8 <storageDevice_openFile>
 8008638:	4603      	mov	r3, r0
 800863a:	75fb      	strb	r3, [r7, #23]

  pConfig->fres = f_lseek(&pConfig->fil, 40);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8008642:	2128      	movs	r1, #40	@ 0x28
 8008644:	4618      	mov	r0, r3
 8008646:	f002 fd58 	bl	800b0fa <f_lseek>
 800864a:	4603      	mov	r3, r0
 800864c:	461a      	mov	r2, r3
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f883 2468 	strb.w	r2, [r3, #1128]	@ 0x468

  pConfig->fres = f_read(&pConfig->fil, pRecordingSize, 4, (UINT *) pPlayedSize);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f503 700e 	add.w	r0, r3, #568	@ 0x238
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	2204      	movs	r2, #4
 800865e:	6879      	ldr	r1, [r7, #4]
 8008660:	f002 fc0c 	bl	800ae7c <f_read>
 8008664:	4603      	mov	r3, r0
 8008666:	461a      	mov	r2, r3
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f883 2468 	strb.w	r2, [r3, #1128]	@ 0x468

  *pRecordingSize /= 2;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	085a      	lsrs	r2, r3, #1
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	601a      	str	r2, [r3, #0]

  return isSuccess;
 8008678:	7dfb      	ldrb	r3, [r7, #23]
}
 800867a:	4618      	mov	r0, r3
 800867c:	3718      	adds	r7, #24
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}

08008682 <storageDevice_readFileData>:

StorageDevice_Status_t storageDevice_readFileData(StorageDevice_Config_t * pConfig, uint16_t* dataBuffer,
    uint32_t bytesToRead, uint32_t* pBytesRead)
{
 8008682:	b580      	push	{r7, lr}
 8008684:	b086      	sub	sp, #24
 8008686:	af00      	add	r7, sp, #0
 8008688:	60f8      	str	r0, [r7, #12]
 800868a:	60b9      	str	r1, [r7, #8]
 800868c:	607a      	str	r2, [r7, #4]
 800868e:	603b      	str	r3, [r7, #0]
  StorageDevice_Status_t isSuccess = false;
 8008690:	2300      	movs	r3, #0
 8008692:	75fb      	strb	r3, [r7, #23]

  pConfig->fres = f_read(&pConfig->fil, dataBuffer, (UINT) bytesToRead, (UINT *) pBytesRead);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f503 700e 	add.w	r0, r3, #568	@ 0x238
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	68b9      	ldr	r1, [r7, #8]
 80086a0:	f002 fbec 	bl	800ae7c <f_read>
 80086a4:	4603      	mov	r3, r0
 80086a6:	461a      	mov	r2, r3
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f883 2468 	strb.w	r2, [r3, #1128]	@ 0x468

  return isSuccess;
 80086ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3718      	adds	r7, #24
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <timeCircuit_control_init>:

} TimeCircuit_Control_Config;

TimeCircuit_Control_Config_t* timeCircuit_control_init(I2C_HandleTypeDef* const hi2c, RTC_HandleTypeDef* hrtc,
    SPI_HandleTypeDef* hspi, I2S_HandleTypeDef* hi2s)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b086      	sub	sp, #24
 80086bc:	af00      	add	r7, sp, #0
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	607a      	str	r2, [r7, #4]
 80086c4:	603b      	str	r3, [r7, #0]
  TimeCircuit_Control_Config_t* pConfig = malloc(sizeof(TimeCircuit_Control_Config_t));
 80086c6:	2050      	movs	r0, #80	@ 0x50
 80086c8:	f003 f832 	bl	800b730 <malloc>
 80086cc:	4603      	mov	r3, r0
 80086ce:	617b      	str	r3, [r7, #20]
  pConfig->hi2c = hi2c;
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	68fa      	ldr	r2, [r7, #12]
 80086d4:	601a      	str	r2, [r3, #0]
  pConfig->hrtc = hrtc;
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	68ba      	ldr	r2, [r7, #8]
 80086da:	605a      	str	r2, [r3, #4]
  pConfig->hspi = hspi;
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	609a      	str	r2, [r3, #8]
  pConfig->hi2s = hi2s;
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	683a      	ldr	r2, [r7, #0]
 80086e6:	60da      	str	r2, [r3, #12]

  //Initialise the time circuit displays
  pConfig->pDestinationTime  = dateTime_display_init(hi2c, DESTINATION_DISPLAY_I2C_ADDRESS);
 80086e8:	2171      	movs	r1, #113	@ 0x71
 80086ea:	68f8      	ldr	r0, [r7, #12]
 80086ec:	f7ff f8ac 	bl	8007848 <dateTime_display_init>
 80086f0:	4602      	mov	r2, r0
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	611a      	str	r2, [r3, #16]
  pConfig->pPresentTime      = dateTime_display_init(hi2c, PRESENT_DISPLAY_I2C_ADDRESS);
 80086f6:	2172      	movs	r1, #114	@ 0x72
 80086f8:	68f8      	ldr	r0, [r7, #12]
 80086fa:	f7ff f8a5 	bl	8007848 <dateTime_display_init>
 80086fe:	4602      	mov	r2, r0
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	615a      	str	r2, [r3, #20]
  pConfig->pLastDepartedTime = dateTime_display_init(hi2c, DEPARTED_DISPLAY_I2C_ADDRESS);
 8008704:	2174      	movs	r1, #116	@ 0x74
 8008706:	68f8      	ldr	r0, [r7, #12]
 8008708:	f7ff f89e 	bl	8007848 <dateTime_display_init>
 800870c:	4602      	mov	r2, r0
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	619a      	str	r2, [r3, #24]

  //Initialise the time circuit keypad
  pConfig->pTimeCircuitKeypad = keypad3x4w_init(gKeypadPinConfig);
 8008712:	4815      	ldr	r0, [pc, #84]	@ (8008768 <timeCircuit_control_init+0xb0>)
 8008714:	f7fe ffed 	bl	80076f2 <keypad3x4w_init>
 8008718:	4602      	mov	r2, r0
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	61da      	str	r2, [r3, #28]

  //Initialise SD Card
  pConfig->pStorageDeviceConfig = storageDevice_init(hspi);
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f7ff fef0 	bl	8008504 <storageDevice_init>
 8008724:	4602      	mov	r2, r0
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	649a      	str	r2, [r3, #72]	@ 0x48

  //Set displays to last stored values or defaults
  timeCircuit_control_updateStartUpDateTimes(pConfig);
 800872a:	6978      	ldr	r0, [r7, #20]
 800872c:	f000 f9dc 	bl	8008ae8 <timeCircuit_control_updateStartUpDateTimes>

  //Update display with retrieved date times
  timeCircuit_control_updateDisplays(pConfig);
 8008730:	6978      	ldr	r0, [r7, #20]
 8008732:	f000 f891 	bl	8008858 <timeCircuit_control_updateDisplays>

  //Update RTC with retrieved present date time
  timeCircuit_control_setRtcDateTime(pConfig);
 8008736:	6978      	ldr	r0, [r7, #20]
 8008738:	f000 f957 	bl	80089ea <timeCircuit_control_setRtcDateTime>

  //Initialise Sound Effects
  pConfig->pSoundEffectConfig = soundEffects_init(hi2s, MUTE_SWITCH_GPIO_PORT, MUTE_SWITCH_PIN);
 800873c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008740:	490a      	ldr	r1, [pc, #40]	@ (800876c <timeCircuit_control_init+0xb4>)
 8008742:	6838      	ldr	r0, [r7, #0]
 8008744:	f7ff fe1e 	bl	8008384 <soundEffects_init>
 8008748:	4602      	mov	r2, r0
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	64da      	str	r2, [r3, #76]	@ 0x4c
  soundEffects_initPlaySound(pConfig->pSoundEffectConfig, pConfig->pStorageDeviceConfig);
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008756:	4619      	mov	r1, r3
 8008758:	4610      	mov	r0, r2
 800875a:	f7ff fe2d 	bl	80083b8 <soundEffects_initPlaySound>

  return pConfig;
 800875e:	697b      	ldr	r3, [r7, #20]
}
 8008760:	4618      	mov	r0, r3
 8008762:	3718      	adds	r7, #24
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}
 8008768:	0800cc54 	.word	0x0800cc54
 800876c:	40020800 	.word	0x40020800

08008770 <timeCircuit_control_clearDisplays>:
  free (pConfig);
  return 1;
}

TimeCircuit_Control_Status_t timeCircuit_control_clearDisplays(TimeCircuit_Control_Config_t* const pConfig)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = 1;
 8008778:	2301      	movs	r3, #1
 800877a:	73fb      	strb	r3, [r7, #15]

  isSuccess &= dateTime_clearDisplay(pConfig->pDestinationTime);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	4618      	mov	r0, r3
 8008782:	f7ff fa6c 	bl	8007c5e <dateTime_clearDisplay>
 8008786:	4603      	mov	r3, r0
 8008788:	461a      	mov	r2, r3
 800878a:	7bfb      	ldrb	r3, [r7, #15]
 800878c:	4013      	ands	r3, r2
 800878e:	2b00      	cmp	r3, #0
 8008790:	bf14      	ite	ne
 8008792:	2301      	movne	r3, #1
 8008794:	2300      	moveq	r3, #0
 8008796:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_clearDisplay(pConfig->pPresentTime);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	695b      	ldr	r3, [r3, #20]
 800879c:	4618      	mov	r0, r3
 800879e:	f7ff fa5e 	bl	8007c5e <dateTime_clearDisplay>
 80087a2:	4603      	mov	r3, r0
 80087a4:	461a      	mov	r2, r3
 80087a6:	7bfb      	ldrb	r3, [r7, #15]
 80087a8:	4013      	ands	r3, r2
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	bf14      	ite	ne
 80087ae:	2301      	movne	r3, #1
 80087b0:	2300      	moveq	r3, #0
 80087b2:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_clearDisplay(pConfig->pLastDepartedTime);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	699b      	ldr	r3, [r3, #24]
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7ff fa50 	bl	8007c5e <dateTime_clearDisplay>
 80087be:	4603      	mov	r3, r0
 80087c0:	461a      	mov	r2, r3
 80087c2:	7bfb      	ldrb	r3, [r7, #15]
 80087c4:	4013      	ands	r3, r2
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	bf14      	ite	ne
 80087ca:	2301      	movne	r3, #1
 80087cc:	2300      	moveq	r3, #0
 80087ce:	73fb      	strb	r3, [r7, #15]

  return isSuccess;
 80087d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
	...

080087dc <timeCircuit_control_setDefaultDateTimes>:

TimeCircuit_Control_Status_t timeCircuit_control_setDefaultDateTimes(TimeCircuit_Control_Config_t* const pConfig)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = 1;
 80087e4:	2301      	movs	r3, #1
 80087e6:	73fb      	strb	r3, [r7, #15]

  isSuccess &= dateTime_setDisplayData(pConfig->pDestinationTime, gDefaultDestinationTime);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	691b      	ldr	r3, [r3, #16]
 80087ec:	4917      	ldr	r1, [pc, #92]	@ (800884c <timeCircuit_control_setDefaultDateTimes+0x70>)
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7ff f974 	bl	8007adc <dateTime_setDisplayData>
 80087f4:	4603      	mov	r3, r0
 80087f6:	461a      	mov	r2, r3
 80087f8:	7bfb      	ldrb	r3, [r7, #15]
 80087fa:	4013      	ands	r3, r2
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	bf14      	ite	ne
 8008800:	2301      	movne	r3, #1
 8008802:	2300      	moveq	r3, #0
 8008804:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_setDisplayData(pConfig->pPresentTime, gDefaultPresentTime);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	695b      	ldr	r3, [r3, #20]
 800880a:	4911      	ldr	r1, [pc, #68]	@ (8008850 <timeCircuit_control_setDefaultDateTimes+0x74>)
 800880c:	4618      	mov	r0, r3
 800880e:	f7ff f965 	bl	8007adc <dateTime_setDisplayData>
 8008812:	4603      	mov	r3, r0
 8008814:	461a      	mov	r2, r3
 8008816:	7bfb      	ldrb	r3, [r7, #15]
 8008818:	4013      	ands	r3, r2
 800881a:	2b00      	cmp	r3, #0
 800881c:	bf14      	ite	ne
 800881e:	2301      	movne	r3, #1
 8008820:	2300      	moveq	r3, #0
 8008822:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_setDisplayData(pConfig->pLastDepartedTime, gDefaultLastDepartedTime);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	699b      	ldr	r3, [r3, #24]
 8008828:	490a      	ldr	r1, [pc, #40]	@ (8008854 <timeCircuit_control_setDefaultDateTimes+0x78>)
 800882a:	4618      	mov	r0, r3
 800882c:	f7ff f956 	bl	8007adc <dateTime_setDisplayData>
 8008830:	4603      	mov	r3, r0
 8008832:	461a      	mov	r2, r3
 8008834:	7bfb      	ldrb	r3, [r7, #15]
 8008836:	4013      	ands	r3, r2
 8008838:	2b00      	cmp	r3, #0
 800883a:	bf14      	ite	ne
 800883c:	2301      	movne	r3, #1
 800883e:	2300      	moveq	r3, #0
 8008840:	73fb      	strb	r3, [r7, #15]

  return isSuccess;
 8008842:	7bfb      	ldrb	r3, [r7, #15]
}
 8008844:	4618      	mov	r0, r3
 8008846:	3710      	adds	r7, #16
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}
 800884c:	0800cc04 	.word	0x0800cc04
 8008850:	0800cc10 	.word	0x0800cc10
 8008854:	0800cc1c 	.word	0x0800cc1c

08008858 <timeCircuit_control_updateDisplays>:

TimeCircuit_Control_Status_t timeCircuit_control_updateDisplays(TimeCircuit_Control_Config_t* const pConfig)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = false;
 8008860:	2300      	movs	r3, #0
 8008862:	73fb      	strb	r3, [r7, #15]

  isSuccess = dateTime_updateDisplay(pConfig->pDestinationTime);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	691b      	ldr	r3, [r3, #16]
 8008868:	4618      	mov	r0, r3
 800886a:	f7ff fcdf 	bl	800822c <dateTime_updateDisplay>
 800886e:	4603      	mov	r3, r0
 8008870:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_updateDisplay(pConfig->pPresentTime);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	695b      	ldr	r3, [r3, #20]
 8008876:	4618      	mov	r0, r3
 8008878:	f7ff fcd8 	bl	800822c <dateTime_updateDisplay>
 800887c:	4603      	mov	r3, r0
 800887e:	461a      	mov	r2, r3
 8008880:	7bfb      	ldrb	r3, [r7, #15]
 8008882:	4013      	ands	r3, r2
 8008884:	2b00      	cmp	r3, #0
 8008886:	bf14      	ite	ne
 8008888:	2301      	movne	r3, #1
 800888a:	2300      	moveq	r3, #0
 800888c:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_updateDisplay(pConfig->pLastDepartedTime);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	699b      	ldr	r3, [r3, #24]
 8008892:	4618      	mov	r0, r3
 8008894:	f7ff fcca 	bl	800822c <dateTime_updateDisplay>
 8008898:	4603      	mov	r3, r0
 800889a:	461a      	mov	r2, r3
 800889c:	7bfb      	ldrb	r3, [r7, #15]
 800889e:	4013      	ands	r3, r2
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	bf14      	ite	ne
 80088a4:	2301      	movne	r3, #1
 80088a6:	2300      	moveq	r3, #0
 80088a8:	73fb      	strb	r3, [r7, #15]

  return isSuccess;
 80088aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3710      	adds	r7, #16
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <timeCircuit_control_checkButtonActivation>:

TimeCircuit_Control_Status_t timeCircuit_control_checkButtonActivation(const bool* const isbuttonActivated,
    bool* hasButtonActivated, uint32_t* previousTimeMS)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b086      	sub	sp, #24
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	60f8      	str	r0, [r7, #12]
 80088bc:	60b9      	str	r1, [r7, #8]
 80088be:	607a      	str	r2, [r7, #4]
  TimeCircuit_Control_Status_t hasStateChanged = 0;
 80088c0:	2300      	movs	r3, #0
 80088c2:	75fb      	strb	r3, [r7, #23]
  uint32_t currentTimeMS = HAL_GetTick();
 80088c4:	f7f8 fe8e 	bl	80015e4 <HAL_GetTick>
 80088c8:	6138      	str	r0, [r7, #16]

  //Verify that the button state hasn't changed
  if (*isbuttonActivated != *hasButtonActivated)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	781a      	ldrb	r2, [r3, #0]
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d00e      	beq.n	80088f4 <timeCircuit_control_checkButtonActivation+0x40>
  {
    //Filter out false positive button activations
    if ((currentTimeMS - *previousTimeMS) > BUTTON_DEBOUNCE_TIME_MS)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	693a      	ldr	r2, [r7, #16]
 80088dc:	1ad3      	subs	r3, r2, r3
 80088de:	2b64      	cmp	r3, #100	@ 0x64
 80088e0:	d908      	bls.n	80088f4 <timeCircuit_control_checkButtonActivation+0x40>
    {
      *previousTimeMS = currentTimeMS;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	693a      	ldr	r2, [r7, #16]
 80088e6:	601a      	str	r2, [r3, #0]
      hasStateChanged = true;
 80088e8:	2301      	movs	r3, #1
 80088ea:	75fb      	strb	r3, [r7, #23]
      *hasButtonActivated = *isbuttonActivated;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	781a      	ldrb	r2, [r3, #0]
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	701a      	strb	r2, [r3, #0]
    }
  }
  return hasStateChanged;
 80088f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3718      	adds	r7, #24
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
	...

08008900 <timeCircuit_control_readInputDateTime>:

TimeCircuit_Control_Status_t timeCircuit_control_readInputDateTime(TimeCircuit_Control_Config_t * const pConfig)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = 1;
 8008908:	2301      	movs	r3, #1
 800890a:	73fb      	strb	r3, [r7, #15]
  bool isButtonActivated                  = false;
 800890c:	2300      	movs	r3, #0
 800890e:	737b      	strb	r3, [r7, #13]
  bool hasButtonStateChanged              = false;
 8008910:	2300      	movs	r3, #0
 8008912:	73bb      	strb	r3, [r7, #14]

  static bool hasButtonActivated          = false;
  static uint32_t previousTime            = 0;

  isButtonActivated  = keypad3x4w_readKeypad(pConfig->pTimeCircuitKeypad, &pConfig->keypadInputValue);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	69da      	ldr	r2, [r3, #28]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	3344      	adds	r3, #68	@ 0x44
 800891c:	4619      	mov	r1, r3
 800891e:	4610      	mov	r0, r2
 8008920:	f7fe ff28 	bl	8007774 <keypad3x4w_readKeypad>
 8008924:	4603      	mov	r3, r0
 8008926:	737b      	strb	r3, [r7, #13]
  hasButtonStateChanged = timeCircuit_control_checkButtonActivation(&isButtonActivated, &hasButtonActivated,
 8008928:	f107 030d 	add.w	r3, r7, #13
 800892c:	4a16      	ldr	r2, [pc, #88]	@ (8008988 <timeCircuit_control_readInputDateTime+0x88>)
 800892e:	4917      	ldr	r1, [pc, #92]	@ (800898c <timeCircuit_control_readInputDateTime+0x8c>)
 8008930:	4618      	mov	r0, r3
 8008932:	f7ff ffbf 	bl	80088b4 <timeCircuit_control_checkButtonActivation>
 8008936:	4603      	mov	r3, r0
 8008938:	73bb      	strb	r3, [r7, #14]
        &previousTime);

  if ((hasButtonStateChanged == true) && (isButtonActivated == true))
 800893a:	7bbb      	ldrb	r3, [r7, #14]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d015      	beq.n	800896c <timeCircuit_control_readInputDateTime+0x6c>
 8008940:	7b7b      	ldrb	r3, [r7, #13]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d012      	beq.n	800896c <timeCircuit_control_readInputDateTime+0x6c>
  {
    pConfig->keypadInput[pConfig->keypadInputCount] = pConfig->keypadInputValue;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800894c:	4619      	mov	r1, r3
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	440b      	add	r3, r1
 8008958:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    pConfig->keypadInputCount++;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008962:	3301      	adds	r3, #1
 8008964:	b2da      	uxtb	r2, r3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  if (pConfig->keypadInputCount >= 12)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008972:	2b0b      	cmp	r3, #11
 8008974:	d903      	bls.n	800897e <timeCircuit_control_readInputDateTime+0x7e>
  {
    pConfig->keypadInputCount = 0;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  return isSuccess;
 800897e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008980:	4618      	mov	r0, r3
 8008982:	3710      	adds	r7, #16
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}
 8008988:	20004224 	.word	0x20004224
 800898c:	20004220 	.word	0x20004220

08008990 <timeCircuit_control_getRtcDateTime>:

TimeCircuit_Control_Status_t timeCircuit_control_getRtcDateTime(TimeCircuit_Control_Config_t * const pConfig)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = 1;
 8008998:	2301      	movs	r3, #1
 800899a:	73fb      	strb	r3, [r7, #15]

  //Retrieve RTC Date Time Data
  isSuccess &= HAL_RTC_GetTime(pConfig->hrtc, &pConfig->hRtcTime, RTC_FORMAT_BIN);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6858      	ldr	r0, [r3, #4]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	3320      	adds	r3, #32
 80089a4:	2200      	movs	r2, #0
 80089a6:	4619      	mov	r1, r3
 80089a8:	f7fc ff21 	bl	80057ee <HAL_RTC_GetTime>
 80089ac:	4603      	mov	r3, r0
 80089ae:	461a      	mov	r2, r3
 80089b0:	7bfb      	ldrb	r3, [r7, #15]
 80089b2:	4013      	ands	r3, r2
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	bf14      	ite	ne
 80089b8:	2301      	movne	r3, #1
 80089ba:	2300      	moveq	r3, #0
 80089bc:	73fb      	strb	r3, [r7, #15]
  isSuccess &= HAL_RTC_GetDate(pConfig->hrtc, &pConfig->hRtcDate, RTC_FORMAT_BIN);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6858      	ldr	r0, [r3, #4]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	3334      	adds	r3, #52	@ 0x34
 80089c6:	2200      	movs	r2, #0
 80089c8:	4619      	mov	r1, r3
 80089ca:	f7fc fff2 	bl	80059b2 <HAL_RTC_GetDate>
 80089ce:	4603      	mov	r3, r0
 80089d0:	461a      	mov	r2, r3
 80089d2:	7bfb      	ldrb	r3, [r7, #15]
 80089d4:	4013      	ands	r3, r2
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	bf14      	ite	ne
 80089da:	2301      	movne	r3, #1
 80089dc:	2300      	moveq	r3, #0
 80089de:	73fb      	strb	r3, [r7, #15]

  return isSuccess;
 80089e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3710      	adds	r7, #16
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}

080089ea <timeCircuit_control_setRtcDateTime>:

TimeCircuit_Control_Status_t timeCircuit_control_setRtcDateTime(TimeCircuit_Control_Config_t * const pConfig)
{
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b084      	sub	sp, #16
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = 1;
 80089f2:	2301      	movs	r3, #1
 80089f4:	73fb      	strb	r3, [r7, #15]

  //Retrieve default RTC date time data
  isSuccess &= timeCircuit_control_getRtcDateTime(pConfig);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f7ff ffca 	bl	8008990 <timeCircuit_control_getRtcDateTime>
 80089fc:	4603      	mov	r3, r0
 80089fe:	461a      	mov	r2, r3
 8008a00:	7bfb      	ldrb	r3, [r7, #15]
 8008a02:	4013      	ands	r3, r2
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	bf14      	ite	ne
 8008a08:	2301      	movne	r3, #1
 8008a0a:	2300      	moveq	r3, #0
 8008a0c:	73fb      	strb	r3, [r7, #15]

  //Get present date time for RTC date time
  isSuccess &= dateTime_getRtcDateTimeData(pConfig->pPresentTime, &pConfig->hRtcDate, &pConfig->hRtcTime);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6958      	ldr	r0, [r3, #20]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	3320      	adds	r3, #32
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	f7ff f8aa 	bl	8007b76 <dateTime_getRtcDateTimeData>
 8008a22:	4603      	mov	r3, r0
 8008a24:	461a      	mov	r2, r3
 8008a26:	7bfb      	ldrb	r3, [r7, #15]
 8008a28:	4013      	ands	r3, r2
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	bf14      	ite	ne
 8008a2e:	2301      	movne	r3, #1
 8008a30:	2300      	moveq	r3, #0
 8008a32:	73fb      	strb	r3, [r7, #15]

  //Set RTC with present time data
  isSuccess &= HAL_RTC_SetTime(pConfig->hrtc, &pConfig->hRtcTime, RTC_FORMAT_BIN);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6858      	ldr	r0, [r3, #4]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	3320      	adds	r3, #32
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	4619      	mov	r1, r3
 8008a40:	f7fc fe3b 	bl	80056ba <HAL_RTC_SetTime>
 8008a44:	4603      	mov	r3, r0
 8008a46:	461a      	mov	r2, r3
 8008a48:	7bfb      	ldrb	r3, [r7, #15]
 8008a4a:	4013      	ands	r3, r2
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	bf14      	ite	ne
 8008a50:	2301      	movne	r3, #1
 8008a52:	2300      	moveq	r3, #0
 8008a54:	73fb      	strb	r3, [r7, #15]
  isSuccess &= HAL_RTC_SetDate(pConfig->hrtc, &pConfig->hRtcDate, RTC_FORMAT_BIN);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6858      	ldr	r0, [r3, #4]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	3334      	adds	r3, #52	@ 0x34
 8008a5e:	2200      	movs	r2, #0
 8008a60:	4619      	mov	r1, r3
 8008a62:	f7fc ff22 	bl	80058aa <HAL_RTC_SetDate>
 8008a66:	4603      	mov	r3, r0
 8008a68:	461a      	mov	r2, r3
 8008a6a:	7bfb      	ldrb	r3, [r7, #15]
 8008a6c:	4013      	ands	r3, r2
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	bf14      	ite	ne
 8008a72:	2301      	movne	r3, #1
 8008a74:	2300      	moveq	r3, #0
 8008a76:	73fb      	strb	r3, [r7, #15]

  return isSuccess;
 8008a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <timeCircuit_control_saveDateTimes>:

TimeCircuit_Control_Status_t timeCircuit_control_saveDateTimes(TimeCircuit_Control_Config_t * const pConfig)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b090      	sub	sp, #64	@ 0x40
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = false;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

  char    writeBuf[(MAXIMUM_DATETIME_INPUT_CHARS * 3) + 1];
  uint8_t bufferCount = 0;
 8008a90:	2300      	movs	r3, #0
 8008a92:	75fb      	strb	r3, [r7, #23]
  DateTime_Display_Config_t* pDateTimeDisplays[] = {pConfig->pDestinationTime, pConfig->pPresentTime, pConfig->pLastDepartedTime};
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	691b      	ldr	r3, [r3, #16]
 8008a98:	60bb      	str	r3, [r7, #8]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	695b      	ldr	r3, [r3, #20]
 8008a9e:	60fb      	str	r3, [r7, #12]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	699b      	ldr	r3, [r3, #24]
 8008aa4:	613b      	str	r3, [r7, #16]

    //Prepare buffer with datetimes
  for (uint8_t displayCount = 0; displayCount < 3; displayCount++)
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8008aac:	e012      	b.n	8008ad4 <timeCircuit_control_saveDateTimes+0x52>
  {
    dateTime_convertDateTimeToChar(pDateTimeDisplays[displayCount], writeBuf, sizeof(writeBuf), &bufferCount);
 8008aae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	3340      	adds	r3, #64	@ 0x40
 8008ab6:	443b      	add	r3, r7
 8008ab8:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8008abc:	f107 0317 	add.w	r3, r7, #23
 8008ac0:	f107 0118 	add.w	r1, r7, #24
 8008ac4:	2225      	movs	r2, #37	@ 0x25
 8008ac6:	f7ff fb0b 	bl	80080e0 <dateTime_convertDateTimeToChar>
  for (uint8_t displayCount = 0; displayCount < 3; displayCount++)
 8008aca:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008ace:	3301      	adds	r3, #1
 8008ad0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8008ad4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	d9e8      	bls.n	8008aae <timeCircuit_control_saveDateTimes+0x2c>
  }

  //Write datetime data to SD card
  // isSuccess = storageDevice_writeFile(pConfig->pStorageDeviceConfig, writeBuf, sizeof(writeBuf), gStoredDateTimeFileName);

  return isSuccess;
 8008adc:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3740      	adds	r7, #64	@ 0x40
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <timeCircuit_control_updateStartUpDateTimes>:

TimeCircuit_Control_Status_t timeCircuit_control_updateStartUpDateTimes(TimeCircuit_Control_Config_t * const pConfig)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b092      	sub	sp, #72	@ 0x48
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = true;
 8008af0:	2301      	movs	r3, #1
 8008af2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

  //char* pReadBuf = malloc(MAXIMUM_DATETIME_INPUT_CHARS * 3);
  char pReadBuf[(MAXIMUM_DATETIME_INPUT_CHARS * 3) + 1];
  uint8_t pStartUpDateTime[MAXIMUM_DATETIME_INPUT_CHARS];

  DateTime_Display_Config_t* pDateTimeDisplays[] = {pConfig->pDestinationTime, pConfig->pPresentTime, pConfig->pLastDepartedTime};
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	60bb      	str	r3, [r7, #8]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	695b      	ldr	r3, [r3, #20]
 8008b00:	60fb      	str	r3, [r7, #12]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	699b      	ldr	r3, [r3, #24]
 8008b06:	613b      	str	r3, [r7, #16]

  //Read datetime data from SD card
 // isSuccess = storageDevice_readFile(pConfig->pStorageDeviceConfig, pReadBuf, sizeof(pReadBuf), gStoredDateTimeFileName);

  //Check read was successful, if not set to default values
  if(isSuccess)
 8008b08:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d05b      	beq.n	8008bc8 <timeCircuit_control_updateStartUpDateTimes+0xe0>
  {
    for (uint8_t displayCount = 0; displayCount < 3; displayCount++)
 8008b10:	2300      	movs	r3, #0
 8008b12:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8008b16:	e03e      	b.n	8008b96 <timeCircuit_control_updateStartUpDateTimes+0xae>
    {
      for (uint8_t characterCount = 0; characterCount < MAXIMUM_DATETIME_INPUT_CHARS; characterCount++)
 8008b18:	2300      	movs	r3, #0
 8008b1a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8008b1e:	e019      	b.n	8008b54 <timeCircuit_control_updateStartUpDateTimes+0x6c>
      {
        pStartUpDateTime[characterCount] = pReadBuf[characterCount + (displayCount * MAXIMUM_DATETIME_INPUT_CHARS)] - '0';
 8008b20:	f897 1045 	ldrb.w	r1, [r7, #69]	@ 0x45
 8008b24:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8008b28:	4613      	mov	r3, r2
 8008b2a:	005b      	lsls	r3, r3, #1
 8008b2c:	4413      	add	r3, r2
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	440b      	add	r3, r1
 8008b32:	3348      	adds	r3, #72	@ 0x48
 8008b34:	443b      	add	r3, r7
 8008b36:	f813 2c28 	ldrb.w	r2, [r3, #-40]
 8008b3a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8008b3e:	3a30      	subs	r2, #48	@ 0x30
 8008b40:	b2d2      	uxtb	r2, r2
 8008b42:	3348      	adds	r3, #72	@ 0x48
 8008b44:	443b      	add	r3, r7
 8008b46:	f803 2c34 	strb.w	r2, [r3, #-52]
      for (uint8_t characterCount = 0; characterCount < MAXIMUM_DATETIME_INPUT_CHARS; characterCount++)
 8008b4a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8008b4e:	3301      	adds	r3, #1
 8008b50:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8008b54:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8008b58:	2b0b      	cmp	r3, #11
 8008b5a:	d9e1      	bls.n	8008b20 <timeCircuit_control_updateStartUpDateTimes+0x38>
      }
      isSuccess &= dateTime_setDisplayData((pDateTimeDisplays[displayCount]), pStartUpDateTime);
 8008b5c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	3348      	adds	r3, #72	@ 0x48
 8008b64:	443b      	add	r3, r7
 8008b66:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8008b6a:	f107 0214 	add.w	r2, r7, #20
 8008b6e:	4611      	mov	r1, r2
 8008b70:	4618      	mov	r0, r3
 8008b72:	f7fe ffb3 	bl	8007adc <dateTime_setDisplayData>
 8008b76:	4603      	mov	r3, r0
 8008b78:	461a      	mov	r2, r3
 8008b7a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008b7e:	4013      	ands	r3, r2
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	bf14      	ite	ne
 8008b84:	2301      	movne	r3, #1
 8008b86:	2300      	moveq	r3, #0
 8008b88:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    for (uint8_t displayCount = 0; displayCount < 3; displayCount++)
 8008b8c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008b90:	3301      	adds	r3, #1
 8008b92:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8008b96:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008b9a:	2b02      	cmp	r3, #2
 8008b9c:	d9bc      	bls.n	8008b18 <timeCircuit_control_updateStartUpDateTimes+0x30>
    }
      if (isSuccess == false)
 8008b9e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008ba2:	f083 0301 	eor.w	r3, r3, #1
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d00d      	beq.n	8008bc8 <timeCircuit_control_updateStartUpDateTimes+0xe0>
      {
      isSuccess &= timeCircuit_control_updateDisplays(pConfig);
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f7ff fe53 	bl	8008858 <timeCircuit_control_updateDisplays>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008bba:	4013      	ands	r3, r2
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	bf14      	ite	ne
 8008bc0:	2301      	movne	r3, #1
 8008bc2:	2300      	moveq	r3, #0
 8008bc4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
  }

  //Set default values if SD Card values not read or invalid
  if (isSuccess == false)
 8008bc8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008bcc:	f083 0301 	eor.w	r3, r3, #1
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d00d      	beq.n	8008bf2 <timeCircuit_control_updateStartUpDateTimes+0x10a>
  {
    isSuccess &= timeCircuit_control_setDefaultDateTimes(pConfig);
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f7ff fe00 	bl	80087dc <timeCircuit_control_setDefaultDateTimes>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	461a      	mov	r2, r3
 8008be0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008be4:	4013      	ands	r3, r2
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	bf14      	ite	ne
 8008bea:	2301      	movne	r3, #1
 8008bec:	2300      	moveq	r3, #0
 8008bee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  }


  //free(pReadBuf);
  return isSuccess;
 8008bf2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3748      	adds	r7, #72	@ 0x48
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
	...

08008c00 <timeCircuit_control_updatePresentDateTime>:

  return isSuccess;
}

TimeCircuit_Control_Status_t timeCircuit_control_updatePresentDateTime(TimeCircuit_Control_Config_t * const pConfig)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = 1;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	73fb      	strb	r3, [r7, #15]
  static uint8_t previousMinute = 0;
  isSuccess &= HAL_RTC_GetTime(pConfig->hrtc, &pConfig->hRtcTime, RTC_FORMAT_BIN);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6858      	ldr	r0, [r3, #4]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	3320      	adds	r3, #32
 8008c14:	2200      	movs	r2, #0
 8008c16:	4619      	mov	r1, r3
 8008c18:	f7fc fde9 	bl	80057ee <HAL_RTC_GetTime>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	461a      	mov	r2, r3
 8008c20:	7bfb      	ldrb	r3, [r7, #15]
 8008c22:	4013      	ands	r3, r2
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	bf14      	ite	ne
 8008c28:	2301      	movne	r3, #1
 8008c2a:	2300      	moveq	r3, #0
 8008c2c:	73fb      	strb	r3, [r7, #15]

  if (pConfig->hRtcTime.Minutes != previousMinute)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8008c34:	4b23      	ldr	r3, [pc, #140]	@ (8008cc4 <timeCircuit_control_updatePresentDateTime+0xc4>)
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d03d      	beq.n	8008cb8 <timeCircuit_control_updatePresentDateTime+0xb8>
  {
    //Retrieve RTC date time data
    isSuccess &= timeCircuit_control_getRtcDateTime(pConfig);
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f7ff fea7 	bl	8008990 <timeCircuit_control_getRtcDateTime>
 8008c42:	4603      	mov	r3, r0
 8008c44:	461a      	mov	r2, r3
 8008c46:	7bfb      	ldrb	r3, [r7, #15]
 8008c48:	4013      	ands	r3, r2
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	bf14      	ite	ne
 8008c4e:	2301      	movne	r3, #1
 8008c50:	2300      	moveq	r3, #0
 8008c52:	73fb      	strb	r3, [r7, #15]

    //Set present date time to RTC date time
    isSuccess &= dateTime_setRtcDateTimeData(pConfig->pPresentTime, &pConfig->hRtcDate, &pConfig->hRtcTime);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6958      	ldr	r0, [r3, #20]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	3320      	adds	r3, #32
 8008c62:	461a      	mov	r2, r3
 8008c64:	f7fe ffb9 	bl	8007bda <dateTime_setRtcDateTimeData>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	7bfb      	ldrb	r3, [r7, #15]
 8008c6e:	4013      	ands	r3, r2
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	bf14      	ite	ne
 8008c74:	2301      	movne	r3, #1
 8008c76:	2300      	moveq	r3, #0
 8008c78:	73fb      	strb	r3, [r7, #15]

    //Update present display
    isSuccess &= dateTime_updateDisplay(pConfig->pPresentTime);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	695b      	ldr	r3, [r3, #20]
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7ff fad4 	bl	800822c <dateTime_updateDisplay>
 8008c84:	4603      	mov	r3, r0
 8008c86:	461a      	mov	r2, r3
 8008c88:	7bfb      	ldrb	r3, [r7, #15]
 8008c8a:	4013      	ands	r3, r2
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	bf14      	ite	ne
 8008c90:	2301      	movne	r3, #1
 8008c92:	2300      	moveq	r3, #0
 8008c94:	73fb      	strb	r3, [r7, #15]

    //Store new date time
    isSuccess &= timeCircuit_control_saveDateTimes(pConfig);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f7ff fef3 	bl	8008a82 <timeCircuit_control_saveDateTimes>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	7bfb      	ldrb	r3, [r7, #15]
 8008ca2:	4013      	ands	r3, r2
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	bf14      	ite	ne
 8008ca8:	2301      	movne	r3, #1
 8008caa:	2300      	moveq	r3, #0
 8008cac:	73fb      	strb	r3, [r7, #15]

    previousMinute = pConfig->hRtcTime.Minutes;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8008cb4:	4b03      	ldr	r3, [pc, #12]	@ (8008cc4 <timeCircuit_control_updatePresentDateTime+0xc4>)
 8008cb6:	701a      	strb	r2, [r3, #0]
  }

  return isSuccess;
 8008cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3710      	adds	r7, #16
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	20004228 	.word	0x20004228

08008cc8 <timeCircuit_control_updateTimeTravelDateTimes>:

TimeCircuit_Control_Status_t timeCircuit_control_updateTimeTravelDateTimes(TimeCircuit_Control_Config_t* const pConfig)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess  = true;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	73fb      	strb	r3, [r7, #15]
  bool isButtonActivated                  = false;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	737b      	strb	r3, [r7, #13]
  bool hasButtonStateChanged              = false;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	73bb      	strb	r3, [r7, #14]

  static bool hasButtonActivated          = false;
  static uint32_t previousTime            = 0;

  isButtonActivated  = HAL_GPIO_ReadPin(TIME_TRAVEL_SWITCH_GPIO_PORT, TIME_TRAVEL_SWITCH_PIN);
 8008cdc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008ce0:	483d      	ldr	r0, [pc, #244]	@ (8008dd8 <timeCircuit_control_updateTimeTravelDateTimes+0x110>)
 8008ce2:	f7f9 fe9b 	bl	8002a1c <HAL_GPIO_ReadPin>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	bf14      	ite	ne
 8008cec:	2301      	movne	r3, #1
 8008cee:	2300      	moveq	r3, #0
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	737b      	strb	r3, [r7, #13]
  hasButtonStateChanged = timeCircuit_control_checkButtonActivation(&isButtonActivated, &hasButtonActivated,
 8008cf4:	f107 030d 	add.w	r3, r7, #13
 8008cf8:	4a38      	ldr	r2, [pc, #224]	@ (8008ddc <timeCircuit_control_updateTimeTravelDateTimes+0x114>)
 8008cfa:	4939      	ldr	r1, [pc, #228]	@ (8008de0 <timeCircuit_control_updateTimeTravelDateTimes+0x118>)
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f7ff fdd9 	bl	80088b4 <timeCircuit_control_checkButtonActivation>
 8008d02:	4603      	mov	r3, r0
 8008d04:	73bb      	strb	r3, [r7, #14]
        &previousTime);

  if (hasButtonStateChanged == true)
 8008d06:	7bbb      	ldrb	r3, [r7, #14]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d05f      	beq.n	8008dcc <timeCircuit_control_updateTimeTravelDateTimes+0x104>
  {
    if (isButtonActivated != true )
 8008d0c:	7b7b      	ldrb	r3, [r7, #13]
 8008d0e:	f083 0301 	eor.w	r3, r3, #1
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d059      	beq.n	8008dcc <timeCircuit_control_updateTimeTravelDateTimes+0x104>
    {
      //Clear displays
      isSuccess &= timeCircuit_control_clearDisplays(pConfig);
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f7ff fd29 	bl	8008770 <timeCircuit_control_clearDisplays>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	461a      	mov	r2, r3
 8008d22:	7bfb      	ldrb	r3, [r7, #15]
 8008d24:	4013      	ands	r3, r2
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	bf14      	ite	ne
 8008d2a:	2301      	movne	r3, #1
 8008d2c:	2300      	moveq	r3, #0
 8008d2e:	73fb      	strb	r3, [r7, #15]

      //Play Sound
      soundEffects_playSound(pConfig->pSoundEffectConfig, pConfig->pStorageDeviceConfig);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d38:	4619      	mov	r1, r3
 8008d3a:	4610      	mov	r0, r2
 8008d3c:	f7ff fb5c 	bl	80083f8 <soundEffects_playSound>
      //HAL_Delay(700);

      //Copy last time departed time data to present time
      isSuccess &= dateTime_copyDateTime(pConfig->pLastDepartedTime, pConfig->pPresentTime);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	699a      	ldr	r2, [r3, #24]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	695b      	ldr	r3, [r3, #20]
 8008d48:	4619      	mov	r1, r3
 8008d4a:	4610      	mov	r0, r2
 8008d4c:	f7fe ff72 	bl	8007c34 <dateTime_copyDateTime>
 8008d50:	4603      	mov	r3, r0
 8008d52:	461a      	mov	r2, r3
 8008d54:	7bfb      	ldrb	r3, [r7, #15]
 8008d56:	4013      	ands	r3, r2
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	bf14      	ite	ne
 8008d5c:	2301      	movne	r3, #1
 8008d5e:	2300      	moveq	r3, #0
 8008d60:	73fb      	strb	r3, [r7, #15]

      //Copy present time data to destination time
      isSuccess &= dateTime_copyDateTime(pConfig->pPresentTime, pConfig->pDestinationTime);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	695a      	ldr	r2, [r3, #20]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	691b      	ldr	r3, [r3, #16]
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	4610      	mov	r0, r2
 8008d6e:	f7fe ff61 	bl	8007c34 <dateTime_copyDateTime>
 8008d72:	4603      	mov	r3, r0
 8008d74:	461a      	mov	r2, r3
 8008d76:	7bfb      	ldrb	r3, [r7, #15]
 8008d78:	4013      	ands	r3, r2
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	bf14      	ite	ne
 8008d7e:	2301      	movne	r3, #1
 8008d80:	2300      	moveq	r3, #0
 8008d82:	73fb      	strb	r3, [r7, #15]

      //Update displays with new date times
      isSuccess &= timeCircuit_control_updateDisplays(pConfig);
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f7ff fd67 	bl	8008858 <timeCircuit_control_updateDisplays>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	7bfb      	ldrb	r3, [r7, #15]
 8008d90:	4013      	ands	r3, r2
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	bf14      	ite	ne
 8008d96:	2301      	movne	r3, #1
 8008d98:	2300      	moveq	r3, #0
 8008d9a:	73fb      	strb	r3, [r7, #15]

      //Set the RTC with new present time
      isSuccess &= timeCircuit_control_setRtcDateTime(pConfig);
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f7ff fe24 	bl	80089ea <timeCircuit_control_setRtcDateTime>
 8008da2:	4603      	mov	r3, r0
 8008da4:	461a      	mov	r2, r3
 8008da6:	7bfb      	ldrb	r3, [r7, #15]
 8008da8:	4013      	ands	r3, r2
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	bf14      	ite	ne
 8008dae:	2301      	movne	r3, #1
 8008db0:	2300      	moveq	r3, #0
 8008db2:	73fb      	strb	r3, [r7, #15]

      //Store new date time
      isSuccess &= timeCircuit_control_saveDateTimes(pConfig);
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f7ff fe64 	bl	8008a82 <timeCircuit_control_saveDateTimes>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	7bfb      	ldrb	r3, [r7, #15]
 8008dc0:	4013      	ands	r3, r2
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	bf14      	ite	ne
 8008dc6:	2301      	movne	r3, #1
 8008dc8:	2300      	moveq	r3, #0
 8008dca:	73fb      	strb	r3, [r7, #15]
    }
  }
  return isSuccess;
 8008dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3710      	adds	r7, #16
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	40020800 	.word	0x40020800
 8008ddc:	2000422c 	.word	0x2000422c
 8008de0:	20004229 	.word	0x20004229

08008de4 <timeCircuit_control_updateDestinationDateTime>:

TimeCircuit_Control_Status_t timeCircuit_control_updateDestinationDateTime(TimeCircuit_Control_Config_t* const pConfig)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess  = true;
 8008dec:	2301      	movs	r3, #1
 8008dee:	73fb      	strb	r3, [r7, #15]
  bool isButtonActivated                  = false;
 8008df0:	2300      	movs	r3, #0
 8008df2:	737b      	strb	r3, [r7, #13]
  bool hasButtonStateChanged              = false;
 8008df4:	2300      	movs	r3, #0
 8008df6:	73bb      	strb	r3, [r7, #14]

  static bool hasButtonActivated          = false;
  static uint32_t previousTime            = 0;

  isButtonActivated  = !HAL_GPIO_ReadPin(KEYPAD_ENTER_SWITCH_GPIO_PORT, KEYPAD_ENTER_SWITCH_PIN);
 8008df8:	2102      	movs	r1, #2
 8008dfa:	4840      	ldr	r0, [pc, #256]	@ (8008efc <timeCircuit_control_updateDestinationDateTime+0x118>)
 8008dfc:	f7f9 fe0e 	bl	8002a1c <HAL_GPIO_ReadPin>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	bf0c      	ite	eq
 8008e06:	2301      	moveq	r3, #1
 8008e08:	2300      	movne	r3, #0
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	737b      	strb	r3, [r7, #13]
  hasButtonStateChanged = timeCircuit_control_checkButtonActivation(&isButtonActivated, &hasButtonActivated,
 8008e0e:	f107 030d 	add.w	r3, r7, #13
 8008e12:	4a3b      	ldr	r2, [pc, #236]	@ (8008f00 <timeCircuit_control_updateDestinationDateTime+0x11c>)
 8008e14:	493b      	ldr	r1, [pc, #236]	@ (8008f04 <timeCircuit_control_updateDestinationDateTime+0x120>)
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7ff fd4c 	bl	80088b4 <timeCircuit_control_checkButtonActivation>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	73bb      	strb	r3, [r7, #14]
      &previousTime);

  if (hasButtonStateChanged == true)
 8008e20:	7bbb      	ldrb	r3, [r7, #14]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d065      	beq.n	8008ef2 <timeCircuit_control_updateDestinationDateTime+0x10e>
  {
    if (isButtonActivated == true )
 8008e26:	7b7b      	ldrb	r3, [r7, #13]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d05d      	beq.n	8008ee8 <timeCircuit_control_updateDestinationDateTime+0x104>
    {
      //Activate Keypad White Indicator
      HAL_GPIO_WritePin(KEYPAD_WHITE_INDICATOR_GPIO_PORT, KEYPAD_WHITE_INDICATOR_PIN, GPIO_PIN_SET);
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	2108      	movs	r1, #8
 8008e30:	4835      	ldr	r0, [pc, #212]	@ (8008f08 <timeCircuit_control_updateDestinationDateTime+0x124>)
 8008e32:	f7f9 fe0b 	bl	8002a4c <HAL_GPIO_WritePin>
      //Clear destination date time
      isSuccess &= dateTime_clearDisplay(pConfig->pDestinationTime);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f7fe ff0f 	bl	8007c5e <dateTime_clearDisplay>
 8008e40:	4603      	mov	r3, r0
 8008e42:	461a      	mov	r2, r3
 8008e44:	7bfb      	ldrb	r3, [r7, #15]
 8008e46:	4013      	ands	r3, r2
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	bf14      	ite	ne
 8008e4c:	2301      	movne	r3, #1
 8008e4e:	2300      	moveq	r3, #0
 8008e50:	73fb      	strb	r3, [r7, #15]
      //Update date time if a valid entry has submitted
      if (dateTime_setDisplayData(pConfig->pDestinationTime,pConfig->keypadInput))
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	691a      	ldr	r2, [r3, #16]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	3338      	adds	r3, #56	@ 0x38
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	4610      	mov	r0, r2
 8008e5e:	f7fe fe3d 	bl	8007adc <dateTime_setDisplayData>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d02e      	beq.n	8008ec6 <timeCircuit_control_updateDestinationDateTime+0xe2>
      {
        //Play sound

        soundEffects_playSound(pConfig->pSoundEffectConfig, pConfig->pStorageDeviceConfig);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e70:	4619      	mov	r1, r3
 8008e72:	4610      	mov	r0, r2
 8008e74:	f7ff fac0 	bl	80083f8 <soundEffects_playSound>
        isSuccess &= soundEffects_update(pConfig->pSoundEffectConfig, pConfig->pStorageDeviceConfig);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e80:	4619      	mov	r1, r3
 8008e82:	4610      	mov	r0, r2
 8008e84:	f7ff fad2 	bl	800842c <soundEffects_update>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	7bfb      	ldrb	r3, [r7, #15]
 8008e8e:	4013      	ands	r3, r2
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	bf14      	ite	ne
 8008e94:	2301      	movne	r3, #1
 8008e96:	2300      	moveq	r3, #0
 8008e98:	73fb      	strb	r3, [r7, #15]
        soundEffects_initPlaySound(pConfig->pSoundEffectConfig, pConfig->pStorageDeviceConfig);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	4610      	mov	r0, r2
 8008ea6:	f7ff fa87 	bl	80083b8 <soundEffects_initPlaySound>

        isSuccess &= dateTime_updateDisplay(pConfig->pDestinationTime);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	691b      	ldr	r3, [r3, #16]
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7ff f9bc 	bl	800822c <dateTime_updateDisplay>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	7bfb      	ldrb	r3, [r7, #15]
 8008eba:	4013      	ands	r3, r2
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	bf14      	ite	ne
 8008ec0:	2301      	movne	r3, #1
 8008ec2:	2300      	moveq	r3, #0
 8008ec4:	73fb      	strb	r3, [r7, #15]
      }
      pConfig->keypadInputCount = 0;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      //Save new date times
      isSuccess &= timeCircuit_control_saveDateTimes(pConfig);
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f7ff fdd7 	bl	8008a82 <timeCircuit_control_saveDateTimes>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	7bfb      	ldrb	r3, [r7, #15]
 8008eda:	4013      	ands	r3, r2
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	bf14      	ite	ne
 8008ee0:	2301      	movne	r3, #1
 8008ee2:	2300      	moveq	r3, #0
 8008ee4:	73fb      	strb	r3, [r7, #15]
 8008ee6:	e004      	b.n	8008ef2 <timeCircuit_control_updateDestinationDateTime+0x10e>
    }
    else
    {
      //Deactivate Keypad White Indicator
      HAL_GPIO_WritePin(KEYPAD_WHITE_INDICATOR_GPIO_PORT, KEYPAD_WHITE_INDICATOR_PIN, GPIO_PIN_RESET);
 8008ee8:	2200      	movs	r2, #0
 8008eea:	2108      	movs	r1, #8
 8008eec:	4806      	ldr	r0, [pc, #24]	@ (8008f08 <timeCircuit_control_updateDestinationDateTime+0x124>)
 8008eee:	f7f9 fdad 	bl	8002a4c <HAL_GPIO_WritePin>
    }

  }
  return isSuccess;
 8008ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3710      	adds	r7, #16
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	40020400 	.word	0x40020400
 8008f00:	20004234 	.word	0x20004234
 8008f04:	20004230 	.word	0x20004230
 8008f08:	40020000 	.word	0x40020000

08008f0c <timeCircuit_control_updateGlitch>:

TimeCircuit_Control_Status_t timeCircuit_control_updateGlitch(TimeCircuit_Control_Config_t* const pConfig)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess  = true;
 8008f14:	2301      	movs	r3, #1
 8008f16:	73fb      	strb	r3, [r7, #15]
  static uint32_t previousTime            = 0;
  static uint32_t randomFaultTime         = 0;
  static uint8_t  stateCount              = 0;

  bool bIsButtonActivated                 = false;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	737b      	strb	r3, [r7, #13]
  bool bHasButtonStateChanged              = false;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	73bb      	strb	r3, [r7, #14]

  static bool hasButtonActivated          = false;
  static uint32_t previousTimeMS          = 0;
  static uint32_t previousFaultTime       = 0;

  bIsButtonActivated  = !HAL_GPIO_ReadPin(GLITCH_SWITCH_GPIO_PORT, GLITCH_SWITCH_PIN);
 8008f20:	2120      	movs	r1, #32
 8008f22:	4864      	ldr	r0, [pc, #400]	@ (80090b4 <timeCircuit_control_updateGlitch+0x1a8>)
 8008f24:	f7f9 fd7a 	bl	8002a1c <HAL_GPIO_ReadPin>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	bf0c      	ite	eq
 8008f2e:	2301      	moveq	r3, #1
 8008f30:	2300      	movne	r3, #0
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	737b      	strb	r3, [r7, #13]
  bHasButtonStateChanged = timeCircuit_control_checkButtonActivation(&bIsButtonActivated, &hasButtonActivated,
 8008f36:	f107 030d 	add.w	r3, r7, #13
 8008f3a:	4a5f      	ldr	r2, [pc, #380]	@ (80090b8 <timeCircuit_control_updateGlitch+0x1ac>)
 8008f3c:	495f      	ldr	r1, [pc, #380]	@ (80090bc <timeCircuit_control_updateGlitch+0x1b0>)
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7ff fcb8 	bl	80088b4 <timeCircuit_control_checkButtonActivation>
 8008f44:	4603      	mov	r3, r0
 8008f46:	73bb      	strb	r3, [r7, #14]
      &previousTimeMS);

  if (bHasButtonStateChanged == true)
 8008f48:	7bbb      	ldrb	r3, [r7, #14]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d043      	beq.n	8008fd6 <timeCircuit_control_updateGlitch+0xca>
  {
    if (bIsButtonActivated == true )
 8008f4e:	7b7b      	ldrb	r3, [r7, #13]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d015      	beq.n	8008f80 <timeCircuit_control_updateGlitch+0x74>
    {
      randomFaultTime = rand() % MAXIMUM_GLITCH_RANDOM_PERIOD_MS;
 8008f54:	f002 fcaa 	bl	800b8ac <rand>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	4a59      	ldr	r2, [pc, #356]	@ (80090c0 <timeCircuit_control_updateGlitch+0x1b4>)
 8008f5c:	fb82 1203 	smull	r1, r2, r2, r3
 8008f60:	1391      	asrs	r1, r2, #14
 8008f62:	17da      	asrs	r2, r3, #31
 8008f64:	1a8a      	subs	r2, r1, r2
 8008f66:	f64e 2160 	movw	r1, #60000	@ 0xea60
 8008f6a:	fb01 f202 	mul.w	r2, r1, r2
 8008f6e:	1a9a      	subs	r2, r3, r2
 8008f70:	4b54      	ldr	r3, [pc, #336]	@ (80090c4 <timeCircuit_control_updateGlitch+0x1b8>)
 8008f72:	601a      	str	r2, [r3, #0]
      previousFaultTime = HAL_GetTick();
 8008f74:	f7f8 fb36 	bl	80015e4 <HAL_GetTick>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	4a53      	ldr	r2, [pc, #332]	@ (80090c8 <timeCircuit_control_updateGlitch+0x1bc>)
 8008f7c:	6013      	str	r3, [r2, #0]
 8008f7e:	e02a      	b.n	8008fd6 <timeCircuit_control_updateGlitch+0xca>
    }
    else
    {
      //Clear glitching display
      isSuccess &= dateTime_clearDisplay(pConfig->pDestinationTime);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	691b      	ldr	r3, [r3, #16]
 8008f84:	4618      	mov	r0, r3
 8008f86:	f7fe fe6a 	bl	8007c5e <dateTime_clearDisplay>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	7bfb      	ldrb	r3, [r7, #15]
 8008f90:	4013      	ands	r3, r2
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	bf14      	ite	ne
 8008f96:	2301      	movne	r3, #1
 8008f98:	2300      	moveq	r3, #0
 8008f9a:	73fb      	strb	r3, [r7, #15]
      HAL_Delay(500);
 8008f9c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008fa0:	f7f8 fb2c 	bl	80015fc <HAL_Delay>
      isSuccess &= dateTime_updateDisplayGlitch(pConfig->pDestinationTime, gGlitchDisplayChars);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	691b      	ldr	r3, [r3, #16]
 8008fa8:	4948      	ldr	r1, [pc, #288]	@ (80090cc <timeCircuit_control_updateGlitch+0x1c0>)
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7ff f82a 	bl	8008004 <dateTime_updateDisplayGlitch>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	7bfb      	ldrb	r3, [r7, #15]
 8008fb6:	4013      	ands	r3, r2
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	bf14      	ite	ne
 8008fbc:	2301      	movne	r3, #1
 8008fbe:	2300      	moveq	r3, #0
 8008fc0:	73fb      	strb	r3, [r7, #15]
      HAL_Delay(100);
 8008fc2:	2064      	movs	r0, #100	@ 0x64
 8008fc4:	f7f8 fb1a 	bl	80015fc <HAL_Delay>
      isSuccess = dateTime_updateDisplay(pConfig->pDestinationTime);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	691b      	ldr	r3, [r3, #16]
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f7ff f92d 	bl	800822c <dateTime_updateDisplay>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	73fb      	strb	r3, [r7, #15]

    }
  }

  if (((HAL_GetTick() - previousTime) > gGlitchTimeDelay[stateCount]) && ((HAL_GetTick() - previousFaultTime) > randomFaultTime) &&(bIsButtonActivated == true))
 8008fd6:	f7f8 fb05 	bl	80015e4 <HAL_GetTick>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	4b3c      	ldr	r3, [pc, #240]	@ (80090d0 <timeCircuit_control_updateGlitch+0x1c4>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	1ad2      	subs	r2, r2, r3
 8008fe2:	4b3c      	ldr	r3, [pc, #240]	@ (80090d4 <timeCircuit_control_updateGlitch+0x1c8>)
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	4b3b      	ldr	r3, [pc, #236]	@ (80090d8 <timeCircuit_control_updateGlitch+0x1cc>)
 8008fea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d95a      	bls.n	80090a8 <timeCircuit_control_updateGlitch+0x19c>
 8008ff2:	f7f8 faf7 	bl	80015e4 <HAL_GetTick>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	4b33      	ldr	r3, [pc, #204]	@ (80090c8 <timeCircuit_control_updateGlitch+0x1bc>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	1ad2      	subs	r2, r2, r3
 8008ffe:	4b31      	ldr	r3, [pc, #196]	@ (80090c4 <timeCircuit_control_updateGlitch+0x1b8>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	429a      	cmp	r2, r3
 8009004:	d950      	bls.n	80090a8 <timeCircuit_control_updateGlitch+0x19c>
 8009006:	7b7b      	ldrb	r3, [r7, #13]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d04d      	beq.n	80090a8 <timeCircuit_control_updateGlitch+0x19c>
  {
    switch (stateCount)
 800900c:	4b31      	ldr	r3, [pc, #196]	@ (80090d4 <timeCircuit_control_updateGlitch+0x1c8>)
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	2b02      	cmp	r3, #2
 8009012:	d031      	beq.n	8009078 <timeCircuit_control_updateGlitch+0x16c>
 8009014:	2b02      	cmp	r3, #2
 8009016:	dc42      	bgt.n	800909e <timeCircuit_control_updateGlitch+0x192>
 8009018:	2b00      	cmp	r3, #0
 800901a:	d002      	beq.n	8009022 <timeCircuit_control_updateGlitch+0x116>
 800901c:	2b01      	cmp	r3, #1
 800901e:	d015      	beq.n	800904c <timeCircuit_control_updateGlitch+0x140>
 8009020:	e03d      	b.n	800909e <timeCircuit_control_updateGlitch+0x192>
    {
      case 0:
        isSuccess &= dateTime_clearDisplay(pConfig->pDestinationTime);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	691b      	ldr	r3, [r3, #16]
 8009026:	4618      	mov	r0, r3
 8009028:	f7fe fe19 	bl	8007c5e <dateTime_clearDisplay>
 800902c:	4603      	mov	r3, r0
 800902e:	461a      	mov	r2, r3
 8009030:	7bfb      	ldrb	r3, [r7, #15]
 8009032:	4013      	ands	r3, r2
 8009034:	2b00      	cmp	r3, #0
 8009036:	bf14      	ite	ne
 8009038:	2301      	movne	r3, #1
 800903a:	2300      	moveq	r3, #0
 800903c:	73fb      	strb	r3, [r7, #15]
        stateCount++;
 800903e:	4b25      	ldr	r3, [pc, #148]	@ (80090d4 <timeCircuit_control_updateGlitch+0x1c8>)
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	3301      	adds	r3, #1
 8009044:	b2da      	uxtb	r2, r3
 8009046:	4b23      	ldr	r3, [pc, #140]	@ (80090d4 <timeCircuit_control_updateGlitch+0x1c8>)
 8009048:	701a      	strb	r2, [r3, #0]
        break;
 800904a:	e028      	b.n	800909e <timeCircuit_control_updateGlitch+0x192>
      case 1:
        isSuccess &= dateTime_updateDisplayGlitch(pConfig->pDestinationTime, gGlitchDisplayChars);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	691b      	ldr	r3, [r3, #16]
 8009050:	491e      	ldr	r1, [pc, #120]	@ (80090cc <timeCircuit_control_updateGlitch+0x1c0>)
 8009052:	4618      	mov	r0, r3
 8009054:	f7fe ffd6 	bl	8008004 <dateTime_updateDisplayGlitch>
 8009058:	4603      	mov	r3, r0
 800905a:	461a      	mov	r2, r3
 800905c:	7bfb      	ldrb	r3, [r7, #15]
 800905e:	4013      	ands	r3, r2
 8009060:	2b00      	cmp	r3, #0
 8009062:	bf14      	ite	ne
 8009064:	2301      	movne	r3, #1
 8009066:	2300      	moveq	r3, #0
 8009068:	73fb      	strb	r3, [r7, #15]
        stateCount++;
 800906a:	4b1a      	ldr	r3, [pc, #104]	@ (80090d4 <timeCircuit_control_updateGlitch+0x1c8>)
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	3301      	adds	r3, #1
 8009070:	b2da      	uxtb	r2, r3
 8009072:	4b18      	ldr	r3, [pc, #96]	@ (80090d4 <timeCircuit_control_updateGlitch+0x1c8>)
 8009074:	701a      	strb	r2, [r3, #0]
        break;
 8009076:	e012      	b.n	800909e <timeCircuit_control_updateGlitch+0x192>
      case 2:
        isSuccess &= dateTime_updateDisplayGlitch(pConfig->pDestinationTime,gGlitchDisplayDate);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	691b      	ldr	r3, [r3, #16]
 800907c:	4917      	ldr	r1, [pc, #92]	@ (80090dc <timeCircuit_control_updateGlitch+0x1d0>)
 800907e:	4618      	mov	r0, r3
 8009080:	f7fe ffc0 	bl	8008004 <dateTime_updateDisplayGlitch>
 8009084:	4603      	mov	r3, r0
 8009086:	461a      	mov	r2, r3
 8009088:	7bfb      	ldrb	r3, [r7, #15]
 800908a:	4013      	ands	r3, r2
 800908c:	2b00      	cmp	r3, #0
 800908e:	bf14      	ite	ne
 8009090:	2301      	movne	r3, #1
 8009092:	2300      	moveq	r3, #0
 8009094:	73fb      	strb	r3, [r7, #15]
        stateCount = 0;
 8009096:	4b0f      	ldr	r3, [pc, #60]	@ (80090d4 <timeCircuit_control_updateGlitch+0x1c8>)
 8009098:	2200      	movs	r2, #0
 800909a:	701a      	strb	r2, [r3, #0]
        break;
 800909c:	bf00      	nop
    }
    previousTime = HAL_GetTick();
 800909e:	f7f8 faa1 	bl	80015e4 <HAL_GetTick>
 80090a2:	4603      	mov	r3, r0
 80090a4:	4a0a      	ldr	r2, [pc, #40]	@ (80090d0 <timeCircuit_control_updateGlitch+0x1c4>)
 80090a6:	6013      	str	r3, [r2, #0]
  }


  return isSuccess;
 80090a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3710      	adds	r7, #16
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop
 80090b4:	40020400 	.word	0x40020400
 80090b8:	2000423c 	.word	0x2000423c
 80090bc:	20004238 	.word	0x20004238
 80090c0:	45e7b273 	.word	0x45e7b273
 80090c4:	20004240 	.word	0x20004240
 80090c8:	20004244 	.word	0x20004244
 80090cc:	0800cc38 	.word	0x0800cc38
 80090d0:	20004248 	.word	0x20004248
 80090d4:	2000424c 	.word	0x2000424c
 80090d8:	0800cc48 	.word	0x0800cc48
 80090dc:	0800cc28 	.word	0x0800cc28

080090e0 <timeCircuit_control_update>:

TimeCircuit_Control_Status_t timeCircuit_control_update(TimeCircuit_Control_Config_t * const pConfig)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = 1;
 80090e8:	2301      	movs	r3, #1
 80090ea:	73fb      	strb	r3, [r7, #15]

  //Update date times after time travel simulation event
  isSuccess &= timeCircuit_control_updateTimeTravelDateTimes(pConfig);
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f7ff fdeb 	bl	8008cc8 <timeCircuit_control_updateTimeTravelDateTimes>
 80090f2:	4603      	mov	r3, r0
 80090f4:	461a      	mov	r2, r3
 80090f6:	7bfb      	ldrb	r3, [r7, #15]
 80090f8:	4013      	ands	r3, r2
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	bf14      	ite	ne
 80090fe:	2301      	movne	r3, #1
 8009100:	2300      	moveq	r3, #0
 8009102:	73fb      	strb	r3, [r7, #15]

  //Read user input date time
  isSuccess &= timeCircuit_control_readInputDateTime(pConfig);
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f7ff fbfb 	bl	8008900 <timeCircuit_control_readInputDateTime>
 800910a:	4603      	mov	r3, r0
 800910c:	461a      	mov	r2, r3
 800910e:	7bfb      	ldrb	r3, [r7, #15]
 8009110:	4013      	ands	r3, r2
 8009112:	2b00      	cmp	r3, #0
 8009114:	bf14      	ite	ne
 8009116:	2301      	movne	r3, #1
 8009118:	2300      	moveq	r3, #0
 800911a:	73fb      	strb	r3, [r7, #15]

  //Update Destination Time from user input
  isSuccess &= timeCircuit_control_updateDestinationDateTime(pConfig);
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f7ff fe61 	bl	8008de4 <timeCircuit_control_updateDestinationDateTime>
 8009122:	4603      	mov	r3, r0
 8009124:	461a      	mov	r2, r3
 8009126:	7bfb      	ldrb	r3, [r7, #15]
 8009128:	4013      	ands	r3, r2
 800912a:	2b00      	cmp	r3, #0
 800912c:	bf14      	ite	ne
 800912e:	2301      	movne	r3, #1
 8009130:	2300      	moveq	r3, #0
 8009132:	73fb      	strb	r3, [r7, #15]

  //Update time circuit displays colons
  isSuccess &= dateTime_toggleTimeColon(pConfig->pDestinationTime, pConfig->pPresentTime, pConfig->pLastDepartedTime);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6918      	ldr	r0, [r3, #16]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6959      	ldr	r1, [r3, #20]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	699b      	ldr	r3, [r3, #24]
 8009140:	461a      	mov	r2, r3
 8009142:	f7fe fe2b 	bl	8007d9c <dateTime_toggleTimeColon>
 8009146:	4603      	mov	r3, r0
 8009148:	461a      	mov	r2, r3
 800914a:	7bfb      	ldrb	r3, [r7, #15]
 800914c:	4013      	ands	r3, r2
 800914e:	2b00      	cmp	r3, #0
 8009150:	bf14      	ite	ne
 8009152:	2301      	movne	r3, #1
 8009154:	2300      	moveq	r3, #0
 8009156:	73fb      	strb	r3, [r7, #15]

  //Update Present Time from RTC
  isSuccess &= timeCircuit_control_updatePresentDateTime(pConfig);
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f7ff fd51 	bl	8008c00 <timeCircuit_control_updatePresentDateTime>
 800915e:	4603      	mov	r3, r0
 8009160:	461a      	mov	r2, r3
 8009162:	7bfb      	ldrb	r3, [r7, #15]
 8009164:	4013      	ands	r3, r2
 8009166:	2b00      	cmp	r3, #0
 8009168:	bf14      	ite	ne
 800916a:	2301      	movne	r3, #1
 800916c:	2300      	moveq	r3, #0
 800916e:	73fb      	strb	r3, [r7, #15]

  //Update Glitch
  isSuccess &= timeCircuit_control_updateGlitch(pConfig);
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f7ff fecb 	bl	8008f0c <timeCircuit_control_updateGlitch>
 8009176:	4603      	mov	r3, r0
 8009178:	461a      	mov	r2, r3
 800917a:	7bfb      	ldrb	r3, [r7, #15]
 800917c:	4013      	ands	r3, r2
 800917e:	2b00      	cmp	r3, #0
 8009180:	bf14      	ite	ne
 8009182:	2301      	movne	r3, #1
 8009184:	2300      	moveq	r3, #0
 8009186:	73fb      	strb	r3, [r7, #15]

  //Update Sound Effects
  //isSuccess &= soundEffects_update(pConfig->pSoundEffectConfig, pConfig->pStorageDeviceConfig);

  return isSuccess;
 8009188:	7bfb      	ldrb	r3, [r7, #15]
}
 800918a:	4618      	mov	r0, r3
 800918c:	3710      	adds	r7, #16
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
	...

08009194 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	4603      	mov	r3, r0
 800919c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800919e:	79fb      	ldrb	r3, [r7, #7]
 80091a0:	4a08      	ldr	r2, [pc, #32]	@ (80091c4 <disk_status+0x30>)
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	4413      	add	r3, r2
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	79fa      	ldrb	r2, [r7, #7]
 80091ac:	4905      	ldr	r1, [pc, #20]	@ (80091c4 <disk_status+0x30>)
 80091ae:	440a      	add	r2, r1
 80091b0:	7a12      	ldrb	r2, [r2, #8]
 80091b2:	4610      	mov	r0, r2
 80091b4:	4798      	blx	r3
 80091b6:	4603      	mov	r3, r0
 80091b8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80091ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3710      	adds	r7, #16
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}
 80091c4:	20004278 	.word	0x20004278

080091c8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	4603      	mov	r3, r0
 80091d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80091d2:	2300      	movs	r3, #0
 80091d4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80091d6:	79fb      	ldrb	r3, [r7, #7]
 80091d8:	4a0e      	ldr	r2, [pc, #56]	@ (8009214 <disk_initialize+0x4c>)
 80091da:	5cd3      	ldrb	r3, [r2, r3]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d114      	bne.n	800920a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80091e0:	79fb      	ldrb	r3, [r7, #7]
 80091e2:	4a0c      	ldr	r2, [pc, #48]	@ (8009214 <disk_initialize+0x4c>)
 80091e4:	009b      	lsls	r3, r3, #2
 80091e6:	4413      	add	r3, r2
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	79fa      	ldrb	r2, [r7, #7]
 80091ee:	4909      	ldr	r1, [pc, #36]	@ (8009214 <disk_initialize+0x4c>)
 80091f0:	440a      	add	r2, r1
 80091f2:	7a12      	ldrb	r2, [r2, #8]
 80091f4:	4610      	mov	r0, r2
 80091f6:	4798      	blx	r3
 80091f8:	4603      	mov	r3, r0
 80091fa:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80091fc:	7bfb      	ldrb	r3, [r7, #15]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d103      	bne.n	800920a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8009202:	79fb      	ldrb	r3, [r7, #7]
 8009204:	4a03      	ldr	r2, [pc, #12]	@ (8009214 <disk_initialize+0x4c>)
 8009206:	2101      	movs	r1, #1
 8009208:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800920a:	7bfb      	ldrb	r3, [r7, #15]
}
 800920c:	4618      	mov	r0, r3
 800920e:	3710      	adds	r7, #16
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}
 8009214:	20004278 	.word	0x20004278

08009218 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009218:	b590      	push	{r4, r7, lr}
 800921a:	b087      	sub	sp, #28
 800921c:	af00      	add	r7, sp, #0
 800921e:	60b9      	str	r1, [r7, #8]
 8009220:	607a      	str	r2, [r7, #4]
 8009222:	603b      	str	r3, [r7, #0]
 8009224:	4603      	mov	r3, r0
 8009226:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009228:	7bfb      	ldrb	r3, [r7, #15]
 800922a:	4a0a      	ldr	r2, [pc, #40]	@ (8009254 <disk_read+0x3c>)
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	4413      	add	r3, r2
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	689c      	ldr	r4, [r3, #8]
 8009234:	7bfb      	ldrb	r3, [r7, #15]
 8009236:	4a07      	ldr	r2, [pc, #28]	@ (8009254 <disk_read+0x3c>)
 8009238:	4413      	add	r3, r2
 800923a:	7a18      	ldrb	r0, [r3, #8]
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	68b9      	ldr	r1, [r7, #8]
 8009242:	47a0      	blx	r4
 8009244:	4603      	mov	r3, r0
 8009246:	75fb      	strb	r3, [r7, #23]
  return res;
 8009248:	7dfb      	ldrb	r3, [r7, #23]
}
 800924a:	4618      	mov	r0, r3
 800924c:	371c      	adds	r7, #28
 800924e:	46bd      	mov	sp, r7
 8009250:	bd90      	pop	{r4, r7, pc}
 8009252:	bf00      	nop
 8009254:	20004278 	.word	0x20004278

08009258 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009258:	b590      	push	{r4, r7, lr}
 800925a:	b087      	sub	sp, #28
 800925c:	af00      	add	r7, sp, #0
 800925e:	60b9      	str	r1, [r7, #8]
 8009260:	607a      	str	r2, [r7, #4]
 8009262:	603b      	str	r3, [r7, #0]
 8009264:	4603      	mov	r3, r0
 8009266:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009268:	7bfb      	ldrb	r3, [r7, #15]
 800926a:	4a0a      	ldr	r2, [pc, #40]	@ (8009294 <disk_write+0x3c>)
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	4413      	add	r3, r2
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	68dc      	ldr	r4, [r3, #12]
 8009274:	7bfb      	ldrb	r3, [r7, #15]
 8009276:	4a07      	ldr	r2, [pc, #28]	@ (8009294 <disk_write+0x3c>)
 8009278:	4413      	add	r3, r2
 800927a:	7a18      	ldrb	r0, [r3, #8]
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	68b9      	ldr	r1, [r7, #8]
 8009282:	47a0      	blx	r4
 8009284:	4603      	mov	r3, r0
 8009286:	75fb      	strb	r3, [r7, #23]
  return res;
 8009288:	7dfb      	ldrb	r3, [r7, #23]
}
 800928a:	4618      	mov	r0, r3
 800928c:	371c      	adds	r7, #28
 800928e:	46bd      	mov	sp, r7
 8009290:	bd90      	pop	{r4, r7, pc}
 8009292:	bf00      	nop
 8009294:	20004278 	.word	0x20004278

08009298 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009298:	b480      	push	{r7}
 800929a:	b085      	sub	sp, #20
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	3301      	adds	r3, #1
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80092a8:	89fb      	ldrh	r3, [r7, #14]
 80092aa:	021b      	lsls	r3, r3, #8
 80092ac:	b21a      	sxth	r2, r3
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	b21b      	sxth	r3, r3
 80092b4:	4313      	orrs	r3, r2
 80092b6:	b21b      	sxth	r3, r3
 80092b8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80092ba:	89fb      	ldrh	r3, [r7, #14]
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3714      	adds	r7, #20
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr

080092c8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80092c8:	b480      	push	{r7}
 80092ca:	b085      	sub	sp, #20
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	3303      	adds	r3, #3
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	021b      	lsls	r3, r3, #8
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	3202      	adds	r2, #2
 80092e0:	7812      	ldrb	r2, [r2, #0]
 80092e2:	4313      	orrs	r3, r2
 80092e4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	021b      	lsls	r3, r3, #8
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	3201      	adds	r2, #1
 80092ee:	7812      	ldrb	r2, [r2, #0]
 80092f0:	4313      	orrs	r3, r2
 80092f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	021b      	lsls	r3, r3, #8
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	7812      	ldrb	r2, [r2, #0]
 80092fc:	4313      	orrs	r3, r2
 80092fe:	60fb      	str	r3, [r7, #12]
	return rv;
 8009300:	68fb      	ldr	r3, [r7, #12]
}
 8009302:	4618      	mov	r0, r3
 8009304:	3714      	adds	r7, #20
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr

0800930e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800930e:	b480      	push	{r7}
 8009310:	b083      	sub	sp, #12
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	460b      	mov	r3, r1
 8009318:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	1c5a      	adds	r2, r3, #1
 800931e:	607a      	str	r2, [r7, #4]
 8009320:	887a      	ldrh	r2, [r7, #2]
 8009322:	b2d2      	uxtb	r2, r2
 8009324:	701a      	strb	r2, [r3, #0]
 8009326:	887b      	ldrh	r3, [r7, #2]
 8009328:	0a1b      	lsrs	r3, r3, #8
 800932a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	1c5a      	adds	r2, r3, #1
 8009330:	607a      	str	r2, [r7, #4]
 8009332:	887a      	ldrh	r2, [r7, #2]
 8009334:	b2d2      	uxtb	r2, r2
 8009336:	701a      	strb	r2, [r3, #0]
}
 8009338:	bf00      	nop
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	1c5a      	adds	r2, r3, #1
 8009352:	607a      	str	r2, [r7, #4]
 8009354:	683a      	ldr	r2, [r7, #0]
 8009356:	b2d2      	uxtb	r2, r2
 8009358:	701a      	strb	r2, [r3, #0]
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	0a1b      	lsrs	r3, r3, #8
 800935e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	1c5a      	adds	r2, r3, #1
 8009364:	607a      	str	r2, [r7, #4]
 8009366:	683a      	ldr	r2, [r7, #0]
 8009368:	b2d2      	uxtb	r2, r2
 800936a:	701a      	strb	r2, [r3, #0]
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	0a1b      	lsrs	r3, r3, #8
 8009370:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	1c5a      	adds	r2, r3, #1
 8009376:	607a      	str	r2, [r7, #4]
 8009378:	683a      	ldr	r2, [r7, #0]
 800937a:	b2d2      	uxtb	r2, r2
 800937c:	701a      	strb	r2, [r3, #0]
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	0a1b      	lsrs	r3, r3, #8
 8009382:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	1c5a      	adds	r2, r3, #1
 8009388:	607a      	str	r2, [r7, #4]
 800938a:	683a      	ldr	r2, [r7, #0]
 800938c:	b2d2      	uxtb	r2, r2
 800938e:	701a      	strb	r2, [r3, #0]
}
 8009390:	bf00      	nop
 8009392:	370c      	adds	r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr

0800939c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800939c:	b480      	push	{r7}
 800939e:	b087      	sub	sp, #28
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	60b9      	str	r1, [r7, #8]
 80093a6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d00d      	beq.n	80093d2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80093b6:	693a      	ldr	r2, [r7, #16]
 80093b8:	1c53      	adds	r3, r2, #1
 80093ba:	613b      	str	r3, [r7, #16]
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	1c59      	adds	r1, r3, #1
 80093c0:	6179      	str	r1, [r7, #20]
 80093c2:	7812      	ldrb	r2, [r2, #0]
 80093c4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	3b01      	subs	r3, #1
 80093ca:	607b      	str	r3, [r7, #4]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d1f1      	bne.n	80093b6 <mem_cpy+0x1a>
	}
}
 80093d2:	bf00      	nop
 80093d4:	371c      	adds	r7, #28
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr

080093de <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80093de:	b480      	push	{r7}
 80093e0:	b087      	sub	sp, #28
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	60f8      	str	r0, [r7, #12]
 80093e6:	60b9      	str	r1, [r7, #8]
 80093e8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	1c5a      	adds	r2, r3, #1
 80093f2:	617a      	str	r2, [r7, #20]
 80093f4:	68ba      	ldr	r2, [r7, #8]
 80093f6:	b2d2      	uxtb	r2, r2
 80093f8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	3b01      	subs	r3, #1
 80093fe:	607b      	str	r3, [r7, #4]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d1f3      	bne.n	80093ee <mem_set+0x10>
}
 8009406:	bf00      	nop
 8009408:	bf00      	nop
 800940a:	371c      	adds	r7, #28
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009414:	b480      	push	{r7}
 8009416:	b089      	sub	sp, #36	@ 0x24
 8009418:	af00      	add	r7, sp, #0
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	61fb      	str	r3, [r7, #28]
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009428:	2300      	movs	r3, #0
 800942a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800942c:	69fb      	ldr	r3, [r7, #28]
 800942e:	1c5a      	adds	r2, r3, #1
 8009430:	61fa      	str	r2, [r7, #28]
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	4619      	mov	r1, r3
 8009436:	69bb      	ldr	r3, [r7, #24]
 8009438:	1c5a      	adds	r2, r3, #1
 800943a:	61ba      	str	r2, [r7, #24]
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	1acb      	subs	r3, r1, r3
 8009440:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	3b01      	subs	r3, #1
 8009446:	607b      	str	r3, [r7, #4]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d002      	beq.n	8009454 <mem_cmp+0x40>
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d0eb      	beq.n	800942c <mem_cmp+0x18>

	return r;
 8009454:	697b      	ldr	r3, [r7, #20]
}
 8009456:	4618      	mov	r0, r3
 8009458:	3724      	adds	r7, #36	@ 0x24
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr

08009462 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009462:	b480      	push	{r7}
 8009464:	b083      	sub	sp, #12
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
 800946a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800946c:	e002      	b.n	8009474 <chk_chr+0x12>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	3301      	adds	r3, #1
 8009472:	607b      	str	r3, [r7, #4]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d005      	beq.n	8009488 <chk_chr+0x26>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	461a      	mov	r2, r3
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	4293      	cmp	r3, r2
 8009486:	d1f2      	bne.n	800946e <chk_chr+0xc>
	return *str;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	781b      	ldrb	r3, [r3, #0]
}
 800948c:	4618      	mov	r0, r3
 800948e:	370c      	adds	r7, #12
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009498:	b480      	push	{r7}
 800949a:	b085      	sub	sp, #20
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80094a2:	2300      	movs	r3, #0
 80094a4:	60bb      	str	r3, [r7, #8]
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	60fb      	str	r3, [r7, #12]
 80094aa:	e029      	b.n	8009500 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80094ac:	4a27      	ldr	r2, [pc, #156]	@ (800954c <chk_lock+0xb4>)
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	011b      	lsls	r3, r3, #4
 80094b2:	4413      	add	r3, r2
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d01d      	beq.n	80094f6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80094ba:	4a24      	ldr	r2, [pc, #144]	@ (800954c <chk_lock+0xb4>)
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	011b      	lsls	r3, r3, #4
 80094c0:	4413      	add	r3, r2
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d116      	bne.n	80094fa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80094cc:	4a1f      	ldr	r2, [pc, #124]	@ (800954c <chk_lock+0xb4>)
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	011b      	lsls	r3, r3, #4
 80094d2:	4413      	add	r3, r2
 80094d4:	3304      	adds	r3, #4
 80094d6:	681a      	ldr	r2, [r3, #0]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80094dc:	429a      	cmp	r2, r3
 80094de:	d10c      	bne.n	80094fa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80094e0:	4a1a      	ldr	r2, [pc, #104]	@ (800954c <chk_lock+0xb4>)
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	011b      	lsls	r3, r3, #4
 80094e6:	4413      	add	r3, r2
 80094e8:	3308      	adds	r3, #8
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d102      	bne.n	80094fa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80094f4:	e007      	b.n	8009506 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80094f6:	2301      	movs	r3, #1
 80094f8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	3301      	adds	r3, #1
 80094fe:	60fb      	str	r3, [r7, #12]
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2b01      	cmp	r3, #1
 8009504:	d9d2      	bls.n	80094ac <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2b02      	cmp	r3, #2
 800950a:	d109      	bne.n	8009520 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d102      	bne.n	8009518 <chk_lock+0x80>
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	2b02      	cmp	r3, #2
 8009516:	d101      	bne.n	800951c <chk_lock+0x84>
 8009518:	2300      	movs	r3, #0
 800951a:	e010      	b.n	800953e <chk_lock+0xa6>
 800951c:	2312      	movs	r3, #18
 800951e:	e00e      	b.n	800953e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d108      	bne.n	8009538 <chk_lock+0xa0>
 8009526:	4a09      	ldr	r2, [pc, #36]	@ (800954c <chk_lock+0xb4>)
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	011b      	lsls	r3, r3, #4
 800952c:	4413      	add	r3, r2
 800952e:	330c      	adds	r3, #12
 8009530:	881b      	ldrh	r3, [r3, #0]
 8009532:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009536:	d101      	bne.n	800953c <chk_lock+0xa4>
 8009538:	2310      	movs	r3, #16
 800953a:	e000      	b.n	800953e <chk_lock+0xa6>
 800953c:	2300      	movs	r3, #0
}
 800953e:	4618      	mov	r0, r3
 8009540:	3714      	adds	r7, #20
 8009542:	46bd      	mov	sp, r7
 8009544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009548:	4770      	bx	lr
 800954a:	bf00      	nop
 800954c:	20004258 	.word	0x20004258

08009550 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009556:	2300      	movs	r3, #0
 8009558:	607b      	str	r3, [r7, #4]
 800955a:	e002      	b.n	8009562 <enq_lock+0x12>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	3301      	adds	r3, #1
 8009560:	607b      	str	r3, [r7, #4]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2b01      	cmp	r3, #1
 8009566:	d806      	bhi.n	8009576 <enq_lock+0x26>
 8009568:	4a09      	ldr	r2, [pc, #36]	@ (8009590 <enq_lock+0x40>)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	011b      	lsls	r3, r3, #4
 800956e:	4413      	add	r3, r2
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d1f2      	bne.n	800955c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2b02      	cmp	r3, #2
 800957a:	bf14      	ite	ne
 800957c:	2301      	movne	r3, #1
 800957e:	2300      	moveq	r3, #0
 8009580:	b2db      	uxtb	r3, r3
}
 8009582:	4618      	mov	r0, r3
 8009584:	370c      	adds	r7, #12
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr
 800958e:	bf00      	nop
 8009590:	20004258 	.word	0x20004258

08009594 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009594:	b480      	push	{r7}
 8009596:	b085      	sub	sp, #20
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800959e:	2300      	movs	r3, #0
 80095a0:	60fb      	str	r3, [r7, #12]
 80095a2:	e01f      	b.n	80095e4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80095a4:	4a41      	ldr	r2, [pc, #260]	@ (80096ac <inc_lock+0x118>)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	011b      	lsls	r3, r3, #4
 80095aa:	4413      	add	r3, r2
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d113      	bne.n	80095de <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80095b6:	4a3d      	ldr	r2, [pc, #244]	@ (80096ac <inc_lock+0x118>)
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	011b      	lsls	r3, r3, #4
 80095bc:	4413      	add	r3, r2
 80095be:	3304      	adds	r3, #4
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d109      	bne.n	80095de <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80095ca:	4a38      	ldr	r2, [pc, #224]	@ (80096ac <inc_lock+0x118>)
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	011b      	lsls	r3, r3, #4
 80095d0:	4413      	add	r3, r2
 80095d2:	3308      	adds	r3, #8
 80095d4:	681a      	ldr	r2, [r3, #0]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80095da:	429a      	cmp	r2, r3
 80095dc:	d006      	beq.n	80095ec <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	3301      	adds	r3, #1
 80095e2:	60fb      	str	r3, [r7, #12]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2b01      	cmp	r3, #1
 80095e8:	d9dc      	bls.n	80095a4 <inc_lock+0x10>
 80095ea:	e000      	b.n	80095ee <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80095ec:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2b02      	cmp	r3, #2
 80095f2:	d132      	bne.n	800965a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80095f4:	2300      	movs	r3, #0
 80095f6:	60fb      	str	r3, [r7, #12]
 80095f8:	e002      	b.n	8009600 <inc_lock+0x6c>
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	3301      	adds	r3, #1
 80095fe:	60fb      	str	r3, [r7, #12]
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2b01      	cmp	r3, #1
 8009604:	d806      	bhi.n	8009614 <inc_lock+0x80>
 8009606:	4a29      	ldr	r2, [pc, #164]	@ (80096ac <inc_lock+0x118>)
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	011b      	lsls	r3, r3, #4
 800960c:	4413      	add	r3, r2
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d1f2      	bne.n	80095fa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2b02      	cmp	r3, #2
 8009618:	d101      	bne.n	800961e <inc_lock+0x8a>
 800961a:	2300      	movs	r3, #0
 800961c:	e040      	b.n	80096a0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	4922      	ldr	r1, [pc, #136]	@ (80096ac <inc_lock+0x118>)
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	011b      	lsls	r3, r3, #4
 8009628:	440b      	add	r3, r1
 800962a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	689a      	ldr	r2, [r3, #8]
 8009630:	491e      	ldr	r1, [pc, #120]	@ (80096ac <inc_lock+0x118>)
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	011b      	lsls	r3, r3, #4
 8009636:	440b      	add	r3, r1
 8009638:	3304      	adds	r3, #4
 800963a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	695a      	ldr	r2, [r3, #20]
 8009640:	491a      	ldr	r1, [pc, #104]	@ (80096ac <inc_lock+0x118>)
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	011b      	lsls	r3, r3, #4
 8009646:	440b      	add	r3, r1
 8009648:	3308      	adds	r3, #8
 800964a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800964c:	4a17      	ldr	r2, [pc, #92]	@ (80096ac <inc_lock+0x118>)
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	011b      	lsls	r3, r3, #4
 8009652:	4413      	add	r3, r2
 8009654:	330c      	adds	r3, #12
 8009656:	2200      	movs	r2, #0
 8009658:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d009      	beq.n	8009674 <inc_lock+0xe0>
 8009660:	4a12      	ldr	r2, [pc, #72]	@ (80096ac <inc_lock+0x118>)
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	011b      	lsls	r3, r3, #4
 8009666:	4413      	add	r3, r2
 8009668:	330c      	adds	r3, #12
 800966a:	881b      	ldrh	r3, [r3, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d001      	beq.n	8009674 <inc_lock+0xe0>
 8009670:	2300      	movs	r3, #0
 8009672:	e015      	b.n	80096a0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d108      	bne.n	800968c <inc_lock+0xf8>
 800967a:	4a0c      	ldr	r2, [pc, #48]	@ (80096ac <inc_lock+0x118>)
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	011b      	lsls	r3, r3, #4
 8009680:	4413      	add	r3, r2
 8009682:	330c      	adds	r3, #12
 8009684:	881b      	ldrh	r3, [r3, #0]
 8009686:	3301      	adds	r3, #1
 8009688:	b29a      	uxth	r2, r3
 800968a:	e001      	b.n	8009690 <inc_lock+0xfc>
 800968c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009690:	4906      	ldr	r1, [pc, #24]	@ (80096ac <inc_lock+0x118>)
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	011b      	lsls	r3, r3, #4
 8009696:	440b      	add	r3, r1
 8009698:	330c      	adds	r3, #12
 800969a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	3301      	adds	r3, #1
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3714      	adds	r7, #20
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr
 80096ac:	20004258 	.word	0x20004258

080096b0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b085      	sub	sp, #20
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80096b8:	2300      	movs	r3, #0
 80096ba:	60fb      	str	r3, [r7, #12]
 80096bc:	e010      	b.n	80096e0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80096be:	4a0d      	ldr	r2, [pc, #52]	@ (80096f4 <clear_lock+0x44>)
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	011b      	lsls	r3, r3, #4
 80096c4:	4413      	add	r3, r2
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d105      	bne.n	80096da <clear_lock+0x2a>
 80096ce:	4a09      	ldr	r2, [pc, #36]	@ (80096f4 <clear_lock+0x44>)
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	011b      	lsls	r3, r3, #4
 80096d4:	4413      	add	r3, r2
 80096d6:	2200      	movs	r2, #0
 80096d8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	3301      	adds	r3, #1
 80096de:	60fb      	str	r3, [r7, #12]
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2b01      	cmp	r3, #1
 80096e4:	d9eb      	bls.n	80096be <clear_lock+0xe>
	}
}
 80096e6:	bf00      	nop
 80096e8:	bf00      	nop
 80096ea:	3714      	adds	r7, #20
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr
 80096f4:	20004258 	.word	0x20004258

080096f8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b086      	sub	sp, #24
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009700:	2300      	movs	r3, #0
 8009702:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	78db      	ldrb	r3, [r3, #3]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d034      	beq.n	8009776 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009710:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	7858      	ldrb	r0, [r3, #1]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800971c:	2301      	movs	r3, #1
 800971e:	697a      	ldr	r2, [r7, #20]
 8009720:	f7ff fd9a 	bl	8009258 <disk_write>
 8009724:	4603      	mov	r3, r0
 8009726:	2b00      	cmp	r3, #0
 8009728:	d002      	beq.n	8009730 <sync_window+0x38>
			res = FR_DISK_ERR;
 800972a:	2301      	movs	r3, #1
 800972c:	73fb      	strb	r3, [r7, #15]
 800972e:	e022      	b.n	8009776 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2200      	movs	r2, #0
 8009734:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6a1b      	ldr	r3, [r3, #32]
 800973a:	697a      	ldr	r2, [r7, #20]
 800973c:	1ad2      	subs	r2, r2, r3
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	699b      	ldr	r3, [r3, #24]
 8009742:	429a      	cmp	r2, r3
 8009744:	d217      	bcs.n	8009776 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	789b      	ldrb	r3, [r3, #2]
 800974a:	613b      	str	r3, [r7, #16]
 800974c:	e010      	b.n	8009770 <sync_window+0x78>
					wsect += fs->fsize;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	699b      	ldr	r3, [r3, #24]
 8009752:	697a      	ldr	r2, [r7, #20]
 8009754:	4413      	add	r3, r2
 8009756:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	7858      	ldrb	r0, [r3, #1]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009762:	2301      	movs	r3, #1
 8009764:	697a      	ldr	r2, [r7, #20]
 8009766:	f7ff fd77 	bl	8009258 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	3b01      	subs	r3, #1
 800976e:	613b      	str	r3, [r7, #16]
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	2b01      	cmp	r3, #1
 8009774:	d8eb      	bhi.n	800974e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009776:	7bfb      	ldrb	r3, [r7, #15]
}
 8009778:	4618      	mov	r0, r3
 800977a:	3718      	adds	r7, #24
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800978a:	2300      	movs	r3, #0
 800978c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009792:	683a      	ldr	r2, [r7, #0]
 8009794:	429a      	cmp	r2, r3
 8009796:	d01b      	beq.n	80097d0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f7ff ffad 	bl	80096f8 <sync_window>
 800979e:	4603      	mov	r3, r0
 80097a0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80097a2:	7bfb      	ldrb	r3, [r7, #15]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d113      	bne.n	80097d0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	7858      	ldrb	r0, [r3, #1]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80097b2:	2301      	movs	r3, #1
 80097b4:	683a      	ldr	r2, [r7, #0]
 80097b6:	f7ff fd2f 	bl	8009218 <disk_read>
 80097ba:	4603      	mov	r3, r0
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d004      	beq.n	80097ca <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80097c0:	f04f 33ff 	mov.w	r3, #4294967295
 80097c4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80097c6:	2301      	movs	r3, #1
 80097c8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	683a      	ldr	r2, [r7, #0]
 80097ce:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 80097d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3710      	adds	r7, #16
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}

080097da <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80097da:	b480      	push	{r7}
 80097dc:	b083      	sub	sp, #12
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6078      	str	r0, [r7, #4]
 80097e2:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	3b02      	subs	r3, #2
 80097e8:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	695b      	ldr	r3, [r3, #20]
 80097ee:	3b02      	subs	r3, #2
 80097f0:	683a      	ldr	r2, [r7, #0]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d301      	bcc.n	80097fa <clust2sect+0x20>
 80097f6:	2300      	movs	r3, #0
 80097f8:	e008      	b.n	800980c <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	895b      	ldrh	r3, [r3, #10]
 80097fe:	461a      	mov	r2, r3
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	fb03 f202 	mul.w	r2, r3, r2
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800980a:	4413      	add	r3, r2
}
 800980c:	4618      	mov	r0, r3
 800980e:	370c      	adds	r7, #12
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b086      	sub	sp, #24
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	2b01      	cmp	r3, #1
 800982c:	d904      	bls.n	8009838 <get_fat+0x20>
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	695b      	ldr	r3, [r3, #20]
 8009832:	683a      	ldr	r2, [r7, #0]
 8009834:	429a      	cmp	r2, r3
 8009836:	d302      	bcc.n	800983e <get_fat+0x26>
		val = 1;	/* Internal error */
 8009838:	2301      	movs	r3, #1
 800983a:	617b      	str	r3, [r7, #20]
 800983c:	e08e      	b.n	800995c <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800983e:	f04f 33ff 	mov.w	r3, #4294967295
 8009842:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	2b03      	cmp	r3, #3
 800984a:	d061      	beq.n	8009910 <get_fat+0xf8>
 800984c:	2b03      	cmp	r3, #3
 800984e:	dc7b      	bgt.n	8009948 <get_fat+0x130>
 8009850:	2b01      	cmp	r3, #1
 8009852:	d002      	beq.n	800985a <get_fat+0x42>
 8009854:	2b02      	cmp	r3, #2
 8009856:	d041      	beq.n	80098dc <get_fat+0xc4>
 8009858:	e076      	b.n	8009948 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	60fb      	str	r3, [r7, #12]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	085b      	lsrs	r3, r3, #1
 8009862:	68fa      	ldr	r2, [r7, #12]
 8009864:	4413      	add	r3, r2
 8009866:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	6a1a      	ldr	r2, [r3, #32]
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	0a5b      	lsrs	r3, r3, #9
 8009870:	4413      	add	r3, r2
 8009872:	4619      	mov	r1, r3
 8009874:	6938      	ldr	r0, [r7, #16]
 8009876:	f7ff ff83 	bl	8009780 <move_window>
 800987a:	4603      	mov	r3, r0
 800987c:	2b00      	cmp	r3, #0
 800987e:	d166      	bne.n	800994e <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	1c5a      	adds	r2, r3, #1
 8009884:	60fa      	str	r2, [r7, #12]
 8009886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800988a:	693a      	ldr	r2, [r7, #16]
 800988c:	4413      	add	r3, r2
 800988e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009892:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	6a1a      	ldr	r2, [r3, #32]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	0a5b      	lsrs	r3, r3, #9
 800989c:	4413      	add	r3, r2
 800989e:	4619      	mov	r1, r3
 80098a0:	6938      	ldr	r0, [r7, #16]
 80098a2:	f7ff ff6d 	bl	8009780 <move_window>
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d152      	bne.n	8009952 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098b2:	693a      	ldr	r2, [r7, #16]
 80098b4:	4413      	add	r3, r2
 80098b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80098ba:	021b      	lsls	r3, r3, #8
 80098bc:	68ba      	ldr	r2, [r7, #8]
 80098be:	4313      	orrs	r3, r2
 80098c0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	f003 0301 	and.w	r3, r3, #1
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d002      	beq.n	80098d2 <get_fat+0xba>
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	091b      	lsrs	r3, r3, #4
 80098d0:	e002      	b.n	80098d8 <get_fat+0xc0>
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80098d8:	617b      	str	r3, [r7, #20]
			break;
 80098da:	e03f      	b.n	800995c <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	6a1a      	ldr	r2, [r3, #32]
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	0a1b      	lsrs	r3, r3, #8
 80098e4:	4413      	add	r3, r2
 80098e6:	4619      	mov	r1, r3
 80098e8:	6938      	ldr	r0, [r7, #16]
 80098ea:	f7ff ff49 	bl	8009780 <move_window>
 80098ee:	4603      	mov	r3, r0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d130      	bne.n	8009956 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	005b      	lsls	r3, r3, #1
 80098fe:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8009902:	4413      	add	r3, r2
 8009904:	4618      	mov	r0, r3
 8009906:	f7ff fcc7 	bl	8009298 <ld_word>
 800990a:	4603      	mov	r3, r0
 800990c:	617b      	str	r3, [r7, #20]
			break;
 800990e:	e025      	b.n	800995c <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	6a1a      	ldr	r2, [r3, #32]
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	09db      	lsrs	r3, r3, #7
 8009918:	4413      	add	r3, r2
 800991a:	4619      	mov	r1, r3
 800991c:	6938      	ldr	r0, [r7, #16]
 800991e:	f7ff ff2f 	bl	8009780 <move_window>
 8009922:	4603      	mov	r3, r0
 8009924:	2b00      	cmp	r3, #0
 8009926:	d118      	bne.n	800995a <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	009b      	lsls	r3, r3, #2
 8009932:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8009936:	4413      	add	r3, r2
 8009938:	4618      	mov	r0, r3
 800993a:	f7ff fcc5 	bl	80092c8 <ld_dword>
 800993e:	4603      	mov	r3, r0
 8009940:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009944:	617b      	str	r3, [r7, #20]
			break;
 8009946:	e009      	b.n	800995c <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009948:	2301      	movs	r3, #1
 800994a:	617b      	str	r3, [r7, #20]
 800994c:	e006      	b.n	800995c <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800994e:	bf00      	nop
 8009950:	e004      	b.n	800995c <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009952:	bf00      	nop
 8009954:	e002      	b.n	800995c <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009956:	bf00      	nop
 8009958:	e000      	b.n	800995c <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800995a:	bf00      	nop
		}
	}

	return val;
 800995c:	697b      	ldr	r3, [r7, #20]
}
 800995e:	4618      	mov	r0, r3
 8009960:	3718      	adds	r7, #24
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009966:	b590      	push	{r4, r7, lr}
 8009968:	b089      	sub	sp, #36	@ 0x24
 800996a:	af00      	add	r7, sp, #0
 800996c:	60f8      	str	r0, [r7, #12]
 800996e:	60b9      	str	r1, [r7, #8]
 8009970:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009972:	2302      	movs	r3, #2
 8009974:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	2b01      	cmp	r3, #1
 800997a:	f240 80d9 	bls.w	8009b30 <put_fat+0x1ca>
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	695b      	ldr	r3, [r3, #20]
 8009982:	68ba      	ldr	r2, [r7, #8]
 8009984:	429a      	cmp	r2, r3
 8009986:	f080 80d3 	bcs.w	8009b30 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	2b03      	cmp	r3, #3
 8009990:	f000 8096 	beq.w	8009ac0 <put_fat+0x15a>
 8009994:	2b03      	cmp	r3, #3
 8009996:	f300 80cb 	bgt.w	8009b30 <put_fat+0x1ca>
 800999a:	2b01      	cmp	r3, #1
 800999c:	d002      	beq.n	80099a4 <put_fat+0x3e>
 800999e:	2b02      	cmp	r3, #2
 80099a0:	d06e      	beq.n	8009a80 <put_fat+0x11a>
 80099a2:	e0c5      	b.n	8009b30 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	61bb      	str	r3, [r7, #24]
 80099a8:	69bb      	ldr	r3, [r7, #24]
 80099aa:	085b      	lsrs	r3, r3, #1
 80099ac:	69ba      	ldr	r2, [r7, #24]
 80099ae:	4413      	add	r3, r2
 80099b0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	6a1a      	ldr	r2, [r3, #32]
 80099b6:	69bb      	ldr	r3, [r7, #24]
 80099b8:	0a5b      	lsrs	r3, r3, #9
 80099ba:	4413      	add	r3, r2
 80099bc:	4619      	mov	r1, r3
 80099be:	68f8      	ldr	r0, [r7, #12]
 80099c0:	f7ff fede 	bl	8009780 <move_window>
 80099c4:	4603      	mov	r3, r0
 80099c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80099c8:	7ffb      	ldrb	r3, [r7, #31]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	f040 80a9 	bne.w	8009b22 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80099d6:	69bb      	ldr	r3, [r7, #24]
 80099d8:	1c59      	adds	r1, r3, #1
 80099da:	61b9      	str	r1, [r7, #24]
 80099dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099e0:	4413      	add	r3, r2
 80099e2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	f003 0301 	and.w	r3, r3, #1
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d00d      	beq.n	8009a0a <put_fat+0xa4>
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	b25b      	sxtb	r3, r3
 80099f4:	f003 030f 	and.w	r3, r3, #15
 80099f8:	b25a      	sxtb	r2, r3
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	b2db      	uxtb	r3, r3
 80099fe:	011b      	lsls	r3, r3, #4
 8009a00:	b25b      	sxtb	r3, r3
 8009a02:	4313      	orrs	r3, r2
 8009a04:	b25b      	sxtb	r3, r3
 8009a06:	b2db      	uxtb	r3, r3
 8009a08:	e001      	b.n	8009a0e <put_fat+0xa8>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	697a      	ldr	r2, [r7, #20]
 8009a10:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2201      	movs	r2, #1
 8009a16:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	6a1a      	ldr	r2, [r3, #32]
 8009a1c:	69bb      	ldr	r3, [r7, #24]
 8009a1e:	0a5b      	lsrs	r3, r3, #9
 8009a20:	4413      	add	r3, r2
 8009a22:	4619      	mov	r1, r3
 8009a24:	68f8      	ldr	r0, [r7, #12]
 8009a26:	f7ff feab 	bl	8009780 <move_window>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009a2e:	7ffb      	ldrb	r3, [r7, #31]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d178      	bne.n	8009b26 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009a3a:	69bb      	ldr	r3, [r7, #24]
 8009a3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a40:	4413      	add	r3, r2
 8009a42:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	f003 0301 	and.w	r3, r3, #1
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d003      	beq.n	8009a56 <put_fat+0xf0>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	091b      	lsrs	r3, r3, #4
 8009a52:	b2db      	uxtb	r3, r3
 8009a54:	e00e      	b.n	8009a74 <put_fat+0x10e>
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	b25b      	sxtb	r3, r3
 8009a5c:	f023 030f 	bic.w	r3, r3, #15
 8009a60:	b25a      	sxtb	r2, r3
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	0a1b      	lsrs	r3, r3, #8
 8009a66:	b25b      	sxtb	r3, r3
 8009a68:	f003 030f 	and.w	r3, r3, #15
 8009a6c:	b25b      	sxtb	r3, r3
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	b25b      	sxtb	r3, r3
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	697a      	ldr	r2, [r7, #20]
 8009a76:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	70da      	strb	r2, [r3, #3]
			break;
 8009a7e:	e057      	b.n	8009b30 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	6a1a      	ldr	r2, [r3, #32]
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	0a1b      	lsrs	r3, r3, #8
 8009a88:	4413      	add	r3, r2
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	68f8      	ldr	r0, [r7, #12]
 8009a8e:	f7ff fe77 	bl	8009780 <move_window>
 8009a92:	4603      	mov	r3, r0
 8009a94:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009a96:	7ffb      	ldrb	r3, [r7, #31]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d146      	bne.n	8009b2a <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	005b      	lsls	r3, r3, #1
 8009aa6:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8009aaa:	4413      	add	r3, r2
 8009aac:	687a      	ldr	r2, [r7, #4]
 8009aae:	b292      	uxth	r2, r2
 8009ab0:	4611      	mov	r1, r2
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7ff fc2b 	bl	800930e <st_word>
			fs->wflag = 1;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2201      	movs	r2, #1
 8009abc:	70da      	strb	r2, [r3, #3]
			break;
 8009abe:	e037      	b.n	8009b30 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	6a1a      	ldr	r2, [r3, #32]
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	09db      	lsrs	r3, r3, #7
 8009ac8:	4413      	add	r3, r2
 8009aca:	4619      	mov	r1, r3
 8009acc:	68f8      	ldr	r0, [r7, #12]
 8009ace:	f7ff fe57 	bl	8009780 <move_window>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009ad6:	7ffb      	ldrb	r3, [r7, #31]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d128      	bne.n	8009b2e <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	009b      	lsls	r3, r3, #2
 8009aec:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8009af0:	4413      	add	r3, r2
 8009af2:	4618      	mov	r0, r3
 8009af4:	f7ff fbe8 	bl	80092c8 <ld_dword>
 8009af8:	4603      	mov	r3, r0
 8009afa:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009afe:	4323      	orrs	r3, r4
 8009b00:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8009b10:	4413      	add	r3, r2
 8009b12:	6879      	ldr	r1, [r7, #4]
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7ff fc15 	bl	8009344 <st_dword>
			fs->wflag = 1;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	70da      	strb	r2, [r3, #3]
			break;
 8009b20:	e006      	b.n	8009b30 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009b22:	bf00      	nop
 8009b24:	e004      	b.n	8009b30 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009b26:	bf00      	nop
 8009b28:	e002      	b.n	8009b30 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009b2a:	bf00      	nop
 8009b2c:	e000      	b.n	8009b30 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009b2e:	bf00      	nop
		}
	}
	return res;
 8009b30:	7ffb      	ldrb	r3, [r7, #31]
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3724      	adds	r7, #36	@ 0x24
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd90      	pop	{r4, r7, pc}

08009b3a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009b3a:	b580      	push	{r7, lr}
 8009b3c:	b088      	sub	sp, #32
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	60f8      	str	r0, [r7, #12]
 8009b42:	60b9      	str	r1, [r7, #8]
 8009b44:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009b46:	2300      	movs	r3, #0
 8009b48:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d904      	bls.n	8009b60 <remove_chain+0x26>
 8009b56:	69bb      	ldr	r3, [r7, #24]
 8009b58:	695b      	ldr	r3, [r3, #20]
 8009b5a:	68ba      	ldr	r2, [r7, #8]
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d301      	bcc.n	8009b64 <remove_chain+0x2a>
 8009b60:	2302      	movs	r3, #2
 8009b62:	e04b      	b.n	8009bfc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d00c      	beq.n	8009b84 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b6e:	6879      	ldr	r1, [r7, #4]
 8009b70:	69b8      	ldr	r0, [r7, #24]
 8009b72:	f7ff fef8 	bl	8009966 <put_fat>
 8009b76:	4603      	mov	r3, r0
 8009b78:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009b7a:	7ffb      	ldrb	r3, [r7, #31]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d001      	beq.n	8009b84 <remove_chain+0x4a>
 8009b80:	7ffb      	ldrb	r3, [r7, #31]
 8009b82:	e03b      	b.n	8009bfc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009b84:	68b9      	ldr	r1, [r7, #8]
 8009b86:	68f8      	ldr	r0, [r7, #12]
 8009b88:	f7ff fe46 	bl	8009818 <get_fat>
 8009b8c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d031      	beq.n	8009bf8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d101      	bne.n	8009b9e <remove_chain+0x64>
 8009b9a:	2302      	movs	r3, #2
 8009b9c:	e02e      	b.n	8009bfc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ba4:	d101      	bne.n	8009baa <remove_chain+0x70>
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e028      	b.n	8009bfc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009baa:	2200      	movs	r2, #0
 8009bac:	68b9      	ldr	r1, [r7, #8]
 8009bae:	69b8      	ldr	r0, [r7, #24]
 8009bb0:	f7ff fed9 	bl	8009966 <put_fat>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009bb8:	7ffb      	ldrb	r3, [r7, #31]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d001      	beq.n	8009bc2 <remove_chain+0x88>
 8009bbe:	7ffb      	ldrb	r3, [r7, #31]
 8009bc0:	e01c      	b.n	8009bfc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009bc2:	69bb      	ldr	r3, [r7, #24]
 8009bc4:	691a      	ldr	r2, [r3, #16]
 8009bc6:	69bb      	ldr	r3, [r7, #24]
 8009bc8:	695b      	ldr	r3, [r3, #20]
 8009bca:	3b02      	subs	r3, #2
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d20b      	bcs.n	8009be8 <remove_chain+0xae>
			fs->free_clst++;
 8009bd0:	69bb      	ldr	r3, [r7, #24]
 8009bd2:	691b      	ldr	r3, [r3, #16]
 8009bd4:	1c5a      	adds	r2, r3, #1
 8009bd6:	69bb      	ldr	r3, [r7, #24]
 8009bd8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8009bda:	69bb      	ldr	r3, [r7, #24]
 8009bdc:	791b      	ldrb	r3, [r3, #4]
 8009bde:	f043 0301 	orr.w	r3, r3, #1
 8009be2:	b2da      	uxtb	r2, r3
 8009be4:	69bb      	ldr	r3, [r7, #24]
 8009be6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009bec:	69bb      	ldr	r3, [r7, #24]
 8009bee:	695b      	ldr	r3, [r3, #20]
 8009bf0:	68ba      	ldr	r2, [r7, #8]
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	d3c6      	bcc.n	8009b84 <remove_chain+0x4a>
 8009bf6:	e000      	b.n	8009bfa <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009bf8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009bfa:	2300      	movs	r3, #0
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3720      	adds	r7, #32
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b088      	sub	sp, #32
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d10d      	bne.n	8009c36 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	68db      	ldr	r3, [r3, #12]
 8009c1e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009c20:	69bb      	ldr	r3, [r7, #24]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d004      	beq.n	8009c30 <create_chain+0x2c>
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	695b      	ldr	r3, [r3, #20]
 8009c2a:	69ba      	ldr	r2, [r7, #24]
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d31b      	bcc.n	8009c68 <create_chain+0x64>
 8009c30:	2301      	movs	r3, #1
 8009c32:	61bb      	str	r3, [r7, #24]
 8009c34:	e018      	b.n	8009c68 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009c36:	6839      	ldr	r1, [r7, #0]
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f7ff fded 	bl	8009818 <get_fat>
 8009c3e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d801      	bhi.n	8009c4a <create_chain+0x46>
 8009c46:	2301      	movs	r3, #1
 8009c48:	e070      	b.n	8009d2c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c50:	d101      	bne.n	8009c56 <create_chain+0x52>
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	e06a      	b.n	8009d2c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	695b      	ldr	r3, [r3, #20]
 8009c5a:	68fa      	ldr	r2, [r7, #12]
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d201      	bcs.n	8009c64 <create_chain+0x60>
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	e063      	b.n	8009d2c <create_chain+0x128>
		scl = clst;
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009c68:	69bb      	ldr	r3, [r7, #24]
 8009c6a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009c6c:	69fb      	ldr	r3, [r7, #28]
 8009c6e:	3301      	adds	r3, #1
 8009c70:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	695b      	ldr	r3, [r3, #20]
 8009c76:	69fa      	ldr	r2, [r7, #28]
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d307      	bcc.n	8009c8c <create_chain+0x88>
				ncl = 2;
 8009c7c:	2302      	movs	r3, #2
 8009c7e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009c80:	69fa      	ldr	r2, [r7, #28]
 8009c82:	69bb      	ldr	r3, [r7, #24]
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d901      	bls.n	8009c8c <create_chain+0x88>
 8009c88:	2300      	movs	r3, #0
 8009c8a:	e04f      	b.n	8009d2c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009c8c:	69f9      	ldr	r1, [r7, #28]
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f7ff fdc2 	bl	8009818 <get_fat>
 8009c94:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d00e      	beq.n	8009cba <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d003      	beq.n	8009caa <create_chain+0xa6>
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ca8:	d101      	bne.n	8009cae <create_chain+0xaa>
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	e03e      	b.n	8009d2c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009cae:	69fa      	ldr	r2, [r7, #28]
 8009cb0:	69bb      	ldr	r3, [r7, #24]
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d1da      	bne.n	8009c6c <create_chain+0x68>
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	e038      	b.n	8009d2c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009cba:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8009cc0:	69f9      	ldr	r1, [r7, #28]
 8009cc2:	6938      	ldr	r0, [r7, #16]
 8009cc4:	f7ff fe4f 	bl	8009966 <put_fat>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009ccc:	7dfb      	ldrb	r3, [r7, #23]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d109      	bne.n	8009ce6 <create_chain+0xe2>
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d006      	beq.n	8009ce6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009cd8:	69fa      	ldr	r2, [r7, #28]
 8009cda:	6839      	ldr	r1, [r7, #0]
 8009cdc:	6938      	ldr	r0, [r7, #16]
 8009cde:	f7ff fe42 	bl	8009966 <put_fat>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009ce6:	7dfb      	ldrb	r3, [r7, #23]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d116      	bne.n	8009d1a <create_chain+0x116>
		fs->last_clst = ncl;
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	69fa      	ldr	r2, [r7, #28]
 8009cf0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	691a      	ldr	r2, [r3, #16]
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	695b      	ldr	r3, [r3, #20]
 8009cfa:	3b02      	subs	r3, #2
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d804      	bhi.n	8009d0a <create_chain+0x106>
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	691b      	ldr	r3, [r3, #16]
 8009d04:	1e5a      	subs	r2, r3, #1
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	791b      	ldrb	r3, [r3, #4]
 8009d0e:	f043 0301 	orr.w	r3, r3, #1
 8009d12:	b2da      	uxtb	r2, r3
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	711a      	strb	r2, [r3, #4]
 8009d18:	e007      	b.n	8009d2a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009d1a:	7dfb      	ldrb	r3, [r7, #23]
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d102      	bne.n	8009d26 <create_chain+0x122>
 8009d20:	f04f 33ff 	mov.w	r3, #4294967295
 8009d24:	e000      	b.n	8009d28 <create_chain+0x124>
 8009d26:	2301      	movs	r3, #1
 8009d28:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009d2a:	69fb      	ldr	r3, [r7, #28]
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3720      	adds	r7, #32
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b087      	sub	sp, #28
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d48:	3304      	adds	r3, #4
 8009d4a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	0a5b      	lsrs	r3, r3, #9
 8009d50:	68fa      	ldr	r2, [r7, #12]
 8009d52:	8952      	ldrh	r2, [r2, #10]
 8009d54:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d58:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	1d1a      	adds	r2, r3, #4
 8009d5e:	613a      	str	r2, [r7, #16]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d101      	bne.n	8009d6e <clmt_clust+0x3a>
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	e010      	b.n	8009d90 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009d6e:	697a      	ldr	r2, [r7, #20]
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d307      	bcc.n	8009d86 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009d76:	697a      	ldr	r2, [r7, #20]
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	1ad3      	subs	r3, r2, r3
 8009d7c:	617b      	str	r3, [r7, #20]
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	3304      	adds	r3, #4
 8009d82:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009d84:	e7e9      	b.n	8009d5a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009d86:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	681a      	ldr	r2, [r3, #0]
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	4413      	add	r3, r2
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	371c      	adds	r7, #28
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr

08009d9c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b086      	sub	sp, #24
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009db2:	d204      	bcs.n	8009dbe <dir_sdi+0x22>
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	f003 031f 	and.w	r3, r3, #31
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d001      	beq.n	8009dc2 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009dbe:	2302      	movs	r3, #2
 8009dc0:	e063      	b.n	8009e8a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	683a      	ldr	r2, [r7, #0]
 8009dc6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d106      	bne.n	8009de2 <dir_sdi+0x46>
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	2b02      	cmp	r3, #2
 8009dda:	d902      	bls.n	8009de2 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009de0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d10c      	bne.n	8009e02 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	095b      	lsrs	r3, r3, #5
 8009dec:	693a      	ldr	r2, [r7, #16]
 8009dee:	8912      	ldrh	r2, [r2, #8]
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d301      	bcc.n	8009df8 <dir_sdi+0x5c>
 8009df4:	2302      	movs	r3, #2
 8009df6:	e048      	b.n	8009e8a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	61da      	str	r2, [r3, #28]
 8009e00:	e029      	b.n	8009e56 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	895b      	ldrh	r3, [r3, #10]
 8009e06:	025b      	lsls	r3, r3, #9
 8009e08:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009e0a:	e019      	b.n	8009e40 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6979      	ldr	r1, [r7, #20]
 8009e10:	4618      	mov	r0, r3
 8009e12:	f7ff fd01 	bl	8009818 <get_fat>
 8009e16:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e1e:	d101      	bne.n	8009e24 <dir_sdi+0x88>
 8009e20:	2301      	movs	r3, #1
 8009e22:	e032      	b.n	8009e8a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d904      	bls.n	8009e34 <dir_sdi+0x98>
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	695b      	ldr	r3, [r3, #20]
 8009e2e:	697a      	ldr	r2, [r7, #20]
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d301      	bcc.n	8009e38 <dir_sdi+0x9c>
 8009e34:	2302      	movs	r3, #2
 8009e36:	e028      	b.n	8009e8a <dir_sdi+0xee>
			ofs -= csz;
 8009e38:	683a      	ldr	r2, [r7, #0]
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	1ad3      	subs	r3, r2, r3
 8009e3e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009e40:	683a      	ldr	r2, [r7, #0]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d2e1      	bcs.n	8009e0c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009e48:	6979      	ldr	r1, [r7, #20]
 8009e4a:	6938      	ldr	r0, [r7, #16]
 8009e4c:	f7ff fcc5 	bl	80097da <clust2sect>
 8009e50:	4602      	mov	r2, r0
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	697a      	ldr	r2, [r7, #20]
 8009e5a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	69db      	ldr	r3, [r3, #28]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d101      	bne.n	8009e68 <dir_sdi+0xcc>
 8009e64:	2302      	movs	r3, #2
 8009e66:	e010      	b.n	8009e8a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	69da      	ldr	r2, [r3, #28]
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	0a5b      	lsrs	r3, r3, #9
 8009e70:	441a      	add	r2, r3
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e82:	441a      	add	r2, r3
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009e88:	2300      	movs	r3, #0
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3718      	adds	r7, #24
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}

08009e92 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009e92:	b580      	push	{r7, lr}
 8009e94:	b086      	sub	sp, #24
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	6078      	str	r0, [r7, #4]
 8009e9a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	695b      	ldr	r3, [r3, #20]
 8009ea6:	3320      	adds	r3, #32
 8009ea8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	69db      	ldr	r3, [r3, #28]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d003      	beq.n	8009eba <dir_next+0x28>
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009eb8:	d301      	bcc.n	8009ebe <dir_next+0x2c>
 8009eba:	2304      	movs	r3, #4
 8009ebc:	e0aa      	b.n	800a014 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	f040 8098 	bne.w	8009ffa <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	69db      	ldr	r3, [r3, #28]
 8009ece:	1c5a      	adds	r2, r3, #1
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	699b      	ldr	r3, [r3, #24]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d10b      	bne.n	8009ef4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	095b      	lsrs	r3, r3, #5
 8009ee0:	68fa      	ldr	r2, [r7, #12]
 8009ee2:	8912      	ldrh	r2, [r2, #8]
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	f0c0 8088 	bcc.w	8009ffa <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2200      	movs	r2, #0
 8009eee:	61da      	str	r2, [r3, #28]
 8009ef0:	2304      	movs	r3, #4
 8009ef2:	e08f      	b.n	800a014 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	0a5b      	lsrs	r3, r3, #9
 8009ef8:	68fa      	ldr	r2, [r7, #12]
 8009efa:	8952      	ldrh	r2, [r2, #10]
 8009efc:	3a01      	subs	r2, #1
 8009efe:	4013      	ands	r3, r2
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d17a      	bne.n	8009ffa <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	699b      	ldr	r3, [r3, #24]
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	4610      	mov	r0, r2
 8009f0e:	f7ff fc83 	bl	8009818 <get_fat>
 8009f12:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	d801      	bhi.n	8009f1e <dir_next+0x8c>
 8009f1a:	2302      	movs	r3, #2
 8009f1c:	e07a      	b.n	800a014 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f24:	d101      	bne.n	8009f2a <dir_next+0x98>
 8009f26:	2301      	movs	r3, #1
 8009f28:	e074      	b.n	800a014 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	695b      	ldr	r3, [r3, #20]
 8009f2e:	697a      	ldr	r2, [r7, #20]
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d358      	bcc.n	8009fe6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d104      	bne.n	8009f44 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	61da      	str	r2, [r3, #28]
 8009f40:	2304      	movs	r3, #4
 8009f42:	e067      	b.n	800a014 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009f44:	687a      	ldr	r2, [r7, #4]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	699b      	ldr	r3, [r3, #24]
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	4610      	mov	r0, r2
 8009f4e:	f7ff fe59 	bl	8009c04 <create_chain>
 8009f52:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d101      	bne.n	8009f5e <dir_next+0xcc>
 8009f5a:	2307      	movs	r3, #7
 8009f5c:	e05a      	b.n	800a014 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	d101      	bne.n	8009f68 <dir_next+0xd6>
 8009f64:	2302      	movs	r3, #2
 8009f66:	e055      	b.n	800a014 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f6e:	d101      	bne.n	8009f74 <dir_next+0xe2>
 8009f70:	2301      	movs	r3, #1
 8009f72:	e04f      	b.n	800a014 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009f74:	68f8      	ldr	r0, [r7, #12]
 8009f76:	f7ff fbbf 	bl	80096f8 <sync_window>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d001      	beq.n	8009f84 <dir_next+0xf2>
 8009f80:	2301      	movs	r3, #1
 8009f82:	e047      	b.n	800a014 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	3330      	adds	r3, #48	@ 0x30
 8009f88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009f8c:	2100      	movs	r1, #0
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f7ff fa25 	bl	80093de <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009f94:	2300      	movs	r3, #0
 8009f96:	613b      	str	r3, [r7, #16]
 8009f98:	6979      	ldr	r1, [r7, #20]
 8009f9a:	68f8      	ldr	r0, [r7, #12]
 8009f9c:	f7ff fc1d 	bl	80097da <clust2sect>
 8009fa0:	4602      	mov	r2, r0
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009fa6:	e012      	b.n	8009fce <dir_next+0x13c>
						fs->wflag = 1;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2201      	movs	r2, #1
 8009fac:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009fae:	68f8      	ldr	r0, [r7, #12]
 8009fb0:	f7ff fba2 	bl	80096f8 <sync_window>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d001      	beq.n	8009fbe <dir_next+0x12c>
 8009fba:	2301      	movs	r3, #1
 8009fbc:	e02a      	b.n	800a014 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	3301      	adds	r3, #1
 8009fc2:	613b      	str	r3, [r7, #16]
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fc8:	1c5a      	adds	r2, r3, #1
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	895b      	ldrh	r3, [r3, #10]
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d3e6      	bcc.n	8009fa8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	1ad2      	subs	r2, r2, r3
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	697a      	ldr	r2, [r7, #20]
 8009fea:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009fec:	6979      	ldr	r1, [r7, #20]
 8009fee:	68f8      	ldr	r0, [r7, #12]
 8009ff0:	f7ff fbf3 	bl	80097da <clust2sect>
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	68ba      	ldr	r2, [r7, #8]
 8009ffe:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a00c:	441a      	add	r2, r3
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a012:	2300      	movs	r3, #0
}
 800a014:	4618      	mov	r0, r3
 800a016:	3718      	adds	r7, #24
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b086      	sub	sp, #24
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a02c:	2100      	movs	r1, #0
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f7ff feb4 	bl	8009d9c <dir_sdi>
 800a034:	4603      	mov	r3, r0
 800a036:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a038:	7dfb      	ldrb	r3, [r7, #23]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d12b      	bne.n	800a096 <dir_alloc+0x7a>
		n = 0;
 800a03e:	2300      	movs	r3, #0
 800a040:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	69db      	ldr	r3, [r3, #28]
 800a046:	4619      	mov	r1, r3
 800a048:	68f8      	ldr	r0, [r7, #12]
 800a04a:	f7ff fb99 	bl	8009780 <move_window>
 800a04e:	4603      	mov	r3, r0
 800a050:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a052:	7dfb      	ldrb	r3, [r7, #23]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d11d      	bne.n	800a094 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6a1b      	ldr	r3, [r3, #32]
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	2be5      	cmp	r3, #229	@ 0xe5
 800a060:	d004      	beq.n	800a06c <dir_alloc+0x50>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6a1b      	ldr	r3, [r3, #32]
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d107      	bne.n	800a07c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	3301      	adds	r3, #1
 800a070:	613b      	str	r3, [r7, #16]
 800a072:	693a      	ldr	r2, [r7, #16]
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	429a      	cmp	r2, r3
 800a078:	d102      	bne.n	800a080 <dir_alloc+0x64>
 800a07a:	e00c      	b.n	800a096 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a07c:	2300      	movs	r3, #0
 800a07e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a080:	2101      	movs	r1, #1
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f7ff ff05 	bl	8009e92 <dir_next>
 800a088:	4603      	mov	r3, r0
 800a08a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a08c:	7dfb      	ldrb	r3, [r7, #23]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d0d7      	beq.n	800a042 <dir_alloc+0x26>
 800a092:	e000      	b.n	800a096 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a094:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a096:	7dfb      	ldrb	r3, [r7, #23]
 800a098:	2b04      	cmp	r3, #4
 800a09a:	d101      	bne.n	800a0a0 <dir_alloc+0x84>
 800a09c:	2307      	movs	r3, #7
 800a09e:	75fb      	strb	r3, [r7, #23]
	return res;
 800a0a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3718      	adds	r7, #24
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b084      	sub	sp, #16
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6078      	str	r0, [r7, #4]
 800a0b2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	331a      	adds	r3, #26
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f7ff f8ed 	bl	8009298 <ld_word>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	2b03      	cmp	r3, #3
 800a0c8:	d109      	bne.n	800a0de <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	3314      	adds	r3, #20
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f7ff f8e2 	bl	8009298 <ld_word>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	041b      	lsls	r3, r3, #16
 800a0d8:	68fa      	ldr	r2, [r7, #12]
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a0de:	68fb      	ldr	r3, [r7, #12]
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3710      	adds	r7, #16
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	331a      	adds	r3, #26
 800a0f8:	687a      	ldr	r2, [r7, #4]
 800a0fa:	b292      	uxth	r2, r2
 800a0fc:	4611      	mov	r1, r2
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7ff f905 	bl	800930e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	2b03      	cmp	r3, #3
 800a10a:	d109      	bne.n	800a120 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	f103 0214 	add.w	r2, r3, #20
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	0c1b      	lsrs	r3, r3, #16
 800a116:	b29b      	uxth	r3, r3
 800a118:	4619      	mov	r1, r3
 800a11a:	4610      	mov	r0, r2
 800a11c:	f7ff f8f7 	bl	800930e <st_word>
	}
}
 800a120:	bf00      	nop
 800a122:	3710      	adds	r7, #16
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b086      	sub	sp, #24
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a136:	2100      	movs	r1, #0
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f7ff fe2f 	bl	8009d9c <dir_sdi>
 800a13e:	4603      	mov	r3, r0
 800a140:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a142:	7dfb      	ldrb	r3, [r7, #23]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d001      	beq.n	800a14c <dir_find+0x24>
 800a148:	7dfb      	ldrb	r3, [r7, #23]
 800a14a:	e03e      	b.n	800a1ca <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	69db      	ldr	r3, [r3, #28]
 800a150:	4619      	mov	r1, r3
 800a152:	6938      	ldr	r0, [r7, #16]
 800a154:	f7ff fb14 	bl	8009780 <move_window>
 800a158:	4603      	mov	r3, r0
 800a15a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a15c:	7dfb      	ldrb	r3, [r7, #23]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d12f      	bne.n	800a1c2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6a1b      	ldr	r3, [r3, #32]
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a16a:	7bfb      	ldrb	r3, [r7, #15]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d102      	bne.n	800a176 <dir_find+0x4e>
 800a170:	2304      	movs	r3, #4
 800a172:	75fb      	strb	r3, [r7, #23]
 800a174:	e028      	b.n	800a1c8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6a1b      	ldr	r3, [r3, #32]
 800a17a:	330b      	adds	r3, #11
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a182:	b2da      	uxtb	r2, r3
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6a1b      	ldr	r3, [r3, #32]
 800a18c:	330b      	adds	r3, #11
 800a18e:	781b      	ldrb	r3, [r3, #0]
 800a190:	f003 0308 	and.w	r3, r3, #8
 800a194:	2b00      	cmp	r3, #0
 800a196:	d10a      	bne.n	800a1ae <dir_find+0x86>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6a18      	ldr	r0, [r3, #32]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	3324      	adds	r3, #36	@ 0x24
 800a1a0:	220b      	movs	r2, #11
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	f7ff f936 	bl	8009414 <mem_cmp>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d00b      	beq.n	800a1c6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a1ae:	2100      	movs	r1, #0
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f7ff fe6e 	bl	8009e92 <dir_next>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a1ba:	7dfb      	ldrb	r3, [r7, #23]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d0c5      	beq.n	800a14c <dir_find+0x24>
 800a1c0:	e002      	b.n	800a1c8 <dir_find+0xa0>
		if (res != FR_OK) break;
 800a1c2:	bf00      	nop
 800a1c4:	e000      	b.n	800a1c8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a1c6:	bf00      	nop

	return res;
 800a1c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3718      	adds	r7, #24
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}

0800a1d2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a1d2:	b580      	push	{r7, lr}
 800a1d4:	b084      	sub	sp, #16
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a1e0:	2101      	movs	r1, #1
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f7ff ff1a 	bl	800a01c <dir_alloc>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a1ec:	7bfb      	ldrb	r3, [r7, #15]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d11c      	bne.n	800a22c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	69db      	ldr	r3, [r3, #28]
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	68b8      	ldr	r0, [r7, #8]
 800a1fa:	f7ff fac1 	bl	8009780 <move_window>
 800a1fe:	4603      	mov	r3, r0
 800a200:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a202:	7bfb      	ldrb	r3, [r7, #15]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d111      	bne.n	800a22c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6a1b      	ldr	r3, [r3, #32]
 800a20c:	2220      	movs	r2, #32
 800a20e:	2100      	movs	r1, #0
 800a210:	4618      	mov	r0, r3
 800a212:	f7ff f8e4 	bl	80093de <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6a18      	ldr	r0, [r3, #32]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	3324      	adds	r3, #36	@ 0x24
 800a21e:	220b      	movs	r2, #11
 800a220:	4619      	mov	r1, r3
 800a222:	f7ff f8bb 	bl	800939c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	2201      	movs	r2, #1
 800a22a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a22c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
	...

0800a238 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b088      	sub	sp, #32
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	60fb      	str	r3, [r7, #12]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	3324      	adds	r3, #36	@ 0x24
 800a24c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a24e:	220b      	movs	r2, #11
 800a250:	2120      	movs	r1, #32
 800a252:	68b8      	ldr	r0, [r7, #8]
 800a254:	f7ff f8c3 	bl	80093de <mem_set>
	si = i = 0; ni = 8;
 800a258:	2300      	movs	r3, #0
 800a25a:	613b      	str	r3, [r7, #16]
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	61fb      	str	r3, [r7, #28]
 800a260:	2308      	movs	r3, #8
 800a262:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a264:	69fb      	ldr	r3, [r7, #28]
 800a266:	1c5a      	adds	r2, r3, #1
 800a268:	61fa      	str	r2, [r7, #28]
 800a26a:	68fa      	ldr	r2, [r7, #12]
 800a26c:	4413      	add	r3, r2
 800a26e:	781b      	ldrb	r3, [r3, #0]
 800a270:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a272:	7efb      	ldrb	r3, [r7, #27]
 800a274:	2b20      	cmp	r3, #32
 800a276:	d94e      	bls.n	800a316 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a278:	7efb      	ldrb	r3, [r7, #27]
 800a27a:	2b2f      	cmp	r3, #47	@ 0x2f
 800a27c:	d006      	beq.n	800a28c <create_name+0x54>
 800a27e:	7efb      	ldrb	r3, [r7, #27]
 800a280:	2b5c      	cmp	r3, #92	@ 0x5c
 800a282:	d110      	bne.n	800a2a6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a284:	e002      	b.n	800a28c <create_name+0x54>
 800a286:	69fb      	ldr	r3, [r7, #28]
 800a288:	3301      	adds	r3, #1
 800a28a:	61fb      	str	r3, [r7, #28]
 800a28c:	68fa      	ldr	r2, [r7, #12]
 800a28e:	69fb      	ldr	r3, [r7, #28]
 800a290:	4413      	add	r3, r2
 800a292:	781b      	ldrb	r3, [r3, #0]
 800a294:	2b2f      	cmp	r3, #47	@ 0x2f
 800a296:	d0f6      	beq.n	800a286 <create_name+0x4e>
 800a298:	68fa      	ldr	r2, [r7, #12]
 800a29a:	69fb      	ldr	r3, [r7, #28]
 800a29c:	4413      	add	r3, r2
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	2b5c      	cmp	r3, #92	@ 0x5c
 800a2a2:	d0f0      	beq.n	800a286 <create_name+0x4e>
			break;
 800a2a4:	e038      	b.n	800a318 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a2a6:	7efb      	ldrb	r3, [r7, #27]
 800a2a8:	2b2e      	cmp	r3, #46	@ 0x2e
 800a2aa:	d003      	beq.n	800a2b4 <create_name+0x7c>
 800a2ac:	693a      	ldr	r2, [r7, #16]
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d30c      	bcc.n	800a2ce <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	2b0b      	cmp	r3, #11
 800a2b8:	d002      	beq.n	800a2c0 <create_name+0x88>
 800a2ba:	7efb      	ldrb	r3, [r7, #27]
 800a2bc:	2b2e      	cmp	r3, #46	@ 0x2e
 800a2be:	d001      	beq.n	800a2c4 <create_name+0x8c>
 800a2c0:	2306      	movs	r3, #6
 800a2c2:	e044      	b.n	800a34e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a2c4:	2308      	movs	r3, #8
 800a2c6:	613b      	str	r3, [r7, #16]
 800a2c8:	230b      	movs	r3, #11
 800a2ca:	617b      	str	r3, [r7, #20]
			continue;
 800a2cc:	e022      	b.n	800a314 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a2ce:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	da04      	bge.n	800a2e0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a2d6:	7efb      	ldrb	r3, [r7, #27]
 800a2d8:	3b80      	subs	r3, #128	@ 0x80
 800a2da:	4a1f      	ldr	r2, [pc, #124]	@ (800a358 <create_name+0x120>)
 800a2dc:	5cd3      	ldrb	r3, [r2, r3]
 800a2de:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a2e0:	7efb      	ldrb	r3, [r7, #27]
 800a2e2:	4619      	mov	r1, r3
 800a2e4:	481d      	ldr	r0, [pc, #116]	@ (800a35c <create_name+0x124>)
 800a2e6:	f7ff f8bc 	bl	8009462 <chk_chr>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d001      	beq.n	800a2f4 <create_name+0xbc>
 800a2f0:	2306      	movs	r3, #6
 800a2f2:	e02c      	b.n	800a34e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a2f4:	7efb      	ldrb	r3, [r7, #27]
 800a2f6:	2b60      	cmp	r3, #96	@ 0x60
 800a2f8:	d905      	bls.n	800a306 <create_name+0xce>
 800a2fa:	7efb      	ldrb	r3, [r7, #27]
 800a2fc:	2b7a      	cmp	r3, #122	@ 0x7a
 800a2fe:	d802      	bhi.n	800a306 <create_name+0xce>
 800a300:	7efb      	ldrb	r3, [r7, #27]
 800a302:	3b20      	subs	r3, #32
 800a304:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	1c5a      	adds	r2, r3, #1
 800a30a:	613a      	str	r2, [r7, #16]
 800a30c:	68ba      	ldr	r2, [r7, #8]
 800a30e:	4413      	add	r3, r2
 800a310:	7efa      	ldrb	r2, [r7, #27]
 800a312:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a314:	e7a6      	b.n	800a264 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a316:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a318:	68fa      	ldr	r2, [r7, #12]
 800a31a:	69fb      	ldr	r3, [r7, #28]
 800a31c:	441a      	add	r2, r3
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d101      	bne.n	800a32c <create_name+0xf4>
 800a328:	2306      	movs	r3, #6
 800a32a:	e010      	b.n	800a34e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	2be5      	cmp	r3, #229	@ 0xe5
 800a332:	d102      	bne.n	800a33a <create_name+0x102>
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	2205      	movs	r2, #5
 800a338:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a33a:	7efb      	ldrb	r3, [r7, #27]
 800a33c:	2b20      	cmp	r3, #32
 800a33e:	d801      	bhi.n	800a344 <create_name+0x10c>
 800a340:	2204      	movs	r2, #4
 800a342:	e000      	b.n	800a346 <create_name+0x10e>
 800a344:	2200      	movs	r2, #0
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	330b      	adds	r3, #11
 800a34a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a34c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3720      	adds	r7, #32
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	0800cc80 	.word	0x0800cc80
 800a35c:	0800cb0c 	.word	0x0800cb0c

0800a360 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b086      	sub	sp, #24
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a374:	e002      	b.n	800a37c <follow_path+0x1c>
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	3301      	adds	r3, #1
 800a37a:	603b      	str	r3, [r7, #0]
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	2b2f      	cmp	r3, #47	@ 0x2f
 800a382:	d0f8      	beq.n	800a376 <follow_path+0x16>
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	781b      	ldrb	r3, [r3, #0]
 800a388:	2b5c      	cmp	r3, #92	@ 0x5c
 800a38a:	d0f4      	beq.n	800a376 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	2200      	movs	r2, #0
 800a390:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	781b      	ldrb	r3, [r3, #0]
 800a396:	2b1f      	cmp	r3, #31
 800a398:	d80a      	bhi.n	800a3b0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2280      	movs	r2, #128	@ 0x80
 800a39e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800a3a2:	2100      	movs	r1, #0
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f7ff fcf9 	bl	8009d9c <dir_sdi>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	75fb      	strb	r3, [r7, #23]
 800a3ae:	e043      	b.n	800a438 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a3b0:	463b      	mov	r3, r7
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f7ff ff3f 	bl	800a238 <create_name>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a3be:	7dfb      	ldrb	r3, [r7, #23]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d134      	bne.n	800a42e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f7ff feaf 	bl	800a128 <dir_find>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a3d4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a3d6:	7dfb      	ldrb	r3, [r7, #23]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d00a      	beq.n	800a3f2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a3dc:	7dfb      	ldrb	r3, [r7, #23]
 800a3de:	2b04      	cmp	r3, #4
 800a3e0:	d127      	bne.n	800a432 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a3e2:	7afb      	ldrb	r3, [r7, #11]
 800a3e4:	f003 0304 	and.w	r3, r3, #4
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d122      	bne.n	800a432 <follow_path+0xd2>
 800a3ec:	2305      	movs	r3, #5
 800a3ee:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a3f0:	e01f      	b.n	800a432 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a3f2:	7afb      	ldrb	r3, [r7, #11]
 800a3f4:	f003 0304 	and.w	r3, r3, #4
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d11c      	bne.n	800a436 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	799b      	ldrb	r3, [r3, #6]
 800a400:	f003 0310 	and.w	r3, r3, #16
 800a404:	2b00      	cmp	r3, #0
 800a406:	d102      	bne.n	800a40e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a408:	2305      	movs	r3, #5
 800a40a:	75fb      	strb	r3, [r7, #23]
 800a40c:	e014      	b.n	800a438 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	695b      	ldr	r3, [r3, #20]
 800a418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a41c:	4413      	add	r3, r2
 800a41e:	4619      	mov	r1, r3
 800a420:	68f8      	ldr	r0, [r7, #12]
 800a422:	f7ff fe42 	bl	800a0aa <ld_clust>
 800a426:	4602      	mov	r2, r0
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a42c:	e7c0      	b.n	800a3b0 <follow_path+0x50>
			if (res != FR_OK) break;
 800a42e:	bf00      	nop
 800a430:	e002      	b.n	800a438 <follow_path+0xd8>
				break;
 800a432:	bf00      	nop
 800a434:	e000      	b.n	800a438 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a436:	bf00      	nop
			}
		}
	}

	return res;
 800a438:	7dfb      	ldrb	r3, [r7, #23]
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	3718      	adds	r7, #24
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}

0800a442 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a442:	b480      	push	{r7}
 800a444:	b087      	sub	sp, #28
 800a446:	af00      	add	r7, sp, #0
 800a448:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a44a:	f04f 33ff 	mov.w	r3, #4294967295
 800a44e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d031      	beq.n	800a4bc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	617b      	str	r3, [r7, #20]
 800a45e:	e002      	b.n	800a466 <get_ldnumber+0x24>
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	3301      	adds	r3, #1
 800a464:	617b      	str	r3, [r7, #20]
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	2b20      	cmp	r3, #32
 800a46c:	d903      	bls.n	800a476 <get_ldnumber+0x34>
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	2b3a      	cmp	r3, #58	@ 0x3a
 800a474:	d1f4      	bne.n	800a460 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	2b3a      	cmp	r3, #58	@ 0x3a
 800a47c:	d11c      	bne.n	800a4b8 <get_ldnumber+0x76>
			tp = *path;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	1c5a      	adds	r2, r3, #1
 800a488:	60fa      	str	r2, [r7, #12]
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	3b30      	subs	r3, #48	@ 0x30
 800a48e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	2b09      	cmp	r3, #9
 800a494:	d80e      	bhi.n	800a4b4 <get_ldnumber+0x72>
 800a496:	68fa      	ldr	r2, [r7, #12]
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d10a      	bne.n	800a4b4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d107      	bne.n	800a4b4 <get_ldnumber+0x72>
					vol = (int)i;
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	617b      	str	r3, [r7, #20]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	697a      	ldr	r2, [r7, #20]
 800a4b2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	e002      	b.n	800a4be <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a4bc:	693b      	ldr	r3, [r7, #16]
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	371c      	adds	r7, #28
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr
	...

0800a4cc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b082      	sub	sp, #8
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	70da      	strb	r2, [r3, #3]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f04f 32ff 	mov.w	r2, #4294967295
 800a4e2:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a4e4:	6839      	ldr	r1, [r7, #0]
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f7ff f94a 	bl	8009780 <move_window>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d001      	beq.n	800a4f6 <check_fs+0x2a>
 800a4f2:	2304      	movs	r3, #4
 800a4f4:	e038      	b.n	800a568 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	3330      	adds	r3, #48	@ 0x30
 800a4fa:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7fe feca 	bl	8009298 <ld_word>
 800a504:	4603      	mov	r3, r0
 800a506:	461a      	mov	r2, r3
 800a508:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d001      	beq.n	800a514 <check_fs+0x48>
 800a510:	2303      	movs	r3, #3
 800a512:	e029      	b.n	800a568 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a51a:	2be9      	cmp	r3, #233	@ 0xe9
 800a51c:	d009      	beq.n	800a532 <check_fs+0x66>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a524:	2beb      	cmp	r3, #235	@ 0xeb
 800a526:	d11e      	bne.n	800a566 <check_fs+0x9a>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a52e:	2b90      	cmp	r3, #144	@ 0x90
 800a530:	d119      	bne.n	800a566 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	3330      	adds	r3, #48	@ 0x30
 800a536:	3336      	adds	r3, #54	@ 0x36
 800a538:	4618      	mov	r0, r3
 800a53a:	f7fe fec5 	bl	80092c8 <ld_dword>
 800a53e:	4603      	mov	r3, r0
 800a540:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a544:	4a0a      	ldr	r2, [pc, #40]	@ (800a570 <check_fs+0xa4>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d101      	bne.n	800a54e <check_fs+0x82>
 800a54a:	2300      	movs	r3, #0
 800a54c:	e00c      	b.n	800a568 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	3330      	adds	r3, #48	@ 0x30
 800a552:	3352      	adds	r3, #82	@ 0x52
 800a554:	4618      	mov	r0, r3
 800a556:	f7fe feb7 	bl	80092c8 <ld_dword>
 800a55a:	4603      	mov	r3, r0
 800a55c:	4a05      	ldr	r2, [pc, #20]	@ (800a574 <check_fs+0xa8>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d101      	bne.n	800a566 <check_fs+0x9a>
 800a562:	2300      	movs	r3, #0
 800a564:	e000      	b.n	800a568 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a566:	2302      	movs	r3, #2
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3708      	adds	r7, #8
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}
 800a570:	00544146 	.word	0x00544146
 800a574:	33544146 	.word	0x33544146

0800a578 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b096      	sub	sp, #88	@ 0x58
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	60f8      	str	r0, [r7, #12]
 800a580:	60b9      	str	r1, [r7, #8]
 800a582:	4613      	mov	r3, r2
 800a584:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	2200      	movs	r2, #0
 800a58a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a58c:	68f8      	ldr	r0, [r7, #12]
 800a58e:	f7ff ff58 	bl	800a442 <get_ldnumber>
 800a592:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a594:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a596:	2b00      	cmp	r3, #0
 800a598:	da01      	bge.n	800a59e <find_volume+0x26>
 800a59a:	230b      	movs	r3, #11
 800a59c:	e22d      	b.n	800a9fa <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a59e:	4aa1      	ldr	r2, [pc, #644]	@ (800a824 <find_volume+0x2ac>)
 800a5a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5a6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a5a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d101      	bne.n	800a5b2 <find_volume+0x3a>
 800a5ae:	230c      	movs	r3, #12
 800a5b0:	e223      	b.n	800a9fa <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a5b6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a5b8:	79fb      	ldrb	r3, [r7, #7]
 800a5ba:	f023 0301 	bic.w	r3, r3, #1
 800a5be:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a5c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5c2:	781b      	ldrb	r3, [r3, #0]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d01a      	beq.n	800a5fe <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a5c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ca:	785b      	ldrb	r3, [r3, #1]
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f7fe fde1 	bl	8009194 <disk_status>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a5d8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a5dc:	f003 0301 	and.w	r3, r3, #1
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d10c      	bne.n	800a5fe <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a5e4:	79fb      	ldrb	r3, [r7, #7]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d007      	beq.n	800a5fa <find_volume+0x82>
 800a5ea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a5ee:	f003 0304 	and.w	r3, r3, #4
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d001      	beq.n	800a5fa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a5f6:	230a      	movs	r3, #10
 800a5f8:	e1ff      	b.n	800a9fa <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	e1fd      	b.n	800a9fa <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a5fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a600:	2200      	movs	r2, #0
 800a602:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a604:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a606:	b2da      	uxtb	r2, r3
 800a608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a60a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a60c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a60e:	785b      	ldrb	r3, [r3, #1]
 800a610:	4618      	mov	r0, r3
 800a612:	f7fe fdd9 	bl	80091c8 <disk_initialize>
 800a616:	4603      	mov	r3, r0
 800a618:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a61c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a620:	f003 0301 	and.w	r3, r3, #1
 800a624:	2b00      	cmp	r3, #0
 800a626:	d001      	beq.n	800a62c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a628:	2303      	movs	r3, #3
 800a62a:	e1e6      	b.n	800a9fa <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a62c:	79fb      	ldrb	r3, [r7, #7]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d007      	beq.n	800a642 <find_volume+0xca>
 800a632:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a636:	f003 0304 	and.w	r3, r3, #4
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d001      	beq.n	800a642 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a63e:	230a      	movs	r3, #10
 800a640:	e1db      	b.n	800a9fa <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a642:	2300      	movs	r3, #0
 800a644:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a646:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a648:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a64a:	f7ff ff3f 	bl	800a4cc <check_fs>
 800a64e:	4603      	mov	r3, r0
 800a650:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a654:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a658:	2b02      	cmp	r3, #2
 800a65a:	d149      	bne.n	800a6f0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a65c:	2300      	movs	r3, #0
 800a65e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a660:	e01e      	b.n	800a6a0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a664:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a668:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a66a:	011b      	lsls	r3, r3, #4
 800a66c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800a670:	4413      	add	r3, r2
 800a672:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a676:	3304      	adds	r3, #4
 800a678:	781b      	ldrb	r3, [r3, #0]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d006      	beq.n	800a68c <find_volume+0x114>
 800a67e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a680:	3308      	adds	r3, #8
 800a682:	4618      	mov	r0, r3
 800a684:	f7fe fe20 	bl	80092c8 <ld_dword>
 800a688:	4602      	mov	r2, r0
 800a68a:	e000      	b.n	800a68e <find_volume+0x116>
 800a68c:	2200      	movs	r2, #0
 800a68e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a690:	009b      	lsls	r3, r3, #2
 800a692:	3358      	adds	r3, #88	@ 0x58
 800a694:	443b      	add	r3, r7
 800a696:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a69a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a69c:	3301      	adds	r3, #1
 800a69e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a6a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6a2:	2b03      	cmp	r3, #3
 800a6a4:	d9dd      	bls.n	800a662 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800a6aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d002      	beq.n	800a6b6 <find_volume+0x13e>
 800a6b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6b2:	3b01      	subs	r3, #1
 800a6b4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a6b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6b8:	009b      	lsls	r3, r3, #2
 800a6ba:	3358      	adds	r3, #88	@ 0x58
 800a6bc:	443b      	add	r3, r7
 800a6be:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a6c2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a6c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d005      	beq.n	800a6d6 <find_volume+0x15e>
 800a6ca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a6cc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a6ce:	f7ff fefd 	bl	800a4cc <check_fs>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	e000      	b.n	800a6d8 <find_volume+0x160>
 800a6d6:	2303      	movs	r3, #3
 800a6d8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a6dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a6e0:	2b01      	cmp	r3, #1
 800a6e2:	d905      	bls.n	800a6f0 <find_volume+0x178>
 800a6e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6e6:	3301      	adds	r3, #1
 800a6e8:	643b      	str	r3, [r7, #64]	@ 0x40
 800a6ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6ec:	2b03      	cmp	r3, #3
 800a6ee:	d9e2      	bls.n	800a6b6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a6f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a6f4:	2b04      	cmp	r3, #4
 800a6f6:	d101      	bne.n	800a6fc <find_volume+0x184>
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	e17e      	b.n	800a9fa <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a6fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a700:	2b01      	cmp	r3, #1
 800a702:	d901      	bls.n	800a708 <find_volume+0x190>
 800a704:	230d      	movs	r3, #13
 800a706:	e178      	b.n	800a9fa <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a70a:	3330      	adds	r3, #48	@ 0x30
 800a70c:	330b      	adds	r3, #11
 800a70e:	4618      	mov	r0, r3
 800a710:	f7fe fdc2 	bl	8009298 <ld_word>
 800a714:	4603      	mov	r3, r0
 800a716:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a71a:	d001      	beq.n	800a720 <find_volume+0x1a8>
 800a71c:	230d      	movs	r3, #13
 800a71e:	e16c      	b.n	800a9fa <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a722:	3330      	adds	r3, #48	@ 0x30
 800a724:	3316      	adds	r3, #22
 800a726:	4618      	mov	r0, r3
 800a728:	f7fe fdb6 	bl	8009298 <ld_word>
 800a72c:	4603      	mov	r3, r0
 800a72e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a730:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a732:	2b00      	cmp	r3, #0
 800a734:	d106      	bne.n	800a744 <find_volume+0x1cc>
 800a736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a738:	3330      	adds	r3, #48	@ 0x30
 800a73a:	3324      	adds	r3, #36	@ 0x24
 800a73c:	4618      	mov	r0, r3
 800a73e:	f7fe fdc3 	bl	80092c8 <ld_dword>
 800a742:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800a744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a746:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a748:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a74a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a74c:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800a750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a752:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a756:	789b      	ldrb	r3, [r3, #2]
 800a758:	2b01      	cmp	r3, #1
 800a75a:	d005      	beq.n	800a768 <find_volume+0x1f0>
 800a75c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a75e:	789b      	ldrb	r3, [r3, #2]
 800a760:	2b02      	cmp	r3, #2
 800a762:	d001      	beq.n	800a768 <find_volume+0x1f0>
 800a764:	230d      	movs	r3, #13
 800a766:	e148      	b.n	800a9fa <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a76a:	789b      	ldrb	r3, [r3, #2]
 800a76c:	461a      	mov	r2, r3
 800a76e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a770:	fb02 f303 	mul.w	r3, r2, r3
 800a774:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a778:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a77c:	461a      	mov	r2, r3
 800a77e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a780:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a784:	895b      	ldrh	r3, [r3, #10]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d008      	beq.n	800a79c <find_volume+0x224>
 800a78a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a78c:	895b      	ldrh	r3, [r3, #10]
 800a78e:	461a      	mov	r2, r3
 800a790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a792:	895b      	ldrh	r3, [r3, #10]
 800a794:	3b01      	subs	r3, #1
 800a796:	4013      	ands	r3, r2
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d001      	beq.n	800a7a0 <find_volume+0x228>
 800a79c:	230d      	movs	r3, #13
 800a79e:	e12c      	b.n	800a9fa <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a7a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7a2:	3330      	adds	r3, #48	@ 0x30
 800a7a4:	3311      	adds	r3, #17
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f7fe fd76 	bl	8009298 <ld_word>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7b2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a7b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7b6:	891b      	ldrh	r3, [r3, #8]
 800a7b8:	f003 030f 	and.w	r3, r3, #15
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d001      	beq.n	800a7c6 <find_volume+0x24e>
 800a7c2:	230d      	movs	r3, #13
 800a7c4:	e119      	b.n	800a9fa <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a7c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7c8:	3330      	adds	r3, #48	@ 0x30
 800a7ca:	3313      	adds	r3, #19
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f7fe fd63 	bl	8009298 <ld_word>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a7d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d106      	bne.n	800a7ea <find_volume+0x272>
 800a7dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7de:	3330      	adds	r3, #48	@ 0x30
 800a7e0:	3320      	adds	r3, #32
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7fe fd70 	bl	80092c8 <ld_dword>
 800a7e8:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a7ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ec:	3330      	adds	r3, #48	@ 0x30
 800a7ee:	330e      	adds	r3, #14
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f7fe fd51 	bl	8009298 <ld_word>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a7fa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d101      	bne.n	800a804 <find_volume+0x28c>
 800a800:	230d      	movs	r3, #13
 800a802:	e0fa      	b.n	800a9fa <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a804:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a806:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a808:	4413      	add	r3, r2
 800a80a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a80c:	8912      	ldrh	r2, [r2, #8]
 800a80e:	0912      	lsrs	r2, r2, #4
 800a810:	b292      	uxth	r2, r2
 800a812:	4413      	add	r3, r2
 800a814:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a816:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d204      	bcs.n	800a828 <find_volume+0x2b0>
 800a81e:	230d      	movs	r3, #13
 800a820:	e0eb      	b.n	800a9fa <find_volume+0x482>
 800a822:	bf00      	nop
 800a824:	20004250 	.word	0x20004250
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a828:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a82a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a82c:	1ad3      	subs	r3, r2, r3
 800a82e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a830:	8952      	ldrh	r2, [r2, #10]
 800a832:	fbb3 f3f2 	udiv	r3, r3, r2
 800a836:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d101      	bne.n	800a842 <find_volume+0x2ca>
 800a83e:	230d      	movs	r3, #13
 800a840:	e0db      	b.n	800a9fa <find_volume+0x482>
		fmt = FS_FAT32;
 800a842:	2303      	movs	r3, #3
 800a844:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a84a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a84e:	4293      	cmp	r3, r2
 800a850:	d802      	bhi.n	800a858 <find_volume+0x2e0>
 800a852:	2302      	movs	r3, #2
 800a854:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a85a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a85e:	4293      	cmp	r3, r2
 800a860:	d802      	bhi.n	800a868 <find_volume+0x2f0>
 800a862:	2301      	movs	r3, #1
 800a864:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a86a:	1c9a      	adds	r2, r3, #2
 800a86c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a86e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800a870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a872:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a874:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a876:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a878:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a87a:	441a      	add	r2, r3
 800a87c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a87e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800a880:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a884:	441a      	add	r2, r3
 800a886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a888:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800a88a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a88e:	2b03      	cmp	r3, #3
 800a890:	d11e      	bne.n	800a8d0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a894:	3330      	adds	r3, #48	@ 0x30
 800a896:	332a      	adds	r3, #42	@ 0x2a
 800a898:	4618      	mov	r0, r3
 800a89a:	f7fe fcfd 	bl	8009298 <ld_word>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d001      	beq.n	800a8a8 <find_volume+0x330>
 800a8a4:	230d      	movs	r3, #13
 800a8a6:	e0a8      	b.n	800a9fa <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a8a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8aa:	891b      	ldrh	r3, [r3, #8]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d001      	beq.n	800a8b4 <find_volume+0x33c>
 800a8b0:	230d      	movs	r3, #13
 800a8b2:	e0a2      	b.n	800a9fa <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a8b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8b6:	3330      	adds	r3, #48	@ 0x30
 800a8b8:	332c      	adds	r3, #44	@ 0x2c
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f7fe fd04 	bl	80092c8 <ld_dword>
 800a8c0:	4602      	mov	r2, r0
 800a8c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8c4:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a8c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8c8:	695b      	ldr	r3, [r3, #20]
 800a8ca:	009b      	lsls	r3, r3, #2
 800a8cc:	647b      	str	r3, [r7, #68]	@ 0x44
 800a8ce:	e01f      	b.n	800a910 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a8d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8d2:	891b      	ldrh	r3, [r3, #8]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d101      	bne.n	800a8dc <find_volume+0x364>
 800a8d8:	230d      	movs	r3, #13
 800a8da:	e08e      	b.n	800a9fa <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a8dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8de:	6a1a      	ldr	r2, [r3, #32]
 800a8e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8e2:	441a      	add	r2, r3
 800a8e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8e6:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a8e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a8ec:	2b02      	cmp	r3, #2
 800a8ee:	d103      	bne.n	800a8f8 <find_volume+0x380>
 800a8f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8f2:	695b      	ldr	r3, [r3, #20]
 800a8f4:	005b      	lsls	r3, r3, #1
 800a8f6:	e00a      	b.n	800a90e <find_volume+0x396>
 800a8f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8fa:	695a      	ldr	r2, [r3, #20]
 800a8fc:	4613      	mov	r3, r2
 800a8fe:	005b      	lsls	r3, r3, #1
 800a900:	4413      	add	r3, r2
 800a902:	085a      	lsrs	r2, r3, #1
 800a904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a906:	695b      	ldr	r3, [r3, #20]
 800a908:	f003 0301 	and.w	r3, r3, #1
 800a90c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a90e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a912:	699a      	ldr	r2, [r3, #24]
 800a914:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a916:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800a91a:	0a5b      	lsrs	r3, r3, #9
 800a91c:	429a      	cmp	r2, r3
 800a91e:	d201      	bcs.n	800a924 <find_volume+0x3ac>
 800a920:	230d      	movs	r3, #13
 800a922:	e06a      	b.n	800a9fa <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a926:	f04f 32ff 	mov.w	r2, #4294967295
 800a92a:	611a      	str	r2, [r3, #16]
 800a92c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a92e:	691a      	ldr	r2, [r3, #16]
 800a930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a932:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800a934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a936:	2280      	movs	r2, #128	@ 0x80
 800a938:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a93a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a93e:	2b03      	cmp	r3, #3
 800a940:	d149      	bne.n	800a9d6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a944:	3330      	adds	r3, #48	@ 0x30
 800a946:	3330      	adds	r3, #48	@ 0x30
 800a948:	4618      	mov	r0, r3
 800a94a:	f7fe fca5 	bl	8009298 <ld_word>
 800a94e:	4603      	mov	r3, r0
 800a950:	2b01      	cmp	r3, #1
 800a952:	d140      	bne.n	800a9d6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a954:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a956:	3301      	adds	r3, #1
 800a958:	4619      	mov	r1, r3
 800a95a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a95c:	f7fe ff10 	bl	8009780 <move_window>
 800a960:	4603      	mov	r3, r0
 800a962:	2b00      	cmp	r3, #0
 800a964:	d137      	bne.n	800a9d6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800a966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a968:	2200      	movs	r2, #0
 800a96a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a96c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a96e:	3330      	adds	r3, #48	@ 0x30
 800a970:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a974:	4618      	mov	r0, r3
 800a976:	f7fe fc8f 	bl	8009298 <ld_word>
 800a97a:	4603      	mov	r3, r0
 800a97c:	461a      	mov	r2, r3
 800a97e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a982:	429a      	cmp	r2, r3
 800a984:	d127      	bne.n	800a9d6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a988:	3330      	adds	r3, #48	@ 0x30
 800a98a:	4618      	mov	r0, r3
 800a98c:	f7fe fc9c 	bl	80092c8 <ld_dword>
 800a990:	4603      	mov	r3, r0
 800a992:	4a1c      	ldr	r2, [pc, #112]	@ (800aa04 <find_volume+0x48c>)
 800a994:	4293      	cmp	r3, r2
 800a996:	d11e      	bne.n	800a9d6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a99a:	3330      	adds	r3, #48	@ 0x30
 800a99c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f7fe fc91 	bl	80092c8 <ld_dword>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	4a17      	ldr	r2, [pc, #92]	@ (800aa08 <find_volume+0x490>)
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	d113      	bne.n	800a9d6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a9ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9b0:	3330      	adds	r3, #48	@ 0x30
 800a9b2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f7fe fc86 	bl	80092c8 <ld_dword>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9c0:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a9c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9c4:	3330      	adds	r3, #48	@ 0x30
 800a9c6:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7fe fc7c 	bl	80092c8 <ld_dword>
 800a9d0:	4602      	mov	r2, r0
 800a9d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9d4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a9d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9d8:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800a9dc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a9de:	4b0b      	ldr	r3, [pc, #44]	@ (800aa0c <find_volume+0x494>)
 800a9e0:	881b      	ldrh	r3, [r3, #0]
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	b29a      	uxth	r2, r3
 800a9e6:	4b09      	ldr	r3, [pc, #36]	@ (800aa0c <find_volume+0x494>)
 800a9e8:	801a      	strh	r2, [r3, #0]
 800a9ea:	4b08      	ldr	r3, [pc, #32]	@ (800aa0c <find_volume+0x494>)
 800a9ec:	881a      	ldrh	r2, [r3, #0]
 800a9ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9f0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a9f2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a9f4:	f7fe fe5c 	bl	80096b0 <clear_lock>
#endif
	return FR_OK;
 800a9f8:	2300      	movs	r3, #0
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3758      	adds	r7, #88	@ 0x58
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}
 800aa02:	bf00      	nop
 800aa04:	41615252 	.word	0x41615252
 800aa08:	61417272 	.word	0x61417272
 800aa0c:	20004254 	.word	0x20004254

0800aa10 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b084      	sub	sp, #16
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800aa1a:	2309      	movs	r3, #9
 800aa1c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d01c      	beq.n	800aa5e <validate+0x4e>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d018      	beq.n	800aa5e <validate+0x4e>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d013      	beq.n	800aa5e <validate+0x4e>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	889a      	ldrh	r2, [r3, #4]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	88db      	ldrh	r3, [r3, #6]
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d10c      	bne.n	800aa5e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	785b      	ldrb	r3, [r3, #1]
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f7fe fba2 	bl	8009194 <disk_status>
 800aa50:	4603      	mov	r3, r0
 800aa52:	f003 0301 	and.w	r3, r3, #1
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d101      	bne.n	800aa5e <validate+0x4e>
			res = FR_OK;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800aa5e:	7bfb      	ldrb	r3, [r7, #15]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d102      	bne.n	800aa6a <validate+0x5a>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	e000      	b.n	800aa6c <validate+0x5c>
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	683a      	ldr	r2, [r7, #0]
 800aa6e:	6013      	str	r3, [r2, #0]
	return res;
 800aa70:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3710      	adds	r7, #16
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}
	...

0800aa7c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b088      	sub	sp, #32
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	60f8      	str	r0, [r7, #12]
 800aa84:	60b9      	str	r1, [r7, #8]
 800aa86:	4613      	mov	r3, r2
 800aa88:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800aa8e:	f107 0310 	add.w	r3, r7, #16
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7ff fcd5 	bl	800a442 <get_ldnumber>
 800aa98:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800aa9a:	69fb      	ldr	r3, [r7, #28]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	da01      	bge.n	800aaa4 <f_mount+0x28>
 800aaa0:	230b      	movs	r3, #11
 800aaa2:	e02b      	b.n	800aafc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800aaa4:	4a17      	ldr	r2, [pc, #92]	@ (800ab04 <f_mount+0x88>)
 800aaa6:	69fb      	ldr	r3, [r7, #28]
 800aaa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aaac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800aaae:	69bb      	ldr	r3, [r7, #24]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d005      	beq.n	800aac0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800aab4:	69b8      	ldr	r0, [r7, #24]
 800aab6:	f7fe fdfb 	bl	80096b0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800aaba:	69bb      	ldr	r3, [r7, #24]
 800aabc:	2200      	movs	r2, #0
 800aabe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d002      	beq.n	800aacc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2200      	movs	r2, #0
 800aaca:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800aacc:	68fa      	ldr	r2, [r7, #12]
 800aace:	490d      	ldr	r1, [pc, #52]	@ (800ab04 <f_mount+0x88>)
 800aad0:	69fb      	ldr	r3, [r7, #28]
 800aad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d002      	beq.n	800aae2 <f_mount+0x66>
 800aadc:	79fb      	ldrb	r3, [r7, #7]
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d001      	beq.n	800aae6 <f_mount+0x6a>
 800aae2:	2300      	movs	r3, #0
 800aae4:	e00a      	b.n	800aafc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800aae6:	f107 010c 	add.w	r1, r7, #12
 800aaea:	f107 0308 	add.w	r3, r7, #8
 800aaee:	2200      	movs	r2, #0
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f7ff fd41 	bl	800a578 <find_volume>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800aafa:	7dfb      	ldrb	r3, [r7, #23]
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3720      	adds	r7, #32
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}
 800ab04:	20004250 	.word	0x20004250

0800ab08 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b098      	sub	sp, #96	@ 0x60
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	60f8      	str	r0, [r7, #12]
 800ab10:	60b9      	str	r1, [r7, #8]
 800ab12:	4613      	mov	r3, r2
 800ab14:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d101      	bne.n	800ab20 <f_open+0x18>
 800ab1c:	2309      	movs	r3, #9
 800ab1e:	e1a9      	b.n	800ae74 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ab20:	79fb      	ldrb	r3, [r7, #7]
 800ab22:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ab26:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ab28:	79fa      	ldrb	r2, [r7, #7]
 800ab2a:	f107 0110 	add.w	r1, r7, #16
 800ab2e:	f107 0308 	add.w	r3, r7, #8
 800ab32:	4618      	mov	r0, r3
 800ab34:	f7ff fd20 	bl	800a578 <find_volume>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800ab3e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	f040 818d 	bne.w	800ae62 <f_open+0x35a>
		dj.obj.fs = fs;
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ab4c:	68ba      	ldr	r2, [r7, #8]
 800ab4e:	f107 0314 	add.w	r3, r7, #20
 800ab52:	4611      	mov	r1, r2
 800ab54:	4618      	mov	r0, r3
 800ab56:	f7ff fc03 	bl	800a360 <follow_path>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ab60:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d118      	bne.n	800ab9a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ab68:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ab6c:	b25b      	sxtb	r3, r3
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	da03      	bge.n	800ab7a <f_open+0x72>
				res = FR_INVALID_NAME;
 800ab72:	2306      	movs	r3, #6
 800ab74:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ab78:	e00f      	b.n	800ab9a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ab7a:	79fb      	ldrb	r3, [r7, #7]
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	bf8c      	ite	hi
 800ab80:	2301      	movhi	r3, #1
 800ab82:	2300      	movls	r3, #0
 800ab84:	b2db      	uxtb	r3, r3
 800ab86:	461a      	mov	r2, r3
 800ab88:	f107 0314 	add.w	r3, r7, #20
 800ab8c:	4611      	mov	r1, r2
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f7fe fc82 	bl	8009498 <chk_lock>
 800ab94:	4603      	mov	r3, r0
 800ab96:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ab9a:	79fb      	ldrb	r3, [r7, #7]
 800ab9c:	f003 031c 	and.w	r3, r3, #28
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d07f      	beq.n	800aca4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800aba4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d017      	beq.n	800abdc <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800abac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800abb0:	2b04      	cmp	r3, #4
 800abb2:	d10e      	bne.n	800abd2 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800abb4:	f7fe fccc 	bl	8009550 <enq_lock>
 800abb8:	4603      	mov	r3, r0
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d006      	beq.n	800abcc <f_open+0xc4>
 800abbe:	f107 0314 	add.w	r3, r7, #20
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7ff fb05 	bl	800a1d2 <dir_register>
 800abc8:	4603      	mov	r3, r0
 800abca:	e000      	b.n	800abce <f_open+0xc6>
 800abcc:	2312      	movs	r3, #18
 800abce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800abd2:	79fb      	ldrb	r3, [r7, #7]
 800abd4:	f043 0308 	orr.w	r3, r3, #8
 800abd8:	71fb      	strb	r3, [r7, #7]
 800abda:	e010      	b.n	800abfe <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800abdc:	7ebb      	ldrb	r3, [r7, #26]
 800abde:	f003 0311 	and.w	r3, r3, #17
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d003      	beq.n	800abee <f_open+0xe6>
					res = FR_DENIED;
 800abe6:	2307      	movs	r3, #7
 800abe8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800abec:	e007      	b.n	800abfe <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800abee:	79fb      	ldrb	r3, [r7, #7]
 800abf0:	f003 0304 	and.w	r3, r3, #4
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d002      	beq.n	800abfe <f_open+0xf6>
 800abf8:	2308      	movs	r3, #8
 800abfa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800abfe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d168      	bne.n	800acd8 <f_open+0x1d0>
 800ac06:	79fb      	ldrb	r3, [r7, #7]
 800ac08:	f003 0308 	and.w	r3, r3, #8
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d063      	beq.n	800acd8 <f_open+0x1d0>
				dw = GET_FATTIME();
 800ac10:	f7fb ff04 	bl	8006a1c <get_fattime>
 800ac14:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ac16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac18:	330e      	adds	r3, #14
 800ac1a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f7fe fb91 	bl	8009344 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ac22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac24:	3316      	adds	r3, #22
 800ac26:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f7fe fb8b 	bl	8009344 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ac2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac30:	330b      	adds	r3, #11
 800ac32:	2220      	movs	r2, #32
 800ac34:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ac3a:	4611      	mov	r1, r2
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f7ff fa34 	bl	800a0aa <ld_clust>
 800ac42:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ac48:	2200      	movs	r2, #0
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f7ff fa4c 	bl	800a0e8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ac50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac52:	331c      	adds	r3, #28
 800ac54:	2100      	movs	r1, #0
 800ac56:	4618      	mov	r0, r3
 800ac58:	f7fe fb74 	bl	8009344 <st_dword>
					fs->wflag = 1;
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	2201      	movs	r2, #1
 800ac60:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ac62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d037      	beq.n	800acd8 <f_open+0x1d0>
						dw = fs->winsect;
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac6c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800ac6e:	f107 0314 	add.w	r3, r7, #20
 800ac72:	2200      	movs	r2, #0
 800ac74:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800ac76:	4618      	mov	r0, r3
 800ac78:	f7fe ff5f 	bl	8009b3a <remove_chain>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800ac82:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d126      	bne.n	800acd8 <f_open+0x1d0>
							res = move_window(fs, dw);
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7fe fd76 	bl	8009780 <move_window>
 800ac94:	4603      	mov	r3, r0
 800ac96:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ac9e:	3a01      	subs	r2, #1
 800aca0:	60da      	str	r2, [r3, #12]
 800aca2:	e019      	b.n	800acd8 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800aca4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d115      	bne.n	800acd8 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800acac:	7ebb      	ldrb	r3, [r7, #26]
 800acae:	f003 0310 	and.w	r3, r3, #16
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d003      	beq.n	800acbe <f_open+0x1b6>
					res = FR_NO_FILE;
 800acb6:	2304      	movs	r3, #4
 800acb8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800acbc:	e00c      	b.n	800acd8 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800acbe:	79fb      	ldrb	r3, [r7, #7]
 800acc0:	f003 0302 	and.w	r3, r3, #2
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d007      	beq.n	800acd8 <f_open+0x1d0>
 800acc8:	7ebb      	ldrb	r3, [r7, #26]
 800acca:	f003 0301 	and.w	r3, r3, #1
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d002      	beq.n	800acd8 <f_open+0x1d0>
						res = FR_DENIED;
 800acd2:	2307      	movs	r3, #7
 800acd4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800acd8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d126      	bne.n	800ad2e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ace0:	79fb      	ldrb	r3, [r7, #7]
 800ace2:	f003 0308 	and.w	r3, r3, #8
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d003      	beq.n	800acf2 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800acea:	79fb      	ldrb	r3, [r7, #7]
 800acec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acf0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800acfa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ad00:	79fb      	ldrb	r3, [r7, #7]
 800ad02:	2b01      	cmp	r3, #1
 800ad04:	bf8c      	ite	hi
 800ad06:	2301      	movhi	r3, #1
 800ad08:	2300      	movls	r3, #0
 800ad0a:	b2db      	uxtb	r3, r3
 800ad0c:	461a      	mov	r2, r3
 800ad0e:	f107 0314 	add.w	r3, r7, #20
 800ad12:	4611      	mov	r1, r2
 800ad14:	4618      	mov	r0, r3
 800ad16:	f7fe fc3d 	bl	8009594 <inc_lock>
 800ad1a:	4602      	mov	r2, r0
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	691b      	ldr	r3, [r3, #16]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d102      	bne.n	800ad2e <f_open+0x226>
 800ad28:	2302      	movs	r3, #2
 800ad2a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ad2e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	f040 8095 	bne.w	800ae62 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ad3c:	4611      	mov	r1, r2
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7ff f9b3 	bl	800a0aa <ld_clust>
 800ad44:	4602      	mov	r2, r0
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ad4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad4c:	331c      	adds	r3, #28
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f7fe faba 	bl	80092c8 <ld_dword>
 800ad54:	4602      	mov	r2, r0
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ad60:	693a      	ldr	r2, [r7, #16]
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	88da      	ldrh	r2, [r3, #6]
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	79fa      	ldrb	r2, [r7, #7]
 800ad72:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	2200      	movs	r2, #0
 800ad78:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	2200      	movs	r2, #0
 800ad84:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	3330      	adds	r3, #48	@ 0x30
 800ad8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ad8e:	2100      	movs	r1, #0
 800ad90:	4618      	mov	r0, r3
 800ad92:	f7fe fb24 	bl	80093de <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ad96:	79fb      	ldrb	r3, [r7, #7]
 800ad98:	f003 0320 	and.w	r3, r3, #32
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d060      	beq.n	800ae62 <f_open+0x35a>
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	68db      	ldr	r3, [r3, #12]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d05c      	beq.n	800ae62 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	68da      	ldr	r2, [r3, #12]
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	895b      	ldrh	r3, [r3, #10]
 800adb4:	025b      	lsls	r3, r3, #9
 800adb6:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	689b      	ldr	r3, [r3, #8]
 800adbc:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	68db      	ldr	r3, [r3, #12]
 800adc2:	657b      	str	r3, [r7, #84]	@ 0x54
 800adc4:	e016      	b.n	800adf4 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800adca:	4618      	mov	r0, r3
 800adcc:	f7fe fd24 	bl	8009818 <get_fat>
 800add0:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800add2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800add4:	2b01      	cmp	r3, #1
 800add6:	d802      	bhi.n	800adde <f_open+0x2d6>
 800add8:	2302      	movs	r3, #2
 800adda:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800adde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ade0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ade4:	d102      	bne.n	800adec <f_open+0x2e4>
 800ade6:	2301      	movs	r3, #1
 800ade8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800adec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800adee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800adf0:	1ad3      	subs	r3, r2, r3
 800adf2:	657b      	str	r3, [r7, #84]	@ 0x54
 800adf4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d103      	bne.n	800ae04 <f_open+0x2fc>
 800adfc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800adfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d8e0      	bhi.n	800adc6 <f_open+0x2be>
				}
				fp->clust = clst;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ae08:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ae0a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d127      	bne.n	800ae62 <f_open+0x35a>
 800ae12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d022      	beq.n	800ae62 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ae20:	4618      	mov	r0, r3
 800ae22:	f7fe fcda 	bl	80097da <clust2sect>
 800ae26:	6478      	str	r0, [r7, #68]	@ 0x44
 800ae28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d103      	bne.n	800ae36 <f_open+0x32e>
						res = FR_INT_ERR;
 800ae2e:	2302      	movs	r3, #2
 800ae30:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ae34:	e015      	b.n	800ae62 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ae36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae38:	0a5a      	lsrs	r2, r3, #9
 800ae3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae3c:	441a      	add	r2, r3
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	7858      	ldrb	r0, [r3, #1]
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	6a1a      	ldr	r2, [r3, #32]
 800ae50:	2301      	movs	r3, #1
 800ae52:	f7fe f9e1 	bl	8009218 <disk_read>
 800ae56:	4603      	mov	r3, r0
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d002      	beq.n	800ae62 <f_open+0x35a>
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ae62:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d002      	beq.n	800ae70 <f_open+0x368>
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ae70:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3760      	adds	r7, #96	@ 0x60
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b08e      	sub	sp, #56	@ 0x38
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	60f8      	str	r0, [r7, #12]
 800ae84:	60b9      	str	r1, [r7, #8]
 800ae86:	607a      	str	r2, [r7, #4]
 800ae88:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	2200      	movs	r2, #0
 800ae92:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f107 0214 	add.w	r2, r7, #20
 800ae9a:	4611      	mov	r1, r2
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f7ff fdb7 	bl	800aa10 <validate>
 800aea2:	4603      	mov	r3, r0
 800aea4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800aea8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d107      	bne.n	800aec0 <f_read+0x44>
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	7d5b      	ldrb	r3, [r3, #21]
 800aeb4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800aeb8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d002      	beq.n	800aec6 <f_read+0x4a>
 800aec0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800aec4:	e115      	b.n	800b0f2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	7d1b      	ldrb	r3, [r3, #20]
 800aeca:	f003 0301 	and.w	r3, r3, #1
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d101      	bne.n	800aed6 <f_read+0x5a>
 800aed2:	2307      	movs	r3, #7
 800aed4:	e10d      	b.n	800b0f2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	68da      	ldr	r2, [r3, #12]
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	699b      	ldr	r3, [r3, #24]
 800aede:	1ad3      	subs	r3, r2, r3
 800aee0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800aee2:	687a      	ldr	r2, [r7, #4]
 800aee4:	6a3b      	ldr	r3, [r7, #32]
 800aee6:	429a      	cmp	r2, r3
 800aee8:	f240 80fe 	bls.w	800b0e8 <f_read+0x26c>
 800aeec:	6a3b      	ldr	r3, [r7, #32]
 800aeee:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800aef0:	e0fa      	b.n	800b0e8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	699b      	ldr	r3, [r3, #24]
 800aef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	f040 80c6 	bne.w	800b08c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	699b      	ldr	r3, [r3, #24]
 800af04:	0a5b      	lsrs	r3, r3, #9
 800af06:	697a      	ldr	r2, [r7, #20]
 800af08:	8952      	ldrh	r2, [r2, #10]
 800af0a:	3a01      	subs	r2, #1
 800af0c:	4013      	ands	r3, r2
 800af0e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800af10:	69fb      	ldr	r3, [r7, #28]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d12f      	bne.n	800af76 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	699b      	ldr	r3, [r3, #24]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d103      	bne.n	800af26 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	689b      	ldr	r3, [r3, #8]
 800af22:	633b      	str	r3, [r7, #48]	@ 0x30
 800af24:	e013      	b.n	800af4e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d007      	beq.n	800af3e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	699b      	ldr	r3, [r3, #24]
 800af32:	4619      	mov	r1, r3
 800af34:	68f8      	ldr	r0, [r7, #12]
 800af36:	f7fe fefd 	bl	8009d34 <clmt_clust>
 800af3a:	6338      	str	r0, [r7, #48]	@ 0x30
 800af3c:	e007      	b.n	800af4e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800af3e:	68fa      	ldr	r2, [r7, #12]
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	69db      	ldr	r3, [r3, #28]
 800af44:	4619      	mov	r1, r3
 800af46:	4610      	mov	r0, r2
 800af48:	f7fe fc66 	bl	8009818 <get_fat>
 800af4c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800af4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af50:	2b01      	cmp	r3, #1
 800af52:	d804      	bhi.n	800af5e <f_read+0xe2>
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2202      	movs	r2, #2
 800af58:	755a      	strb	r2, [r3, #21]
 800af5a:	2302      	movs	r3, #2
 800af5c:	e0c9      	b.n	800b0f2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800af5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af64:	d104      	bne.n	800af70 <f_read+0xf4>
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2201      	movs	r2, #1
 800af6a:	755a      	strb	r2, [r3, #21]
 800af6c:	2301      	movs	r3, #1
 800af6e:	e0c0      	b.n	800b0f2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af74:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800af76:	697a      	ldr	r2, [r7, #20]
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	69db      	ldr	r3, [r3, #28]
 800af7c:	4619      	mov	r1, r3
 800af7e:	4610      	mov	r0, r2
 800af80:	f7fe fc2b 	bl	80097da <clust2sect>
 800af84:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800af86:	69bb      	ldr	r3, [r7, #24]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d104      	bne.n	800af96 <f_read+0x11a>
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	2202      	movs	r2, #2
 800af90:	755a      	strb	r2, [r3, #21]
 800af92:	2302      	movs	r3, #2
 800af94:	e0ad      	b.n	800b0f2 <f_read+0x276>
			sect += csect;
 800af96:	69ba      	ldr	r2, [r7, #24]
 800af98:	69fb      	ldr	r3, [r7, #28]
 800af9a:	4413      	add	r3, r2
 800af9c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	0a5b      	lsrs	r3, r3, #9
 800afa2:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800afa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d039      	beq.n	800b01e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800afaa:	69fa      	ldr	r2, [r7, #28]
 800afac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afae:	4413      	add	r3, r2
 800afb0:	697a      	ldr	r2, [r7, #20]
 800afb2:	8952      	ldrh	r2, [r2, #10]
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d905      	bls.n	800afc4 <f_read+0x148>
					cc = fs->csize - csect;
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	895b      	ldrh	r3, [r3, #10]
 800afbc:	461a      	mov	r2, r3
 800afbe:	69fb      	ldr	r3, [r7, #28]
 800afc0:	1ad3      	subs	r3, r2, r3
 800afc2:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	7858      	ldrb	r0, [r3, #1]
 800afc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afca:	69ba      	ldr	r2, [r7, #24]
 800afcc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800afce:	f7fe f923 	bl	8009218 <disk_read>
 800afd2:	4603      	mov	r3, r0
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d004      	beq.n	800afe2 <f_read+0x166>
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	2201      	movs	r2, #1
 800afdc:	755a      	strb	r2, [r3, #21]
 800afde:	2301      	movs	r3, #1
 800afe0:	e087      	b.n	800b0f2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	7d1b      	ldrb	r3, [r3, #20]
 800afe6:	b25b      	sxtb	r3, r3
 800afe8:	2b00      	cmp	r3, #0
 800afea:	da14      	bge.n	800b016 <f_read+0x19a>
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	6a1a      	ldr	r2, [r3, #32]
 800aff0:	69bb      	ldr	r3, [r7, #24]
 800aff2:	1ad3      	subs	r3, r2, r3
 800aff4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aff6:	429a      	cmp	r2, r3
 800aff8:	d90d      	bls.n	800b016 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	6a1a      	ldr	r2, [r3, #32]
 800affe:	69bb      	ldr	r3, [r7, #24]
 800b000:	1ad3      	subs	r3, r2, r3
 800b002:	025b      	lsls	r3, r3, #9
 800b004:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b006:	18d0      	adds	r0, r2, r3
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	3330      	adds	r3, #48	@ 0x30
 800b00c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b010:	4619      	mov	r1, r3
 800b012:	f7fe f9c3 	bl	800939c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800b016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b018:	025b      	lsls	r3, r3, #9
 800b01a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800b01c:	e050      	b.n	800b0c0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	6a1b      	ldr	r3, [r3, #32]
 800b022:	69ba      	ldr	r2, [r7, #24]
 800b024:	429a      	cmp	r2, r3
 800b026:	d02e      	beq.n	800b086 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	7d1b      	ldrb	r3, [r3, #20]
 800b02c:	b25b      	sxtb	r3, r3
 800b02e:	2b00      	cmp	r3, #0
 800b030:	da18      	bge.n	800b064 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	7858      	ldrb	r0, [r3, #1]
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	6a1a      	ldr	r2, [r3, #32]
 800b040:	2301      	movs	r3, #1
 800b042:	f7fe f909 	bl	8009258 <disk_write>
 800b046:	4603      	mov	r3, r0
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d004      	beq.n	800b056 <f_read+0x1da>
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	2201      	movs	r2, #1
 800b050:	755a      	strb	r2, [r3, #21]
 800b052:	2301      	movs	r3, #1
 800b054:	e04d      	b.n	800b0f2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	7d1b      	ldrb	r3, [r3, #20]
 800b05a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b05e:	b2da      	uxtb	r2, r3
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	7858      	ldrb	r0, [r3, #1]
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b06e:	2301      	movs	r3, #1
 800b070:	69ba      	ldr	r2, [r7, #24]
 800b072:	f7fe f8d1 	bl	8009218 <disk_read>
 800b076:	4603      	mov	r3, r0
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d004      	beq.n	800b086 <f_read+0x20a>
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2201      	movs	r2, #1
 800b080:	755a      	strb	r2, [r3, #21]
 800b082:	2301      	movs	r3, #1
 800b084:	e035      	b.n	800b0f2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	69ba      	ldr	r2, [r7, #24]
 800b08a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	699b      	ldr	r3, [r3, #24]
 800b090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b094:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800b098:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800b09a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	429a      	cmp	r2, r3
 800b0a0:	d901      	bls.n	800b0a6 <f_read+0x22a>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	699b      	ldr	r3, [r3, #24]
 800b0b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0b4:	4413      	add	r3, r2
 800b0b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b0bc:	f7fe f96e 	bl	800939c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800b0c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b0c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0c4:	4413      	add	r3, r2
 800b0c6:	627b      	str	r3, [r7, #36]	@ 0x24
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	699a      	ldr	r2, [r3, #24]
 800b0cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ce:	441a      	add	r2, r3
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	619a      	str	r2, [r3, #24]
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	681a      	ldr	r2, [r3, #0]
 800b0d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0da:	441a      	add	r2, r3
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	601a      	str	r2, [r3, #0]
 800b0e0:	687a      	ldr	r2, [r7, #4]
 800b0e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0e4:	1ad3      	subs	r3, r2, r3
 800b0e6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	f47f af01 	bne.w	800aef2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800b0f0:	2300      	movs	r3, #0
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3738      	adds	r7, #56	@ 0x38
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}

0800b0fa <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800b0fa:	b580      	push	{r7, lr}
 800b0fc:	b090      	sub	sp, #64	@ 0x40
 800b0fe:	af00      	add	r7, sp, #0
 800b100:	6078      	str	r0, [r7, #4]
 800b102:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f107 0208 	add.w	r2, r7, #8
 800b10a:	4611      	mov	r1, r2
 800b10c:	4618      	mov	r0, r3
 800b10e:	f7ff fc7f 	bl	800aa10 <validate>
 800b112:	4603      	mov	r3, r0
 800b114:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800b118:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d103      	bne.n	800b128 <f_lseek+0x2e>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	7d5b      	ldrb	r3, [r3, #21]
 800b124:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800b128:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d002      	beq.n	800b136 <f_lseek+0x3c>
 800b130:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b134:	e1e6      	b.n	800b504 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	f000 80d1 	beq.w	800b2e2 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b146:	d15a      	bne.n	800b1fe <f_lseek+0x104>
			tbl = fp->cltbl;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b14c:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800b14e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b150:	1d1a      	adds	r2, r3, #4
 800b152:	627a      	str	r2, [r7, #36]	@ 0x24
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	617b      	str	r3, [r7, #20]
 800b158:	2302      	movs	r3, #2
 800b15a:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	689b      	ldr	r3, [r3, #8]
 800b160:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800b162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b164:	2b00      	cmp	r3, #0
 800b166:	d03a      	beq.n	800b1de <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800b168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b16a:	613b      	str	r3, [r7, #16]
 800b16c:	2300      	movs	r3, #0
 800b16e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b172:	3302      	adds	r3, #2
 800b174:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800b176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b178:	60fb      	str	r3, [r7, #12]
 800b17a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b17c:	3301      	adds	r3, #1
 800b17e:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b184:	4618      	mov	r0, r3
 800b186:	f7fe fb47 	bl	8009818 <get_fat>
 800b18a:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800b18c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b18e:	2b01      	cmp	r3, #1
 800b190:	d804      	bhi.n	800b19c <f_lseek+0xa2>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2202      	movs	r2, #2
 800b196:	755a      	strb	r2, [r3, #21]
 800b198:	2302      	movs	r3, #2
 800b19a:	e1b3      	b.n	800b504 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b19c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b19e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1a2:	d104      	bne.n	800b1ae <f_lseek+0xb4>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	755a      	strb	r2, [r3, #21]
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	e1aa      	b.n	800b504 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	3301      	adds	r3, #1
 800b1b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d0de      	beq.n	800b176 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800b1b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d809      	bhi.n	800b1d4 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800b1c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1c2:	1d1a      	adds	r2, r3, #4
 800b1c4:	627a      	str	r2, [r7, #36]	@ 0x24
 800b1c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b1c8:	601a      	str	r2, [r3, #0]
 800b1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1cc:	1d1a      	adds	r2, r3, #4
 800b1ce:	627a      	str	r2, [r7, #36]	@ 0x24
 800b1d0:	693a      	ldr	r2, [r7, #16]
 800b1d2:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	695b      	ldr	r3, [r3, #20]
 800b1d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d3c4      	bcc.n	800b168 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b1e4:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800b1e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	d803      	bhi.n	800b1f6 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800b1ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	601a      	str	r2, [r3, #0]
 800b1f4:	e184      	b.n	800b500 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800b1f6:	2311      	movs	r3, #17
 800b1f8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800b1fc:	e180      	b.n	800b500 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	68db      	ldr	r3, [r3, #12]
 800b202:	683a      	ldr	r2, [r7, #0]
 800b204:	429a      	cmp	r2, r3
 800b206:	d902      	bls.n	800b20e <f_lseek+0x114>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	68db      	ldr	r3, [r3, #12]
 800b20c:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	683a      	ldr	r2, [r7, #0]
 800b212:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	2b00      	cmp	r3, #0
 800b218:	f000 8172 	beq.w	800b500 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	3b01      	subs	r3, #1
 800b220:	4619      	mov	r1, r3
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f7fe fd86 	bl	8009d34 <clmt_clust>
 800b228:	4602      	mov	r2, r0
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800b22e:	68ba      	ldr	r2, [r7, #8]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	69db      	ldr	r3, [r3, #28]
 800b234:	4619      	mov	r1, r3
 800b236:	4610      	mov	r0, r2
 800b238:	f7fe facf 	bl	80097da <clust2sect>
 800b23c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800b23e:	69bb      	ldr	r3, [r7, #24]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d104      	bne.n	800b24e <f_lseek+0x154>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2202      	movs	r2, #2
 800b248:	755a      	strb	r2, [r3, #21]
 800b24a:	2302      	movs	r3, #2
 800b24c:	e15a      	b.n	800b504 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	3b01      	subs	r3, #1
 800b252:	0a5b      	lsrs	r3, r3, #9
 800b254:	68ba      	ldr	r2, [r7, #8]
 800b256:	8952      	ldrh	r2, [r2, #10]
 800b258:	3a01      	subs	r2, #1
 800b25a:	4013      	ands	r3, r2
 800b25c:	69ba      	ldr	r2, [r7, #24]
 800b25e:	4413      	add	r3, r2
 800b260:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	699b      	ldr	r3, [r3, #24]
 800b266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	f000 8148 	beq.w	800b500 <f_lseek+0x406>
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6a1b      	ldr	r3, [r3, #32]
 800b274:	69ba      	ldr	r2, [r7, #24]
 800b276:	429a      	cmp	r2, r3
 800b278:	f000 8142 	beq.w	800b500 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	7d1b      	ldrb	r3, [r3, #20]
 800b280:	b25b      	sxtb	r3, r3
 800b282:	2b00      	cmp	r3, #0
 800b284:	da18      	bge.n	800b2b8 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	7858      	ldrb	r0, [r3, #1]
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6a1a      	ldr	r2, [r3, #32]
 800b294:	2301      	movs	r3, #1
 800b296:	f7fd ffdf 	bl	8009258 <disk_write>
 800b29a:	4603      	mov	r3, r0
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d004      	beq.n	800b2aa <f_lseek+0x1b0>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	755a      	strb	r2, [r3, #21]
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	e12c      	b.n	800b504 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	7d1b      	ldrb	r3, [r3, #20]
 800b2ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2b2:	b2da      	uxtb	r2, r3
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	7858      	ldrb	r0, [r3, #1]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	69ba      	ldr	r2, [r7, #24]
 800b2c6:	f7fd ffa7 	bl	8009218 <disk_read>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d004      	beq.n	800b2da <f_lseek+0x1e0>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2201      	movs	r2, #1
 800b2d4:	755a      	strb	r2, [r3, #21]
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	e114      	b.n	800b504 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	69ba      	ldr	r2, [r7, #24]
 800b2de:	621a      	str	r2, [r3, #32]
 800b2e0:	e10e      	b.n	800b500 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	68db      	ldr	r3, [r3, #12]
 800b2e6:	683a      	ldr	r2, [r7, #0]
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d908      	bls.n	800b2fe <f_lseek+0x204>
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	7d1b      	ldrb	r3, [r3, #20]
 800b2f0:	f003 0302 	and.w	r3, r3, #2
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d102      	bne.n	800b2fe <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	68db      	ldr	r3, [r3, #12]
 800b2fc:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	699b      	ldr	r3, [r3, #24]
 800b302:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800b304:	2300      	movs	r3, #0
 800b306:	637b      	str	r3, [r7, #52]	@ 0x34
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b30c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	2b00      	cmp	r3, #0
 800b312:	f000 80a7 	beq.w	800b464 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	895b      	ldrh	r3, [r3, #10]
 800b31a:	025b      	lsls	r3, r3, #9
 800b31c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800b31e:	6a3b      	ldr	r3, [r7, #32]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d01b      	beq.n	800b35c <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	1e5a      	subs	r2, r3, #1
 800b328:	69fb      	ldr	r3, [r7, #28]
 800b32a:	fbb2 f2f3 	udiv	r2, r2, r3
 800b32e:	6a3b      	ldr	r3, [r7, #32]
 800b330:	1e59      	subs	r1, r3, #1
 800b332:	69fb      	ldr	r3, [r7, #28]
 800b334:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800b338:	429a      	cmp	r2, r3
 800b33a:	d30f      	bcc.n	800b35c <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800b33c:	6a3b      	ldr	r3, [r7, #32]
 800b33e:	1e5a      	subs	r2, r3, #1
 800b340:	69fb      	ldr	r3, [r7, #28]
 800b342:	425b      	negs	r3, r3
 800b344:	401a      	ands	r2, r3
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	699b      	ldr	r3, [r3, #24]
 800b34e:	683a      	ldr	r2, [r7, #0]
 800b350:	1ad3      	subs	r3, r2, r3
 800b352:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	69db      	ldr	r3, [r3, #28]
 800b358:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b35a:	e022      	b.n	800b3a2 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	689b      	ldr	r3, [r3, #8]
 800b360:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800b362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b364:	2b00      	cmp	r3, #0
 800b366:	d119      	bne.n	800b39c <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2100      	movs	r1, #0
 800b36c:	4618      	mov	r0, r3
 800b36e:	f7fe fc49 	bl	8009c04 <create_chain>
 800b372:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b376:	2b01      	cmp	r3, #1
 800b378:	d104      	bne.n	800b384 <f_lseek+0x28a>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2202      	movs	r2, #2
 800b37e:	755a      	strb	r2, [r3, #21]
 800b380:	2302      	movs	r3, #2
 800b382:	e0bf      	b.n	800b504 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b38a:	d104      	bne.n	800b396 <f_lseek+0x29c>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2201      	movs	r2, #1
 800b390:	755a      	strb	r2, [r3, #21]
 800b392:	2301      	movs	r3, #1
 800b394:	e0b6      	b.n	800b504 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b39a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b3a0:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800b3a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d05d      	beq.n	800b464 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800b3a8:	e03a      	b.n	800b420 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800b3aa:	683a      	ldr	r2, [r7, #0]
 800b3ac:	69fb      	ldr	r3, [r7, #28]
 800b3ae:	1ad3      	subs	r3, r2, r3
 800b3b0:	603b      	str	r3, [r7, #0]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	699a      	ldr	r2, [r3, #24]
 800b3b6:	69fb      	ldr	r3, [r7, #28]
 800b3b8:	441a      	add	r2, r3
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	7d1b      	ldrb	r3, [r3, #20]
 800b3c2:	f003 0302 	and.w	r3, r3, #2
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d00b      	beq.n	800b3e2 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f7fe fc18 	bl	8009c04 <create_chain>
 800b3d4:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800b3d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d108      	bne.n	800b3ee <f_lseek+0x2f4>
							ofs = 0; break;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	603b      	str	r3, [r7, #0]
 800b3e0:	e022      	b.n	800b428 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f7fe fa16 	bl	8009818 <get_fat>
 800b3ec:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b3ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3f4:	d104      	bne.n	800b400 <f_lseek+0x306>
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2201      	movs	r2, #1
 800b3fa:	755a      	strb	r2, [r3, #21]
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	e081      	b.n	800b504 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800b400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b402:	2b01      	cmp	r3, #1
 800b404:	d904      	bls.n	800b410 <f_lseek+0x316>
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	695b      	ldr	r3, [r3, #20]
 800b40a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b40c:	429a      	cmp	r2, r3
 800b40e:	d304      	bcc.n	800b41a <f_lseek+0x320>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2202      	movs	r2, #2
 800b414:	755a      	strb	r2, [r3, #21]
 800b416:	2302      	movs	r3, #2
 800b418:	e074      	b.n	800b504 <f_lseek+0x40a>
					fp->clust = clst;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b41e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800b420:	683a      	ldr	r2, [r7, #0]
 800b422:	69fb      	ldr	r3, [r7, #28]
 800b424:	429a      	cmp	r2, r3
 800b426:	d8c0      	bhi.n	800b3aa <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	699a      	ldr	r2, [r3, #24]
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	441a      	add	r2, r3
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d012      	beq.n	800b464 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b442:	4618      	mov	r0, r3
 800b444:	f7fe f9c9 	bl	80097da <clust2sect>
 800b448:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800b44a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d104      	bne.n	800b45a <f_lseek+0x360>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2202      	movs	r2, #2
 800b454:	755a      	strb	r2, [r3, #21]
 800b456:	2302      	movs	r3, #2
 800b458:	e054      	b.n	800b504 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	0a5b      	lsrs	r3, r3, #9
 800b45e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b460:	4413      	add	r3, r2
 800b462:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	699a      	ldr	r2, [r3, #24]
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	68db      	ldr	r3, [r3, #12]
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d90a      	bls.n	800b486 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	699a      	ldr	r2, [r3, #24]
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	7d1b      	ldrb	r3, [r3, #20]
 800b47c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b480:	b2da      	uxtb	r2, r3
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	699b      	ldr	r3, [r3, #24]
 800b48a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d036      	beq.n	800b500 <f_lseek+0x406>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6a1b      	ldr	r3, [r3, #32]
 800b496:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b498:	429a      	cmp	r2, r3
 800b49a:	d031      	beq.n	800b500 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	7d1b      	ldrb	r3, [r3, #20]
 800b4a0:	b25b      	sxtb	r3, r3
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	da18      	bge.n	800b4d8 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	7858      	ldrb	r0, [r3, #1]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6a1a      	ldr	r2, [r3, #32]
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	f7fd fecf 	bl	8009258 <disk_write>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d004      	beq.n	800b4ca <f_lseek+0x3d0>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	755a      	strb	r2, [r3, #21]
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	e01c      	b.n	800b504 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	7d1b      	ldrb	r3, [r3, #20]
 800b4ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4d2:	b2da      	uxtb	r2, r3
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	7858      	ldrb	r0, [r3, #1]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b4e6:	f7fd fe97 	bl	8009218 <disk_read>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d004      	beq.n	800b4fa <f_lseek+0x400>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	755a      	strb	r2, [r3, #21]
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	e004      	b.n	800b504 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b4fe:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800b500:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800b504:	4618      	mov	r0, r3
 800b506:	3740      	adds	r7, #64	@ 0x40
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b092      	sub	sp, #72	@ 0x48
 800b510:	af00      	add	r7, sp, #0
 800b512:	60f8      	str	r0, [r7, #12]
 800b514:	60b9      	str	r1, [r7, #8]
 800b516:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800b518:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800b51c:	f107 030c 	add.w	r3, r7, #12
 800b520:	2200      	movs	r2, #0
 800b522:	4618      	mov	r0, r3
 800b524:	f7ff f828 	bl	800a578 <find_volume>
 800b528:	4603      	mov	r3, r0
 800b52a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800b52e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b532:	2b00      	cmp	r3, #0
 800b534:	f040 8099 	bne.w	800b66a <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800b538:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800b53e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b540:	691a      	ldr	r2, [r3, #16]
 800b542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b544:	695b      	ldr	r3, [r3, #20]
 800b546:	3b02      	subs	r3, #2
 800b548:	429a      	cmp	r2, r3
 800b54a:	d804      	bhi.n	800b556 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800b54c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b54e:	691a      	ldr	r2, [r3, #16]
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	601a      	str	r2, [r3, #0]
 800b554:	e089      	b.n	800b66a <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800b556:	2300      	movs	r3, #0
 800b558:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800b55a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b55c:	781b      	ldrb	r3, [r3, #0]
 800b55e:	2b01      	cmp	r3, #1
 800b560:	d128      	bne.n	800b5b4 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800b562:	2302      	movs	r3, #2
 800b564:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b568:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800b56a:	f107 0314 	add.w	r3, r7, #20
 800b56e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b570:	4618      	mov	r0, r3
 800b572:	f7fe f951 	bl	8009818 <get_fat>
 800b576:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800b578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b57a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b57e:	d103      	bne.n	800b588 <f_getfree+0x7c>
 800b580:	2301      	movs	r3, #1
 800b582:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b586:	e063      	b.n	800b650 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800b588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b58a:	2b01      	cmp	r3, #1
 800b58c:	d103      	bne.n	800b596 <f_getfree+0x8a>
 800b58e:	2302      	movs	r3, #2
 800b590:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b594:	e05c      	b.n	800b650 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800b596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d102      	bne.n	800b5a2 <f_getfree+0x96>
 800b59c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b59e:	3301      	adds	r3, #1
 800b5a0:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800b5a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5a4:	3301      	adds	r3, #1
 800b5a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b5a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5aa:	695b      	ldr	r3, [r3, #20]
 800b5ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b5ae:	429a      	cmp	r2, r3
 800b5b0:	d3db      	bcc.n	800b56a <f_getfree+0x5e>
 800b5b2:	e04d      	b.n	800b650 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800b5b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5b6:	695b      	ldr	r3, [r3, #20]
 800b5b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b5ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5bc:	6a1b      	ldr	r3, [r3, #32]
 800b5be:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800b5c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d113      	bne.n	800b5f6 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800b5ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b5d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5d2:	1c5a      	adds	r2, r3, #1
 800b5d4:	63ba      	str	r2, [r7, #56]	@ 0x38
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	f7fe f8d2 	bl	8009780 <move_window>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800b5e2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d131      	bne.n	800b64e <f_getfree+0x142>
							p = fs->win;
 800b5ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5ec:	3330      	adds	r3, #48	@ 0x30
 800b5ee:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800b5f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b5f4:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800b5f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5f8:	781b      	ldrb	r3, [r3, #0]
 800b5fa:	2b02      	cmp	r3, #2
 800b5fc:	d10f      	bne.n	800b61e <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800b5fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b600:	f7fd fe4a 	bl	8009298 <ld_word>
 800b604:	4603      	mov	r3, r0
 800b606:	2b00      	cmp	r3, #0
 800b608:	d102      	bne.n	800b610 <f_getfree+0x104>
 800b60a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b60c:	3301      	adds	r3, #1
 800b60e:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800b610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b612:	3302      	adds	r3, #2
 800b614:	633b      	str	r3, [r7, #48]	@ 0x30
 800b616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b618:	3b02      	subs	r3, #2
 800b61a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b61c:	e010      	b.n	800b640 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800b61e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b620:	f7fd fe52 	bl	80092c8 <ld_dword>
 800b624:	4603      	mov	r3, r0
 800b626:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d102      	bne.n	800b634 <f_getfree+0x128>
 800b62e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b630:	3301      	adds	r3, #1
 800b632:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800b634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b636:	3304      	adds	r3, #4
 800b638:	633b      	str	r3, [r7, #48]	@ 0x30
 800b63a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b63c:	3b04      	subs	r3, #4
 800b63e:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800b640:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b642:	3b01      	subs	r3, #1
 800b644:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d1bd      	bne.n	800b5c8 <f_getfree+0xbc>
 800b64c:	e000      	b.n	800b650 <f_getfree+0x144>
							if (res != FR_OK) break;
 800b64e:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b654:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800b656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b658:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b65a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800b65c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b65e:	791a      	ldrb	r2, [r3, #4]
 800b660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b662:	f042 0201 	orr.w	r2, r2, #1
 800b666:	b2d2      	uxtb	r2, r2
 800b668:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800b66a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3748      	adds	r7, #72	@ 0x48
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
	...

0800b678 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b678:	b480      	push	{r7}
 800b67a:	b087      	sub	sp, #28
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	60f8      	str	r0, [r7, #12]
 800b680:	60b9      	str	r1, [r7, #8]
 800b682:	4613      	mov	r3, r2
 800b684:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b686:	2301      	movs	r3, #1
 800b688:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b68a:	2300      	movs	r3, #0
 800b68c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b68e:	4b1f      	ldr	r3, [pc, #124]	@ (800b70c <FATFS_LinkDriverEx+0x94>)
 800b690:	7a5b      	ldrb	r3, [r3, #9]
 800b692:	b2db      	uxtb	r3, r3
 800b694:	2b00      	cmp	r3, #0
 800b696:	d131      	bne.n	800b6fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b698:	4b1c      	ldr	r3, [pc, #112]	@ (800b70c <FATFS_LinkDriverEx+0x94>)
 800b69a:	7a5b      	ldrb	r3, [r3, #9]
 800b69c:	b2db      	uxtb	r3, r3
 800b69e:	461a      	mov	r2, r3
 800b6a0:	4b1a      	ldr	r3, [pc, #104]	@ (800b70c <FATFS_LinkDriverEx+0x94>)
 800b6a2:	2100      	movs	r1, #0
 800b6a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b6a6:	4b19      	ldr	r3, [pc, #100]	@ (800b70c <FATFS_LinkDriverEx+0x94>)
 800b6a8:	7a5b      	ldrb	r3, [r3, #9]
 800b6aa:	b2db      	uxtb	r3, r3
 800b6ac:	4a17      	ldr	r2, [pc, #92]	@ (800b70c <FATFS_LinkDriverEx+0x94>)
 800b6ae:	009b      	lsls	r3, r3, #2
 800b6b0:	4413      	add	r3, r2
 800b6b2:	68fa      	ldr	r2, [r7, #12]
 800b6b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b6b6:	4b15      	ldr	r3, [pc, #84]	@ (800b70c <FATFS_LinkDriverEx+0x94>)
 800b6b8:	7a5b      	ldrb	r3, [r3, #9]
 800b6ba:	b2db      	uxtb	r3, r3
 800b6bc:	461a      	mov	r2, r3
 800b6be:	4b13      	ldr	r3, [pc, #76]	@ (800b70c <FATFS_LinkDriverEx+0x94>)
 800b6c0:	4413      	add	r3, r2
 800b6c2:	79fa      	ldrb	r2, [r7, #7]
 800b6c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b6c6:	4b11      	ldr	r3, [pc, #68]	@ (800b70c <FATFS_LinkDriverEx+0x94>)
 800b6c8:	7a5b      	ldrb	r3, [r3, #9]
 800b6ca:	b2db      	uxtb	r3, r3
 800b6cc:	1c5a      	adds	r2, r3, #1
 800b6ce:	b2d1      	uxtb	r1, r2
 800b6d0:	4a0e      	ldr	r2, [pc, #56]	@ (800b70c <FATFS_LinkDriverEx+0x94>)
 800b6d2:	7251      	strb	r1, [r2, #9]
 800b6d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b6d6:	7dbb      	ldrb	r3, [r7, #22]
 800b6d8:	3330      	adds	r3, #48	@ 0x30
 800b6da:	b2da      	uxtb	r2, r3
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	223a      	movs	r2, #58	@ 0x3a
 800b6e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	3302      	adds	r3, #2
 800b6ec:	222f      	movs	r2, #47	@ 0x2f
 800b6ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	3303      	adds	r3, #3
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b6fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	371c      	adds	r7, #28
 800b702:	46bd      	mov	sp, r7
 800b704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b708:	4770      	bx	lr
 800b70a:	bf00      	nop
 800b70c:	20004278 	.word	0x20004278

0800b710 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b082      	sub	sp, #8
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b71a:	2200      	movs	r2, #0
 800b71c:	6839      	ldr	r1, [r7, #0]
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f7ff ffaa 	bl	800b678 <FATFS_LinkDriverEx>
 800b724:	4603      	mov	r3, r0
}
 800b726:	4618      	mov	r0, r3
 800b728:	3708      	adds	r7, #8
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}
	...

0800b730 <malloc>:
 800b730:	4b02      	ldr	r3, [pc, #8]	@ (800b73c <malloc+0xc>)
 800b732:	4601      	mov	r1, r0
 800b734:	6818      	ldr	r0, [r3, #0]
 800b736:	f000 b82d 	b.w	800b794 <_malloc_r>
 800b73a:	bf00      	nop
 800b73c:	20000030 	.word	0x20000030

0800b740 <free>:
 800b740:	4b02      	ldr	r3, [pc, #8]	@ (800b74c <free+0xc>)
 800b742:	4601      	mov	r1, r0
 800b744:	6818      	ldr	r0, [r3, #0]
 800b746:	f000 bae1 	b.w	800bd0c <_free_r>
 800b74a:	bf00      	nop
 800b74c:	20000030 	.word	0x20000030

0800b750 <sbrk_aligned>:
 800b750:	b570      	push	{r4, r5, r6, lr}
 800b752:	4e0f      	ldr	r6, [pc, #60]	@ (800b790 <sbrk_aligned+0x40>)
 800b754:	460c      	mov	r4, r1
 800b756:	6831      	ldr	r1, [r6, #0]
 800b758:	4605      	mov	r5, r0
 800b75a:	b911      	cbnz	r1, 800b762 <sbrk_aligned+0x12>
 800b75c:	f000 fa5a 	bl	800bc14 <_sbrk_r>
 800b760:	6030      	str	r0, [r6, #0]
 800b762:	4621      	mov	r1, r4
 800b764:	4628      	mov	r0, r5
 800b766:	f000 fa55 	bl	800bc14 <_sbrk_r>
 800b76a:	1c43      	adds	r3, r0, #1
 800b76c:	d103      	bne.n	800b776 <sbrk_aligned+0x26>
 800b76e:	f04f 34ff 	mov.w	r4, #4294967295
 800b772:	4620      	mov	r0, r4
 800b774:	bd70      	pop	{r4, r5, r6, pc}
 800b776:	1cc4      	adds	r4, r0, #3
 800b778:	f024 0403 	bic.w	r4, r4, #3
 800b77c:	42a0      	cmp	r0, r4
 800b77e:	d0f8      	beq.n	800b772 <sbrk_aligned+0x22>
 800b780:	1a21      	subs	r1, r4, r0
 800b782:	4628      	mov	r0, r5
 800b784:	f000 fa46 	bl	800bc14 <_sbrk_r>
 800b788:	3001      	adds	r0, #1
 800b78a:	d1f2      	bne.n	800b772 <sbrk_aligned+0x22>
 800b78c:	e7ef      	b.n	800b76e <sbrk_aligned+0x1e>
 800b78e:	bf00      	nop
 800b790:	20004284 	.word	0x20004284

0800b794 <_malloc_r>:
 800b794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b798:	1ccd      	adds	r5, r1, #3
 800b79a:	f025 0503 	bic.w	r5, r5, #3
 800b79e:	3508      	adds	r5, #8
 800b7a0:	2d0c      	cmp	r5, #12
 800b7a2:	bf38      	it	cc
 800b7a4:	250c      	movcc	r5, #12
 800b7a6:	2d00      	cmp	r5, #0
 800b7a8:	4606      	mov	r6, r0
 800b7aa:	db01      	blt.n	800b7b0 <_malloc_r+0x1c>
 800b7ac:	42a9      	cmp	r1, r5
 800b7ae:	d904      	bls.n	800b7ba <_malloc_r+0x26>
 800b7b0:	230c      	movs	r3, #12
 800b7b2:	6033      	str	r3, [r6, #0]
 800b7b4:	2000      	movs	r0, #0
 800b7b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b890 <_malloc_r+0xfc>
 800b7be:	f000 f869 	bl	800b894 <__malloc_lock>
 800b7c2:	f8d8 3000 	ldr.w	r3, [r8]
 800b7c6:	461c      	mov	r4, r3
 800b7c8:	bb44      	cbnz	r4, 800b81c <_malloc_r+0x88>
 800b7ca:	4629      	mov	r1, r5
 800b7cc:	4630      	mov	r0, r6
 800b7ce:	f7ff ffbf 	bl	800b750 <sbrk_aligned>
 800b7d2:	1c43      	adds	r3, r0, #1
 800b7d4:	4604      	mov	r4, r0
 800b7d6:	d158      	bne.n	800b88a <_malloc_r+0xf6>
 800b7d8:	f8d8 4000 	ldr.w	r4, [r8]
 800b7dc:	4627      	mov	r7, r4
 800b7de:	2f00      	cmp	r7, #0
 800b7e0:	d143      	bne.n	800b86a <_malloc_r+0xd6>
 800b7e2:	2c00      	cmp	r4, #0
 800b7e4:	d04b      	beq.n	800b87e <_malloc_r+0xea>
 800b7e6:	6823      	ldr	r3, [r4, #0]
 800b7e8:	4639      	mov	r1, r7
 800b7ea:	4630      	mov	r0, r6
 800b7ec:	eb04 0903 	add.w	r9, r4, r3
 800b7f0:	f000 fa10 	bl	800bc14 <_sbrk_r>
 800b7f4:	4581      	cmp	r9, r0
 800b7f6:	d142      	bne.n	800b87e <_malloc_r+0xea>
 800b7f8:	6821      	ldr	r1, [r4, #0]
 800b7fa:	1a6d      	subs	r5, r5, r1
 800b7fc:	4629      	mov	r1, r5
 800b7fe:	4630      	mov	r0, r6
 800b800:	f7ff ffa6 	bl	800b750 <sbrk_aligned>
 800b804:	3001      	adds	r0, #1
 800b806:	d03a      	beq.n	800b87e <_malloc_r+0xea>
 800b808:	6823      	ldr	r3, [r4, #0]
 800b80a:	442b      	add	r3, r5
 800b80c:	6023      	str	r3, [r4, #0]
 800b80e:	f8d8 3000 	ldr.w	r3, [r8]
 800b812:	685a      	ldr	r2, [r3, #4]
 800b814:	bb62      	cbnz	r2, 800b870 <_malloc_r+0xdc>
 800b816:	f8c8 7000 	str.w	r7, [r8]
 800b81a:	e00f      	b.n	800b83c <_malloc_r+0xa8>
 800b81c:	6822      	ldr	r2, [r4, #0]
 800b81e:	1b52      	subs	r2, r2, r5
 800b820:	d420      	bmi.n	800b864 <_malloc_r+0xd0>
 800b822:	2a0b      	cmp	r2, #11
 800b824:	d917      	bls.n	800b856 <_malloc_r+0xc2>
 800b826:	1961      	adds	r1, r4, r5
 800b828:	42a3      	cmp	r3, r4
 800b82a:	6025      	str	r5, [r4, #0]
 800b82c:	bf18      	it	ne
 800b82e:	6059      	strne	r1, [r3, #4]
 800b830:	6863      	ldr	r3, [r4, #4]
 800b832:	bf08      	it	eq
 800b834:	f8c8 1000 	streq.w	r1, [r8]
 800b838:	5162      	str	r2, [r4, r5]
 800b83a:	604b      	str	r3, [r1, #4]
 800b83c:	4630      	mov	r0, r6
 800b83e:	f000 f82f 	bl	800b8a0 <__malloc_unlock>
 800b842:	f104 000b 	add.w	r0, r4, #11
 800b846:	1d23      	adds	r3, r4, #4
 800b848:	f020 0007 	bic.w	r0, r0, #7
 800b84c:	1ac2      	subs	r2, r0, r3
 800b84e:	bf1c      	itt	ne
 800b850:	1a1b      	subne	r3, r3, r0
 800b852:	50a3      	strne	r3, [r4, r2]
 800b854:	e7af      	b.n	800b7b6 <_malloc_r+0x22>
 800b856:	6862      	ldr	r2, [r4, #4]
 800b858:	42a3      	cmp	r3, r4
 800b85a:	bf0c      	ite	eq
 800b85c:	f8c8 2000 	streq.w	r2, [r8]
 800b860:	605a      	strne	r2, [r3, #4]
 800b862:	e7eb      	b.n	800b83c <_malloc_r+0xa8>
 800b864:	4623      	mov	r3, r4
 800b866:	6864      	ldr	r4, [r4, #4]
 800b868:	e7ae      	b.n	800b7c8 <_malloc_r+0x34>
 800b86a:	463c      	mov	r4, r7
 800b86c:	687f      	ldr	r7, [r7, #4]
 800b86e:	e7b6      	b.n	800b7de <_malloc_r+0x4a>
 800b870:	461a      	mov	r2, r3
 800b872:	685b      	ldr	r3, [r3, #4]
 800b874:	42a3      	cmp	r3, r4
 800b876:	d1fb      	bne.n	800b870 <_malloc_r+0xdc>
 800b878:	2300      	movs	r3, #0
 800b87a:	6053      	str	r3, [r2, #4]
 800b87c:	e7de      	b.n	800b83c <_malloc_r+0xa8>
 800b87e:	230c      	movs	r3, #12
 800b880:	6033      	str	r3, [r6, #0]
 800b882:	4630      	mov	r0, r6
 800b884:	f000 f80c 	bl	800b8a0 <__malloc_unlock>
 800b888:	e794      	b.n	800b7b4 <_malloc_r+0x20>
 800b88a:	6005      	str	r5, [r0, #0]
 800b88c:	e7d6      	b.n	800b83c <_malloc_r+0xa8>
 800b88e:	bf00      	nop
 800b890:	20004288 	.word	0x20004288

0800b894 <__malloc_lock>:
 800b894:	4801      	ldr	r0, [pc, #4]	@ (800b89c <__malloc_lock+0x8>)
 800b896:	f000 ba0a 	b.w	800bcae <__retarget_lock_acquire_recursive>
 800b89a:	bf00      	nop
 800b89c:	200043cc 	.word	0x200043cc

0800b8a0 <__malloc_unlock>:
 800b8a0:	4801      	ldr	r0, [pc, #4]	@ (800b8a8 <__malloc_unlock+0x8>)
 800b8a2:	f000 ba05 	b.w	800bcb0 <__retarget_lock_release_recursive>
 800b8a6:	bf00      	nop
 800b8a8:	200043cc 	.word	0x200043cc

0800b8ac <rand>:
 800b8ac:	4b16      	ldr	r3, [pc, #88]	@ (800b908 <rand+0x5c>)
 800b8ae:	b510      	push	{r4, lr}
 800b8b0:	681c      	ldr	r4, [r3, #0]
 800b8b2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b8b4:	b9b3      	cbnz	r3, 800b8e4 <rand+0x38>
 800b8b6:	2018      	movs	r0, #24
 800b8b8:	f7ff ff3a 	bl	800b730 <malloc>
 800b8bc:	4602      	mov	r2, r0
 800b8be:	6320      	str	r0, [r4, #48]	@ 0x30
 800b8c0:	b920      	cbnz	r0, 800b8cc <rand+0x20>
 800b8c2:	4b12      	ldr	r3, [pc, #72]	@ (800b90c <rand+0x60>)
 800b8c4:	4812      	ldr	r0, [pc, #72]	@ (800b910 <rand+0x64>)
 800b8c6:	2152      	movs	r1, #82	@ 0x52
 800b8c8:	f000 fa02 	bl	800bcd0 <__assert_func>
 800b8cc:	4911      	ldr	r1, [pc, #68]	@ (800b914 <rand+0x68>)
 800b8ce:	4b12      	ldr	r3, [pc, #72]	@ (800b918 <rand+0x6c>)
 800b8d0:	e9c0 1300 	strd	r1, r3, [r0]
 800b8d4:	4b11      	ldr	r3, [pc, #68]	@ (800b91c <rand+0x70>)
 800b8d6:	6083      	str	r3, [r0, #8]
 800b8d8:	230b      	movs	r3, #11
 800b8da:	8183      	strh	r3, [r0, #12]
 800b8dc:	2100      	movs	r1, #0
 800b8de:	2001      	movs	r0, #1
 800b8e0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b8e4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b8e6:	480e      	ldr	r0, [pc, #56]	@ (800b920 <rand+0x74>)
 800b8e8:	690b      	ldr	r3, [r1, #16]
 800b8ea:	694c      	ldr	r4, [r1, #20]
 800b8ec:	4a0d      	ldr	r2, [pc, #52]	@ (800b924 <rand+0x78>)
 800b8ee:	4358      	muls	r0, r3
 800b8f0:	fb02 0004 	mla	r0, r2, r4, r0
 800b8f4:	fba3 3202 	umull	r3, r2, r3, r2
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	eb40 0002 	adc.w	r0, r0, r2
 800b8fe:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800b902:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800b906:	bd10      	pop	{r4, pc}
 800b908:	20000030 	.word	0x20000030
 800b90c:	0800cd00 	.word	0x0800cd00
 800b910:	0800cd17 	.word	0x0800cd17
 800b914:	abcd330e 	.word	0xabcd330e
 800b918:	e66d1234 	.word	0xe66d1234
 800b91c:	0005deec 	.word	0x0005deec
 800b920:	5851f42d 	.word	0x5851f42d
 800b924:	4c957f2d 	.word	0x4c957f2d

0800b928 <std>:
 800b928:	2300      	movs	r3, #0
 800b92a:	b510      	push	{r4, lr}
 800b92c:	4604      	mov	r4, r0
 800b92e:	e9c0 3300 	strd	r3, r3, [r0]
 800b932:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b936:	6083      	str	r3, [r0, #8]
 800b938:	8181      	strh	r1, [r0, #12]
 800b93a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b93c:	81c2      	strh	r2, [r0, #14]
 800b93e:	6183      	str	r3, [r0, #24]
 800b940:	4619      	mov	r1, r3
 800b942:	2208      	movs	r2, #8
 800b944:	305c      	adds	r0, #92	@ 0x5c
 800b946:	f000 f928 	bl	800bb9a <memset>
 800b94a:	4b0d      	ldr	r3, [pc, #52]	@ (800b980 <std+0x58>)
 800b94c:	6263      	str	r3, [r4, #36]	@ 0x24
 800b94e:	4b0d      	ldr	r3, [pc, #52]	@ (800b984 <std+0x5c>)
 800b950:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b952:	4b0d      	ldr	r3, [pc, #52]	@ (800b988 <std+0x60>)
 800b954:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b956:	4b0d      	ldr	r3, [pc, #52]	@ (800b98c <std+0x64>)
 800b958:	6323      	str	r3, [r4, #48]	@ 0x30
 800b95a:	4b0d      	ldr	r3, [pc, #52]	@ (800b990 <std+0x68>)
 800b95c:	6224      	str	r4, [r4, #32]
 800b95e:	429c      	cmp	r4, r3
 800b960:	d006      	beq.n	800b970 <std+0x48>
 800b962:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b966:	4294      	cmp	r4, r2
 800b968:	d002      	beq.n	800b970 <std+0x48>
 800b96a:	33d0      	adds	r3, #208	@ 0xd0
 800b96c:	429c      	cmp	r4, r3
 800b96e:	d105      	bne.n	800b97c <std+0x54>
 800b970:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b978:	f000 b998 	b.w	800bcac <__retarget_lock_init_recursive>
 800b97c:	bd10      	pop	{r4, pc}
 800b97e:	bf00      	nop
 800b980:	0800bb15 	.word	0x0800bb15
 800b984:	0800bb37 	.word	0x0800bb37
 800b988:	0800bb6f 	.word	0x0800bb6f
 800b98c:	0800bb93 	.word	0x0800bb93
 800b990:	2000428c 	.word	0x2000428c

0800b994 <stdio_exit_handler>:
 800b994:	4a02      	ldr	r2, [pc, #8]	@ (800b9a0 <stdio_exit_handler+0xc>)
 800b996:	4903      	ldr	r1, [pc, #12]	@ (800b9a4 <stdio_exit_handler+0x10>)
 800b998:	4803      	ldr	r0, [pc, #12]	@ (800b9a8 <stdio_exit_handler+0x14>)
 800b99a:	f000 b869 	b.w	800ba70 <_fwalk_sglue>
 800b99e:	bf00      	nop
 800b9a0:	20000024 	.word	0x20000024
 800b9a4:	0800c475 	.word	0x0800c475
 800b9a8:	20000034 	.word	0x20000034

0800b9ac <cleanup_stdio>:
 800b9ac:	6841      	ldr	r1, [r0, #4]
 800b9ae:	4b0c      	ldr	r3, [pc, #48]	@ (800b9e0 <cleanup_stdio+0x34>)
 800b9b0:	4299      	cmp	r1, r3
 800b9b2:	b510      	push	{r4, lr}
 800b9b4:	4604      	mov	r4, r0
 800b9b6:	d001      	beq.n	800b9bc <cleanup_stdio+0x10>
 800b9b8:	f000 fd5c 	bl	800c474 <_fflush_r>
 800b9bc:	68a1      	ldr	r1, [r4, #8]
 800b9be:	4b09      	ldr	r3, [pc, #36]	@ (800b9e4 <cleanup_stdio+0x38>)
 800b9c0:	4299      	cmp	r1, r3
 800b9c2:	d002      	beq.n	800b9ca <cleanup_stdio+0x1e>
 800b9c4:	4620      	mov	r0, r4
 800b9c6:	f000 fd55 	bl	800c474 <_fflush_r>
 800b9ca:	68e1      	ldr	r1, [r4, #12]
 800b9cc:	4b06      	ldr	r3, [pc, #24]	@ (800b9e8 <cleanup_stdio+0x3c>)
 800b9ce:	4299      	cmp	r1, r3
 800b9d0:	d004      	beq.n	800b9dc <cleanup_stdio+0x30>
 800b9d2:	4620      	mov	r0, r4
 800b9d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9d8:	f000 bd4c 	b.w	800c474 <_fflush_r>
 800b9dc:	bd10      	pop	{r4, pc}
 800b9de:	bf00      	nop
 800b9e0:	2000428c 	.word	0x2000428c
 800b9e4:	200042f4 	.word	0x200042f4
 800b9e8:	2000435c 	.word	0x2000435c

0800b9ec <global_stdio_init.part.0>:
 800b9ec:	b510      	push	{r4, lr}
 800b9ee:	4b0b      	ldr	r3, [pc, #44]	@ (800ba1c <global_stdio_init.part.0+0x30>)
 800b9f0:	4c0b      	ldr	r4, [pc, #44]	@ (800ba20 <global_stdio_init.part.0+0x34>)
 800b9f2:	4a0c      	ldr	r2, [pc, #48]	@ (800ba24 <global_stdio_init.part.0+0x38>)
 800b9f4:	601a      	str	r2, [r3, #0]
 800b9f6:	4620      	mov	r0, r4
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	2104      	movs	r1, #4
 800b9fc:	f7ff ff94 	bl	800b928 <std>
 800ba00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ba04:	2201      	movs	r2, #1
 800ba06:	2109      	movs	r1, #9
 800ba08:	f7ff ff8e 	bl	800b928 <std>
 800ba0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ba10:	2202      	movs	r2, #2
 800ba12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba16:	2112      	movs	r1, #18
 800ba18:	f7ff bf86 	b.w	800b928 <std>
 800ba1c:	200043c4 	.word	0x200043c4
 800ba20:	2000428c 	.word	0x2000428c
 800ba24:	0800b995 	.word	0x0800b995

0800ba28 <__sfp_lock_acquire>:
 800ba28:	4801      	ldr	r0, [pc, #4]	@ (800ba30 <__sfp_lock_acquire+0x8>)
 800ba2a:	f000 b940 	b.w	800bcae <__retarget_lock_acquire_recursive>
 800ba2e:	bf00      	nop
 800ba30:	200043cd 	.word	0x200043cd

0800ba34 <__sfp_lock_release>:
 800ba34:	4801      	ldr	r0, [pc, #4]	@ (800ba3c <__sfp_lock_release+0x8>)
 800ba36:	f000 b93b 	b.w	800bcb0 <__retarget_lock_release_recursive>
 800ba3a:	bf00      	nop
 800ba3c:	200043cd 	.word	0x200043cd

0800ba40 <__sinit>:
 800ba40:	b510      	push	{r4, lr}
 800ba42:	4604      	mov	r4, r0
 800ba44:	f7ff fff0 	bl	800ba28 <__sfp_lock_acquire>
 800ba48:	6a23      	ldr	r3, [r4, #32]
 800ba4a:	b11b      	cbz	r3, 800ba54 <__sinit+0x14>
 800ba4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba50:	f7ff bff0 	b.w	800ba34 <__sfp_lock_release>
 800ba54:	4b04      	ldr	r3, [pc, #16]	@ (800ba68 <__sinit+0x28>)
 800ba56:	6223      	str	r3, [r4, #32]
 800ba58:	4b04      	ldr	r3, [pc, #16]	@ (800ba6c <__sinit+0x2c>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d1f5      	bne.n	800ba4c <__sinit+0xc>
 800ba60:	f7ff ffc4 	bl	800b9ec <global_stdio_init.part.0>
 800ba64:	e7f2      	b.n	800ba4c <__sinit+0xc>
 800ba66:	bf00      	nop
 800ba68:	0800b9ad 	.word	0x0800b9ad
 800ba6c:	200043c4 	.word	0x200043c4

0800ba70 <_fwalk_sglue>:
 800ba70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba74:	4607      	mov	r7, r0
 800ba76:	4688      	mov	r8, r1
 800ba78:	4614      	mov	r4, r2
 800ba7a:	2600      	movs	r6, #0
 800ba7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ba80:	f1b9 0901 	subs.w	r9, r9, #1
 800ba84:	d505      	bpl.n	800ba92 <_fwalk_sglue+0x22>
 800ba86:	6824      	ldr	r4, [r4, #0]
 800ba88:	2c00      	cmp	r4, #0
 800ba8a:	d1f7      	bne.n	800ba7c <_fwalk_sglue+0xc>
 800ba8c:	4630      	mov	r0, r6
 800ba8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba92:	89ab      	ldrh	r3, [r5, #12]
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	d907      	bls.n	800baa8 <_fwalk_sglue+0x38>
 800ba98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba9c:	3301      	adds	r3, #1
 800ba9e:	d003      	beq.n	800baa8 <_fwalk_sglue+0x38>
 800baa0:	4629      	mov	r1, r5
 800baa2:	4638      	mov	r0, r7
 800baa4:	47c0      	blx	r8
 800baa6:	4306      	orrs	r6, r0
 800baa8:	3568      	adds	r5, #104	@ 0x68
 800baaa:	e7e9      	b.n	800ba80 <_fwalk_sglue+0x10>

0800baac <sniprintf>:
 800baac:	b40c      	push	{r2, r3}
 800baae:	b530      	push	{r4, r5, lr}
 800bab0:	4b17      	ldr	r3, [pc, #92]	@ (800bb10 <sniprintf+0x64>)
 800bab2:	1e0c      	subs	r4, r1, #0
 800bab4:	681d      	ldr	r5, [r3, #0]
 800bab6:	b09d      	sub	sp, #116	@ 0x74
 800bab8:	da08      	bge.n	800bacc <sniprintf+0x20>
 800baba:	238b      	movs	r3, #139	@ 0x8b
 800babc:	602b      	str	r3, [r5, #0]
 800babe:	f04f 30ff 	mov.w	r0, #4294967295
 800bac2:	b01d      	add	sp, #116	@ 0x74
 800bac4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bac8:	b002      	add	sp, #8
 800baca:	4770      	bx	lr
 800bacc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bad0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bad4:	bf14      	ite	ne
 800bad6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bada:	4623      	moveq	r3, r4
 800badc:	9304      	str	r3, [sp, #16]
 800bade:	9307      	str	r3, [sp, #28]
 800bae0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bae4:	9002      	str	r0, [sp, #8]
 800bae6:	9006      	str	r0, [sp, #24]
 800bae8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800baec:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800baee:	ab21      	add	r3, sp, #132	@ 0x84
 800baf0:	a902      	add	r1, sp, #8
 800baf2:	4628      	mov	r0, r5
 800baf4:	9301      	str	r3, [sp, #4]
 800baf6:	f000 f9af 	bl	800be58 <_svfiprintf_r>
 800bafa:	1c43      	adds	r3, r0, #1
 800bafc:	bfbc      	itt	lt
 800bafe:	238b      	movlt	r3, #139	@ 0x8b
 800bb00:	602b      	strlt	r3, [r5, #0]
 800bb02:	2c00      	cmp	r4, #0
 800bb04:	d0dd      	beq.n	800bac2 <sniprintf+0x16>
 800bb06:	9b02      	ldr	r3, [sp, #8]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	701a      	strb	r2, [r3, #0]
 800bb0c:	e7d9      	b.n	800bac2 <sniprintf+0x16>
 800bb0e:	bf00      	nop
 800bb10:	20000030 	.word	0x20000030

0800bb14 <__sread>:
 800bb14:	b510      	push	{r4, lr}
 800bb16:	460c      	mov	r4, r1
 800bb18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb1c:	f000 f868 	bl	800bbf0 <_read_r>
 800bb20:	2800      	cmp	r0, #0
 800bb22:	bfab      	itete	ge
 800bb24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bb26:	89a3      	ldrhlt	r3, [r4, #12]
 800bb28:	181b      	addge	r3, r3, r0
 800bb2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bb2e:	bfac      	ite	ge
 800bb30:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bb32:	81a3      	strhlt	r3, [r4, #12]
 800bb34:	bd10      	pop	{r4, pc}

0800bb36 <__swrite>:
 800bb36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb3a:	461f      	mov	r7, r3
 800bb3c:	898b      	ldrh	r3, [r1, #12]
 800bb3e:	05db      	lsls	r3, r3, #23
 800bb40:	4605      	mov	r5, r0
 800bb42:	460c      	mov	r4, r1
 800bb44:	4616      	mov	r6, r2
 800bb46:	d505      	bpl.n	800bb54 <__swrite+0x1e>
 800bb48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb4c:	2302      	movs	r3, #2
 800bb4e:	2200      	movs	r2, #0
 800bb50:	f000 f83c 	bl	800bbcc <_lseek_r>
 800bb54:	89a3      	ldrh	r3, [r4, #12]
 800bb56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb5a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bb5e:	81a3      	strh	r3, [r4, #12]
 800bb60:	4632      	mov	r2, r6
 800bb62:	463b      	mov	r3, r7
 800bb64:	4628      	mov	r0, r5
 800bb66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb6a:	f000 b863 	b.w	800bc34 <_write_r>

0800bb6e <__sseek>:
 800bb6e:	b510      	push	{r4, lr}
 800bb70:	460c      	mov	r4, r1
 800bb72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb76:	f000 f829 	bl	800bbcc <_lseek_r>
 800bb7a:	1c43      	adds	r3, r0, #1
 800bb7c:	89a3      	ldrh	r3, [r4, #12]
 800bb7e:	bf15      	itete	ne
 800bb80:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bb82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bb86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bb8a:	81a3      	strheq	r3, [r4, #12]
 800bb8c:	bf18      	it	ne
 800bb8e:	81a3      	strhne	r3, [r4, #12]
 800bb90:	bd10      	pop	{r4, pc}

0800bb92 <__sclose>:
 800bb92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb96:	f000 b809 	b.w	800bbac <_close_r>

0800bb9a <memset>:
 800bb9a:	4402      	add	r2, r0
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	4293      	cmp	r3, r2
 800bba0:	d100      	bne.n	800bba4 <memset+0xa>
 800bba2:	4770      	bx	lr
 800bba4:	f803 1b01 	strb.w	r1, [r3], #1
 800bba8:	e7f9      	b.n	800bb9e <memset+0x4>
	...

0800bbac <_close_r>:
 800bbac:	b538      	push	{r3, r4, r5, lr}
 800bbae:	4d06      	ldr	r5, [pc, #24]	@ (800bbc8 <_close_r+0x1c>)
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	4604      	mov	r4, r0
 800bbb4:	4608      	mov	r0, r1
 800bbb6:	602b      	str	r3, [r5, #0]
 800bbb8:	f7f5 fb96 	bl	80012e8 <_close>
 800bbbc:	1c43      	adds	r3, r0, #1
 800bbbe:	d102      	bne.n	800bbc6 <_close_r+0x1a>
 800bbc0:	682b      	ldr	r3, [r5, #0]
 800bbc2:	b103      	cbz	r3, 800bbc6 <_close_r+0x1a>
 800bbc4:	6023      	str	r3, [r4, #0]
 800bbc6:	bd38      	pop	{r3, r4, r5, pc}
 800bbc8:	200043c8 	.word	0x200043c8

0800bbcc <_lseek_r>:
 800bbcc:	b538      	push	{r3, r4, r5, lr}
 800bbce:	4d07      	ldr	r5, [pc, #28]	@ (800bbec <_lseek_r+0x20>)
 800bbd0:	4604      	mov	r4, r0
 800bbd2:	4608      	mov	r0, r1
 800bbd4:	4611      	mov	r1, r2
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	602a      	str	r2, [r5, #0]
 800bbda:	461a      	mov	r2, r3
 800bbdc:	f7f5 fbab 	bl	8001336 <_lseek>
 800bbe0:	1c43      	adds	r3, r0, #1
 800bbe2:	d102      	bne.n	800bbea <_lseek_r+0x1e>
 800bbe4:	682b      	ldr	r3, [r5, #0]
 800bbe6:	b103      	cbz	r3, 800bbea <_lseek_r+0x1e>
 800bbe8:	6023      	str	r3, [r4, #0]
 800bbea:	bd38      	pop	{r3, r4, r5, pc}
 800bbec:	200043c8 	.word	0x200043c8

0800bbf0 <_read_r>:
 800bbf0:	b538      	push	{r3, r4, r5, lr}
 800bbf2:	4d07      	ldr	r5, [pc, #28]	@ (800bc10 <_read_r+0x20>)
 800bbf4:	4604      	mov	r4, r0
 800bbf6:	4608      	mov	r0, r1
 800bbf8:	4611      	mov	r1, r2
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	602a      	str	r2, [r5, #0]
 800bbfe:	461a      	mov	r2, r3
 800bc00:	f7f5 fb39 	bl	8001276 <_read>
 800bc04:	1c43      	adds	r3, r0, #1
 800bc06:	d102      	bne.n	800bc0e <_read_r+0x1e>
 800bc08:	682b      	ldr	r3, [r5, #0]
 800bc0a:	b103      	cbz	r3, 800bc0e <_read_r+0x1e>
 800bc0c:	6023      	str	r3, [r4, #0]
 800bc0e:	bd38      	pop	{r3, r4, r5, pc}
 800bc10:	200043c8 	.word	0x200043c8

0800bc14 <_sbrk_r>:
 800bc14:	b538      	push	{r3, r4, r5, lr}
 800bc16:	4d06      	ldr	r5, [pc, #24]	@ (800bc30 <_sbrk_r+0x1c>)
 800bc18:	2300      	movs	r3, #0
 800bc1a:	4604      	mov	r4, r0
 800bc1c:	4608      	mov	r0, r1
 800bc1e:	602b      	str	r3, [r5, #0]
 800bc20:	f7f5 fb96 	bl	8001350 <_sbrk>
 800bc24:	1c43      	adds	r3, r0, #1
 800bc26:	d102      	bne.n	800bc2e <_sbrk_r+0x1a>
 800bc28:	682b      	ldr	r3, [r5, #0]
 800bc2a:	b103      	cbz	r3, 800bc2e <_sbrk_r+0x1a>
 800bc2c:	6023      	str	r3, [r4, #0]
 800bc2e:	bd38      	pop	{r3, r4, r5, pc}
 800bc30:	200043c8 	.word	0x200043c8

0800bc34 <_write_r>:
 800bc34:	b538      	push	{r3, r4, r5, lr}
 800bc36:	4d07      	ldr	r5, [pc, #28]	@ (800bc54 <_write_r+0x20>)
 800bc38:	4604      	mov	r4, r0
 800bc3a:	4608      	mov	r0, r1
 800bc3c:	4611      	mov	r1, r2
 800bc3e:	2200      	movs	r2, #0
 800bc40:	602a      	str	r2, [r5, #0]
 800bc42:	461a      	mov	r2, r3
 800bc44:	f7f5 fb34 	bl	80012b0 <_write>
 800bc48:	1c43      	adds	r3, r0, #1
 800bc4a:	d102      	bne.n	800bc52 <_write_r+0x1e>
 800bc4c:	682b      	ldr	r3, [r5, #0]
 800bc4e:	b103      	cbz	r3, 800bc52 <_write_r+0x1e>
 800bc50:	6023      	str	r3, [r4, #0]
 800bc52:	bd38      	pop	{r3, r4, r5, pc}
 800bc54:	200043c8 	.word	0x200043c8

0800bc58 <__errno>:
 800bc58:	4b01      	ldr	r3, [pc, #4]	@ (800bc60 <__errno+0x8>)
 800bc5a:	6818      	ldr	r0, [r3, #0]
 800bc5c:	4770      	bx	lr
 800bc5e:	bf00      	nop
 800bc60:	20000030 	.word	0x20000030

0800bc64 <__libc_init_array>:
 800bc64:	b570      	push	{r4, r5, r6, lr}
 800bc66:	4d0d      	ldr	r5, [pc, #52]	@ (800bc9c <__libc_init_array+0x38>)
 800bc68:	4c0d      	ldr	r4, [pc, #52]	@ (800bca0 <__libc_init_array+0x3c>)
 800bc6a:	1b64      	subs	r4, r4, r5
 800bc6c:	10a4      	asrs	r4, r4, #2
 800bc6e:	2600      	movs	r6, #0
 800bc70:	42a6      	cmp	r6, r4
 800bc72:	d109      	bne.n	800bc88 <__libc_init_array+0x24>
 800bc74:	4d0b      	ldr	r5, [pc, #44]	@ (800bca4 <__libc_init_array+0x40>)
 800bc76:	4c0c      	ldr	r4, [pc, #48]	@ (800bca8 <__libc_init_array+0x44>)
 800bc78:	f000 ff2a 	bl	800cad0 <_init>
 800bc7c:	1b64      	subs	r4, r4, r5
 800bc7e:	10a4      	asrs	r4, r4, #2
 800bc80:	2600      	movs	r6, #0
 800bc82:	42a6      	cmp	r6, r4
 800bc84:	d105      	bne.n	800bc92 <__libc_init_array+0x2e>
 800bc86:	bd70      	pop	{r4, r5, r6, pc}
 800bc88:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc8c:	4798      	blx	r3
 800bc8e:	3601      	adds	r6, #1
 800bc90:	e7ee      	b.n	800bc70 <__libc_init_array+0xc>
 800bc92:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc96:	4798      	blx	r3
 800bc98:	3601      	adds	r6, #1
 800bc9a:	e7f2      	b.n	800bc82 <__libc_init_array+0x1e>
 800bc9c:	0800cde8 	.word	0x0800cde8
 800bca0:	0800cde8 	.word	0x0800cde8
 800bca4:	0800cde8 	.word	0x0800cde8
 800bca8:	0800cdec 	.word	0x0800cdec

0800bcac <__retarget_lock_init_recursive>:
 800bcac:	4770      	bx	lr

0800bcae <__retarget_lock_acquire_recursive>:
 800bcae:	4770      	bx	lr

0800bcb0 <__retarget_lock_release_recursive>:
 800bcb0:	4770      	bx	lr

0800bcb2 <memcpy>:
 800bcb2:	440a      	add	r2, r1
 800bcb4:	4291      	cmp	r1, r2
 800bcb6:	f100 33ff 	add.w	r3, r0, #4294967295
 800bcba:	d100      	bne.n	800bcbe <memcpy+0xc>
 800bcbc:	4770      	bx	lr
 800bcbe:	b510      	push	{r4, lr}
 800bcc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bcc8:	4291      	cmp	r1, r2
 800bcca:	d1f9      	bne.n	800bcc0 <memcpy+0xe>
 800bccc:	bd10      	pop	{r4, pc}
	...

0800bcd0 <__assert_func>:
 800bcd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bcd2:	4614      	mov	r4, r2
 800bcd4:	461a      	mov	r2, r3
 800bcd6:	4b09      	ldr	r3, [pc, #36]	@ (800bcfc <__assert_func+0x2c>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	4605      	mov	r5, r0
 800bcdc:	68d8      	ldr	r0, [r3, #12]
 800bcde:	b954      	cbnz	r4, 800bcf6 <__assert_func+0x26>
 800bce0:	4b07      	ldr	r3, [pc, #28]	@ (800bd00 <__assert_func+0x30>)
 800bce2:	461c      	mov	r4, r3
 800bce4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bce8:	9100      	str	r1, [sp, #0]
 800bcea:	462b      	mov	r3, r5
 800bcec:	4905      	ldr	r1, [pc, #20]	@ (800bd04 <__assert_func+0x34>)
 800bcee:	f000 fbe9 	bl	800c4c4 <fiprintf>
 800bcf2:	f000 fc13 	bl	800c51c <abort>
 800bcf6:	4b04      	ldr	r3, [pc, #16]	@ (800bd08 <__assert_func+0x38>)
 800bcf8:	e7f4      	b.n	800bce4 <__assert_func+0x14>
 800bcfa:	bf00      	nop
 800bcfc:	20000030 	.word	0x20000030
 800bd00:	0800cdaa 	.word	0x0800cdaa
 800bd04:	0800cd7c 	.word	0x0800cd7c
 800bd08:	0800cd6f 	.word	0x0800cd6f

0800bd0c <_free_r>:
 800bd0c:	b538      	push	{r3, r4, r5, lr}
 800bd0e:	4605      	mov	r5, r0
 800bd10:	2900      	cmp	r1, #0
 800bd12:	d041      	beq.n	800bd98 <_free_r+0x8c>
 800bd14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd18:	1f0c      	subs	r4, r1, #4
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	bfb8      	it	lt
 800bd1e:	18e4      	addlt	r4, r4, r3
 800bd20:	f7ff fdb8 	bl	800b894 <__malloc_lock>
 800bd24:	4a1d      	ldr	r2, [pc, #116]	@ (800bd9c <_free_r+0x90>)
 800bd26:	6813      	ldr	r3, [r2, #0]
 800bd28:	b933      	cbnz	r3, 800bd38 <_free_r+0x2c>
 800bd2a:	6063      	str	r3, [r4, #4]
 800bd2c:	6014      	str	r4, [r2, #0]
 800bd2e:	4628      	mov	r0, r5
 800bd30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd34:	f7ff bdb4 	b.w	800b8a0 <__malloc_unlock>
 800bd38:	42a3      	cmp	r3, r4
 800bd3a:	d908      	bls.n	800bd4e <_free_r+0x42>
 800bd3c:	6820      	ldr	r0, [r4, #0]
 800bd3e:	1821      	adds	r1, r4, r0
 800bd40:	428b      	cmp	r3, r1
 800bd42:	bf01      	itttt	eq
 800bd44:	6819      	ldreq	r1, [r3, #0]
 800bd46:	685b      	ldreq	r3, [r3, #4]
 800bd48:	1809      	addeq	r1, r1, r0
 800bd4a:	6021      	streq	r1, [r4, #0]
 800bd4c:	e7ed      	b.n	800bd2a <_free_r+0x1e>
 800bd4e:	461a      	mov	r2, r3
 800bd50:	685b      	ldr	r3, [r3, #4]
 800bd52:	b10b      	cbz	r3, 800bd58 <_free_r+0x4c>
 800bd54:	42a3      	cmp	r3, r4
 800bd56:	d9fa      	bls.n	800bd4e <_free_r+0x42>
 800bd58:	6811      	ldr	r1, [r2, #0]
 800bd5a:	1850      	adds	r0, r2, r1
 800bd5c:	42a0      	cmp	r0, r4
 800bd5e:	d10b      	bne.n	800bd78 <_free_r+0x6c>
 800bd60:	6820      	ldr	r0, [r4, #0]
 800bd62:	4401      	add	r1, r0
 800bd64:	1850      	adds	r0, r2, r1
 800bd66:	4283      	cmp	r3, r0
 800bd68:	6011      	str	r1, [r2, #0]
 800bd6a:	d1e0      	bne.n	800bd2e <_free_r+0x22>
 800bd6c:	6818      	ldr	r0, [r3, #0]
 800bd6e:	685b      	ldr	r3, [r3, #4]
 800bd70:	6053      	str	r3, [r2, #4]
 800bd72:	4408      	add	r0, r1
 800bd74:	6010      	str	r0, [r2, #0]
 800bd76:	e7da      	b.n	800bd2e <_free_r+0x22>
 800bd78:	d902      	bls.n	800bd80 <_free_r+0x74>
 800bd7a:	230c      	movs	r3, #12
 800bd7c:	602b      	str	r3, [r5, #0]
 800bd7e:	e7d6      	b.n	800bd2e <_free_r+0x22>
 800bd80:	6820      	ldr	r0, [r4, #0]
 800bd82:	1821      	adds	r1, r4, r0
 800bd84:	428b      	cmp	r3, r1
 800bd86:	bf04      	itt	eq
 800bd88:	6819      	ldreq	r1, [r3, #0]
 800bd8a:	685b      	ldreq	r3, [r3, #4]
 800bd8c:	6063      	str	r3, [r4, #4]
 800bd8e:	bf04      	itt	eq
 800bd90:	1809      	addeq	r1, r1, r0
 800bd92:	6021      	streq	r1, [r4, #0]
 800bd94:	6054      	str	r4, [r2, #4]
 800bd96:	e7ca      	b.n	800bd2e <_free_r+0x22>
 800bd98:	bd38      	pop	{r3, r4, r5, pc}
 800bd9a:	bf00      	nop
 800bd9c:	20004288 	.word	0x20004288

0800bda0 <__ssputs_r>:
 800bda0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bda4:	688e      	ldr	r6, [r1, #8]
 800bda6:	461f      	mov	r7, r3
 800bda8:	42be      	cmp	r6, r7
 800bdaa:	680b      	ldr	r3, [r1, #0]
 800bdac:	4682      	mov	sl, r0
 800bdae:	460c      	mov	r4, r1
 800bdb0:	4690      	mov	r8, r2
 800bdb2:	d82d      	bhi.n	800be10 <__ssputs_r+0x70>
 800bdb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bdb8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bdbc:	d026      	beq.n	800be0c <__ssputs_r+0x6c>
 800bdbe:	6965      	ldr	r5, [r4, #20]
 800bdc0:	6909      	ldr	r1, [r1, #16]
 800bdc2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bdc6:	eba3 0901 	sub.w	r9, r3, r1
 800bdca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bdce:	1c7b      	adds	r3, r7, #1
 800bdd0:	444b      	add	r3, r9
 800bdd2:	106d      	asrs	r5, r5, #1
 800bdd4:	429d      	cmp	r5, r3
 800bdd6:	bf38      	it	cc
 800bdd8:	461d      	movcc	r5, r3
 800bdda:	0553      	lsls	r3, r2, #21
 800bddc:	d527      	bpl.n	800be2e <__ssputs_r+0x8e>
 800bdde:	4629      	mov	r1, r5
 800bde0:	f7ff fcd8 	bl	800b794 <_malloc_r>
 800bde4:	4606      	mov	r6, r0
 800bde6:	b360      	cbz	r0, 800be42 <__ssputs_r+0xa2>
 800bde8:	6921      	ldr	r1, [r4, #16]
 800bdea:	464a      	mov	r2, r9
 800bdec:	f7ff ff61 	bl	800bcb2 <memcpy>
 800bdf0:	89a3      	ldrh	r3, [r4, #12]
 800bdf2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bdf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bdfa:	81a3      	strh	r3, [r4, #12]
 800bdfc:	6126      	str	r6, [r4, #16]
 800bdfe:	6165      	str	r5, [r4, #20]
 800be00:	444e      	add	r6, r9
 800be02:	eba5 0509 	sub.w	r5, r5, r9
 800be06:	6026      	str	r6, [r4, #0]
 800be08:	60a5      	str	r5, [r4, #8]
 800be0a:	463e      	mov	r6, r7
 800be0c:	42be      	cmp	r6, r7
 800be0e:	d900      	bls.n	800be12 <__ssputs_r+0x72>
 800be10:	463e      	mov	r6, r7
 800be12:	6820      	ldr	r0, [r4, #0]
 800be14:	4632      	mov	r2, r6
 800be16:	4641      	mov	r1, r8
 800be18:	f000 fb66 	bl	800c4e8 <memmove>
 800be1c:	68a3      	ldr	r3, [r4, #8]
 800be1e:	1b9b      	subs	r3, r3, r6
 800be20:	60a3      	str	r3, [r4, #8]
 800be22:	6823      	ldr	r3, [r4, #0]
 800be24:	4433      	add	r3, r6
 800be26:	6023      	str	r3, [r4, #0]
 800be28:	2000      	movs	r0, #0
 800be2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be2e:	462a      	mov	r2, r5
 800be30:	f000 fb7b 	bl	800c52a <_realloc_r>
 800be34:	4606      	mov	r6, r0
 800be36:	2800      	cmp	r0, #0
 800be38:	d1e0      	bne.n	800bdfc <__ssputs_r+0x5c>
 800be3a:	6921      	ldr	r1, [r4, #16]
 800be3c:	4650      	mov	r0, sl
 800be3e:	f7ff ff65 	bl	800bd0c <_free_r>
 800be42:	230c      	movs	r3, #12
 800be44:	f8ca 3000 	str.w	r3, [sl]
 800be48:	89a3      	ldrh	r3, [r4, #12]
 800be4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be4e:	81a3      	strh	r3, [r4, #12]
 800be50:	f04f 30ff 	mov.w	r0, #4294967295
 800be54:	e7e9      	b.n	800be2a <__ssputs_r+0x8a>
	...

0800be58 <_svfiprintf_r>:
 800be58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be5c:	4698      	mov	r8, r3
 800be5e:	898b      	ldrh	r3, [r1, #12]
 800be60:	061b      	lsls	r3, r3, #24
 800be62:	b09d      	sub	sp, #116	@ 0x74
 800be64:	4607      	mov	r7, r0
 800be66:	460d      	mov	r5, r1
 800be68:	4614      	mov	r4, r2
 800be6a:	d510      	bpl.n	800be8e <_svfiprintf_r+0x36>
 800be6c:	690b      	ldr	r3, [r1, #16]
 800be6e:	b973      	cbnz	r3, 800be8e <_svfiprintf_r+0x36>
 800be70:	2140      	movs	r1, #64	@ 0x40
 800be72:	f7ff fc8f 	bl	800b794 <_malloc_r>
 800be76:	6028      	str	r0, [r5, #0]
 800be78:	6128      	str	r0, [r5, #16]
 800be7a:	b930      	cbnz	r0, 800be8a <_svfiprintf_r+0x32>
 800be7c:	230c      	movs	r3, #12
 800be7e:	603b      	str	r3, [r7, #0]
 800be80:	f04f 30ff 	mov.w	r0, #4294967295
 800be84:	b01d      	add	sp, #116	@ 0x74
 800be86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be8a:	2340      	movs	r3, #64	@ 0x40
 800be8c:	616b      	str	r3, [r5, #20]
 800be8e:	2300      	movs	r3, #0
 800be90:	9309      	str	r3, [sp, #36]	@ 0x24
 800be92:	2320      	movs	r3, #32
 800be94:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800be98:	f8cd 800c 	str.w	r8, [sp, #12]
 800be9c:	2330      	movs	r3, #48	@ 0x30
 800be9e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c03c <_svfiprintf_r+0x1e4>
 800bea2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bea6:	f04f 0901 	mov.w	r9, #1
 800beaa:	4623      	mov	r3, r4
 800beac:	469a      	mov	sl, r3
 800beae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800beb2:	b10a      	cbz	r2, 800beb8 <_svfiprintf_r+0x60>
 800beb4:	2a25      	cmp	r2, #37	@ 0x25
 800beb6:	d1f9      	bne.n	800beac <_svfiprintf_r+0x54>
 800beb8:	ebba 0b04 	subs.w	fp, sl, r4
 800bebc:	d00b      	beq.n	800bed6 <_svfiprintf_r+0x7e>
 800bebe:	465b      	mov	r3, fp
 800bec0:	4622      	mov	r2, r4
 800bec2:	4629      	mov	r1, r5
 800bec4:	4638      	mov	r0, r7
 800bec6:	f7ff ff6b 	bl	800bda0 <__ssputs_r>
 800beca:	3001      	adds	r0, #1
 800becc:	f000 80a7 	beq.w	800c01e <_svfiprintf_r+0x1c6>
 800bed0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bed2:	445a      	add	r2, fp
 800bed4:	9209      	str	r2, [sp, #36]	@ 0x24
 800bed6:	f89a 3000 	ldrb.w	r3, [sl]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	f000 809f 	beq.w	800c01e <_svfiprintf_r+0x1c6>
 800bee0:	2300      	movs	r3, #0
 800bee2:	f04f 32ff 	mov.w	r2, #4294967295
 800bee6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800beea:	f10a 0a01 	add.w	sl, sl, #1
 800beee:	9304      	str	r3, [sp, #16]
 800bef0:	9307      	str	r3, [sp, #28]
 800bef2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bef6:	931a      	str	r3, [sp, #104]	@ 0x68
 800bef8:	4654      	mov	r4, sl
 800befa:	2205      	movs	r2, #5
 800befc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf00:	484e      	ldr	r0, [pc, #312]	@ (800c03c <_svfiprintf_r+0x1e4>)
 800bf02:	f7f4 f965 	bl	80001d0 <memchr>
 800bf06:	9a04      	ldr	r2, [sp, #16]
 800bf08:	b9d8      	cbnz	r0, 800bf42 <_svfiprintf_r+0xea>
 800bf0a:	06d0      	lsls	r0, r2, #27
 800bf0c:	bf44      	itt	mi
 800bf0e:	2320      	movmi	r3, #32
 800bf10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf14:	0711      	lsls	r1, r2, #28
 800bf16:	bf44      	itt	mi
 800bf18:	232b      	movmi	r3, #43	@ 0x2b
 800bf1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf1e:	f89a 3000 	ldrb.w	r3, [sl]
 800bf22:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf24:	d015      	beq.n	800bf52 <_svfiprintf_r+0xfa>
 800bf26:	9a07      	ldr	r2, [sp, #28]
 800bf28:	4654      	mov	r4, sl
 800bf2a:	2000      	movs	r0, #0
 800bf2c:	f04f 0c0a 	mov.w	ip, #10
 800bf30:	4621      	mov	r1, r4
 800bf32:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf36:	3b30      	subs	r3, #48	@ 0x30
 800bf38:	2b09      	cmp	r3, #9
 800bf3a:	d94b      	bls.n	800bfd4 <_svfiprintf_r+0x17c>
 800bf3c:	b1b0      	cbz	r0, 800bf6c <_svfiprintf_r+0x114>
 800bf3e:	9207      	str	r2, [sp, #28]
 800bf40:	e014      	b.n	800bf6c <_svfiprintf_r+0x114>
 800bf42:	eba0 0308 	sub.w	r3, r0, r8
 800bf46:	fa09 f303 	lsl.w	r3, r9, r3
 800bf4a:	4313      	orrs	r3, r2
 800bf4c:	9304      	str	r3, [sp, #16]
 800bf4e:	46a2      	mov	sl, r4
 800bf50:	e7d2      	b.n	800bef8 <_svfiprintf_r+0xa0>
 800bf52:	9b03      	ldr	r3, [sp, #12]
 800bf54:	1d19      	adds	r1, r3, #4
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	9103      	str	r1, [sp, #12]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	bfbb      	ittet	lt
 800bf5e:	425b      	neglt	r3, r3
 800bf60:	f042 0202 	orrlt.w	r2, r2, #2
 800bf64:	9307      	strge	r3, [sp, #28]
 800bf66:	9307      	strlt	r3, [sp, #28]
 800bf68:	bfb8      	it	lt
 800bf6a:	9204      	strlt	r2, [sp, #16]
 800bf6c:	7823      	ldrb	r3, [r4, #0]
 800bf6e:	2b2e      	cmp	r3, #46	@ 0x2e
 800bf70:	d10a      	bne.n	800bf88 <_svfiprintf_r+0x130>
 800bf72:	7863      	ldrb	r3, [r4, #1]
 800bf74:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf76:	d132      	bne.n	800bfde <_svfiprintf_r+0x186>
 800bf78:	9b03      	ldr	r3, [sp, #12]
 800bf7a:	1d1a      	adds	r2, r3, #4
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	9203      	str	r2, [sp, #12]
 800bf80:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bf84:	3402      	adds	r4, #2
 800bf86:	9305      	str	r3, [sp, #20]
 800bf88:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c04c <_svfiprintf_r+0x1f4>
 800bf8c:	7821      	ldrb	r1, [r4, #0]
 800bf8e:	2203      	movs	r2, #3
 800bf90:	4650      	mov	r0, sl
 800bf92:	f7f4 f91d 	bl	80001d0 <memchr>
 800bf96:	b138      	cbz	r0, 800bfa8 <_svfiprintf_r+0x150>
 800bf98:	9b04      	ldr	r3, [sp, #16]
 800bf9a:	eba0 000a 	sub.w	r0, r0, sl
 800bf9e:	2240      	movs	r2, #64	@ 0x40
 800bfa0:	4082      	lsls	r2, r0
 800bfa2:	4313      	orrs	r3, r2
 800bfa4:	3401      	adds	r4, #1
 800bfa6:	9304      	str	r3, [sp, #16]
 800bfa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfac:	4824      	ldr	r0, [pc, #144]	@ (800c040 <_svfiprintf_r+0x1e8>)
 800bfae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bfb2:	2206      	movs	r2, #6
 800bfb4:	f7f4 f90c 	bl	80001d0 <memchr>
 800bfb8:	2800      	cmp	r0, #0
 800bfba:	d036      	beq.n	800c02a <_svfiprintf_r+0x1d2>
 800bfbc:	4b21      	ldr	r3, [pc, #132]	@ (800c044 <_svfiprintf_r+0x1ec>)
 800bfbe:	bb1b      	cbnz	r3, 800c008 <_svfiprintf_r+0x1b0>
 800bfc0:	9b03      	ldr	r3, [sp, #12]
 800bfc2:	3307      	adds	r3, #7
 800bfc4:	f023 0307 	bic.w	r3, r3, #7
 800bfc8:	3308      	adds	r3, #8
 800bfca:	9303      	str	r3, [sp, #12]
 800bfcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfce:	4433      	add	r3, r6
 800bfd0:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfd2:	e76a      	b.n	800beaa <_svfiprintf_r+0x52>
 800bfd4:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfd8:	460c      	mov	r4, r1
 800bfda:	2001      	movs	r0, #1
 800bfdc:	e7a8      	b.n	800bf30 <_svfiprintf_r+0xd8>
 800bfde:	2300      	movs	r3, #0
 800bfe0:	3401      	adds	r4, #1
 800bfe2:	9305      	str	r3, [sp, #20]
 800bfe4:	4619      	mov	r1, r3
 800bfe6:	f04f 0c0a 	mov.w	ip, #10
 800bfea:	4620      	mov	r0, r4
 800bfec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bff0:	3a30      	subs	r2, #48	@ 0x30
 800bff2:	2a09      	cmp	r2, #9
 800bff4:	d903      	bls.n	800bffe <_svfiprintf_r+0x1a6>
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d0c6      	beq.n	800bf88 <_svfiprintf_r+0x130>
 800bffa:	9105      	str	r1, [sp, #20]
 800bffc:	e7c4      	b.n	800bf88 <_svfiprintf_r+0x130>
 800bffe:	fb0c 2101 	mla	r1, ip, r1, r2
 800c002:	4604      	mov	r4, r0
 800c004:	2301      	movs	r3, #1
 800c006:	e7f0      	b.n	800bfea <_svfiprintf_r+0x192>
 800c008:	ab03      	add	r3, sp, #12
 800c00a:	9300      	str	r3, [sp, #0]
 800c00c:	462a      	mov	r2, r5
 800c00e:	4b0e      	ldr	r3, [pc, #56]	@ (800c048 <_svfiprintf_r+0x1f0>)
 800c010:	a904      	add	r1, sp, #16
 800c012:	4638      	mov	r0, r7
 800c014:	f3af 8000 	nop.w
 800c018:	1c42      	adds	r2, r0, #1
 800c01a:	4606      	mov	r6, r0
 800c01c:	d1d6      	bne.n	800bfcc <_svfiprintf_r+0x174>
 800c01e:	89ab      	ldrh	r3, [r5, #12]
 800c020:	065b      	lsls	r3, r3, #25
 800c022:	f53f af2d 	bmi.w	800be80 <_svfiprintf_r+0x28>
 800c026:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c028:	e72c      	b.n	800be84 <_svfiprintf_r+0x2c>
 800c02a:	ab03      	add	r3, sp, #12
 800c02c:	9300      	str	r3, [sp, #0]
 800c02e:	462a      	mov	r2, r5
 800c030:	4b05      	ldr	r3, [pc, #20]	@ (800c048 <_svfiprintf_r+0x1f0>)
 800c032:	a904      	add	r1, sp, #16
 800c034:	4638      	mov	r0, r7
 800c036:	f000 f879 	bl	800c12c <_printf_i>
 800c03a:	e7ed      	b.n	800c018 <_svfiprintf_r+0x1c0>
 800c03c:	0800cdab 	.word	0x0800cdab
 800c040:	0800cdb5 	.word	0x0800cdb5
 800c044:	00000000 	.word	0x00000000
 800c048:	0800bda1 	.word	0x0800bda1
 800c04c:	0800cdb1 	.word	0x0800cdb1

0800c050 <_printf_common>:
 800c050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c054:	4616      	mov	r6, r2
 800c056:	4698      	mov	r8, r3
 800c058:	688a      	ldr	r2, [r1, #8]
 800c05a:	690b      	ldr	r3, [r1, #16]
 800c05c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c060:	4293      	cmp	r3, r2
 800c062:	bfb8      	it	lt
 800c064:	4613      	movlt	r3, r2
 800c066:	6033      	str	r3, [r6, #0]
 800c068:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c06c:	4607      	mov	r7, r0
 800c06e:	460c      	mov	r4, r1
 800c070:	b10a      	cbz	r2, 800c076 <_printf_common+0x26>
 800c072:	3301      	adds	r3, #1
 800c074:	6033      	str	r3, [r6, #0]
 800c076:	6823      	ldr	r3, [r4, #0]
 800c078:	0699      	lsls	r1, r3, #26
 800c07a:	bf42      	ittt	mi
 800c07c:	6833      	ldrmi	r3, [r6, #0]
 800c07e:	3302      	addmi	r3, #2
 800c080:	6033      	strmi	r3, [r6, #0]
 800c082:	6825      	ldr	r5, [r4, #0]
 800c084:	f015 0506 	ands.w	r5, r5, #6
 800c088:	d106      	bne.n	800c098 <_printf_common+0x48>
 800c08a:	f104 0a19 	add.w	sl, r4, #25
 800c08e:	68e3      	ldr	r3, [r4, #12]
 800c090:	6832      	ldr	r2, [r6, #0]
 800c092:	1a9b      	subs	r3, r3, r2
 800c094:	42ab      	cmp	r3, r5
 800c096:	dc26      	bgt.n	800c0e6 <_printf_common+0x96>
 800c098:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c09c:	6822      	ldr	r2, [r4, #0]
 800c09e:	3b00      	subs	r3, #0
 800c0a0:	bf18      	it	ne
 800c0a2:	2301      	movne	r3, #1
 800c0a4:	0692      	lsls	r2, r2, #26
 800c0a6:	d42b      	bmi.n	800c100 <_printf_common+0xb0>
 800c0a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c0ac:	4641      	mov	r1, r8
 800c0ae:	4638      	mov	r0, r7
 800c0b0:	47c8      	blx	r9
 800c0b2:	3001      	adds	r0, #1
 800c0b4:	d01e      	beq.n	800c0f4 <_printf_common+0xa4>
 800c0b6:	6823      	ldr	r3, [r4, #0]
 800c0b8:	6922      	ldr	r2, [r4, #16]
 800c0ba:	f003 0306 	and.w	r3, r3, #6
 800c0be:	2b04      	cmp	r3, #4
 800c0c0:	bf02      	ittt	eq
 800c0c2:	68e5      	ldreq	r5, [r4, #12]
 800c0c4:	6833      	ldreq	r3, [r6, #0]
 800c0c6:	1aed      	subeq	r5, r5, r3
 800c0c8:	68a3      	ldr	r3, [r4, #8]
 800c0ca:	bf0c      	ite	eq
 800c0cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c0d0:	2500      	movne	r5, #0
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	bfc4      	itt	gt
 800c0d6:	1a9b      	subgt	r3, r3, r2
 800c0d8:	18ed      	addgt	r5, r5, r3
 800c0da:	2600      	movs	r6, #0
 800c0dc:	341a      	adds	r4, #26
 800c0de:	42b5      	cmp	r5, r6
 800c0e0:	d11a      	bne.n	800c118 <_printf_common+0xc8>
 800c0e2:	2000      	movs	r0, #0
 800c0e4:	e008      	b.n	800c0f8 <_printf_common+0xa8>
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	4652      	mov	r2, sl
 800c0ea:	4641      	mov	r1, r8
 800c0ec:	4638      	mov	r0, r7
 800c0ee:	47c8      	blx	r9
 800c0f0:	3001      	adds	r0, #1
 800c0f2:	d103      	bne.n	800c0fc <_printf_common+0xac>
 800c0f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0fc:	3501      	adds	r5, #1
 800c0fe:	e7c6      	b.n	800c08e <_printf_common+0x3e>
 800c100:	18e1      	adds	r1, r4, r3
 800c102:	1c5a      	adds	r2, r3, #1
 800c104:	2030      	movs	r0, #48	@ 0x30
 800c106:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c10a:	4422      	add	r2, r4
 800c10c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c110:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c114:	3302      	adds	r3, #2
 800c116:	e7c7      	b.n	800c0a8 <_printf_common+0x58>
 800c118:	2301      	movs	r3, #1
 800c11a:	4622      	mov	r2, r4
 800c11c:	4641      	mov	r1, r8
 800c11e:	4638      	mov	r0, r7
 800c120:	47c8      	blx	r9
 800c122:	3001      	adds	r0, #1
 800c124:	d0e6      	beq.n	800c0f4 <_printf_common+0xa4>
 800c126:	3601      	adds	r6, #1
 800c128:	e7d9      	b.n	800c0de <_printf_common+0x8e>
	...

0800c12c <_printf_i>:
 800c12c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c130:	7e0f      	ldrb	r7, [r1, #24]
 800c132:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c134:	2f78      	cmp	r7, #120	@ 0x78
 800c136:	4691      	mov	r9, r2
 800c138:	4680      	mov	r8, r0
 800c13a:	460c      	mov	r4, r1
 800c13c:	469a      	mov	sl, r3
 800c13e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c142:	d807      	bhi.n	800c154 <_printf_i+0x28>
 800c144:	2f62      	cmp	r7, #98	@ 0x62
 800c146:	d80a      	bhi.n	800c15e <_printf_i+0x32>
 800c148:	2f00      	cmp	r7, #0
 800c14a:	f000 80d2 	beq.w	800c2f2 <_printf_i+0x1c6>
 800c14e:	2f58      	cmp	r7, #88	@ 0x58
 800c150:	f000 80b9 	beq.w	800c2c6 <_printf_i+0x19a>
 800c154:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c158:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c15c:	e03a      	b.n	800c1d4 <_printf_i+0xa8>
 800c15e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c162:	2b15      	cmp	r3, #21
 800c164:	d8f6      	bhi.n	800c154 <_printf_i+0x28>
 800c166:	a101      	add	r1, pc, #4	@ (adr r1, 800c16c <_printf_i+0x40>)
 800c168:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c16c:	0800c1c5 	.word	0x0800c1c5
 800c170:	0800c1d9 	.word	0x0800c1d9
 800c174:	0800c155 	.word	0x0800c155
 800c178:	0800c155 	.word	0x0800c155
 800c17c:	0800c155 	.word	0x0800c155
 800c180:	0800c155 	.word	0x0800c155
 800c184:	0800c1d9 	.word	0x0800c1d9
 800c188:	0800c155 	.word	0x0800c155
 800c18c:	0800c155 	.word	0x0800c155
 800c190:	0800c155 	.word	0x0800c155
 800c194:	0800c155 	.word	0x0800c155
 800c198:	0800c2d9 	.word	0x0800c2d9
 800c19c:	0800c203 	.word	0x0800c203
 800c1a0:	0800c293 	.word	0x0800c293
 800c1a4:	0800c155 	.word	0x0800c155
 800c1a8:	0800c155 	.word	0x0800c155
 800c1ac:	0800c2fb 	.word	0x0800c2fb
 800c1b0:	0800c155 	.word	0x0800c155
 800c1b4:	0800c203 	.word	0x0800c203
 800c1b8:	0800c155 	.word	0x0800c155
 800c1bc:	0800c155 	.word	0x0800c155
 800c1c0:	0800c29b 	.word	0x0800c29b
 800c1c4:	6833      	ldr	r3, [r6, #0]
 800c1c6:	1d1a      	adds	r2, r3, #4
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	6032      	str	r2, [r6, #0]
 800c1cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c1d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	e09d      	b.n	800c314 <_printf_i+0x1e8>
 800c1d8:	6833      	ldr	r3, [r6, #0]
 800c1da:	6820      	ldr	r0, [r4, #0]
 800c1dc:	1d19      	adds	r1, r3, #4
 800c1de:	6031      	str	r1, [r6, #0]
 800c1e0:	0606      	lsls	r6, r0, #24
 800c1e2:	d501      	bpl.n	800c1e8 <_printf_i+0xbc>
 800c1e4:	681d      	ldr	r5, [r3, #0]
 800c1e6:	e003      	b.n	800c1f0 <_printf_i+0xc4>
 800c1e8:	0645      	lsls	r5, r0, #25
 800c1ea:	d5fb      	bpl.n	800c1e4 <_printf_i+0xb8>
 800c1ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c1f0:	2d00      	cmp	r5, #0
 800c1f2:	da03      	bge.n	800c1fc <_printf_i+0xd0>
 800c1f4:	232d      	movs	r3, #45	@ 0x2d
 800c1f6:	426d      	negs	r5, r5
 800c1f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c1fc:	4859      	ldr	r0, [pc, #356]	@ (800c364 <_printf_i+0x238>)
 800c1fe:	230a      	movs	r3, #10
 800c200:	e011      	b.n	800c226 <_printf_i+0xfa>
 800c202:	6821      	ldr	r1, [r4, #0]
 800c204:	6833      	ldr	r3, [r6, #0]
 800c206:	0608      	lsls	r0, r1, #24
 800c208:	f853 5b04 	ldr.w	r5, [r3], #4
 800c20c:	d402      	bmi.n	800c214 <_printf_i+0xe8>
 800c20e:	0649      	lsls	r1, r1, #25
 800c210:	bf48      	it	mi
 800c212:	b2ad      	uxthmi	r5, r5
 800c214:	2f6f      	cmp	r7, #111	@ 0x6f
 800c216:	4853      	ldr	r0, [pc, #332]	@ (800c364 <_printf_i+0x238>)
 800c218:	6033      	str	r3, [r6, #0]
 800c21a:	bf14      	ite	ne
 800c21c:	230a      	movne	r3, #10
 800c21e:	2308      	moveq	r3, #8
 800c220:	2100      	movs	r1, #0
 800c222:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c226:	6866      	ldr	r6, [r4, #4]
 800c228:	60a6      	str	r6, [r4, #8]
 800c22a:	2e00      	cmp	r6, #0
 800c22c:	bfa2      	ittt	ge
 800c22e:	6821      	ldrge	r1, [r4, #0]
 800c230:	f021 0104 	bicge.w	r1, r1, #4
 800c234:	6021      	strge	r1, [r4, #0]
 800c236:	b90d      	cbnz	r5, 800c23c <_printf_i+0x110>
 800c238:	2e00      	cmp	r6, #0
 800c23a:	d04b      	beq.n	800c2d4 <_printf_i+0x1a8>
 800c23c:	4616      	mov	r6, r2
 800c23e:	fbb5 f1f3 	udiv	r1, r5, r3
 800c242:	fb03 5711 	mls	r7, r3, r1, r5
 800c246:	5dc7      	ldrb	r7, [r0, r7]
 800c248:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c24c:	462f      	mov	r7, r5
 800c24e:	42bb      	cmp	r3, r7
 800c250:	460d      	mov	r5, r1
 800c252:	d9f4      	bls.n	800c23e <_printf_i+0x112>
 800c254:	2b08      	cmp	r3, #8
 800c256:	d10b      	bne.n	800c270 <_printf_i+0x144>
 800c258:	6823      	ldr	r3, [r4, #0]
 800c25a:	07df      	lsls	r7, r3, #31
 800c25c:	d508      	bpl.n	800c270 <_printf_i+0x144>
 800c25e:	6923      	ldr	r3, [r4, #16]
 800c260:	6861      	ldr	r1, [r4, #4]
 800c262:	4299      	cmp	r1, r3
 800c264:	bfde      	ittt	le
 800c266:	2330      	movle	r3, #48	@ 0x30
 800c268:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c26c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c270:	1b92      	subs	r2, r2, r6
 800c272:	6122      	str	r2, [r4, #16]
 800c274:	f8cd a000 	str.w	sl, [sp]
 800c278:	464b      	mov	r3, r9
 800c27a:	aa03      	add	r2, sp, #12
 800c27c:	4621      	mov	r1, r4
 800c27e:	4640      	mov	r0, r8
 800c280:	f7ff fee6 	bl	800c050 <_printf_common>
 800c284:	3001      	adds	r0, #1
 800c286:	d14a      	bne.n	800c31e <_printf_i+0x1f2>
 800c288:	f04f 30ff 	mov.w	r0, #4294967295
 800c28c:	b004      	add	sp, #16
 800c28e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c292:	6823      	ldr	r3, [r4, #0]
 800c294:	f043 0320 	orr.w	r3, r3, #32
 800c298:	6023      	str	r3, [r4, #0]
 800c29a:	4833      	ldr	r0, [pc, #204]	@ (800c368 <_printf_i+0x23c>)
 800c29c:	2778      	movs	r7, #120	@ 0x78
 800c29e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c2a2:	6823      	ldr	r3, [r4, #0]
 800c2a4:	6831      	ldr	r1, [r6, #0]
 800c2a6:	061f      	lsls	r7, r3, #24
 800c2a8:	f851 5b04 	ldr.w	r5, [r1], #4
 800c2ac:	d402      	bmi.n	800c2b4 <_printf_i+0x188>
 800c2ae:	065f      	lsls	r7, r3, #25
 800c2b0:	bf48      	it	mi
 800c2b2:	b2ad      	uxthmi	r5, r5
 800c2b4:	6031      	str	r1, [r6, #0]
 800c2b6:	07d9      	lsls	r1, r3, #31
 800c2b8:	bf44      	itt	mi
 800c2ba:	f043 0320 	orrmi.w	r3, r3, #32
 800c2be:	6023      	strmi	r3, [r4, #0]
 800c2c0:	b11d      	cbz	r5, 800c2ca <_printf_i+0x19e>
 800c2c2:	2310      	movs	r3, #16
 800c2c4:	e7ac      	b.n	800c220 <_printf_i+0xf4>
 800c2c6:	4827      	ldr	r0, [pc, #156]	@ (800c364 <_printf_i+0x238>)
 800c2c8:	e7e9      	b.n	800c29e <_printf_i+0x172>
 800c2ca:	6823      	ldr	r3, [r4, #0]
 800c2cc:	f023 0320 	bic.w	r3, r3, #32
 800c2d0:	6023      	str	r3, [r4, #0]
 800c2d2:	e7f6      	b.n	800c2c2 <_printf_i+0x196>
 800c2d4:	4616      	mov	r6, r2
 800c2d6:	e7bd      	b.n	800c254 <_printf_i+0x128>
 800c2d8:	6833      	ldr	r3, [r6, #0]
 800c2da:	6825      	ldr	r5, [r4, #0]
 800c2dc:	6961      	ldr	r1, [r4, #20]
 800c2de:	1d18      	adds	r0, r3, #4
 800c2e0:	6030      	str	r0, [r6, #0]
 800c2e2:	062e      	lsls	r6, r5, #24
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	d501      	bpl.n	800c2ec <_printf_i+0x1c0>
 800c2e8:	6019      	str	r1, [r3, #0]
 800c2ea:	e002      	b.n	800c2f2 <_printf_i+0x1c6>
 800c2ec:	0668      	lsls	r0, r5, #25
 800c2ee:	d5fb      	bpl.n	800c2e8 <_printf_i+0x1bc>
 800c2f0:	8019      	strh	r1, [r3, #0]
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	6123      	str	r3, [r4, #16]
 800c2f6:	4616      	mov	r6, r2
 800c2f8:	e7bc      	b.n	800c274 <_printf_i+0x148>
 800c2fa:	6833      	ldr	r3, [r6, #0]
 800c2fc:	1d1a      	adds	r2, r3, #4
 800c2fe:	6032      	str	r2, [r6, #0]
 800c300:	681e      	ldr	r6, [r3, #0]
 800c302:	6862      	ldr	r2, [r4, #4]
 800c304:	2100      	movs	r1, #0
 800c306:	4630      	mov	r0, r6
 800c308:	f7f3 ff62 	bl	80001d0 <memchr>
 800c30c:	b108      	cbz	r0, 800c312 <_printf_i+0x1e6>
 800c30e:	1b80      	subs	r0, r0, r6
 800c310:	6060      	str	r0, [r4, #4]
 800c312:	6863      	ldr	r3, [r4, #4]
 800c314:	6123      	str	r3, [r4, #16]
 800c316:	2300      	movs	r3, #0
 800c318:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c31c:	e7aa      	b.n	800c274 <_printf_i+0x148>
 800c31e:	6923      	ldr	r3, [r4, #16]
 800c320:	4632      	mov	r2, r6
 800c322:	4649      	mov	r1, r9
 800c324:	4640      	mov	r0, r8
 800c326:	47d0      	blx	sl
 800c328:	3001      	adds	r0, #1
 800c32a:	d0ad      	beq.n	800c288 <_printf_i+0x15c>
 800c32c:	6823      	ldr	r3, [r4, #0]
 800c32e:	079b      	lsls	r3, r3, #30
 800c330:	d413      	bmi.n	800c35a <_printf_i+0x22e>
 800c332:	68e0      	ldr	r0, [r4, #12]
 800c334:	9b03      	ldr	r3, [sp, #12]
 800c336:	4298      	cmp	r0, r3
 800c338:	bfb8      	it	lt
 800c33a:	4618      	movlt	r0, r3
 800c33c:	e7a6      	b.n	800c28c <_printf_i+0x160>
 800c33e:	2301      	movs	r3, #1
 800c340:	4632      	mov	r2, r6
 800c342:	4649      	mov	r1, r9
 800c344:	4640      	mov	r0, r8
 800c346:	47d0      	blx	sl
 800c348:	3001      	adds	r0, #1
 800c34a:	d09d      	beq.n	800c288 <_printf_i+0x15c>
 800c34c:	3501      	adds	r5, #1
 800c34e:	68e3      	ldr	r3, [r4, #12]
 800c350:	9903      	ldr	r1, [sp, #12]
 800c352:	1a5b      	subs	r3, r3, r1
 800c354:	42ab      	cmp	r3, r5
 800c356:	dcf2      	bgt.n	800c33e <_printf_i+0x212>
 800c358:	e7eb      	b.n	800c332 <_printf_i+0x206>
 800c35a:	2500      	movs	r5, #0
 800c35c:	f104 0619 	add.w	r6, r4, #25
 800c360:	e7f5      	b.n	800c34e <_printf_i+0x222>
 800c362:	bf00      	nop
 800c364:	0800cdbc 	.word	0x0800cdbc
 800c368:	0800cdcd 	.word	0x0800cdcd

0800c36c <__sflush_r>:
 800c36c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c374:	0716      	lsls	r6, r2, #28
 800c376:	4605      	mov	r5, r0
 800c378:	460c      	mov	r4, r1
 800c37a:	d454      	bmi.n	800c426 <__sflush_r+0xba>
 800c37c:	684b      	ldr	r3, [r1, #4]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	dc02      	bgt.n	800c388 <__sflush_r+0x1c>
 800c382:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c384:	2b00      	cmp	r3, #0
 800c386:	dd48      	ble.n	800c41a <__sflush_r+0xae>
 800c388:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c38a:	2e00      	cmp	r6, #0
 800c38c:	d045      	beq.n	800c41a <__sflush_r+0xae>
 800c38e:	2300      	movs	r3, #0
 800c390:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c394:	682f      	ldr	r7, [r5, #0]
 800c396:	6a21      	ldr	r1, [r4, #32]
 800c398:	602b      	str	r3, [r5, #0]
 800c39a:	d030      	beq.n	800c3fe <__sflush_r+0x92>
 800c39c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c39e:	89a3      	ldrh	r3, [r4, #12]
 800c3a0:	0759      	lsls	r1, r3, #29
 800c3a2:	d505      	bpl.n	800c3b0 <__sflush_r+0x44>
 800c3a4:	6863      	ldr	r3, [r4, #4]
 800c3a6:	1ad2      	subs	r2, r2, r3
 800c3a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c3aa:	b10b      	cbz	r3, 800c3b0 <__sflush_r+0x44>
 800c3ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c3ae:	1ad2      	subs	r2, r2, r3
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c3b4:	6a21      	ldr	r1, [r4, #32]
 800c3b6:	4628      	mov	r0, r5
 800c3b8:	47b0      	blx	r6
 800c3ba:	1c43      	adds	r3, r0, #1
 800c3bc:	89a3      	ldrh	r3, [r4, #12]
 800c3be:	d106      	bne.n	800c3ce <__sflush_r+0x62>
 800c3c0:	6829      	ldr	r1, [r5, #0]
 800c3c2:	291d      	cmp	r1, #29
 800c3c4:	d82b      	bhi.n	800c41e <__sflush_r+0xb2>
 800c3c6:	4a2a      	ldr	r2, [pc, #168]	@ (800c470 <__sflush_r+0x104>)
 800c3c8:	410a      	asrs	r2, r1
 800c3ca:	07d6      	lsls	r6, r2, #31
 800c3cc:	d427      	bmi.n	800c41e <__sflush_r+0xb2>
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	6062      	str	r2, [r4, #4]
 800c3d2:	04d9      	lsls	r1, r3, #19
 800c3d4:	6922      	ldr	r2, [r4, #16]
 800c3d6:	6022      	str	r2, [r4, #0]
 800c3d8:	d504      	bpl.n	800c3e4 <__sflush_r+0x78>
 800c3da:	1c42      	adds	r2, r0, #1
 800c3dc:	d101      	bne.n	800c3e2 <__sflush_r+0x76>
 800c3de:	682b      	ldr	r3, [r5, #0]
 800c3e0:	b903      	cbnz	r3, 800c3e4 <__sflush_r+0x78>
 800c3e2:	6560      	str	r0, [r4, #84]	@ 0x54
 800c3e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c3e6:	602f      	str	r7, [r5, #0]
 800c3e8:	b1b9      	cbz	r1, 800c41a <__sflush_r+0xae>
 800c3ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c3ee:	4299      	cmp	r1, r3
 800c3f0:	d002      	beq.n	800c3f8 <__sflush_r+0x8c>
 800c3f2:	4628      	mov	r0, r5
 800c3f4:	f7ff fc8a 	bl	800bd0c <_free_r>
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	6363      	str	r3, [r4, #52]	@ 0x34
 800c3fc:	e00d      	b.n	800c41a <__sflush_r+0xae>
 800c3fe:	2301      	movs	r3, #1
 800c400:	4628      	mov	r0, r5
 800c402:	47b0      	blx	r6
 800c404:	4602      	mov	r2, r0
 800c406:	1c50      	adds	r0, r2, #1
 800c408:	d1c9      	bne.n	800c39e <__sflush_r+0x32>
 800c40a:	682b      	ldr	r3, [r5, #0]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d0c6      	beq.n	800c39e <__sflush_r+0x32>
 800c410:	2b1d      	cmp	r3, #29
 800c412:	d001      	beq.n	800c418 <__sflush_r+0xac>
 800c414:	2b16      	cmp	r3, #22
 800c416:	d11e      	bne.n	800c456 <__sflush_r+0xea>
 800c418:	602f      	str	r7, [r5, #0]
 800c41a:	2000      	movs	r0, #0
 800c41c:	e022      	b.n	800c464 <__sflush_r+0xf8>
 800c41e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c422:	b21b      	sxth	r3, r3
 800c424:	e01b      	b.n	800c45e <__sflush_r+0xf2>
 800c426:	690f      	ldr	r7, [r1, #16]
 800c428:	2f00      	cmp	r7, #0
 800c42a:	d0f6      	beq.n	800c41a <__sflush_r+0xae>
 800c42c:	0793      	lsls	r3, r2, #30
 800c42e:	680e      	ldr	r6, [r1, #0]
 800c430:	bf08      	it	eq
 800c432:	694b      	ldreq	r3, [r1, #20]
 800c434:	600f      	str	r7, [r1, #0]
 800c436:	bf18      	it	ne
 800c438:	2300      	movne	r3, #0
 800c43a:	eba6 0807 	sub.w	r8, r6, r7
 800c43e:	608b      	str	r3, [r1, #8]
 800c440:	f1b8 0f00 	cmp.w	r8, #0
 800c444:	dde9      	ble.n	800c41a <__sflush_r+0xae>
 800c446:	6a21      	ldr	r1, [r4, #32]
 800c448:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c44a:	4643      	mov	r3, r8
 800c44c:	463a      	mov	r2, r7
 800c44e:	4628      	mov	r0, r5
 800c450:	47b0      	blx	r6
 800c452:	2800      	cmp	r0, #0
 800c454:	dc08      	bgt.n	800c468 <__sflush_r+0xfc>
 800c456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c45a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c45e:	81a3      	strh	r3, [r4, #12]
 800c460:	f04f 30ff 	mov.w	r0, #4294967295
 800c464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c468:	4407      	add	r7, r0
 800c46a:	eba8 0800 	sub.w	r8, r8, r0
 800c46e:	e7e7      	b.n	800c440 <__sflush_r+0xd4>
 800c470:	dfbffffe 	.word	0xdfbffffe

0800c474 <_fflush_r>:
 800c474:	b538      	push	{r3, r4, r5, lr}
 800c476:	690b      	ldr	r3, [r1, #16]
 800c478:	4605      	mov	r5, r0
 800c47a:	460c      	mov	r4, r1
 800c47c:	b913      	cbnz	r3, 800c484 <_fflush_r+0x10>
 800c47e:	2500      	movs	r5, #0
 800c480:	4628      	mov	r0, r5
 800c482:	bd38      	pop	{r3, r4, r5, pc}
 800c484:	b118      	cbz	r0, 800c48e <_fflush_r+0x1a>
 800c486:	6a03      	ldr	r3, [r0, #32]
 800c488:	b90b      	cbnz	r3, 800c48e <_fflush_r+0x1a>
 800c48a:	f7ff fad9 	bl	800ba40 <__sinit>
 800c48e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d0f3      	beq.n	800c47e <_fflush_r+0xa>
 800c496:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c498:	07d0      	lsls	r0, r2, #31
 800c49a:	d404      	bmi.n	800c4a6 <_fflush_r+0x32>
 800c49c:	0599      	lsls	r1, r3, #22
 800c49e:	d402      	bmi.n	800c4a6 <_fflush_r+0x32>
 800c4a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c4a2:	f7ff fc04 	bl	800bcae <__retarget_lock_acquire_recursive>
 800c4a6:	4628      	mov	r0, r5
 800c4a8:	4621      	mov	r1, r4
 800c4aa:	f7ff ff5f 	bl	800c36c <__sflush_r>
 800c4ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c4b0:	07da      	lsls	r2, r3, #31
 800c4b2:	4605      	mov	r5, r0
 800c4b4:	d4e4      	bmi.n	800c480 <_fflush_r+0xc>
 800c4b6:	89a3      	ldrh	r3, [r4, #12]
 800c4b8:	059b      	lsls	r3, r3, #22
 800c4ba:	d4e1      	bmi.n	800c480 <_fflush_r+0xc>
 800c4bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c4be:	f7ff fbf7 	bl	800bcb0 <__retarget_lock_release_recursive>
 800c4c2:	e7dd      	b.n	800c480 <_fflush_r+0xc>

0800c4c4 <fiprintf>:
 800c4c4:	b40e      	push	{r1, r2, r3}
 800c4c6:	b503      	push	{r0, r1, lr}
 800c4c8:	4601      	mov	r1, r0
 800c4ca:	ab03      	add	r3, sp, #12
 800c4cc:	4805      	ldr	r0, [pc, #20]	@ (800c4e4 <fiprintf+0x20>)
 800c4ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4d2:	6800      	ldr	r0, [r0, #0]
 800c4d4:	9301      	str	r3, [sp, #4]
 800c4d6:	f000 f87f 	bl	800c5d8 <_vfiprintf_r>
 800c4da:	b002      	add	sp, #8
 800c4dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4e0:	b003      	add	sp, #12
 800c4e2:	4770      	bx	lr
 800c4e4:	20000030 	.word	0x20000030

0800c4e8 <memmove>:
 800c4e8:	4288      	cmp	r0, r1
 800c4ea:	b510      	push	{r4, lr}
 800c4ec:	eb01 0402 	add.w	r4, r1, r2
 800c4f0:	d902      	bls.n	800c4f8 <memmove+0x10>
 800c4f2:	4284      	cmp	r4, r0
 800c4f4:	4623      	mov	r3, r4
 800c4f6:	d807      	bhi.n	800c508 <memmove+0x20>
 800c4f8:	1e43      	subs	r3, r0, #1
 800c4fa:	42a1      	cmp	r1, r4
 800c4fc:	d008      	beq.n	800c510 <memmove+0x28>
 800c4fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c502:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c506:	e7f8      	b.n	800c4fa <memmove+0x12>
 800c508:	4402      	add	r2, r0
 800c50a:	4601      	mov	r1, r0
 800c50c:	428a      	cmp	r2, r1
 800c50e:	d100      	bne.n	800c512 <memmove+0x2a>
 800c510:	bd10      	pop	{r4, pc}
 800c512:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c516:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c51a:	e7f7      	b.n	800c50c <memmove+0x24>

0800c51c <abort>:
 800c51c:	b508      	push	{r3, lr}
 800c51e:	2006      	movs	r0, #6
 800c520:	f000 fa2e 	bl	800c980 <raise>
 800c524:	2001      	movs	r0, #1
 800c526:	f7f4 fe9b 	bl	8001260 <_exit>

0800c52a <_realloc_r>:
 800c52a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c52e:	4680      	mov	r8, r0
 800c530:	4615      	mov	r5, r2
 800c532:	460c      	mov	r4, r1
 800c534:	b921      	cbnz	r1, 800c540 <_realloc_r+0x16>
 800c536:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c53a:	4611      	mov	r1, r2
 800c53c:	f7ff b92a 	b.w	800b794 <_malloc_r>
 800c540:	b92a      	cbnz	r2, 800c54e <_realloc_r+0x24>
 800c542:	f7ff fbe3 	bl	800bd0c <_free_r>
 800c546:	2400      	movs	r4, #0
 800c548:	4620      	mov	r0, r4
 800c54a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c54e:	f000 fa33 	bl	800c9b8 <_malloc_usable_size_r>
 800c552:	4285      	cmp	r5, r0
 800c554:	4606      	mov	r6, r0
 800c556:	d802      	bhi.n	800c55e <_realloc_r+0x34>
 800c558:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c55c:	d8f4      	bhi.n	800c548 <_realloc_r+0x1e>
 800c55e:	4629      	mov	r1, r5
 800c560:	4640      	mov	r0, r8
 800c562:	f7ff f917 	bl	800b794 <_malloc_r>
 800c566:	4607      	mov	r7, r0
 800c568:	2800      	cmp	r0, #0
 800c56a:	d0ec      	beq.n	800c546 <_realloc_r+0x1c>
 800c56c:	42b5      	cmp	r5, r6
 800c56e:	462a      	mov	r2, r5
 800c570:	4621      	mov	r1, r4
 800c572:	bf28      	it	cs
 800c574:	4632      	movcs	r2, r6
 800c576:	f7ff fb9c 	bl	800bcb2 <memcpy>
 800c57a:	4621      	mov	r1, r4
 800c57c:	4640      	mov	r0, r8
 800c57e:	f7ff fbc5 	bl	800bd0c <_free_r>
 800c582:	463c      	mov	r4, r7
 800c584:	e7e0      	b.n	800c548 <_realloc_r+0x1e>

0800c586 <__sfputc_r>:
 800c586:	6893      	ldr	r3, [r2, #8]
 800c588:	3b01      	subs	r3, #1
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	b410      	push	{r4}
 800c58e:	6093      	str	r3, [r2, #8]
 800c590:	da08      	bge.n	800c5a4 <__sfputc_r+0x1e>
 800c592:	6994      	ldr	r4, [r2, #24]
 800c594:	42a3      	cmp	r3, r4
 800c596:	db01      	blt.n	800c59c <__sfputc_r+0x16>
 800c598:	290a      	cmp	r1, #10
 800c59a:	d103      	bne.n	800c5a4 <__sfputc_r+0x1e>
 800c59c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5a0:	f000 b932 	b.w	800c808 <__swbuf_r>
 800c5a4:	6813      	ldr	r3, [r2, #0]
 800c5a6:	1c58      	adds	r0, r3, #1
 800c5a8:	6010      	str	r0, [r2, #0]
 800c5aa:	7019      	strb	r1, [r3, #0]
 800c5ac:	4608      	mov	r0, r1
 800c5ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5b2:	4770      	bx	lr

0800c5b4 <__sfputs_r>:
 800c5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5b6:	4606      	mov	r6, r0
 800c5b8:	460f      	mov	r7, r1
 800c5ba:	4614      	mov	r4, r2
 800c5bc:	18d5      	adds	r5, r2, r3
 800c5be:	42ac      	cmp	r4, r5
 800c5c0:	d101      	bne.n	800c5c6 <__sfputs_r+0x12>
 800c5c2:	2000      	movs	r0, #0
 800c5c4:	e007      	b.n	800c5d6 <__sfputs_r+0x22>
 800c5c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5ca:	463a      	mov	r2, r7
 800c5cc:	4630      	mov	r0, r6
 800c5ce:	f7ff ffda 	bl	800c586 <__sfputc_r>
 800c5d2:	1c43      	adds	r3, r0, #1
 800c5d4:	d1f3      	bne.n	800c5be <__sfputs_r+0xa>
 800c5d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c5d8 <_vfiprintf_r>:
 800c5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5dc:	460d      	mov	r5, r1
 800c5de:	b09d      	sub	sp, #116	@ 0x74
 800c5e0:	4614      	mov	r4, r2
 800c5e2:	4698      	mov	r8, r3
 800c5e4:	4606      	mov	r6, r0
 800c5e6:	b118      	cbz	r0, 800c5f0 <_vfiprintf_r+0x18>
 800c5e8:	6a03      	ldr	r3, [r0, #32]
 800c5ea:	b90b      	cbnz	r3, 800c5f0 <_vfiprintf_r+0x18>
 800c5ec:	f7ff fa28 	bl	800ba40 <__sinit>
 800c5f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c5f2:	07d9      	lsls	r1, r3, #31
 800c5f4:	d405      	bmi.n	800c602 <_vfiprintf_r+0x2a>
 800c5f6:	89ab      	ldrh	r3, [r5, #12]
 800c5f8:	059a      	lsls	r2, r3, #22
 800c5fa:	d402      	bmi.n	800c602 <_vfiprintf_r+0x2a>
 800c5fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c5fe:	f7ff fb56 	bl	800bcae <__retarget_lock_acquire_recursive>
 800c602:	89ab      	ldrh	r3, [r5, #12]
 800c604:	071b      	lsls	r3, r3, #28
 800c606:	d501      	bpl.n	800c60c <_vfiprintf_r+0x34>
 800c608:	692b      	ldr	r3, [r5, #16]
 800c60a:	b99b      	cbnz	r3, 800c634 <_vfiprintf_r+0x5c>
 800c60c:	4629      	mov	r1, r5
 800c60e:	4630      	mov	r0, r6
 800c610:	f000 f938 	bl	800c884 <__swsetup_r>
 800c614:	b170      	cbz	r0, 800c634 <_vfiprintf_r+0x5c>
 800c616:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c618:	07dc      	lsls	r4, r3, #31
 800c61a:	d504      	bpl.n	800c626 <_vfiprintf_r+0x4e>
 800c61c:	f04f 30ff 	mov.w	r0, #4294967295
 800c620:	b01d      	add	sp, #116	@ 0x74
 800c622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c626:	89ab      	ldrh	r3, [r5, #12]
 800c628:	0598      	lsls	r0, r3, #22
 800c62a:	d4f7      	bmi.n	800c61c <_vfiprintf_r+0x44>
 800c62c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c62e:	f7ff fb3f 	bl	800bcb0 <__retarget_lock_release_recursive>
 800c632:	e7f3      	b.n	800c61c <_vfiprintf_r+0x44>
 800c634:	2300      	movs	r3, #0
 800c636:	9309      	str	r3, [sp, #36]	@ 0x24
 800c638:	2320      	movs	r3, #32
 800c63a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c63e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c642:	2330      	movs	r3, #48	@ 0x30
 800c644:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c7f4 <_vfiprintf_r+0x21c>
 800c648:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c64c:	f04f 0901 	mov.w	r9, #1
 800c650:	4623      	mov	r3, r4
 800c652:	469a      	mov	sl, r3
 800c654:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c658:	b10a      	cbz	r2, 800c65e <_vfiprintf_r+0x86>
 800c65a:	2a25      	cmp	r2, #37	@ 0x25
 800c65c:	d1f9      	bne.n	800c652 <_vfiprintf_r+0x7a>
 800c65e:	ebba 0b04 	subs.w	fp, sl, r4
 800c662:	d00b      	beq.n	800c67c <_vfiprintf_r+0xa4>
 800c664:	465b      	mov	r3, fp
 800c666:	4622      	mov	r2, r4
 800c668:	4629      	mov	r1, r5
 800c66a:	4630      	mov	r0, r6
 800c66c:	f7ff ffa2 	bl	800c5b4 <__sfputs_r>
 800c670:	3001      	adds	r0, #1
 800c672:	f000 80a7 	beq.w	800c7c4 <_vfiprintf_r+0x1ec>
 800c676:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c678:	445a      	add	r2, fp
 800c67a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c67c:	f89a 3000 	ldrb.w	r3, [sl]
 800c680:	2b00      	cmp	r3, #0
 800c682:	f000 809f 	beq.w	800c7c4 <_vfiprintf_r+0x1ec>
 800c686:	2300      	movs	r3, #0
 800c688:	f04f 32ff 	mov.w	r2, #4294967295
 800c68c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c690:	f10a 0a01 	add.w	sl, sl, #1
 800c694:	9304      	str	r3, [sp, #16]
 800c696:	9307      	str	r3, [sp, #28]
 800c698:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c69c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c69e:	4654      	mov	r4, sl
 800c6a0:	2205      	movs	r2, #5
 800c6a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6a6:	4853      	ldr	r0, [pc, #332]	@ (800c7f4 <_vfiprintf_r+0x21c>)
 800c6a8:	f7f3 fd92 	bl	80001d0 <memchr>
 800c6ac:	9a04      	ldr	r2, [sp, #16]
 800c6ae:	b9d8      	cbnz	r0, 800c6e8 <_vfiprintf_r+0x110>
 800c6b0:	06d1      	lsls	r1, r2, #27
 800c6b2:	bf44      	itt	mi
 800c6b4:	2320      	movmi	r3, #32
 800c6b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c6ba:	0713      	lsls	r3, r2, #28
 800c6bc:	bf44      	itt	mi
 800c6be:	232b      	movmi	r3, #43	@ 0x2b
 800c6c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c6c4:	f89a 3000 	ldrb.w	r3, [sl]
 800c6c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c6ca:	d015      	beq.n	800c6f8 <_vfiprintf_r+0x120>
 800c6cc:	9a07      	ldr	r2, [sp, #28]
 800c6ce:	4654      	mov	r4, sl
 800c6d0:	2000      	movs	r0, #0
 800c6d2:	f04f 0c0a 	mov.w	ip, #10
 800c6d6:	4621      	mov	r1, r4
 800c6d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6dc:	3b30      	subs	r3, #48	@ 0x30
 800c6de:	2b09      	cmp	r3, #9
 800c6e0:	d94b      	bls.n	800c77a <_vfiprintf_r+0x1a2>
 800c6e2:	b1b0      	cbz	r0, 800c712 <_vfiprintf_r+0x13a>
 800c6e4:	9207      	str	r2, [sp, #28]
 800c6e6:	e014      	b.n	800c712 <_vfiprintf_r+0x13a>
 800c6e8:	eba0 0308 	sub.w	r3, r0, r8
 800c6ec:	fa09 f303 	lsl.w	r3, r9, r3
 800c6f0:	4313      	orrs	r3, r2
 800c6f2:	9304      	str	r3, [sp, #16]
 800c6f4:	46a2      	mov	sl, r4
 800c6f6:	e7d2      	b.n	800c69e <_vfiprintf_r+0xc6>
 800c6f8:	9b03      	ldr	r3, [sp, #12]
 800c6fa:	1d19      	adds	r1, r3, #4
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	9103      	str	r1, [sp, #12]
 800c700:	2b00      	cmp	r3, #0
 800c702:	bfbb      	ittet	lt
 800c704:	425b      	neglt	r3, r3
 800c706:	f042 0202 	orrlt.w	r2, r2, #2
 800c70a:	9307      	strge	r3, [sp, #28]
 800c70c:	9307      	strlt	r3, [sp, #28]
 800c70e:	bfb8      	it	lt
 800c710:	9204      	strlt	r2, [sp, #16]
 800c712:	7823      	ldrb	r3, [r4, #0]
 800c714:	2b2e      	cmp	r3, #46	@ 0x2e
 800c716:	d10a      	bne.n	800c72e <_vfiprintf_r+0x156>
 800c718:	7863      	ldrb	r3, [r4, #1]
 800c71a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c71c:	d132      	bne.n	800c784 <_vfiprintf_r+0x1ac>
 800c71e:	9b03      	ldr	r3, [sp, #12]
 800c720:	1d1a      	adds	r2, r3, #4
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	9203      	str	r2, [sp, #12]
 800c726:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c72a:	3402      	adds	r4, #2
 800c72c:	9305      	str	r3, [sp, #20]
 800c72e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c804 <_vfiprintf_r+0x22c>
 800c732:	7821      	ldrb	r1, [r4, #0]
 800c734:	2203      	movs	r2, #3
 800c736:	4650      	mov	r0, sl
 800c738:	f7f3 fd4a 	bl	80001d0 <memchr>
 800c73c:	b138      	cbz	r0, 800c74e <_vfiprintf_r+0x176>
 800c73e:	9b04      	ldr	r3, [sp, #16]
 800c740:	eba0 000a 	sub.w	r0, r0, sl
 800c744:	2240      	movs	r2, #64	@ 0x40
 800c746:	4082      	lsls	r2, r0
 800c748:	4313      	orrs	r3, r2
 800c74a:	3401      	adds	r4, #1
 800c74c:	9304      	str	r3, [sp, #16]
 800c74e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c752:	4829      	ldr	r0, [pc, #164]	@ (800c7f8 <_vfiprintf_r+0x220>)
 800c754:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c758:	2206      	movs	r2, #6
 800c75a:	f7f3 fd39 	bl	80001d0 <memchr>
 800c75e:	2800      	cmp	r0, #0
 800c760:	d03f      	beq.n	800c7e2 <_vfiprintf_r+0x20a>
 800c762:	4b26      	ldr	r3, [pc, #152]	@ (800c7fc <_vfiprintf_r+0x224>)
 800c764:	bb1b      	cbnz	r3, 800c7ae <_vfiprintf_r+0x1d6>
 800c766:	9b03      	ldr	r3, [sp, #12]
 800c768:	3307      	adds	r3, #7
 800c76a:	f023 0307 	bic.w	r3, r3, #7
 800c76e:	3308      	adds	r3, #8
 800c770:	9303      	str	r3, [sp, #12]
 800c772:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c774:	443b      	add	r3, r7
 800c776:	9309      	str	r3, [sp, #36]	@ 0x24
 800c778:	e76a      	b.n	800c650 <_vfiprintf_r+0x78>
 800c77a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c77e:	460c      	mov	r4, r1
 800c780:	2001      	movs	r0, #1
 800c782:	e7a8      	b.n	800c6d6 <_vfiprintf_r+0xfe>
 800c784:	2300      	movs	r3, #0
 800c786:	3401      	adds	r4, #1
 800c788:	9305      	str	r3, [sp, #20]
 800c78a:	4619      	mov	r1, r3
 800c78c:	f04f 0c0a 	mov.w	ip, #10
 800c790:	4620      	mov	r0, r4
 800c792:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c796:	3a30      	subs	r2, #48	@ 0x30
 800c798:	2a09      	cmp	r2, #9
 800c79a:	d903      	bls.n	800c7a4 <_vfiprintf_r+0x1cc>
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d0c6      	beq.n	800c72e <_vfiprintf_r+0x156>
 800c7a0:	9105      	str	r1, [sp, #20]
 800c7a2:	e7c4      	b.n	800c72e <_vfiprintf_r+0x156>
 800c7a4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7a8:	4604      	mov	r4, r0
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	e7f0      	b.n	800c790 <_vfiprintf_r+0x1b8>
 800c7ae:	ab03      	add	r3, sp, #12
 800c7b0:	9300      	str	r3, [sp, #0]
 800c7b2:	462a      	mov	r2, r5
 800c7b4:	4b12      	ldr	r3, [pc, #72]	@ (800c800 <_vfiprintf_r+0x228>)
 800c7b6:	a904      	add	r1, sp, #16
 800c7b8:	4630      	mov	r0, r6
 800c7ba:	f3af 8000 	nop.w
 800c7be:	4607      	mov	r7, r0
 800c7c0:	1c78      	adds	r0, r7, #1
 800c7c2:	d1d6      	bne.n	800c772 <_vfiprintf_r+0x19a>
 800c7c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c7c6:	07d9      	lsls	r1, r3, #31
 800c7c8:	d405      	bmi.n	800c7d6 <_vfiprintf_r+0x1fe>
 800c7ca:	89ab      	ldrh	r3, [r5, #12]
 800c7cc:	059a      	lsls	r2, r3, #22
 800c7ce:	d402      	bmi.n	800c7d6 <_vfiprintf_r+0x1fe>
 800c7d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c7d2:	f7ff fa6d 	bl	800bcb0 <__retarget_lock_release_recursive>
 800c7d6:	89ab      	ldrh	r3, [r5, #12]
 800c7d8:	065b      	lsls	r3, r3, #25
 800c7da:	f53f af1f 	bmi.w	800c61c <_vfiprintf_r+0x44>
 800c7de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c7e0:	e71e      	b.n	800c620 <_vfiprintf_r+0x48>
 800c7e2:	ab03      	add	r3, sp, #12
 800c7e4:	9300      	str	r3, [sp, #0]
 800c7e6:	462a      	mov	r2, r5
 800c7e8:	4b05      	ldr	r3, [pc, #20]	@ (800c800 <_vfiprintf_r+0x228>)
 800c7ea:	a904      	add	r1, sp, #16
 800c7ec:	4630      	mov	r0, r6
 800c7ee:	f7ff fc9d 	bl	800c12c <_printf_i>
 800c7f2:	e7e4      	b.n	800c7be <_vfiprintf_r+0x1e6>
 800c7f4:	0800cdab 	.word	0x0800cdab
 800c7f8:	0800cdb5 	.word	0x0800cdb5
 800c7fc:	00000000 	.word	0x00000000
 800c800:	0800c5b5 	.word	0x0800c5b5
 800c804:	0800cdb1 	.word	0x0800cdb1

0800c808 <__swbuf_r>:
 800c808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c80a:	460e      	mov	r6, r1
 800c80c:	4614      	mov	r4, r2
 800c80e:	4605      	mov	r5, r0
 800c810:	b118      	cbz	r0, 800c81a <__swbuf_r+0x12>
 800c812:	6a03      	ldr	r3, [r0, #32]
 800c814:	b90b      	cbnz	r3, 800c81a <__swbuf_r+0x12>
 800c816:	f7ff f913 	bl	800ba40 <__sinit>
 800c81a:	69a3      	ldr	r3, [r4, #24]
 800c81c:	60a3      	str	r3, [r4, #8]
 800c81e:	89a3      	ldrh	r3, [r4, #12]
 800c820:	071a      	lsls	r2, r3, #28
 800c822:	d501      	bpl.n	800c828 <__swbuf_r+0x20>
 800c824:	6923      	ldr	r3, [r4, #16]
 800c826:	b943      	cbnz	r3, 800c83a <__swbuf_r+0x32>
 800c828:	4621      	mov	r1, r4
 800c82a:	4628      	mov	r0, r5
 800c82c:	f000 f82a 	bl	800c884 <__swsetup_r>
 800c830:	b118      	cbz	r0, 800c83a <__swbuf_r+0x32>
 800c832:	f04f 37ff 	mov.w	r7, #4294967295
 800c836:	4638      	mov	r0, r7
 800c838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c83a:	6823      	ldr	r3, [r4, #0]
 800c83c:	6922      	ldr	r2, [r4, #16]
 800c83e:	1a98      	subs	r0, r3, r2
 800c840:	6963      	ldr	r3, [r4, #20]
 800c842:	b2f6      	uxtb	r6, r6
 800c844:	4283      	cmp	r3, r0
 800c846:	4637      	mov	r7, r6
 800c848:	dc05      	bgt.n	800c856 <__swbuf_r+0x4e>
 800c84a:	4621      	mov	r1, r4
 800c84c:	4628      	mov	r0, r5
 800c84e:	f7ff fe11 	bl	800c474 <_fflush_r>
 800c852:	2800      	cmp	r0, #0
 800c854:	d1ed      	bne.n	800c832 <__swbuf_r+0x2a>
 800c856:	68a3      	ldr	r3, [r4, #8]
 800c858:	3b01      	subs	r3, #1
 800c85a:	60a3      	str	r3, [r4, #8]
 800c85c:	6823      	ldr	r3, [r4, #0]
 800c85e:	1c5a      	adds	r2, r3, #1
 800c860:	6022      	str	r2, [r4, #0]
 800c862:	701e      	strb	r6, [r3, #0]
 800c864:	6962      	ldr	r2, [r4, #20]
 800c866:	1c43      	adds	r3, r0, #1
 800c868:	429a      	cmp	r2, r3
 800c86a:	d004      	beq.n	800c876 <__swbuf_r+0x6e>
 800c86c:	89a3      	ldrh	r3, [r4, #12]
 800c86e:	07db      	lsls	r3, r3, #31
 800c870:	d5e1      	bpl.n	800c836 <__swbuf_r+0x2e>
 800c872:	2e0a      	cmp	r6, #10
 800c874:	d1df      	bne.n	800c836 <__swbuf_r+0x2e>
 800c876:	4621      	mov	r1, r4
 800c878:	4628      	mov	r0, r5
 800c87a:	f7ff fdfb 	bl	800c474 <_fflush_r>
 800c87e:	2800      	cmp	r0, #0
 800c880:	d0d9      	beq.n	800c836 <__swbuf_r+0x2e>
 800c882:	e7d6      	b.n	800c832 <__swbuf_r+0x2a>

0800c884 <__swsetup_r>:
 800c884:	b538      	push	{r3, r4, r5, lr}
 800c886:	4b29      	ldr	r3, [pc, #164]	@ (800c92c <__swsetup_r+0xa8>)
 800c888:	4605      	mov	r5, r0
 800c88a:	6818      	ldr	r0, [r3, #0]
 800c88c:	460c      	mov	r4, r1
 800c88e:	b118      	cbz	r0, 800c898 <__swsetup_r+0x14>
 800c890:	6a03      	ldr	r3, [r0, #32]
 800c892:	b90b      	cbnz	r3, 800c898 <__swsetup_r+0x14>
 800c894:	f7ff f8d4 	bl	800ba40 <__sinit>
 800c898:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c89c:	0719      	lsls	r1, r3, #28
 800c89e:	d422      	bmi.n	800c8e6 <__swsetup_r+0x62>
 800c8a0:	06da      	lsls	r2, r3, #27
 800c8a2:	d407      	bmi.n	800c8b4 <__swsetup_r+0x30>
 800c8a4:	2209      	movs	r2, #9
 800c8a6:	602a      	str	r2, [r5, #0]
 800c8a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c8ac:	81a3      	strh	r3, [r4, #12]
 800c8ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c8b2:	e033      	b.n	800c91c <__swsetup_r+0x98>
 800c8b4:	0758      	lsls	r0, r3, #29
 800c8b6:	d512      	bpl.n	800c8de <__swsetup_r+0x5a>
 800c8b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c8ba:	b141      	cbz	r1, 800c8ce <__swsetup_r+0x4a>
 800c8bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c8c0:	4299      	cmp	r1, r3
 800c8c2:	d002      	beq.n	800c8ca <__swsetup_r+0x46>
 800c8c4:	4628      	mov	r0, r5
 800c8c6:	f7ff fa21 	bl	800bd0c <_free_r>
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	6363      	str	r3, [r4, #52]	@ 0x34
 800c8ce:	89a3      	ldrh	r3, [r4, #12]
 800c8d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c8d4:	81a3      	strh	r3, [r4, #12]
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	6063      	str	r3, [r4, #4]
 800c8da:	6923      	ldr	r3, [r4, #16]
 800c8dc:	6023      	str	r3, [r4, #0]
 800c8de:	89a3      	ldrh	r3, [r4, #12]
 800c8e0:	f043 0308 	orr.w	r3, r3, #8
 800c8e4:	81a3      	strh	r3, [r4, #12]
 800c8e6:	6923      	ldr	r3, [r4, #16]
 800c8e8:	b94b      	cbnz	r3, 800c8fe <__swsetup_r+0x7a>
 800c8ea:	89a3      	ldrh	r3, [r4, #12]
 800c8ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c8f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c8f4:	d003      	beq.n	800c8fe <__swsetup_r+0x7a>
 800c8f6:	4621      	mov	r1, r4
 800c8f8:	4628      	mov	r0, r5
 800c8fa:	f000 f88b 	bl	800ca14 <__smakebuf_r>
 800c8fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c902:	f013 0201 	ands.w	r2, r3, #1
 800c906:	d00a      	beq.n	800c91e <__swsetup_r+0x9a>
 800c908:	2200      	movs	r2, #0
 800c90a:	60a2      	str	r2, [r4, #8]
 800c90c:	6962      	ldr	r2, [r4, #20]
 800c90e:	4252      	negs	r2, r2
 800c910:	61a2      	str	r2, [r4, #24]
 800c912:	6922      	ldr	r2, [r4, #16]
 800c914:	b942      	cbnz	r2, 800c928 <__swsetup_r+0xa4>
 800c916:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c91a:	d1c5      	bne.n	800c8a8 <__swsetup_r+0x24>
 800c91c:	bd38      	pop	{r3, r4, r5, pc}
 800c91e:	0799      	lsls	r1, r3, #30
 800c920:	bf58      	it	pl
 800c922:	6962      	ldrpl	r2, [r4, #20]
 800c924:	60a2      	str	r2, [r4, #8]
 800c926:	e7f4      	b.n	800c912 <__swsetup_r+0x8e>
 800c928:	2000      	movs	r0, #0
 800c92a:	e7f7      	b.n	800c91c <__swsetup_r+0x98>
 800c92c:	20000030 	.word	0x20000030

0800c930 <_raise_r>:
 800c930:	291f      	cmp	r1, #31
 800c932:	b538      	push	{r3, r4, r5, lr}
 800c934:	4605      	mov	r5, r0
 800c936:	460c      	mov	r4, r1
 800c938:	d904      	bls.n	800c944 <_raise_r+0x14>
 800c93a:	2316      	movs	r3, #22
 800c93c:	6003      	str	r3, [r0, #0]
 800c93e:	f04f 30ff 	mov.w	r0, #4294967295
 800c942:	bd38      	pop	{r3, r4, r5, pc}
 800c944:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c946:	b112      	cbz	r2, 800c94e <_raise_r+0x1e>
 800c948:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c94c:	b94b      	cbnz	r3, 800c962 <_raise_r+0x32>
 800c94e:	4628      	mov	r0, r5
 800c950:	f000 f830 	bl	800c9b4 <_getpid_r>
 800c954:	4622      	mov	r2, r4
 800c956:	4601      	mov	r1, r0
 800c958:	4628      	mov	r0, r5
 800c95a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c95e:	f000 b817 	b.w	800c990 <_kill_r>
 800c962:	2b01      	cmp	r3, #1
 800c964:	d00a      	beq.n	800c97c <_raise_r+0x4c>
 800c966:	1c59      	adds	r1, r3, #1
 800c968:	d103      	bne.n	800c972 <_raise_r+0x42>
 800c96a:	2316      	movs	r3, #22
 800c96c:	6003      	str	r3, [r0, #0]
 800c96e:	2001      	movs	r0, #1
 800c970:	e7e7      	b.n	800c942 <_raise_r+0x12>
 800c972:	2100      	movs	r1, #0
 800c974:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c978:	4620      	mov	r0, r4
 800c97a:	4798      	blx	r3
 800c97c:	2000      	movs	r0, #0
 800c97e:	e7e0      	b.n	800c942 <_raise_r+0x12>

0800c980 <raise>:
 800c980:	4b02      	ldr	r3, [pc, #8]	@ (800c98c <raise+0xc>)
 800c982:	4601      	mov	r1, r0
 800c984:	6818      	ldr	r0, [r3, #0]
 800c986:	f7ff bfd3 	b.w	800c930 <_raise_r>
 800c98a:	bf00      	nop
 800c98c:	20000030 	.word	0x20000030

0800c990 <_kill_r>:
 800c990:	b538      	push	{r3, r4, r5, lr}
 800c992:	4d07      	ldr	r5, [pc, #28]	@ (800c9b0 <_kill_r+0x20>)
 800c994:	2300      	movs	r3, #0
 800c996:	4604      	mov	r4, r0
 800c998:	4608      	mov	r0, r1
 800c99a:	4611      	mov	r1, r2
 800c99c:	602b      	str	r3, [r5, #0]
 800c99e:	f7f4 fc4f 	bl	8001240 <_kill>
 800c9a2:	1c43      	adds	r3, r0, #1
 800c9a4:	d102      	bne.n	800c9ac <_kill_r+0x1c>
 800c9a6:	682b      	ldr	r3, [r5, #0]
 800c9a8:	b103      	cbz	r3, 800c9ac <_kill_r+0x1c>
 800c9aa:	6023      	str	r3, [r4, #0]
 800c9ac:	bd38      	pop	{r3, r4, r5, pc}
 800c9ae:	bf00      	nop
 800c9b0:	200043c8 	.word	0x200043c8

0800c9b4 <_getpid_r>:
 800c9b4:	f7f4 bc3c 	b.w	8001230 <_getpid>

0800c9b8 <_malloc_usable_size_r>:
 800c9b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9bc:	1f18      	subs	r0, r3, #4
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	bfbc      	itt	lt
 800c9c2:	580b      	ldrlt	r3, [r1, r0]
 800c9c4:	18c0      	addlt	r0, r0, r3
 800c9c6:	4770      	bx	lr

0800c9c8 <__swhatbuf_r>:
 800c9c8:	b570      	push	{r4, r5, r6, lr}
 800c9ca:	460c      	mov	r4, r1
 800c9cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9d0:	2900      	cmp	r1, #0
 800c9d2:	b096      	sub	sp, #88	@ 0x58
 800c9d4:	4615      	mov	r5, r2
 800c9d6:	461e      	mov	r6, r3
 800c9d8:	da0d      	bge.n	800c9f6 <__swhatbuf_r+0x2e>
 800c9da:	89a3      	ldrh	r3, [r4, #12]
 800c9dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c9e0:	f04f 0100 	mov.w	r1, #0
 800c9e4:	bf14      	ite	ne
 800c9e6:	2340      	movne	r3, #64	@ 0x40
 800c9e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c9ec:	2000      	movs	r0, #0
 800c9ee:	6031      	str	r1, [r6, #0]
 800c9f0:	602b      	str	r3, [r5, #0]
 800c9f2:	b016      	add	sp, #88	@ 0x58
 800c9f4:	bd70      	pop	{r4, r5, r6, pc}
 800c9f6:	466a      	mov	r2, sp
 800c9f8:	f000 f848 	bl	800ca8c <_fstat_r>
 800c9fc:	2800      	cmp	r0, #0
 800c9fe:	dbec      	blt.n	800c9da <__swhatbuf_r+0x12>
 800ca00:	9901      	ldr	r1, [sp, #4]
 800ca02:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ca06:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ca0a:	4259      	negs	r1, r3
 800ca0c:	4159      	adcs	r1, r3
 800ca0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ca12:	e7eb      	b.n	800c9ec <__swhatbuf_r+0x24>

0800ca14 <__smakebuf_r>:
 800ca14:	898b      	ldrh	r3, [r1, #12]
 800ca16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca18:	079d      	lsls	r5, r3, #30
 800ca1a:	4606      	mov	r6, r0
 800ca1c:	460c      	mov	r4, r1
 800ca1e:	d507      	bpl.n	800ca30 <__smakebuf_r+0x1c>
 800ca20:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ca24:	6023      	str	r3, [r4, #0]
 800ca26:	6123      	str	r3, [r4, #16]
 800ca28:	2301      	movs	r3, #1
 800ca2a:	6163      	str	r3, [r4, #20]
 800ca2c:	b003      	add	sp, #12
 800ca2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca30:	ab01      	add	r3, sp, #4
 800ca32:	466a      	mov	r2, sp
 800ca34:	f7ff ffc8 	bl	800c9c8 <__swhatbuf_r>
 800ca38:	9f00      	ldr	r7, [sp, #0]
 800ca3a:	4605      	mov	r5, r0
 800ca3c:	4639      	mov	r1, r7
 800ca3e:	4630      	mov	r0, r6
 800ca40:	f7fe fea8 	bl	800b794 <_malloc_r>
 800ca44:	b948      	cbnz	r0, 800ca5a <__smakebuf_r+0x46>
 800ca46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca4a:	059a      	lsls	r2, r3, #22
 800ca4c:	d4ee      	bmi.n	800ca2c <__smakebuf_r+0x18>
 800ca4e:	f023 0303 	bic.w	r3, r3, #3
 800ca52:	f043 0302 	orr.w	r3, r3, #2
 800ca56:	81a3      	strh	r3, [r4, #12]
 800ca58:	e7e2      	b.n	800ca20 <__smakebuf_r+0xc>
 800ca5a:	89a3      	ldrh	r3, [r4, #12]
 800ca5c:	6020      	str	r0, [r4, #0]
 800ca5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca62:	81a3      	strh	r3, [r4, #12]
 800ca64:	9b01      	ldr	r3, [sp, #4]
 800ca66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ca6a:	b15b      	cbz	r3, 800ca84 <__smakebuf_r+0x70>
 800ca6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca70:	4630      	mov	r0, r6
 800ca72:	f000 f81d 	bl	800cab0 <_isatty_r>
 800ca76:	b128      	cbz	r0, 800ca84 <__smakebuf_r+0x70>
 800ca78:	89a3      	ldrh	r3, [r4, #12]
 800ca7a:	f023 0303 	bic.w	r3, r3, #3
 800ca7e:	f043 0301 	orr.w	r3, r3, #1
 800ca82:	81a3      	strh	r3, [r4, #12]
 800ca84:	89a3      	ldrh	r3, [r4, #12]
 800ca86:	431d      	orrs	r5, r3
 800ca88:	81a5      	strh	r5, [r4, #12]
 800ca8a:	e7cf      	b.n	800ca2c <__smakebuf_r+0x18>

0800ca8c <_fstat_r>:
 800ca8c:	b538      	push	{r3, r4, r5, lr}
 800ca8e:	4d07      	ldr	r5, [pc, #28]	@ (800caac <_fstat_r+0x20>)
 800ca90:	2300      	movs	r3, #0
 800ca92:	4604      	mov	r4, r0
 800ca94:	4608      	mov	r0, r1
 800ca96:	4611      	mov	r1, r2
 800ca98:	602b      	str	r3, [r5, #0]
 800ca9a:	f7f4 fc31 	bl	8001300 <_fstat>
 800ca9e:	1c43      	adds	r3, r0, #1
 800caa0:	d102      	bne.n	800caa8 <_fstat_r+0x1c>
 800caa2:	682b      	ldr	r3, [r5, #0]
 800caa4:	b103      	cbz	r3, 800caa8 <_fstat_r+0x1c>
 800caa6:	6023      	str	r3, [r4, #0]
 800caa8:	bd38      	pop	{r3, r4, r5, pc}
 800caaa:	bf00      	nop
 800caac:	200043c8 	.word	0x200043c8

0800cab0 <_isatty_r>:
 800cab0:	b538      	push	{r3, r4, r5, lr}
 800cab2:	4d06      	ldr	r5, [pc, #24]	@ (800cacc <_isatty_r+0x1c>)
 800cab4:	2300      	movs	r3, #0
 800cab6:	4604      	mov	r4, r0
 800cab8:	4608      	mov	r0, r1
 800caba:	602b      	str	r3, [r5, #0]
 800cabc:	f7f4 fc30 	bl	8001320 <_isatty>
 800cac0:	1c43      	adds	r3, r0, #1
 800cac2:	d102      	bne.n	800caca <_isatty_r+0x1a>
 800cac4:	682b      	ldr	r3, [r5, #0]
 800cac6:	b103      	cbz	r3, 800caca <_isatty_r+0x1a>
 800cac8:	6023      	str	r3, [r4, #0]
 800caca:	bd38      	pop	{r3, r4, r5, pc}
 800cacc:	200043c8 	.word	0x200043c8

0800cad0 <_init>:
 800cad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cad2:	bf00      	nop
 800cad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cad6:	bc08      	pop	{r3}
 800cad8:	469e      	mov	lr, r3
 800cada:	4770      	bx	lr

0800cadc <_fini>:
 800cadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cade:	bf00      	nop
 800cae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cae2:	bc08      	pop	{r3}
 800cae4:	469e      	mov	lr, r3
 800cae6:	4770      	bx	lr
