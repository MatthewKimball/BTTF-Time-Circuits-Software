
Time Circuit Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000109c0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000035c  08010b50  08010b50  00011b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010eac  08010eac  00012084  2**0
                  CONTENTS
  4 .ARM          00000008  08010eac  08010eac  00011eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010eb4  08010eb4  00012084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010eb4  08010eb4  00011eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010eb8  08010eb8  00011eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08010ebc  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00012084  2**0
                  CONTENTS
 10 .bss          00005344  20000084  20000084  00012084  2**2
                  ALLOC
 11 ._user_heap_stack 00004000  200053c8  200053c8  00012084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00012084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003810c  00000000  00000000  000120b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007a25  00000000  00000000  0004a1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003130  00000000  00000000  00051be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000026a5  00000000  00000000  00054d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e999  00000000  00000000  000573bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00042103  00000000  00000000  00085d56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fad70  00000000  00000000  000c7e59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001c2bc9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000db88  00000000  00000000  001c2c0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  001d0794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010b38 	.word	0x08010b38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08010b38 	.word	0x08010b38

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000566:	463b      	mov	r3, r7
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000572:	4b21      	ldr	r3, [pc, #132]	@ (80005f8 <MX_ADC1_Init+0x98>)
 8000574:	4a21      	ldr	r2, [pc, #132]	@ (80005fc <MX_ADC1_Init+0x9c>)
 8000576:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000578:	4b1f      	ldr	r3, [pc, #124]	@ (80005f8 <MX_ADC1_Init+0x98>)
 800057a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800057e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000580:	4b1d      	ldr	r3, [pc, #116]	@ (80005f8 <MX_ADC1_Init+0x98>)
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000586:	4b1c      	ldr	r3, [pc, #112]	@ (80005f8 <MX_ADC1_Init+0x98>)
 8000588:	2200      	movs	r2, #0
 800058a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800058c:	4b1a      	ldr	r3, [pc, #104]	@ (80005f8 <MX_ADC1_Init+0x98>)
 800058e:	2200      	movs	r2, #0
 8000590:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000592:	4b19      	ldr	r3, [pc, #100]	@ (80005f8 <MX_ADC1_Init+0x98>)
 8000594:	2200      	movs	r2, #0
 8000596:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800059a:	4b17      	ldr	r3, [pc, #92]	@ (80005f8 <MX_ADC1_Init+0x98>)
 800059c:	2200      	movs	r2, #0
 800059e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005a0:	4b15      	ldr	r3, [pc, #84]	@ (80005f8 <MX_ADC1_Init+0x98>)
 80005a2:	4a17      	ldr	r2, [pc, #92]	@ (8000600 <MX_ADC1_Init+0xa0>)
 80005a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005a6:	4b14      	ldr	r3, [pc, #80]	@ (80005f8 <MX_ADC1_Init+0x98>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005ac:	4b12      	ldr	r3, [pc, #72]	@ (80005f8 <MX_ADC1_Init+0x98>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005b2:	4b11      	ldr	r3, [pc, #68]	@ (80005f8 <MX_ADC1_Init+0x98>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ba:	4b0f      	ldr	r3, [pc, #60]	@ (80005f8 <MX_ADC1_Init+0x98>)
 80005bc:	2201      	movs	r2, #1
 80005be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005c0:	480d      	ldr	r0, [pc, #52]	@ (80005f8 <MX_ADC1_Init+0x98>)
 80005c2:	f001 f935 	bl	8001830 <HAL_ADC_Init>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005cc:	f000 fd64 	bl	8001098 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005d4:	2301      	movs	r3, #1
 80005d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005dc:	463b      	mov	r3, r7
 80005de:	4619      	mov	r1, r3
 80005e0:	4805      	ldr	r0, [pc, #20]	@ (80005f8 <MX_ADC1_Init+0x98>)
 80005e2:	f001 f969 	bl	80018b8 <HAL_ADC_ConfigChannel>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005ec:	f000 fd54 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005f0:	bf00      	nop
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	200000a0 	.word	0x200000a0
 80005fc:	40012000 	.word	0x40012000
 8000600:	0f000001 	.word	0x0f000001

08000604 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08a      	sub	sp, #40	@ 0x28
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a17      	ldr	r2, [pc, #92]	@ (8000680 <HAL_ADC_MspInit+0x7c>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d127      	bne.n	8000676 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	613b      	str	r3, [r7, #16]
 800062a:	4b16      	ldr	r3, [pc, #88]	@ (8000684 <HAL_ADC_MspInit+0x80>)
 800062c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800062e:	4a15      	ldr	r2, [pc, #84]	@ (8000684 <HAL_ADC_MspInit+0x80>)
 8000630:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000634:	6453      	str	r3, [r2, #68]	@ 0x44
 8000636:	4b13      	ldr	r3, [pc, #76]	@ (8000684 <HAL_ADC_MspInit+0x80>)
 8000638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800063a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800063e:	613b      	str	r3, [r7, #16]
 8000640:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	4b0f      	ldr	r3, [pc, #60]	@ (8000684 <HAL_ADC_MspInit+0x80>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	4a0e      	ldr	r2, [pc, #56]	@ (8000684 <HAL_ADC_MspInit+0x80>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6313      	str	r3, [r2, #48]	@ 0x30
 8000652:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <HAL_ADC_MspInit+0x80>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = CAN_ID_SWITCH_4_Pin;
 800065e:	2301      	movs	r3, #1
 8000660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000662:	2303      	movs	r3, #3
 8000664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CAN_ID_SWITCH_4_GPIO_Port, &GPIO_InitStruct);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4619      	mov	r1, r3
 8000670:	4805      	ldr	r0, [pc, #20]	@ (8000688 <HAL_ADC_MspInit+0x84>)
 8000672:	f002 f807 	bl	8002684 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000676:	bf00      	nop
 8000678:	3728      	adds	r7, #40	@ 0x28
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40012000 	.word	0x40012000
 8000684:	40023800 	.word	0x40023800
 8000688:	40020000 	.word	0x40020000

0800068c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000690:	4b16      	ldr	r3, [pc, #88]	@ (80006ec <MX_CAN1_Init+0x60>)
 8000692:	4a17      	ldr	r2, [pc, #92]	@ (80006f0 <MX_CAN1_Init+0x64>)
 8000694:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000696:	4b15      	ldr	r3, [pc, #84]	@ (80006ec <MX_CAN1_Init+0x60>)
 8000698:	2210      	movs	r2, #16
 800069a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800069c:	4b13      	ldr	r3, [pc, #76]	@ (80006ec <MX_CAN1_Init+0x60>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006a2:	4b12      	ldr	r3, [pc, #72]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80006a8:	4b10      	ldr	r3, [pc, #64]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80006ae:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006b4:	4b0d      	ldr	r3, [pc, #52]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006ba:	4b0c      	ldr	r3, [pc, #48]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006bc:	2200      	movs	r2, #0
 80006be:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006c0:	4b0a      	ldr	r3, [pc, #40]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006c6:	4b09      	ldr	r3, [pc, #36]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006cc:	4b07      	ldr	r3, [pc, #28]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006d2:	4b06      	ldr	r3, [pc, #24]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006d8:	4804      	ldr	r0, [pc, #16]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006da:	f001 fb0b 	bl	8001cf4 <HAL_CAN_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80006e4:	f000 fcd8 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	200000e8 	.word	0x200000e8
 80006f0:	40006400 	.word	0x40006400

080006f4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08a      	sub	sp, #40	@ 0x28
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a19      	ldr	r2, [pc, #100]	@ (8000778 <HAL_CAN_MspInit+0x84>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d12c      	bne.n	8000770 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
 800071a:	4b18      	ldr	r3, [pc, #96]	@ (800077c <HAL_CAN_MspInit+0x88>)
 800071c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800071e:	4a17      	ldr	r2, [pc, #92]	@ (800077c <HAL_CAN_MspInit+0x88>)
 8000720:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000724:	6413      	str	r3, [r2, #64]	@ 0x40
 8000726:	4b15      	ldr	r3, [pc, #84]	@ (800077c <HAL_CAN_MspInit+0x88>)
 8000728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800072a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	4b11      	ldr	r3, [pc, #68]	@ (800077c <HAL_CAN_MspInit+0x88>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a10      	ldr	r2, [pc, #64]	@ (800077c <HAL_CAN_MspInit+0x88>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <HAL_CAN_MspInit+0x88>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800074e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000754:	2302      	movs	r3, #2
 8000756:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075c:	2303      	movs	r3, #3
 800075e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000760:	2309      	movs	r3, #9
 8000762:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4619      	mov	r1, r3
 800076a:	4805      	ldr	r0, [pc, #20]	@ (8000780 <HAL_CAN_MspInit+0x8c>)
 800076c:	f001 ff8a 	bl	8002684 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000770:	bf00      	nop
 8000772:	3728      	adds	r7, #40	@ 0x28
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40006400 	.word	0x40006400
 800077c:	40023800 	.word	0x40023800
 8000780:	40020000 	.word	0x40020000

08000784 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <MX_DMA_Init+0x3c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a0b      	ldr	r2, [pc, #44]	@ (80007c0 <MX_DMA_Init+0x3c>)
 8000794:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <MX_DMA_Init+0x3c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2105      	movs	r1, #5
 80007aa:	200f      	movs	r0, #15
 80007ac:	f001 fc56 	bl	800205c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80007b0:	200f      	movs	r0, #15
 80007b2:	f001 fc6f 	bl	8002094 <HAL_NVIC_EnableIRQ>

}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800

080007c4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of MainTask */
  MainTaskHandle = osThreadNew(StartMainTask, NULL, &MainTask_attributes);
 80007c8:	4a0c      	ldr	r2, [pc, #48]	@ (80007fc <MX_FREERTOS_Init+0x38>)
 80007ca:	2100      	movs	r1, #0
 80007cc:	480c      	ldr	r0, [pc, #48]	@ (8000800 <MX_FREERTOS_Init+0x3c>)
 80007ce:	f00b fc4f 	bl	800c070 <osThreadNew>
 80007d2:	4603      	mov	r3, r0
 80007d4:	4a0b      	ldr	r2, [pc, #44]	@ (8000804 <MX_FREERTOS_Init+0x40>)
 80007d6:	6013      	str	r3, [r2, #0]

  /* creation of SoundTask */
  SoundTaskHandle = osThreadNew(StartSoundTask, NULL, &SoundTask_attributes);
 80007d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000808 <MX_FREERTOS_Init+0x44>)
 80007da:	2100      	movs	r1, #0
 80007dc:	480b      	ldr	r0, [pc, #44]	@ (800080c <MX_FREERTOS_Init+0x48>)
 80007de:	f00b fc47 	bl	800c070 <osThreadNew>
 80007e2:	4603      	mov	r3, r0
 80007e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000810 <MX_FREERTOS_Init+0x4c>)
 80007e6:	6013      	str	r3, [r2, #0]

  /* creation of ColonTask */
  ColonTaskHandle = osThreadNew(StartColonTask, NULL, &ColonTask_attributes);
 80007e8:	4a0a      	ldr	r2, [pc, #40]	@ (8000814 <MX_FREERTOS_Init+0x50>)
 80007ea:	2100      	movs	r1, #0
 80007ec:	480a      	ldr	r0, [pc, #40]	@ (8000818 <MX_FREERTOS_Init+0x54>)
 80007ee:	f00b fc3f 	bl	800c070 <osThreadNew>
 80007f2:	4603      	mov	r3, r0
 80007f4:	4a09      	ldr	r2, [pc, #36]	@ (800081c <MX_FREERTOS_Init+0x58>)
 80007f6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	08010c30 	.word	0x08010c30
 8000800:	08000821 	.word	0x08000821
 8000804:	20000118 	.word	0x20000118
 8000808:	08010c54 	.word	0x08010c54
 800080c:	08000845 	.word	0x08000845
 8000810:	2000011c 	.word	0x2000011c
 8000814:	08010c78 	.word	0x08010c78
 8000818:	08000855 	.word	0x08000855
 800081c:	20000120 	.word	0x20000120

08000820 <StartMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void *argument)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMainTask */
  imu_bno055_init();
 8000828:	f009 fd48 	bl	800a2bc <imu_bno055_init>
  /* Infinite loop */
  for(;;)
  {
    timeCircuit_control_update(gTimeCircuitConfig);
 800082c:	4b04      	ldr	r3, [pc, #16]	@ (8000840 <StartMainTask+0x20>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4618      	mov	r0, r3
 8000832:	f00a fc6d 	bl	800b110 <timeCircuit_control_update>
    osDelay(20); // Run control update every 20ms (adjust as needed)
 8000836:	2014      	movs	r0, #20
 8000838:	f00b fcac 	bl	800c194 <osDelay>
    timeCircuit_control_update(gTimeCircuitConfig);
 800083c:	bf00      	nop
 800083e:	e7f5      	b.n	800082c <StartMainTask+0xc>
 8000840:	200002d0 	.word	0x200002d0

08000844 <StartSoundTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSoundTask */
void StartSoundTask(void *argument)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  {
//    if (osMessageQueueGet(soundQueueHandle, &currentSound, NULL, osWaitForever) == osOK)
//    {
//      soundEffects_playSound(gSoundEffectConfig, gStorageConfig, currentSound);
//      while (gIsPlaying)
        osDelay(10); // Wait until sound is finished
 800084c:	200a      	movs	r0, #10
 800084e:	f00b fca1 	bl	800c194 <osDelay>
 8000852:	e7fb      	b.n	800084c <StartSoundTask+0x8>

08000854 <StartColonTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartColonTask */
void StartColonTask(void *argument)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartColonTask */
  /* Infinite loop */
  for(;;)
  {
    timeCircuit__toggleTimeColon(gTimeCircuitConfig);
 800085c:	4b05      	ldr	r3, [pc, #20]	@ (8000874 <StartColonTask+0x20>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4618      	mov	r0, r3
 8000862:	f00a fbf3 	bl	800b04c <timeCircuit__toggleTimeColon>
//    if (toogleStatus == 3) {
//      const char* tone = "beep.wav";
//      osMessageQueuePut(soundQueueHandle, tone, 0, 0);
  //  }

    osDelay(500);
 8000866:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800086a:	f00b fc93 	bl	800c194 <osDelay>
    timeCircuit__toggleTimeColon(gTimeCircuitConfig);
 800086e:	bf00      	nop
 8000870:	e7f4      	b.n	800085c <StartColonTask+0x8>
 8000872:	bf00      	nop
 8000874:	200002d0 	.word	0x200002d0

08000878 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08a      	sub	sp, #40	@ 0x28
 800087c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	613b      	str	r3, [r7, #16]
 8000892:	4b7e      	ldr	r3, [pc, #504]	@ (8000a8c <MX_GPIO_Init+0x214>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a7d      	ldr	r2, [pc, #500]	@ (8000a8c <MX_GPIO_Init+0x214>)
 8000898:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b7b      	ldr	r3, [pc, #492]	@ (8000a8c <MX_GPIO_Init+0x214>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	4b77      	ldr	r3, [pc, #476]	@ (8000a8c <MX_GPIO_Init+0x214>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a76      	ldr	r2, [pc, #472]	@ (8000a8c <MX_GPIO_Init+0x214>)
 80008b4:	f043 0304 	orr.w	r3, r3, #4
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b74      	ldr	r3, [pc, #464]	@ (8000a8c <MX_GPIO_Init+0x214>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f003 0304 	and.w	r3, r3, #4
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	4b70      	ldr	r3, [pc, #448]	@ (8000a8c <MX_GPIO_Init+0x214>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a6f      	ldr	r2, [pc, #444]	@ (8000a8c <MX_GPIO_Init+0x214>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b6d      	ldr	r3, [pc, #436]	@ (8000a8c <MX_GPIO_Init+0x214>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	4b69      	ldr	r3, [pc, #420]	@ (8000a8c <MX_GPIO_Init+0x214>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a68      	ldr	r2, [pc, #416]	@ (8000a8c <MX_GPIO_Init+0x214>)
 80008ec:	f043 0302 	orr.w	r3, r3, #2
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f2:	4b66      	ldr	r3, [pc, #408]	@ (8000a8c <MX_GPIO_Init+0x214>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f003 0302 	and.w	r3, r3, #2
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	4b62      	ldr	r3, [pc, #392]	@ (8000a8c <MX_GPIO_Init+0x214>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	4a61      	ldr	r2, [pc, #388]	@ (8000a8c <MX_GPIO_Init+0x214>)
 8000908:	f043 0308 	orr.w	r3, r3, #8
 800090c:	6313      	str	r3, [r2, #48]	@ 0x30
 800090e:	4b5f      	ldr	r3, [pc, #380]	@ (8000a8c <MX_GPIO_Init+0x214>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f003 0308 	and.w	r3, r3, #8
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, KEYPAD_COL_2_Pin|KEYPAD_COL_1_Pin|DIAGNOSTIC_RGB_LED_Pin, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	f241 0105 	movw	r1, #4101	@ 0x1005
 8000920:	485b      	ldr	r0, [pc, #364]	@ (8000a90 <MX_GPIO_Init+0x218>)
 8000922:	f002 f863 	bl	80029ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WHITE_LED_Pin|KEYPAD_COL_3_Pin, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	2118      	movs	r1, #24
 800092a:	485a      	ldr	r0, [pc, #360]	@ (8000a94 <MX_GPIO_Init+0x21c>)
 800092c:	f002 f85e 	bl	80029ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000930:	2201      	movs	r2, #1
 8000932:	2120      	movs	r1, #32
 8000934:	4856      	ldr	r0, [pc, #344]	@ (8000a90 <MX_GPIO_Init+0x218>)
 8000936:	f002 f859 	bl	80029ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_MODE_GPIO_Port, SD_MODE_Pin, GPIO_PIN_SET);
 800093a:	2201      	movs	r2, #1
 800093c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000940:	4855      	ldr	r0, [pc, #340]	@ (8000a98 <MX_GPIO_Init+0x220>)
 8000942:	f002 f853 	bl	80029ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_RTC_RST_GPIO_Port, EXT_RTC_RST_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800094c:	4852      	ldr	r0, [pc, #328]	@ (8000a98 <MX_GPIO_Init+0x220>)
 800094e:	f002 f84d 	bl	80029ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = KEYPAD_COL_2_Pin|KEYPAD_COL_1_Pin|SD_CS_Pin|DIAGNOSTIC_RGB_LED_Pin;
 8000952:	f241 0325 	movw	r3, #4133	@ 0x1025
 8000956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2301      	movs	r3, #1
 800095a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4619      	mov	r1, r3
 800096a:	4849      	ldr	r0, [pc, #292]	@ (8000a90 <MX_GPIO_Init+0x218>)
 800096c:	f001 fe8a 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = KEYPAD_ROW_1_Pin|KEYPAD_ROW_4_Pin|KEYPAD_ROW_3_Pin;
 8000970:	231a      	movs	r3, #26
 8000972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000974:	2300      	movs	r3, #0
 8000976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000978:	2302      	movs	r3, #2
 800097a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4619      	mov	r1, r3
 8000982:	4843      	ldr	r0, [pc, #268]	@ (8000a90 <MX_GPIO_Init+0x218>)
 8000984:	f001 fe7e 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEYPAD_ROW_2_Pin;
 8000988:	2302      	movs	r3, #2
 800098a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098c:	2300      	movs	r3, #0
 800098e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000990:	2302      	movs	r3, #2
 8000992:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEYPAD_ROW_2_GPIO_Port, &GPIO_InitStruct);
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	4619      	mov	r1, r3
 800099a:	483e      	ldr	r0, [pc, #248]	@ (8000a94 <MX_GPIO_Init+0x21c>)
 800099c:	f001 fe72 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = WHITE_LED_Pin|KEYPAD_COL_3_Pin;
 80009a0:	2318      	movs	r3, #24
 80009a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a4:	2301      	movs	r3, #1
 80009a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4619      	mov	r1, r3
 80009b6:	4837      	ldr	r0, [pc, #220]	@ (8000a94 <MX_GPIO_Init+0x21c>)
 80009b8:	f001 fe64 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SD_CD_Pin|KEYPAD_ENTER_Pin|GLITCH_SWITCH_Pin|EXT_RTC_INT_Pin;
 80009bc:	f240 2323 	movw	r3, #547	@ 0x223
 80009c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	4619      	mov	r1, r3
 80009d0:	4831      	ldr	r0, [pc, #196]	@ (8000a98 <MX_GPIO_Init+0x220>)
 80009d2:	f001 fe57 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_MODE_Pin;
 80009d6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80009da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80009dc:	2311      	movs	r3, #17
 80009de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_MODE_GPIO_Port, &GPIO_InitStruct);
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	4619      	mov	r1, r3
 80009ee:	482a      	ldr	r0, [pc, #168]	@ (8000a98 <MX_GPIO_Init+0x220>)
 80009f0:	f001 fe48 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CAN_ID_SWITCH_1_Pin|CAN_ID_SWITCH_2_Pin|CAN_ID_SWITCH_3_Pin|MUTE_SWITCH_Pin;
 80009f4:	f44f 63b8 	mov.w	r3, #1472	@ 0x5c0
 80009f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	4821      	ldr	r0, [pc, #132]	@ (8000a90 <MX_GPIO_Init+0x218>)
 8000a0a:	f001 fe3b 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TIME_TRAVEL_SIM_Pin;
 8000a0e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a14:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TIME_TRAVEL_SIM_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	481a      	ldr	r0, [pc, #104]	@ (8000a90 <MX_GPIO_Init+0x218>)
 8000a26:	f001 fe2d 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INTERRUPT_Pin;
 8000a2a:	2304      	movs	r3, #4
 8000a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a2e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4817      	ldr	r0, [pc, #92]	@ (8000a9c <MX_GPIO_Init+0x224>)
 8000a40:	f001 fe20 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT_RTC_RST_Pin;
 8000a44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EXT_RTC_RST_GPIO_Port, &GPIO_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480e      	ldr	r0, [pc, #56]	@ (8000a98 <MX_GPIO_Init+0x220>)
 8000a5e:	f001 fe11 	bl	8002684 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2105      	movs	r1, #5
 8000a66:	2008      	movs	r0, #8
 8000a68:	f001 faf8 	bl	800205c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000a6c:	2008      	movs	r0, #8
 8000a6e:	f001 fb11 	bl	8002094 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2105      	movs	r1, #5
 8000a76:	2028      	movs	r0, #40	@ 0x28
 8000a78:	f001 faf0 	bl	800205c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a7c:	2028      	movs	r0, #40	@ 0x28
 8000a7e:	f001 fb09 	bl	8002094 <HAL_NVIC_EnableIRQ>

}
 8000a82:	bf00      	nop
 8000a84:	3728      	adds	r7, #40	@ 0x28
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020800 	.word	0x40020800
 8000a94:	40020000 	.word	0x40020000
 8000a98:	40020400 	.word	0x40020400
 8000a9c:	40020c00 	.word	0x40020c00

08000aa0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aa4:	4b12      	ldr	r3, [pc, #72]	@ (8000af0 <MX_I2C1_Init+0x50>)
 8000aa6:	4a13      	ldr	r2, [pc, #76]	@ (8000af4 <MX_I2C1_Init+0x54>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000aaa:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <MX_I2C1_Init+0x50>)
 8000aac:	4a12      	ldr	r2, [pc, #72]	@ (8000af8 <MX_I2C1_Init+0x58>)
 8000aae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8000af0 <MX_I2C1_Init+0x50>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8000af0 <MX_I2C1_Init+0x50>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000abc:	4b0c      	ldr	r3, [pc, #48]	@ (8000af0 <MX_I2C1_Init+0x50>)
 8000abe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ac2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8000af0 <MX_I2C1_Init+0x50>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000aca:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <MX_I2C1_Init+0x50>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ad0:	4b07      	ldr	r3, [pc, #28]	@ (8000af0 <MX_I2C1_Init+0x50>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ad6:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <MX_I2C1_Init+0x50>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000adc:	4804      	ldr	r0, [pc, #16]	@ (8000af0 <MX_I2C1_Init+0x50>)
 8000ade:	f001 ffb7 	bl	8002a50 <HAL_I2C_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ae8:	f000 fad6 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000124 	.word	0x20000124
 8000af4:	40005400 	.word	0x40005400
 8000af8:	000186a0 	.word	0x000186a0

08000afc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b00:	4b12      	ldr	r3, [pc, #72]	@ (8000b4c <MX_I2C2_Init+0x50>)
 8000b02:	4a13      	ldr	r2, [pc, #76]	@ (8000b50 <MX_I2C2_Init+0x54>)
 8000b04:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000b06:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <MX_I2C2_Init+0x50>)
 8000b08:	4a12      	ldr	r2, [pc, #72]	@ (8000b54 <MX_I2C2_Init+0x58>)
 8000b0a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b4c <MX_I2C2_Init+0x50>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	@ (8000b4c <MX_I2C2_Init+0x50>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <MX_I2C2_Init+0x50>)
 8000b1a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b1e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b20:	4b0a      	ldr	r3, [pc, #40]	@ (8000b4c <MX_I2C2_Init+0x50>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b26:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <MX_I2C2_Init+0x50>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b2c:	4b07      	ldr	r3, [pc, #28]	@ (8000b4c <MX_I2C2_Init+0x50>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b32:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <MX_I2C2_Init+0x50>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b38:	4804      	ldr	r0, [pc, #16]	@ (8000b4c <MX_I2C2_Init+0x50>)
 8000b3a:	f001 ff89 	bl	8002a50 <HAL_I2C_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b44:	f000 faa8 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000178 	.word	0x20000178
 8000b50:	40005800 	.word	0x40005800
 8000b54:	000186a0 	.word	0x000186a0

08000b58 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000b5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ba8 <MX_I2C3_Init+0x50>)
 8000b5e:	4a13      	ldr	r2, [pc, #76]	@ (8000bac <MX_I2C3_Init+0x54>)
 8000b60:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000b62:	4b11      	ldr	r3, [pc, #68]	@ (8000ba8 <MX_I2C3_Init+0x50>)
 8000b64:	4a12      	ldr	r2, [pc, #72]	@ (8000bb0 <MX_I2C3_Init+0x58>)
 8000b66:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba8 <MX_I2C3_Init+0x50>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba8 <MX_I2C3_Init+0x50>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba8 <MX_I2C3_Init+0x50>)
 8000b76:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b7a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba8 <MX_I2C3_Init+0x50>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000b82:	4b09      	ldr	r3, [pc, #36]	@ (8000ba8 <MX_I2C3_Init+0x50>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b88:	4b07      	ldr	r3, [pc, #28]	@ (8000ba8 <MX_I2C3_Init+0x50>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <MX_I2C3_Init+0x50>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b94:	4804      	ldr	r0, [pc, #16]	@ (8000ba8 <MX_I2C3_Init+0x50>)
 8000b96:	f001 ff5b 	bl	8002a50 <HAL_I2C_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000ba0:	f000 fa7a 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	200001cc 	.word	0x200001cc
 8000bac:	40005c00 	.word	0x40005c00
 8000bb0:	000186a0 	.word	0x000186a0

08000bb4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08e      	sub	sp, #56	@ 0x38
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a5b      	ldr	r2, [pc, #364]	@ (8000d40 <HAL_I2C_MspInit+0x18c>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d12c      	bne.n	8000c30 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	623b      	str	r3, [r7, #32]
 8000bda:	4b5a      	ldr	r3, [pc, #360]	@ (8000d44 <HAL_I2C_MspInit+0x190>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	4a59      	ldr	r2, [pc, #356]	@ (8000d44 <HAL_I2C_MspInit+0x190>)
 8000be0:	f043 0302 	orr.w	r3, r3, #2
 8000be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be6:	4b57      	ldr	r3, [pc, #348]	@ (8000d44 <HAL_I2C_MspInit+0x190>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	623b      	str	r3, [r7, #32]
 8000bf0:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 8000bf2:	23c0      	movs	r3, #192	@ 0xc0
 8000bf4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf6:	2312      	movs	r3, #18
 8000bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c02:	2304      	movs	r3, #4
 8000c04:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	484e      	ldr	r0, [pc, #312]	@ (8000d48 <HAL_I2C_MspInit+0x194>)
 8000c0e:	f001 fd39 	bl	8002684 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	61fb      	str	r3, [r7, #28]
 8000c16:	4b4b      	ldr	r3, [pc, #300]	@ (8000d44 <HAL_I2C_MspInit+0x190>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1a:	4a4a      	ldr	r2, [pc, #296]	@ (8000d44 <HAL_I2C_MspInit+0x190>)
 8000c1c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c22:	4b48      	ldr	r3, [pc, #288]	@ (8000d44 <HAL_I2C_MspInit+0x190>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c2a:	61fb      	str	r3, [r7, #28]
 8000c2c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000c2e:	e083      	b.n	8000d38 <HAL_I2C_MspInit+0x184>
  else if(i2cHandle->Instance==I2C2)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a45      	ldr	r2, [pc, #276]	@ (8000d4c <HAL_I2C_MspInit+0x198>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d12d      	bne.n	8000c96 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61bb      	str	r3, [r7, #24]
 8000c3e:	4b41      	ldr	r3, [pc, #260]	@ (8000d44 <HAL_I2C_MspInit+0x190>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	4a40      	ldr	r2, [pc, #256]	@ (8000d44 <HAL_I2C_MspInit+0x190>)
 8000c44:	f043 0302 	orr.w	r3, r3, #2
 8000c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4a:	4b3e      	ldr	r3, [pc, #248]	@ (8000d44 <HAL_I2C_MspInit+0x190>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	61bb      	str	r3, [r7, #24]
 8000c54:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c56:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c5c:	2312      	movs	r3, #18
 8000c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c64:	2303      	movs	r3, #3
 8000c66:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c68:	2304      	movs	r3, #4
 8000c6a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c70:	4619      	mov	r1, r3
 8000c72:	4835      	ldr	r0, [pc, #212]	@ (8000d48 <HAL_I2C_MspInit+0x194>)
 8000c74:	f001 fd06 	bl	8002684 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	4b31      	ldr	r3, [pc, #196]	@ (8000d44 <HAL_I2C_MspInit+0x190>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c80:	4a30      	ldr	r2, [pc, #192]	@ (8000d44 <HAL_I2C_MspInit+0x190>)
 8000c82:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c86:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c88:	4b2e      	ldr	r3, [pc, #184]	@ (8000d44 <HAL_I2C_MspInit+0x190>)
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	697b      	ldr	r3, [r7, #20]
}
 8000c94:	e050      	b.n	8000d38 <HAL_I2C_MspInit+0x184>
  else if(i2cHandle->Instance==I2C3)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a2d      	ldr	r2, [pc, #180]	@ (8000d50 <HAL_I2C_MspInit+0x19c>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d14b      	bne.n	8000d38 <HAL_I2C_MspInit+0x184>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	4b27      	ldr	r3, [pc, #156]	@ (8000d44 <HAL_I2C_MspInit+0x190>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca8:	4a26      	ldr	r2, [pc, #152]	@ (8000d44 <HAL_I2C_MspInit+0x190>)
 8000caa:	f043 0304 	orr.w	r3, r3, #4
 8000cae:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb0:	4b24      	ldr	r3, [pc, #144]	@ (8000d44 <HAL_I2C_MspInit+0x190>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb4:	f003 0304 	and.w	r3, r3, #4
 8000cb8:	613b      	str	r3, [r7, #16]
 8000cba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	4b20      	ldr	r3, [pc, #128]	@ (8000d44 <HAL_I2C_MspInit+0x190>)
 8000cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc4:	4a1f      	ldr	r2, [pc, #124]	@ (8000d44 <HAL_I2C_MspInit+0x190>)
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ccc:	4b1d      	ldr	r3, [pc, #116]	@ (8000d44 <HAL_I2C_MspInit+0x190>)
 8000cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd0:	f003 0301 	and.w	r3, r3, #1
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TC_DISPLAY_SDA_Pin;
 8000cd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cdc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cde:	2312      	movs	r3, #18
 8000ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000cea:	2304      	movs	r3, #4
 8000cec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(TC_DISPLAY_SDA_GPIO_Port, &GPIO_InitStruct);
 8000cee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4817      	ldr	r0, [pc, #92]	@ (8000d54 <HAL_I2C_MspInit+0x1a0>)
 8000cf6:	f001 fcc5 	bl	8002684 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TC_DISPLAY_SCL_Pin;
 8000cfa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cfe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d00:	2312      	movs	r3, #18
 8000d02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(TC_DISPLAY_SCL_GPIO_Port, &GPIO_InitStruct);
 8000d10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d14:	4619      	mov	r1, r3
 8000d16:	4810      	ldr	r0, [pc, #64]	@ (8000d58 <HAL_I2C_MspInit+0x1a4>)
 8000d18:	f001 fcb4 	bl	8002684 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <HAL_I2C_MspInit+0x190>)
 8000d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d24:	4a07      	ldr	r2, [pc, #28]	@ (8000d44 <HAL_I2C_MspInit+0x190>)
 8000d26:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000d2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d2c:	4b05      	ldr	r3, [pc, #20]	@ (8000d44 <HAL_I2C_MspInit+0x190>)
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	68bb      	ldr	r3, [r7, #8]
}
 8000d38:	bf00      	nop
 8000d3a:	3738      	adds	r7, #56	@ 0x38
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40005400 	.word	0x40005400
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020400 	.word	0x40020400
 8000d4c:	40005800 	.word	0x40005800
 8000d50:	40005c00 	.word	0x40005c00
 8000d54:	40020800 	.word	0x40020800
 8000d58:	40020000 	.word	0x40020000

08000d5c <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000d60:	4b13      	ldr	r3, [pc, #76]	@ (8000db0 <MX_I2S2_Init+0x54>)
 8000d62:	4a14      	ldr	r2, [pc, #80]	@ (8000db4 <MX_I2S2_Init+0x58>)
 8000d64:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000d66:	4b12      	ldr	r3, [pc, #72]	@ (8000db0 <MX_I2S2_Init+0x54>)
 8000d68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d6c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d6e:	4b10      	ldr	r3, [pc, #64]	@ (8000db0 <MX_I2S2_Init+0x54>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000d74:	4b0e      	ldr	r3, [pc, #56]	@ (8000db0 <MX_I2S2_Init+0x54>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000db0 <MX_I2S2_Init+0x54>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000d80:	4b0b      	ldr	r3, [pc, #44]	@ (8000db0 <MX_I2S2_Init+0x54>)
 8000d82:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000d86:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000d88:	4b09      	ldr	r3, [pc, #36]	@ (8000db0 <MX_I2S2_Init+0x54>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000d8e:	4b08      	ldr	r3, [pc, #32]	@ (8000db0 <MX_I2S2_Init+0x54>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000d94:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <MX_I2S2_Init+0x54>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000d9a:	4805      	ldr	r0, [pc, #20]	@ (8000db0 <MX_I2S2_Init+0x54>)
 8000d9c:	f003 fafc 	bl	8004398 <HAL_I2S_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000da6:	f000 f977 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000220 	.word	0x20000220
 8000db4:	40003800 	.word	0x40003800

08000db8 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08e      	sub	sp, #56	@ 0x38
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI2)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a3e      	ldr	r2, [pc, #248]	@ (8000edc <HAL_I2S_MspInit+0x124>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d175      	bne.n	8000ed4 <HAL_I2S_MspInit+0x11c>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000de8:	2301      	movs	r3, #1
 8000dea:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 96;
 8000dec:	2360      	movs	r3, #96	@ 0x60
 8000dee:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000df0:	2302      	movs	r3, #2
 8000df2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f004 fc2d 	bl	8005658 <HAL_RCCEx_PeriphCLKConfig>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000e04:	f000 f948 	bl	8001098 <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e08:	2300      	movs	r3, #0
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	4b34      	ldr	r3, [pc, #208]	@ (8000ee0 <HAL_I2S_MspInit+0x128>)
 8000e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e10:	4a33      	ldr	r2, [pc, #204]	@ (8000ee0 <HAL_I2S_MspInit+0x128>)
 8000e12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e16:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e18:	4b31      	ldr	r3, [pc, #196]	@ (8000ee0 <HAL_I2S_MspInit+0x128>)
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	4b2d      	ldr	r3, [pc, #180]	@ (8000ee0 <HAL_I2S_MspInit+0x128>)
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2c:	4a2c      	ldr	r2, [pc, #176]	@ (8000ee0 <HAL_I2S_MspInit+0x128>)
 8000e2e:	f043 0302 	orr.w	r3, r3, #2
 8000e32:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e34:	4b2a      	ldr	r3, [pc, #168]	@ (8000ee0 <HAL_I2S_MspInit+0x128>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e38:	f003 0302 	and.w	r3, r3, #2
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000e40:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8000e44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e52:	2305      	movs	r3, #5
 8000e54:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4821      	ldr	r0, [pc, #132]	@ (8000ee4 <HAL_I2S_MspInit+0x12c>)
 8000e5e:	f001 fc11 	bl	8002684 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000e62:	4b21      	ldr	r3, [pc, #132]	@ (8000ee8 <HAL_I2S_MspInit+0x130>)
 8000e64:	4a21      	ldr	r2, [pc, #132]	@ (8000eec <HAL_I2S_MspInit+0x134>)
 8000e66:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000e68:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee8 <HAL_I2S_MspInit+0x130>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ee8 <HAL_I2S_MspInit+0x130>)
 8000e70:	2240      	movs	r2, #64	@ 0x40
 8000e72:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e74:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee8 <HAL_I2S_MspInit+0x130>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ee8 <HAL_I2S_MspInit+0x130>)
 8000e7c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e80:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e82:	4b19      	ldr	r3, [pc, #100]	@ (8000ee8 <HAL_I2S_MspInit+0x130>)
 8000e84:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e88:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e8a:	4b17      	ldr	r3, [pc, #92]	@ (8000ee8 <HAL_I2S_MspInit+0x130>)
 8000e8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e90:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000e92:	4b15      	ldr	r3, [pc, #84]	@ (8000ee8 <HAL_I2S_MspInit+0x130>)
 8000e94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e98:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e9a:	4b13      	ldr	r3, [pc, #76]	@ (8000ee8 <HAL_I2S_MspInit+0x130>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000ea0:	4b11      	ldr	r3, [pc, #68]	@ (8000ee8 <HAL_I2S_MspInit+0x130>)
 8000ea2:	2204      	movs	r2, #4
 8000ea4:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000ea6:	4b10      	ldr	r3, [pc, #64]	@ (8000ee8 <HAL_I2S_MspInit+0x130>)
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000eac:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee8 <HAL_I2S_MspInit+0x130>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee8 <HAL_I2S_MspInit+0x130>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000eb8:	480b      	ldr	r0, [pc, #44]	@ (8000ee8 <HAL_I2S_MspInit+0x130>)
 8000eba:	f001 f8f9 	bl	80020b0 <HAL_DMA_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <HAL_I2S_MspInit+0x110>
    {
      Error_Handler();
 8000ec4:	f000 f8e8 	bl	8001098 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a07      	ldr	r2, [pc, #28]	@ (8000ee8 <HAL_I2S_MspInit+0x130>)
 8000ecc:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ece:	4a06      	ldr	r2, [pc, #24]	@ (8000ee8 <HAL_I2S_MspInit+0x130>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	3738      	adds	r7, #56	@ 0x38
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40003800 	.word	0x40003800
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40020400 	.word	0x40020400
 8000ee8:	20000268 	.word	0x20000268
 8000eec:	40026070 	.word	0x40026070

08000ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef6:	f000 fc35 	bl	8001764 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000efa:	f000 f853 	bl	8000fa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efe:	f7ff fcbb 	bl	8000878 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f02:	f7ff fc3f 	bl	8000784 <MX_DMA_Init>
  MX_CAN1_Init();
 8000f06:	f7ff fbc1 	bl	800068c <MX_CAN1_Init>
  MX_I2C1_Init();
 8000f0a:	f7ff fdc9 	bl	8000aa0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000f0e:	f7ff fdf5 	bl	8000afc <MX_I2C2_Init>
  MX_I2S2_Init();
 8000f12:	f7ff ff23 	bl	8000d5c <MX_I2S2_Init>
  MX_I2C3_Init();
 8000f16:	f7ff fe1f 	bl	8000b58 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8000f1a:	f000 fb87 	bl	800162c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000f1e:	f7ff fb1f 	bl	8000560 <MX_ADC1_Init>
  MX_FATFS_Init();
 8000f22:	f006 f8d5 	bl	80070d0 <MX_FATFS_Init>
  MX_RTC_Init();
 8000f26:	f000 f8bd 	bl	80010a4 <MX_RTC_Init>
  MX_SPI1_Init();
 8000f2a:	f000 f943 	bl	80011b4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  gStorageConfig = storageDevice_init(&hspi1);
 8000f2e:	4814      	ldr	r0, [pc, #80]	@ (8000f80 <main+0x90>)
 8000f30:	f009 fa60 	bl	800a3f4 <storageDevice_init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	4a13      	ldr	r2, [pc, #76]	@ (8000f84 <main+0x94>)
 8000f38:	6013      	str	r3, [r2, #0]
  gSoundEffectConfig = soundEffects_init(&hi2s2, MUTE_SWITCH_GPIO_Port, MUTE_SWITCH_Pin);
 8000f3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f3e:	4912      	ldr	r1, [pc, #72]	@ (8000f88 <main+0x98>)
 8000f40:	4812      	ldr	r0, [pc, #72]	@ (8000f8c <main+0x9c>)
 8000f42:	f009 fa19 	bl	800a378 <soundEffects_init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	4a11      	ldr	r2, [pc, #68]	@ (8000f90 <main+0xa0>)
 8000f4a:	6013      	str	r3, [r2, #0]
  gTimeCircuitConfig = timeCircuit_control_init(&hi2c3, &hi2c2, &hrtc, &hspi1, &hi2s2);
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f8c <main+0x9c>)
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	4b0b      	ldr	r3, [pc, #44]	@ (8000f80 <main+0x90>)
 8000f52:	4a10      	ldr	r2, [pc, #64]	@ (8000f94 <main+0xa4>)
 8000f54:	4910      	ldr	r1, [pc, #64]	@ (8000f98 <main+0xa8>)
 8000f56:	4811      	ldr	r0, [pc, #68]	@ (8000f9c <main+0xac>)
 8000f58:	f009 fab6 	bl	800a4c8 <timeCircuit_control_init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	4a10      	ldr	r2, [pc, #64]	@ (8000fa0 <main+0xb0>)
 8000f60:	6013      	str	r3, [r2, #0]

  osKernelInitialize();    // Initialize kernel BEFORE creating tasks
 8000f62:	f00b f83b 	bl	800bfdc <osKernelInitialize>
  MX_FREERTOS_Init();
 8000f66:	f7ff fc2d 	bl	80007c4 <MX_FREERTOS_Init>
  osKernelStart();  // Start the scheduler
 8000f6a:	f00b f85b 	bl	800c024 <osKernelStart>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f6e:	f00b f835 	bl	800bfdc <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000f72:	f7ff fc27 	bl	80007c4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000f76:	f00b f855 	bl	800c024 <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 8000f7a:	bf00      	nop
 8000f7c:	e7fd      	b.n	8000f7a <main+0x8a>
 8000f7e:	bf00      	nop
 8000f80:	200002f4 	.word	0x200002f4
 8000f84:	200002cc 	.word	0x200002cc
 8000f88:	40020800 	.word	0x40020800
 8000f8c:	20000220 	.word	0x20000220
 8000f90:	200002c8 	.word	0x200002c8
 8000f94:	200002d4 	.word	0x200002d4
 8000f98:	20000178 	.word	0x20000178
 8000f9c:	200001cc 	.word	0x200001cc
 8000fa0:	200002d0 	.word	0x200002d0

08000fa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b094      	sub	sp, #80	@ 0x50
 8000fa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000faa:	f107 0320 	add.w	r3, r7, #32
 8000fae:	2230      	movs	r2, #48	@ 0x30
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f00e ff28 	bl	800fe08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	4b27      	ldr	r3, [pc, #156]	@ (800106c <SystemClock_Config+0xc8>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd0:	4a26      	ldr	r2, [pc, #152]	@ (800106c <SystemClock_Config+0xc8>)
 8000fd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fd8:	4b24      	ldr	r3, [pc, #144]	@ (800106c <SystemClock_Config+0xc8>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	4b21      	ldr	r3, [pc, #132]	@ (8001070 <SystemClock_Config+0xcc>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a20      	ldr	r2, [pc, #128]	@ (8001070 <SystemClock_Config+0xcc>)
 8000fee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ff2:	6013      	str	r3, [r2, #0]
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	@ (8001070 <SystemClock_Config+0xcc>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001000:	2301      	movs	r3, #1
 8001002:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001004:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001008:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100a:	2302      	movs	r3, #2
 800100c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800100e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001012:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001014:	2304      	movs	r3, #4
 8001016:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001018:	2354      	movs	r3, #84	@ 0x54
 800101a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800101c:	2302      	movs	r3, #2
 800101e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001020:	2304      	movs	r3, #4
 8001022:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001024:	f107 0320 	add.w	r3, r7, #32
 8001028:	4618      	mov	r0, r3
 800102a:	f003 fe4b 	bl	8004cc4 <HAL_RCC_OscConfig>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001034:	f000 f830 	bl	8001098 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001038:	230f      	movs	r3, #15
 800103a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800103c:	2302      	movs	r3, #2
 800103e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001044:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001048:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800104e:	f107 030c 	add.w	r3, r7, #12
 8001052:	2102      	movs	r1, #2
 8001054:	4618      	mov	r0, r3
 8001056:	f004 f8ad 	bl	80051b4 <HAL_RCC_ClockConfig>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001060:	f000 f81a 	bl	8001098 <Error_Handler>
  }
}
 8001064:	bf00      	nop
 8001066:	3750      	adds	r7, #80	@ 0x50
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40023800 	.word	0x40023800
 8001070:	40007000 	.word	0x40007000

08001074 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a04      	ldr	r2, [pc, #16]	@ (8001094 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d101      	bne.n	800108a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001086:	f000 fb8f 	bl	80017a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40001000 	.word	0x40001000

08001098 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800109c:	b672      	cpsid	i
}
 800109e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <Error_Handler+0x8>

080010a4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80010b8:	2300      	movs	r3, #0
 80010ba:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010bc:	4b25      	ldr	r3, [pc, #148]	@ (8001154 <MX_RTC_Init+0xb0>)
 80010be:	4a26      	ldr	r2, [pc, #152]	@ (8001158 <MX_RTC_Init+0xb4>)
 80010c0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80010c2:	4b24      	ldr	r3, [pc, #144]	@ (8001154 <MX_RTC_Init+0xb0>)
 80010c4:	2240      	movs	r2, #64	@ 0x40
 80010c6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 124;
 80010c8:	4b22      	ldr	r3, [pc, #136]	@ (8001154 <MX_RTC_Init+0xb0>)
 80010ca:	227c      	movs	r2, #124	@ 0x7c
 80010cc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 7999;
 80010ce:	4b21      	ldr	r3, [pc, #132]	@ (8001154 <MX_RTC_Init+0xb0>)
 80010d0:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80010d4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001154 <MX_RTC_Init+0xb0>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001154 <MX_RTC_Init+0xb0>)
 80010de:	2200      	movs	r2, #0
 80010e0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001154 <MX_RTC_Init+0xb0>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010e8:	481a      	ldr	r0, [pc, #104]	@ (8001154 <MX_RTC_Init+0xb0>)
 80010ea:	f004 fbf7 	bl	80058dc <HAL_RTC_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 80010f4:	f7ff ffd0 	bl	8001098 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 80010f8:	2301      	movs	r3, #1
 80010fa:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001100:	2300      	movs	r3, #0
 8001102:	71bb      	strb	r3, [r7, #6]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001104:	2300      	movs	r3, #0
 8001106:	71fb      	strb	r3, [r7, #7]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001108:	2300      	movs	r3, #0
 800110a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	2201      	movs	r2, #1
 8001114:	4619      	mov	r1, r3
 8001116:	480f      	ldr	r0, [pc, #60]	@ (8001154 <MX_RTC_Init+0xb0>)
 8001118:	f004 fc63 	bl	80059e2 <HAL_RTC_SetTime>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001122:	f7ff ffb9 	bl	8001098 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001126:	2301      	movs	r3, #1
 8001128:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800112a:	2301      	movs	r3, #1
 800112c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800112e:	2301      	movs	r3, #1
 8001130:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001132:	2300      	movs	r3, #0
 8001134:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001136:	463b      	mov	r3, r7
 8001138:	2201      	movs	r2, #1
 800113a:	4619      	mov	r1, r3
 800113c:	4805      	ldr	r0, [pc, #20]	@ (8001154 <MX_RTC_Init+0xb0>)
 800113e:	f004 fcea 	bl	8005b16 <HAL_RTC_SetDate>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001148:	f7ff ffa6 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800114c:	bf00      	nop
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200002d4 	.word	0x200002d4
 8001158:	40002800 	.word	0x40002800

0800115c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001164:	f107 0308 	add.w	r3, r7, #8
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a0c      	ldr	r2, [pc, #48]	@ (80011a8 <HAL_RTC_MspInit+0x4c>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d110      	bne.n	800119e <HAL_RTC_MspInit+0x42>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800117c:	2302      	movs	r3, #2
 800117e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV8;
 8001180:	4b0a      	ldr	r3, [pc, #40]	@ (80011ac <HAL_RTC_MspInit+0x50>)
 8001182:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001184:	f107 0308 	add.w	r3, r7, #8
 8001188:	4618      	mov	r0, r3
 800118a:	f004 fa65 	bl	8005658 <HAL_RCCEx_PeriphCLKConfig>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <HAL_RTC_MspInit+0x3c>
    {
      Error_Handler();
 8001194:	f7ff ff80 	bl	8001098 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001198:	4b05      	ldr	r3, [pc, #20]	@ (80011b0 <HAL_RTC_MspInit+0x54>)
 800119a:	2201      	movs	r2, #1
 800119c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800119e:	bf00      	nop
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40002800 	.word	0x40002800
 80011ac:	00080300 	.word	0x00080300
 80011b0:	42470e3c 	.word	0x42470e3c

080011b4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80011b8:	4b17      	ldr	r3, [pc, #92]	@ (8001218 <MX_SPI1_Init+0x64>)
 80011ba:	4a18      	ldr	r2, [pc, #96]	@ (800121c <MX_SPI1_Init+0x68>)
 80011bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011be:	4b16      	ldr	r3, [pc, #88]	@ (8001218 <MX_SPI1_Init+0x64>)
 80011c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011c6:	4b14      	ldr	r3, [pc, #80]	@ (8001218 <MX_SPI1_Init+0x64>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011cc:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <MX_SPI1_Init+0x64>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011d2:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <MX_SPI1_Init+0x64>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001218 <MX_SPI1_Init+0x64>)
 80011da:	2200      	movs	r2, #0
 80011dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011de:	4b0e      	ldr	r3, [pc, #56]	@ (8001218 <MX_SPI1_Init+0x64>)
 80011e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001218 <MX_SPI1_Init+0x64>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001218 <MX_SPI1_Init+0x64>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011f2:	4b09      	ldr	r3, [pc, #36]	@ (8001218 <MX_SPI1_Init+0x64>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011f8:	4b07      	ldr	r3, [pc, #28]	@ (8001218 <MX_SPI1_Init+0x64>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011fe:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <MX_SPI1_Init+0x64>)
 8001200:	220a      	movs	r2, #10
 8001202:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001204:	4804      	ldr	r0, [pc, #16]	@ (8001218 <MX_SPI1_Init+0x64>)
 8001206:	f004 fdab 	bl	8005d60 <HAL_SPI_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001210:	f7ff ff42 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	200002f4 	.word	0x200002f4
 800121c:	40013000 	.word	0x40013000

08001220 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	@ 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a19      	ldr	r2, [pc, #100]	@ (80012a4 <HAL_SPI_MspInit+0x84>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d12b      	bne.n	800129a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	4b18      	ldr	r3, [pc, #96]	@ (80012a8 <HAL_SPI_MspInit+0x88>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124a:	4a17      	ldr	r2, [pc, #92]	@ (80012a8 <HAL_SPI_MspInit+0x88>)
 800124c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001250:	6453      	str	r3, [r2, #68]	@ 0x44
 8001252:	4b15      	ldr	r3, [pc, #84]	@ (80012a8 <HAL_SPI_MspInit+0x88>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001256:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	4b11      	ldr	r3, [pc, #68]	@ (80012a8 <HAL_SPI_MspInit+0x88>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	4a10      	ldr	r2, [pc, #64]	@ (80012a8 <HAL_SPI_MspInit+0x88>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6313      	str	r3, [r2, #48]	@ 0x30
 800126e:	4b0e      	ldr	r3, [pc, #56]	@ (80012a8 <HAL_SPI_MspInit+0x88>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800127a:	23e0      	movs	r3, #224	@ 0xe0
 800127c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001286:	2303      	movs	r3, #3
 8001288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800128a:	2305      	movs	r3, #5
 800128c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	4805      	ldr	r0, [pc, #20]	@ (80012ac <HAL_SPI_MspInit+0x8c>)
 8001296:	f001 f9f5 	bl	8002684 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800129a:	bf00      	nop
 800129c:	3728      	adds	r7, #40	@ 0x28
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40013000 	.word	0x40013000
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020000 	.word	0x40020000

080012b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]
 80012ba:	4b12      	ldr	r3, [pc, #72]	@ (8001304 <HAL_MspInit+0x54>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012be:	4a11      	ldr	r2, [pc, #68]	@ (8001304 <HAL_MspInit+0x54>)
 80012c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001304 <HAL_MspInit+0x54>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	603b      	str	r3, [r7, #0]
 80012d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001304 <HAL_MspInit+0x54>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012da:	4a0a      	ldr	r2, [pc, #40]	@ (8001304 <HAL_MspInit+0x54>)
 80012dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012e2:	4b08      	ldr	r3, [pc, #32]	@ (8001304 <HAL_MspInit+0x54>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ea:	603b      	str	r3, [r7, #0]
 80012ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	210f      	movs	r1, #15
 80012f2:	f06f 0001 	mvn.w	r0, #1
 80012f6:	f000 feb1 	bl	800205c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800

08001308 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08e      	sub	sp, #56	@ 0x38
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001310:	2300      	movs	r3, #0
 8001312:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001314:	2300      	movs	r3, #0
 8001316:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	4b33      	ldr	r3, [pc, #204]	@ (80013ec <HAL_InitTick+0xe4>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001320:	4a32      	ldr	r2, [pc, #200]	@ (80013ec <HAL_InitTick+0xe4>)
 8001322:	f043 0310 	orr.w	r3, r3, #16
 8001326:	6413      	str	r3, [r2, #64]	@ 0x40
 8001328:	4b30      	ldr	r3, [pc, #192]	@ (80013ec <HAL_InitTick+0xe4>)
 800132a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132c:	f003 0310 	and.w	r3, r3, #16
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001334:	f107 0210 	add.w	r2, r7, #16
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4611      	mov	r1, r2
 800133e:	4618      	mov	r0, r3
 8001340:	f004 f958 	bl	80055f4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001344:	6a3b      	ldr	r3, [r7, #32]
 8001346:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800134a:	2b00      	cmp	r3, #0
 800134c:	d103      	bne.n	8001356 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800134e:	f004 f929 	bl	80055a4 <HAL_RCC_GetPCLK1Freq>
 8001352:	6378      	str	r0, [r7, #52]	@ 0x34
 8001354:	e004      	b.n	8001360 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001356:	f004 f925 	bl	80055a4 <HAL_RCC_GetPCLK1Freq>
 800135a:	4603      	mov	r3, r0
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001362:	4a23      	ldr	r2, [pc, #140]	@ (80013f0 <HAL_InitTick+0xe8>)
 8001364:	fba2 2303 	umull	r2, r3, r2, r3
 8001368:	0c9b      	lsrs	r3, r3, #18
 800136a:	3b01      	subs	r3, #1
 800136c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800136e:	4b21      	ldr	r3, [pc, #132]	@ (80013f4 <HAL_InitTick+0xec>)
 8001370:	4a21      	ldr	r2, [pc, #132]	@ (80013f8 <HAL_InitTick+0xf0>)
 8001372:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001374:	4b1f      	ldr	r3, [pc, #124]	@ (80013f4 <HAL_InitTick+0xec>)
 8001376:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800137a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800137c:	4a1d      	ldr	r2, [pc, #116]	@ (80013f4 <HAL_InitTick+0xec>)
 800137e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001380:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001382:	4b1c      	ldr	r3, [pc, #112]	@ (80013f4 <HAL_InitTick+0xec>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001388:	4b1a      	ldr	r3, [pc, #104]	@ (80013f4 <HAL_InitTick+0xec>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800138e:	4b19      	ldr	r3, [pc, #100]	@ (80013f4 <HAL_InitTick+0xec>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001394:	4817      	ldr	r0, [pc, #92]	@ (80013f4 <HAL_InitTick+0xec>)
 8001396:	f005 f935 	bl	8006604 <HAL_TIM_Base_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80013a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d11b      	bne.n	80013e0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80013a8:	4812      	ldr	r0, [pc, #72]	@ (80013f4 <HAL_InitTick+0xec>)
 80013aa:	f005 f985 	bl	80066b8 <HAL_TIM_Base_Start_IT>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80013b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d111      	bne.n	80013e0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013bc:	2036      	movs	r0, #54	@ 0x36
 80013be:	f000 fe69 	bl	8002094 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b0f      	cmp	r3, #15
 80013c6:	d808      	bhi.n	80013da <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80013c8:	2200      	movs	r2, #0
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	2036      	movs	r0, #54	@ 0x36
 80013ce:	f000 fe45 	bl	800205c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013d2:	4a0a      	ldr	r2, [pc, #40]	@ (80013fc <HAL_InitTick+0xf4>)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	e002      	b.n	80013e0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80013e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3738      	adds	r7, #56	@ 0x38
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40023800 	.word	0x40023800
 80013f0:	431bde83 	.word	0x431bde83
 80013f4:	2000034c 	.word	0x2000034c
 80013f8:	40001000 	.word	0x40001000
 80013fc:	20000004 	.word	0x20000004

08001400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <NMI_Handler+0x4>

08001408 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <HardFault_Handler+0x4>

08001410 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001414:	bf00      	nop
 8001416:	e7fd      	b.n	8001414 <MemManage_Handler+0x4>

08001418 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800141c:	bf00      	nop
 800141e:	e7fd      	b.n	800141c <BusFault_Handler+0x4>

08001420 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001424:	bf00      	nop
 8001426:	e7fd      	b.n	8001424 <UsageFault_Handler+0x4>

08001428 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INTERRUPT_Pin);
 800143a:	2004      	movs	r0, #4
 800143c:	f001 faf0 	bl	8002a20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}

08001444 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001448:	4802      	ldr	r0, [pc, #8]	@ (8001454 <DMA1_Stream4_IRQHandler+0x10>)
 800144a:	f000 fedf 	bl	800220c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000268 	.word	0x20000268

08001458 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TIME_TRAVEL_SIM_Pin);
 800145c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001460:	f001 fade 	bl	8002a20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}

08001468 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800146c:	4802      	ldr	r0, [pc, #8]	@ (8001478 <TIM6_DAC_IRQHandler+0x10>)
 800146e:	f005 f993 	bl	8006798 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	2000034c 	.word	0x2000034c

0800147c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
	return 1;
 8001480:	2301      	movs	r3, #1
}
 8001482:	4618      	mov	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <_kill>:

int _kill(int pid, int sig)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001496:	f00e fd6b 	bl	800ff70 <__errno>
 800149a:	4603      	mov	r3, r0
 800149c:	2216      	movs	r2, #22
 800149e:	601a      	str	r2, [r3, #0]
	return -1;
 80014a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <_exit>:

void _exit (int status)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014b4:	f04f 31ff 	mov.w	r1, #4294967295
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f7ff ffe7 	bl	800148c <_kill>
	while (1) {}		/* Make sure we hang here */
 80014be:	bf00      	nop
 80014c0:	e7fd      	b.n	80014be <_exit+0x12>

080014c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b086      	sub	sp, #24
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	60f8      	str	r0, [r7, #12]
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ce:	2300      	movs	r3, #0
 80014d0:	617b      	str	r3, [r7, #20]
 80014d2:	e00a      	b.n	80014ea <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014d4:	f3af 8000 	nop.w
 80014d8:	4601      	mov	r1, r0
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	1c5a      	adds	r2, r3, #1
 80014de:	60ba      	str	r2, [r7, #8]
 80014e0:	b2ca      	uxtb	r2, r1
 80014e2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	3301      	adds	r3, #1
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	dbf0      	blt.n	80014d4 <_read+0x12>
	}

return len;
 80014f2:	687b      	ldr	r3, [r7, #4]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	e009      	b.n	8001522 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	1c5a      	adds	r2, r3, #1
 8001512:	60ba      	str	r2, [r7, #8]
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	3301      	adds	r3, #1
 8001520:	617b      	str	r3, [r7, #20]
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	429a      	cmp	r2, r3
 8001528:	dbf1      	blt.n	800150e <_write+0x12>
	}
	return len;
 800152a:	687b      	ldr	r3, [r7, #4]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <_close>:

int _close(int file)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
	return -1;
 800153c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001540:	4618      	mov	r0, r3
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800155c:	605a      	str	r2, [r3, #4]
	return 0;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <_isatty>:

int _isatty(int file)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
	return 1;
 8001574:	2301      	movs	r3, #1
}
 8001576:	4618      	mov	r0, r3
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001582:	b480      	push	{r7}
 8001584:	b085      	sub	sp, #20
 8001586:	af00      	add	r7, sp, #0
 8001588:	60f8      	str	r0, [r7, #12]
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
	return 0;
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a4:	4a14      	ldr	r2, [pc, #80]	@ (80015f8 <_sbrk+0x5c>)
 80015a6:	4b15      	ldr	r3, [pc, #84]	@ (80015fc <_sbrk+0x60>)
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b0:	4b13      	ldr	r3, [pc, #76]	@ (8001600 <_sbrk+0x64>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d102      	bne.n	80015be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015b8:	4b11      	ldr	r3, [pc, #68]	@ (8001600 <_sbrk+0x64>)
 80015ba:	4a12      	ldr	r2, [pc, #72]	@ (8001604 <_sbrk+0x68>)
 80015bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015be:	4b10      	ldr	r3, [pc, #64]	@ (8001600 <_sbrk+0x64>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d207      	bcs.n	80015dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015cc:	f00e fcd0 	bl	800ff70 <__errno>
 80015d0:	4603      	mov	r3, r0
 80015d2:	220c      	movs	r2, #12
 80015d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295
 80015da:	e009      	b.n	80015f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015dc:	4b08      	ldr	r3, [pc, #32]	@ (8001600 <_sbrk+0x64>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015e2:	4b07      	ldr	r3, [pc, #28]	@ (8001600 <_sbrk+0x64>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	4a05      	ldr	r2, [pc, #20]	@ (8001600 <_sbrk+0x64>)
 80015ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ee:	68fb      	ldr	r3, [r7, #12]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20020000 	.word	0x20020000
 80015fc:	00002000 	.word	0x00002000
 8001600:	20000394 	.word	0x20000394
 8001604:	200053c8 	.word	0x200053c8

08001608 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800160c:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <SystemInit+0x20>)
 800160e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001612:	4a05      	ldr	r2, [pc, #20]	@ (8001628 <SystemInit+0x20>)
 8001614:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001618:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001630:	4b11      	ldr	r3, [pc, #68]	@ (8001678 <MX_USART1_UART_Init+0x4c>)
 8001632:	4a12      	ldr	r2, [pc, #72]	@ (800167c <MX_USART1_UART_Init+0x50>)
 8001634:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001636:	4b10      	ldr	r3, [pc, #64]	@ (8001678 <MX_USART1_UART_Init+0x4c>)
 8001638:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800163c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800163e:	4b0e      	ldr	r3, [pc, #56]	@ (8001678 <MX_USART1_UART_Init+0x4c>)
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001644:	4b0c      	ldr	r3, [pc, #48]	@ (8001678 <MX_USART1_UART_Init+0x4c>)
 8001646:	2200      	movs	r2, #0
 8001648:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800164a:	4b0b      	ldr	r3, [pc, #44]	@ (8001678 <MX_USART1_UART_Init+0x4c>)
 800164c:	2200      	movs	r2, #0
 800164e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001650:	4b09      	ldr	r3, [pc, #36]	@ (8001678 <MX_USART1_UART_Init+0x4c>)
 8001652:	220c      	movs	r2, #12
 8001654:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001656:	4b08      	ldr	r3, [pc, #32]	@ (8001678 <MX_USART1_UART_Init+0x4c>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800165c:	4b06      	ldr	r3, [pc, #24]	@ (8001678 <MX_USART1_UART_Init+0x4c>)
 800165e:	2200      	movs	r2, #0
 8001660:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001662:	4805      	ldr	r0, [pc, #20]	@ (8001678 <MX_USART1_UART_Init+0x4c>)
 8001664:	f005 fa70 	bl	8006b48 <HAL_UART_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800166e:	f7ff fd13 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000398 	.word	0x20000398
 800167c:	40011000 	.word	0x40011000

08001680 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08a      	sub	sp, #40	@ 0x28
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a19      	ldr	r2, [pc, #100]	@ (8001704 <HAL_UART_MspInit+0x84>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d12c      	bne.n	80016fc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	4b18      	ldr	r3, [pc, #96]	@ (8001708 <HAL_UART_MspInit+0x88>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016aa:	4a17      	ldr	r2, [pc, #92]	@ (8001708 <HAL_UART_MspInit+0x88>)
 80016ac:	f043 0310 	orr.w	r3, r3, #16
 80016b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80016b2:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <HAL_UART_MspInit+0x88>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b6:	f003 0310 	and.w	r3, r3, #16
 80016ba:	613b      	str	r3, [r7, #16]
 80016bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	4b11      	ldr	r3, [pc, #68]	@ (8001708 <HAL_UART_MspInit+0x88>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c6:	4a10      	ldr	r2, [pc, #64]	@ (8001708 <HAL_UART_MspInit+0x88>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001708 <HAL_UART_MspInit+0x88>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016da:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80016de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e0:	2302      	movs	r3, #2
 80016e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e8:	2303      	movs	r3, #3
 80016ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016ec:	2307      	movs	r3, #7
 80016ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	4619      	mov	r1, r3
 80016f6:	4805      	ldr	r0, [pc, #20]	@ (800170c <HAL_UART_MspInit+0x8c>)
 80016f8:	f000 ffc4 	bl	8002684 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80016fc:	bf00      	nop
 80016fe:	3728      	adds	r7, #40	@ 0x28
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40011000 	.word	0x40011000
 8001708:	40023800 	.word	0x40023800
 800170c:	40020000 	.word	0x40020000

08001710 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001710:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001748 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001714:	480d      	ldr	r0, [pc, #52]	@ (800174c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001716:	490e      	ldr	r1, [pc, #56]	@ (8001750 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001718:	4a0e      	ldr	r2, [pc, #56]	@ (8001754 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800171a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800171c:	e002      	b.n	8001724 <LoopCopyDataInit>

0800171e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800171e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001722:	3304      	adds	r3, #4

08001724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001728:	d3f9      	bcc.n	800171e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800172a:	4a0b      	ldr	r2, [pc, #44]	@ (8001758 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800172c:	4c0b      	ldr	r4, [pc, #44]	@ (800175c <LoopFillZerobss+0x26>)
  movs r3, #0
 800172e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001730:	e001      	b.n	8001736 <LoopFillZerobss>

08001732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001734:	3204      	adds	r2, #4

08001736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001738:	d3fb      	bcc.n	8001732 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800173a:	f7ff ff65 	bl	8001608 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800173e:	f00e fc1d 	bl	800ff7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001742:	f7ff fbd5 	bl	8000ef0 <main>
  bx  lr    
 8001746:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001748:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800174c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001750:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001754:	08010ebc 	.word	0x08010ebc
  ldr r2, =_sbss
 8001758:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 800175c:	200053c8 	.word	0x200053c8

08001760 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001760:	e7fe      	b.n	8001760 <ADC_IRQHandler>
	...

08001764 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001768:	4b0e      	ldr	r3, [pc, #56]	@ (80017a4 <HAL_Init+0x40>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a0d      	ldr	r2, [pc, #52]	@ (80017a4 <HAL_Init+0x40>)
 800176e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001772:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001774:	4b0b      	ldr	r3, [pc, #44]	@ (80017a4 <HAL_Init+0x40>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a0a      	ldr	r2, [pc, #40]	@ (80017a4 <HAL_Init+0x40>)
 800177a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800177e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001780:	4b08      	ldr	r3, [pc, #32]	@ (80017a4 <HAL_Init+0x40>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a07      	ldr	r2, [pc, #28]	@ (80017a4 <HAL_Init+0x40>)
 8001786:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800178a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800178c:	2003      	movs	r0, #3
 800178e:	f000 fc5a 	bl	8002046 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001792:	200f      	movs	r0, #15
 8001794:	f7ff fdb8 	bl	8001308 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001798:	f7ff fd8a 	bl	80012b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40023c00 	.word	0x40023c00

080017a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017ac:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <HAL_IncTick+0x20>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	461a      	mov	r2, r3
 80017b2:	4b06      	ldr	r3, [pc, #24]	@ (80017cc <HAL_IncTick+0x24>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4413      	add	r3, r2
 80017b8:	4a04      	ldr	r2, [pc, #16]	@ (80017cc <HAL_IncTick+0x24>)
 80017ba:	6013      	str	r3, [r2, #0]
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	20000008 	.word	0x20000008
 80017cc:	200003e0 	.word	0x200003e0

080017d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return uwTick;
 80017d4:	4b03      	ldr	r3, [pc, #12]	@ (80017e4 <HAL_GetTick+0x14>)
 80017d6:	681b      	ldr	r3, [r3, #0]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	200003e0 	.word	0x200003e0

080017e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017f0:	f7ff ffee 	bl	80017d0 <HAL_GetTick>
 80017f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001800:	d005      	beq.n	800180e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001802:	4b0a      	ldr	r3, [pc, #40]	@ (800182c <HAL_Delay+0x44>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	4413      	add	r3, r2
 800180c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800180e:	bf00      	nop
 8001810:	f7ff ffde 	bl	80017d0 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	429a      	cmp	r2, r3
 800181e:	d8f7      	bhi.n	8001810 <HAL_Delay+0x28>
  {
  }
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000008 	.word	0x20000008

08001830 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001838:	2300      	movs	r3, #0
 800183a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e033      	b.n	80018ae <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184a:	2b00      	cmp	r3, #0
 800184c:	d109      	bne.n	8001862 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7fe fed8 	bl	8000604 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001866:	f003 0310 	and.w	r3, r3, #16
 800186a:	2b00      	cmp	r3, #0
 800186c:	d118      	bne.n	80018a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001872:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001876:	f023 0302 	bic.w	r3, r3, #2
 800187a:	f043 0202 	orr.w	r2, r3, #2
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 f93a 	bl	8001afc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001892:	f023 0303 	bic.w	r3, r3, #3
 8001896:	f043 0201 	orr.w	r2, r3, #1
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	641a      	str	r2, [r3, #64]	@ 0x40
 800189e:	e001      	b.n	80018a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d101      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x1c>
 80018d0:	2302      	movs	r3, #2
 80018d2:	e105      	b.n	8001ae0 <HAL_ADC_ConfigChannel+0x228>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b09      	cmp	r3, #9
 80018e2:	d925      	bls.n	8001930 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	68d9      	ldr	r1, [r3, #12]
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	461a      	mov	r2, r3
 80018f2:	4613      	mov	r3, r2
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	4413      	add	r3, r2
 80018f8:	3b1e      	subs	r3, #30
 80018fa:	2207      	movs	r2, #7
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43da      	mvns	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	400a      	ands	r2, r1
 8001908:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68d9      	ldr	r1, [r3, #12]
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	b29b      	uxth	r3, r3
 800191a:	4618      	mov	r0, r3
 800191c:	4603      	mov	r3, r0
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	4403      	add	r3, r0
 8001922:	3b1e      	subs	r3, #30
 8001924:	409a      	lsls	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	430a      	orrs	r2, r1
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	e022      	b.n	8001976 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6919      	ldr	r1, [r3, #16]
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	b29b      	uxth	r3, r3
 800193c:	461a      	mov	r2, r3
 800193e:	4613      	mov	r3, r2
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	4413      	add	r3, r2
 8001944:	2207      	movs	r2, #7
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43da      	mvns	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	400a      	ands	r2, r1
 8001952:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6919      	ldr	r1, [r3, #16]
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	b29b      	uxth	r3, r3
 8001964:	4618      	mov	r0, r3
 8001966:	4603      	mov	r3, r0
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	4403      	add	r3, r0
 800196c:	409a      	lsls	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	430a      	orrs	r2, r1
 8001974:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b06      	cmp	r3, #6
 800197c:	d824      	bhi.n	80019c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	4613      	mov	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	3b05      	subs	r3, #5
 8001990:	221f      	movs	r2, #31
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43da      	mvns	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	400a      	ands	r2, r1
 800199e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	4618      	mov	r0, r3
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685a      	ldr	r2, [r3, #4]
 80019b2:	4613      	mov	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4413      	add	r3, r2
 80019b8:	3b05      	subs	r3, #5
 80019ba:	fa00 f203 	lsl.w	r2, r0, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	430a      	orrs	r2, r1
 80019c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80019c6:	e04c      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2b0c      	cmp	r3, #12
 80019ce:	d824      	bhi.n	8001a1a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685a      	ldr	r2, [r3, #4]
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	3b23      	subs	r3, #35	@ 0x23
 80019e2:	221f      	movs	r2, #31
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43da      	mvns	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	400a      	ands	r2, r1
 80019f0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	4618      	mov	r0, r3
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	4613      	mov	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	3b23      	subs	r3, #35	@ 0x23
 8001a0c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	430a      	orrs	r2, r1
 8001a16:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a18:	e023      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685a      	ldr	r2, [r3, #4]
 8001a24:	4613      	mov	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	3b41      	subs	r3, #65	@ 0x41
 8001a2c:	221f      	movs	r2, #31
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43da      	mvns	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	400a      	ands	r2, r1
 8001a3a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	4618      	mov	r0, r3
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4413      	add	r3, r2
 8001a54:	3b41      	subs	r3, #65	@ 0x41
 8001a56:	fa00 f203 	lsl.w	r2, r0, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a62:	4b22      	ldr	r3, [pc, #136]	@ (8001aec <HAL_ADC_ConfigChannel+0x234>)
 8001a64:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a21      	ldr	r2, [pc, #132]	@ (8001af0 <HAL_ADC_ConfigChannel+0x238>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d109      	bne.n	8001a84 <HAL_ADC_ConfigChannel+0x1cc>
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b12      	cmp	r3, #18
 8001a76:	d105      	bne.n	8001a84 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a19      	ldr	r2, [pc, #100]	@ (8001af0 <HAL_ADC_ConfigChannel+0x238>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d123      	bne.n	8001ad6 <HAL_ADC_ConfigChannel+0x21e>
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2b10      	cmp	r3, #16
 8001a94:	d003      	beq.n	8001a9e <HAL_ADC_ConfigChannel+0x1e6>
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2b11      	cmp	r3, #17
 8001a9c:	d11b      	bne.n	8001ad6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2b10      	cmp	r3, #16
 8001ab0:	d111      	bne.n	8001ad6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ab2:	4b10      	ldr	r3, [pc, #64]	@ (8001af4 <HAL_ADC_ConfigChannel+0x23c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a10      	ldr	r2, [pc, #64]	@ (8001af8 <HAL_ADC_ConfigChannel+0x240>)
 8001ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8001abc:	0c9a      	lsrs	r2, r3, #18
 8001abe:	4613      	mov	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001ac8:	e002      	b.n	8001ad0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	3b01      	subs	r3, #1
 8001ace:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1f9      	bne.n	8001aca <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	40012300 	.word	0x40012300
 8001af0:	40012000 	.word	0x40012000
 8001af4:	20000000 	.word	0x20000000
 8001af8:	431bde83 	.word	0x431bde83

08001afc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b04:	4b79      	ldr	r3, [pc, #484]	@ (8001cec <ADC_Init+0x1f0>)
 8001b06:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6859      	ldr	r1, [r3, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	021a      	lsls	r2, r3, #8
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001b54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6859      	ldr	r1, [r3, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6899      	ldr	r1, [r3, #8]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68da      	ldr	r2, [r3, #12]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b8e:	4a58      	ldr	r2, [pc, #352]	@ (8001cf0 <ADC_Init+0x1f4>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d022      	beq.n	8001bda <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ba2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6899      	ldr	r1, [r3, #8]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001bc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6899      	ldr	r1, [r3, #8]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	e00f      	b.n	8001bfa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001be8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001bf8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 0202 	bic.w	r2, r2, #2
 8001c08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6899      	ldr	r1, [r3, #8]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	7e1b      	ldrb	r3, [r3, #24]
 8001c14:	005a      	lsls	r2, r3, #1
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d01b      	beq.n	8001c60 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c36:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001c46:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6859      	ldr	r1, [r3, #4]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c52:	3b01      	subs	r3, #1
 8001c54:	035a      	lsls	r2, r3, #13
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	e007      	b.n	8001c70 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c6e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001c7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	051a      	lsls	r2, r3, #20
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001ca4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6899      	ldr	r1, [r3, #8]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001cb2:	025a      	lsls	r2, r3, #9
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689a      	ldr	r2, [r3, #8]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6899      	ldr	r1, [r3, #8]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	029a      	lsls	r2, r3, #10
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	609a      	str	r2, [r3, #8]
}
 8001ce0:	bf00      	nop
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	40012300 	.word	0x40012300
 8001cf0:	0f000001 	.word	0x0f000001

08001cf4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e0ed      	b.n	8001ee2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d102      	bne.n	8001d18 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7fe fcee 	bl	80006f4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 0201 	orr.w	r2, r2, #1
 8001d26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d28:	f7ff fd52 	bl	80017d0 <HAL_GetTick>
 8001d2c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d2e:	e012      	b.n	8001d56 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d30:	f7ff fd4e 	bl	80017d0 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b0a      	cmp	r3, #10
 8001d3c:	d90b      	bls.n	8001d56 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d42:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2205      	movs	r2, #5
 8001d4e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e0c5      	b.n	8001ee2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0e5      	beq.n	8001d30 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 0202 	bic.w	r2, r2, #2
 8001d72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d74:	f7ff fd2c 	bl	80017d0 <HAL_GetTick>
 8001d78:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d7a:	e012      	b.n	8001da2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d7c:	f7ff fd28 	bl	80017d0 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b0a      	cmp	r3, #10
 8001d88:	d90b      	bls.n	8001da2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d8e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2205      	movs	r2, #5
 8001d9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e09f      	b.n	8001ee2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1e5      	bne.n	8001d7c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	7e1b      	ldrb	r3, [r3, #24]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d108      	bne.n	8001dca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	e007      	b.n	8001dda <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001dd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	7e5b      	ldrb	r3, [r3, #25]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d108      	bne.n	8001df4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	e007      	b.n	8001e04 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e02:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	7e9b      	ldrb	r3, [r3, #26]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d108      	bne.n	8001e1e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 0220 	orr.w	r2, r2, #32
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	e007      	b.n	8001e2e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0220 	bic.w	r2, r2, #32
 8001e2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	7edb      	ldrb	r3, [r3, #27]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d108      	bne.n	8001e48 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 0210 	bic.w	r2, r2, #16
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	e007      	b.n	8001e58 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0210 	orr.w	r2, r2, #16
 8001e56:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	7f1b      	ldrb	r3, [r3, #28]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d108      	bne.n	8001e72 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0208 	orr.w	r2, r2, #8
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	e007      	b.n	8001e82 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0208 	bic.w	r2, r2, #8
 8001e80:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	7f5b      	ldrb	r3, [r3, #29]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d108      	bne.n	8001e9c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f042 0204 	orr.w	r2, r2, #4
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	e007      	b.n	8001eac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0204 	bic.w	r2, r2, #4
 8001eaa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	695b      	ldr	r3, [r3, #20]
 8001ec0:	ea42 0103 	orr.w	r1, r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	1e5a      	subs	r2, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001efc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f30 <__NVIC_SetPriorityGrouping+0x44>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f08:	4013      	ands	r3, r2
 8001f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f1e:	4a04      	ldr	r2, [pc, #16]	@ (8001f30 <__NVIC_SetPriorityGrouping+0x44>)
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	60d3      	str	r3, [r2, #12]
}
 8001f24:	bf00      	nop
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f38:	4b04      	ldr	r3, [pc, #16]	@ (8001f4c <__NVIC_GetPriorityGrouping+0x18>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	0a1b      	lsrs	r3, r3, #8
 8001f3e:	f003 0307 	and.w	r3, r3, #7
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	db0b      	blt.n	8001f7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	f003 021f 	and.w	r2, r3, #31
 8001f68:	4907      	ldr	r1, [pc, #28]	@ (8001f88 <__NVIC_EnableIRQ+0x38>)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	095b      	lsrs	r3, r3, #5
 8001f70:	2001      	movs	r0, #1
 8001f72:	fa00 f202 	lsl.w	r2, r0, r2
 8001f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	e000e100 	.word	0xe000e100

08001f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	6039      	str	r1, [r7, #0]
 8001f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	db0a      	blt.n	8001fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	490c      	ldr	r1, [pc, #48]	@ (8001fd8 <__NVIC_SetPriority+0x4c>)
 8001fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001faa:	0112      	lsls	r2, r2, #4
 8001fac:	b2d2      	uxtb	r2, r2
 8001fae:	440b      	add	r3, r1
 8001fb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fb4:	e00a      	b.n	8001fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	4908      	ldr	r1, [pc, #32]	@ (8001fdc <__NVIC_SetPriority+0x50>)
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	3b04      	subs	r3, #4
 8001fc4:	0112      	lsls	r2, r2, #4
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	440b      	add	r3, r1
 8001fca:	761a      	strb	r2, [r3, #24]
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000e100 	.word	0xe000e100
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b089      	sub	sp, #36	@ 0x24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f1c3 0307 	rsb	r3, r3, #7
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	bf28      	it	cs
 8001ffe:	2304      	movcs	r3, #4
 8002000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3304      	adds	r3, #4
 8002006:	2b06      	cmp	r3, #6
 8002008:	d902      	bls.n	8002010 <NVIC_EncodePriority+0x30>
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3b03      	subs	r3, #3
 800200e:	e000      	b.n	8002012 <NVIC_EncodePriority+0x32>
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	f04f 32ff 	mov.w	r2, #4294967295
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43da      	mvns	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	401a      	ands	r2, r3
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002028:	f04f 31ff 	mov.w	r1, #4294967295
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	fa01 f303 	lsl.w	r3, r1, r3
 8002032:	43d9      	mvns	r1, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002038:	4313      	orrs	r3, r2
         );
}
 800203a:	4618      	mov	r0, r3
 800203c:	3724      	adds	r7, #36	@ 0x24
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff ff4c 	bl	8001eec <__NVIC_SetPriorityGrouping>
}
 8002054:	bf00      	nop
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
 8002068:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800206e:	f7ff ff61 	bl	8001f34 <__NVIC_GetPriorityGrouping>
 8002072:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	68b9      	ldr	r1, [r7, #8]
 8002078:	6978      	ldr	r0, [r7, #20]
 800207a:	f7ff ffb1 	bl	8001fe0 <NVIC_EncodePriority>
 800207e:	4602      	mov	r2, r0
 8002080:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002084:	4611      	mov	r1, r2
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff ff80 	bl	8001f8c <__NVIC_SetPriority>
}
 800208c:	bf00      	nop
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff ff54 	bl	8001f50 <__NVIC_EnableIRQ>
}
 80020a8:	bf00      	nop
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80020bc:	f7ff fb88 	bl	80017d0 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e099      	b.n	8002200 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2202      	movs	r2, #2
 80020d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 0201 	bic.w	r2, r2, #1
 80020ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020ec:	e00f      	b.n	800210e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020ee:	f7ff fb6f 	bl	80017d0 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b05      	cmp	r3, #5
 80020fa:	d908      	bls.n	800210e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2220      	movs	r2, #32
 8002100:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2203      	movs	r2, #3
 8002106:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e078      	b.n	8002200 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1e8      	bne.n	80020ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	4b38      	ldr	r3, [pc, #224]	@ (8002208 <HAL_DMA_Init+0x158>)
 8002128:	4013      	ands	r3, r2
 800212a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800213a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002146:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002152:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	4313      	orrs	r3, r2
 800215e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002164:	2b04      	cmp	r3, #4
 8002166:	d107      	bne.n	8002178 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002170:	4313      	orrs	r3, r2
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	4313      	orrs	r3, r2
 8002176:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	f023 0307 	bic.w	r3, r3, #7
 800218e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	4313      	orrs	r3, r2
 8002198:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219e:	2b04      	cmp	r3, #4
 80021a0:	d117      	bne.n	80021d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00e      	beq.n	80021d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f9e9 	bl	800258c <DMA_CheckFifoParam>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d008      	beq.n	80021d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2240      	movs	r2, #64	@ 0x40
 80021c4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80021ce:	2301      	movs	r3, #1
 80021d0:	e016      	b.n	8002200 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f9a0 	bl	8002520 <DMA_CalcBaseAndBitshift>
 80021e0:	4603      	mov	r3, r0
 80021e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e8:	223f      	movs	r2, #63	@ 0x3f
 80021ea:	409a      	lsls	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	f010803f 	.word	0xf010803f

0800220c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002214:	2300      	movs	r3, #0
 8002216:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002218:	4b8e      	ldr	r3, [pc, #568]	@ (8002454 <HAL_DMA_IRQHandler+0x248>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a8e      	ldr	r2, [pc, #568]	@ (8002458 <HAL_DMA_IRQHandler+0x24c>)
 800221e:	fba2 2303 	umull	r2, r3, r2, r3
 8002222:	0a9b      	lsrs	r3, r3, #10
 8002224:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800222a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002236:	2208      	movs	r2, #8
 8002238:	409a      	lsls	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4013      	ands	r3, r2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d01a      	beq.n	8002278 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	2b00      	cmp	r3, #0
 800224e:	d013      	beq.n	8002278 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0204 	bic.w	r2, r2, #4
 800225e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002264:	2208      	movs	r2, #8
 8002266:	409a      	lsls	r2, r3
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002270:	f043 0201 	orr.w	r2, r3, #1
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800227c:	2201      	movs	r2, #1
 800227e:	409a      	lsls	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4013      	ands	r3, r2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d012      	beq.n	80022ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00b      	beq.n	80022ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800229a:	2201      	movs	r2, #1
 800229c:	409a      	lsls	r2, r3
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a6:	f043 0202 	orr.w	r2, r3, #2
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b2:	2204      	movs	r2, #4
 80022b4:	409a      	lsls	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	4013      	ands	r3, r2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d012      	beq.n	80022e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00b      	beq.n	80022e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022d0:	2204      	movs	r2, #4
 80022d2:	409a      	lsls	r2, r3
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022dc:	f043 0204 	orr.w	r2, r3, #4
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e8:	2210      	movs	r2, #16
 80022ea:	409a      	lsls	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	4013      	ands	r3, r2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d043      	beq.n	800237c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d03c      	beq.n	800237c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002306:	2210      	movs	r2, #16
 8002308:	409a      	lsls	r2, r3
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d018      	beq.n	800234e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d108      	bne.n	800233c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232e:	2b00      	cmp	r3, #0
 8002330:	d024      	beq.n	800237c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	4798      	blx	r3
 800233a:	e01f      	b.n	800237c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002340:	2b00      	cmp	r3, #0
 8002342:	d01b      	beq.n	800237c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	4798      	blx	r3
 800234c:	e016      	b.n	800237c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002358:	2b00      	cmp	r3, #0
 800235a:	d107      	bne.n	800236c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0208 	bic.w	r2, r2, #8
 800236a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002370:	2b00      	cmp	r3, #0
 8002372:	d003      	beq.n	800237c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002380:	2220      	movs	r2, #32
 8002382:	409a      	lsls	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	4013      	ands	r3, r2
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 808f 	beq.w	80024ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0310 	and.w	r3, r3, #16
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 8087 	beq.w	80024ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a2:	2220      	movs	r2, #32
 80023a4:	409a      	lsls	r2, r3
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b05      	cmp	r3, #5
 80023b4:	d136      	bne.n	8002424 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0216 	bic.w	r2, r2, #22
 80023c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	695a      	ldr	r2, [r3, #20]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d103      	bne.n	80023e6 <HAL_DMA_IRQHandler+0x1da>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d007      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 0208 	bic.w	r2, r2, #8
 80023f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023fa:	223f      	movs	r2, #63	@ 0x3f
 80023fc:	409a      	lsls	r2, r3
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002416:	2b00      	cmp	r3, #0
 8002418:	d07e      	beq.n	8002518 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	4798      	blx	r3
        }
        return;
 8002422:	e079      	b.n	8002518 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d01d      	beq.n	800246e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10d      	bne.n	800245c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002444:	2b00      	cmp	r3, #0
 8002446:	d031      	beq.n	80024ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	4798      	blx	r3
 8002450:	e02c      	b.n	80024ac <HAL_DMA_IRQHandler+0x2a0>
 8002452:	bf00      	nop
 8002454:	20000000 	.word	0x20000000
 8002458:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002460:	2b00      	cmp	r3, #0
 8002462:	d023      	beq.n	80024ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	4798      	blx	r3
 800246c:	e01e      	b.n	80024ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10f      	bne.n	800249c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0210 	bic.w	r2, r2, #16
 800248a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d032      	beq.n	800251a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d022      	beq.n	8002506 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2205      	movs	r2, #5
 80024c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0201 	bic.w	r2, r2, #1
 80024d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	3301      	adds	r3, #1
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d307      	bcc.n	80024f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f2      	bne.n	80024d8 <HAL_DMA_IRQHandler+0x2cc>
 80024f2:	e000      	b.n	80024f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80024f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800250a:	2b00      	cmp	r3, #0
 800250c:	d005      	beq.n	800251a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	4798      	blx	r3
 8002516:	e000      	b.n	800251a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002518:	bf00      	nop
    }
  }
}
 800251a:	3718      	adds	r7, #24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	b2db      	uxtb	r3, r3
 800252e:	3b10      	subs	r3, #16
 8002530:	4a14      	ldr	r2, [pc, #80]	@ (8002584 <DMA_CalcBaseAndBitshift+0x64>)
 8002532:	fba2 2303 	umull	r2, r3, r2, r3
 8002536:	091b      	lsrs	r3, r3, #4
 8002538:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800253a:	4a13      	ldr	r2, [pc, #76]	@ (8002588 <DMA_CalcBaseAndBitshift+0x68>)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4413      	add	r3, r2
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	461a      	mov	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2b03      	cmp	r3, #3
 800254c:	d909      	bls.n	8002562 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002556:	f023 0303 	bic.w	r3, r3, #3
 800255a:	1d1a      	adds	r2, r3, #4
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002560:	e007      	b.n	8002572 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800256a:	f023 0303 	bic.w	r3, r3, #3
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002576:	4618      	mov	r0, r3
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	aaaaaaab 	.word	0xaaaaaaab
 8002588:	08010cb4 	.word	0x08010cb4

0800258c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002594:	2300      	movs	r3, #0
 8002596:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800259c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d11f      	bne.n	80025e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	d856      	bhi.n	800265a <DMA_CheckFifoParam+0xce>
 80025ac:	a201      	add	r2, pc, #4	@ (adr r2, 80025b4 <DMA_CheckFifoParam+0x28>)
 80025ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b2:	bf00      	nop
 80025b4:	080025c5 	.word	0x080025c5
 80025b8:	080025d7 	.word	0x080025d7
 80025bc:	080025c5 	.word	0x080025c5
 80025c0:	0800265b 	.word	0x0800265b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d046      	beq.n	800265e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025d4:	e043      	b.n	800265e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025da:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025de:	d140      	bne.n	8002662 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025e4:	e03d      	b.n	8002662 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025ee:	d121      	bne.n	8002634 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	2b03      	cmp	r3, #3
 80025f4:	d837      	bhi.n	8002666 <DMA_CheckFifoParam+0xda>
 80025f6:	a201      	add	r2, pc, #4	@ (adr r2, 80025fc <DMA_CheckFifoParam+0x70>)
 80025f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025fc:	0800260d 	.word	0x0800260d
 8002600:	08002613 	.word	0x08002613
 8002604:	0800260d 	.word	0x0800260d
 8002608:	08002625 	.word	0x08002625
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	73fb      	strb	r3, [r7, #15]
      break;
 8002610:	e030      	b.n	8002674 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002616:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d025      	beq.n	800266a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002622:	e022      	b.n	800266a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002628:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800262c:	d11f      	bne.n	800266e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002632:	e01c      	b.n	800266e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2b02      	cmp	r3, #2
 8002638:	d903      	bls.n	8002642 <DMA_CheckFifoParam+0xb6>
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	2b03      	cmp	r3, #3
 800263e:	d003      	beq.n	8002648 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002640:	e018      	b.n	8002674 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	73fb      	strb	r3, [r7, #15]
      break;
 8002646:	e015      	b.n	8002674 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800264c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00e      	beq.n	8002672 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	73fb      	strb	r3, [r7, #15]
      break;
 8002658:	e00b      	b.n	8002672 <DMA_CheckFifoParam+0xe6>
      break;
 800265a:	bf00      	nop
 800265c:	e00a      	b.n	8002674 <DMA_CheckFifoParam+0xe8>
      break;
 800265e:	bf00      	nop
 8002660:	e008      	b.n	8002674 <DMA_CheckFifoParam+0xe8>
      break;
 8002662:	bf00      	nop
 8002664:	e006      	b.n	8002674 <DMA_CheckFifoParam+0xe8>
      break;
 8002666:	bf00      	nop
 8002668:	e004      	b.n	8002674 <DMA_CheckFifoParam+0xe8>
      break;
 800266a:	bf00      	nop
 800266c:	e002      	b.n	8002674 <DMA_CheckFifoParam+0xe8>
      break;   
 800266e:	bf00      	nop
 8002670:	e000      	b.n	8002674 <DMA_CheckFifoParam+0xe8>
      break;
 8002672:	bf00      	nop
    }
  } 
  
  return status; 
 8002674:	7bfb      	ldrb	r3, [r7, #15]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop

08002684 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002684:	b480      	push	{r7}
 8002686:	b089      	sub	sp, #36	@ 0x24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002692:	2300      	movs	r3, #0
 8002694:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002696:	2300      	movs	r3, #0
 8002698:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
 800269e:	e16b      	b.n	8002978 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026a0:	2201      	movs	r2, #1
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	4013      	ands	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	f040 815a 	bne.w	8002972 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d005      	beq.n	80026d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d130      	bne.n	8002738 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	2203      	movs	r2, #3
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43db      	mvns	r3, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4013      	ands	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	68da      	ldr	r2, [r3, #12]
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800270c:	2201      	movs	r2, #1
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	091b      	lsrs	r3, r3, #4
 8002722:	f003 0201 	and.w	r2, r3, #1
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4313      	orrs	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 0303 	and.w	r3, r3, #3
 8002740:	2b03      	cmp	r3, #3
 8002742:	d017      	beq.n	8002774 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	2203      	movs	r2, #3
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4313      	orrs	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 0303 	and.w	r3, r3, #3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d123      	bne.n	80027c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	08da      	lsrs	r2, r3, #3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3208      	adds	r2, #8
 8002788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800278c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	220f      	movs	r2, #15
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4013      	ands	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	691a      	ldr	r2, [r3, #16]
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	08da      	lsrs	r2, r3, #3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	3208      	adds	r2, #8
 80027c2:	69b9      	ldr	r1, [r7, #24]
 80027c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	2203      	movs	r2, #3
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4013      	ands	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f003 0203 	and.w	r2, r3, #3
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 80b4 	beq.w	8002972 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800280a:	2300      	movs	r3, #0
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	4b60      	ldr	r3, [pc, #384]	@ (8002990 <HAL_GPIO_Init+0x30c>)
 8002810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002812:	4a5f      	ldr	r2, [pc, #380]	@ (8002990 <HAL_GPIO_Init+0x30c>)
 8002814:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002818:	6453      	str	r3, [r2, #68]	@ 0x44
 800281a:	4b5d      	ldr	r3, [pc, #372]	@ (8002990 <HAL_GPIO_Init+0x30c>)
 800281c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002826:	4a5b      	ldr	r2, [pc, #364]	@ (8002994 <HAL_GPIO_Init+0x310>)
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	089b      	lsrs	r3, r3, #2
 800282c:	3302      	adds	r3, #2
 800282e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002832:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	220f      	movs	r2, #15
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	43db      	mvns	r3, r3
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4013      	ands	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a52      	ldr	r2, [pc, #328]	@ (8002998 <HAL_GPIO_Init+0x314>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d02b      	beq.n	80028aa <HAL_GPIO_Init+0x226>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a51      	ldr	r2, [pc, #324]	@ (800299c <HAL_GPIO_Init+0x318>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d025      	beq.n	80028a6 <HAL_GPIO_Init+0x222>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a50      	ldr	r2, [pc, #320]	@ (80029a0 <HAL_GPIO_Init+0x31c>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d01f      	beq.n	80028a2 <HAL_GPIO_Init+0x21e>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a4f      	ldr	r2, [pc, #316]	@ (80029a4 <HAL_GPIO_Init+0x320>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d019      	beq.n	800289e <HAL_GPIO_Init+0x21a>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a4e      	ldr	r2, [pc, #312]	@ (80029a8 <HAL_GPIO_Init+0x324>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d013      	beq.n	800289a <HAL_GPIO_Init+0x216>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a4d      	ldr	r2, [pc, #308]	@ (80029ac <HAL_GPIO_Init+0x328>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d00d      	beq.n	8002896 <HAL_GPIO_Init+0x212>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a4c      	ldr	r2, [pc, #304]	@ (80029b0 <HAL_GPIO_Init+0x32c>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d007      	beq.n	8002892 <HAL_GPIO_Init+0x20e>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a4b      	ldr	r2, [pc, #300]	@ (80029b4 <HAL_GPIO_Init+0x330>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d101      	bne.n	800288e <HAL_GPIO_Init+0x20a>
 800288a:	2307      	movs	r3, #7
 800288c:	e00e      	b.n	80028ac <HAL_GPIO_Init+0x228>
 800288e:	2308      	movs	r3, #8
 8002890:	e00c      	b.n	80028ac <HAL_GPIO_Init+0x228>
 8002892:	2306      	movs	r3, #6
 8002894:	e00a      	b.n	80028ac <HAL_GPIO_Init+0x228>
 8002896:	2305      	movs	r3, #5
 8002898:	e008      	b.n	80028ac <HAL_GPIO_Init+0x228>
 800289a:	2304      	movs	r3, #4
 800289c:	e006      	b.n	80028ac <HAL_GPIO_Init+0x228>
 800289e:	2303      	movs	r3, #3
 80028a0:	e004      	b.n	80028ac <HAL_GPIO_Init+0x228>
 80028a2:	2302      	movs	r3, #2
 80028a4:	e002      	b.n	80028ac <HAL_GPIO_Init+0x228>
 80028a6:	2301      	movs	r3, #1
 80028a8:	e000      	b.n	80028ac <HAL_GPIO_Init+0x228>
 80028aa:	2300      	movs	r3, #0
 80028ac:	69fa      	ldr	r2, [r7, #28]
 80028ae:	f002 0203 	and.w	r2, r2, #3
 80028b2:	0092      	lsls	r2, r2, #2
 80028b4:	4093      	lsls	r3, r2
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028bc:	4935      	ldr	r1, [pc, #212]	@ (8002994 <HAL_GPIO_Init+0x310>)
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	089b      	lsrs	r3, r3, #2
 80028c2:	3302      	adds	r3, #2
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028ca:	4b3b      	ldr	r3, [pc, #236]	@ (80029b8 <HAL_GPIO_Init+0x334>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	43db      	mvns	r3, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4013      	ands	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028ee:	4a32      	ldr	r2, [pc, #200]	@ (80029b8 <HAL_GPIO_Init+0x334>)
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028f4:	4b30      	ldr	r3, [pc, #192]	@ (80029b8 <HAL_GPIO_Init+0x334>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	4313      	orrs	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002918:	4a27      	ldr	r2, [pc, #156]	@ (80029b8 <HAL_GPIO_Init+0x334>)
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800291e:	4b26      	ldr	r3, [pc, #152]	@ (80029b8 <HAL_GPIO_Init+0x334>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	43db      	mvns	r3, r3
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4013      	ands	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	4313      	orrs	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002942:	4a1d      	ldr	r2, [pc, #116]	@ (80029b8 <HAL_GPIO_Init+0x334>)
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002948:	4b1b      	ldr	r3, [pc, #108]	@ (80029b8 <HAL_GPIO_Init+0x334>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	43db      	mvns	r3, r3
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4013      	ands	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	4313      	orrs	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800296c:	4a12      	ldr	r2, [pc, #72]	@ (80029b8 <HAL_GPIO_Init+0x334>)
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	3301      	adds	r3, #1
 8002976:	61fb      	str	r3, [r7, #28]
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	2b0f      	cmp	r3, #15
 800297c:	f67f ae90 	bls.w	80026a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002980:	bf00      	nop
 8002982:	bf00      	nop
 8002984:	3724      	adds	r7, #36	@ 0x24
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	40023800 	.word	0x40023800
 8002994:	40013800 	.word	0x40013800
 8002998:	40020000 	.word	0x40020000
 800299c:	40020400 	.word	0x40020400
 80029a0:	40020800 	.word	0x40020800
 80029a4:	40020c00 	.word	0x40020c00
 80029a8:	40021000 	.word	0x40021000
 80029ac:	40021400 	.word	0x40021400
 80029b0:	40021800 	.word	0x40021800
 80029b4:	40021c00 	.word	0x40021c00
 80029b8:	40013c00 	.word	0x40013c00

080029bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	460b      	mov	r3, r1
 80029c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691a      	ldr	r2, [r3, #16]
 80029cc:	887b      	ldrh	r3, [r7, #2]
 80029ce:	4013      	ands	r3, r2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d002      	beq.n	80029da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029d4:	2301      	movs	r3, #1
 80029d6:	73fb      	strb	r3, [r7, #15]
 80029d8:	e001      	b.n	80029de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029da:	2300      	movs	r3, #0
 80029dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029de:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3714      	adds	r7, #20
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	807b      	strh	r3, [r7, #2]
 80029f8:	4613      	mov	r3, r2
 80029fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029fc:	787b      	ldrb	r3, [r7, #1]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a02:	887a      	ldrh	r2, [r7, #2]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a08:	e003      	b.n	8002a12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a0a:	887b      	ldrh	r3, [r7, #2]
 8002a0c:	041a      	lsls	r2, r3, #16
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	619a      	str	r2, [r3, #24]
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
	...

08002a20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a2a:	4b08      	ldr	r3, [pc, #32]	@ (8002a4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a2c:	695a      	ldr	r2, [r3, #20]
 8002a2e:	88fb      	ldrh	r3, [r7, #6]
 8002a30:	4013      	ands	r3, r2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d006      	beq.n	8002a44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a36:	4a05      	ldr	r2, [pc, #20]	@ (8002a4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a38:	88fb      	ldrh	r3, [r7, #6]
 8002a3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a3c:	88fb      	ldrh	r3, [r7, #6]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f007 fba0 	bl	800a184 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a44:	bf00      	nop
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40013c00 	.word	0x40013c00

08002a50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e12b      	b.n	8002cba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d106      	bne.n	8002a7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f7fe f89c 	bl	8000bb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2224      	movs	r2, #36	@ 0x24
 8002a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0201 	bic.w	r2, r2, #1
 8002a92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002aa2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ab2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ab4:	f002 fd76 	bl	80055a4 <HAL_RCC_GetPCLK1Freq>
 8002ab8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	4a81      	ldr	r2, [pc, #516]	@ (8002cc4 <HAL_I2C_Init+0x274>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d807      	bhi.n	8002ad4 <HAL_I2C_Init+0x84>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4a80      	ldr	r2, [pc, #512]	@ (8002cc8 <HAL_I2C_Init+0x278>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	bf94      	ite	ls
 8002acc:	2301      	movls	r3, #1
 8002ace:	2300      	movhi	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	e006      	b.n	8002ae2 <HAL_I2C_Init+0x92>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4a7d      	ldr	r2, [pc, #500]	@ (8002ccc <HAL_I2C_Init+0x27c>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	bf94      	ite	ls
 8002adc:	2301      	movls	r3, #1
 8002ade:	2300      	movhi	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e0e7      	b.n	8002cba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	4a78      	ldr	r2, [pc, #480]	@ (8002cd0 <HAL_I2C_Init+0x280>)
 8002aee:	fba2 2303 	umull	r2, r3, r2, r3
 8002af2:	0c9b      	lsrs	r3, r3, #18
 8002af4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	4a6a      	ldr	r2, [pc, #424]	@ (8002cc4 <HAL_I2C_Init+0x274>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d802      	bhi.n	8002b24 <HAL_I2C_Init+0xd4>
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	3301      	adds	r3, #1
 8002b22:	e009      	b.n	8002b38 <HAL_I2C_Init+0xe8>
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002b2a:	fb02 f303 	mul.w	r3, r2, r3
 8002b2e:	4a69      	ldr	r2, [pc, #420]	@ (8002cd4 <HAL_I2C_Init+0x284>)
 8002b30:	fba2 2303 	umull	r2, r3, r2, r3
 8002b34:	099b      	lsrs	r3, r3, #6
 8002b36:	3301      	adds	r3, #1
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	6812      	ldr	r2, [r2, #0]
 8002b3c:	430b      	orrs	r3, r1
 8002b3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002b4a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	495c      	ldr	r1, [pc, #368]	@ (8002cc4 <HAL_I2C_Init+0x274>)
 8002b54:	428b      	cmp	r3, r1
 8002b56:	d819      	bhi.n	8002b8c <HAL_I2C_Init+0x13c>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	1e59      	subs	r1, r3, #1
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b66:	1c59      	adds	r1, r3, #1
 8002b68:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b6c:	400b      	ands	r3, r1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00a      	beq.n	8002b88 <HAL_I2C_Init+0x138>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	1e59      	subs	r1, r3, #1
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b80:	3301      	adds	r3, #1
 8002b82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b86:	e051      	b.n	8002c2c <HAL_I2C_Init+0x1dc>
 8002b88:	2304      	movs	r3, #4
 8002b8a:	e04f      	b.n	8002c2c <HAL_I2C_Init+0x1dc>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d111      	bne.n	8002bb8 <HAL_I2C_Init+0x168>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	1e58      	subs	r0, r3, #1
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6859      	ldr	r1, [r3, #4]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	440b      	add	r3, r1
 8002ba2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	bf0c      	ite	eq
 8002bb0:	2301      	moveq	r3, #1
 8002bb2:	2300      	movne	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	e012      	b.n	8002bde <HAL_I2C_Init+0x18e>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	1e58      	subs	r0, r3, #1
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6859      	ldr	r1, [r3, #4]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	0099      	lsls	r1, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bce:	3301      	adds	r3, #1
 8002bd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	bf0c      	ite	eq
 8002bd8:	2301      	moveq	r3, #1
 8002bda:	2300      	movne	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_I2C_Init+0x196>
 8002be2:	2301      	movs	r3, #1
 8002be4:	e022      	b.n	8002c2c <HAL_I2C_Init+0x1dc>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10e      	bne.n	8002c0c <HAL_I2C_Init+0x1bc>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	1e58      	subs	r0, r3, #1
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6859      	ldr	r1, [r3, #4]
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	440b      	add	r3, r1
 8002bfc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c00:	3301      	adds	r3, #1
 8002c02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c0a:	e00f      	b.n	8002c2c <HAL_I2C_Init+0x1dc>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	1e58      	subs	r0, r3, #1
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6859      	ldr	r1, [r3, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	0099      	lsls	r1, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c22:	3301      	adds	r3, #1
 8002c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c28:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	6809      	ldr	r1, [r1, #0]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	69da      	ldr	r2, [r3, #28]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	431a      	orrs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002c5a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6911      	ldr	r1, [r2, #16]
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	68d2      	ldr	r2, [r2, #12]
 8002c66:	4311      	orrs	r1, r2
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6812      	ldr	r2, [r2, #0]
 8002c6c:	430b      	orrs	r3, r1
 8002c6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	695a      	ldr	r2, [r3, #20]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0201 	orr.w	r2, r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	000186a0 	.word	0x000186a0
 8002cc8:	001e847f 	.word	0x001e847f
 8002ccc:	003d08ff 	.word	0x003d08ff
 8002cd0:	431bde83 	.word	0x431bde83
 8002cd4:	10624dd3 	.word	0x10624dd3

08002cd8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b088      	sub	sp, #32
 8002cdc:	af02      	add	r7, sp, #8
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	607a      	str	r2, [r7, #4]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	817b      	strh	r3, [r7, #10]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cec:	f7fe fd70 	bl	80017d0 <HAL_GetTick>
 8002cf0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b20      	cmp	r3, #32
 8002cfc:	f040 80e0 	bne.w	8002ec0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	2319      	movs	r3, #25
 8002d06:	2201      	movs	r2, #1
 8002d08:	4970      	ldr	r1, [pc, #448]	@ (8002ecc <HAL_I2C_Master_Transmit+0x1f4>)
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f001 f90e 	bl	8003f2c <I2C_WaitOnFlagUntilTimeout>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d16:	2302      	movs	r3, #2
 8002d18:	e0d3      	b.n	8002ec2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d101      	bne.n	8002d28 <HAL_I2C_Master_Transmit+0x50>
 8002d24:	2302      	movs	r3, #2
 8002d26:	e0cc      	b.n	8002ec2 <HAL_I2C_Master_Transmit+0x1ea>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d007      	beq.n	8002d4e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f042 0201 	orr.w	r2, r2, #1
 8002d4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d5c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2221      	movs	r2, #33	@ 0x21
 8002d62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2210      	movs	r2, #16
 8002d6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	893a      	ldrh	r2, [r7, #8]
 8002d7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	4a50      	ldr	r2, [pc, #320]	@ (8002ed0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002d8e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d90:	8979      	ldrh	r1, [r7, #10]
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	6a3a      	ldr	r2, [r7, #32]
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 fdfa 	bl	8003990 <I2C_MasterRequestWrite>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e08d      	b.n	8002ec2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002da6:	2300      	movs	r3, #0
 8002da8:	613b      	str	r3, [r7, #16]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	613b      	str	r3, [r7, #16]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	613b      	str	r3, [r7, #16]
 8002dba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002dbc:	e066      	b.n	8002e8c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	6a39      	ldr	r1, [r7, #32]
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f001 f9cc 	bl	8004160 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00d      	beq.n	8002dea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d107      	bne.n	8002de6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002de4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e06b      	b.n	8002ec2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dee:	781a      	ldrb	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfa:	1c5a      	adds	r2, r3, #1
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	3b01      	subs	r3, #1
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e12:	3b01      	subs	r3, #1
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	d11b      	bne.n	8002e60 <HAL_I2C_Master_Transmit+0x188>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d017      	beq.n	8002e60 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e34:	781a      	ldrb	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e40:	1c5a      	adds	r2, r3, #1
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	6a39      	ldr	r1, [r7, #32]
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f001 f9c3 	bl	80041f0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00d      	beq.n	8002e8c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e74:	2b04      	cmp	r3, #4
 8002e76:	d107      	bne.n	8002e88 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e86:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e01a      	b.n	8002ec2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d194      	bne.n	8002dbe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ea2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	e000      	b.n	8002ec2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ec0:	2302      	movs	r3, #2
  }
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	00100002 	.word	0x00100002
 8002ed0:	ffff0000 	.word	0xffff0000

08002ed4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b08c      	sub	sp, #48	@ 0x30
 8002ed8:	af02      	add	r7, sp, #8
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	607a      	str	r2, [r7, #4]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	817b      	strh	r3, [r7, #10]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ee8:	f7fe fc72 	bl	80017d0 <HAL_GetTick>
 8002eec:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b20      	cmp	r3, #32
 8002ef8:	f040 8217 	bne.w	800332a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	2319      	movs	r3, #25
 8002f02:	2201      	movs	r2, #1
 8002f04:	497c      	ldr	r1, [pc, #496]	@ (80030f8 <HAL_I2C_Master_Receive+0x224>)
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f001 f810 	bl	8003f2c <I2C_WaitOnFlagUntilTimeout>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002f12:	2302      	movs	r3, #2
 8002f14:	e20a      	b.n	800332c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d101      	bne.n	8002f24 <HAL_I2C_Master_Receive+0x50>
 8002f20:	2302      	movs	r3, #2
 8002f22:	e203      	b.n	800332c <HAL_I2C_Master_Receive+0x458>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d007      	beq.n	8002f4a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f042 0201 	orr.w	r2, r2, #1
 8002f48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2222      	movs	r2, #34	@ 0x22
 8002f5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2210      	movs	r2, #16
 8002f66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	893a      	ldrh	r2, [r7, #8]
 8002f7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	4a5c      	ldr	r2, [pc, #368]	@ (80030fc <HAL_I2C_Master_Receive+0x228>)
 8002f8a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f8c:	8979      	ldrh	r1, [r7, #10]
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 fd7e 	bl	8003a94 <I2C_MasterRequestRead>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e1c4      	b.n	800332c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d113      	bne.n	8002fd2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002faa:	2300      	movs	r3, #0
 8002fac:	623b      	str	r3, [r7, #32]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	623b      	str	r3, [r7, #32]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	623b      	str	r3, [r7, #32]
 8002fbe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	e198      	b.n	8003304 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d11b      	bne.n	8003012 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fe8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fea:	2300      	movs	r3, #0
 8002fec:	61fb      	str	r3, [r7, #28]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	61fb      	str	r3, [r7, #28]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	61fb      	str	r3, [r7, #28]
 8002ffe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	e178      	b.n	8003304 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003016:	2b02      	cmp	r3, #2
 8003018:	d11b      	bne.n	8003052 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003028:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003038:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800303a:	2300      	movs	r3, #0
 800303c:	61bb      	str	r3, [r7, #24]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	61bb      	str	r3, [r7, #24]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	61bb      	str	r3, [r7, #24]
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	e158      	b.n	8003304 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003060:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003062:	2300      	movs	r3, #0
 8003064:	617b      	str	r3, [r7, #20]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	617b      	str	r3, [r7, #20]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	617b      	str	r3, [r7, #20]
 8003076:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003078:	e144      	b.n	8003304 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800307e:	2b03      	cmp	r3, #3
 8003080:	f200 80f1 	bhi.w	8003266 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003088:	2b01      	cmp	r3, #1
 800308a:	d123      	bne.n	80030d4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800308c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800308e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f001 f8f5 	bl	8004280 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e145      	b.n	800332c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	691a      	ldr	r2, [r3, #16]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b2:	1c5a      	adds	r2, r3, #1
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030bc:	3b01      	subs	r3, #1
 80030be:	b29a      	uxth	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	3b01      	subs	r3, #1
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030d2:	e117      	b.n	8003304 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d14e      	bne.n	800317a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030e2:	2200      	movs	r2, #0
 80030e4:	4906      	ldr	r1, [pc, #24]	@ (8003100 <HAL_I2C_Master_Receive+0x22c>)
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 ff20 	bl	8003f2c <I2C_WaitOnFlagUntilTimeout>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d008      	beq.n	8003104 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e11a      	b.n	800332c <HAL_I2C_Master_Receive+0x458>
 80030f6:	bf00      	nop
 80030f8:	00100002 	.word	0x00100002
 80030fc:	ffff0000 	.word	0xffff0000
 8003100:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003112:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	691a      	ldr	r2, [r3, #16]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003126:	1c5a      	adds	r2, r3, #1
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003130:	3b01      	subs	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800313c:	b29b      	uxth	r3, r3
 800313e:	3b01      	subs	r3, #1
 8003140:	b29a      	uxth	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	691a      	ldr	r2, [r3, #16]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003150:	b2d2      	uxtb	r2, r2
 8003152:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003158:	1c5a      	adds	r2, r3, #1
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003162:	3b01      	subs	r3, #1
 8003164:	b29a      	uxth	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800316e:	b29b      	uxth	r3, r3
 8003170:	3b01      	subs	r3, #1
 8003172:	b29a      	uxth	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003178:	e0c4      	b.n	8003304 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800317a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317c:	9300      	str	r3, [sp, #0]
 800317e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003180:	2200      	movs	r2, #0
 8003182:	496c      	ldr	r1, [pc, #432]	@ (8003334 <HAL_I2C_Master_Receive+0x460>)
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 fed1 	bl	8003f2c <I2C_WaitOnFlagUntilTimeout>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e0cb      	b.n	800332c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	691a      	ldr	r2, [r3, #16]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b6:	1c5a      	adds	r2, r3, #1
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	3b01      	subs	r3, #1
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031dc:	2200      	movs	r2, #0
 80031de:	4955      	ldr	r1, [pc, #340]	@ (8003334 <HAL_I2C_Master_Receive+0x460>)
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f000 fea3 	bl	8003f2c <I2C_WaitOnFlagUntilTimeout>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e09d      	b.n	800332c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	691a      	ldr	r2, [r3, #16]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320a:	b2d2      	uxtb	r2, r2
 800320c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003212:	1c5a      	adds	r2, r3, #1
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800321c:	3b01      	subs	r3, #1
 800321e:	b29a      	uxth	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003228:	b29b      	uxth	r3, r3
 800322a:	3b01      	subs	r3, #1
 800322c:	b29a      	uxth	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323c:	b2d2      	uxtb	r2, r2
 800323e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800324e:	3b01      	subs	r3, #1
 8003250:	b29a      	uxth	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800325a:	b29b      	uxth	r3, r3
 800325c:	3b01      	subs	r3, #1
 800325e:	b29a      	uxth	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003264:	e04e      	b.n	8003304 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003266:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003268:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f001 f808 	bl	8004280 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e058      	b.n	800332c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	691a      	ldr	r2, [r3, #16]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328c:	1c5a      	adds	r2, r3, #1
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003296:	3b01      	subs	r3, #1
 8003298:	b29a      	uxth	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	f003 0304 	and.w	r3, r3, #4
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d124      	bne.n	8003304 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032be:	2b03      	cmp	r3, #3
 80032c0:	d107      	bne.n	80032d2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032d0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e4:	1c5a      	adds	r2, r3, #1
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	3b01      	subs	r3, #1
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003308:	2b00      	cmp	r3, #0
 800330a:	f47f aeb6 	bne.w	800307a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2220      	movs	r2, #32
 8003312:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003326:	2300      	movs	r3, #0
 8003328:	e000      	b.n	800332c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800332a:	2302      	movs	r3, #2
  }
}
 800332c:	4618      	mov	r0, r3
 800332e:	3728      	adds	r7, #40	@ 0x28
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	00010004 	.word	0x00010004

08003338 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b088      	sub	sp, #32
 800333c:	af02      	add	r7, sp, #8
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	4608      	mov	r0, r1
 8003342:	4611      	mov	r1, r2
 8003344:	461a      	mov	r2, r3
 8003346:	4603      	mov	r3, r0
 8003348:	817b      	strh	r3, [r7, #10]
 800334a:	460b      	mov	r3, r1
 800334c:	813b      	strh	r3, [r7, #8]
 800334e:	4613      	mov	r3, r2
 8003350:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003352:	f7fe fa3d 	bl	80017d0 <HAL_GetTick>
 8003356:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b20      	cmp	r3, #32
 8003362:	f040 80d9 	bne.w	8003518 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	2319      	movs	r3, #25
 800336c:	2201      	movs	r2, #1
 800336e:	496d      	ldr	r1, [pc, #436]	@ (8003524 <HAL_I2C_Mem_Write+0x1ec>)
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f000 fddb 	bl	8003f2c <I2C_WaitOnFlagUntilTimeout>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800337c:	2302      	movs	r3, #2
 800337e:	e0cc      	b.n	800351a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003386:	2b01      	cmp	r3, #1
 8003388:	d101      	bne.n	800338e <HAL_I2C_Mem_Write+0x56>
 800338a:	2302      	movs	r3, #2
 800338c:	e0c5      	b.n	800351a <HAL_I2C_Mem_Write+0x1e2>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d007      	beq.n	80033b4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f042 0201 	orr.w	r2, r2, #1
 80033b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2221      	movs	r2, #33	@ 0x21
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2240      	movs	r2, #64	@ 0x40
 80033d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6a3a      	ldr	r2, [r7, #32]
 80033de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80033e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4a4d      	ldr	r2, [pc, #308]	@ (8003528 <HAL_I2C_Mem_Write+0x1f0>)
 80033f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033f6:	88f8      	ldrh	r0, [r7, #6]
 80033f8:	893a      	ldrh	r2, [r7, #8]
 80033fa:	8979      	ldrh	r1, [r7, #10]
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	9301      	str	r3, [sp, #4]
 8003400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	4603      	mov	r3, r0
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f000 fc12 	bl	8003c30 <I2C_RequestMemoryWrite>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d052      	beq.n	80034b8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e081      	b.n	800351a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 fea0 	bl	8004160 <I2C_WaitOnTXEFlagUntilTimeout>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00d      	beq.n	8003442 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342a:	2b04      	cmp	r3, #4
 800342c:	d107      	bne.n	800343e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800343c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e06b      	b.n	800351a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003446:	781a      	ldrb	r2, [r3, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003452:	1c5a      	adds	r2, r3, #1
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800345c:	3b01      	subs	r3, #1
 800345e:	b29a      	uxth	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003468:	b29b      	uxth	r3, r3
 800346a:	3b01      	subs	r3, #1
 800346c:	b29a      	uxth	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	2b04      	cmp	r3, #4
 800347e:	d11b      	bne.n	80034b8 <HAL_I2C_Mem_Write+0x180>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003484:	2b00      	cmp	r3, #0
 8003486:	d017      	beq.n	80034b8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348c:	781a      	ldrb	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003498:	1c5a      	adds	r2, r3, #1
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034a2:	3b01      	subs	r3, #1
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1aa      	bne.n	8003416 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 fe93 	bl	80041f0 <I2C_WaitOnBTFFlagUntilTimeout>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00d      	beq.n	80034ec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d4:	2b04      	cmp	r3, #4
 80034d6:	d107      	bne.n	80034e8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e016      	b.n	800351a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2220      	movs	r2, #32
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003514:	2300      	movs	r3, #0
 8003516:	e000      	b.n	800351a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003518:	2302      	movs	r3, #2
  }
}
 800351a:	4618      	mov	r0, r3
 800351c:	3718      	adds	r7, #24
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	00100002 	.word	0x00100002
 8003528:	ffff0000 	.word	0xffff0000

0800352c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b08c      	sub	sp, #48	@ 0x30
 8003530:	af02      	add	r7, sp, #8
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	4608      	mov	r0, r1
 8003536:	4611      	mov	r1, r2
 8003538:	461a      	mov	r2, r3
 800353a:	4603      	mov	r3, r0
 800353c:	817b      	strh	r3, [r7, #10]
 800353e:	460b      	mov	r3, r1
 8003540:	813b      	strh	r3, [r7, #8]
 8003542:	4613      	mov	r3, r2
 8003544:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003546:	f7fe f943 	bl	80017d0 <HAL_GetTick>
 800354a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b20      	cmp	r3, #32
 8003556:	f040 8214 	bne.w	8003982 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800355a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	2319      	movs	r3, #25
 8003560:	2201      	movs	r2, #1
 8003562:	497b      	ldr	r1, [pc, #492]	@ (8003750 <HAL_I2C_Mem_Read+0x224>)
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 fce1 	bl	8003f2c <I2C_WaitOnFlagUntilTimeout>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d001      	beq.n	8003574 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003570:	2302      	movs	r3, #2
 8003572:	e207      	b.n	8003984 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800357a:	2b01      	cmp	r3, #1
 800357c:	d101      	bne.n	8003582 <HAL_I2C_Mem_Read+0x56>
 800357e:	2302      	movs	r3, #2
 8003580:	e200      	b.n	8003984 <HAL_I2C_Mem_Read+0x458>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b01      	cmp	r3, #1
 8003596:	d007      	beq.n	80035a8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f042 0201 	orr.w	r2, r2, #1
 80035a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2222      	movs	r2, #34	@ 0x22
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2240      	movs	r2, #64	@ 0x40
 80035c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80035d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035de:	b29a      	uxth	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	4a5b      	ldr	r2, [pc, #364]	@ (8003754 <HAL_I2C_Mem_Read+0x228>)
 80035e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035ea:	88f8      	ldrh	r0, [r7, #6]
 80035ec:	893a      	ldrh	r2, [r7, #8]
 80035ee:	8979      	ldrh	r1, [r7, #10]
 80035f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f2:	9301      	str	r3, [sp, #4]
 80035f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	4603      	mov	r3, r0
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 fbae 	bl	8003d5c <I2C_RequestMemoryRead>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e1bc      	b.n	8003984 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800360e:	2b00      	cmp	r3, #0
 8003610:	d113      	bne.n	800363a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003612:	2300      	movs	r3, #0
 8003614:	623b      	str	r3, [r7, #32]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	623b      	str	r3, [r7, #32]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	623b      	str	r3, [r7, #32]
 8003626:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	e190      	b.n	800395c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800363e:	2b01      	cmp	r3, #1
 8003640:	d11b      	bne.n	800367a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003650:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003652:	2300      	movs	r3, #0
 8003654:	61fb      	str	r3, [r7, #28]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	61fb      	str	r3, [r7, #28]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	61fb      	str	r3, [r7, #28]
 8003666:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003676:	601a      	str	r2, [r3, #0]
 8003678:	e170      	b.n	800395c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800367e:	2b02      	cmp	r3, #2
 8003680:	d11b      	bne.n	80036ba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003690:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036a2:	2300      	movs	r3, #0
 80036a4:	61bb      	str	r3, [r7, #24]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	61bb      	str	r3, [r7, #24]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	61bb      	str	r3, [r7, #24]
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	e150      	b.n	800395c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ba:	2300      	movs	r3, #0
 80036bc:	617b      	str	r3, [r7, #20]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	617b      	str	r3, [r7, #20]
 80036ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80036d0:	e144      	b.n	800395c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d6:	2b03      	cmp	r3, #3
 80036d8:	f200 80f1 	bhi.w	80038be <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d123      	bne.n	800372c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036e6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f000 fdc9 	bl	8004280 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e145      	b.n	8003984 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691a      	ldr	r2, [r3, #16]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003714:	3b01      	subs	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003720:	b29b      	uxth	r3, r3
 8003722:	3b01      	subs	r3, #1
 8003724:	b29a      	uxth	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800372a:	e117      	b.n	800395c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003730:	2b02      	cmp	r3, #2
 8003732:	d14e      	bne.n	80037d2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800373a:	2200      	movs	r2, #0
 800373c:	4906      	ldr	r1, [pc, #24]	@ (8003758 <HAL_I2C_Mem_Read+0x22c>)
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 fbf4 	bl	8003f2c <I2C_WaitOnFlagUntilTimeout>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d008      	beq.n	800375c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e11a      	b.n	8003984 <HAL_I2C_Mem_Read+0x458>
 800374e:	bf00      	nop
 8003750:	00100002 	.word	0x00100002
 8003754:	ffff0000 	.word	0xffff0000
 8003758:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800376a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	691a      	ldr	r2, [r3, #16]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003776:	b2d2      	uxtb	r2, r2
 8003778:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377e:	1c5a      	adds	r2, r3, #1
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003788:	3b01      	subs	r3, #1
 800378a:	b29a      	uxth	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003794:	b29b      	uxth	r3, r3
 8003796:	3b01      	subs	r3, #1
 8003798:	b29a      	uxth	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	691a      	ldr	r2, [r3, #16]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b0:	1c5a      	adds	r2, r3, #1
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ba:	3b01      	subs	r3, #1
 80037bc:	b29a      	uxth	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	3b01      	subs	r3, #1
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80037d0:	e0c4      	b.n	800395c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037d8:	2200      	movs	r2, #0
 80037da:	496c      	ldr	r1, [pc, #432]	@ (800398c <HAL_I2C_Mem_Read+0x460>)
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 fba5 	bl	8003f2c <I2C_WaitOnFlagUntilTimeout>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e0cb      	b.n	8003984 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	691a      	ldr	r2, [r3, #16]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003806:	b2d2      	uxtb	r2, r2
 8003808:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380e:	1c5a      	adds	r2, r3, #1
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003818:	3b01      	subs	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003824:	b29b      	uxth	r3, r3
 8003826:	3b01      	subs	r3, #1
 8003828:	b29a      	uxth	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800382e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003834:	2200      	movs	r2, #0
 8003836:	4955      	ldr	r1, [pc, #340]	@ (800398c <HAL_I2C_Mem_Read+0x460>)
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 fb77 	bl	8003f2c <I2C_WaitOnFlagUntilTimeout>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e09d      	b.n	8003984 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003856:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691a      	ldr	r2, [r3, #16]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003862:	b2d2      	uxtb	r2, r2
 8003864:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003874:	3b01      	subs	r3, #1
 8003876:	b29a      	uxth	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003880:	b29b      	uxth	r3, r3
 8003882:	3b01      	subs	r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	691a      	ldr	r2, [r3, #16]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389c:	1c5a      	adds	r2, r3, #1
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038a6:	3b01      	subs	r3, #1
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	3b01      	subs	r3, #1
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80038bc:	e04e      	b.n	800395c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038c0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f000 fcdc 	bl	8004280 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e058      	b.n	8003984 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	691a      	ldr	r2, [r3, #16]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038dc:	b2d2      	uxtb	r2, r2
 80038de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e4:	1c5a      	adds	r2, r3, #1
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ee:	3b01      	subs	r3, #1
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	3b01      	subs	r3, #1
 80038fe:	b29a      	uxth	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	f003 0304 	and.w	r3, r3, #4
 800390e:	2b04      	cmp	r3, #4
 8003910:	d124      	bne.n	800395c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003916:	2b03      	cmp	r3, #3
 8003918:	d107      	bne.n	800392a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003928:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	691a      	ldr	r2, [r3, #16]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003934:	b2d2      	uxtb	r2, r2
 8003936:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393c:	1c5a      	adds	r2, r3, #1
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003946:	3b01      	subs	r3, #1
 8003948:	b29a      	uxth	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003952:	b29b      	uxth	r3, r3
 8003954:	3b01      	subs	r3, #1
 8003956:	b29a      	uxth	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003960:	2b00      	cmp	r3, #0
 8003962:	f47f aeb6 	bne.w	80036d2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2220      	movs	r2, #32
 800396a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800397e:	2300      	movs	r3, #0
 8003980:	e000      	b.n	8003984 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003982:	2302      	movs	r3, #2
  }
}
 8003984:	4618      	mov	r0, r3
 8003986:	3728      	adds	r7, #40	@ 0x28
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	00010004 	.word	0x00010004

08003990 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b088      	sub	sp, #32
 8003994:	af02      	add	r7, sp, #8
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	607a      	str	r2, [r7, #4]
 800399a:	603b      	str	r3, [r7, #0]
 800399c:	460b      	mov	r3, r1
 800399e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	2b08      	cmp	r3, #8
 80039aa:	d006      	beq.n	80039ba <I2C_MasterRequestWrite+0x2a>
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d003      	beq.n	80039ba <I2C_MasterRequestWrite+0x2a>
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80039b8:	d108      	bne.n	80039cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039c8:	601a      	str	r2, [r3, #0]
 80039ca:	e00b      	b.n	80039e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d0:	2b12      	cmp	r3, #18
 80039d2:	d107      	bne.n	80039e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	9300      	str	r3, [sp, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f000 fa9b 	bl	8003f2c <I2C_WaitOnFlagUntilTimeout>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00d      	beq.n	8003a18 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a0a:	d103      	bne.n	8003a14 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a12:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e035      	b.n	8003a84 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a20:	d108      	bne.n	8003a34 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a22:	897b      	ldrh	r3, [r7, #10]
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	461a      	mov	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a30:	611a      	str	r2, [r3, #16]
 8003a32:	e01b      	b.n	8003a6c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a34:	897b      	ldrh	r3, [r7, #10]
 8003a36:	11db      	asrs	r3, r3, #7
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	f003 0306 	and.w	r3, r3, #6
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	f063 030f 	orn	r3, r3, #15
 8003a44:	b2da      	uxtb	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	490e      	ldr	r1, [pc, #56]	@ (8003a8c <I2C_MasterRequestWrite+0xfc>)
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f000 fae4 	bl	8004020 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e010      	b.n	8003a84 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a62:	897b      	ldrh	r3, [r7, #10]
 8003a64:	b2da      	uxtb	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	4907      	ldr	r1, [pc, #28]	@ (8003a90 <I2C_MasterRequestWrite+0x100>)
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 fad4 	bl	8004020 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3718      	adds	r7, #24
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	00010008 	.word	0x00010008
 8003a90:	00010002 	.word	0x00010002

08003a94 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b088      	sub	sp, #32
 8003a98:	af02      	add	r7, sp, #8
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	607a      	str	r2, [r7, #4]
 8003a9e:	603b      	str	r3, [r7, #0]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ab8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2b08      	cmp	r3, #8
 8003abe:	d006      	beq.n	8003ace <I2C_MasterRequestRead+0x3a>
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d003      	beq.n	8003ace <I2C_MasterRequestRead+0x3a>
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003acc:	d108      	bne.n	8003ae0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	e00b      	b.n	8003af8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae4:	2b11      	cmp	r3, #17
 8003ae6:	d107      	bne.n	8003af8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003af6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f000 fa11 	bl	8003f2c <I2C_WaitOnFlagUntilTimeout>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00d      	beq.n	8003b2c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b1e:	d103      	bne.n	8003b28 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b26:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e079      	b.n	8003c20 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b34:	d108      	bne.n	8003b48 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b36:	897b      	ldrh	r3, [r7, #10]
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	f043 0301 	orr.w	r3, r3, #1
 8003b3e:	b2da      	uxtb	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	611a      	str	r2, [r3, #16]
 8003b46:	e05f      	b.n	8003c08 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b48:	897b      	ldrh	r3, [r7, #10]
 8003b4a:	11db      	asrs	r3, r3, #7
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	f003 0306 	and.w	r3, r3, #6
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	f063 030f 	orn	r3, r3, #15
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	4930      	ldr	r1, [pc, #192]	@ (8003c28 <I2C_MasterRequestRead+0x194>)
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f000 fa5a 	bl	8004020 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e054      	b.n	8003c20 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b76:	897b      	ldrh	r3, [r7, #10]
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	4929      	ldr	r1, [pc, #164]	@ (8003c2c <I2C_MasterRequestRead+0x198>)
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 fa4a 	bl	8004020 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e044      	b.n	8003c20 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b96:	2300      	movs	r3, #0
 8003b98:	613b      	str	r3, [r7, #16]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	613b      	str	r3, [r7, #16]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	613b      	str	r3, [r7, #16]
 8003baa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bba:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f000 f9af 	bl	8003f2c <I2C_WaitOnFlagUntilTimeout>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00d      	beq.n	8003bf0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003be2:	d103      	bne.n	8003bec <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bea:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e017      	b.n	8003c20 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003bf0:	897b      	ldrh	r3, [r7, #10]
 8003bf2:	11db      	asrs	r3, r3, #7
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	f003 0306 	and.w	r3, r3, #6
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	f063 030e 	orn	r3, r3, #14
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	4907      	ldr	r1, [pc, #28]	@ (8003c2c <I2C_MasterRequestRead+0x198>)
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 fa06 	bl	8004020 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e000      	b.n	8003c20 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	00010008 	.word	0x00010008
 8003c2c:	00010002 	.word	0x00010002

08003c30 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b088      	sub	sp, #32
 8003c34:	af02      	add	r7, sp, #8
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	4608      	mov	r0, r1
 8003c3a:	4611      	mov	r1, r2
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	4603      	mov	r3, r0
 8003c40:	817b      	strh	r3, [r7, #10]
 8003c42:	460b      	mov	r3, r1
 8003c44:	813b      	strh	r3, [r7, #8]
 8003c46:	4613      	mov	r3, r2
 8003c48:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	6a3b      	ldr	r3, [r7, #32]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 f960 	bl	8003f2c <I2C_WaitOnFlagUntilTimeout>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00d      	beq.n	8003c8e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c80:	d103      	bne.n	8003c8a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c88:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e05f      	b.n	8003d4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c8e:	897b      	ldrh	r3, [r7, #10]
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	461a      	mov	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca0:	6a3a      	ldr	r2, [r7, #32]
 8003ca2:	492d      	ldr	r1, [pc, #180]	@ (8003d58 <I2C_RequestMemoryWrite+0x128>)
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f000 f9bb 	bl	8004020 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e04c      	b.n	8003d4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	617b      	str	r3, [r7, #20]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	617b      	str	r3, [r7, #20]
 8003cc8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ccc:	6a39      	ldr	r1, [r7, #32]
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 fa46 	bl	8004160 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00d      	beq.n	8003cf6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	d107      	bne.n	8003cf2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cf0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e02b      	b.n	8003d4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cf6:	88fb      	ldrh	r3, [r7, #6]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d105      	bne.n	8003d08 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cfc:	893b      	ldrh	r3, [r7, #8]
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	611a      	str	r2, [r3, #16]
 8003d06:	e021      	b.n	8003d4c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d08:	893b      	ldrh	r3, [r7, #8]
 8003d0a:	0a1b      	lsrs	r3, r3, #8
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	b2da      	uxtb	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d18:	6a39      	ldr	r1, [r7, #32]
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 fa20 	bl	8004160 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00d      	beq.n	8003d42 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	d107      	bne.n	8003d3e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e005      	b.n	8003d4e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d42:	893b      	ldrh	r3, [r7, #8]
 8003d44:	b2da      	uxtb	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3718      	adds	r7, #24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	00010002 	.word	0x00010002

08003d5c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b088      	sub	sp, #32
 8003d60:	af02      	add	r7, sp, #8
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	4608      	mov	r0, r1
 8003d66:	4611      	mov	r1, r2
 8003d68:	461a      	mov	r2, r3
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	817b      	strh	r3, [r7, #10]
 8003d6e:	460b      	mov	r3, r1
 8003d70:	813b      	strh	r3, [r7, #8]
 8003d72:	4613      	mov	r3, r2
 8003d74:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d84:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	6a3b      	ldr	r3, [r7, #32]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f000 f8c2 	bl	8003f2c <I2C_WaitOnFlagUntilTimeout>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00d      	beq.n	8003dca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003db8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dbc:	d103      	bne.n	8003dc6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dc4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e0aa      	b.n	8003f20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003dca:	897b      	ldrh	r3, [r7, #10]
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	461a      	mov	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003dd8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ddc:	6a3a      	ldr	r2, [r7, #32]
 8003dde:	4952      	ldr	r1, [pc, #328]	@ (8003f28 <I2C_RequestMemoryRead+0x1cc>)
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 f91d 	bl	8004020 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d001      	beq.n	8003df0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e097      	b.n	8003f20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003df0:	2300      	movs	r3, #0
 8003df2:	617b      	str	r3, [r7, #20]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	617b      	str	r3, [r7, #20]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	617b      	str	r3, [r7, #20]
 8003e04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e08:	6a39      	ldr	r1, [r7, #32]
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f000 f9a8 	bl	8004160 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00d      	beq.n	8003e32 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d107      	bne.n	8003e2e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e076      	b.n	8003f20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e32:	88fb      	ldrh	r3, [r7, #6]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d105      	bne.n	8003e44 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e38:	893b      	ldrh	r3, [r7, #8]
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	611a      	str	r2, [r3, #16]
 8003e42:	e021      	b.n	8003e88 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e44:	893b      	ldrh	r3, [r7, #8]
 8003e46:	0a1b      	lsrs	r3, r3, #8
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e54:	6a39      	ldr	r1, [r7, #32]
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 f982 	bl	8004160 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00d      	beq.n	8003e7e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	d107      	bne.n	8003e7a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e050      	b.n	8003f20 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e7e:	893b      	ldrh	r3, [r7, #8]
 8003e80:	b2da      	uxtb	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e8a:	6a39      	ldr	r1, [r7, #32]
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 f967 	bl	8004160 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00d      	beq.n	8003eb4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	d107      	bne.n	8003eb0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e035      	b.n	8003f20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ec2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	6a3b      	ldr	r3, [r7, #32]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f000 f82b 	bl	8003f2c <I2C_WaitOnFlagUntilTimeout>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00d      	beq.n	8003ef8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ee6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003eea:	d103      	bne.n	8003ef4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ef2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e013      	b.n	8003f20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ef8:	897b      	ldrh	r3, [r7, #10]
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	f043 0301 	orr.w	r3, r3, #1
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f0a:	6a3a      	ldr	r2, [r7, #32]
 8003f0c:	4906      	ldr	r1, [pc, #24]	@ (8003f28 <I2C_RequestMemoryRead+0x1cc>)
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 f886 	bl	8004020 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e000      	b.n	8003f20 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3718      	adds	r7, #24
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	00010002 	.word	0x00010002

08003f2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	603b      	str	r3, [r7, #0]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f3c:	e048      	b.n	8003fd0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f44:	d044      	beq.n	8003fd0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f46:	f7fd fc43 	bl	80017d0 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d302      	bcc.n	8003f5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d139      	bne.n	8003fd0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	0c1b      	lsrs	r3, r3, #16
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d10d      	bne.n	8003f82 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	43da      	mvns	r2, r3
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	4013      	ands	r3, r2
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	bf0c      	ite	eq
 8003f78:	2301      	moveq	r3, #1
 8003f7a:	2300      	movne	r3, #0
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	461a      	mov	r2, r3
 8003f80:	e00c      	b.n	8003f9c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	43da      	mvns	r2, r3
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	bf0c      	ite	eq
 8003f94:	2301      	moveq	r3, #1
 8003f96:	2300      	movne	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	79fb      	ldrb	r3, [r7, #7]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d116      	bne.n	8003fd0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fbc:	f043 0220 	orr.w	r2, r3, #32
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e023      	b.n	8004018 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	0c1b      	lsrs	r3, r3, #16
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d10d      	bne.n	8003ff6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	43da      	mvns	r2, r3
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	bf0c      	ite	eq
 8003fec:	2301      	moveq	r3, #1
 8003fee:	2300      	movne	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	e00c      	b.n	8004010 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	43da      	mvns	r2, r3
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	4013      	ands	r3, r2
 8004002:	b29b      	uxth	r3, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	bf0c      	ite	eq
 8004008:	2301      	moveq	r3, #1
 800400a:	2300      	movne	r3, #0
 800400c:	b2db      	uxtb	r3, r3
 800400e:	461a      	mov	r2, r3
 8004010:	79fb      	ldrb	r3, [r7, #7]
 8004012:	429a      	cmp	r2, r3
 8004014:	d093      	beq.n	8003f3e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
 800402c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800402e:	e071      	b.n	8004114 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800403a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800403e:	d123      	bne.n	8004088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800404e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004058:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2220      	movs	r2, #32
 8004064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004074:	f043 0204 	orr.w	r2, r3, #4
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e067      	b.n	8004158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408e:	d041      	beq.n	8004114 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004090:	f7fd fb9e 	bl	80017d0 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	429a      	cmp	r2, r3
 800409e:	d302      	bcc.n	80040a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d136      	bne.n	8004114 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	0c1b      	lsrs	r3, r3, #16
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d10c      	bne.n	80040ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	43da      	mvns	r2, r3
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	4013      	ands	r3, r2
 80040bc:	b29b      	uxth	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	bf14      	ite	ne
 80040c2:	2301      	movne	r3, #1
 80040c4:	2300      	moveq	r3, #0
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	e00b      	b.n	80040e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	43da      	mvns	r2, r3
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	4013      	ands	r3, r2
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	bf14      	ite	ne
 80040dc:	2301      	movne	r3, #1
 80040de:	2300      	moveq	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d016      	beq.n	8004114 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2220      	movs	r2, #32
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004100:	f043 0220 	orr.w	r2, r3, #32
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e021      	b.n	8004158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	0c1b      	lsrs	r3, r3, #16
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b01      	cmp	r3, #1
 800411c:	d10c      	bne.n	8004138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	43da      	mvns	r2, r3
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	4013      	ands	r3, r2
 800412a:	b29b      	uxth	r3, r3
 800412c:	2b00      	cmp	r3, #0
 800412e:	bf14      	ite	ne
 8004130:	2301      	movne	r3, #1
 8004132:	2300      	moveq	r3, #0
 8004134:	b2db      	uxtb	r3, r3
 8004136:	e00b      	b.n	8004150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	43da      	mvns	r2, r3
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	4013      	ands	r3, r2
 8004144:	b29b      	uxth	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	bf14      	ite	ne
 800414a:	2301      	movne	r3, #1
 800414c:	2300      	moveq	r3, #0
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	f47f af6d 	bne.w	8004030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800416c:	e034      	b.n	80041d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f000 f8e3 	bl	800433a <I2C_IsAcknowledgeFailed>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e034      	b.n	80041e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004184:	d028      	beq.n	80041d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004186:	f7fd fb23 	bl	80017d0 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	429a      	cmp	r2, r3
 8004194:	d302      	bcc.n	800419c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d11d      	bne.n	80041d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041a6:	2b80      	cmp	r3, #128	@ 0x80
 80041a8:	d016      	beq.n	80041d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2220      	movs	r2, #32
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c4:	f043 0220 	orr.w	r2, r3, #32
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e007      	b.n	80041e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041e2:	2b80      	cmp	r3, #128	@ 0x80
 80041e4:	d1c3      	bne.n	800416e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041fc:	e034      	b.n	8004268 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f000 f89b 	bl	800433a <I2C_IsAcknowledgeFailed>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e034      	b.n	8004278 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004214:	d028      	beq.n	8004268 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004216:	f7fd fadb 	bl	80017d0 <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	429a      	cmp	r2, r3
 8004224:	d302      	bcc.n	800422c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d11d      	bne.n	8004268 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	f003 0304 	and.w	r3, r3, #4
 8004236:	2b04      	cmp	r3, #4
 8004238:	d016      	beq.n	8004268 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2220      	movs	r2, #32
 8004244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004254:	f043 0220 	orr.w	r2, r3, #32
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e007      	b.n	8004278 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	f003 0304 	and.w	r3, r3, #4
 8004272:	2b04      	cmp	r3, #4
 8004274:	d1c3      	bne.n	80041fe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800428c:	e049      	b.n	8004322 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	f003 0310 	and.w	r3, r3, #16
 8004298:	2b10      	cmp	r3, #16
 800429a:	d119      	bne.n	80042d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f06f 0210 	mvn.w	r2, #16
 80042a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2220      	movs	r2, #32
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e030      	b.n	8004332 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042d0:	f7fd fa7e 	bl	80017d0 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	68ba      	ldr	r2, [r7, #8]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d302      	bcc.n	80042e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d11d      	bne.n	8004322 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f0:	2b40      	cmp	r3, #64	@ 0x40
 80042f2:	d016      	beq.n	8004322 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430e:	f043 0220 	orr.w	r2, r3, #32
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e007      	b.n	8004332 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800432c:	2b40      	cmp	r3, #64	@ 0x40
 800432e:	d1ae      	bne.n	800428e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800433a:	b480      	push	{r7}
 800433c:	b083      	sub	sp, #12
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800434c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004350:	d11b      	bne.n	800438a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800435a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2220      	movs	r2, #32
 8004366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004376:	f043 0204 	orr.w	r2, r3, #4
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e000      	b.n	800438c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b088      	sub	sp, #32
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e128      	b.n	80045fc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d109      	bne.n	80043ca <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a90      	ldr	r2, [pc, #576]	@ (8004604 <HAL_I2S_Init+0x26c>)
 80043c2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f7fc fcf7 	bl	8000db8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2202      	movs	r2, #2
 80043ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	69db      	ldr	r3, [r3, #28]
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6812      	ldr	r2, [r2, #0]
 80043dc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80043e0:	f023 030f 	bic.w	r3, r3, #15
 80043e4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2202      	movs	r2, #2
 80043ec:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d060      	beq.n	80044b8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d102      	bne.n	8004404 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80043fe:	2310      	movs	r3, #16
 8004400:	617b      	str	r3, [r7, #20]
 8004402:	e001      	b.n	8004408 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004404:	2320      	movs	r3, #32
 8004406:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	2b20      	cmp	r3, #32
 800440e:	d802      	bhi.n	8004416 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004416:	2001      	movs	r0, #1
 8004418:	f001 fa00 	bl	800581c <HAL_RCCEx_GetPeriphCLKFreq>
 800441c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004426:	d125      	bne.n	8004474 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d010      	beq.n	8004452 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	fbb2 f2f3 	udiv	r2, r2, r3
 800443a:	4613      	mov	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	4413      	add	r3, r2
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	461a      	mov	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	fbb2 f3f3 	udiv	r3, r2, r3
 800444c:	3305      	adds	r3, #5
 800444e:	613b      	str	r3, [r7, #16]
 8004450:	e01f      	b.n	8004492 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	00db      	lsls	r3, r3, #3
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	fbb2 f2f3 	udiv	r2, r2, r3
 800445c:	4613      	mov	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4413      	add	r3, r2
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	461a      	mov	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	fbb2 f3f3 	udiv	r3, r2, r3
 800446e:	3305      	adds	r3, #5
 8004470:	613b      	str	r3, [r7, #16]
 8004472:	e00e      	b.n	8004492 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	fbb2 f2f3 	udiv	r2, r2, r3
 800447c:	4613      	mov	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4413      	add	r3, r2
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	461a      	mov	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	fbb2 f3f3 	udiv	r3, r2, r3
 800448e:	3305      	adds	r3, #5
 8004490:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	4a5c      	ldr	r2, [pc, #368]	@ (8004608 <HAL_I2S_Init+0x270>)
 8004496:	fba2 2303 	umull	r2, r3, r2, r3
 800449a:	08db      	lsrs	r3, r3, #3
 800449c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	085b      	lsrs	r3, r3, #1
 80044ae:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	021b      	lsls	r3, r3, #8
 80044b4:	61bb      	str	r3, [r7, #24]
 80044b6:	e003      	b.n	80044c0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80044b8:	2302      	movs	r3, #2
 80044ba:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d902      	bls.n	80044cc <HAL_I2S_Init+0x134>
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	2bff      	cmp	r3, #255	@ 0xff
 80044ca:	d907      	bls.n	80044dc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044d0:	f043 0210 	orr.w	r2, r3, #16
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e08f      	b.n	80045fc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	691a      	ldr	r2, [r3, #16]
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	ea42 0103 	orr.w	r1, r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	69fa      	ldr	r2, [r7, #28]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80044fa:	f023 030f 	bic.w	r3, r3, #15
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6851      	ldr	r1, [r2, #4]
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	6892      	ldr	r2, [r2, #8]
 8004506:	4311      	orrs	r1, r2
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	68d2      	ldr	r2, [r2, #12]
 800450c:	4311      	orrs	r1, r2
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	6992      	ldr	r2, [r2, #24]
 8004512:	430a      	orrs	r2, r1
 8004514:	431a      	orrs	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800451e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d161      	bne.n	80045ec <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a38      	ldr	r2, [pc, #224]	@ (800460c <HAL_I2S_Init+0x274>)
 800452c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a37      	ldr	r2, [pc, #220]	@ (8004610 <HAL_I2S_Init+0x278>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d101      	bne.n	800453c <HAL_I2S_Init+0x1a4>
 8004538:	4b36      	ldr	r3, [pc, #216]	@ (8004614 <HAL_I2S_Init+0x27c>)
 800453a:	e001      	b.n	8004540 <HAL_I2S_Init+0x1a8>
 800453c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6812      	ldr	r2, [r2, #0]
 8004546:	4932      	ldr	r1, [pc, #200]	@ (8004610 <HAL_I2S_Init+0x278>)
 8004548:	428a      	cmp	r2, r1
 800454a:	d101      	bne.n	8004550 <HAL_I2S_Init+0x1b8>
 800454c:	4a31      	ldr	r2, [pc, #196]	@ (8004614 <HAL_I2S_Init+0x27c>)
 800454e:	e001      	b.n	8004554 <HAL_I2S_Init+0x1bc>
 8004550:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004554:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004558:	f023 030f 	bic.w	r3, r3, #15
 800455c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a2b      	ldr	r2, [pc, #172]	@ (8004610 <HAL_I2S_Init+0x278>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d101      	bne.n	800456c <HAL_I2S_Init+0x1d4>
 8004568:	4b2a      	ldr	r3, [pc, #168]	@ (8004614 <HAL_I2S_Init+0x27c>)
 800456a:	e001      	b.n	8004570 <HAL_I2S_Init+0x1d8>
 800456c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004570:	2202      	movs	r2, #2
 8004572:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a25      	ldr	r2, [pc, #148]	@ (8004610 <HAL_I2S_Init+0x278>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d101      	bne.n	8004582 <HAL_I2S_Init+0x1ea>
 800457e:	4b25      	ldr	r3, [pc, #148]	@ (8004614 <HAL_I2S_Init+0x27c>)
 8004580:	e001      	b.n	8004586 <HAL_I2S_Init+0x1ee>
 8004582:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004586:	69db      	ldr	r3, [r3, #28]
 8004588:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004592:	d003      	beq.n	800459c <HAL_I2S_Init+0x204>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d103      	bne.n	80045a4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800459c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80045a0:	613b      	str	r3, [r7, #16]
 80045a2:	e001      	b.n	80045a8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80045a4:	2300      	movs	r3, #0
 80045a6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80045b2:	4313      	orrs	r3, r2
 80045b4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80045bc:	4313      	orrs	r3, r2
 80045be:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80045c6:	4313      	orrs	r3, r2
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	897b      	ldrh	r3, [r7, #10]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80045d4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a0d      	ldr	r2, [pc, #52]	@ (8004610 <HAL_I2S_Init+0x278>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d101      	bne.n	80045e4 <HAL_I2S_Init+0x24c>
 80045e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004614 <HAL_I2S_Init+0x27c>)
 80045e2:	e001      	b.n	80045e8 <HAL_I2S_Init+0x250>
 80045e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045e8:	897a      	ldrh	r2, [r7, #10]
 80045ea:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3720      	adds	r7, #32
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	080046fb 	.word	0x080046fb
 8004608:	cccccccd 	.word	0xcccccccd
 800460c:	08004811 	.word	0x08004811
 8004610:	40003800 	.word	0x40003800
 8004614:	40003400 	.word	0x40003400

08004618 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800464c:	881a      	ldrh	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004658:	1c9a      	adds	r2, r3, #2
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004662:	b29b      	uxth	r3, r3
 8004664:	3b01      	subs	r3, #1
 8004666:	b29a      	uxth	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004670:	b29b      	uxth	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10e      	bne.n	8004694 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004684:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f005 fe8c 	bl	800a3ac <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004694:	bf00      	nop
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68da      	ldr	r2, [r3, #12]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ae:	b292      	uxth	r2, r2
 80046b0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b6:	1c9a      	adds	r2, r3, #2
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	3b01      	subs	r3, #1
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d10e      	bne.n	80046f2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80046e2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f7ff ff93 	bl	8004618 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80046f2:	bf00      	nop
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b086      	sub	sp, #24
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b04      	cmp	r3, #4
 8004714:	d13a      	bne.n	800478c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b01      	cmp	r3, #1
 800471e:	d109      	bne.n	8004734 <I2S_IRQHandler+0x3a>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800472a:	2b40      	cmp	r3, #64	@ 0x40
 800472c:	d102      	bne.n	8004734 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7ff ffb4 	bl	800469c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800473a:	2b40      	cmp	r3, #64	@ 0x40
 800473c:	d126      	bne.n	800478c <I2S_IRQHandler+0x92>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f003 0320 	and.w	r3, r3, #32
 8004748:	2b20      	cmp	r3, #32
 800474a:	d11f      	bne.n	800478c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800475a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800475c:	2300      	movs	r3, #0
 800475e:	613b      	str	r3, [r7, #16]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	613b      	str	r3, [r7, #16]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	613b      	str	r3, [r7, #16]
 8004770:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800477e:	f043 0202 	orr.w	r2, r3, #2
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7ff ff50 	bl	800462c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004792:	b2db      	uxtb	r3, r3
 8004794:	2b03      	cmp	r3, #3
 8004796:	d136      	bne.n	8004806 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d109      	bne.n	80047b6 <I2S_IRQHandler+0xbc>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047ac:	2b80      	cmp	r3, #128	@ 0x80
 80047ae:	d102      	bne.n	80047b6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7ff ff45 	bl	8004640 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f003 0308 	and.w	r3, r3, #8
 80047bc:	2b08      	cmp	r3, #8
 80047be:	d122      	bne.n	8004806 <I2S_IRQHandler+0x10c>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f003 0320 	and.w	r3, r3, #32
 80047ca:	2b20      	cmp	r3, #32
 80047cc:	d11b      	bne.n	8004806 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80047dc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80047de:	2300      	movs	r3, #0
 80047e0:	60fb      	str	r3, [r7, #12]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	60fb      	str	r3, [r7, #12]
 80047ea:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047f8:	f043 0204 	orr.w	r2, r3, #4
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f7ff ff13 	bl	800462c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004806:	bf00      	nop
 8004808:	3718      	adds	r7, #24
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
	...

08004810 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b088      	sub	sp, #32
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a92      	ldr	r2, [pc, #584]	@ (8004a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d101      	bne.n	800482e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800482a:	4b92      	ldr	r3, [pc, #584]	@ (8004a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800482c:	e001      	b.n	8004832 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800482e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a8b      	ldr	r2, [pc, #556]	@ (8004a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d101      	bne.n	800484c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004848:	4b8a      	ldr	r3, [pc, #552]	@ (8004a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800484a:	e001      	b.n	8004850 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800484c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800485c:	d004      	beq.n	8004868 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	f040 8099 	bne.w	800499a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b02      	cmp	r3, #2
 8004870:	d107      	bne.n	8004882 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004878:	2b00      	cmp	r3, #0
 800487a:	d002      	beq.n	8004882 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 f925 	bl	8004acc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	2b01      	cmp	r3, #1
 800488a:	d107      	bne.n	800489c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004892:	2b00      	cmp	r3, #0
 8004894:	d002      	beq.n	800489c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f9c8 	bl	8004c2c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048a2:	2b40      	cmp	r3, #64	@ 0x40
 80048a4:	d13a      	bne.n	800491c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	f003 0320 	and.w	r3, r3, #32
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d035      	beq.n	800491c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a6e      	ldr	r2, [pc, #440]	@ (8004a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d101      	bne.n	80048be <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80048ba:	4b6e      	ldr	r3, [pc, #440]	@ (8004a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048bc:	e001      	b.n	80048c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80048be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4969      	ldr	r1, [pc, #420]	@ (8004a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048ca:	428b      	cmp	r3, r1
 80048cc:	d101      	bne.n	80048d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80048ce:	4b69      	ldr	r3, [pc, #420]	@ (8004a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048d0:	e001      	b.n	80048d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80048d2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80048d6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80048da:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685a      	ldr	r2, [r3, #4]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80048ea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80048ec:	2300      	movs	r3, #0
 80048ee:	60fb      	str	r3, [r7, #12]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	60fb      	str	r3, [r7, #12]
 8004900:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800490e:	f043 0202 	orr.w	r2, r3, #2
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7ff fe88 	bl	800462c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	f003 0308 	and.w	r3, r3, #8
 8004922:	2b08      	cmp	r3, #8
 8004924:	f040 80c3 	bne.w	8004aae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f003 0320 	and.w	r3, r3, #32
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 80bd 	beq.w	8004aae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004942:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a49      	ldr	r2, [pc, #292]	@ (8004a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d101      	bne.n	8004952 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800494e:	4b49      	ldr	r3, [pc, #292]	@ (8004a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004950:	e001      	b.n	8004956 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004952:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4944      	ldr	r1, [pc, #272]	@ (8004a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800495e:	428b      	cmp	r3, r1
 8004960:	d101      	bne.n	8004966 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004962:	4b44      	ldr	r3, [pc, #272]	@ (8004a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004964:	e001      	b.n	800496a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004966:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800496a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800496e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004970:	2300      	movs	r3, #0
 8004972:	60bb      	str	r3, [r7, #8]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	60bb      	str	r3, [r7, #8]
 800497c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800498a:	f043 0204 	orr.w	r2, r3, #4
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7ff fe4a 	bl	800462c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004998:	e089      	b.n	8004aae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d107      	bne.n	80049b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d002      	beq.n	80049b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f8be 	bl	8004b30 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d107      	bne.n	80049ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d002      	beq.n	80049ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 f8fd 	bl	8004bc8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049d4:	2b40      	cmp	r3, #64	@ 0x40
 80049d6:	d12f      	bne.n	8004a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f003 0320 	and.w	r3, r3, #32
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d02a      	beq.n	8004a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	685a      	ldr	r2, [r3, #4]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80049f0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a1e      	ldr	r2, [pc, #120]	@ (8004a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d101      	bne.n	8004a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80049fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80049fe:	e001      	b.n	8004a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004a00:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4919      	ldr	r1, [pc, #100]	@ (8004a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a0c:	428b      	cmp	r3, r1
 8004a0e:	d101      	bne.n	8004a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004a10:	4b18      	ldr	r3, [pc, #96]	@ (8004a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a12:	e001      	b.n	8004a18 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004a14:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a18:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004a1c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a2a:	f043 0202 	orr.w	r2, r3, #2
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7ff fdfa 	bl	800462c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	f003 0308 	and.w	r3, r3, #8
 8004a3e:	2b08      	cmp	r3, #8
 8004a40:	d136      	bne.n	8004ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	f003 0320 	and.w	r3, r3, #32
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d031      	beq.n	8004ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a07      	ldr	r2, [pc, #28]	@ (8004a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d101      	bne.n	8004a5a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004a56:	4b07      	ldr	r3, [pc, #28]	@ (8004a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a58:	e001      	b.n	8004a5e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004a5a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4902      	ldr	r1, [pc, #8]	@ (8004a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a66:	428b      	cmp	r3, r1
 8004a68:	d106      	bne.n	8004a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004a6a:	4b02      	ldr	r3, [pc, #8]	@ (8004a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a6c:	e006      	b.n	8004a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004a6e:	bf00      	nop
 8004a70:	40003800 	.word	0x40003800
 8004a74:	40003400 	.word	0x40003400
 8004a78:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a7c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004a80:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004a90:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a9e:	f043 0204 	orr.w	r2, r3, #4
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7ff fdc0 	bl	800462c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004aac:	e000      	b.n	8004ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004aae:	bf00      	nop
}
 8004ab0:	bf00      	nop
 8004ab2:	3720      	adds	r7, #32
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad8:	1c99      	adds	r1, r3, #2
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	6251      	str	r1, [r2, #36]	@ 0x24
 8004ade:	881a      	ldrh	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	3b01      	subs	r3, #1
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d113      	bne.n	8004b26 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004b0c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d106      	bne.n	8004b26 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f7ff ffc9 	bl	8004ab8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b26:	bf00      	nop
 8004b28:	3708      	adds	r7, #8
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
	...

08004b30 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b3c:	1c99      	adds	r1, r3, #2
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	6251      	str	r1, [r2, #36]	@ 0x24
 8004b42:	8819      	ldrh	r1, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a1d      	ldr	r2, [pc, #116]	@ (8004bc0 <I2SEx_TxISR_I2SExt+0x90>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d101      	bne.n	8004b52 <I2SEx_TxISR_I2SExt+0x22>
 8004b4e:	4b1d      	ldr	r3, [pc, #116]	@ (8004bc4 <I2SEx_TxISR_I2SExt+0x94>)
 8004b50:	e001      	b.n	8004b56 <I2SEx_TxISR_I2SExt+0x26>
 8004b52:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b56:	460a      	mov	r2, r1
 8004b58:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	3b01      	subs	r3, #1
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d121      	bne.n	8004bb6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a12      	ldr	r2, [pc, #72]	@ (8004bc0 <I2SEx_TxISR_I2SExt+0x90>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d101      	bne.n	8004b80 <I2SEx_TxISR_I2SExt+0x50>
 8004b7c:	4b11      	ldr	r3, [pc, #68]	@ (8004bc4 <I2SEx_TxISR_I2SExt+0x94>)
 8004b7e:	e001      	b.n	8004b84 <I2SEx_TxISR_I2SExt+0x54>
 8004b80:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	490d      	ldr	r1, [pc, #52]	@ (8004bc0 <I2SEx_TxISR_I2SExt+0x90>)
 8004b8c:	428b      	cmp	r3, r1
 8004b8e:	d101      	bne.n	8004b94 <I2SEx_TxISR_I2SExt+0x64>
 8004b90:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc4 <I2SEx_TxISR_I2SExt+0x94>)
 8004b92:	e001      	b.n	8004b98 <I2SEx_TxISR_I2SExt+0x68>
 8004b94:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b98:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004b9c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d106      	bne.n	8004bb6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f7ff ff81 	bl	8004ab8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004bb6:	bf00      	nop
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	40003800 	.word	0x40003800
 8004bc4:	40003400 	.word	0x40003400

08004bc8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68d8      	ldr	r0, [r3, #12]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bda:	1c99      	adds	r1, r3, #2
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004be0:	b282      	uxth	r2, r0
 8004be2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	3b01      	subs	r3, #1
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d113      	bne.n	8004c24 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004c0a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d106      	bne.n	8004c24 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7ff ff4a 	bl	8004ab8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c24:	bf00      	nop
 8004c26:	3708      	adds	r7, #8
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a20      	ldr	r2, [pc, #128]	@ (8004cbc <I2SEx_RxISR_I2SExt+0x90>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d101      	bne.n	8004c42 <I2SEx_RxISR_I2SExt+0x16>
 8004c3e:	4b20      	ldr	r3, [pc, #128]	@ (8004cc0 <I2SEx_RxISR_I2SExt+0x94>)
 8004c40:	e001      	b.n	8004c46 <I2SEx_RxISR_I2SExt+0x1a>
 8004c42:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c46:	68d8      	ldr	r0, [r3, #12]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c4c:	1c99      	adds	r1, r3, #2
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004c52:	b282      	uxth	r2, r0
 8004c54:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d121      	bne.n	8004cb2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a12      	ldr	r2, [pc, #72]	@ (8004cbc <I2SEx_RxISR_I2SExt+0x90>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d101      	bne.n	8004c7c <I2SEx_RxISR_I2SExt+0x50>
 8004c78:	4b11      	ldr	r3, [pc, #68]	@ (8004cc0 <I2SEx_RxISR_I2SExt+0x94>)
 8004c7a:	e001      	b.n	8004c80 <I2SEx_RxISR_I2SExt+0x54>
 8004c7c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	490d      	ldr	r1, [pc, #52]	@ (8004cbc <I2SEx_RxISR_I2SExt+0x90>)
 8004c88:	428b      	cmp	r3, r1
 8004c8a:	d101      	bne.n	8004c90 <I2SEx_RxISR_I2SExt+0x64>
 8004c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8004cc0 <I2SEx_RxISR_I2SExt+0x94>)
 8004c8e:	e001      	b.n	8004c94 <I2SEx_RxISR_I2SExt+0x68>
 8004c90:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c94:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004c98:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d106      	bne.n	8004cb2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f7ff ff03 	bl	8004ab8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004cb2:	bf00      	nop
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	40003800 	.word	0x40003800
 8004cc0:	40003400 	.word	0x40003400

08004cc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b086      	sub	sp, #24
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e267      	b.n	80051a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d075      	beq.n	8004dce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004ce2:	4b88      	ldr	r3, [pc, #544]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f003 030c 	and.w	r3, r3, #12
 8004cea:	2b04      	cmp	r3, #4
 8004cec:	d00c      	beq.n	8004d08 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cee:	4b85      	ldr	r3, [pc, #532]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004cf6:	2b08      	cmp	r3, #8
 8004cf8:	d112      	bne.n	8004d20 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cfa:	4b82      	ldr	r3, [pc, #520]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d06:	d10b      	bne.n	8004d20 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d08:	4b7e      	ldr	r3, [pc, #504]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d05b      	beq.n	8004dcc <HAL_RCC_OscConfig+0x108>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d157      	bne.n	8004dcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e242      	b.n	80051a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d28:	d106      	bne.n	8004d38 <HAL_RCC_OscConfig+0x74>
 8004d2a:	4b76      	ldr	r3, [pc, #472]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a75      	ldr	r2, [pc, #468]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004d30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d34:	6013      	str	r3, [r2, #0]
 8004d36:	e01d      	b.n	8004d74 <HAL_RCC_OscConfig+0xb0>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d40:	d10c      	bne.n	8004d5c <HAL_RCC_OscConfig+0x98>
 8004d42:	4b70      	ldr	r3, [pc, #448]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a6f      	ldr	r2, [pc, #444]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004d48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d4c:	6013      	str	r3, [r2, #0]
 8004d4e:	4b6d      	ldr	r3, [pc, #436]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a6c      	ldr	r2, [pc, #432]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004d54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d58:	6013      	str	r3, [r2, #0]
 8004d5a:	e00b      	b.n	8004d74 <HAL_RCC_OscConfig+0xb0>
 8004d5c:	4b69      	ldr	r3, [pc, #420]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a68      	ldr	r2, [pc, #416]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004d62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d66:	6013      	str	r3, [r2, #0]
 8004d68:	4b66      	ldr	r3, [pc, #408]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a65      	ldr	r2, [pc, #404]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004d6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d013      	beq.n	8004da4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d7c:	f7fc fd28 	bl	80017d0 <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d82:	e008      	b.n	8004d96 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d84:	f7fc fd24 	bl	80017d0 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b64      	cmp	r3, #100	@ 0x64
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e207      	b.n	80051a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d96:	4b5b      	ldr	r3, [pc, #364]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d0f0      	beq.n	8004d84 <HAL_RCC_OscConfig+0xc0>
 8004da2:	e014      	b.n	8004dce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004da4:	f7fc fd14 	bl	80017d0 <HAL_GetTick>
 8004da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004daa:	e008      	b.n	8004dbe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dac:	f7fc fd10 	bl	80017d0 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b64      	cmp	r3, #100	@ 0x64
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e1f3      	b.n	80051a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dbe:	4b51      	ldr	r3, [pc, #324]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1f0      	bne.n	8004dac <HAL_RCC_OscConfig+0xe8>
 8004dca:	e000      	b.n	8004dce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d063      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004dda:	4b4a      	ldr	r3, [pc, #296]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f003 030c 	and.w	r3, r3, #12
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00b      	beq.n	8004dfe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004de6:	4b47      	ldr	r3, [pc, #284]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004dee:	2b08      	cmp	r3, #8
 8004df0:	d11c      	bne.n	8004e2c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004df2:	4b44      	ldr	r3, [pc, #272]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d116      	bne.n	8004e2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dfe:	4b41      	ldr	r3, [pc, #260]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d005      	beq.n	8004e16 <HAL_RCC_OscConfig+0x152>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d001      	beq.n	8004e16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e1c7      	b.n	80051a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e16:	4b3b      	ldr	r3, [pc, #236]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	00db      	lsls	r3, r3, #3
 8004e24:	4937      	ldr	r1, [pc, #220]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e2a:	e03a      	b.n	8004ea2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d020      	beq.n	8004e76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e34:	4b34      	ldr	r3, [pc, #208]	@ (8004f08 <HAL_RCC_OscConfig+0x244>)
 8004e36:	2201      	movs	r2, #1
 8004e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e3a:	f7fc fcc9 	bl	80017d0 <HAL_GetTick>
 8004e3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e40:	e008      	b.n	8004e54 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e42:	f7fc fcc5 	bl	80017d0 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d901      	bls.n	8004e54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e1a8      	b.n	80051a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e54:	4b2b      	ldr	r3, [pc, #172]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d0f0      	beq.n	8004e42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e60:	4b28      	ldr	r3, [pc, #160]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	00db      	lsls	r3, r3, #3
 8004e6e:	4925      	ldr	r1, [pc, #148]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	600b      	str	r3, [r1, #0]
 8004e74:	e015      	b.n	8004ea2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e76:	4b24      	ldr	r3, [pc, #144]	@ (8004f08 <HAL_RCC_OscConfig+0x244>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e7c:	f7fc fca8 	bl	80017d0 <HAL_GetTick>
 8004e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e82:	e008      	b.n	8004e96 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e84:	f7fc fca4 	bl	80017d0 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e187      	b.n	80051a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e96:	4b1b      	ldr	r3, [pc, #108]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1f0      	bne.n	8004e84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0308 	and.w	r3, r3, #8
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d036      	beq.n	8004f1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d016      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eb6:	4b15      	ldr	r3, [pc, #84]	@ (8004f0c <HAL_RCC_OscConfig+0x248>)
 8004eb8:	2201      	movs	r2, #1
 8004eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ebc:	f7fc fc88 	bl	80017d0 <HAL_GetTick>
 8004ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ec2:	e008      	b.n	8004ed6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ec4:	f7fc fc84 	bl	80017d0 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e167      	b.n	80051a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8004f04 <HAL_RCC_OscConfig+0x240>)
 8004ed8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d0f0      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x200>
 8004ee2:	e01b      	b.n	8004f1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ee4:	4b09      	ldr	r3, [pc, #36]	@ (8004f0c <HAL_RCC_OscConfig+0x248>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eea:	f7fc fc71 	bl	80017d0 <HAL_GetTick>
 8004eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ef0:	e00e      	b.n	8004f10 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ef2:	f7fc fc6d 	bl	80017d0 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d907      	bls.n	8004f10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e150      	b.n	80051a6 <HAL_RCC_OscConfig+0x4e2>
 8004f04:	40023800 	.word	0x40023800
 8004f08:	42470000 	.word	0x42470000
 8004f0c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f10:	4b88      	ldr	r3, [pc, #544]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 8004f12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1ea      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0304 	and.w	r3, r3, #4
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 8097 	beq.w	8005058 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f2e:	4b81      	ldr	r3, [pc, #516]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 8004f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10f      	bne.n	8004f5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	60bb      	str	r3, [r7, #8]
 8004f3e:	4b7d      	ldr	r3, [pc, #500]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 8004f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f42:	4a7c      	ldr	r2, [pc, #496]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 8004f44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f48:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f4a:	4b7a      	ldr	r3, [pc, #488]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f52:	60bb      	str	r3, [r7, #8]
 8004f54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f56:	2301      	movs	r3, #1
 8004f58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f5a:	4b77      	ldr	r3, [pc, #476]	@ (8005138 <HAL_RCC_OscConfig+0x474>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d118      	bne.n	8004f98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f66:	4b74      	ldr	r3, [pc, #464]	@ (8005138 <HAL_RCC_OscConfig+0x474>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a73      	ldr	r2, [pc, #460]	@ (8005138 <HAL_RCC_OscConfig+0x474>)
 8004f6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f72:	f7fc fc2d 	bl	80017d0 <HAL_GetTick>
 8004f76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f78:	e008      	b.n	8004f8c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f7a:	f7fc fc29 	bl	80017d0 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d901      	bls.n	8004f8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e10c      	b.n	80051a6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f8c:	4b6a      	ldr	r3, [pc, #424]	@ (8005138 <HAL_RCC_OscConfig+0x474>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0f0      	beq.n	8004f7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d106      	bne.n	8004fae <HAL_RCC_OscConfig+0x2ea>
 8004fa0:	4b64      	ldr	r3, [pc, #400]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 8004fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fa4:	4a63      	ldr	r2, [pc, #396]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 8004fa6:	f043 0301 	orr.w	r3, r3, #1
 8004faa:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fac:	e01c      	b.n	8004fe8 <HAL_RCC_OscConfig+0x324>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	2b05      	cmp	r3, #5
 8004fb4:	d10c      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x30c>
 8004fb6:	4b5f      	ldr	r3, [pc, #380]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 8004fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fba:	4a5e      	ldr	r2, [pc, #376]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 8004fbc:	f043 0304 	orr.w	r3, r3, #4
 8004fc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fc2:	4b5c      	ldr	r3, [pc, #368]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 8004fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc6:	4a5b      	ldr	r2, [pc, #364]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 8004fc8:	f043 0301 	orr.w	r3, r3, #1
 8004fcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fce:	e00b      	b.n	8004fe8 <HAL_RCC_OscConfig+0x324>
 8004fd0:	4b58      	ldr	r3, [pc, #352]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 8004fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fd4:	4a57      	ldr	r2, [pc, #348]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 8004fd6:	f023 0301 	bic.w	r3, r3, #1
 8004fda:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fdc:	4b55      	ldr	r3, [pc, #340]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 8004fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fe0:	4a54      	ldr	r2, [pc, #336]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 8004fe2:	f023 0304 	bic.w	r3, r3, #4
 8004fe6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d015      	beq.n	800501c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff0:	f7fc fbee 	bl	80017d0 <HAL_GetTick>
 8004ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ff6:	e00a      	b.n	800500e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ff8:	f7fc fbea 	bl	80017d0 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005006:	4293      	cmp	r3, r2
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e0cb      	b.n	80051a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800500e:	4b49      	ldr	r3, [pc, #292]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 8005010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d0ee      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x334>
 800501a:	e014      	b.n	8005046 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800501c:	f7fc fbd8 	bl	80017d0 <HAL_GetTick>
 8005020:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005022:	e00a      	b.n	800503a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005024:	f7fc fbd4 	bl	80017d0 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005032:	4293      	cmp	r3, r2
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e0b5      	b.n	80051a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800503a:	4b3e      	ldr	r3, [pc, #248]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 800503c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1ee      	bne.n	8005024 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005046:	7dfb      	ldrb	r3, [r7, #23]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d105      	bne.n	8005058 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800504c:	4b39      	ldr	r3, [pc, #228]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 800504e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005050:	4a38      	ldr	r2, [pc, #224]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 8005052:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005056:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	699b      	ldr	r3, [r3, #24]
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 80a1 	beq.w	80051a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005062:	4b34      	ldr	r3, [pc, #208]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f003 030c 	and.w	r3, r3, #12
 800506a:	2b08      	cmp	r3, #8
 800506c:	d05c      	beq.n	8005128 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	2b02      	cmp	r3, #2
 8005074:	d141      	bne.n	80050fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005076:	4b31      	ldr	r3, [pc, #196]	@ (800513c <HAL_RCC_OscConfig+0x478>)
 8005078:	2200      	movs	r2, #0
 800507a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800507c:	f7fc fba8 	bl	80017d0 <HAL_GetTick>
 8005080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005082:	e008      	b.n	8005096 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005084:	f7fc fba4 	bl	80017d0 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b02      	cmp	r3, #2
 8005090:	d901      	bls.n	8005096 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e087      	b.n	80051a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005096:	4b27      	ldr	r3, [pc, #156]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1f0      	bne.n	8005084 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	69da      	ldr	r2, [r3, #28]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	431a      	orrs	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b0:	019b      	lsls	r3, r3, #6
 80050b2:	431a      	orrs	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b8:	085b      	lsrs	r3, r3, #1
 80050ba:	3b01      	subs	r3, #1
 80050bc:	041b      	lsls	r3, r3, #16
 80050be:	431a      	orrs	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c4:	061b      	lsls	r3, r3, #24
 80050c6:	491b      	ldr	r1, [pc, #108]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050cc:	4b1b      	ldr	r3, [pc, #108]	@ (800513c <HAL_RCC_OscConfig+0x478>)
 80050ce:	2201      	movs	r2, #1
 80050d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d2:	f7fc fb7d 	bl	80017d0 <HAL_GetTick>
 80050d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050d8:	e008      	b.n	80050ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050da:	f7fc fb79 	bl	80017d0 <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d901      	bls.n	80050ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e05c      	b.n	80051a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ec:	4b11      	ldr	r3, [pc, #68]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d0f0      	beq.n	80050da <HAL_RCC_OscConfig+0x416>
 80050f8:	e054      	b.n	80051a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050fa:	4b10      	ldr	r3, [pc, #64]	@ (800513c <HAL_RCC_OscConfig+0x478>)
 80050fc:	2200      	movs	r2, #0
 80050fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005100:	f7fc fb66 	bl	80017d0 <HAL_GetTick>
 8005104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005106:	e008      	b.n	800511a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005108:	f7fc fb62 	bl	80017d0 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	2b02      	cmp	r3, #2
 8005114:	d901      	bls.n	800511a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e045      	b.n	80051a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800511a:	4b06      	ldr	r3, [pc, #24]	@ (8005134 <HAL_RCC_OscConfig+0x470>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1f0      	bne.n	8005108 <HAL_RCC_OscConfig+0x444>
 8005126:	e03d      	b.n	80051a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d107      	bne.n	8005140 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e038      	b.n	80051a6 <HAL_RCC_OscConfig+0x4e2>
 8005134:	40023800 	.word	0x40023800
 8005138:	40007000 	.word	0x40007000
 800513c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005140:	4b1b      	ldr	r3, [pc, #108]	@ (80051b0 <HAL_RCC_OscConfig+0x4ec>)
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d028      	beq.n	80051a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005158:	429a      	cmp	r2, r3
 800515a:	d121      	bne.n	80051a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005166:	429a      	cmp	r2, r3
 8005168:	d11a      	bne.n	80051a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005170:	4013      	ands	r3, r2
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005176:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005178:	4293      	cmp	r3, r2
 800517a:	d111      	bne.n	80051a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005186:	085b      	lsrs	r3, r3, #1
 8005188:	3b01      	subs	r3, #1
 800518a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800518c:	429a      	cmp	r2, r3
 800518e:	d107      	bne.n	80051a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800519a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800519c:	429a      	cmp	r2, r3
 800519e:	d001      	beq.n	80051a4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e000      	b.n	80051a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3718      	adds	r7, #24
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	40023800 	.word	0x40023800

080051b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d101      	bne.n	80051c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e0cc      	b.n	8005362 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051c8:	4b68      	ldr	r3, [pc, #416]	@ (800536c <HAL_RCC_ClockConfig+0x1b8>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0307 	and.w	r3, r3, #7
 80051d0:	683a      	ldr	r2, [r7, #0]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d90c      	bls.n	80051f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051d6:	4b65      	ldr	r3, [pc, #404]	@ (800536c <HAL_RCC_ClockConfig+0x1b8>)
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	b2d2      	uxtb	r2, r2
 80051dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051de:	4b63      	ldr	r3, [pc, #396]	@ (800536c <HAL_RCC_ClockConfig+0x1b8>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0307 	and.w	r3, r3, #7
 80051e6:	683a      	ldr	r2, [r7, #0]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d001      	beq.n	80051f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e0b8      	b.n	8005362 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d020      	beq.n	800523e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0304 	and.w	r3, r3, #4
 8005204:	2b00      	cmp	r3, #0
 8005206:	d005      	beq.n	8005214 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005208:	4b59      	ldr	r3, [pc, #356]	@ (8005370 <HAL_RCC_ClockConfig+0x1bc>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	4a58      	ldr	r2, [pc, #352]	@ (8005370 <HAL_RCC_ClockConfig+0x1bc>)
 800520e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005212:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0308 	and.w	r3, r3, #8
 800521c:	2b00      	cmp	r3, #0
 800521e:	d005      	beq.n	800522c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005220:	4b53      	ldr	r3, [pc, #332]	@ (8005370 <HAL_RCC_ClockConfig+0x1bc>)
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	4a52      	ldr	r2, [pc, #328]	@ (8005370 <HAL_RCC_ClockConfig+0x1bc>)
 8005226:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800522a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800522c:	4b50      	ldr	r3, [pc, #320]	@ (8005370 <HAL_RCC_ClockConfig+0x1bc>)
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	494d      	ldr	r1, [pc, #308]	@ (8005370 <HAL_RCC_ClockConfig+0x1bc>)
 800523a:	4313      	orrs	r3, r2
 800523c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b00      	cmp	r3, #0
 8005248:	d044      	beq.n	80052d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d107      	bne.n	8005262 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005252:	4b47      	ldr	r3, [pc, #284]	@ (8005370 <HAL_RCC_ClockConfig+0x1bc>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d119      	bne.n	8005292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e07f      	b.n	8005362 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	2b02      	cmp	r3, #2
 8005268:	d003      	beq.n	8005272 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800526e:	2b03      	cmp	r3, #3
 8005270:	d107      	bne.n	8005282 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005272:	4b3f      	ldr	r3, [pc, #252]	@ (8005370 <HAL_RCC_ClockConfig+0x1bc>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d109      	bne.n	8005292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e06f      	b.n	8005362 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005282:	4b3b      	ldr	r3, [pc, #236]	@ (8005370 <HAL_RCC_ClockConfig+0x1bc>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e067      	b.n	8005362 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005292:	4b37      	ldr	r3, [pc, #220]	@ (8005370 <HAL_RCC_ClockConfig+0x1bc>)
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f023 0203 	bic.w	r2, r3, #3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	4934      	ldr	r1, [pc, #208]	@ (8005370 <HAL_RCC_ClockConfig+0x1bc>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052a4:	f7fc fa94 	bl	80017d0 <HAL_GetTick>
 80052a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052aa:	e00a      	b.n	80052c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052ac:	f7fc fa90 	bl	80017d0 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e04f      	b.n	8005362 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052c2:	4b2b      	ldr	r3, [pc, #172]	@ (8005370 <HAL_RCC_ClockConfig+0x1bc>)
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f003 020c 	and.w	r2, r3, #12
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d1eb      	bne.n	80052ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052d4:	4b25      	ldr	r3, [pc, #148]	@ (800536c <HAL_RCC_ClockConfig+0x1b8>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0307 	and.w	r3, r3, #7
 80052dc:	683a      	ldr	r2, [r7, #0]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d20c      	bcs.n	80052fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052e2:	4b22      	ldr	r3, [pc, #136]	@ (800536c <HAL_RCC_ClockConfig+0x1b8>)
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	b2d2      	uxtb	r2, r2
 80052e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ea:	4b20      	ldr	r3, [pc, #128]	@ (800536c <HAL_RCC_ClockConfig+0x1b8>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0307 	and.w	r3, r3, #7
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d001      	beq.n	80052fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e032      	b.n	8005362 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0304 	and.w	r3, r3, #4
 8005304:	2b00      	cmp	r3, #0
 8005306:	d008      	beq.n	800531a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005308:	4b19      	ldr	r3, [pc, #100]	@ (8005370 <HAL_RCC_ClockConfig+0x1bc>)
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	4916      	ldr	r1, [pc, #88]	@ (8005370 <HAL_RCC_ClockConfig+0x1bc>)
 8005316:	4313      	orrs	r3, r2
 8005318:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0308 	and.w	r3, r3, #8
 8005322:	2b00      	cmp	r3, #0
 8005324:	d009      	beq.n	800533a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005326:	4b12      	ldr	r3, [pc, #72]	@ (8005370 <HAL_RCC_ClockConfig+0x1bc>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	490e      	ldr	r1, [pc, #56]	@ (8005370 <HAL_RCC_ClockConfig+0x1bc>)
 8005336:	4313      	orrs	r3, r2
 8005338:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800533a:	f000 f821 	bl	8005380 <HAL_RCC_GetSysClockFreq>
 800533e:	4602      	mov	r2, r0
 8005340:	4b0b      	ldr	r3, [pc, #44]	@ (8005370 <HAL_RCC_ClockConfig+0x1bc>)
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	091b      	lsrs	r3, r3, #4
 8005346:	f003 030f 	and.w	r3, r3, #15
 800534a:	490a      	ldr	r1, [pc, #40]	@ (8005374 <HAL_RCC_ClockConfig+0x1c0>)
 800534c:	5ccb      	ldrb	r3, [r1, r3]
 800534e:	fa22 f303 	lsr.w	r3, r2, r3
 8005352:	4a09      	ldr	r2, [pc, #36]	@ (8005378 <HAL_RCC_ClockConfig+0x1c4>)
 8005354:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005356:	4b09      	ldr	r3, [pc, #36]	@ (800537c <HAL_RCC_ClockConfig+0x1c8>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4618      	mov	r0, r3
 800535c:	f7fb ffd4 	bl	8001308 <HAL_InitTick>

  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	40023c00 	.word	0x40023c00
 8005370:	40023800 	.word	0x40023800
 8005374:	08010c9c 	.word	0x08010c9c
 8005378:	20000000 	.word	0x20000000
 800537c:	20000004 	.word	0x20000004

08005380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005384:	b094      	sub	sp, #80	@ 0x50
 8005386:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005388:	2300      	movs	r3, #0
 800538a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800538c:	2300      	movs	r3, #0
 800538e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005390:	2300      	movs	r3, #0
 8005392:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005394:	2300      	movs	r3, #0
 8005396:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005398:	4b79      	ldr	r3, [pc, #484]	@ (8005580 <HAL_RCC_GetSysClockFreq+0x200>)
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f003 030c 	and.w	r3, r3, #12
 80053a0:	2b08      	cmp	r3, #8
 80053a2:	d00d      	beq.n	80053c0 <HAL_RCC_GetSysClockFreq+0x40>
 80053a4:	2b08      	cmp	r3, #8
 80053a6:	f200 80e1 	bhi.w	800556c <HAL_RCC_GetSysClockFreq+0x1ec>
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d002      	beq.n	80053b4 <HAL_RCC_GetSysClockFreq+0x34>
 80053ae:	2b04      	cmp	r3, #4
 80053b0:	d003      	beq.n	80053ba <HAL_RCC_GetSysClockFreq+0x3a>
 80053b2:	e0db      	b.n	800556c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053b4:	4b73      	ldr	r3, [pc, #460]	@ (8005584 <HAL_RCC_GetSysClockFreq+0x204>)
 80053b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053b8:	e0db      	b.n	8005572 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80053ba:	4b73      	ldr	r3, [pc, #460]	@ (8005588 <HAL_RCC_GetSysClockFreq+0x208>)
 80053bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053be:	e0d8      	b.n	8005572 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053c0:	4b6f      	ldr	r3, [pc, #444]	@ (8005580 <HAL_RCC_GetSysClockFreq+0x200>)
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053c8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80053ca:	4b6d      	ldr	r3, [pc, #436]	@ (8005580 <HAL_RCC_GetSysClockFreq+0x200>)
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d063      	beq.n	800549e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053d6:	4b6a      	ldr	r3, [pc, #424]	@ (8005580 <HAL_RCC_GetSysClockFreq+0x200>)
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	099b      	lsrs	r3, r3, #6
 80053dc:	2200      	movs	r2, #0
 80053de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80053e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80053ea:	2300      	movs	r3, #0
 80053ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80053ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80053f2:	4622      	mov	r2, r4
 80053f4:	462b      	mov	r3, r5
 80053f6:	f04f 0000 	mov.w	r0, #0
 80053fa:	f04f 0100 	mov.w	r1, #0
 80053fe:	0159      	lsls	r1, r3, #5
 8005400:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005404:	0150      	lsls	r0, r2, #5
 8005406:	4602      	mov	r2, r0
 8005408:	460b      	mov	r3, r1
 800540a:	4621      	mov	r1, r4
 800540c:	1a51      	subs	r1, r2, r1
 800540e:	6139      	str	r1, [r7, #16]
 8005410:	4629      	mov	r1, r5
 8005412:	eb63 0301 	sbc.w	r3, r3, r1
 8005416:	617b      	str	r3, [r7, #20]
 8005418:	f04f 0200 	mov.w	r2, #0
 800541c:	f04f 0300 	mov.w	r3, #0
 8005420:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005424:	4659      	mov	r1, fp
 8005426:	018b      	lsls	r3, r1, #6
 8005428:	4651      	mov	r1, sl
 800542a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800542e:	4651      	mov	r1, sl
 8005430:	018a      	lsls	r2, r1, #6
 8005432:	4651      	mov	r1, sl
 8005434:	ebb2 0801 	subs.w	r8, r2, r1
 8005438:	4659      	mov	r1, fp
 800543a:	eb63 0901 	sbc.w	r9, r3, r1
 800543e:	f04f 0200 	mov.w	r2, #0
 8005442:	f04f 0300 	mov.w	r3, #0
 8005446:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800544a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800544e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005452:	4690      	mov	r8, r2
 8005454:	4699      	mov	r9, r3
 8005456:	4623      	mov	r3, r4
 8005458:	eb18 0303 	adds.w	r3, r8, r3
 800545c:	60bb      	str	r3, [r7, #8]
 800545e:	462b      	mov	r3, r5
 8005460:	eb49 0303 	adc.w	r3, r9, r3
 8005464:	60fb      	str	r3, [r7, #12]
 8005466:	f04f 0200 	mov.w	r2, #0
 800546a:	f04f 0300 	mov.w	r3, #0
 800546e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005472:	4629      	mov	r1, r5
 8005474:	024b      	lsls	r3, r1, #9
 8005476:	4621      	mov	r1, r4
 8005478:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800547c:	4621      	mov	r1, r4
 800547e:	024a      	lsls	r2, r1, #9
 8005480:	4610      	mov	r0, r2
 8005482:	4619      	mov	r1, r3
 8005484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005486:	2200      	movs	r2, #0
 8005488:	62bb      	str	r3, [r7, #40]	@ 0x28
 800548a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800548c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005490:	f7fa feee 	bl	8000270 <__aeabi_uldivmod>
 8005494:	4602      	mov	r2, r0
 8005496:	460b      	mov	r3, r1
 8005498:	4613      	mov	r3, r2
 800549a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800549c:	e058      	b.n	8005550 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800549e:	4b38      	ldr	r3, [pc, #224]	@ (8005580 <HAL_RCC_GetSysClockFreq+0x200>)
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	099b      	lsrs	r3, r3, #6
 80054a4:	2200      	movs	r2, #0
 80054a6:	4618      	mov	r0, r3
 80054a8:	4611      	mov	r1, r2
 80054aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80054ae:	623b      	str	r3, [r7, #32]
 80054b0:	2300      	movs	r3, #0
 80054b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80054b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80054b8:	4642      	mov	r2, r8
 80054ba:	464b      	mov	r3, r9
 80054bc:	f04f 0000 	mov.w	r0, #0
 80054c0:	f04f 0100 	mov.w	r1, #0
 80054c4:	0159      	lsls	r1, r3, #5
 80054c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054ca:	0150      	lsls	r0, r2, #5
 80054cc:	4602      	mov	r2, r0
 80054ce:	460b      	mov	r3, r1
 80054d0:	4641      	mov	r1, r8
 80054d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80054d6:	4649      	mov	r1, r9
 80054d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80054dc:	f04f 0200 	mov.w	r2, #0
 80054e0:	f04f 0300 	mov.w	r3, #0
 80054e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80054e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80054ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80054f0:	ebb2 040a 	subs.w	r4, r2, sl
 80054f4:	eb63 050b 	sbc.w	r5, r3, fp
 80054f8:	f04f 0200 	mov.w	r2, #0
 80054fc:	f04f 0300 	mov.w	r3, #0
 8005500:	00eb      	lsls	r3, r5, #3
 8005502:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005506:	00e2      	lsls	r2, r4, #3
 8005508:	4614      	mov	r4, r2
 800550a:	461d      	mov	r5, r3
 800550c:	4643      	mov	r3, r8
 800550e:	18e3      	adds	r3, r4, r3
 8005510:	603b      	str	r3, [r7, #0]
 8005512:	464b      	mov	r3, r9
 8005514:	eb45 0303 	adc.w	r3, r5, r3
 8005518:	607b      	str	r3, [r7, #4]
 800551a:	f04f 0200 	mov.w	r2, #0
 800551e:	f04f 0300 	mov.w	r3, #0
 8005522:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005526:	4629      	mov	r1, r5
 8005528:	028b      	lsls	r3, r1, #10
 800552a:	4621      	mov	r1, r4
 800552c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005530:	4621      	mov	r1, r4
 8005532:	028a      	lsls	r2, r1, #10
 8005534:	4610      	mov	r0, r2
 8005536:	4619      	mov	r1, r3
 8005538:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800553a:	2200      	movs	r2, #0
 800553c:	61bb      	str	r3, [r7, #24]
 800553e:	61fa      	str	r2, [r7, #28]
 8005540:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005544:	f7fa fe94 	bl	8000270 <__aeabi_uldivmod>
 8005548:	4602      	mov	r2, r0
 800554a:	460b      	mov	r3, r1
 800554c:	4613      	mov	r3, r2
 800554e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005550:	4b0b      	ldr	r3, [pc, #44]	@ (8005580 <HAL_RCC_GetSysClockFreq+0x200>)
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	0c1b      	lsrs	r3, r3, #16
 8005556:	f003 0303 	and.w	r3, r3, #3
 800555a:	3301      	adds	r3, #1
 800555c:	005b      	lsls	r3, r3, #1
 800555e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005560:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005562:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005564:	fbb2 f3f3 	udiv	r3, r2, r3
 8005568:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800556a:	e002      	b.n	8005572 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800556c:	4b05      	ldr	r3, [pc, #20]	@ (8005584 <HAL_RCC_GetSysClockFreq+0x204>)
 800556e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005570:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005572:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005574:	4618      	mov	r0, r3
 8005576:	3750      	adds	r7, #80	@ 0x50
 8005578:	46bd      	mov	sp, r7
 800557a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800557e:	bf00      	nop
 8005580:	40023800 	.word	0x40023800
 8005584:	00f42400 	.word	0x00f42400
 8005588:	007a1200 	.word	0x007a1200

0800558c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005590:	4b03      	ldr	r3, [pc, #12]	@ (80055a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005592:	681b      	ldr	r3, [r3, #0]
}
 8005594:	4618      	mov	r0, r3
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	20000000 	.word	0x20000000

080055a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80055a8:	f7ff fff0 	bl	800558c <HAL_RCC_GetHCLKFreq>
 80055ac:	4602      	mov	r2, r0
 80055ae:	4b05      	ldr	r3, [pc, #20]	@ (80055c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	0a9b      	lsrs	r3, r3, #10
 80055b4:	f003 0307 	and.w	r3, r3, #7
 80055b8:	4903      	ldr	r1, [pc, #12]	@ (80055c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055ba:	5ccb      	ldrb	r3, [r1, r3]
 80055bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	40023800 	.word	0x40023800
 80055c8:	08010cac 	.word	0x08010cac

080055cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80055d0:	f7ff ffdc 	bl	800558c <HAL_RCC_GetHCLKFreq>
 80055d4:	4602      	mov	r2, r0
 80055d6:	4b05      	ldr	r3, [pc, #20]	@ (80055ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	0b5b      	lsrs	r3, r3, #13
 80055dc:	f003 0307 	and.w	r3, r3, #7
 80055e0:	4903      	ldr	r1, [pc, #12]	@ (80055f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055e2:	5ccb      	ldrb	r3, [r1, r3]
 80055e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	40023800 	.word	0x40023800
 80055f0:	08010cac 	.word	0x08010cac

080055f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	220f      	movs	r2, #15
 8005602:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005604:	4b12      	ldr	r3, [pc, #72]	@ (8005650 <HAL_RCC_GetClockConfig+0x5c>)
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f003 0203 	and.w	r2, r3, #3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005610:	4b0f      	ldr	r3, [pc, #60]	@ (8005650 <HAL_RCC_GetClockConfig+0x5c>)
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800561c:	4b0c      	ldr	r3, [pc, #48]	@ (8005650 <HAL_RCC_GetClockConfig+0x5c>)
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005628:	4b09      	ldr	r3, [pc, #36]	@ (8005650 <HAL_RCC_GetClockConfig+0x5c>)
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	08db      	lsrs	r3, r3, #3
 800562e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005636:	4b07      	ldr	r3, [pc, #28]	@ (8005654 <HAL_RCC_GetClockConfig+0x60>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0207 	and.w	r2, r3, #7
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	601a      	str	r2, [r3, #0]
}
 8005642:	bf00      	nop
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	40023800 	.word	0x40023800
 8005654:	40023c00 	.word	0x40023c00

08005658 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005660:	2300      	movs	r3, #0
 8005662:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005664:	2300      	movs	r3, #0
 8005666:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0301 	and.w	r3, r3, #1
 8005670:	2b00      	cmp	r3, #0
 8005672:	d105      	bne.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800567c:	2b00      	cmp	r3, #0
 800567e:	d035      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005680:	4b62      	ldr	r3, [pc, #392]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005682:	2200      	movs	r2, #0
 8005684:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005686:	f7fc f8a3 	bl	80017d0 <HAL_GetTick>
 800568a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800568c:	e008      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800568e:	f7fc f89f 	bl	80017d0 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	2b02      	cmp	r3, #2
 800569a:	d901      	bls.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e0b0      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056a0:	4b5b      	ldr	r3, [pc, #364]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1f0      	bne.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	019a      	lsls	r2, r3, #6
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	071b      	lsls	r3, r3, #28
 80056b8:	4955      	ldr	r1, [pc, #340]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80056c0:	4b52      	ldr	r3, [pc, #328]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80056c2:	2201      	movs	r2, #1
 80056c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056c6:	f7fc f883 	bl	80017d0 <HAL_GetTick>
 80056ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056cc:	e008      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80056ce:	f7fc f87f 	bl	80017d0 <HAL_GetTick>
 80056d2:	4602      	mov	r2, r0
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d901      	bls.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e090      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056e0:	4b4b      	ldr	r3, [pc, #300]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d0f0      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0302 	and.w	r3, r3, #2
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f000 8083 	beq.w	8005800 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80056fa:	2300      	movs	r3, #0
 80056fc:	60fb      	str	r3, [r7, #12]
 80056fe:	4b44      	ldr	r3, [pc, #272]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005702:	4a43      	ldr	r2, [pc, #268]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005704:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005708:	6413      	str	r3, [r2, #64]	@ 0x40
 800570a:	4b41      	ldr	r3, [pc, #260]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800570c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800570e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005712:	60fb      	str	r3, [r7, #12]
 8005714:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005716:	4b3f      	ldr	r3, [pc, #252]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a3e      	ldr	r2, [pc, #248]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800571c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005720:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005722:	f7fc f855 	bl	80017d0 <HAL_GetTick>
 8005726:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005728:	e008      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800572a:	f7fc f851 	bl	80017d0 <HAL_GetTick>
 800572e:	4602      	mov	r2, r0
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	2b02      	cmp	r3, #2
 8005736:	d901      	bls.n	800573c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e062      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800573c:	4b35      	ldr	r3, [pc, #212]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005744:	2b00      	cmp	r3, #0
 8005746:	d0f0      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005748:	4b31      	ldr	r3, [pc, #196]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800574a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800574c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005750:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d02f      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	429a      	cmp	r2, r3
 8005764:	d028      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005766:	4b2a      	ldr	r3, [pc, #168]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800576a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800576e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005770:	4b29      	ldr	r3, [pc, #164]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005772:	2201      	movs	r2, #1
 8005774:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005776:	4b28      	ldr	r3, [pc, #160]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005778:	2200      	movs	r2, #0
 800577a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800577c:	4a24      	ldr	r2, [pc, #144]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005782:	4b23      	ldr	r3, [pc, #140]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b01      	cmp	r3, #1
 800578c:	d114      	bne.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800578e:	f7fc f81f 	bl	80017d0 <HAL_GetTick>
 8005792:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005794:	e00a      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005796:	f7fc f81b 	bl	80017d0 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d901      	bls.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e02a      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057ac:	4b18      	ldr	r3, [pc, #96]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d0ee      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057c4:	d10d      	bne.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80057c6:	4b12      	ldr	r3, [pc, #72]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80057d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057da:	490d      	ldr	r1, [pc, #52]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	608b      	str	r3, [r1, #8]
 80057e0:	e005      	b.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x196>
 80057e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057e8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80057ec:	6093      	str	r3, [r2, #8]
 80057ee:	4b08      	ldr	r3, [pc, #32]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057f0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057fa:	4905      	ldr	r1, [pc, #20]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3718      	adds	r7, #24
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	42470068 	.word	0x42470068
 8005810:	40023800 	.word	0x40023800
 8005814:	40007000 	.word	0x40007000
 8005818:	42470e40 	.word	0x42470e40

0800581c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800581c:	b480      	push	{r7}
 800581e:	b087      	sub	sp, #28
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005824:	2300      	movs	r3, #0
 8005826:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005828:	2300      	movs	r3, #0
 800582a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800582c:	2300      	movs	r3, #0
 800582e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005830:	2300      	movs	r3, #0
 8005832:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d13f      	bne.n	80058ba <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800583a:	4b24      	ldr	r3, [pc, #144]	@ (80058cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005842:	60fb      	str	r3, [r7, #12]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d006      	beq.n	8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005850:	d12f      	bne.n	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005852:	4b1f      	ldr	r3, [pc, #124]	@ (80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005854:	617b      	str	r3, [r7, #20]
          break;
 8005856:	e02f      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005858:	4b1c      	ldr	r3, [pc, #112]	@ (80058cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005860:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005864:	d108      	bne.n	8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005866:	4b19      	ldr	r3, [pc, #100]	@ (80058cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800586e:	4a19      	ldr	r2, [pc, #100]	@ (80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005870:	fbb2 f3f3 	udiv	r3, r2, r3
 8005874:	613b      	str	r3, [r7, #16]
 8005876:	e007      	b.n	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005878:	4b14      	ldr	r3, [pc, #80]	@ (80058cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005880:	4a15      	ldr	r2, [pc, #84]	@ (80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005882:	fbb2 f3f3 	udiv	r3, r2, r3
 8005886:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005888:	4b10      	ldr	r3, [pc, #64]	@ (80058cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800588a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800588e:	099b      	lsrs	r3, r3, #6
 8005890:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	fb02 f303 	mul.w	r3, r2, r3
 800589a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800589c:	4b0b      	ldr	r3, [pc, #44]	@ (80058cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800589e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058a2:	0f1b      	lsrs	r3, r3, #28
 80058a4:	f003 0307 	and.w	r3, r3, #7
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ae:	617b      	str	r3, [r7, #20]
          break;
 80058b0:	e002      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80058b2:	2300      	movs	r3, #0
 80058b4:	617b      	str	r3, [r7, #20]
          break;
 80058b6:	bf00      	nop
        }
      }
      break;
 80058b8:	e000      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80058ba:	bf00      	nop
    }
  }
  return frequency;
 80058bc:	697b      	ldr	r3, [r7, #20]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	371c      	adds	r7, #28
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	40023800 	.word	0x40023800
 80058d0:	00bb8000 	.word	0x00bb8000
 80058d4:	007a1200 	.word	0x007a1200
 80058d8:	00f42400 	.word	0x00f42400

080058dc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d101      	bne.n	80058f2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e073      	b.n	80059da <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	7f5b      	ldrb	r3, [r3, #29]
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d105      	bne.n	8005908 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f7fb fc2a 	bl	800115c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2202      	movs	r2, #2
 800590c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f003 0310 	and.w	r3, r3, #16
 8005918:	2b10      	cmp	r3, #16
 800591a:	d055      	beq.n	80059c8 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	22ca      	movs	r2, #202	@ 0xca
 8005922:	625a      	str	r2, [r3, #36]	@ 0x24
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2253      	movs	r2, #83	@ 0x53
 800592a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f99d 	bl	8005c6c <RTC_EnterInitMode>
 8005932:	4603      	mov	r3, r0
 8005934:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005936:	7bfb      	ldrb	r3, [r7, #15]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d12c      	bne.n	8005996 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	6812      	ldr	r2, [r2, #0]
 8005946:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800594a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800594e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6899      	ldr	r1, [r3, #8]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	431a      	orrs	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	431a      	orrs	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	430a      	orrs	r2, r1
 800596c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	68d2      	ldr	r2, [r2, #12]
 8005976:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6919      	ldr	r1, [r3, #16]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	041a      	lsls	r2, r3, #16
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	430a      	orrs	r2, r1
 800598a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 f9a4 	bl	8005cda <RTC_ExitInitMode>
 8005992:	4603      	mov	r3, r0
 8005994:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005996:	7bfb      	ldrb	r3, [r7, #15]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d110      	bne.n	80059be <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80059aa:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	699a      	ldr	r2, [r3, #24]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	430a      	orrs	r2, r1
 80059bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	22ff      	movs	r2, #255	@ 0xff
 80059c4:	625a      	str	r2, [r3, #36]	@ 0x24
 80059c6:	e001      	b.n	80059cc <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80059c8:	2300      	movs	r3, #0
 80059ca:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80059cc:	7bfb      	ldrb	r3, [r7, #15]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d102      	bne.n	80059d8 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2201      	movs	r2, #1
 80059d6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80059d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80059e2:	b590      	push	{r4, r7, lr}
 80059e4:	b087      	sub	sp, #28
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	60f8      	str	r0, [r7, #12]
 80059ea:	60b9      	str	r1, [r7, #8]
 80059ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80059ee:	2300      	movs	r3, #0
 80059f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	7f1b      	ldrb	r3, [r3, #28]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d101      	bne.n	80059fe <HAL_RTC_SetTime+0x1c>
 80059fa:	2302      	movs	r3, #2
 80059fc:	e087      	b.n	8005b0e <HAL_RTC_SetTime+0x12c>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2201      	movs	r2, #1
 8005a02:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2202      	movs	r2, #2
 8005a08:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d126      	bne.n	8005a5e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d102      	bne.n	8005a24 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	2200      	movs	r2, #0
 8005a22:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f000 f97b 	bl	8005d24 <RTC_ByteToBcd2>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	785b      	ldrb	r3, [r3, #1]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 f974 	bl	8005d24 <RTC_ByteToBcd2>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005a40:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	789b      	ldrb	r3, [r3, #2]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f000 f96c 	bl	8005d24 <RTC_ByteToBcd2>
 8005a4c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005a4e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	78db      	ldrb	r3, [r3, #3]
 8005a56:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	617b      	str	r3, [r7, #20]
 8005a5c:	e018      	b.n	8005a90 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d102      	bne.n	8005a72 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	785b      	ldrb	r3, [r3, #1]
 8005a7c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005a7e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005a84:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	78db      	ldrb	r3, [r3, #3]
 8005a8a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	22ca      	movs	r2, #202	@ 0xca
 8005a96:	625a      	str	r2, [r3, #36]	@ 0x24
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2253      	movs	r2, #83	@ 0x53
 8005a9e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f000 f8e3 	bl	8005c6c <RTC_EnterInitMode>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005aaa:	7cfb      	ldrb	r3, [r7, #19]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d120      	bne.n	8005af2 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005aba:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005abe:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	689a      	ldr	r2, [r3, #8]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005ace:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	6899      	ldr	r1, [r3, #8]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	68da      	ldr	r2, [r3, #12]
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	431a      	orrs	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	430a      	orrs	r2, r1
 8005ae6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f000 f8f6 	bl	8005cda <RTC_ExitInitMode>
 8005aee:	4603      	mov	r3, r0
 8005af0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005af2:	7cfb      	ldrb	r3, [r7, #19]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d102      	bne.n	8005afe <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2201      	movs	r2, #1
 8005afc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	22ff      	movs	r2, #255	@ 0xff
 8005b04:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	771a      	strb	r2, [r3, #28]

  return status;
 8005b0c:	7cfb      	ldrb	r3, [r7, #19]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	371c      	adds	r7, #28
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd90      	pop	{r4, r7, pc}

08005b16 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005b16:	b590      	push	{r4, r7, lr}
 8005b18:	b087      	sub	sp, #28
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	60f8      	str	r0, [r7, #12]
 8005b1e:	60b9      	str	r1, [r7, #8]
 8005b20:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005b22:	2300      	movs	r3, #0
 8005b24:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	7f1b      	ldrb	r3, [r3, #28]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d101      	bne.n	8005b32 <HAL_RTC_SetDate+0x1c>
 8005b2e:	2302      	movs	r3, #2
 8005b30:	e071      	b.n	8005c16 <HAL_RTC_SetDate+0x100>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2201      	movs	r2, #1
 8005b36:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d10e      	bne.n	8005b62 <HAL_RTC_SetDate+0x4c>
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	785b      	ldrb	r3, [r3, #1]
 8005b48:	f003 0310 	and.w	r3, r3, #16
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d008      	beq.n	8005b62 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	785b      	ldrb	r3, [r3, #1]
 8005b54:	f023 0310 	bic.w	r3, r3, #16
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	330a      	adds	r3, #10
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d11c      	bne.n	8005ba2 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	78db      	ldrb	r3, [r3, #3]
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f000 f8d9 	bl	8005d24 <RTC_ByteToBcd2>
 8005b72:	4603      	mov	r3, r0
 8005b74:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	785b      	ldrb	r3, [r3, #1]
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f000 f8d2 	bl	8005d24 <RTC_ByteToBcd2>
 8005b80:	4603      	mov	r3, r0
 8005b82:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005b84:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	789b      	ldrb	r3, [r3, #2]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f000 f8ca 	bl	8005d24 <RTC_ByteToBcd2>
 8005b90:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005b92:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	617b      	str	r3, [r7, #20]
 8005ba0:	e00e      	b.n	8005bc0 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	78db      	ldrb	r3, [r3, #3]
 8005ba6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	785b      	ldrb	r3, [r3, #1]
 8005bac:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005bae:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005bb4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	22ca      	movs	r2, #202	@ 0xca
 8005bc6:	625a      	str	r2, [r3, #36]	@ 0x24
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2253      	movs	r2, #83	@ 0x53
 8005bce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 f84b 	bl	8005c6c <RTC_EnterInitMode>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005bda:	7cfb      	ldrb	r3, [r7, #19]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10c      	bne.n	8005bfa <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005bea:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005bee:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f000 f872 	bl	8005cda <RTC_ExitInitMode>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005bfa:	7cfb      	ldrb	r3, [r7, #19]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d102      	bne.n	8005c06 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2201      	movs	r2, #1
 8005c04:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	22ff      	movs	r2, #255	@ 0xff
 8005c0c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	771a      	strb	r2, [r3, #28]

  return status;
 8005c14:	7cfb      	ldrb	r3, [r7, #19]
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	371c      	adds	r7, #28
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd90      	pop	{r4, r7, pc}
	...

08005c20 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a0d      	ldr	r2, [pc, #52]	@ (8005c68 <HAL_RTC_WaitForSynchro+0x48>)
 8005c32:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c34:	f7fb fdcc 	bl	80017d0 <HAL_GetTick>
 8005c38:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005c3a:	e009      	b.n	8005c50 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c3c:	f7fb fdc8 	bl	80017d0 <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005c4a:	d901      	bls.n	8005c50 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e007      	b.n	8005c60 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	f003 0320 	and.w	r3, r3, #32
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d0ee      	beq.n	8005c3c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3710      	adds	r7, #16
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	00017f5f 	.word	0x00017f5f

08005c6c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c74:	2300      	movs	r3, #0
 8005c76:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d122      	bne.n	8005cd0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68da      	ldr	r2, [r3, #12]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005c98:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c9a:	f7fb fd99 	bl	80017d0 <HAL_GetTick>
 8005c9e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005ca0:	e00c      	b.n	8005cbc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ca2:	f7fb fd95 	bl	80017d0 <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005cb0:	d904      	bls.n	8005cbc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2204      	movs	r2, #4
 8005cb6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d102      	bne.n	8005cd0 <RTC_EnterInitMode+0x64>
 8005cca:	7bfb      	ldrb	r3, [r7, #15]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d1e8      	bne.n	8005ca2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b084      	sub	sp, #16
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68da      	ldr	r2, [r3, #12]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005cf4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f003 0320 	and.w	r3, r3, #32
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d10a      	bne.n	8005d1a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f7ff ff8b 	bl	8005c20 <HAL_RTC_WaitForSynchro>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d004      	beq.n	8005d1a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2204      	movs	r2, #4
 8005d14:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005d32:	e005      	b.n	8005d40 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	3301      	adds	r3, #1
 8005d38:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8005d3a:	79fb      	ldrb	r3, [r7, #7]
 8005d3c:	3b0a      	subs	r3, #10
 8005d3e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005d40:	79fb      	ldrb	r3, [r7, #7]
 8005d42:	2b09      	cmp	r3, #9
 8005d44:	d8f6      	bhi.n	8005d34 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	011b      	lsls	r3, r3, #4
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	79fb      	ldrb	r3, [r7, #7]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	b2db      	uxtb	r3, r3
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3714      	adds	r7, #20
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d101      	bne.n	8005d72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e07b      	b.n	8005e6a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d108      	bne.n	8005d8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d82:	d009      	beq.n	8005d98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	61da      	str	r2, [r3, #28]
 8005d8a:	e005      	b.n	8005d98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d106      	bne.n	8005db8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f7fb fa34 	bl	8001220 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2202      	movs	r2, #2
 8005dbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005dce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005de0:	431a      	orrs	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005dea:	431a      	orrs	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	f003 0302 	and.w	r3, r3, #2
 8005df4:	431a      	orrs	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	f003 0301 	and.w	r3, r3, #1
 8005dfe:	431a      	orrs	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e08:	431a      	orrs	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e12:	431a      	orrs	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a1b      	ldr	r3, [r3, #32]
 8005e18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e1c:	ea42 0103 	orr.w	r1, r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e24:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	0c1b      	lsrs	r3, r3, #16
 8005e36:	f003 0104 	and.w	r1, r3, #4
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e3e:	f003 0210 	and.w	r2, r3, #16
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	430a      	orrs	r2, r1
 8005e48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	69da      	ldr	r2, [r3, #28]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3708      	adds	r7, #8
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b088      	sub	sp, #32
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	60f8      	str	r0, [r7, #12]
 8005e7a:	60b9      	str	r1, [r7, #8]
 8005e7c:	603b      	str	r3, [r7, #0]
 8005e7e:	4613      	mov	r3, r2
 8005e80:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e82:	f7fb fca5 	bl	80017d0 <HAL_GetTick>
 8005e86:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005e88:	88fb      	ldrh	r3, [r7, #6]
 8005e8a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d001      	beq.n	8005e9c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005e98:	2302      	movs	r3, #2
 8005e9a:	e12a      	b.n	80060f2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d002      	beq.n	8005ea8 <HAL_SPI_Transmit+0x36>
 8005ea2:	88fb      	ldrh	r3, [r7, #6]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d101      	bne.n	8005eac <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e122      	b.n	80060f2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d101      	bne.n	8005eba <HAL_SPI_Transmit+0x48>
 8005eb6:	2302      	movs	r3, #2
 8005eb8:	e11b      	b.n	80060f2 <HAL_SPI_Transmit+0x280>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2203      	movs	r2, #3
 8005ec6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	88fa      	ldrh	r2, [r7, #6]
 8005eda:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	88fa      	ldrh	r2, [r7, #6]
 8005ee0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f08:	d10f      	bne.n	8005f2a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f34:	2b40      	cmp	r3, #64	@ 0x40
 8005f36:	d007      	beq.n	8005f48 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f50:	d152      	bne.n	8005ff8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d002      	beq.n	8005f60 <HAL_SPI_Transmit+0xee>
 8005f5a:	8b7b      	ldrh	r3, [r7, #26]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d145      	bne.n	8005fec <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f64:	881a      	ldrh	r2, [r3, #0]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f70:	1c9a      	adds	r2, r3, #2
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005f84:	e032      	b.n	8005fec <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f003 0302 	and.w	r3, r3, #2
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d112      	bne.n	8005fba <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f98:	881a      	ldrh	r2, [r3, #0]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fa4:	1c9a      	adds	r2, r3, #2
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005fb8:	e018      	b.n	8005fec <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fba:	f7fb fc09 	bl	80017d0 <HAL_GetTick>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	683a      	ldr	r2, [r7, #0]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d803      	bhi.n	8005fd2 <HAL_SPI_Transmit+0x160>
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd0:	d102      	bne.n	8005fd8 <HAL_SPI_Transmit+0x166>
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d109      	bne.n	8005fec <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e082      	b.n	80060f2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1c7      	bne.n	8005f86 <HAL_SPI_Transmit+0x114>
 8005ff6:	e053      	b.n	80060a0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d002      	beq.n	8006006 <HAL_SPI_Transmit+0x194>
 8006000:	8b7b      	ldrh	r3, [r7, #26]
 8006002:	2b01      	cmp	r3, #1
 8006004:	d147      	bne.n	8006096 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	330c      	adds	r3, #12
 8006010:	7812      	ldrb	r2, [r2, #0]
 8006012:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006018:	1c5a      	adds	r2, r3, #1
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006022:	b29b      	uxth	r3, r3
 8006024:	3b01      	subs	r3, #1
 8006026:	b29a      	uxth	r2, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800602c:	e033      	b.n	8006096 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f003 0302 	and.w	r3, r3, #2
 8006038:	2b02      	cmp	r3, #2
 800603a:	d113      	bne.n	8006064 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	330c      	adds	r3, #12
 8006046:	7812      	ldrb	r2, [r2, #0]
 8006048:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800604e:	1c5a      	adds	r2, r3, #1
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006058:	b29b      	uxth	r3, r3
 800605a:	3b01      	subs	r3, #1
 800605c:	b29a      	uxth	r2, r3
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006062:	e018      	b.n	8006096 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006064:	f7fb fbb4 	bl	80017d0 <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	683a      	ldr	r2, [r7, #0]
 8006070:	429a      	cmp	r2, r3
 8006072:	d803      	bhi.n	800607c <HAL_SPI_Transmit+0x20a>
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607a:	d102      	bne.n	8006082 <HAL_SPI_Transmit+0x210>
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d109      	bne.n	8006096 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e02d      	b.n	80060f2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800609a:	b29b      	uxth	r3, r3
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1c6      	bne.n	800602e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060a0:	69fa      	ldr	r2, [r7, #28]
 80060a2:	6839      	ldr	r1, [r7, #0]
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f000 fa59 	bl	800655c <SPI_EndRxTxTransaction>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d002      	beq.n	80060b6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2220      	movs	r2, #32
 80060b4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d10a      	bne.n	80060d4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060be:	2300      	movs	r3, #0
 80060c0:	617b      	str	r3, [r7, #20]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	617b      	str	r3, [r7, #20]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	617b      	str	r3, [r7, #20]
 80060d2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d001      	beq.n	80060f0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e000      	b.n	80060f2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80060f0:	2300      	movs	r3, #0
  }
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3720      	adds	r7, #32
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b08a      	sub	sp, #40	@ 0x28
 80060fe:	af00      	add	r7, sp, #0
 8006100:	60f8      	str	r0, [r7, #12]
 8006102:	60b9      	str	r1, [r7, #8]
 8006104:	607a      	str	r2, [r7, #4]
 8006106:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006108:	2301      	movs	r3, #1
 800610a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800610c:	f7fb fb60 	bl	80017d0 <HAL_GetTick>
 8006110:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006118:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006120:	887b      	ldrh	r3, [r7, #2]
 8006122:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006124:	7ffb      	ldrb	r3, [r7, #31]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d00c      	beq.n	8006144 <HAL_SPI_TransmitReceive+0x4a>
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006130:	d106      	bne.n	8006140 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d102      	bne.n	8006140 <HAL_SPI_TransmitReceive+0x46>
 800613a:	7ffb      	ldrb	r3, [r7, #31]
 800613c:	2b04      	cmp	r3, #4
 800613e:	d001      	beq.n	8006144 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8006140:	2302      	movs	r3, #2
 8006142:	e17f      	b.n	8006444 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d005      	beq.n	8006156 <HAL_SPI_TransmitReceive+0x5c>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d002      	beq.n	8006156 <HAL_SPI_TransmitReceive+0x5c>
 8006150:	887b      	ldrh	r3, [r7, #2]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e174      	b.n	8006444 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006160:	2b01      	cmp	r3, #1
 8006162:	d101      	bne.n	8006168 <HAL_SPI_TransmitReceive+0x6e>
 8006164:	2302      	movs	r3, #2
 8006166:	e16d      	b.n	8006444 <HAL_SPI_TransmitReceive+0x34a>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006176:	b2db      	uxtb	r3, r3
 8006178:	2b04      	cmp	r3, #4
 800617a:	d003      	beq.n	8006184 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2205      	movs	r2, #5
 8006180:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	887a      	ldrh	r2, [r7, #2]
 8006194:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	887a      	ldrh	r2, [r7, #2]
 800619a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	887a      	ldrh	r2, [r7, #2]
 80061a6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	887a      	ldrh	r2, [r7, #2]
 80061ac:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061c4:	2b40      	cmp	r3, #64	@ 0x40
 80061c6:	d007      	beq.n	80061d8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80061d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061e0:	d17e      	bne.n	80062e0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d002      	beq.n	80061f0 <HAL_SPI_TransmitReceive+0xf6>
 80061ea:	8afb      	ldrh	r3, [r7, #22]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d16c      	bne.n	80062ca <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061f4:	881a      	ldrh	r2, [r3, #0]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006200:	1c9a      	adds	r2, r3, #2
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800620a:	b29b      	uxth	r3, r3
 800620c:	3b01      	subs	r3, #1
 800620e:	b29a      	uxth	r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006214:	e059      	b.n	80062ca <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f003 0302 	and.w	r3, r3, #2
 8006220:	2b02      	cmp	r3, #2
 8006222:	d11b      	bne.n	800625c <HAL_SPI_TransmitReceive+0x162>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006228:	b29b      	uxth	r3, r3
 800622a:	2b00      	cmp	r3, #0
 800622c:	d016      	beq.n	800625c <HAL_SPI_TransmitReceive+0x162>
 800622e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006230:	2b01      	cmp	r3, #1
 8006232:	d113      	bne.n	800625c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006238:	881a      	ldrh	r2, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006244:	1c9a      	adds	r2, r3, #2
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800624e:	b29b      	uxth	r3, r3
 8006250:	3b01      	subs	r3, #1
 8006252:	b29a      	uxth	r2, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006258:	2300      	movs	r3, #0
 800625a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f003 0301 	and.w	r3, r3, #1
 8006266:	2b01      	cmp	r3, #1
 8006268:	d119      	bne.n	800629e <HAL_SPI_TransmitReceive+0x1a4>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800626e:	b29b      	uxth	r3, r3
 8006270:	2b00      	cmp	r3, #0
 8006272:	d014      	beq.n	800629e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68da      	ldr	r2, [r3, #12]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800627e:	b292      	uxth	r2, r2
 8006280:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006286:	1c9a      	adds	r2, r3, #2
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006290:	b29b      	uxth	r3, r3
 8006292:	3b01      	subs	r3, #1
 8006294:	b29a      	uxth	r2, r3
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800629a:	2301      	movs	r3, #1
 800629c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800629e:	f7fb fa97 	bl	80017d0 <HAL_GetTick>
 80062a2:	4602      	mov	r2, r0
 80062a4:	6a3b      	ldr	r3, [r7, #32]
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d80d      	bhi.n	80062ca <HAL_SPI_TransmitReceive+0x1d0>
 80062ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b4:	d009      	beq.n	80062ca <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e0bc      	b.n	8006444 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1a0      	bne.n	8006216 <HAL_SPI_TransmitReceive+0x11c>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062d8:	b29b      	uxth	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d19b      	bne.n	8006216 <HAL_SPI_TransmitReceive+0x11c>
 80062de:	e082      	b.n	80063e6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d002      	beq.n	80062ee <HAL_SPI_TransmitReceive+0x1f4>
 80062e8:	8afb      	ldrh	r3, [r7, #22]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d171      	bne.n	80063d2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	330c      	adds	r3, #12
 80062f8:	7812      	ldrb	r2, [r2, #0]
 80062fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006300:	1c5a      	adds	r2, r3, #1
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800630a:	b29b      	uxth	r3, r3
 800630c:	3b01      	subs	r3, #1
 800630e:	b29a      	uxth	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006314:	e05d      	b.n	80063d2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	f003 0302 	and.w	r3, r3, #2
 8006320:	2b02      	cmp	r3, #2
 8006322:	d11c      	bne.n	800635e <HAL_SPI_TransmitReceive+0x264>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006328:	b29b      	uxth	r3, r3
 800632a:	2b00      	cmp	r3, #0
 800632c:	d017      	beq.n	800635e <HAL_SPI_TransmitReceive+0x264>
 800632e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006330:	2b01      	cmp	r3, #1
 8006332:	d114      	bne.n	800635e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	330c      	adds	r3, #12
 800633e:	7812      	ldrb	r2, [r2, #0]
 8006340:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006346:	1c5a      	adds	r2, r3, #1
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006350:	b29b      	uxth	r3, r3
 8006352:	3b01      	subs	r3, #1
 8006354:	b29a      	uxth	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800635a:	2300      	movs	r3, #0
 800635c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f003 0301 	and.w	r3, r3, #1
 8006368:	2b01      	cmp	r3, #1
 800636a:	d119      	bne.n	80063a0 <HAL_SPI_TransmitReceive+0x2a6>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006370:	b29b      	uxth	r3, r3
 8006372:	2b00      	cmp	r3, #0
 8006374:	d014      	beq.n	80063a0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68da      	ldr	r2, [r3, #12]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006380:	b2d2      	uxtb	r2, r2
 8006382:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006388:	1c5a      	adds	r2, r3, #1
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006392:	b29b      	uxth	r3, r3
 8006394:	3b01      	subs	r3, #1
 8006396:	b29a      	uxth	r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800639c:	2301      	movs	r3, #1
 800639e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80063a0:	f7fb fa16 	bl	80017d0 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	6a3b      	ldr	r3, [r7, #32]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d803      	bhi.n	80063b8 <HAL_SPI_TransmitReceive+0x2be>
 80063b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b6:	d102      	bne.n	80063be <HAL_SPI_TransmitReceive+0x2c4>
 80063b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d109      	bne.n	80063d2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e038      	b.n	8006444 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d19c      	bne.n	8006316 <HAL_SPI_TransmitReceive+0x21c>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d197      	bne.n	8006316 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063e6:	6a3a      	ldr	r2, [r7, #32]
 80063e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	f000 f8b6 	bl	800655c <SPI_EndRxTxTransaction>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d008      	beq.n	8006408 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2220      	movs	r2, #32
 80063fa:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e01d      	b.n	8006444 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d10a      	bne.n	8006426 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006410:	2300      	movs	r3, #0
 8006412:	613b      	str	r3, [r7, #16]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	613b      	str	r3, [r7, #16]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	613b      	str	r3, [r7, #16]
 8006424:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2201      	movs	r2, #1
 800642a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800643a:	2b00      	cmp	r3, #0
 800643c:	d001      	beq.n	8006442 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e000      	b.n	8006444 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006442:	2300      	movs	r3, #0
  }
}
 8006444:	4618      	mov	r0, r3
 8006446:	3728      	adds	r7, #40	@ 0x28
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b088      	sub	sp, #32
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	603b      	str	r3, [r7, #0]
 8006458:	4613      	mov	r3, r2
 800645a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800645c:	f7fb f9b8 	bl	80017d0 <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006464:	1a9b      	subs	r3, r3, r2
 8006466:	683a      	ldr	r2, [r7, #0]
 8006468:	4413      	add	r3, r2
 800646a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800646c:	f7fb f9b0 	bl	80017d0 <HAL_GetTick>
 8006470:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006472:	4b39      	ldr	r3, [pc, #228]	@ (8006558 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	015b      	lsls	r3, r3, #5
 8006478:	0d1b      	lsrs	r3, r3, #20
 800647a:	69fa      	ldr	r2, [r7, #28]
 800647c:	fb02 f303 	mul.w	r3, r2, r3
 8006480:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006482:	e054      	b.n	800652e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800648a:	d050      	beq.n	800652e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800648c:	f7fb f9a0 	bl	80017d0 <HAL_GetTick>
 8006490:	4602      	mov	r2, r0
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	69fa      	ldr	r2, [r7, #28]
 8006498:	429a      	cmp	r2, r3
 800649a:	d902      	bls.n	80064a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d13d      	bne.n	800651e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	685a      	ldr	r2, [r3, #4]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80064b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80064ba:	d111      	bne.n	80064e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064c4:	d004      	beq.n	80064d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064ce:	d107      	bne.n	80064e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064e8:	d10f      	bne.n	800650a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80064f8:	601a      	str	r2, [r3, #0]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006508:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2201      	movs	r2, #1
 800650e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e017      	b.n	800654e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d101      	bne.n	8006528 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006524:	2300      	movs	r3, #0
 8006526:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	3b01      	subs	r3, #1
 800652c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	689a      	ldr	r2, [r3, #8]
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	4013      	ands	r3, r2
 8006538:	68ba      	ldr	r2, [r7, #8]
 800653a:	429a      	cmp	r2, r3
 800653c:	bf0c      	ite	eq
 800653e:	2301      	moveq	r3, #1
 8006540:	2300      	movne	r3, #0
 8006542:	b2db      	uxtb	r3, r3
 8006544:	461a      	mov	r2, r3
 8006546:	79fb      	ldrb	r3, [r7, #7]
 8006548:	429a      	cmp	r2, r3
 800654a:	d19b      	bne.n	8006484 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3720      	adds	r7, #32
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	20000000 	.word	0x20000000

0800655c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b088      	sub	sp, #32
 8006560:	af02      	add	r7, sp, #8
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	9300      	str	r3, [sp, #0]
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	2201      	movs	r2, #1
 8006570:	2102      	movs	r1, #2
 8006572:	68f8      	ldr	r0, [r7, #12]
 8006574:	f7ff ff6a 	bl	800644c <SPI_WaitFlagStateUntilTimeout>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d007      	beq.n	800658e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006582:	f043 0220 	orr.w	r2, r3, #32
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e032      	b.n	80065f4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800658e:	4b1b      	ldr	r3, [pc, #108]	@ (80065fc <SPI_EndRxTxTransaction+0xa0>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a1b      	ldr	r2, [pc, #108]	@ (8006600 <SPI_EndRxTxTransaction+0xa4>)
 8006594:	fba2 2303 	umull	r2, r3, r2, r3
 8006598:	0d5b      	lsrs	r3, r3, #21
 800659a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800659e:	fb02 f303 	mul.w	r3, r2, r3
 80065a2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80065ac:	d112      	bne.n	80065d4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	9300      	str	r3, [sp, #0]
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	2200      	movs	r2, #0
 80065b6:	2180      	movs	r1, #128	@ 0x80
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f7ff ff47 	bl	800644c <SPI_WaitFlagStateUntilTimeout>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d016      	beq.n	80065f2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065c8:	f043 0220 	orr.w	r2, r3, #32
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e00f      	b.n	80065f4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00a      	beq.n	80065f0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	3b01      	subs	r3, #1
 80065de:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065ea:	2b80      	cmp	r3, #128	@ 0x80
 80065ec:	d0f2      	beq.n	80065d4 <SPI_EndRxTxTransaction+0x78>
 80065ee:	e000      	b.n	80065f2 <SPI_EndRxTxTransaction+0x96>
        break;
 80065f0:	bf00      	nop
  }

  return HAL_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3718      	adds	r7, #24
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	20000000 	.word	0x20000000
 8006600:	165e9f81 	.word	0x165e9f81

08006604 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d101      	bne.n	8006616 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e041      	b.n	800669a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800661c:	b2db      	uxtb	r3, r3
 800661e:	2b00      	cmp	r3, #0
 8006620:	d106      	bne.n	8006630 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f839 	bl	80066a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2202      	movs	r2, #2
 8006634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	3304      	adds	r3, #4
 8006640:	4619      	mov	r1, r3
 8006642:	4610      	mov	r0, r2
 8006644:	f000 f9c0 	bl	80069c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3708      	adds	r7, #8
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80066a2:	b480      	push	{r7}
 80066a4:	b083      	sub	sp, #12
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80066aa:	bf00      	nop
 80066ac:	370c      	adds	r7, #12
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
	...

080066b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d001      	beq.n	80066d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e04e      	b.n	800676e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2202      	movs	r2, #2
 80066d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68da      	ldr	r2, [r3, #12]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f042 0201 	orr.w	r2, r2, #1
 80066e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a23      	ldr	r2, [pc, #140]	@ (800677c <HAL_TIM_Base_Start_IT+0xc4>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d022      	beq.n	8006738 <HAL_TIM_Base_Start_IT+0x80>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066fa:	d01d      	beq.n	8006738 <HAL_TIM_Base_Start_IT+0x80>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a1f      	ldr	r2, [pc, #124]	@ (8006780 <HAL_TIM_Base_Start_IT+0xc8>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d018      	beq.n	8006738 <HAL_TIM_Base_Start_IT+0x80>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a1e      	ldr	r2, [pc, #120]	@ (8006784 <HAL_TIM_Base_Start_IT+0xcc>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d013      	beq.n	8006738 <HAL_TIM_Base_Start_IT+0x80>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a1c      	ldr	r2, [pc, #112]	@ (8006788 <HAL_TIM_Base_Start_IT+0xd0>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d00e      	beq.n	8006738 <HAL_TIM_Base_Start_IT+0x80>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a1b      	ldr	r2, [pc, #108]	@ (800678c <HAL_TIM_Base_Start_IT+0xd4>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d009      	beq.n	8006738 <HAL_TIM_Base_Start_IT+0x80>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a19      	ldr	r2, [pc, #100]	@ (8006790 <HAL_TIM_Base_Start_IT+0xd8>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d004      	beq.n	8006738 <HAL_TIM_Base_Start_IT+0x80>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a18      	ldr	r2, [pc, #96]	@ (8006794 <HAL_TIM_Base_Start_IT+0xdc>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d111      	bne.n	800675c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	f003 0307 	and.w	r3, r3, #7
 8006742:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2b06      	cmp	r3, #6
 8006748:	d010      	beq.n	800676c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f042 0201 	orr.w	r2, r2, #1
 8006758:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800675a:	e007      	b.n	800676c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f042 0201 	orr.w	r2, r2, #1
 800676a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3714      	adds	r7, #20
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	40010000 	.word	0x40010000
 8006780:	40000400 	.word	0x40000400
 8006784:	40000800 	.word	0x40000800
 8006788:	40000c00 	.word	0x40000c00
 800678c:	40010400 	.word	0x40010400
 8006790:	40014000 	.word	0x40014000
 8006794:	40001800 	.word	0x40001800

08006798 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	f003 0302 	and.w	r3, r3, #2
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d020      	beq.n	80067fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d01b      	beq.n	80067fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f06f 0202 	mvn.w	r2, #2
 80067cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2201      	movs	r2, #1
 80067d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	f003 0303 	and.w	r3, r3, #3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d003      	beq.n	80067ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 f8d2 	bl	800698c <HAL_TIM_IC_CaptureCallback>
 80067e8:	e005      	b.n	80067f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f8c4 	bl	8006978 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 f8d5 	bl	80069a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	f003 0304 	and.w	r3, r3, #4
 8006802:	2b00      	cmp	r3, #0
 8006804:	d020      	beq.n	8006848 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f003 0304 	and.w	r3, r3, #4
 800680c:	2b00      	cmp	r3, #0
 800680e:	d01b      	beq.n	8006848 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f06f 0204 	mvn.w	r2, #4
 8006818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2202      	movs	r2, #2
 800681e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800682a:	2b00      	cmp	r3, #0
 800682c:	d003      	beq.n	8006836 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 f8ac 	bl	800698c <HAL_TIM_IC_CaptureCallback>
 8006834:	e005      	b.n	8006842 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 f89e 	bl	8006978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 f8af 	bl	80069a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	f003 0308 	and.w	r3, r3, #8
 800684e:	2b00      	cmp	r3, #0
 8006850:	d020      	beq.n	8006894 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f003 0308 	and.w	r3, r3, #8
 8006858:	2b00      	cmp	r3, #0
 800685a:	d01b      	beq.n	8006894 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f06f 0208 	mvn.w	r2, #8
 8006864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2204      	movs	r2, #4
 800686a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	f003 0303 	and.w	r3, r3, #3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d003      	beq.n	8006882 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 f886 	bl	800698c <HAL_TIM_IC_CaptureCallback>
 8006880:	e005      	b.n	800688e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 f878 	bl	8006978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 f889 	bl	80069a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	f003 0310 	and.w	r3, r3, #16
 800689a:	2b00      	cmp	r3, #0
 800689c:	d020      	beq.n	80068e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f003 0310 	and.w	r3, r3, #16
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d01b      	beq.n	80068e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f06f 0210 	mvn.w	r2, #16
 80068b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2208      	movs	r2, #8
 80068b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	69db      	ldr	r3, [r3, #28]
 80068be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d003      	beq.n	80068ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f860 	bl	800698c <HAL_TIM_IC_CaptureCallback>
 80068cc:	e005      	b.n	80068da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f852 	bl	8006978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 f863 	bl	80069a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	f003 0301 	and.w	r3, r3, #1
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00c      	beq.n	8006904 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f003 0301 	and.w	r3, r3, #1
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d007      	beq.n	8006904 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f06f 0201 	mvn.w	r2, #1
 80068fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f7fa fbb8 	bl	8001074 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00c      	beq.n	8006928 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006914:	2b00      	cmp	r3, #0
 8006916:	d007      	beq.n	8006928 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f906 	bl	8006b34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00c      	beq.n	800694c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006938:	2b00      	cmp	r3, #0
 800693a:	d007      	beq.n	800694c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f834 	bl	80069b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	f003 0320 	and.w	r3, r3, #32
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00c      	beq.n	8006970 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f003 0320 	and.w	r3, r3, #32
 800695c:	2b00      	cmp	r3, #0
 800695e:	d007      	beq.n	8006970 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f06f 0220 	mvn.w	r2, #32
 8006968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f8d8 	bl	8006b20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006970:	bf00      	nop
 8006972:	3710      	adds	r7, #16
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006994:	bf00      	nop
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069a8:	bf00      	nop
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069bc:	bf00      	nop
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a46      	ldr	r2, [pc, #280]	@ (8006af4 <TIM_Base_SetConfig+0x12c>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d013      	beq.n	8006a08 <TIM_Base_SetConfig+0x40>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069e6:	d00f      	beq.n	8006a08 <TIM_Base_SetConfig+0x40>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a43      	ldr	r2, [pc, #268]	@ (8006af8 <TIM_Base_SetConfig+0x130>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d00b      	beq.n	8006a08 <TIM_Base_SetConfig+0x40>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a42      	ldr	r2, [pc, #264]	@ (8006afc <TIM_Base_SetConfig+0x134>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d007      	beq.n	8006a08 <TIM_Base_SetConfig+0x40>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a41      	ldr	r2, [pc, #260]	@ (8006b00 <TIM_Base_SetConfig+0x138>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d003      	beq.n	8006a08 <TIM_Base_SetConfig+0x40>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a40      	ldr	r2, [pc, #256]	@ (8006b04 <TIM_Base_SetConfig+0x13c>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d108      	bne.n	8006a1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a35      	ldr	r2, [pc, #212]	@ (8006af4 <TIM_Base_SetConfig+0x12c>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d02b      	beq.n	8006a7a <TIM_Base_SetConfig+0xb2>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a28:	d027      	beq.n	8006a7a <TIM_Base_SetConfig+0xb2>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a32      	ldr	r2, [pc, #200]	@ (8006af8 <TIM_Base_SetConfig+0x130>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d023      	beq.n	8006a7a <TIM_Base_SetConfig+0xb2>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a31      	ldr	r2, [pc, #196]	@ (8006afc <TIM_Base_SetConfig+0x134>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d01f      	beq.n	8006a7a <TIM_Base_SetConfig+0xb2>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a30      	ldr	r2, [pc, #192]	@ (8006b00 <TIM_Base_SetConfig+0x138>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d01b      	beq.n	8006a7a <TIM_Base_SetConfig+0xb2>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a2f      	ldr	r2, [pc, #188]	@ (8006b04 <TIM_Base_SetConfig+0x13c>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d017      	beq.n	8006a7a <TIM_Base_SetConfig+0xb2>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a2e      	ldr	r2, [pc, #184]	@ (8006b08 <TIM_Base_SetConfig+0x140>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d013      	beq.n	8006a7a <TIM_Base_SetConfig+0xb2>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a2d      	ldr	r2, [pc, #180]	@ (8006b0c <TIM_Base_SetConfig+0x144>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d00f      	beq.n	8006a7a <TIM_Base_SetConfig+0xb2>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a2c      	ldr	r2, [pc, #176]	@ (8006b10 <TIM_Base_SetConfig+0x148>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d00b      	beq.n	8006a7a <TIM_Base_SetConfig+0xb2>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4a2b      	ldr	r2, [pc, #172]	@ (8006b14 <TIM_Base_SetConfig+0x14c>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d007      	beq.n	8006a7a <TIM_Base_SetConfig+0xb2>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a2a      	ldr	r2, [pc, #168]	@ (8006b18 <TIM_Base_SetConfig+0x150>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d003      	beq.n	8006a7a <TIM_Base_SetConfig+0xb2>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a29      	ldr	r2, [pc, #164]	@ (8006b1c <TIM_Base_SetConfig+0x154>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d108      	bne.n	8006a8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	695b      	ldr	r3, [r3, #20]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	689a      	ldr	r2, [r3, #8]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a10      	ldr	r2, [pc, #64]	@ (8006af4 <TIM_Base_SetConfig+0x12c>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d003      	beq.n	8006ac0 <TIM_Base_SetConfig+0xf8>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a12      	ldr	r2, [pc, #72]	@ (8006b04 <TIM_Base_SetConfig+0x13c>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d103      	bne.n	8006ac8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	691a      	ldr	r2, [r3, #16]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	f003 0301 	and.w	r3, r3, #1
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d105      	bne.n	8006ae6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	f023 0201 	bic.w	r2, r3, #1
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	611a      	str	r2, [r3, #16]
  }
}
 8006ae6:	bf00      	nop
 8006ae8:	3714      	adds	r7, #20
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	40010000 	.word	0x40010000
 8006af8:	40000400 	.word	0x40000400
 8006afc:	40000800 	.word	0x40000800
 8006b00:	40000c00 	.word	0x40000c00
 8006b04:	40010400 	.word	0x40010400
 8006b08:	40014000 	.word	0x40014000
 8006b0c:	40014400 	.word	0x40014400
 8006b10:	40014800 	.word	0x40014800
 8006b14:	40001800 	.word	0x40001800
 8006b18:	40001c00 	.word	0x40001c00
 8006b1c:	40002000 	.word	0x40002000

08006b20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b28:	bf00      	nop
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d101      	bne.n	8006b5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e042      	b.n	8006be0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d106      	bne.n	8006b74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f7fa fd86 	bl	8001680 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2224      	movs	r2, #36	@ 0x24
 8006b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68da      	ldr	r2, [r3, #12]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006b8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 f82b 	bl	8006be8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	691a      	ldr	r2, [r3, #16]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006ba0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	695a      	ldr	r2, [r3, #20]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006bb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68da      	ldr	r2, [r3, #12]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006bc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2220      	movs	r2, #32
 8006bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2220      	movs	r2, #32
 8006bd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006bde:	2300      	movs	r3, #0
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3708      	adds	r7, #8
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bec:	b0c0      	sub	sp, #256	@ 0x100
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c04:	68d9      	ldr	r1, [r3, #12]
 8006c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	ea40 0301 	orr.w	r3, r0, r1
 8006c10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c16:	689a      	ldr	r2, [r3, #8]
 8006c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	431a      	orrs	r2, r3
 8006c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	431a      	orrs	r2, r3
 8006c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c2c:	69db      	ldr	r3, [r3, #28]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006c40:	f021 010c 	bic.w	r1, r1, #12
 8006c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006c4e:	430b      	orrs	r3, r1
 8006c50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	695b      	ldr	r3, [r3, #20]
 8006c5a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c62:	6999      	ldr	r1, [r3, #24]
 8006c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	ea40 0301 	orr.w	r3, r0, r1
 8006c6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	4b8f      	ldr	r3, [pc, #572]	@ (8006eb4 <UART_SetConfig+0x2cc>)
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d005      	beq.n	8006c88 <UART_SetConfig+0xa0>
 8006c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	4b8d      	ldr	r3, [pc, #564]	@ (8006eb8 <UART_SetConfig+0x2d0>)
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d104      	bne.n	8006c92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c88:	f7fe fca0 	bl	80055cc <HAL_RCC_GetPCLK2Freq>
 8006c8c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006c90:	e003      	b.n	8006c9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c92:	f7fe fc87 	bl	80055a4 <HAL_RCC_GetPCLK1Freq>
 8006c96:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c9e:	69db      	ldr	r3, [r3, #28]
 8006ca0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ca4:	f040 810c 	bne.w	8006ec0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ca8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cac:	2200      	movs	r2, #0
 8006cae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006cb2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006cb6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006cba:	4622      	mov	r2, r4
 8006cbc:	462b      	mov	r3, r5
 8006cbe:	1891      	adds	r1, r2, r2
 8006cc0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006cc2:	415b      	adcs	r3, r3
 8006cc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006cc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006cca:	4621      	mov	r1, r4
 8006ccc:	eb12 0801 	adds.w	r8, r2, r1
 8006cd0:	4629      	mov	r1, r5
 8006cd2:	eb43 0901 	adc.w	r9, r3, r1
 8006cd6:	f04f 0200 	mov.w	r2, #0
 8006cda:	f04f 0300 	mov.w	r3, #0
 8006cde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ce2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ce6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cea:	4690      	mov	r8, r2
 8006cec:	4699      	mov	r9, r3
 8006cee:	4623      	mov	r3, r4
 8006cf0:	eb18 0303 	adds.w	r3, r8, r3
 8006cf4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006cf8:	462b      	mov	r3, r5
 8006cfa:	eb49 0303 	adc.w	r3, r9, r3
 8006cfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006d0e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006d12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006d16:	460b      	mov	r3, r1
 8006d18:	18db      	adds	r3, r3, r3
 8006d1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	eb42 0303 	adc.w	r3, r2, r3
 8006d22:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006d28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006d2c:	f7f9 faa0 	bl	8000270 <__aeabi_uldivmod>
 8006d30:	4602      	mov	r2, r0
 8006d32:	460b      	mov	r3, r1
 8006d34:	4b61      	ldr	r3, [pc, #388]	@ (8006ebc <UART_SetConfig+0x2d4>)
 8006d36:	fba3 2302 	umull	r2, r3, r3, r2
 8006d3a:	095b      	lsrs	r3, r3, #5
 8006d3c:	011c      	lsls	r4, r3, #4
 8006d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d42:	2200      	movs	r2, #0
 8006d44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d48:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006d4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006d50:	4642      	mov	r2, r8
 8006d52:	464b      	mov	r3, r9
 8006d54:	1891      	adds	r1, r2, r2
 8006d56:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006d58:	415b      	adcs	r3, r3
 8006d5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006d60:	4641      	mov	r1, r8
 8006d62:	eb12 0a01 	adds.w	sl, r2, r1
 8006d66:	4649      	mov	r1, r9
 8006d68:	eb43 0b01 	adc.w	fp, r3, r1
 8006d6c:	f04f 0200 	mov.w	r2, #0
 8006d70:	f04f 0300 	mov.w	r3, #0
 8006d74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d80:	4692      	mov	sl, r2
 8006d82:	469b      	mov	fp, r3
 8006d84:	4643      	mov	r3, r8
 8006d86:	eb1a 0303 	adds.w	r3, sl, r3
 8006d8a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d8e:	464b      	mov	r3, r9
 8006d90:	eb4b 0303 	adc.w	r3, fp, r3
 8006d94:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006da4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006da8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006dac:	460b      	mov	r3, r1
 8006dae:	18db      	adds	r3, r3, r3
 8006db0:	643b      	str	r3, [r7, #64]	@ 0x40
 8006db2:	4613      	mov	r3, r2
 8006db4:	eb42 0303 	adc.w	r3, r2, r3
 8006db8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006dbe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006dc2:	f7f9 fa55 	bl	8000270 <__aeabi_uldivmod>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	460b      	mov	r3, r1
 8006dca:	4611      	mov	r1, r2
 8006dcc:	4b3b      	ldr	r3, [pc, #236]	@ (8006ebc <UART_SetConfig+0x2d4>)
 8006dce:	fba3 2301 	umull	r2, r3, r3, r1
 8006dd2:	095b      	lsrs	r3, r3, #5
 8006dd4:	2264      	movs	r2, #100	@ 0x64
 8006dd6:	fb02 f303 	mul.w	r3, r2, r3
 8006dda:	1acb      	subs	r3, r1, r3
 8006ddc:	00db      	lsls	r3, r3, #3
 8006dde:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006de2:	4b36      	ldr	r3, [pc, #216]	@ (8006ebc <UART_SetConfig+0x2d4>)
 8006de4:	fba3 2302 	umull	r2, r3, r3, r2
 8006de8:	095b      	lsrs	r3, r3, #5
 8006dea:	005b      	lsls	r3, r3, #1
 8006dec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006df0:	441c      	add	r4, r3
 8006df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006df6:	2200      	movs	r2, #0
 8006df8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006dfc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006e00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006e04:	4642      	mov	r2, r8
 8006e06:	464b      	mov	r3, r9
 8006e08:	1891      	adds	r1, r2, r2
 8006e0a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006e0c:	415b      	adcs	r3, r3
 8006e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006e14:	4641      	mov	r1, r8
 8006e16:	1851      	adds	r1, r2, r1
 8006e18:	6339      	str	r1, [r7, #48]	@ 0x30
 8006e1a:	4649      	mov	r1, r9
 8006e1c:	414b      	adcs	r3, r1
 8006e1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e20:	f04f 0200 	mov.w	r2, #0
 8006e24:	f04f 0300 	mov.w	r3, #0
 8006e28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006e2c:	4659      	mov	r1, fp
 8006e2e:	00cb      	lsls	r3, r1, #3
 8006e30:	4651      	mov	r1, sl
 8006e32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e36:	4651      	mov	r1, sl
 8006e38:	00ca      	lsls	r2, r1, #3
 8006e3a:	4610      	mov	r0, r2
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	4603      	mov	r3, r0
 8006e40:	4642      	mov	r2, r8
 8006e42:	189b      	adds	r3, r3, r2
 8006e44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e48:	464b      	mov	r3, r9
 8006e4a:	460a      	mov	r2, r1
 8006e4c:	eb42 0303 	adc.w	r3, r2, r3
 8006e50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006e60:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006e64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006e68:	460b      	mov	r3, r1
 8006e6a:	18db      	adds	r3, r3, r3
 8006e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e6e:	4613      	mov	r3, r2
 8006e70:	eb42 0303 	adc.w	r3, r2, r3
 8006e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006e7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006e7e:	f7f9 f9f7 	bl	8000270 <__aeabi_uldivmod>
 8006e82:	4602      	mov	r2, r0
 8006e84:	460b      	mov	r3, r1
 8006e86:	4b0d      	ldr	r3, [pc, #52]	@ (8006ebc <UART_SetConfig+0x2d4>)
 8006e88:	fba3 1302 	umull	r1, r3, r3, r2
 8006e8c:	095b      	lsrs	r3, r3, #5
 8006e8e:	2164      	movs	r1, #100	@ 0x64
 8006e90:	fb01 f303 	mul.w	r3, r1, r3
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	00db      	lsls	r3, r3, #3
 8006e98:	3332      	adds	r3, #50	@ 0x32
 8006e9a:	4a08      	ldr	r2, [pc, #32]	@ (8006ebc <UART_SetConfig+0x2d4>)
 8006e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea0:	095b      	lsrs	r3, r3, #5
 8006ea2:	f003 0207 	and.w	r2, r3, #7
 8006ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4422      	add	r2, r4
 8006eae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006eb0:	e106      	b.n	80070c0 <UART_SetConfig+0x4d8>
 8006eb2:	bf00      	nop
 8006eb4:	40011000 	.word	0x40011000
 8006eb8:	40011400 	.word	0x40011400
 8006ebc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ec0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006eca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006ece:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006ed2:	4642      	mov	r2, r8
 8006ed4:	464b      	mov	r3, r9
 8006ed6:	1891      	adds	r1, r2, r2
 8006ed8:	6239      	str	r1, [r7, #32]
 8006eda:	415b      	adcs	r3, r3
 8006edc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ede:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006ee2:	4641      	mov	r1, r8
 8006ee4:	1854      	adds	r4, r2, r1
 8006ee6:	4649      	mov	r1, r9
 8006ee8:	eb43 0501 	adc.w	r5, r3, r1
 8006eec:	f04f 0200 	mov.w	r2, #0
 8006ef0:	f04f 0300 	mov.w	r3, #0
 8006ef4:	00eb      	lsls	r3, r5, #3
 8006ef6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006efa:	00e2      	lsls	r2, r4, #3
 8006efc:	4614      	mov	r4, r2
 8006efe:	461d      	mov	r5, r3
 8006f00:	4643      	mov	r3, r8
 8006f02:	18e3      	adds	r3, r4, r3
 8006f04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006f08:	464b      	mov	r3, r9
 8006f0a:	eb45 0303 	adc.w	r3, r5, r3
 8006f0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f1e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006f22:	f04f 0200 	mov.w	r2, #0
 8006f26:	f04f 0300 	mov.w	r3, #0
 8006f2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006f2e:	4629      	mov	r1, r5
 8006f30:	008b      	lsls	r3, r1, #2
 8006f32:	4621      	mov	r1, r4
 8006f34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f38:	4621      	mov	r1, r4
 8006f3a:	008a      	lsls	r2, r1, #2
 8006f3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006f40:	f7f9 f996 	bl	8000270 <__aeabi_uldivmod>
 8006f44:	4602      	mov	r2, r0
 8006f46:	460b      	mov	r3, r1
 8006f48:	4b60      	ldr	r3, [pc, #384]	@ (80070cc <UART_SetConfig+0x4e4>)
 8006f4a:	fba3 2302 	umull	r2, r3, r3, r2
 8006f4e:	095b      	lsrs	r3, r3, #5
 8006f50:	011c      	lsls	r4, r3, #4
 8006f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f56:	2200      	movs	r2, #0
 8006f58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f5c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006f60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006f64:	4642      	mov	r2, r8
 8006f66:	464b      	mov	r3, r9
 8006f68:	1891      	adds	r1, r2, r2
 8006f6a:	61b9      	str	r1, [r7, #24]
 8006f6c:	415b      	adcs	r3, r3
 8006f6e:	61fb      	str	r3, [r7, #28]
 8006f70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f74:	4641      	mov	r1, r8
 8006f76:	1851      	adds	r1, r2, r1
 8006f78:	6139      	str	r1, [r7, #16]
 8006f7a:	4649      	mov	r1, r9
 8006f7c:	414b      	adcs	r3, r1
 8006f7e:	617b      	str	r3, [r7, #20]
 8006f80:	f04f 0200 	mov.w	r2, #0
 8006f84:	f04f 0300 	mov.w	r3, #0
 8006f88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f8c:	4659      	mov	r1, fp
 8006f8e:	00cb      	lsls	r3, r1, #3
 8006f90:	4651      	mov	r1, sl
 8006f92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f96:	4651      	mov	r1, sl
 8006f98:	00ca      	lsls	r2, r1, #3
 8006f9a:	4610      	mov	r0, r2
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	4642      	mov	r2, r8
 8006fa2:	189b      	adds	r3, r3, r2
 8006fa4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006fa8:	464b      	mov	r3, r9
 8006faa:	460a      	mov	r2, r1
 8006fac:	eb42 0303 	adc.w	r3, r2, r3
 8006fb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006fbe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006fc0:	f04f 0200 	mov.w	r2, #0
 8006fc4:	f04f 0300 	mov.w	r3, #0
 8006fc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006fcc:	4649      	mov	r1, r9
 8006fce:	008b      	lsls	r3, r1, #2
 8006fd0:	4641      	mov	r1, r8
 8006fd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fd6:	4641      	mov	r1, r8
 8006fd8:	008a      	lsls	r2, r1, #2
 8006fda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006fde:	f7f9 f947 	bl	8000270 <__aeabi_uldivmod>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	4611      	mov	r1, r2
 8006fe8:	4b38      	ldr	r3, [pc, #224]	@ (80070cc <UART_SetConfig+0x4e4>)
 8006fea:	fba3 2301 	umull	r2, r3, r3, r1
 8006fee:	095b      	lsrs	r3, r3, #5
 8006ff0:	2264      	movs	r2, #100	@ 0x64
 8006ff2:	fb02 f303 	mul.w	r3, r2, r3
 8006ff6:	1acb      	subs	r3, r1, r3
 8006ff8:	011b      	lsls	r3, r3, #4
 8006ffa:	3332      	adds	r3, #50	@ 0x32
 8006ffc:	4a33      	ldr	r2, [pc, #204]	@ (80070cc <UART_SetConfig+0x4e4>)
 8006ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8007002:	095b      	lsrs	r3, r3, #5
 8007004:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007008:	441c      	add	r4, r3
 800700a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800700e:	2200      	movs	r2, #0
 8007010:	673b      	str	r3, [r7, #112]	@ 0x70
 8007012:	677a      	str	r2, [r7, #116]	@ 0x74
 8007014:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007018:	4642      	mov	r2, r8
 800701a:	464b      	mov	r3, r9
 800701c:	1891      	adds	r1, r2, r2
 800701e:	60b9      	str	r1, [r7, #8]
 8007020:	415b      	adcs	r3, r3
 8007022:	60fb      	str	r3, [r7, #12]
 8007024:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007028:	4641      	mov	r1, r8
 800702a:	1851      	adds	r1, r2, r1
 800702c:	6039      	str	r1, [r7, #0]
 800702e:	4649      	mov	r1, r9
 8007030:	414b      	adcs	r3, r1
 8007032:	607b      	str	r3, [r7, #4]
 8007034:	f04f 0200 	mov.w	r2, #0
 8007038:	f04f 0300 	mov.w	r3, #0
 800703c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007040:	4659      	mov	r1, fp
 8007042:	00cb      	lsls	r3, r1, #3
 8007044:	4651      	mov	r1, sl
 8007046:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800704a:	4651      	mov	r1, sl
 800704c:	00ca      	lsls	r2, r1, #3
 800704e:	4610      	mov	r0, r2
 8007050:	4619      	mov	r1, r3
 8007052:	4603      	mov	r3, r0
 8007054:	4642      	mov	r2, r8
 8007056:	189b      	adds	r3, r3, r2
 8007058:	66bb      	str	r3, [r7, #104]	@ 0x68
 800705a:	464b      	mov	r3, r9
 800705c:	460a      	mov	r2, r1
 800705e:	eb42 0303 	adc.w	r3, r2, r3
 8007062:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	663b      	str	r3, [r7, #96]	@ 0x60
 800706e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007070:	f04f 0200 	mov.w	r2, #0
 8007074:	f04f 0300 	mov.w	r3, #0
 8007078:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800707c:	4649      	mov	r1, r9
 800707e:	008b      	lsls	r3, r1, #2
 8007080:	4641      	mov	r1, r8
 8007082:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007086:	4641      	mov	r1, r8
 8007088:	008a      	lsls	r2, r1, #2
 800708a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800708e:	f7f9 f8ef 	bl	8000270 <__aeabi_uldivmod>
 8007092:	4602      	mov	r2, r0
 8007094:	460b      	mov	r3, r1
 8007096:	4b0d      	ldr	r3, [pc, #52]	@ (80070cc <UART_SetConfig+0x4e4>)
 8007098:	fba3 1302 	umull	r1, r3, r3, r2
 800709c:	095b      	lsrs	r3, r3, #5
 800709e:	2164      	movs	r1, #100	@ 0x64
 80070a0:	fb01 f303 	mul.w	r3, r1, r3
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	011b      	lsls	r3, r3, #4
 80070a8:	3332      	adds	r3, #50	@ 0x32
 80070aa:	4a08      	ldr	r2, [pc, #32]	@ (80070cc <UART_SetConfig+0x4e4>)
 80070ac:	fba2 2303 	umull	r2, r3, r2, r3
 80070b0:	095b      	lsrs	r3, r3, #5
 80070b2:	f003 020f 	and.w	r2, r3, #15
 80070b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4422      	add	r2, r4
 80070be:	609a      	str	r2, [r3, #8]
}
 80070c0:	bf00      	nop
 80070c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80070c6:	46bd      	mov	sp, r7
 80070c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070cc:	51eb851f 	.word	0x51eb851f

080070d0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80070d4:	4904      	ldr	r1, [pc, #16]	@ (80070e8 <MX_FATFS_Init+0x18>)
 80070d6:	4805      	ldr	r0, [pc, #20]	@ (80070ec <MX_FATFS_Init+0x1c>)
 80070d8:	f004 fee6 	bl	800bea8 <FATFS_LinkDriver>
 80070dc:	4603      	mov	r3, r0
 80070de:	461a      	mov	r2, r3
 80070e0:	4b03      	ldr	r3, [pc, #12]	@ (80070f0 <MX_FATFS_Init+0x20>)
 80070e2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80070e4:	bf00      	nop
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	200003e8 	.word	0x200003e8
 80070ec:	2000000c 	.word	0x2000000c
 80070f0:	200003e4 	.word	0x200003e4

080070f4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	4603      	mov	r3, r0
 80070fc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 80070fe:	79fb      	ldrb	r3, [r7, #7]
 8007100:	4618      	mov	r0, r3
 8007102:	f000 f9d3 	bl	80074ac <USER_SPI_initialize>
 8007106:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007108:	4618      	mov	r0, r3
 800710a:	3708      	adds	r7, #8
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	4603      	mov	r3, r0
 8007118:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
  return USER_SPI_status(pdrv);
 800711a:	79fb      	ldrb	r3, [r7, #7]
 800711c:	4618      	mov	r0, r3
 800711e:	f000 fab1 	bl	8007684 <USER_SPI_status>
 8007122:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007124:	4618      	mov	r0, r3
 8007126:	3708      	adds	r7, #8
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	60b9      	str	r1, [r7, #8]
 8007134:	607a      	str	r2, [r7, #4]
 8007136:	603b      	str	r3, [r7, #0]
 8007138:	4603      	mov	r3, r0
 800713a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
  return USER_SPI_read(pdrv, buff, sector, count);
 800713c:	7bf8      	ldrb	r0, [r7, #15]
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	68b9      	ldr	r1, [r7, #8]
 8007144:	f000 fab4 	bl	80076b0 <USER_SPI_read>
 8007148:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800714a:	4618      	mov	r0, r3
 800714c:	3710      	adds	r7, #16
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007152:	b580      	push	{r7, lr}
 8007154:	b084      	sub	sp, #16
 8007156:	af00      	add	r7, sp, #0
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]
 800715c:	603b      	str	r3, [r7, #0]
 800715e:	4603      	mov	r3, r0
 8007160:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 8007162:	7bf8      	ldrb	r0, [r7, #15]
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	68b9      	ldr	r1, [r7, #8]
 800716a:	f000 fb07 	bl	800777c <USER_SPI_write>
 800716e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007170:	4618      	mov	r0, r3
 8007172:	3710      	adds	r7, #16
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	4603      	mov	r3, r0
 8007180:	603a      	str	r2, [r7, #0]
 8007182:	71fb      	strb	r3, [r7, #7]
 8007184:	460b      	mov	r3, r1
 8007186:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
  return USER_SPI_ioctl(pdrv, cmd, buff);
 8007188:	79b9      	ldrb	r1, [r7, #6]
 800718a:	79fb      	ldrb	r3, [r7, #7]
 800718c:	683a      	ldr	r2, [r7, #0]
 800718e:	4618      	mov	r0, r3
 8007190:	f000 fb70 	bl	8007874 <USER_SPI_ioctl>
 8007194:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007196:	4618      	mov	r0, r3
 8007198:	3708      	adds	r7, #8
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
	...

080071a0 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80071a8:	f7fa fb12 	bl	80017d0 <HAL_GetTick>
 80071ac:	4603      	mov	r3, r0
 80071ae:	4a04      	ldr	r2, [pc, #16]	@ (80071c0 <SPI_Timer_On+0x20>)
 80071b0:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80071b2:	4a04      	ldr	r2, [pc, #16]	@ (80071c4 <SPI_Timer_On+0x24>)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6013      	str	r3, [r2, #0]
}
 80071b8:	bf00      	nop
 80071ba:	3708      	adds	r7, #8
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	200003f0 	.word	0x200003f0
 80071c4:	200003f4 	.word	0x200003f4

080071c8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80071c8:	b580      	push	{r7, lr}
 80071ca:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80071cc:	f7fa fb00 	bl	80017d0 <HAL_GetTick>
 80071d0:	4602      	mov	r2, r0
 80071d2:	4b06      	ldr	r3, [pc, #24]	@ (80071ec <SPI_Timer_Status+0x24>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	1ad2      	subs	r2, r2, r3
 80071d8:	4b05      	ldr	r3, [pc, #20]	@ (80071f0 <SPI_Timer_Status+0x28>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	429a      	cmp	r2, r3
 80071de:	bf34      	ite	cc
 80071e0:	2301      	movcc	r3, #1
 80071e2:	2300      	movcs	r3, #0
 80071e4:	b2db      	uxtb	r3, r3
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	200003f0 	.word	0x200003f0
 80071f0:	200003f4 	.word	0x200003f4

080071f4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b086      	sub	sp, #24
 80071f8:	af02      	add	r7, sp, #8
 80071fa:	4603      	mov	r3, r0
 80071fc:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80071fe:	f107 020f 	add.w	r2, r7, #15
 8007202:	1df9      	adds	r1, r7, #7
 8007204:	2332      	movs	r3, #50	@ 0x32
 8007206:	9300      	str	r3, [sp, #0]
 8007208:	2301      	movs	r3, #1
 800720a:	4804      	ldr	r0, [pc, #16]	@ (800721c <xchg_spi+0x28>)
 800720c:	f7fe ff75 	bl	80060fa <HAL_SPI_TransmitReceive>
    return rxDat;
 8007210:	7bfb      	ldrb	r3, [r7, #15]
}
 8007212:	4618      	mov	r0, r3
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	200002f4 	.word	0x200002f4

08007220 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8007220:	b590      	push	{r4, r7, lr}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800722a:	2300      	movs	r3, #0
 800722c:	60fb      	str	r3, [r7, #12]
 800722e:	e00a      	b.n	8007246 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	18d4      	adds	r4, r2, r3
 8007236:	20ff      	movs	r0, #255	@ 0xff
 8007238:	f7ff ffdc 	bl	80071f4 <xchg_spi>
 800723c:	4603      	mov	r3, r0
 800723e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	3301      	adds	r3, #1
 8007244:	60fb      	str	r3, [r7, #12]
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	429a      	cmp	r2, r3
 800724c:	d3f0      	bcc.n	8007230 <rcvr_spi_multi+0x10>
	}
}
 800724e:	bf00      	nop
 8007250:	bf00      	nop
 8007252:	3714      	adds	r7, #20
 8007254:	46bd      	mov	sp, r7
 8007256:	bd90      	pop	{r4, r7, pc}

08007258 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	b29a      	uxth	r2, r3
 8007266:	f04f 33ff 	mov.w	r3, #4294967295
 800726a:	6879      	ldr	r1, [r7, #4]
 800726c:	4803      	ldr	r0, [pc, #12]	@ (800727c <xmit_spi_multi+0x24>)
 800726e:	f7fe fe00 	bl	8005e72 <HAL_SPI_Transmit>
}
 8007272:	bf00      	nop
 8007274:	3708      	adds	r7, #8
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	200002f4 	.word	0x200002f4

08007280 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b086      	sub	sp, #24
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8007288:	f7fa faa2 	bl	80017d0 <HAL_GetTick>
 800728c:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8007292:	20ff      	movs	r0, #255	@ 0xff
 8007294:	f7ff ffae 	bl	80071f4 <xchg_spi>
 8007298:	4603      	mov	r3, r0
 800729a:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800729c:	7bfb      	ldrb	r3, [r7, #15]
 800729e:	2bff      	cmp	r3, #255	@ 0xff
 80072a0:	d007      	beq.n	80072b2 <wait_ready+0x32>
 80072a2:	f7fa fa95 	bl	80017d0 <HAL_GetTick>
 80072a6:	4602      	mov	r2, r0
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	1ad3      	subs	r3, r2, r3
 80072ac:	693a      	ldr	r2, [r7, #16]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d8ef      	bhi.n	8007292 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80072b2:	7bfb      	ldrb	r3, [r7, #15]
 80072b4:	2bff      	cmp	r3, #255	@ 0xff
 80072b6:	bf0c      	ite	eq
 80072b8:	2301      	moveq	r3, #1
 80072ba:	2300      	movne	r3, #0
 80072bc:	b2db      	uxtb	r3, r3
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3718      	adds	r7, #24
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
	...

080072c8 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80072cc:	2201      	movs	r2, #1
 80072ce:	2120      	movs	r1, #32
 80072d0:	4803      	ldr	r0, [pc, #12]	@ (80072e0 <despiselect+0x18>)
 80072d2:	f7fb fb8b 	bl	80029ec <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80072d6:	20ff      	movs	r0, #255	@ 0xff
 80072d8:	f7ff ff8c 	bl	80071f4 <xchg_spi>

}
 80072dc:	bf00      	nop
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	40020800 	.word	0x40020800

080072e4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80072e8:	2200      	movs	r2, #0
 80072ea:	2120      	movs	r1, #32
 80072ec:	4809      	ldr	r0, [pc, #36]	@ (8007314 <spiselect+0x30>)
 80072ee:	f7fb fb7d 	bl	80029ec <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80072f2:	20ff      	movs	r0, #255	@ 0xff
 80072f4:	f7ff ff7e 	bl	80071f4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80072f8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80072fc:	f7ff ffc0 	bl	8007280 <wait_ready>
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d001      	beq.n	800730a <spiselect+0x26>
 8007306:	2301      	movs	r3, #1
 8007308:	e002      	b.n	8007310 <spiselect+0x2c>

	despiselect();
 800730a:	f7ff ffdd 	bl	80072c8 <despiselect>
	return 0;	/* Timeout */
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	bd80      	pop	{r7, pc}
 8007314:	40020800 	.word	0x40020800

08007318 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8007322:	20c8      	movs	r0, #200	@ 0xc8
 8007324:	f7ff ff3c 	bl	80071a0 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8007328:	20ff      	movs	r0, #255	@ 0xff
 800732a:	f7ff ff63 	bl	80071f4 <xchg_spi>
 800732e:	4603      	mov	r3, r0
 8007330:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8007332:	7bfb      	ldrb	r3, [r7, #15]
 8007334:	2bff      	cmp	r3, #255	@ 0xff
 8007336:	d104      	bne.n	8007342 <rcvr_datablock+0x2a>
 8007338:	f7ff ff46 	bl	80071c8 <SPI_Timer_Status>
 800733c:	4603      	mov	r3, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1f2      	bne.n	8007328 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8007342:	7bfb      	ldrb	r3, [r7, #15]
 8007344:	2bfe      	cmp	r3, #254	@ 0xfe
 8007346:	d001      	beq.n	800734c <rcvr_datablock+0x34>
 8007348:	2300      	movs	r3, #0
 800734a:	e00a      	b.n	8007362 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800734c:	6839      	ldr	r1, [r7, #0]
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f7ff ff66 	bl	8007220 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8007354:	20ff      	movs	r0, #255	@ 0xff
 8007356:	f7ff ff4d 	bl	80071f4 <xchg_spi>
 800735a:	20ff      	movs	r0, #255	@ 0xff
 800735c:	f7ff ff4a 	bl	80071f4 <xchg_spi>

	return 1;						/* Function succeeded */
 8007360:	2301      	movs	r3, #1
}
 8007362:	4618      	mov	r0, r3
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b084      	sub	sp, #16
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
 8007372:	460b      	mov	r3, r1
 8007374:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8007376:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800737a:	f7ff ff81 	bl	8007280 <wait_ready>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d101      	bne.n	8007388 <xmit_datablock+0x1e>
 8007384:	2300      	movs	r3, #0
 8007386:	e01e      	b.n	80073c6 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8007388:	78fb      	ldrb	r3, [r7, #3]
 800738a:	4618      	mov	r0, r3
 800738c:	f7ff ff32 	bl	80071f4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8007390:	78fb      	ldrb	r3, [r7, #3]
 8007392:	2bfd      	cmp	r3, #253	@ 0xfd
 8007394:	d016      	beq.n	80073c4 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8007396:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f7ff ff5c 	bl	8007258 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80073a0:	20ff      	movs	r0, #255	@ 0xff
 80073a2:	f7ff ff27 	bl	80071f4 <xchg_spi>
 80073a6:	20ff      	movs	r0, #255	@ 0xff
 80073a8:	f7ff ff24 	bl	80071f4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80073ac:	20ff      	movs	r0, #255	@ 0xff
 80073ae:	f7ff ff21 	bl	80071f4 <xchg_spi>
 80073b2:	4603      	mov	r3, r0
 80073b4:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80073b6:	7bfb      	ldrb	r3, [r7, #15]
 80073b8:	f003 031f 	and.w	r3, r3, #31
 80073bc:	2b05      	cmp	r3, #5
 80073be:	d001      	beq.n	80073c4 <xmit_datablock+0x5a>
 80073c0:	2300      	movs	r3, #0
 80073c2:	e000      	b.n	80073c6 <xmit_datablock+0x5c>
	}
	return 1;
 80073c4:	2301      	movs	r3, #1
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b084      	sub	sp, #16
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	4603      	mov	r3, r0
 80073d6:	6039      	str	r1, [r7, #0]
 80073d8:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80073da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	da0e      	bge.n	8007400 <send_cmd+0x32>
		cmd &= 0x7F;
 80073e2:	79fb      	ldrb	r3, [r7, #7]
 80073e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073e8:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80073ea:	2100      	movs	r1, #0
 80073ec:	2037      	movs	r0, #55	@ 0x37
 80073ee:	f7ff ffee 	bl	80073ce <send_cmd>
 80073f2:	4603      	mov	r3, r0
 80073f4:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80073f6:	7bbb      	ldrb	r3, [r7, #14]
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d901      	bls.n	8007400 <send_cmd+0x32>
 80073fc:	7bbb      	ldrb	r3, [r7, #14]
 80073fe:	e051      	b.n	80074a4 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8007400:	79fb      	ldrb	r3, [r7, #7]
 8007402:	2b0c      	cmp	r3, #12
 8007404:	d008      	beq.n	8007418 <send_cmd+0x4a>
		despiselect();
 8007406:	f7ff ff5f 	bl	80072c8 <despiselect>
		if (!spiselect()) return 0xFF;
 800740a:	f7ff ff6b 	bl	80072e4 <spiselect>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d101      	bne.n	8007418 <send_cmd+0x4a>
 8007414:	23ff      	movs	r3, #255	@ 0xff
 8007416:	e045      	b.n	80074a4 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8007418:	79fb      	ldrb	r3, [r7, #7]
 800741a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800741e:	b2db      	uxtb	r3, r3
 8007420:	4618      	mov	r0, r3
 8007422:	f7ff fee7 	bl	80071f4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	0e1b      	lsrs	r3, r3, #24
 800742a:	b2db      	uxtb	r3, r3
 800742c:	4618      	mov	r0, r3
 800742e:	f7ff fee1 	bl	80071f4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	0c1b      	lsrs	r3, r3, #16
 8007436:	b2db      	uxtb	r3, r3
 8007438:	4618      	mov	r0, r3
 800743a:	f7ff fedb 	bl	80071f4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	0a1b      	lsrs	r3, r3, #8
 8007442:	b2db      	uxtb	r3, r3
 8007444:	4618      	mov	r0, r3
 8007446:	f7ff fed5 	bl	80071f4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	b2db      	uxtb	r3, r3
 800744e:	4618      	mov	r0, r3
 8007450:	f7ff fed0 	bl	80071f4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8007454:	2301      	movs	r3, #1
 8007456:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8007458:	79fb      	ldrb	r3, [r7, #7]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d101      	bne.n	8007462 <send_cmd+0x94>
 800745e:	2395      	movs	r3, #149	@ 0x95
 8007460:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8007462:	79fb      	ldrb	r3, [r7, #7]
 8007464:	2b08      	cmp	r3, #8
 8007466:	d101      	bne.n	800746c <send_cmd+0x9e>
 8007468:	2387      	movs	r3, #135	@ 0x87
 800746a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800746c:	7bfb      	ldrb	r3, [r7, #15]
 800746e:	4618      	mov	r0, r3
 8007470:	f7ff fec0 	bl	80071f4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8007474:	79fb      	ldrb	r3, [r7, #7]
 8007476:	2b0c      	cmp	r3, #12
 8007478:	d102      	bne.n	8007480 <send_cmd+0xb2>
 800747a:	20ff      	movs	r0, #255	@ 0xff
 800747c:	f7ff feba 	bl	80071f4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8007480:	230a      	movs	r3, #10
 8007482:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8007484:	20ff      	movs	r0, #255	@ 0xff
 8007486:	f7ff feb5 	bl	80071f4 <xchg_spi>
 800748a:	4603      	mov	r3, r0
 800748c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800748e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007492:	2b00      	cmp	r3, #0
 8007494:	da05      	bge.n	80074a2 <send_cmd+0xd4>
 8007496:	7bfb      	ldrb	r3, [r7, #15]
 8007498:	3b01      	subs	r3, #1
 800749a:	73fb      	strb	r3, [r7, #15]
 800749c:	7bfb      	ldrb	r3, [r7, #15]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1f0      	bne.n	8007484 <send_cmd+0xb6>

	return res;							/* Return received response */
 80074a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3710      	adds	r7, #16
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80074ac:	b590      	push	{r4, r7, lr}
 80074ae:	b085      	sub	sp, #20
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	4603      	mov	r3, r0
 80074b4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80074b6:	79fb      	ldrb	r3, [r7, #7]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d001      	beq.n	80074c0 <USER_SPI_initialize+0x14>
 80074bc:	2301      	movs	r3, #1
 80074be:	e0d6      	b.n	800766e <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80074c0:	4b6d      	ldr	r3, [pc, #436]	@ (8007678 <USER_SPI_initialize+0x1cc>)
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	f003 0302 	and.w	r3, r3, #2
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d003      	beq.n	80074d6 <USER_SPI_initialize+0x2a>
 80074ce:	4b6a      	ldr	r3, [pc, #424]	@ (8007678 <USER_SPI_initialize+0x1cc>)
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	e0cb      	b.n	800766e <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80074d6:	4b69      	ldr	r3, [pc, #420]	@ (800767c <USER_SPI_initialize+0x1d0>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80074e0:	4b66      	ldr	r3, [pc, #408]	@ (800767c <USER_SPI_initialize+0x1d0>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 80074e8:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80074ea:	230a      	movs	r3, #10
 80074ec:	73fb      	strb	r3, [r7, #15]
 80074ee:	e005      	b.n	80074fc <USER_SPI_initialize+0x50>
 80074f0:	20ff      	movs	r0, #255	@ 0xff
 80074f2:	f7ff fe7f 	bl	80071f4 <xchg_spi>
 80074f6:	7bfb      	ldrb	r3, [r7, #15]
 80074f8:	3b01      	subs	r3, #1
 80074fa:	73fb      	strb	r3, [r7, #15]
 80074fc:	7bfb      	ldrb	r3, [r7, #15]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1f6      	bne.n	80074f0 <USER_SPI_initialize+0x44>

	ty = 0;
 8007502:	2300      	movs	r3, #0
 8007504:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8007506:	2100      	movs	r1, #0
 8007508:	2000      	movs	r0, #0
 800750a:	f7ff ff60 	bl	80073ce <send_cmd>
 800750e:	4603      	mov	r3, r0
 8007510:	2b01      	cmp	r3, #1
 8007512:	f040 808b 	bne.w	800762c <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8007516:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800751a:	f7ff fe41 	bl	80071a0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800751e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8007522:	2008      	movs	r0, #8
 8007524:	f7ff ff53 	bl	80073ce <send_cmd>
 8007528:	4603      	mov	r3, r0
 800752a:	2b01      	cmp	r3, #1
 800752c:	d151      	bne.n	80075d2 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800752e:	2300      	movs	r3, #0
 8007530:	73fb      	strb	r3, [r7, #15]
 8007532:	e00d      	b.n	8007550 <USER_SPI_initialize+0xa4>
 8007534:	7bfc      	ldrb	r4, [r7, #15]
 8007536:	20ff      	movs	r0, #255	@ 0xff
 8007538:	f7ff fe5c 	bl	80071f4 <xchg_spi>
 800753c:	4603      	mov	r3, r0
 800753e:	461a      	mov	r2, r3
 8007540:	f104 0310 	add.w	r3, r4, #16
 8007544:	443b      	add	r3, r7
 8007546:	f803 2c08 	strb.w	r2, [r3, #-8]
 800754a:	7bfb      	ldrb	r3, [r7, #15]
 800754c:	3301      	adds	r3, #1
 800754e:	73fb      	strb	r3, [r7, #15]
 8007550:	7bfb      	ldrb	r3, [r7, #15]
 8007552:	2b03      	cmp	r3, #3
 8007554:	d9ee      	bls.n	8007534 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8007556:	7abb      	ldrb	r3, [r7, #10]
 8007558:	2b01      	cmp	r3, #1
 800755a:	d167      	bne.n	800762c <USER_SPI_initialize+0x180>
 800755c:	7afb      	ldrb	r3, [r7, #11]
 800755e:	2baa      	cmp	r3, #170	@ 0xaa
 8007560:	d164      	bne.n	800762c <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8007562:	bf00      	nop
 8007564:	f7ff fe30 	bl	80071c8 <SPI_Timer_Status>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d007      	beq.n	800757e <USER_SPI_initialize+0xd2>
 800756e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007572:	20a9      	movs	r0, #169	@ 0xa9
 8007574:	f7ff ff2b 	bl	80073ce <send_cmd>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1f2      	bne.n	8007564 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800757e:	f7ff fe23 	bl	80071c8 <SPI_Timer_Status>
 8007582:	4603      	mov	r3, r0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d051      	beq.n	800762c <USER_SPI_initialize+0x180>
 8007588:	2100      	movs	r1, #0
 800758a:	203a      	movs	r0, #58	@ 0x3a
 800758c:	f7ff ff1f 	bl	80073ce <send_cmd>
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d14a      	bne.n	800762c <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8007596:	2300      	movs	r3, #0
 8007598:	73fb      	strb	r3, [r7, #15]
 800759a:	e00d      	b.n	80075b8 <USER_SPI_initialize+0x10c>
 800759c:	7bfc      	ldrb	r4, [r7, #15]
 800759e:	20ff      	movs	r0, #255	@ 0xff
 80075a0:	f7ff fe28 	bl	80071f4 <xchg_spi>
 80075a4:	4603      	mov	r3, r0
 80075a6:	461a      	mov	r2, r3
 80075a8:	f104 0310 	add.w	r3, r4, #16
 80075ac:	443b      	add	r3, r7
 80075ae:	f803 2c08 	strb.w	r2, [r3, #-8]
 80075b2:	7bfb      	ldrb	r3, [r7, #15]
 80075b4:	3301      	adds	r3, #1
 80075b6:	73fb      	strb	r3, [r7, #15]
 80075b8:	7bfb      	ldrb	r3, [r7, #15]
 80075ba:	2b03      	cmp	r3, #3
 80075bc:	d9ee      	bls.n	800759c <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80075be:	7a3b      	ldrb	r3, [r7, #8]
 80075c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d001      	beq.n	80075cc <USER_SPI_initialize+0x120>
 80075c8:	230c      	movs	r3, #12
 80075ca:	e000      	b.n	80075ce <USER_SPI_initialize+0x122>
 80075cc:	2304      	movs	r3, #4
 80075ce:	737b      	strb	r3, [r7, #13]
 80075d0:	e02c      	b.n	800762c <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80075d2:	2100      	movs	r1, #0
 80075d4:	20a9      	movs	r0, #169	@ 0xa9
 80075d6:	f7ff fefa 	bl	80073ce <send_cmd>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d804      	bhi.n	80075ea <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80075e0:	2302      	movs	r3, #2
 80075e2:	737b      	strb	r3, [r7, #13]
 80075e4:	23a9      	movs	r3, #169	@ 0xa9
 80075e6:	73bb      	strb	r3, [r7, #14]
 80075e8:	e003      	b.n	80075f2 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80075ea:	2301      	movs	r3, #1
 80075ec:	737b      	strb	r3, [r7, #13]
 80075ee:	2301      	movs	r3, #1
 80075f0:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80075f2:	bf00      	nop
 80075f4:	f7ff fde8 	bl	80071c8 <SPI_Timer_Status>
 80075f8:	4603      	mov	r3, r0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d007      	beq.n	800760e <USER_SPI_initialize+0x162>
 80075fe:	7bbb      	ldrb	r3, [r7, #14]
 8007600:	2100      	movs	r1, #0
 8007602:	4618      	mov	r0, r3
 8007604:	f7ff fee3 	bl	80073ce <send_cmd>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1f2      	bne.n	80075f4 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800760e:	f7ff fddb 	bl	80071c8 <SPI_Timer_Status>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d007      	beq.n	8007628 <USER_SPI_initialize+0x17c>
 8007618:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800761c:	2010      	movs	r0, #16
 800761e:	f7ff fed6 	bl	80073ce <send_cmd>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d001      	beq.n	800762c <USER_SPI_initialize+0x180>
				ty = 0;
 8007628:	2300      	movs	r3, #0
 800762a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800762c:	4a14      	ldr	r2, [pc, #80]	@ (8007680 <USER_SPI_initialize+0x1d4>)
 800762e:	7b7b      	ldrb	r3, [r7, #13]
 8007630:	7013      	strb	r3, [r2, #0]
	despiselect();
 8007632:	f7ff fe49 	bl	80072c8 <despiselect>

	if (ty) {			/* OK */
 8007636:	7b7b      	ldrb	r3, [r7, #13]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d012      	beq.n	8007662 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 800763c:	4b0f      	ldr	r3, [pc, #60]	@ (800767c <USER_SPI_initialize+0x1d0>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8007646:	4b0d      	ldr	r3, [pc, #52]	@ (800767c <USER_SPI_initialize+0x1d0>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f042 0210 	orr.w	r2, r2, #16
 800764e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8007650:	4b09      	ldr	r3, [pc, #36]	@ (8007678 <USER_SPI_initialize+0x1cc>)
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	b2db      	uxtb	r3, r3
 8007656:	f023 0301 	bic.w	r3, r3, #1
 800765a:	b2da      	uxtb	r2, r3
 800765c:	4b06      	ldr	r3, [pc, #24]	@ (8007678 <USER_SPI_initialize+0x1cc>)
 800765e:	701a      	strb	r2, [r3, #0]
 8007660:	e002      	b.n	8007668 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8007662:	4b05      	ldr	r3, [pc, #20]	@ (8007678 <USER_SPI_initialize+0x1cc>)
 8007664:	2201      	movs	r2, #1
 8007666:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8007668:	4b03      	ldr	r3, [pc, #12]	@ (8007678 <USER_SPI_initialize+0x1cc>)
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	b2db      	uxtb	r3, r3
}
 800766e:	4618      	mov	r0, r3
 8007670:	3714      	adds	r7, #20
 8007672:	46bd      	mov	sp, r7
 8007674:	bd90      	pop	{r4, r7, pc}
 8007676:	bf00      	nop
 8007678:	20000020 	.word	0x20000020
 800767c:	200002f4 	.word	0x200002f4
 8007680:	200003ec 	.word	0x200003ec

08007684 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	4603      	mov	r3, r0
 800768c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800768e:	79fb      	ldrb	r3, [r7, #7]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d001      	beq.n	8007698 <USER_SPI_status+0x14>
 8007694:	2301      	movs	r3, #1
 8007696:	e002      	b.n	800769e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8007698:	4b04      	ldr	r3, [pc, #16]	@ (80076ac <USER_SPI_status+0x28>)
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	b2db      	uxtb	r3, r3
}
 800769e:	4618      	mov	r0, r3
 80076a0:	370c      	adds	r7, #12
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	20000020 	.word	0x20000020

080076b0 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60b9      	str	r1, [r7, #8]
 80076b8:	607a      	str	r2, [r7, #4]
 80076ba:	603b      	str	r3, [r7, #0]
 80076bc:	4603      	mov	r3, r0
 80076be:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80076c0:	7bfb      	ldrb	r3, [r7, #15]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d102      	bne.n	80076cc <USER_SPI_read+0x1c>
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d101      	bne.n	80076d0 <USER_SPI_read+0x20>
 80076cc:	2304      	movs	r3, #4
 80076ce:	e04d      	b.n	800776c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80076d0:	4b28      	ldr	r3, [pc, #160]	@ (8007774 <USER_SPI_read+0xc4>)
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	f003 0301 	and.w	r3, r3, #1
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d001      	beq.n	80076e2 <USER_SPI_read+0x32>
 80076de:	2303      	movs	r3, #3
 80076e0:	e044      	b.n	800776c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80076e2:	4b25      	ldr	r3, [pc, #148]	@ (8007778 <USER_SPI_read+0xc8>)
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	f003 0308 	and.w	r3, r3, #8
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d102      	bne.n	80076f4 <USER_SPI_read+0x44>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	025b      	lsls	r3, r3, #9
 80076f2:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d111      	bne.n	800771e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80076fa:	6879      	ldr	r1, [r7, #4]
 80076fc:	2011      	movs	r0, #17
 80076fe:	f7ff fe66 	bl	80073ce <send_cmd>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d129      	bne.n	800775c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8007708:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800770c:	68b8      	ldr	r0, [r7, #8]
 800770e:	f7ff fe03 	bl	8007318 <rcvr_datablock>
 8007712:	4603      	mov	r3, r0
 8007714:	2b00      	cmp	r3, #0
 8007716:	d021      	beq.n	800775c <USER_SPI_read+0xac>
			count = 0;
 8007718:	2300      	movs	r3, #0
 800771a:	603b      	str	r3, [r7, #0]
 800771c:	e01e      	b.n	800775c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800771e:	6879      	ldr	r1, [r7, #4]
 8007720:	2012      	movs	r0, #18
 8007722:	f7ff fe54 	bl	80073ce <send_cmd>
 8007726:	4603      	mov	r3, r0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d117      	bne.n	800775c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800772c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007730:	68b8      	ldr	r0, [r7, #8]
 8007732:	f7ff fdf1 	bl	8007318 <rcvr_datablock>
 8007736:	4603      	mov	r3, r0
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00a      	beq.n	8007752 <USER_SPI_read+0xa2>
				buff += 512;
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8007742:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	3b01      	subs	r3, #1
 8007748:	603b      	str	r3, [r7, #0]
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1ed      	bne.n	800772c <USER_SPI_read+0x7c>
 8007750:	e000      	b.n	8007754 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8007752:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8007754:	2100      	movs	r1, #0
 8007756:	200c      	movs	r0, #12
 8007758:	f7ff fe39 	bl	80073ce <send_cmd>
		}
	}
	despiselect();
 800775c:	f7ff fdb4 	bl	80072c8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	bf14      	ite	ne
 8007766:	2301      	movne	r3, #1
 8007768:	2300      	moveq	r3, #0
 800776a:	b2db      	uxtb	r3, r3
}
 800776c:	4618      	mov	r0, r3
 800776e:	3710      	adds	r7, #16
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}
 8007774:	20000020 	.word	0x20000020
 8007778:	200003ec 	.word	0x200003ec

0800777c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	60b9      	str	r1, [r7, #8]
 8007784:	607a      	str	r2, [r7, #4]
 8007786:	603b      	str	r3, [r7, #0]
 8007788:	4603      	mov	r3, r0
 800778a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800778c:	7bfb      	ldrb	r3, [r7, #15]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d102      	bne.n	8007798 <USER_SPI_write+0x1c>
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d101      	bne.n	800779c <USER_SPI_write+0x20>
 8007798:	2304      	movs	r3, #4
 800779a:	e063      	b.n	8007864 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800779c:	4b33      	ldr	r3, [pc, #204]	@ (800786c <USER_SPI_write+0xf0>)
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	f003 0301 	and.w	r3, r3, #1
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d001      	beq.n	80077ae <USER_SPI_write+0x32>
 80077aa:	2303      	movs	r3, #3
 80077ac:	e05a      	b.n	8007864 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80077ae:	4b2f      	ldr	r3, [pc, #188]	@ (800786c <USER_SPI_write+0xf0>)
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	f003 0304 	and.w	r3, r3, #4
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d001      	beq.n	80077c0 <USER_SPI_write+0x44>
 80077bc:	2302      	movs	r3, #2
 80077be:	e051      	b.n	8007864 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80077c0:	4b2b      	ldr	r3, [pc, #172]	@ (8007870 <USER_SPI_write+0xf4>)
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	f003 0308 	and.w	r3, r3, #8
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d102      	bne.n	80077d2 <USER_SPI_write+0x56>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	025b      	lsls	r3, r3, #9
 80077d0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d110      	bne.n	80077fa <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80077d8:	6879      	ldr	r1, [r7, #4]
 80077da:	2018      	movs	r0, #24
 80077dc:	f7ff fdf7 	bl	80073ce <send_cmd>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d136      	bne.n	8007854 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80077e6:	21fe      	movs	r1, #254	@ 0xfe
 80077e8:	68b8      	ldr	r0, [r7, #8]
 80077ea:	f7ff fdbe 	bl	800736a <xmit_datablock>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d02f      	beq.n	8007854 <USER_SPI_write+0xd8>
			count = 0;
 80077f4:	2300      	movs	r3, #0
 80077f6:	603b      	str	r3, [r7, #0]
 80077f8:	e02c      	b.n	8007854 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80077fa:	4b1d      	ldr	r3, [pc, #116]	@ (8007870 <USER_SPI_write+0xf4>)
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	f003 0306 	and.w	r3, r3, #6
 8007802:	2b00      	cmp	r3, #0
 8007804:	d003      	beq.n	800780e <USER_SPI_write+0x92>
 8007806:	6839      	ldr	r1, [r7, #0]
 8007808:	2097      	movs	r0, #151	@ 0x97
 800780a:	f7ff fde0 	bl	80073ce <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800780e:	6879      	ldr	r1, [r7, #4]
 8007810:	2019      	movs	r0, #25
 8007812:	f7ff fddc 	bl	80073ce <send_cmd>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d11b      	bne.n	8007854 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800781c:	21fc      	movs	r1, #252	@ 0xfc
 800781e:	68b8      	ldr	r0, [r7, #8]
 8007820:	f7ff fda3 	bl	800736a <xmit_datablock>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00a      	beq.n	8007840 <USER_SPI_write+0xc4>
				buff += 512;
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8007830:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	3b01      	subs	r3, #1
 8007836:	603b      	str	r3, [r7, #0]
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1ee      	bne.n	800781c <USER_SPI_write+0xa0>
 800783e:	e000      	b.n	8007842 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8007840:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8007842:	21fd      	movs	r1, #253	@ 0xfd
 8007844:	2000      	movs	r0, #0
 8007846:	f7ff fd90 	bl	800736a <xmit_datablock>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d101      	bne.n	8007854 <USER_SPI_write+0xd8>
 8007850:	2301      	movs	r3, #1
 8007852:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8007854:	f7ff fd38 	bl	80072c8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	2b00      	cmp	r3, #0
 800785c:	bf14      	ite	ne
 800785e:	2301      	movne	r3, #1
 8007860:	2300      	moveq	r3, #0
 8007862:	b2db      	uxtb	r3, r3
}
 8007864:	4618      	mov	r0, r3
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}
 800786c:	20000020 	.word	0x20000020
 8007870:	200003ec 	.word	0x200003ec

08007874 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b08c      	sub	sp, #48	@ 0x30
 8007878:	af00      	add	r7, sp, #0
 800787a:	4603      	mov	r3, r0
 800787c:	603a      	str	r2, [r7, #0]
 800787e:	71fb      	strb	r3, [r7, #7]
 8007880:	460b      	mov	r3, r1
 8007882:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8007884:	79fb      	ldrb	r3, [r7, #7]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d001      	beq.n	800788e <USER_SPI_ioctl+0x1a>
 800788a:	2304      	movs	r3, #4
 800788c:	e15a      	b.n	8007b44 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800788e:	4baf      	ldr	r3, [pc, #700]	@ (8007b4c <USER_SPI_ioctl+0x2d8>)
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	b2db      	uxtb	r3, r3
 8007894:	f003 0301 	and.w	r3, r3, #1
 8007898:	2b00      	cmp	r3, #0
 800789a:	d001      	beq.n	80078a0 <USER_SPI_ioctl+0x2c>
 800789c:	2303      	movs	r3, #3
 800789e:	e151      	b.n	8007b44 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80078a0:	2301      	movs	r3, #1
 80078a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 80078a6:	79bb      	ldrb	r3, [r7, #6]
 80078a8:	2b04      	cmp	r3, #4
 80078aa:	f200 8136 	bhi.w	8007b1a <USER_SPI_ioctl+0x2a6>
 80078ae:	a201      	add	r2, pc, #4	@ (adr r2, 80078b4 <USER_SPI_ioctl+0x40>)
 80078b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b4:	080078c9 	.word	0x080078c9
 80078b8:	080078dd 	.word	0x080078dd
 80078bc:	08007b1b 	.word	0x08007b1b
 80078c0:	08007989 	.word	0x08007989
 80078c4:	08007a7f 	.word	0x08007a7f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80078c8:	f7ff fd0c 	bl	80072e4 <spiselect>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	f000 8127 	beq.w	8007b22 <USER_SPI_ioctl+0x2ae>
 80078d4:	2300      	movs	r3, #0
 80078d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80078da:	e122      	b.n	8007b22 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80078dc:	2100      	movs	r1, #0
 80078de:	2009      	movs	r0, #9
 80078e0:	f7ff fd75 	bl	80073ce <send_cmd>
 80078e4:	4603      	mov	r3, r0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f040 811d 	bne.w	8007b26 <USER_SPI_ioctl+0x2b2>
 80078ec:	f107 030c 	add.w	r3, r7, #12
 80078f0:	2110      	movs	r1, #16
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7ff fd10 	bl	8007318 <rcvr_datablock>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f000 8113 	beq.w	8007b26 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8007900:	7b3b      	ldrb	r3, [r7, #12]
 8007902:	099b      	lsrs	r3, r3, #6
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b01      	cmp	r3, #1
 8007908:	d111      	bne.n	800792e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800790a:	7d7b      	ldrb	r3, [r7, #21]
 800790c:	461a      	mov	r2, r3
 800790e:	7d3b      	ldrb	r3, [r7, #20]
 8007910:	021b      	lsls	r3, r3, #8
 8007912:	4413      	add	r3, r2
 8007914:	461a      	mov	r2, r3
 8007916:	7cfb      	ldrb	r3, [r7, #19]
 8007918:	041b      	lsls	r3, r3, #16
 800791a:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800791e:	4413      	add	r3, r2
 8007920:	3301      	adds	r3, #1
 8007922:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	029a      	lsls	r2, r3, #10
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	601a      	str	r2, [r3, #0]
 800792c:	e028      	b.n	8007980 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800792e:	7c7b      	ldrb	r3, [r7, #17]
 8007930:	f003 030f 	and.w	r3, r3, #15
 8007934:	b2da      	uxtb	r2, r3
 8007936:	7dbb      	ldrb	r3, [r7, #22]
 8007938:	09db      	lsrs	r3, r3, #7
 800793a:	b2db      	uxtb	r3, r3
 800793c:	4413      	add	r3, r2
 800793e:	b2da      	uxtb	r2, r3
 8007940:	7d7b      	ldrb	r3, [r7, #21]
 8007942:	005b      	lsls	r3, r3, #1
 8007944:	b2db      	uxtb	r3, r3
 8007946:	f003 0306 	and.w	r3, r3, #6
 800794a:	b2db      	uxtb	r3, r3
 800794c:	4413      	add	r3, r2
 800794e:	b2db      	uxtb	r3, r3
 8007950:	3302      	adds	r3, #2
 8007952:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8007956:	7d3b      	ldrb	r3, [r7, #20]
 8007958:	099b      	lsrs	r3, r3, #6
 800795a:	b2db      	uxtb	r3, r3
 800795c:	461a      	mov	r2, r3
 800795e:	7cfb      	ldrb	r3, [r7, #19]
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	441a      	add	r2, r3
 8007964:	7cbb      	ldrb	r3, [r7, #18]
 8007966:	029b      	lsls	r3, r3, #10
 8007968:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800796c:	4413      	add	r3, r2
 800796e:	3301      	adds	r3, #1
 8007970:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8007972:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007976:	3b09      	subs	r3, #9
 8007978:	69fa      	ldr	r2, [r7, #28]
 800797a:	409a      	lsls	r2, r3
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8007980:	2300      	movs	r3, #0
 8007982:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8007986:	e0ce      	b.n	8007b26 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8007988:	4b71      	ldr	r3, [pc, #452]	@ (8007b50 <USER_SPI_ioctl+0x2dc>)
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	f003 0304 	and.w	r3, r3, #4
 8007990:	2b00      	cmp	r3, #0
 8007992:	d031      	beq.n	80079f8 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8007994:	2100      	movs	r1, #0
 8007996:	208d      	movs	r0, #141	@ 0x8d
 8007998:	f7ff fd19 	bl	80073ce <send_cmd>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	f040 80c3 	bne.w	8007b2a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80079a4:	20ff      	movs	r0, #255	@ 0xff
 80079a6:	f7ff fc25 	bl	80071f4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80079aa:	f107 030c 	add.w	r3, r7, #12
 80079ae:	2110      	movs	r1, #16
 80079b0:	4618      	mov	r0, r3
 80079b2:	f7ff fcb1 	bl	8007318 <rcvr_datablock>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f000 80b6 	beq.w	8007b2a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80079be:	2330      	movs	r3, #48	@ 0x30
 80079c0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80079c4:	e007      	b.n	80079d6 <USER_SPI_ioctl+0x162>
 80079c6:	20ff      	movs	r0, #255	@ 0xff
 80079c8:	f7ff fc14 	bl	80071f4 <xchg_spi>
 80079cc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80079d0:	3b01      	subs	r3, #1
 80079d2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80079d6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1f3      	bne.n	80079c6 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80079de:	7dbb      	ldrb	r3, [r7, #22]
 80079e0:	091b      	lsrs	r3, r3, #4
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	461a      	mov	r2, r3
 80079e6:	2310      	movs	r3, #16
 80079e8:	fa03 f202 	lsl.w	r2, r3, r2
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80079f0:	2300      	movs	r3, #0
 80079f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80079f6:	e098      	b.n	8007b2a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80079f8:	2100      	movs	r1, #0
 80079fa:	2009      	movs	r0, #9
 80079fc:	f7ff fce7 	bl	80073ce <send_cmd>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f040 8091 	bne.w	8007b2a <USER_SPI_ioctl+0x2b6>
 8007a08:	f107 030c 	add.w	r3, r7, #12
 8007a0c:	2110      	movs	r1, #16
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7ff fc82 	bl	8007318 <rcvr_datablock>
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f000 8087 	beq.w	8007b2a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8007a1c:	4b4c      	ldr	r3, [pc, #304]	@ (8007b50 <USER_SPI_ioctl+0x2dc>)
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	f003 0302 	and.w	r3, r3, #2
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d012      	beq.n	8007a4e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8007a28:	7dbb      	ldrb	r3, [r7, #22]
 8007a2a:	005b      	lsls	r3, r3, #1
 8007a2c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8007a30:	7dfa      	ldrb	r2, [r7, #23]
 8007a32:	09d2      	lsrs	r2, r2, #7
 8007a34:	b2d2      	uxtb	r2, r2
 8007a36:	4413      	add	r3, r2
 8007a38:	1c5a      	adds	r2, r3, #1
 8007a3a:	7e7b      	ldrb	r3, [r7, #25]
 8007a3c:	099b      	lsrs	r3, r3, #6
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	3b01      	subs	r3, #1
 8007a42:	fa02 f303 	lsl.w	r3, r2, r3
 8007a46:	461a      	mov	r2, r3
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	601a      	str	r2, [r3, #0]
 8007a4c:	e013      	b.n	8007a76 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8007a4e:	7dbb      	ldrb	r3, [r7, #22]
 8007a50:	109b      	asrs	r3, r3, #2
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	f003 031f 	and.w	r3, r3, #31
 8007a58:	3301      	adds	r3, #1
 8007a5a:	7dfa      	ldrb	r2, [r7, #23]
 8007a5c:	00d2      	lsls	r2, r2, #3
 8007a5e:	f002 0218 	and.w	r2, r2, #24
 8007a62:	7df9      	ldrb	r1, [r7, #23]
 8007a64:	0949      	lsrs	r1, r1, #5
 8007a66:	b2c9      	uxtb	r1, r1
 8007a68:	440a      	add	r2, r1
 8007a6a:	3201      	adds	r2, #1
 8007a6c:	fb02 f303 	mul.w	r3, r2, r3
 8007a70:	461a      	mov	r2, r3
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8007a76:	2300      	movs	r3, #0
 8007a78:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8007a7c:	e055      	b.n	8007b2a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007a7e:	4b34      	ldr	r3, [pc, #208]	@ (8007b50 <USER_SPI_ioctl+0x2dc>)
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	f003 0306 	and.w	r3, r3, #6
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d051      	beq.n	8007b2e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007a8a:	f107 020c 	add.w	r2, r7, #12
 8007a8e:	79fb      	ldrb	r3, [r7, #7]
 8007a90:	210b      	movs	r1, #11
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7ff feee 	bl	8007874 <USER_SPI_ioctl>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d149      	bne.n	8007b32 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007a9e:	7b3b      	ldrb	r3, [r7, #12]
 8007aa0:	099b      	lsrs	r3, r3, #6
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d104      	bne.n	8007ab2 <USER_SPI_ioctl+0x23e>
 8007aa8:	7dbb      	ldrb	r3, [r7, #22]
 8007aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d041      	beq.n	8007b36 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	623b      	str	r3, [r7, #32]
 8007ab6:	6a3b      	ldr	r3, [r7, #32]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007abc:	6a3b      	ldr	r3, [r7, #32]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8007ac2:	4b23      	ldr	r3, [pc, #140]	@ (8007b50 <USER_SPI_ioctl+0x2dc>)
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	f003 0308 	and.w	r3, r3, #8
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d105      	bne.n	8007ada <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8007ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ad0:	025b      	lsls	r3, r3, #9
 8007ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad6:	025b      	lsls	r3, r3, #9
 8007ad8:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8007ada:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007adc:	2020      	movs	r0, #32
 8007ade:	f7ff fc76 	bl	80073ce <send_cmd>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d128      	bne.n	8007b3a <USER_SPI_ioctl+0x2c6>
 8007ae8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007aea:	2021      	movs	r0, #33	@ 0x21
 8007aec:	f7ff fc6f 	bl	80073ce <send_cmd>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d121      	bne.n	8007b3a <USER_SPI_ioctl+0x2c6>
 8007af6:	2100      	movs	r1, #0
 8007af8:	2026      	movs	r0, #38	@ 0x26
 8007afa:	f7ff fc68 	bl	80073ce <send_cmd>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d11a      	bne.n	8007b3a <USER_SPI_ioctl+0x2c6>
 8007b04:	f247 5030 	movw	r0, #30000	@ 0x7530
 8007b08:	f7ff fbba 	bl	8007280 <wait_ready>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d013      	beq.n	8007b3a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8007b12:	2300      	movs	r3, #0
 8007b14:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8007b18:	e00f      	b.n	8007b3a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8007b1a:	2304      	movs	r3, #4
 8007b1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007b20:	e00c      	b.n	8007b3c <USER_SPI_ioctl+0x2c8>
		break;
 8007b22:	bf00      	nop
 8007b24:	e00a      	b.n	8007b3c <USER_SPI_ioctl+0x2c8>
		break;
 8007b26:	bf00      	nop
 8007b28:	e008      	b.n	8007b3c <USER_SPI_ioctl+0x2c8>
		break;
 8007b2a:	bf00      	nop
 8007b2c:	e006      	b.n	8007b3c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007b2e:	bf00      	nop
 8007b30:	e004      	b.n	8007b3c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007b32:	bf00      	nop
 8007b34:	e002      	b.n	8007b3c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007b36:	bf00      	nop
 8007b38:	e000      	b.n	8007b3c <USER_SPI_ioctl+0x2c8>
		break;
 8007b3a:	bf00      	nop
	}

	despiselect();
 8007b3c:	f7ff fbc4 	bl	80072c8 <despiselect>

	return res;
 8007b40:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3730      	adds	r7, #48	@ 0x30
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	20000020 	.word	0x20000020
 8007b50:	200003ec 	.word	0x200003ec

08007b54 <bno055_init>:
 *  make sure your changes will not
 *  affect the reference value of the parameter
 *  (Better case don't change the reference value of the parameter)
 */
BNO055_RETURN_FUNCTION_TYPE bno055_init(struct bno055_t *bno055)
{
 8007b54:	b590      	push	{r4, r7, lr}
 8007b56:	b085      	sub	sp, #20
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8007b5c:	23ff      	movs	r3, #255	@ 0xff
 8007b5e:	73fb      	strb	r3, [r7, #15]
    u8 data_u8 = BNO055_INIT_VALUE;
 8007b60:	2300      	movs	r3, #0
 8007b62:	73bb      	strb	r3, [r7, #14]
    u8 bno055_page_zero_u8 = BNO055_PAGE_ZERO;
 8007b64:	2300      	movs	r3, #0
 8007b66:	737b      	strb	r3, [r7, #13]

    /* Array holding the Software revision id
     */
    u8 a_SW_ID_u8[BNO055_REV_ID_SIZE] = { BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8007b68:	2300      	movs	r3, #0
 8007b6a:	813b      	strh	r3, [r7, #8]

    /* stuct parameters are assign to bno055*/
    p_bno055 = bno055;
 8007b6c:	4a58      	ldr	r2, [pc, #352]	@ (8007cd0 <bno055_init+0x17c>)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6013      	str	r3, [r2, #0]

    /* Write the default page as zero*/
    com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8007b72:	4b57      	ldr	r3, [pc, #348]	@ (8007cd0 <bno055_init+0x17c>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	68dc      	ldr	r4, [r3, #12]
 8007b78:	4b55      	ldr	r3, [pc, #340]	@ (8007cd0 <bno055_init+0x17c>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	7a58      	ldrb	r0, [r3, #9]
 8007b7e:	f107 020d 	add.w	r2, r7, #13
 8007b82:	2301      	movs	r3, #1
 8007b84:	2107      	movs	r1, #7
 8007b86:	47a0      	blx	r4
 8007b88:	4603      	mov	r3, r0
 8007b8a:	73fb      	strb	r3, [r7, #15]
                                               &bno055_page_zero_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);

    /* Read the chip id of the sensor from page
     * zero 0x00 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8007b8c:	4b50      	ldr	r3, [pc, #320]	@ (8007cd0 <bno055_init+0x17c>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	691c      	ldr	r4, [r3, #16]
 8007b92:	4b4f      	ldr	r3, [pc, #316]	@ (8007cd0 <bno055_init+0x17c>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	7a58      	ldrb	r0, [r3, #9]
 8007b98:	f107 020e 	add.w	r2, r7, #14
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	2100      	movs	r1, #0
 8007ba0:	47a0      	blx	r4
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	b2da      	uxtb	r2, r3
 8007ba6:	7bfb      	ldrb	r3, [r7, #15]
 8007ba8:	4413      	add	r3, r2
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	73fb      	strb	r3, [r7, #15]
                                               BNO055_CHIP_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->chip_id = data_u8;
 8007bae:	4b48      	ldr	r3, [pc, #288]	@ (8007cd0 <bno055_init+0x17c>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	7bba      	ldrb	r2, [r7, #14]
 8007bb4:	701a      	strb	r2, [r3, #0]

    /* Read the accel revision id from page
     * zero 0x01 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8007bb6:	4b46      	ldr	r3, [pc, #280]	@ (8007cd0 <bno055_init+0x17c>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	691c      	ldr	r4, [r3, #16]
 8007bbc:	4b44      	ldr	r3, [pc, #272]	@ (8007cd0 <bno055_init+0x17c>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	7a58      	ldrb	r0, [r3, #9]
 8007bc2:	f107 020e 	add.w	r2, r7, #14
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	2101      	movs	r1, #1
 8007bca:	47a0      	blx	r4
 8007bcc:	4603      	mov	r3, r0
 8007bce:	b2da      	uxtb	r2, r3
 8007bd0:	7bfb      	ldrb	r3, [r7, #15]
 8007bd2:	4413      	add	r3, r2
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	73fb      	strb	r3, [r7, #15]
                                               BNO055_ACCEL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->accel_rev_id = data_u8;
 8007bd8:	4b3d      	ldr	r3, [pc, #244]	@ (8007cd0 <bno055_init+0x17c>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	7bba      	ldrb	r2, [r7, #14]
 8007bde:	715a      	strb	r2, [r3, #5]

    /* Read the mag revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8007be0:	4b3b      	ldr	r3, [pc, #236]	@ (8007cd0 <bno055_init+0x17c>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	691c      	ldr	r4, [r3, #16]
 8007be6:	4b3a      	ldr	r3, [pc, #232]	@ (8007cd0 <bno055_init+0x17c>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	7a58      	ldrb	r0, [r3, #9]
 8007bec:	f107 020e 	add.w	r2, r7, #14
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	2102      	movs	r1, #2
 8007bf4:	47a0      	blx	r4
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	b2da      	uxtb	r2, r3
 8007bfa:	7bfb      	ldrb	r3, [r7, #15]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	73fb      	strb	r3, [r7, #15]
                                               BNO055_MAG_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->mag_rev_id = data_u8;
 8007c02:	4b33      	ldr	r3, [pc, #204]	@ (8007cd0 <bno055_init+0x17c>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	7bba      	ldrb	r2, [r7, #14]
 8007c08:	719a      	strb	r2, [r3, #6]

    /* Read the gyro revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8007c0a:	4b31      	ldr	r3, [pc, #196]	@ (8007cd0 <bno055_init+0x17c>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	691c      	ldr	r4, [r3, #16]
 8007c10:	4b2f      	ldr	r3, [pc, #188]	@ (8007cd0 <bno055_init+0x17c>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	7a58      	ldrb	r0, [r3, #9]
 8007c16:	f107 020e 	add.w	r2, r7, #14
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	2103      	movs	r1, #3
 8007c1e:	47a0      	blx	r4
 8007c20:	4603      	mov	r3, r0
 8007c22:	b2da      	uxtb	r2, r3
 8007c24:	7bfb      	ldrb	r3, [r7, #15]
 8007c26:	4413      	add	r3, r2
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	73fb      	strb	r3, [r7, #15]
                                               BNO055_GYRO_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->gyro_rev_id = data_u8;
 8007c2c:	4b28      	ldr	r3, [pc, #160]	@ (8007cd0 <bno055_init+0x17c>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	7bba      	ldrb	r2, [r7, #14]
 8007c32:	71da      	strb	r2, [r3, #7]

    /* Read the boot loader revision from page
     * zero 0x06 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8007c34:	4b26      	ldr	r3, [pc, #152]	@ (8007cd0 <bno055_init+0x17c>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	691c      	ldr	r4, [r3, #16]
 8007c3a:	4b25      	ldr	r3, [pc, #148]	@ (8007cd0 <bno055_init+0x17c>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	7a58      	ldrb	r0, [r3, #9]
 8007c40:	f107 020e 	add.w	r2, r7, #14
 8007c44:	2301      	movs	r3, #1
 8007c46:	2106      	movs	r1, #6
 8007c48:	47a0      	blx	r4
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	b2da      	uxtb	r2, r3
 8007c4e:	7bfb      	ldrb	r3, [r7, #15]
 8007c50:	4413      	add	r3, r2
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	73fb      	strb	r3, [r7, #15]
                                               BNO055_BL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->bl_rev_id = data_u8;
 8007c56:	4b1e      	ldr	r3, [pc, #120]	@ (8007cd0 <bno055_init+0x17c>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	7bba      	ldrb	r2, [r7, #14]
 8007c5c:	721a      	strb	r2, [r3, #8]

    /* Read the software revision id from page
     * zero 0x04 and 0x05 register( 2 bytes of data)*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8007c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8007cd0 <bno055_init+0x17c>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	691c      	ldr	r4, [r3, #16]
 8007c64:	4b1a      	ldr	r3, [pc, #104]	@ (8007cd0 <bno055_init+0x17c>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	7a58      	ldrb	r0, [r3, #9]
 8007c6a:	f107 0208 	add.w	r2, r7, #8
 8007c6e:	2302      	movs	r3, #2
 8007c70:	2104      	movs	r1, #4
 8007c72:	47a0      	blx	r4
 8007c74:	4603      	mov	r3, r0
 8007c76:	b2da      	uxtb	r2, r3
 8007c78:	7bfb      	ldrb	r3, [r7, #15]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	73fb      	strb	r3, [r7, #15]
                                               BNO055_SW_REV_ID_LSB_REG,
                                               a_SW_ID_u8,
                                               BNO055_LSB_MSB_READ_LENGTH);
    a_SW_ID_u8[BNO055_SW_ID_LSB] = BNO055_GET_BITSLICE(a_SW_ID_u8[BNO055_SW_ID_LSB], BNO055_SW_REV_ID_LSB);
 8007c80:	7a3b      	ldrb	r3, [r7, #8]
 8007c82:	723b      	strb	r3, [r7, #8]
    p_bno055->sw_rev_id =
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 8007c84:	7a7b      	ldrb	r3, [r7, #9]
 8007c86:	021b      	lsls	r3, r3, #8
 8007c88:	b29a      	uxth	r2, r3
 8007c8a:	7a3b      	ldrb	r3, [r7, #8]
 8007c8c:	4619      	mov	r1, r3
    p_bno055->sw_rev_id =
 8007c8e:	4b10      	ldr	r3, [pc, #64]	@ (8007cd0 <bno055_init+0x17c>)
 8007c90:	681b      	ldr	r3, [r3, #0]
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 8007c92:	430a      	orrs	r2, r1
 8007c94:	b292      	uxth	r2, r2
    p_bno055->sw_rev_id =
 8007c96:	805a      	strh	r2, [r3, #2]

    /* Read the page id from the register 0x07*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8007c98:	4b0d      	ldr	r3, [pc, #52]	@ (8007cd0 <bno055_init+0x17c>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	691c      	ldr	r4, [r3, #16]
 8007c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8007cd0 <bno055_init+0x17c>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	7a58      	ldrb	r0, [r3, #9]
 8007ca4:	f107 020e 	add.w	r2, r7, #14
 8007ca8:	2301      	movs	r3, #1
 8007caa:	2107      	movs	r1, #7
 8007cac:	47a0      	blx	r4
 8007cae:	4603      	mov	r3, r0
 8007cb0:	b2da      	uxtb	r2, r3
 8007cb2:	7bfb      	ldrb	r3, [r7, #15]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	73fb      	strb	r3, [r7, #15]
                                               BNO055_PAGE_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->page_id = data_u8;
 8007cba:	4b05      	ldr	r3, [pc, #20]	@ (8007cd0 <bno055_init+0x17c>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	7bba      	ldrb	r2, [r7, #14]
 8007cc0:	711a      	strb	r2, [r3, #4]

    return com_rslt;
 8007cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3714      	adds	r7, #20
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd90      	pop	{r4, r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	200003f8 	.word	0x200003f8

08007cd4 <bno055_write_register>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_register(u8 addr_u8, u8 *data_u8, u8 len_u8)
{
 8007cd4:	b590      	push	{r4, r7, lr}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	4603      	mov	r3, r0
 8007cdc:	6039      	str	r1, [r7, #0]
 8007cde:	71fb      	strb	r3, [r7, #7]
 8007ce0:	4613      	mov	r3, r2
 8007ce2:	71bb      	strb	r3, [r7, #6]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8007ce4:	23ff      	movs	r3, #255	@ 0xff
 8007ce6:	73fb      	strb	r3, [r7, #15]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8007ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8007d1c <bno055_write_register+0x48>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d102      	bne.n	8007cf6 <bno055_write_register+0x22>
    {
        return BNO055_E_NULL_PTR;
 8007cf0:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8007cf4:	e00d      	b.n	8007d12 <bno055_write_register+0x3e>
    }
    else
    {
        /* Write the values of respective given register */
        com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr, addr_u8, data_u8, len_u8);
 8007cf6:	4b09      	ldr	r3, [pc, #36]	@ (8007d1c <bno055_write_register+0x48>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68dc      	ldr	r4, [r3, #12]
 8007cfc:	4b07      	ldr	r3, [pc, #28]	@ (8007d1c <bno055_write_register+0x48>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	7a58      	ldrb	r0, [r3, #9]
 8007d02:	79bb      	ldrb	r3, [r7, #6]
 8007d04:	79f9      	ldrb	r1, [r7, #7]
 8007d06:	683a      	ldr	r2, [r7, #0]
 8007d08:	47a0      	blx	r4
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8007d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3714      	adds	r7, #20
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd90      	pop	{r4, r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	200003f8 	.word	0x200003f8

08007d20 <bno055_write_page_id>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_page_id(u8 page_id_u8)
{
 8007d20:	b590      	push	{r4, r7, lr}
 8007d22:	b085      	sub	sp, #20
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	4603      	mov	r3, r0
 8007d28:	71fb      	strb	r3, [r7, #7]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8007d2a:	23ff      	movs	r3, #255	@ 0xff
 8007d2c:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8007d32:	4b1e      	ldr	r3, [pc, #120]	@ (8007dac <bno055_write_page_id+0x8c>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d102      	bne.n	8007d40 <bno055_write_page_id+0x20>
    {
        return BNO055_E_NULL_PTR;
 8007d3a:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8007d3e:	e030      	b.n	8007da2 <bno055_write_page_id+0x82>
    }
    else
    {
        /* Read the current page*/
        com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8007d40:	4b1a      	ldr	r3, [pc, #104]	@ (8007dac <bno055_write_page_id+0x8c>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	691c      	ldr	r4, [r3, #16]
 8007d46:	4b19      	ldr	r3, [pc, #100]	@ (8007dac <bno055_write_page_id+0x8c>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	7a58      	ldrb	r0, [r3, #9]
 8007d4c:	f107 020e 	add.w	r2, r7, #14
 8007d50:	2301      	movs	r3, #1
 8007d52:	2107      	movs	r1, #7
 8007d54:	47a0      	blx	r4
 8007d56:	4603      	mov	r3, r0
 8007d58:	73fb      	strb	r3, [r7, #15]
                                                  BNO055_PAGE_ID_REG,
                                                  &data_u8r,
                                                  BNO055_GEN_READ_WRITE_LENGTH);

        /* Check condition for communication BNO055_SUCCESS*/
        if (com_rslt == BNO055_SUCCESS)
 8007d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d11b      	bne.n	8007d9a <bno055_write_page_id+0x7a>
        {
            data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_PAGE_ID, page_id_u8);
 8007d62:	79fb      	ldrb	r3, [r7, #7]
 8007d64:	73bb      	strb	r3, [r7, #14]

            /* Write the page id*/
            com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8007d66:	4b11      	ldr	r3, [pc, #68]	@ (8007dac <bno055_write_page_id+0x8c>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68dc      	ldr	r4, [r3, #12]
 8007d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8007dac <bno055_write_page_id+0x8c>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	7a58      	ldrb	r0, [r3, #9]
 8007d72:	f107 020e 	add.w	r2, r7, #14
 8007d76:	2301      	movs	r3, #1
 8007d78:	2107      	movs	r1, #7
 8007d7a:	47a0      	blx	r4
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	b2da      	uxtb	r2, r3
 8007d80:	7bfb      	ldrb	r3, [r7, #15]
 8007d82:	4413      	add	r3, r2
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	73fb      	strb	r3, [r7, #15]
                                                        BNO055_PAGE_ID_REG,
                                                        &data_u8r,
                                                        BNO055_GEN_READ_WRITE_LENGTH);
            if (com_rslt == BNO055_SUCCESS)
 8007d88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d106      	bne.n	8007d9e <bno055_write_page_id+0x7e>
            {
                p_bno055->page_id = page_id_u8;
 8007d90:	4b06      	ldr	r3, [pc, #24]	@ (8007dac <bno055_write_page_id+0x8c>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	79fa      	ldrb	r2, [r7, #7]
 8007d96:	711a      	strb	r2, [r3, #4]
 8007d98:	e001      	b.n	8007d9e <bno055_write_page_id+0x7e>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8007d9a:	23ff      	movs	r3, #255	@ 0xff
 8007d9c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8007d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3714      	adds	r7, #20
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd90      	pop	{r4, r7, pc}
 8007daa:	bf00      	nop
 8007dac:	200003f8 	.word	0x200003f8

08007db0 <bno055_set_accel_unit>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_accel_unit(u8 accel_unit_u8)
{
 8007db0:	b590      	push	{r4, r7, lr}
 8007db2:	b085      	sub	sp, #20
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	4603      	mov	r3, r0
 8007db8:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8007dba:	23ff      	movs	r3, #255	@ 0xff
 8007dbc:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8007dc6:	23ff      	movs	r3, #255	@ 0xff
 8007dc8:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8007dca:	4b35      	ldr	r3, [pc, #212]	@ (8007ea0 <bno055_set_accel_unit+0xf0>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d102      	bne.n	8007dd8 <bno055_set_accel_unit+0x28>
    {
        return BNO055_E_NULL_PTR;
 8007dd2:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8007dd6:	e05f      	b.n	8007e98 <bno055_set_accel_unit+0xe8>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8007dd8:	f107 030c 	add.w	r3, r7, #12
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f000 f9d5 	bl	800818c <bno055_get_operation_mode>
 8007de2:	4603      	mov	r3, r0
 8007de4:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8007de6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d143      	bne.n	8007e76 <bno055_set_accel_unit+0xc6>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8007dee:	7b3b      	ldrb	r3, [r7, #12]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d008      	beq.n	8007e06 <bno055_set_accel_unit+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 8007df4:	2000      	movs	r0, #0
 8007df6:	f000 fa0b 	bl	8008210 <bno055_set_operation_mode>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	b2da      	uxtb	r2, r3
 8007dfe:	7bbb      	ldrb	r3, [r7, #14]
 8007e00:	4413      	add	r3, r2
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 8007e06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d130      	bne.n	8007e70 <bno055_set_accel_unit+0xc0>
            {
                /* Write the accel unit */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8007e0e:	4b24      	ldr	r3, [pc, #144]	@ (8007ea0 <bno055_set_accel_unit+0xf0>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	691c      	ldr	r4, [r3, #16]
 8007e14:	4b22      	ldr	r3, [pc, #136]	@ (8007ea0 <bno055_set_accel_unit+0xf0>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	7a58      	ldrb	r0, [r3, #9]
 8007e1a:	f107 020d 	add.w	r2, r7, #13
 8007e1e:	2301      	movs	r3, #1
 8007e20:	213b      	movs	r1, #59	@ 0x3b
 8007e22:	47a0      	blx	r4
 8007e24:	4603      	mov	r3, r0
 8007e26:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_ACCEL_UNIT_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8007e28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d124      	bne.n	8007e7a <bno055_set_accel_unit+0xca>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_ACCEL_UNIT, accel_unit_u8);
 8007e30:	7b7b      	ldrb	r3, [r7, #13]
 8007e32:	b25b      	sxtb	r3, r3
 8007e34:	f023 0301 	bic.w	r3, r3, #1
 8007e38:	b25a      	sxtb	r2, r3
 8007e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e3e:	f003 0301 	and.w	r3, r3, #1
 8007e42:	b25b      	sxtb	r3, r3
 8007e44:	4313      	orrs	r3, r2
 8007e46:	b25b      	sxtb	r3, r3
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8007e4c:	4b14      	ldr	r3, [pc, #80]	@ (8007ea0 <bno055_set_accel_unit+0xf0>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	68dc      	ldr	r4, [r3, #12]
 8007e52:	4b13      	ldr	r3, [pc, #76]	@ (8007ea0 <bno055_set_accel_unit+0xf0>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	7a58      	ldrb	r0, [r3, #9]
 8007e58:	f107 020d 	add.w	r2, r7, #13
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	213b      	movs	r1, #59	@ 0x3b
 8007e60:	47a0      	blx	r4
 8007e62:	4603      	mov	r3, r0
 8007e64:	b2da      	uxtb	r2, r3
 8007e66:	7bfb      	ldrb	r3, [r7, #15]
 8007e68:	4413      	add	r3, r2
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	73fb      	strb	r3, [r7, #15]
 8007e6e:	e004      	b.n	8007e7a <bno055_set_accel_unit+0xca>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 8007e70:	23ff      	movs	r3, #255	@ 0xff
 8007e72:	73fb      	strb	r3, [r7, #15]
 8007e74:	e001      	b.n	8007e7a <bno055_set_accel_unit+0xca>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8007e76:	23ff      	movs	r3, #255	@ 0xff
 8007e78:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8007e7a:	7b3b      	ldrb	r3, [r7, #12]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d009      	beq.n	8007e94 <bno055_set_accel_unit+0xe4>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 8007e80:	7b3b      	ldrb	r3, [r7, #12]
 8007e82:	4618      	mov	r0, r3
 8007e84:	f000 f9c4 	bl	8008210 <bno055_set_operation_mode>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	b2da      	uxtb	r2, r3
 8007e8c:	7bfb      	ldrb	r3, [r7, #15]
 8007e8e:	4413      	add	r3, r2
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8007e94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3714      	adds	r7, #20
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd90      	pop	{r4, r7, pc}
 8007ea0:	200003f8 	.word	0x200003f8

08007ea4 <bno055_set_gyro_unit>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_gyro_unit(u8 gyro_unit_u8)
{
 8007ea4:	b590      	push	{r4, r7, lr}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	4603      	mov	r3, r0
 8007eac:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8007eae:	23ff      	movs	r3, #255	@ 0xff
 8007eb0:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8007eba:	23ff      	movs	r3, #255	@ 0xff
 8007ebc:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8007ebe:	4b36      	ldr	r3, [pc, #216]	@ (8007f98 <bno055_set_gyro_unit+0xf4>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d102      	bne.n	8007ecc <bno055_set_gyro_unit+0x28>
    {
        return BNO055_E_NULL_PTR;
 8007ec6:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8007eca:	e060      	b.n	8007f8e <bno055_set_gyro_unit+0xea>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8007ecc:	f107 030c 	add.w	r3, r7, #12
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f000 f95b 	bl	800818c <bno055_get_operation_mode>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8007eda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d144      	bne.n	8007f6c <bno055_set_gyro_unit+0xc8>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8007ee2:	7b3b      	ldrb	r3, [r7, #12]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d008      	beq.n	8007efa <bno055_set_gyro_unit+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 8007ee8:	2000      	movs	r0, #0
 8007eea:	f000 f991 	bl	8008210 <bno055_set_operation_mode>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	b2da      	uxtb	r2, r3
 8007ef2:	7bbb      	ldrb	r3, [r7, #14]
 8007ef4:	4413      	add	r3, r2
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 8007efa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d131      	bne.n	8007f66 <bno055_set_gyro_unit+0xc2>
            {
                /* Write the gyro unit */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8007f02:	4b25      	ldr	r3, [pc, #148]	@ (8007f98 <bno055_set_gyro_unit+0xf4>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	691c      	ldr	r4, [r3, #16]
 8007f08:	4b23      	ldr	r3, [pc, #140]	@ (8007f98 <bno055_set_gyro_unit+0xf4>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	7a58      	ldrb	r0, [r3, #9]
 8007f0e:	f107 020d 	add.w	r2, r7, #13
 8007f12:	2301      	movs	r3, #1
 8007f14:	213b      	movs	r1, #59	@ 0x3b
 8007f16:	47a0      	blx	r4
 8007f18:	4603      	mov	r3, r0
 8007f1a:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_GYRO_UNIT_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8007f1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d125      	bne.n	8007f70 <bno055_set_gyro_unit+0xcc>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_GYRO_UNIT, gyro_unit_u8);
 8007f24:	7b7b      	ldrb	r3, [r7, #13]
 8007f26:	b25b      	sxtb	r3, r3
 8007f28:	f023 0302 	bic.w	r3, r3, #2
 8007f2c:	b25a      	sxtb	r2, r3
 8007f2e:	79fb      	ldrb	r3, [r7, #7]
 8007f30:	005b      	lsls	r3, r3, #1
 8007f32:	b25b      	sxtb	r3, r3
 8007f34:	f003 0302 	and.w	r3, r3, #2
 8007f38:	b25b      	sxtb	r3, r3
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	b25b      	sxtb	r3, r3
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8007f42:	4b15      	ldr	r3, [pc, #84]	@ (8007f98 <bno055_set_gyro_unit+0xf4>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	68dc      	ldr	r4, [r3, #12]
 8007f48:	4b13      	ldr	r3, [pc, #76]	@ (8007f98 <bno055_set_gyro_unit+0xf4>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	7a58      	ldrb	r0, [r3, #9]
 8007f4e:	f107 020d 	add.w	r2, r7, #13
 8007f52:	2301      	movs	r3, #1
 8007f54:	213b      	movs	r1, #59	@ 0x3b
 8007f56:	47a0      	blx	r4
 8007f58:	4603      	mov	r3, r0
 8007f5a:	b2da      	uxtb	r2, r3
 8007f5c:	7bfb      	ldrb	r3, [r7, #15]
 8007f5e:	4413      	add	r3, r2
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	73fb      	strb	r3, [r7, #15]
 8007f64:	e004      	b.n	8007f70 <bno055_set_gyro_unit+0xcc>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 8007f66:	23ff      	movs	r3, #255	@ 0xff
 8007f68:	73fb      	strb	r3, [r7, #15]
 8007f6a:	e001      	b.n	8007f70 <bno055_set_gyro_unit+0xcc>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8007f6c:	23ff      	movs	r3, #255	@ 0xff
 8007f6e:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8007f70:	7b3b      	ldrb	r3, [r7, #12]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d009      	beq.n	8007f8a <bno055_set_gyro_unit+0xe6>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 8007f76:	7b3b      	ldrb	r3, [r7, #12]
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f000 f949 	bl	8008210 <bno055_set_operation_mode>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	b2da      	uxtb	r2, r3
 8007f82:	7bfb      	ldrb	r3, [r7, #15]
 8007f84:	4413      	add	r3, r2
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8007f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3714      	adds	r7, #20
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd90      	pop	{r4, r7, pc}
 8007f96:	bf00      	nop
 8007f98:	200003f8 	.word	0x200003f8

08007f9c <bno055_set_euler_unit>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_euler_unit(u8 euler_unit_u8)
{
 8007f9c:	b590      	push	{r4, r7, lr}
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8007fa6:	23ff      	movs	r3, #255	@ 0xff
 8007fa8:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8007faa:	2300      	movs	r3, #0
 8007fac:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8007fb2:	23ff      	movs	r3, #255	@ 0xff
 8007fb4:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8007fb6:	4b36      	ldr	r3, [pc, #216]	@ (8008090 <bno055_set_euler_unit+0xf4>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d102      	bne.n	8007fc4 <bno055_set_euler_unit+0x28>
    {
        return BNO055_E_NULL_PTR;
 8007fbe:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8007fc2:	e060      	b.n	8008086 <bno055_set_euler_unit+0xea>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8007fc4:	f107 030c 	add.w	r3, r7, #12
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f000 f8df 	bl	800818c <bno055_get_operation_mode>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8007fd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d144      	bne.n	8008064 <bno055_set_euler_unit+0xc8>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8007fda:	7b3b      	ldrb	r3, [r7, #12]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d008      	beq.n	8007ff2 <bno055_set_euler_unit+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 8007fe0:	2000      	movs	r0, #0
 8007fe2:	f000 f915 	bl	8008210 <bno055_set_operation_mode>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	b2da      	uxtb	r2, r3
 8007fea:	7bbb      	ldrb	r3, [r7, #14]
 8007fec:	4413      	add	r3, r2
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 8007ff2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d131      	bne.n	800805e <bno055_set_euler_unit+0xc2>
            {
                /* Write the Euler unit*/
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8007ffa:	4b25      	ldr	r3, [pc, #148]	@ (8008090 <bno055_set_euler_unit+0xf4>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	691c      	ldr	r4, [r3, #16]
 8008000:	4b23      	ldr	r3, [pc, #140]	@ (8008090 <bno055_set_euler_unit+0xf4>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	7a58      	ldrb	r0, [r3, #9]
 8008006:	f107 020d 	add.w	r2, r7, #13
 800800a:	2301      	movs	r3, #1
 800800c:	213b      	movs	r1, #59	@ 0x3b
 800800e:	47a0      	blx	r4
 8008010:	4603      	mov	r3, r0
 8008012:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_EULER_UNIT_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8008014:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d125      	bne.n	8008068 <bno055_set_euler_unit+0xcc>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_EULER_UNIT, euler_unit_u8);
 800801c:	7b7b      	ldrb	r3, [r7, #13]
 800801e:	b25b      	sxtb	r3, r3
 8008020:	f023 0304 	bic.w	r3, r3, #4
 8008024:	b25a      	sxtb	r2, r3
 8008026:	79fb      	ldrb	r3, [r7, #7]
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	b25b      	sxtb	r3, r3
 800802c:	f003 0304 	and.w	r3, r3, #4
 8008030:	b25b      	sxtb	r3, r3
 8008032:	4313      	orrs	r3, r2
 8008034:	b25b      	sxtb	r3, r3
 8008036:	b2db      	uxtb	r3, r3
 8008038:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 800803a:	4b15      	ldr	r3, [pc, #84]	@ (8008090 <bno055_set_euler_unit+0xf4>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	68dc      	ldr	r4, [r3, #12]
 8008040:	4b13      	ldr	r3, [pc, #76]	@ (8008090 <bno055_set_euler_unit+0xf4>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	7a58      	ldrb	r0, [r3, #9]
 8008046:	f107 020d 	add.w	r2, r7, #13
 800804a:	2301      	movs	r3, #1
 800804c:	213b      	movs	r1, #59	@ 0x3b
 800804e:	47a0      	blx	r4
 8008050:	4603      	mov	r3, r0
 8008052:	b2da      	uxtb	r2, r3
 8008054:	7bfb      	ldrb	r3, [r7, #15]
 8008056:	4413      	add	r3, r2
 8008058:	b2db      	uxtb	r3, r3
 800805a:	73fb      	strb	r3, [r7, #15]
 800805c:	e004      	b.n	8008068 <bno055_set_euler_unit+0xcc>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 800805e:	23ff      	movs	r3, #255	@ 0xff
 8008060:	73fb      	strb	r3, [r7, #15]
 8008062:	e001      	b.n	8008068 <bno055_set_euler_unit+0xcc>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8008064:	23ff      	movs	r3, #255	@ 0xff
 8008066:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8008068:	7b3b      	ldrb	r3, [r7, #12]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d009      	beq.n	8008082 <bno055_set_euler_unit+0xe6>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 800806e:	7b3b      	ldrb	r3, [r7, #12]
 8008070:	4618      	mov	r0, r3
 8008072:	f000 f8cd 	bl	8008210 <bno055_set_operation_mode>
 8008076:	4603      	mov	r3, r0
 8008078:	b2da      	uxtb	r2, r3
 800807a:	7bfb      	ldrb	r3, [r7, #15]
 800807c:	4413      	add	r3, r2
 800807e:	b2db      	uxtb	r3, r3
 8008080:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8008082:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008086:	4618      	mov	r0, r3
 8008088:	3714      	adds	r7, #20
 800808a:	46bd      	mov	sp, r7
 800808c:	bd90      	pop	{r4, r7, pc}
 800808e:	bf00      	nop
 8008090:	200003f8 	.word	0x200003f8

08008094 <bno055_set_temp_unit>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_temp_unit(u8 temp_unit_u8)
{
 8008094:	b590      	push	{r4, r7, lr}
 8008096:	b085      	sub	sp, #20
 8008098:	af00      	add	r7, sp, #0
 800809a:	4603      	mov	r3, r0
 800809c:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 800809e:	23ff      	movs	r3, #255	@ 0xff
 80080a0:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 80080a2:	2300      	movs	r3, #0
 80080a4:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 80080a6:	2300      	movs	r3, #0
 80080a8:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 80080aa:	23ff      	movs	r3, #255	@ 0xff
 80080ac:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80080ae:	4b36      	ldr	r3, [pc, #216]	@ (8008188 <bno055_set_temp_unit+0xf4>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d102      	bne.n	80080bc <bno055_set_temp_unit+0x28>
    {
        return BNO055_E_NULL_PTR;
 80080b6:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 80080ba:	e060      	b.n	800817e <bno055_set_temp_unit+0xea>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 80080bc:	f107 030c 	add.w	r3, r7, #12
 80080c0:	4618      	mov	r0, r3
 80080c2:	f000 f863 	bl	800818c <bno055_get_operation_mode>
 80080c6:	4603      	mov	r3, r0
 80080c8:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 80080ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d144      	bne.n	800815c <bno055_set_temp_unit+0xc8>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 80080d2:	7b3b      	ldrb	r3, [r7, #12]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d008      	beq.n	80080ea <bno055_set_temp_unit+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 80080d8:	2000      	movs	r0, #0
 80080da:	f000 f899 	bl	8008210 <bno055_set_operation_mode>
 80080de:	4603      	mov	r3, r0
 80080e0:	b2da      	uxtb	r2, r3
 80080e2:	7bbb      	ldrb	r3, [r7, #14]
 80080e4:	4413      	add	r3, r2
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 80080ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d131      	bne.n	8008156 <bno055_set_temp_unit+0xc2>
            {
                /* Write the temperature unit */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80080f2:	4b25      	ldr	r3, [pc, #148]	@ (8008188 <bno055_set_temp_unit+0xf4>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	691c      	ldr	r4, [r3, #16]
 80080f8:	4b23      	ldr	r3, [pc, #140]	@ (8008188 <bno055_set_temp_unit+0xf4>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	7a58      	ldrb	r0, [r3, #9]
 80080fe:	f107 020d 	add.w	r2, r7, #13
 8008102:	2301      	movs	r3, #1
 8008104:	213b      	movs	r1, #59	@ 0x3b
 8008106:	47a0      	blx	r4
 8008108:	4603      	mov	r3, r0
 800810a:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_TEMP_UNIT_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 800810c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d125      	bne.n	8008160 <bno055_set_temp_unit+0xcc>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_TEMP_UNIT, temp_unit_u8);
 8008114:	7b7b      	ldrb	r3, [r7, #13]
 8008116:	b25b      	sxtb	r3, r3
 8008118:	f023 0310 	bic.w	r3, r3, #16
 800811c:	b25a      	sxtb	r2, r3
 800811e:	79fb      	ldrb	r3, [r7, #7]
 8008120:	011b      	lsls	r3, r3, #4
 8008122:	b25b      	sxtb	r3, r3
 8008124:	f003 0310 	and.w	r3, r3, #16
 8008128:	b25b      	sxtb	r3, r3
 800812a:	4313      	orrs	r3, r2
 800812c:	b25b      	sxtb	r3, r3
 800812e:	b2db      	uxtb	r3, r3
 8008130:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8008132:	4b15      	ldr	r3, [pc, #84]	@ (8008188 <bno055_set_temp_unit+0xf4>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	68dc      	ldr	r4, [r3, #12]
 8008138:	4b13      	ldr	r3, [pc, #76]	@ (8008188 <bno055_set_temp_unit+0xf4>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	7a58      	ldrb	r0, [r3, #9]
 800813e:	f107 020d 	add.w	r2, r7, #13
 8008142:	2301      	movs	r3, #1
 8008144:	213b      	movs	r1, #59	@ 0x3b
 8008146:	47a0      	blx	r4
 8008148:	4603      	mov	r3, r0
 800814a:	b2da      	uxtb	r2, r3
 800814c:	7bfb      	ldrb	r3, [r7, #15]
 800814e:	4413      	add	r3, r2
 8008150:	b2db      	uxtb	r3, r3
 8008152:	73fb      	strb	r3, [r7, #15]
 8008154:	e004      	b.n	8008160 <bno055_set_temp_unit+0xcc>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 8008156:	23ff      	movs	r3, #255	@ 0xff
 8008158:	73fb      	strb	r3, [r7, #15]
 800815a:	e001      	b.n	8008160 <bno055_set_temp_unit+0xcc>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 800815c:	23ff      	movs	r3, #255	@ 0xff
 800815e:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8008160:	7b3b      	ldrb	r3, [r7, #12]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d009      	beq.n	800817a <bno055_set_temp_unit+0xe6>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 8008166:	7b3b      	ldrb	r3, [r7, #12]
 8008168:	4618      	mov	r0, r3
 800816a:	f000 f851 	bl	8008210 <bno055_set_operation_mode>
 800816e:	4603      	mov	r3, r0
 8008170:	b2da      	uxtb	r2, r3
 8008172:	7bfb      	ldrb	r3, [r7, #15]
 8008174:	4413      	add	r3, r2
 8008176:	b2db      	uxtb	r3, r3
 8008178:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 800817a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800817e:	4618      	mov	r0, r3
 8008180:	3714      	adds	r7, #20
 8008182:	46bd      	mov	sp, r7
 8008184:	bd90      	pop	{r4, r7, pc}
 8008186:	bf00      	nop
 8008188:	200003f8 	.word	0x200003f8

0800818c <bno055_get_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_operation_mode(u8 *operation_mode_u8)
{
 800818c:	b590      	push	{r4, r7, lr}
 800818e:	b085      	sub	sp, #20
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8008194:	23ff      	movs	r3, #255	@ 0xff
 8008196:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8008198:	2300      	movs	r3, #0
 800819a:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 800819c:	23ff      	movs	r3, #255	@ 0xff
 800819e:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80081a0:	4b1a      	ldr	r3, [pc, #104]	@ (800820c <bno055_get_operation_mode+0x80>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d102      	bne.n	80081ae <bno055_get_operation_mode+0x22>
    {
        return BNO055_E_NULL_PTR;
 80081a8:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 80081ac:	e02a      	b.n	8008204 <bno055_get_operation_mode+0x78>
    }
    else
    {
        /*condition check for page, operation mode is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 80081ae:	4b17      	ldr	r3, [pc, #92]	@ (800820c <bno055_get_operation_mode+0x80>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	791b      	ldrb	r3, [r3, #4]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d004      	beq.n	80081c2 <bno055_get_operation_mode+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 80081b8:	2000      	movs	r0, #0
 80081ba:	f7ff fdb1 	bl	8007d20 <bno055_write_page_id>
 80081be:	4603      	mov	r3, r0
 80081c0:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 80081c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d004      	beq.n	80081d4 <bno055_get_operation_mode+0x48>
 80081ca:	4b10      	ldr	r3, [pc, #64]	@ (800820c <bno055_get_operation_mode+0x80>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	791b      	ldrb	r3, [r3, #4]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d113      	bne.n	80081fc <bno055_get_operation_mode+0x70>
        {
            /* Read the value of operation mode*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80081d4:	4b0d      	ldr	r3, [pc, #52]	@ (800820c <bno055_get_operation_mode+0x80>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	691c      	ldr	r4, [r3, #16]
 80081da:	4b0c      	ldr	r3, [pc, #48]	@ (800820c <bno055_get_operation_mode+0x80>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	7a58      	ldrb	r0, [r3, #9]
 80081e0:	f107 020d 	add.w	r2, r7, #13
 80081e4:	2301      	movs	r3, #1
 80081e6:	213d      	movs	r1, #61	@ 0x3d
 80081e8:	47a0      	blx	r4
 80081ea:	4603      	mov	r3, r0
 80081ec:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_OPERATION_MODE_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *operation_mode_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_OPERATION_MODE);
 80081ee:	7b7b      	ldrb	r3, [r7, #13]
 80081f0:	f003 030f 	and.w	r3, r3, #15
 80081f4:	b2da      	uxtb	r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	701a      	strb	r2, [r3, #0]
 80081fa:	e001      	b.n	8008200 <bno055_get_operation_mode+0x74>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 80081fc:	23ff      	movs	r3, #255	@ 0xff
 80081fe:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8008200:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008204:	4618      	mov	r0, r3
 8008206:	3714      	adds	r7, #20
 8008208:	46bd      	mov	sp, r7
 800820a:	bd90      	pop	{r4, r7, pc}
 800820c:	200003f8 	.word	0x200003f8

08008210 <bno055_set_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_operation_mode(u8 operation_mode_u8)
{
 8008210:	b590      	push	{r4, r7, lr}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 8008216:	4603      	mov	r3, r0
 8008218:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 800821a:	23ff      	movs	r3, #255	@ 0xff
 800821c:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 800821e:	2300      	movs	r3, #0
 8008220:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8008222:	2300      	movs	r3, #0
 8008224:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8008226:	23ff      	movs	r3, #255	@ 0xff
 8008228:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 800822a:	4b5c      	ldr	r3, [pc, #368]	@ (800839c <bno055_set_operation_mode+0x18c>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d102      	bne.n	8008238 <bno055_set_operation_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 8008232:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8008236:	e0ac      	b.n	8008392 <bno055_set_operation_mode+0x182>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8008238:	f107 030c 	add.w	r3, r7, #12
 800823c:	4618      	mov	r0, r3
 800823e:	f7ff ffa5 	bl	800818c <bno055_get_operation_mode>
 8008242:	4603      	mov	r3, r0
 8008244:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8008246:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800824a:	2b00      	cmp	r3, #0
 800824c:	f040 809d 	bne.w	800838a <bno055_set_operation_mode+0x17a>
        {
            /* If the previous operation mode is config it is
             * directly write the operation mode */
            if (prev_opmode_u8 == BNO055_OPERATION_MODE_CONFIG)
 8008250:	7b3b      	ldrb	r3, [r7, #12]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d137      	bne.n	80082c6 <bno055_set_operation_mode+0xb6>
            {
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8008256:	4b51      	ldr	r3, [pc, #324]	@ (800839c <bno055_set_operation_mode+0x18c>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	691c      	ldr	r4, [r3, #16]
 800825c:	4b4f      	ldr	r3, [pc, #316]	@ (800839c <bno055_set_operation_mode+0x18c>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	7a58      	ldrb	r0, [r3, #9]
 8008262:	f107 020d 	add.w	r2, r7, #13
 8008266:	2301      	movs	r3, #1
 8008268:	213d      	movs	r1, #61	@ 0x3d
 800826a:	47a0      	blx	r4
 800826c:	4603      	mov	r3, r0
 800826e:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8008270:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008274:	2b00      	cmp	r3, #0
 8008276:	f040 808a 	bne.w	800838e <bno055_set_operation_mode+0x17e>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 800827a:	7b7b      	ldrb	r3, [r7, #13]
 800827c:	b25b      	sxtb	r3, r3
 800827e:	f023 030f 	bic.w	r3, r3, #15
 8008282:	b25a      	sxtb	r2, r3
 8008284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008288:	f003 030f 	and.w	r3, r3, #15
 800828c:	b25b      	sxtb	r3, r3
 800828e:	4313      	orrs	r3, r2
 8008290:	b25b      	sxtb	r3, r3
 8008292:	b2db      	uxtb	r3, r3
 8008294:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8008296:	4b41      	ldr	r3, [pc, #260]	@ (800839c <bno055_set_operation_mode+0x18c>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68dc      	ldr	r4, [r3, #12]
 800829c:	4b3f      	ldr	r3, [pc, #252]	@ (800839c <bno055_set_operation_mode+0x18c>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	7a58      	ldrb	r0, [r3, #9]
 80082a2:	f107 020d 	add.w	r2, r7, #13
 80082a6:	2301      	movs	r3, #1
 80082a8:	213d      	movs	r1, #61	@ 0x3d
 80082aa:	47a0      	blx	r4
 80082ac:	4603      	mov	r3, r0
 80082ae:	b2da      	uxtb	r2, r3
 80082b0:	7bfb      	ldrb	r3, [r7, #15]
 80082b2:	4413      	add	r3, r2
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	73fb      	strb	r3, [r7, #15]
                                                                BNO055_GEN_READ_WRITE_LENGTH);

                    /* Config mode to other
                     * operation mode switching
                     * required delay of 600ms*/
                    p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 80082b8:	4b38      	ldr	r3, [pc, #224]	@ (800839c <bno055_set_operation_mode+0x18c>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	695b      	ldr	r3, [r3, #20]
 80082be:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80082c2:	4798      	blx	r3
 80082c4:	e063      	b.n	800838e <bno055_set_operation_mode+0x17e>
            else
            {
                /* If the previous operation
                 * mode is not config it is
                 * write the config mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80082c6:	4b35      	ldr	r3, [pc, #212]	@ (800839c <bno055_set_operation_mode+0x18c>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	691c      	ldr	r4, [r3, #16]
 80082cc:	4b33      	ldr	r3, [pc, #204]	@ (800839c <bno055_set_operation_mode+0x18c>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	7a58      	ldrb	r0, [r3, #9]
 80082d2:	f107 020d 	add.w	r2, r7, #13
 80082d6:	2301      	movs	r3, #1
 80082d8:	213d      	movs	r1, #61	@ 0x3d
 80082da:	47a0      	blx	r4
 80082dc:	4603      	mov	r3, r0
 80082de:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 80082e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d116      	bne.n	8008316 <bno055_set_operation_mode+0x106>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, BNO055_OPERATION_MODE_CONFIG);
 80082e8:	7b7b      	ldrb	r3, [r7, #13]
 80082ea:	f023 030f 	bic.w	r3, r3, #15
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	737b      	strb	r3, [r7, #13]
                    com_rslt +=
                        bno055_write_register(BNO055_OPERATION_MODE_REG, &data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
 80082f2:	f107 030d 	add.w	r3, r7, #13
 80082f6:	2201      	movs	r2, #1
 80082f8:	4619      	mov	r1, r3
 80082fa:	203d      	movs	r0, #61	@ 0x3d
 80082fc:	f7ff fcea 	bl	8007cd4 <bno055_write_register>
 8008300:	4603      	mov	r3, r0
 8008302:	b2da      	uxtb	r2, r3
                    com_rslt +=
 8008304:	7bfb      	ldrb	r3, [r7, #15]
 8008306:	4413      	add	r3, r2
 8008308:	b2db      	uxtb	r3, r3
 800830a:	73fb      	strb	r3, [r7, #15]

                    /* other mode to config mode switching
                     * required delay of 20ms*/
                    p_bno055->delay_msec(BNO055_CONFIG_MODE_SWITCHING_DELAY);
 800830c:	4b23      	ldr	r3, [pc, #140]	@ (800839c <bno055_set_operation_mode+0x18c>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	695b      	ldr	r3, [r3, #20]
 8008312:	2014      	movs	r0, #20
 8008314:	4798      	blx	r3
                }

                /* Write the operation mode */
                if (operation_mode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8008316:	79fb      	ldrb	r3, [r7, #7]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d038      	beq.n	800838e <bno055_set_operation_mode+0x17e>
                {
                    com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800831c:	4b1f      	ldr	r3, [pc, #124]	@ (800839c <bno055_set_operation_mode+0x18c>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	691c      	ldr	r4, [r3, #16]
 8008322:	4b1e      	ldr	r3, [pc, #120]	@ (800839c <bno055_set_operation_mode+0x18c>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	7a58      	ldrb	r0, [r3, #9]
 8008328:	f107 020d 	add.w	r2, r7, #13
 800832c:	2301      	movs	r3, #1
 800832e:	213d      	movs	r1, #61	@ 0x3d
 8008330:	47a0      	blx	r4
 8008332:	4603      	mov	r3, r0
 8008334:	73fb      	strb	r3, [r7, #15]
                                                              BNO055_OPERATION_MODE_REG,
                                                              &data_u8r,
                                                              BNO055_GEN_READ_WRITE_LENGTH);
                    if (com_rslt == BNO055_SUCCESS)
 8008336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d127      	bne.n	800838e <bno055_set_operation_mode+0x17e>
                    {
                        data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 800833e:	7b7b      	ldrb	r3, [r7, #13]
 8008340:	b25b      	sxtb	r3, r3
 8008342:	f023 030f 	bic.w	r3, r3, #15
 8008346:	b25a      	sxtb	r2, r3
 8008348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800834c:	f003 030f 	and.w	r3, r3, #15
 8008350:	b25b      	sxtb	r3, r3
 8008352:	4313      	orrs	r3, r2
 8008354:	b25b      	sxtb	r3, r3
 8008356:	b2db      	uxtb	r3, r3
 8008358:	737b      	strb	r3, [r7, #13]
                        com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 800835a:	4b10      	ldr	r3, [pc, #64]	@ (800839c <bno055_set_operation_mode+0x18c>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	68dc      	ldr	r4, [r3, #12]
 8008360:	4b0e      	ldr	r3, [pc, #56]	@ (800839c <bno055_set_operation_mode+0x18c>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	7a58      	ldrb	r0, [r3, #9]
 8008366:	f107 020d 	add.w	r2, r7, #13
 800836a:	2301      	movs	r3, #1
 800836c:	213d      	movs	r1, #61	@ 0x3d
 800836e:	47a0      	blx	r4
 8008370:	4603      	mov	r3, r0
 8008372:	b2da      	uxtb	r2, r3
 8008374:	7bfb      	ldrb	r3, [r7, #15]
 8008376:	4413      	add	r3, r2
 8008378:	b2db      	uxtb	r3, r3
 800837a:	73fb      	strb	r3, [r7, #15]
                                                                    BNO055_GEN_READ_WRITE_LENGTH);

                        /* Config mode to other
                         * operation mode switching
                         * required delay of 600ms*/
                        p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 800837c:	4b07      	ldr	r3, [pc, #28]	@ (800839c <bno055_set_operation_mode+0x18c>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	695b      	ldr	r3, [r3, #20]
 8008382:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8008386:	4798      	blx	r3
 8008388:	e001      	b.n	800838e <bno055_set_operation_mode+0x17e>
                }
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 800838a:	23ff      	movs	r3, #255	@ 0xff
 800838c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 800838e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008392:	4618      	mov	r0, r3
 8008394:	3714      	adds	r7, #20
 8008396:	46bd      	mov	sp, r7
 8008398:	bd90      	pop	{r4, r7, pc}
 800839a:	bf00      	nop
 800839c:	200003f8 	.word	0x200003f8

080083a0 <bno055_set_power_mode>:
 *  @note For detailed about LOWPOWER mode
 *  refer data sheet 3.4.2
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_power_mode(u8 power_mode_u8)
{
 80083a0:	b590      	push	{r4, r7, lr}
 80083a2:	b085      	sub	sp, #20
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	4603      	mov	r3, r0
 80083a8:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80083aa:	23ff      	movs	r3, #255	@ 0xff
 80083ac:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 80083ae:	2300      	movs	r3, #0
 80083b0:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 80083b2:	2300      	movs	r3, #0
 80083b4:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 80083b6:	23ff      	movs	r3, #255	@ 0xff
 80083b8:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80083ba:	4b35      	ldr	r3, [pc, #212]	@ (8008490 <bno055_set_power_mode+0xf0>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d102      	bne.n	80083c8 <bno055_set_power_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 80083c2:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 80083c6:	e05f      	b.n	8008488 <bno055_set_power_mode+0xe8>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 80083c8:	f107 030c 	add.w	r3, r7, #12
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7ff fedd 	bl	800818c <bno055_get_operation_mode>
 80083d2:	4603      	mov	r3, r0
 80083d4:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 80083d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d143      	bne.n	8008466 <bno055_set_power_mode+0xc6>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 80083de:	7b3b      	ldrb	r3, [r7, #12]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d008      	beq.n	80083f6 <bno055_set_power_mode+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 80083e4:	2000      	movs	r0, #0
 80083e6:	f7ff ff13 	bl	8008210 <bno055_set_operation_mode>
 80083ea:	4603      	mov	r3, r0
 80083ec:	b2da      	uxtb	r2, r3
 80083ee:	7bbb      	ldrb	r3, [r7, #14]
 80083f0:	4413      	add	r3, r2
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 80083f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d130      	bne.n	8008460 <bno055_set_power_mode+0xc0>
            {
                /* Write the value of power mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80083fe:	4b24      	ldr	r3, [pc, #144]	@ (8008490 <bno055_set_power_mode+0xf0>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	691c      	ldr	r4, [r3, #16]
 8008404:	4b22      	ldr	r3, [pc, #136]	@ (8008490 <bno055_set_power_mode+0xf0>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	7a58      	ldrb	r0, [r3, #9]
 800840a:	f107 020d 	add.w	r2, r7, #13
 800840e:	2301      	movs	r3, #1
 8008410:	213e      	movs	r1, #62	@ 0x3e
 8008412:	47a0      	blx	r4
 8008414:	4603      	mov	r3, r0
 8008416:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_POWER_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8008418:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d124      	bne.n	800846a <bno055_set_power_mode+0xca>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_POWER_MODE, power_mode_u8);
 8008420:	7b7b      	ldrb	r3, [r7, #13]
 8008422:	b25b      	sxtb	r3, r3
 8008424:	f023 0303 	bic.w	r3, r3, #3
 8008428:	b25a      	sxtb	r2, r3
 800842a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800842e:	f003 0303 	and.w	r3, r3, #3
 8008432:	b25b      	sxtb	r3, r3
 8008434:	4313      	orrs	r3, r2
 8008436:	b25b      	sxtb	r3, r3
 8008438:	b2db      	uxtb	r3, r3
 800843a:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 800843c:	4b14      	ldr	r3, [pc, #80]	@ (8008490 <bno055_set_power_mode+0xf0>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	68dc      	ldr	r4, [r3, #12]
 8008442:	4b13      	ldr	r3, [pc, #76]	@ (8008490 <bno055_set_power_mode+0xf0>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	7a58      	ldrb	r0, [r3, #9]
 8008448:	f107 020d 	add.w	r2, r7, #13
 800844c:	2301      	movs	r3, #1
 800844e:	213e      	movs	r1, #62	@ 0x3e
 8008450:	47a0      	blx	r4
 8008452:	4603      	mov	r3, r0
 8008454:	b2da      	uxtb	r2, r3
 8008456:	7bfb      	ldrb	r3, [r7, #15]
 8008458:	4413      	add	r3, r2
 800845a:	b2db      	uxtb	r3, r3
 800845c:	73fb      	strb	r3, [r7, #15]
 800845e:	e004      	b.n	800846a <bno055_set_power_mode+0xca>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 8008460:	23ff      	movs	r3, #255	@ 0xff
 8008462:	73fb      	strb	r3, [r7, #15]
 8008464:	e001      	b.n	800846a <bno055_set_power_mode+0xca>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8008466:	23ff      	movs	r3, #255	@ 0xff
 8008468:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 800846a:	7b3b      	ldrb	r3, [r7, #12]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d009      	beq.n	8008484 <bno055_set_power_mode+0xe4>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 8008470:	7b3b      	ldrb	r3, [r7, #12]
 8008472:	4618      	mov	r0, r3
 8008474:	f7ff fecc 	bl	8008210 <bno055_set_operation_mode>
 8008478:	4603      	mov	r3, r0
 800847a:	b2da      	uxtb	r2, r3
 800847c:	7bfb      	ldrb	r3, [r7, #15]
 800847e:	4413      	add	r3, r2
 8008480:	b2db      	uxtb	r3, r3
 8008482:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8008484:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008488:	4618      	mov	r0, r3
 800848a:	3714      	adds	r7, #20
 800848c:	46bd      	mov	sp, r7
 800848e:	bd90      	pop	{r4, r7, pc}
 8008490:	200003f8 	.word	0x200003f8

08008494 <bno055_set_intr_rst>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_intr_rst(u8 intr_rst_u8)
{
 8008494:	b590      	push	{r4, r7, lr}
 8008496:	b085      	sub	sp, #20
 8008498:	af00      	add	r7, sp, #0
 800849a:	4603      	mov	r3, r0
 800849c:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 800849e:	23ff      	movs	r3, #255	@ 0xff
 80084a0:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 80084a2:	2300      	movs	r3, #0
 80084a4:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 80084a6:	23ff      	movs	r3, #255	@ 0xff
 80084a8:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80084aa:	4b2a      	ldr	r3, [pc, #168]	@ (8008554 <bno055_set_intr_rst+0xc0>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d102      	bne.n	80084b8 <bno055_set_intr_rst+0x24>
    {
        return BNO055_E_NULL_PTR;
 80084b2:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 80084b6:	e048      	b.n	800854a <bno055_set_intr_rst+0xb6>
    }
    else
    {
        /*condition check for page, reset interrupt
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 80084b8:	4b26      	ldr	r3, [pc, #152]	@ (8008554 <bno055_set_intr_rst+0xc0>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	791b      	ldrb	r3, [r3, #4]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d004      	beq.n	80084cc <bno055_set_intr_rst+0x38>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 80084c2:	2000      	movs	r0, #0
 80084c4:	f7ff fc2c 	bl	8007d20 <bno055_write_page_id>
 80084c8:	4603      	mov	r3, r0
 80084ca:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 80084cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d004      	beq.n	80084de <bno055_set_intr_rst+0x4a>
 80084d4:	4b1f      	ldr	r3, [pc, #124]	@ (8008554 <bno055_set_intr_rst+0xc0>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	791b      	ldrb	r3, [r3, #4]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d131      	bne.n	8008542 <bno055_set_intr_rst+0xae>
        {
            /* Write the value of reset interrupt */
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80084de:	4b1d      	ldr	r3, [pc, #116]	@ (8008554 <bno055_set_intr_rst+0xc0>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	691c      	ldr	r4, [r3, #16]
 80084e4:	4b1b      	ldr	r3, [pc, #108]	@ (8008554 <bno055_set_intr_rst+0xc0>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	7a58      	ldrb	r0, [r3, #9]
 80084ea:	f107 020d 	add.w	r2, r7, #13
 80084ee:	2301      	movs	r3, #1
 80084f0:	213f      	movs	r1, #63	@ 0x3f
 80084f2:	47a0      	blx	r4
 80084f4:	4603      	mov	r3, r0
 80084f6:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_INTR_RST_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            if (com_rslt == BNO055_SUCCESS)
 80084f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d122      	bne.n	8008546 <bno055_set_intr_rst+0xb2>
            {
                data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_INTR_RST, intr_rst_u8);
 8008500:	7b7b      	ldrb	r3, [r7, #13]
 8008502:	b25b      	sxtb	r3, r3
 8008504:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008508:	b25a      	sxtb	r2, r3
 800850a:	79fb      	ldrb	r3, [r7, #7]
 800850c:	019b      	lsls	r3, r3, #6
 800850e:	b25b      	sxtb	r3, r3
 8008510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008514:	b25b      	sxtb	r3, r3
 8008516:	4313      	orrs	r3, r2
 8008518:	b25b      	sxtb	r3, r3
 800851a:	b2db      	uxtb	r3, r3
 800851c:	737b      	strb	r3, [r7, #13]
                com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 800851e:	4b0d      	ldr	r3, [pc, #52]	@ (8008554 <bno055_set_intr_rst+0xc0>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	68dc      	ldr	r4, [r3, #12]
 8008524:	4b0b      	ldr	r3, [pc, #44]	@ (8008554 <bno055_set_intr_rst+0xc0>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	7a58      	ldrb	r0, [r3, #9]
 800852a:	f107 020d 	add.w	r2, r7, #13
 800852e:	2301      	movs	r3, #1
 8008530:	213f      	movs	r1, #63	@ 0x3f
 8008532:	47a0      	blx	r4
 8008534:	4603      	mov	r3, r0
 8008536:	b2da      	uxtb	r2, r3
 8008538:	7bfb      	ldrb	r3, [r7, #15]
 800853a:	4413      	add	r3, r2
 800853c:	b2db      	uxtb	r3, r3
 800853e:	73fb      	strb	r3, [r7, #15]
            if (com_rslt == BNO055_SUCCESS)
 8008540:	e001      	b.n	8008546 <bno055_set_intr_rst+0xb2>
                                                            BNO055_GEN_READ_WRITE_LENGTH);
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8008542:	23ff      	movs	r3, #255	@ 0xff
 8008544:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8008546:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800854a:	4618      	mov	r0, r3
 800854c:	3714      	adds	r7, #20
 800854e:	46bd      	mov	sp, r7
 8008550:	bd90      	pop	{r4, r7, pc}
 8008552:	bf00      	nop
 8008554:	200003f8 	.word	0x200003f8

08008558 <bno055_set_intr_mask_accel_any_motion>:
 *
 *  bno055_set_accel_any_motion_thres()
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_intr_mask_accel_any_motion(u8 accel_any_motion_u8)
{
 8008558:	b590      	push	{r4, r7, lr}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	4603      	mov	r3, r0
 8008560:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8008562:	23ff      	movs	r3, #255	@ 0xff
 8008564:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8008566:	2300      	movs	r3, #0
 8008568:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 800856a:	23ff      	movs	r3, #255	@ 0xff
 800856c:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 800856e:	4b2a      	ldr	r3, [pc, #168]	@ (8008618 <bno055_set_intr_mask_accel_any_motion+0xc0>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d102      	bne.n	800857c <bno055_set_intr_mask_accel_any_motion+0x24>
    {
        return BNO055_E_NULL_PTR;
 8008576:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800857a:	e048      	b.n	800860e <bno055_set_intr_mask_accel_any_motion+0xb6>
    }
    else
    {
        /*condition check for page, accel anymotion interrupt mask is
         * available in the page one*/
        if (p_bno055->page_id != BNO055_PAGE_ONE)
 800857c:	4b26      	ldr	r3, [pc, #152]	@ (8008618 <bno055_set_intr_mask_accel_any_motion+0xc0>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	791b      	ldrb	r3, [r3, #4]
 8008582:	2b01      	cmp	r3, #1
 8008584:	d004      	beq.n	8008590 <bno055_set_intr_mask_accel_any_motion+0x38>
        {
            /* Write page as one */
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ONE);
 8008586:	2001      	movs	r0, #1
 8008588:	f7ff fbca 	bl	8007d20 <bno055_write_page_id>
 800858c:	4603      	mov	r3, r0
 800858e:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ONE))
 8008590:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d004      	beq.n	80085a2 <bno055_set_intr_mask_accel_any_motion+0x4a>
 8008598:	4b1f      	ldr	r3, [pc, #124]	@ (8008618 <bno055_set_intr_mask_accel_any_motion+0xc0>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	791b      	ldrb	r3, [r3, #4]
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d131      	bne.n	8008606 <bno055_set_intr_mask_accel_any_motion+0xae>
        {
            /* Write the value of accel anymotion interrupt mask*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80085a2:	4b1d      	ldr	r3, [pc, #116]	@ (8008618 <bno055_set_intr_mask_accel_any_motion+0xc0>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	691c      	ldr	r4, [r3, #16]
 80085a8:	4b1b      	ldr	r3, [pc, #108]	@ (8008618 <bno055_set_intr_mask_accel_any_motion+0xc0>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	7a58      	ldrb	r0, [r3, #9]
 80085ae:	f107 020d 	add.w	r2, r7, #13
 80085b2:	2301      	movs	r3, #1
 80085b4:	210f      	movs	r1, #15
 80085b6:	47a0      	blx	r4
 80085b8:	4603      	mov	r3, r0
 80085ba:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_ACCEL_ANY_MOTION_INTR_MASK_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            if (com_rslt == BNO055_SUCCESS)
 80085bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d122      	bne.n	800860a <bno055_set_intr_mask_accel_any_motion+0xb2>
            {
                data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_ACCEL_ANY_MOTION_INTR_MASK, accel_any_motion_u8);
 80085c4:	7b7b      	ldrb	r3, [r7, #13]
 80085c6:	b25b      	sxtb	r3, r3
 80085c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085cc:	b25a      	sxtb	r2, r3
 80085ce:	79fb      	ldrb	r3, [r7, #7]
 80085d0:	019b      	lsls	r3, r3, #6
 80085d2:	b25b      	sxtb	r3, r3
 80085d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085d8:	b25b      	sxtb	r3, r3
 80085da:	4313      	orrs	r3, r2
 80085dc:	b25b      	sxtb	r3, r3
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	737b      	strb	r3, [r7, #13]
                com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 80085e2:	4b0d      	ldr	r3, [pc, #52]	@ (8008618 <bno055_set_intr_mask_accel_any_motion+0xc0>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	68dc      	ldr	r4, [r3, #12]
 80085e8:	4b0b      	ldr	r3, [pc, #44]	@ (8008618 <bno055_set_intr_mask_accel_any_motion+0xc0>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	7a58      	ldrb	r0, [r3, #9]
 80085ee:	f107 020d 	add.w	r2, r7, #13
 80085f2:	2301      	movs	r3, #1
 80085f4:	210f      	movs	r1, #15
 80085f6:	47a0      	blx	r4
 80085f8:	4603      	mov	r3, r0
 80085fa:	b2da      	uxtb	r2, r3
 80085fc:	7bfb      	ldrb	r3, [r7, #15]
 80085fe:	4413      	add	r3, r2
 8008600:	b2db      	uxtb	r3, r3
 8008602:	73fb      	strb	r3, [r7, #15]
            if (com_rslt == BNO055_SUCCESS)
 8008604:	e001      	b.n	800860a <bno055_set_intr_mask_accel_any_motion+0xb2>
                                                            BNO055_GEN_READ_WRITE_LENGTH);
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8008606:	23ff      	movs	r3, #255	@ 0xff
 8008608:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 800860a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3714      	adds	r7, #20
 8008612:	46bd      	mov	sp, r7
 8008614:	bd90      	pop	{r4, r7, pc}
 8008616:	bf00      	nop
 8008618:	200003f8 	.word	0x200003f8

0800861c <bno055_set_intr_accel_any_motion>:
 *
 *  bno055_set_accel_any_motion_thres()
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_intr_accel_any_motion(u8 accel_any_motion_u8)
{
 800861c:	b590      	push	{r4, r7, lr}
 800861e:	b085      	sub	sp, #20
 8008620:	af00      	add	r7, sp, #0
 8008622:	4603      	mov	r3, r0
 8008624:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8008626:	23ff      	movs	r3, #255	@ 0xff
 8008628:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 800862a:	2300      	movs	r3, #0
 800862c:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 800862e:	23ff      	movs	r3, #255	@ 0xff
 8008630:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8008632:	4b2a      	ldr	r3, [pc, #168]	@ (80086dc <bno055_set_intr_accel_any_motion+0xc0>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d102      	bne.n	8008640 <bno055_set_intr_accel_any_motion+0x24>
    {
        return BNO055_E_NULL_PTR;
 800863a:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800863e:	e048      	b.n	80086d2 <bno055_set_intr_accel_any_motion+0xb6>
    }
    else
    {
        /*condition check for page, accel range is
         * available in the page one*/
        if (p_bno055->page_id != BNO055_PAGE_ONE)
 8008640:	4b26      	ldr	r3, [pc, #152]	@ (80086dc <bno055_set_intr_accel_any_motion+0xc0>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	791b      	ldrb	r3, [r3, #4]
 8008646:	2b01      	cmp	r3, #1
 8008648:	d004      	beq.n	8008654 <bno055_set_intr_accel_any_motion+0x38>
        {
            /* Write page as one */
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ONE);
 800864a:	2001      	movs	r0, #1
 800864c:	f7ff fb68 	bl	8007d20 <bno055_write_page_id>
 8008650:	4603      	mov	r3, r0
 8008652:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ONE))
 8008654:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d004      	beq.n	8008666 <bno055_set_intr_accel_any_motion+0x4a>
 800865c:	4b1f      	ldr	r3, [pc, #124]	@ (80086dc <bno055_set_intr_accel_any_motion+0xc0>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	791b      	ldrb	r3, [r3, #4]
 8008662:	2b01      	cmp	r3, #1
 8008664:	d131      	bne.n	80086ca <bno055_set_intr_accel_any_motion+0xae>
        {
            /* Write the value of accel anymotion interrupt */
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8008666:	4b1d      	ldr	r3, [pc, #116]	@ (80086dc <bno055_set_intr_accel_any_motion+0xc0>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	691c      	ldr	r4, [r3, #16]
 800866c:	4b1b      	ldr	r3, [pc, #108]	@ (80086dc <bno055_set_intr_accel_any_motion+0xc0>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	7a58      	ldrb	r0, [r3, #9]
 8008672:	f107 020d 	add.w	r2, r7, #13
 8008676:	2301      	movs	r3, #1
 8008678:	2110      	movs	r1, #16
 800867a:	47a0      	blx	r4
 800867c:	4603      	mov	r3, r0
 800867e:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_ACCEL_ANY_MOTION_INTR_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            if (com_rslt == BNO055_SUCCESS)
 8008680:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d122      	bne.n	80086ce <bno055_set_intr_accel_any_motion+0xb2>
            {
                data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_ACCEL_ANY_MOTION_INTR, accel_any_motion_u8);
 8008688:	7b7b      	ldrb	r3, [r7, #13]
 800868a:	b25b      	sxtb	r3, r3
 800868c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008690:	b25a      	sxtb	r2, r3
 8008692:	79fb      	ldrb	r3, [r7, #7]
 8008694:	019b      	lsls	r3, r3, #6
 8008696:	b25b      	sxtb	r3, r3
 8008698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800869c:	b25b      	sxtb	r3, r3
 800869e:	4313      	orrs	r3, r2
 80086a0:	b25b      	sxtb	r3, r3
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	737b      	strb	r3, [r7, #13]
                com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 80086a6:	4b0d      	ldr	r3, [pc, #52]	@ (80086dc <bno055_set_intr_accel_any_motion+0xc0>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	68dc      	ldr	r4, [r3, #12]
 80086ac:	4b0b      	ldr	r3, [pc, #44]	@ (80086dc <bno055_set_intr_accel_any_motion+0xc0>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	7a58      	ldrb	r0, [r3, #9]
 80086b2:	f107 020d 	add.w	r2, r7, #13
 80086b6:	2301      	movs	r3, #1
 80086b8:	2110      	movs	r1, #16
 80086ba:	47a0      	blx	r4
 80086bc:	4603      	mov	r3, r0
 80086be:	b2da      	uxtb	r2, r3
 80086c0:	7bfb      	ldrb	r3, [r7, #15]
 80086c2:	4413      	add	r3, r2
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	73fb      	strb	r3, [r7, #15]
            if (com_rslt == BNO055_SUCCESS)
 80086c8:	e001      	b.n	80086ce <bno055_set_intr_accel_any_motion+0xb2>
                                                            BNO055_GEN_READ_WRITE_LENGTH);
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 80086ca:	23ff      	movs	r3, #255	@ 0xff
 80086cc:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 80086ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3714      	adds	r7, #20
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd90      	pop	{r4, r7, pc}
 80086da:	bf00      	nop
 80086dc:	200003f8 	.word	0x200003f8

080086e0 <bno055_set_accel_any_motion_thres>:
 *     8g        |    15.63mg    |   1LSB
 *     16g       |    31.25mg    |   1LSB
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_accel_any_motion_thres(u8 accel_any_motion_thres_u8)
{
 80086e0:	b590      	push	{r4, r7, lr}
 80086e2:	b085      	sub	sp, #20
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	4603      	mov	r3, r0
 80086e8:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80086ea:	23ff      	movs	r3, #255	@ 0xff
 80086ec:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 80086ee:	2300      	movs	r3, #0
 80086f0:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 80086f2:	23ff      	movs	r3, #255	@ 0xff
 80086f4:	73bb      	strb	r3, [r7, #14]
    s8 pg_stat_s8 = BNO055_ERROR;
 80086f6:	23ff      	movs	r3, #255	@ 0xff
 80086f8:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 80086fa:	2300      	movs	r3, #0
 80086fc:	72fb      	strb	r3, [r7, #11]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80086fe:	4b35      	ldr	r3, [pc, #212]	@ (80087d4 <bno055_set_accel_any_motion_thres+0xf4>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d102      	bne.n	800870c <bno055_set_accel_any_motion_thres+0x2c>
    {
        return BNO055_E_NULL_PTR;
 8008706:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800870a:	e05f      	b.n	80087cc <bno055_set_accel_any_motion_thres+0xec>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 800870c:	f107 030b 	add.w	r3, r7, #11
 8008710:	4618      	mov	r0, r3
 8008712:	f7ff fd3b 	bl	800818c <bno055_get_operation_mode>
 8008716:	4603      	mov	r3, r0
 8008718:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 800871a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d143      	bne.n	80087aa <bno055_set_accel_any_motion_thres+0xca>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8008722:	7afb      	ldrb	r3, [r7, #11]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d008      	beq.n	800873a <bno055_set_accel_any_motion_thres+0x5a>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 8008728:	2000      	movs	r0, #0
 800872a:	f7ff fd71 	bl	8008210 <bno055_set_operation_mode>
 800872e:	4603      	mov	r3, r0
 8008730:	b2da      	uxtb	r2, r3
 8008732:	7bbb      	ldrb	r3, [r7, #14]
 8008734:	4413      	add	r3, r2
 8008736:	b2db      	uxtb	r3, r3
 8008738:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 800873a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d130      	bne.n	80087a4 <bno055_set_accel_any_motion_thres+0xc4>
            {
                /* Write page as one */
                pg_stat_s8 = bno055_write_page_id(BNO055_PAGE_ONE);
 8008742:	2001      	movs	r0, #1
 8008744:	f7ff faec 	bl	8007d20 <bno055_write_page_id>
 8008748:	4603      	mov	r3, r0
 800874a:	737b      	strb	r3, [r7, #13]
                if (pg_stat_s8 == BNO055_SUCCESS)
 800874c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d124      	bne.n	800879e <bno055_set_accel_any_motion_thres+0xbe>
                {
                    com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8008754:	4b1f      	ldr	r3, [pc, #124]	@ (80087d4 <bno055_set_accel_any_motion_thres+0xf4>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	691c      	ldr	r4, [r3, #16]
 800875a:	4b1e      	ldr	r3, [pc, #120]	@ (80087d4 <bno055_set_accel_any_motion_thres+0xf4>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	7a58      	ldrb	r0, [r3, #9]
 8008760:	f107 020c 	add.w	r2, r7, #12
 8008764:	2301      	movs	r3, #1
 8008766:	2111      	movs	r1, #17
 8008768:	47a0      	blx	r4
 800876a:	4603      	mov	r3, r0
 800876c:	73fb      	strb	r3, [r7, #15]
                                                              BNO055_ACCEL_ANY_MOTION_THRES_REG,
                                                              &data_u8r,
                                                              BNO055_GEN_READ_WRITE_LENGTH);
                    if (com_rslt == BNO055_SUCCESS)
 800876e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d11b      	bne.n	80087ae <bno055_set_accel_any_motion_thres+0xce>
                    {
                        /* Write the value of
                         * accel any motion threshold*/
                        data_u8r = BNO055_SET_BITSLICE(data_u8r,
 8008776:	79fb      	ldrb	r3, [r7, #7]
 8008778:	733b      	strb	r3, [r7, #12]
                                                       BNO055_ACCEL_ANY_MOTION_THRES,
                                                       accel_any_motion_thres_u8);
                        com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 800877a:	4b16      	ldr	r3, [pc, #88]	@ (80087d4 <bno055_set_accel_any_motion_thres+0xf4>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	68dc      	ldr	r4, [r3, #12]
 8008780:	4b14      	ldr	r3, [pc, #80]	@ (80087d4 <bno055_set_accel_any_motion_thres+0xf4>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	7a58      	ldrb	r0, [r3, #9]
 8008786:	f107 020c 	add.w	r2, r7, #12
 800878a:	2301      	movs	r3, #1
 800878c:	2111      	movs	r1, #17
 800878e:	47a0      	blx	r4
 8008790:	4603      	mov	r3, r0
 8008792:	b2da      	uxtb	r2, r3
 8008794:	7bfb      	ldrb	r3, [r7, #15]
 8008796:	4413      	add	r3, r2
 8008798:	b2db      	uxtb	r3, r3
 800879a:	73fb      	strb	r3, [r7, #15]
 800879c:	e007      	b.n	80087ae <bno055_set_accel_any_motion_thres+0xce>
                                                                    BNO055_GEN_READ_WRITE_LENGTH);
                    }
                }
                else
                {
                    com_rslt = BNO055_ERROR;
 800879e:	23ff      	movs	r3, #255	@ 0xff
 80087a0:	73fb      	strb	r3, [r7, #15]
 80087a2:	e004      	b.n	80087ae <bno055_set_accel_any_motion_thres+0xce>
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 80087a4:	23ff      	movs	r3, #255	@ 0xff
 80087a6:	73fb      	strb	r3, [r7, #15]
 80087a8:	e001      	b.n	80087ae <bno055_set_accel_any_motion_thres+0xce>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 80087aa:	23ff      	movs	r3, #255	@ 0xff
 80087ac:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 80087ae:	7afb      	ldrb	r3, [r7, #11]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d009      	beq.n	80087c8 <bno055_set_accel_any_motion_thres+0xe8>
    {
        /* set the operation mode of
         * previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 80087b4:	7afb      	ldrb	r3, [r7, #11]
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7ff fd2a 	bl	8008210 <bno055_set_operation_mode>
 80087bc:	4603      	mov	r3, r0
 80087be:	b2da      	uxtb	r2, r3
 80087c0:	7bfb      	ldrb	r3, [r7, #15]
 80087c2:	4413      	add	r3, r2
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 80087c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3714      	adds	r7, #20
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd90      	pop	{r4, r7, pc}
 80087d4:	200003f8 	.word	0x200003f8

080087d8 <bno055_set_accel_any_motion_durn>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_accel_any_motion_durn(u8 accel_any_motion_durn_u8)
{
 80087d8:	b590      	push	{r4, r7, lr}
 80087da:	b085      	sub	sp, #20
 80087dc:	af00      	add	r7, sp, #0
 80087de:	4603      	mov	r3, r0
 80087e0:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80087e2:	23ff      	movs	r3, #255	@ 0xff
 80087e4:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 80087e6:	2300      	movs	r3, #0
 80087e8:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 80087ea:	23ff      	movs	r3, #255	@ 0xff
 80087ec:	73bb      	strb	r3, [r7, #14]
    s8 pg_stat_s8 = BNO055_ERROR;
 80087ee:	23ff      	movs	r3, #255	@ 0xff
 80087f0:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 80087f2:	2300      	movs	r3, #0
 80087f4:	72fb      	strb	r3, [r7, #11]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80087f6:	4b3b      	ldr	r3, [pc, #236]	@ (80088e4 <bno055_set_accel_any_motion_durn+0x10c>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d102      	bne.n	8008804 <bno055_set_accel_any_motion_durn+0x2c>
    {
        return BNO055_E_NULL_PTR;
 80087fe:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8008802:	e06b      	b.n	80088dc <bno055_set_accel_any_motion_durn+0x104>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8008804:	f107 030b 	add.w	r3, r7, #11
 8008808:	4618      	mov	r0, r3
 800880a:	f7ff fcbf 	bl	800818c <bno055_get_operation_mode>
 800880e:	4603      	mov	r3, r0
 8008810:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8008812:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d14f      	bne.n	80088ba <bno055_set_accel_any_motion_durn+0xe2>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 800881a:	7afb      	ldrb	r3, [r7, #11]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d008      	beq.n	8008832 <bno055_set_accel_any_motion_durn+0x5a>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 8008820:	2000      	movs	r0, #0
 8008822:	f7ff fcf5 	bl	8008210 <bno055_set_operation_mode>
 8008826:	4603      	mov	r3, r0
 8008828:	b2da      	uxtb	r2, r3
 800882a:	7bbb      	ldrb	r3, [r7, #14]
 800882c:	4413      	add	r3, r2
 800882e:	b2db      	uxtb	r3, r3
 8008830:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 8008832:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d13c      	bne.n	80088b4 <bno055_set_accel_any_motion_durn+0xdc>
            {
                /* Write page as one */
                pg_stat_s8 = bno055_write_page_id(BNO055_PAGE_ONE);
 800883a:	2001      	movs	r0, #1
 800883c:	f7ff fa70 	bl	8007d20 <bno055_write_page_id>
 8008840:	4603      	mov	r3, r0
 8008842:	737b      	strb	r3, [r7, #13]
                if (pg_stat_s8 == BNO055_SUCCESS)
 8008844:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d130      	bne.n	80088ae <bno055_set_accel_any_motion_durn+0xd6>
                {
                    com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800884c:	4b25      	ldr	r3, [pc, #148]	@ (80088e4 <bno055_set_accel_any_motion_durn+0x10c>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	691c      	ldr	r4, [r3, #16]
 8008852:	4b24      	ldr	r3, [pc, #144]	@ (80088e4 <bno055_set_accel_any_motion_durn+0x10c>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	7a58      	ldrb	r0, [r3, #9]
 8008858:	f107 020c 	add.w	r2, r7, #12
 800885c:	2301      	movs	r3, #1
 800885e:	2112      	movs	r1, #18
 8008860:	47a0      	blx	r4
 8008862:	4603      	mov	r3, r0
 8008864:	73fb      	strb	r3, [r7, #15]
                                                              BNO055_ACCEL_ANY_MOTION_DURN_SET_REG,
                                                              &data_u8r,
                                                              BNO055_GEN_READ_WRITE_LENGTH);
                    if (com_rslt == BNO055_SUCCESS)
 8008866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d127      	bne.n	80088be <bno055_set_accel_any_motion_durn+0xe6>
                    {
                        /* Write the value of
                         * accel anymotion duration*/
                        data_u8r = BNO055_SET_BITSLICE(data_u8r,
 800886e:	7b3b      	ldrb	r3, [r7, #12]
 8008870:	b25b      	sxtb	r3, r3
 8008872:	f023 0303 	bic.w	r3, r3, #3
 8008876:	b25a      	sxtb	r2, r3
 8008878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800887c:	f003 0303 	and.w	r3, r3, #3
 8008880:	b25b      	sxtb	r3, r3
 8008882:	4313      	orrs	r3, r2
 8008884:	b25b      	sxtb	r3, r3
 8008886:	b2db      	uxtb	r3, r3
 8008888:	733b      	strb	r3, [r7, #12]
                                                       BNO055_ACCEL_ANY_MOTION_DURN_SET,
                                                       accel_any_motion_durn_u8);
                        com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 800888a:	4b16      	ldr	r3, [pc, #88]	@ (80088e4 <bno055_set_accel_any_motion_durn+0x10c>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	68dc      	ldr	r4, [r3, #12]
 8008890:	4b14      	ldr	r3, [pc, #80]	@ (80088e4 <bno055_set_accel_any_motion_durn+0x10c>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	7a58      	ldrb	r0, [r3, #9]
 8008896:	f107 020c 	add.w	r2, r7, #12
 800889a:	2301      	movs	r3, #1
 800889c:	2112      	movs	r1, #18
 800889e:	47a0      	blx	r4
 80088a0:	4603      	mov	r3, r0
 80088a2:	b2da      	uxtb	r2, r3
 80088a4:	7bfb      	ldrb	r3, [r7, #15]
 80088a6:	4413      	add	r3, r2
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	73fb      	strb	r3, [r7, #15]
 80088ac:	e007      	b.n	80088be <bno055_set_accel_any_motion_durn+0xe6>
                                                                    BNO055_GEN_READ_WRITE_LENGTH);
                    }
                }
                else
                {
                    com_rslt = BNO055_ERROR;
 80088ae:	23ff      	movs	r3, #255	@ 0xff
 80088b0:	73fb      	strb	r3, [r7, #15]
 80088b2:	e004      	b.n	80088be <bno055_set_accel_any_motion_durn+0xe6>
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 80088b4:	23ff      	movs	r3, #255	@ 0xff
 80088b6:	73fb      	strb	r3, [r7, #15]
 80088b8:	e001      	b.n	80088be <bno055_set_accel_any_motion_durn+0xe6>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 80088ba:	23ff      	movs	r3, #255	@ 0xff
 80088bc:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 80088be:	7afb      	ldrb	r3, [r7, #11]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d009      	beq.n	80088d8 <bno055_set_accel_any_motion_durn+0x100>
    {
        /* set the operation mode of
         * previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 80088c4:	7afb      	ldrb	r3, [r7, #11]
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7ff fca2 	bl	8008210 <bno055_set_operation_mode>
 80088cc:	4603      	mov	r3, r0
 80088ce:	b2da      	uxtb	r2, r3
 80088d0:	7bfb      	ldrb	r3, [r7, #15]
 80088d2:	4413      	add	r3, r2
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 80088d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3714      	adds	r7, #20
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd90      	pop	{r4, r7, pc}
 80088e4:	200003f8 	.word	0x200003f8

080088e8 <bno055_set_accel_any_motion_no_motion_axis_enable>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_accel_any_motion_no_motion_axis_enable(u8 channel_u8, u8 data_u8)
{
 80088e8:	b590      	push	{r4, r7, lr}
 80088ea:	b085      	sub	sp, #20
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	4603      	mov	r3, r0
 80088f0:	460a      	mov	r2, r1
 80088f2:	71fb      	strb	r3, [r7, #7]
 80088f4:	4613      	mov	r3, r2
 80088f6:	71bb      	strb	r3, [r7, #6]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80088f8:	23ff      	movs	r3, #255	@ 0xff
 80088fa:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 80088fc:	2300      	movs	r3, #0
 80088fe:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8008900:	23ff      	movs	r3, #255	@ 0xff
 8008902:	73bb      	strb	r3, [r7, #14]
    s8 pg_stat_s8 = BNO055_ERROR;
 8008904:	23ff      	movs	r3, #255	@ 0xff
 8008906:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8008908:	2300      	movs	r3, #0
 800890a:	72fb      	strb	r3, [r7, #11]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 800890c:	4b79      	ldr	r3, [pc, #484]	@ (8008af4 <bno055_set_accel_any_motion_no_motion_axis_enable+0x20c>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d102      	bne.n	800891a <bno055_set_accel_any_motion_no_motion_axis_enable+0x32>
    {
        return BNO055_E_NULL_PTR;
 8008914:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8008918:	e0e8      	b.n	8008aec <bno055_set_accel_any_motion_no_motion_axis_enable+0x204>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 800891a:	f107 030b 	add.w	r3, r7, #11
 800891e:	4618      	mov	r0, r3
 8008920:	f7ff fc34 	bl	800818c <bno055_get_operation_mode>
 8008924:	4603      	mov	r3, r0
 8008926:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8008928:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800892c:	2b00      	cmp	r3, #0
 800892e:	f040 80c6 	bne.w	8008abe <bno055_set_accel_any_motion_no_motion_axis_enable+0x1d6>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8008932:	7afb      	ldrb	r3, [r7, #11]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d008      	beq.n	800894a <bno055_set_accel_any_motion_no_motion_axis_enable+0x62>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 8008938:	2000      	movs	r0, #0
 800893a:	f7ff fc69 	bl	8008210 <bno055_set_operation_mode>
 800893e:	4603      	mov	r3, r0
 8008940:	b2da      	uxtb	r2, r3
 8008942:	7bbb      	ldrb	r3, [r7, #14]
 8008944:	4413      	add	r3, r2
 8008946:	b2db      	uxtb	r3, r3
 8008948:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 800894a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800894e:	2b00      	cmp	r3, #0
 8008950:	f040 80b2 	bne.w	8008ab8 <bno055_set_accel_any_motion_no_motion_axis_enable+0x1d0>
            {
                /* Write page as one */
                pg_stat_s8 = bno055_write_page_id(BNO055_PAGE_ONE);
 8008954:	2001      	movs	r0, #1
 8008956:	f7ff f9e3 	bl	8007d20 <bno055_write_page_id>
 800895a:	4603      	mov	r3, r0
 800895c:	737b      	strb	r3, [r7, #13]
                if (pg_stat_s8 == BNO055_SUCCESS)
 800895e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8008962:	2b00      	cmp	r3, #0
 8008964:	f040 80a5 	bne.w	8008ab2 <bno055_set_accel_any_motion_no_motion_axis_enable+0x1ca>
                {
                    switch (channel_u8)
 8008968:	79fb      	ldrb	r3, [r7, #7]
 800896a:	2b02      	cmp	r3, #2
 800896c:	d06c      	beq.n	8008a48 <bno055_set_accel_any_motion_no_motion_axis_enable+0x160>
 800896e:	2b02      	cmp	r3, #2
 8008970:	f300 809c 	bgt.w	8008aac <bno055_set_accel_any_motion_no_motion_axis_enable+0x1c4>
 8008974:	2b00      	cmp	r3, #0
 8008976:	d002      	beq.n	800897e <bno055_set_accel_any_motion_no_motion_axis_enable+0x96>
 8008978:	2b01      	cmp	r3, #1
 800897a:	d033      	beq.n	80089e4 <bno055_set_accel_any_motion_no_motion_axis_enable+0xfc>
 800897c:	e096      	b.n	8008aac <bno055_set_accel_any_motion_no_motion_axis_enable+0x1c4>
                    {
                        case BNO055_ACCEL_ANY_MOTION_NO_MOTION_X_AXIS:

                            /* Write the value of
                             * accel anymotion x enable*/
                            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800897e:	4b5d      	ldr	r3, [pc, #372]	@ (8008af4 <bno055_set_accel_any_motion_no_motion_axis_enable+0x20c>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	691c      	ldr	r4, [r3, #16]
 8008984:	4b5b      	ldr	r3, [pc, #364]	@ (8008af4 <bno055_set_accel_any_motion_no_motion_axis_enable+0x20c>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	7a58      	ldrb	r0, [r3, #9]
 800898a:	f107 020c 	add.w	r2, r7, #12
 800898e:	2301      	movs	r3, #1
 8008990:	2112      	movs	r1, #18
 8008992:	47a0      	blx	r4
 8008994:	4603      	mov	r3, r0
 8008996:	73fb      	strb	r3, [r7, #15]
                                                                      BNO055_ACCEL_ANY_MOTION_X_AXIS_REG,
                                                                      &data_u8r,
                                                                      BNO055_GEN_READ_WRITE_LENGTH);
                            if (com_rslt == BNO055_SUCCESS)
 8008998:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800899c:	2b00      	cmp	r3, #0
 800899e:	f040 8091 	bne.w	8008ac4 <bno055_set_accel_any_motion_no_motion_axis_enable+0x1dc>
                            {
                                data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_ACCEL_ANY_MOTION_X_AXIS, data_u8);
 80089a2:	7b3b      	ldrb	r3, [r7, #12]
 80089a4:	b25b      	sxtb	r3, r3
 80089a6:	f023 0304 	bic.w	r3, r3, #4
 80089aa:	b25a      	sxtb	r2, r3
 80089ac:	79bb      	ldrb	r3, [r7, #6]
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	b25b      	sxtb	r3, r3
 80089b2:	f003 0304 	and.w	r3, r3, #4
 80089b6:	b25b      	sxtb	r3, r3
 80089b8:	4313      	orrs	r3, r2
 80089ba:	b25b      	sxtb	r3, r3
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	733b      	strb	r3, [r7, #12]
                                com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 80089c0:	4b4c      	ldr	r3, [pc, #304]	@ (8008af4 <bno055_set_accel_any_motion_no_motion_axis_enable+0x20c>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	68dc      	ldr	r4, [r3, #12]
 80089c6:	4b4b      	ldr	r3, [pc, #300]	@ (8008af4 <bno055_set_accel_any_motion_no_motion_axis_enable+0x20c>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	7a58      	ldrb	r0, [r3, #9]
 80089cc:	f107 020c 	add.w	r2, r7, #12
 80089d0:	2301      	movs	r3, #1
 80089d2:	2112      	movs	r1, #18
 80089d4:	47a0      	blx	r4
 80089d6:	4603      	mov	r3, r0
 80089d8:	b2da      	uxtb	r2, r3
 80089da:	7bfb      	ldrb	r3, [r7, #15]
 80089dc:	4413      	add	r3, r2
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	73fb      	strb	r3, [r7, #15]
                                                                            BNO055_ACCEL_ANY_MOTION_X_AXIS_REG,
                                                                            &data_u8r,
                                                                            BNO055_GEN_READ_WRITE_LENGTH);
                            }
                            break;
 80089e2:	e06f      	b.n	8008ac4 <bno055_set_accel_any_motion_no_motion_axis_enable+0x1dc>
                        case BNO055_ACCEL_ANY_MOTION_NO_MOTION_Y_AXIS:

                            /* Write the value of
                             * accel anymotion y enable*/
                            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80089e4:	4b43      	ldr	r3, [pc, #268]	@ (8008af4 <bno055_set_accel_any_motion_no_motion_axis_enable+0x20c>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	691c      	ldr	r4, [r3, #16]
 80089ea:	4b42      	ldr	r3, [pc, #264]	@ (8008af4 <bno055_set_accel_any_motion_no_motion_axis_enable+0x20c>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	7a58      	ldrb	r0, [r3, #9]
 80089f0:	f107 020c 	add.w	r2, r7, #12
 80089f4:	2301      	movs	r3, #1
 80089f6:	2112      	movs	r1, #18
 80089f8:	47a0      	blx	r4
 80089fa:	4603      	mov	r3, r0
 80089fc:	73fb      	strb	r3, [r7, #15]
                                                                      BNO055_ACCEL_ANY_MOTION_Y_AXIS_REG,
                                                                      &data_u8r,
                                                                      BNO055_GEN_READ_WRITE_LENGTH);
                            if (com_rslt == BNO055_SUCCESS)
 80089fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d160      	bne.n	8008ac8 <bno055_set_accel_any_motion_no_motion_axis_enable+0x1e0>
                            {
                                data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_ACCEL_ANY_MOTION_Y_AXIS, data_u8);
 8008a06:	7b3b      	ldrb	r3, [r7, #12]
 8008a08:	b25b      	sxtb	r3, r3
 8008a0a:	f023 0308 	bic.w	r3, r3, #8
 8008a0e:	b25a      	sxtb	r2, r3
 8008a10:	79bb      	ldrb	r3, [r7, #6]
 8008a12:	00db      	lsls	r3, r3, #3
 8008a14:	b25b      	sxtb	r3, r3
 8008a16:	f003 0308 	and.w	r3, r3, #8
 8008a1a:	b25b      	sxtb	r3, r3
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	b25b      	sxtb	r3, r3
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	733b      	strb	r3, [r7, #12]
                                com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8008a24:	4b33      	ldr	r3, [pc, #204]	@ (8008af4 <bno055_set_accel_any_motion_no_motion_axis_enable+0x20c>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	68dc      	ldr	r4, [r3, #12]
 8008a2a:	4b32      	ldr	r3, [pc, #200]	@ (8008af4 <bno055_set_accel_any_motion_no_motion_axis_enable+0x20c>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	7a58      	ldrb	r0, [r3, #9]
 8008a30:	f107 020c 	add.w	r2, r7, #12
 8008a34:	2301      	movs	r3, #1
 8008a36:	2112      	movs	r1, #18
 8008a38:	47a0      	blx	r4
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	b2da      	uxtb	r2, r3
 8008a3e:	7bfb      	ldrb	r3, [r7, #15]
 8008a40:	4413      	add	r3, r2
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	73fb      	strb	r3, [r7, #15]
                                                                            BNO055_ACCEL_ANY_MOTION_Y_AXIS_REG,
                                                                            &data_u8r,
                                                                            BNO055_GEN_READ_WRITE_LENGTH);
                            }
                            break;
 8008a46:	e03f      	b.n	8008ac8 <bno055_set_accel_any_motion_no_motion_axis_enable+0x1e0>
                        case BNO055_ACCEL_ANY_MOTION_NO_MOTION_Z_AXIS:

                            /* Write the value of
                             * accel anymotion z enable*/
                            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8008a48:	4b2a      	ldr	r3, [pc, #168]	@ (8008af4 <bno055_set_accel_any_motion_no_motion_axis_enable+0x20c>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	691c      	ldr	r4, [r3, #16]
 8008a4e:	4b29      	ldr	r3, [pc, #164]	@ (8008af4 <bno055_set_accel_any_motion_no_motion_axis_enable+0x20c>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	7a58      	ldrb	r0, [r3, #9]
 8008a54:	f107 020c 	add.w	r2, r7, #12
 8008a58:	2301      	movs	r3, #1
 8008a5a:	2112      	movs	r1, #18
 8008a5c:	47a0      	blx	r4
 8008a5e:	4603      	mov	r3, r0
 8008a60:	73fb      	strb	r3, [r7, #15]
                                                                      BNO055_ACCEL_ANY_MOTION_Z_AXIS_REG,
                                                                      &data_u8r,
                                                                      BNO055_GEN_READ_WRITE_LENGTH);
                            if (com_rslt == BNO055_SUCCESS)
 8008a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d130      	bne.n	8008acc <bno055_set_accel_any_motion_no_motion_axis_enable+0x1e4>
                            {
                                data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_ACCEL_ANY_MOTION_Z_AXIS, data_u8);
 8008a6a:	7b3b      	ldrb	r3, [r7, #12]
 8008a6c:	b25b      	sxtb	r3, r3
 8008a6e:	f023 0310 	bic.w	r3, r3, #16
 8008a72:	b25a      	sxtb	r2, r3
 8008a74:	79bb      	ldrb	r3, [r7, #6]
 8008a76:	011b      	lsls	r3, r3, #4
 8008a78:	b25b      	sxtb	r3, r3
 8008a7a:	f003 0310 	and.w	r3, r3, #16
 8008a7e:	b25b      	sxtb	r3, r3
 8008a80:	4313      	orrs	r3, r2
 8008a82:	b25b      	sxtb	r3, r3
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	733b      	strb	r3, [r7, #12]
                                com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8008a88:	4b1a      	ldr	r3, [pc, #104]	@ (8008af4 <bno055_set_accel_any_motion_no_motion_axis_enable+0x20c>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	68dc      	ldr	r4, [r3, #12]
 8008a8e:	4b19      	ldr	r3, [pc, #100]	@ (8008af4 <bno055_set_accel_any_motion_no_motion_axis_enable+0x20c>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	7a58      	ldrb	r0, [r3, #9]
 8008a94:	f107 020c 	add.w	r2, r7, #12
 8008a98:	2301      	movs	r3, #1
 8008a9a:	2112      	movs	r1, #18
 8008a9c:	47a0      	blx	r4
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	b2da      	uxtb	r2, r3
 8008aa2:	7bfb      	ldrb	r3, [r7, #15]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	73fb      	strb	r3, [r7, #15]
                                                                            BNO055_ACCEL_ANY_MOTION_Z_AXIS_REG,
                                                                            &data_u8r,
                                                                            BNO055_GEN_READ_WRITE_LENGTH);
                            }
                            break;
 8008aaa:	e00f      	b.n	8008acc <bno055_set_accel_any_motion_no_motion_axis_enable+0x1e4>
                        default:
                            com_rslt = BNO055_OUT_OF_RANGE;
 8008aac:	23fe      	movs	r3, #254	@ 0xfe
 8008aae:	73fb      	strb	r3, [r7, #15]
                            break;
 8008ab0:	e00d      	b.n	8008ace <bno055_set_accel_any_motion_no_motion_axis_enable+0x1e6>
                    }
                }
                else
                {
                    com_rslt = BNO055_ERROR;
 8008ab2:	23ff      	movs	r3, #255	@ 0xff
 8008ab4:	73fb      	strb	r3, [r7, #15]
 8008ab6:	e00a      	b.n	8008ace <bno055_set_accel_any_motion_no_motion_axis_enable+0x1e6>
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 8008ab8:	23ff      	movs	r3, #255	@ 0xff
 8008aba:	73fb      	strb	r3, [r7, #15]
 8008abc:	e007      	b.n	8008ace <bno055_set_accel_any_motion_no_motion_axis_enable+0x1e6>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8008abe:	23ff      	movs	r3, #255	@ 0xff
 8008ac0:	73fb      	strb	r3, [r7, #15]
 8008ac2:	e004      	b.n	8008ace <bno055_set_accel_any_motion_no_motion_axis_enable+0x1e6>
                            break;
 8008ac4:	bf00      	nop
 8008ac6:	e002      	b.n	8008ace <bno055_set_accel_any_motion_no_motion_axis_enable+0x1e6>
                            break;
 8008ac8:	bf00      	nop
 8008aca:	e000      	b.n	8008ace <bno055_set_accel_any_motion_no_motion_axis_enable+0x1e6>
                            break;
 8008acc:	bf00      	nop
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8008ace:	7afb      	ldrb	r3, [r7, #11]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d009      	beq.n	8008ae8 <bno055_set_accel_any_motion_no_motion_axis_enable+0x200>
    {
        /* set the operation mode of
         * previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 8008ad4:	7afb      	ldrb	r3, [r7, #11]
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7ff fb9a 	bl	8008210 <bno055_set_operation_mode>
 8008adc:	4603      	mov	r3, r0
 8008ade:	b2da      	uxtb	r2, r3
 8008ae0:	7bfb      	ldrb	r3, [r7, #15]
 8008ae2:	4413      	add	r3, r2
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8008ae8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3714      	adds	r7, #20
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd90      	pop	{r4, r7, pc}
 8008af4:	200003f8 	.word	0x200003f8

08008af8 <DS3231_Init>:

/**
 * @brief Initializes the DS3231 module. Set clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
	_ds3231_ui2c = hi2c;
 8008b00:	4a09      	ldr	r2, [pc, #36]	@ (8008b28 <DS3231_Init+0x30>)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6013      	str	r3, [r2, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 8008b06:	2000      	movs	r0, #0
 8008b08:	f000 f8a9 	bl	8008c5e <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 8008b0c:	2000      	movs	r0, #0
 8008b0e:	f000 f86d 	bl	8008bec <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 8008b12:	f000 f8c6 	bl	8008ca2 <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 8008b16:	f000 f88c 	bl	8008c32 <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8008b1a:	2001      	movs	r0, #1
 8008b1c:	f000 f846 	bl	8008bac <DS3231_SetInterruptMode>
}
 8008b20:	bf00      	nop
 8008b22:	3708      	adds	r7, #8
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	20000414 	.word	0x20000414

08008b2c <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b086      	sub	sp, #24
 8008b30:	af02      	add	r7, sp, #8
 8008b32:	4603      	mov	r3, r0
 8008b34:	460a      	mov	r2, r1
 8008b36:	71fb      	strb	r3, [r7, #7]
 8008b38:	4613      	mov	r3, r2
 8008b3a:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 8008b3c:	79fb      	ldrb	r3, [r7, #7]
 8008b3e:	733b      	strb	r3, [r7, #12]
 8008b40:	79bb      	ldrb	r3, [r7, #6]
 8008b42:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 8008b44:	4b07      	ldr	r3, [pc, #28]	@ (8008b64 <DS3231_SetRegByte+0x38>)
 8008b46:	6818      	ldr	r0, [r3, #0]
 8008b48:	f107 020c 	add.w	r2, r7, #12
 8008b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8008b50:	9300      	str	r3, [sp, #0]
 8008b52:	2302      	movs	r3, #2
 8008b54:	21d0      	movs	r1, #208	@ 0xd0
 8008b56:	f7fa f8bf 	bl	8002cd8 <HAL_I2C_Master_Transmit>
}
 8008b5a:	bf00      	nop
 8008b5c:	3710      	adds	r7, #16
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	20000414 	.word	0x20000414

08008b68 <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b086      	sub	sp, #24
 8008b6c:	af02      	add	r7, sp, #8
 8008b6e:	4603      	mov	r3, r0
 8008b70:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 8008b72:	4b0d      	ldr	r3, [pc, #52]	@ (8008ba8 <DS3231_GetRegByte+0x40>)
 8008b74:	6818      	ldr	r0, [r3, #0]
 8008b76:	1dfa      	adds	r2, r7, #7
 8008b78:	f04f 33ff 	mov.w	r3, #4294967295
 8008b7c:	9300      	str	r3, [sp, #0]
 8008b7e:	2301      	movs	r3, #1
 8008b80:	21d0      	movs	r1, #208	@ 0xd0
 8008b82:	f7fa f8a9 	bl	8002cd8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 8008b86:	4b08      	ldr	r3, [pc, #32]	@ (8008ba8 <DS3231_GetRegByte+0x40>)
 8008b88:	6818      	ldr	r0, [r3, #0]
 8008b8a:	f107 020f 	add.w	r2, r7, #15
 8008b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8008b92:	9300      	str	r3, [sp, #0]
 8008b94:	2301      	movs	r3, #1
 8008b96:	21d0      	movs	r1, #208	@ 0xd0
 8008b98:	f7fa f99c 	bl	8002ed4 <HAL_I2C_Master_Receive>
	return val;
 8008b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3710      	adds	r7, #16
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	20000414 	.word	0x20000414

08008bac <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8008bb6:	200e      	movs	r0, #14
 8008bb8:	f7ff ffd6 	bl	8008b68 <DS3231_GetRegByte>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 8008bc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bc4:	f023 0304 	bic.w	r3, r3, #4
 8008bc8:	b25a      	sxtb	r2, r3
 8008bca:	79fb      	ldrb	r3, [r7, #7]
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	b25b      	sxtb	r3, r3
 8008bd0:	f003 0304 	and.w	r3, r3, #4
 8008bd4:	b25b      	sxtb	r3, r3
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	b25b      	sxtb	r3, r3
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	4619      	mov	r1, r3
 8008bde:	200e      	movs	r0, #14
 8008be0:	f7ff ffa4 	bl	8008b2c <DS3231_SetRegByte>
}
 8008be4:	bf00      	nop
 8008be6:	3710      	adds	r7, #16
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8008bf6:	200e      	movs	r0, #14
 8008bf8:	f7ff ffb6 	bl	8008b68 <DS3231_GetRegByte>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 8008c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c04:	f023 0302 	bic.w	r3, r3, #2
 8008c08:	b25a      	sxtb	r2, r3
 8008c0a:	79fb      	ldrb	r3, [r7, #7]
 8008c0c:	005b      	lsls	r3, r3, #1
 8008c0e:	b25b      	sxtb	r3, r3
 8008c10:	f003 0302 	and.w	r3, r3, #2
 8008c14:	b25b      	sxtb	r3, r3
 8008c16:	4313      	orrs	r3, r2
 8008c18:	b25b      	sxtb	r3, r3
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	200e      	movs	r0, #14
 8008c20:	f7ff ff84 	bl	8008b2c <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8008c24:	2001      	movs	r0, #1
 8008c26:	f7ff ffc1 	bl	8008bac <DS3231_SetInterruptMode>
}
 8008c2a:	bf00      	nop
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b082      	sub	sp, #8
 8008c36:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 8008c38:	200f      	movs	r0, #15
 8008c3a:	f7ff ff95 	bl	8008b68 <DS3231_GetRegByte>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	f023 0302 	bic.w	r3, r3, #2
 8008c44:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 8008c46:	79fb      	ldrb	r3, [r7, #7]
 8008c48:	f023 0302 	bic.w	r3, r3, #2
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	4619      	mov	r1, r3
 8008c50:	200f      	movs	r0, #15
 8008c52:	f7ff ff6b 	bl	8008b2c <DS3231_SetRegByte>
}
 8008c56:	bf00      	nop
 8008c58:	3708      	adds	r7, #8
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b084      	sub	sp, #16
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	4603      	mov	r3, r0
 8008c66:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8008c68:	200e      	movs	r0, #14
 8008c6a:	f7ff ff7d 	bl	8008b68 <DS3231_GetRegByte>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 8008c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c76:	f023 0301 	bic.w	r3, r3, #1
 8008c7a:	b25a      	sxtb	r2, r3
 8008c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c80:	f003 0301 	and.w	r3, r3, #1
 8008c84:	b25b      	sxtb	r3, r3
 8008c86:	4313      	orrs	r3, r2
 8008c88:	b25b      	sxtb	r3, r3
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	200e      	movs	r0, #14
 8008c90:	f7ff ff4c 	bl	8008b2c <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8008c94:	2001      	movs	r0, #1
 8008c96:	f7ff ff89 	bl	8008bac <DS3231_SetInterruptMode>
}
 8008c9a:	bf00      	nop
 8008c9c:	3710      	adds	r7, #16
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b082      	sub	sp, #8
 8008ca6:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 8008ca8:	200f      	movs	r0, #15
 8008caa:	f7ff ff5d 	bl	8008b68 <DS3231_GetRegByte>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	f023 0301 	bic.w	r3, r3, #1
 8008cb4:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 8008cb6:	79fb      	ldrb	r3, [r7, #7]
 8008cb8:	f023 0301 	bic.w	r3, r3, #1
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	200f      	movs	r0, #15
 8008cc2:	f7ff ff33 	bl	8008b2c <DS3231_SetRegByte>
}
 8008cc6:	bf00      	nop
 8008cc8:	3708      	adds	r7, #8
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <DS3231_GetDate>:

/**
 * @brief Gets the current day of month.
 * @return Day of month, 1 to 31.
 */
uint8_t DS3231_GetDate(void) {
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_DATE));
 8008cd2:	2004      	movs	r0, #4
 8008cd4:	f7ff ff48 	bl	8008b68 <DS3231_GetRegByte>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f000 f959 	bl	8008f92 <DS3231_DecodeBCD>
 8008ce0:	4603      	mov	r3, r0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <DS3231_GetMonth>:

/**
 * @brief Gets the current month.
 * @return Month, 1 to 12.
 */
uint8_t DS3231_GetMonth(void) {
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MONTH) & 0x7f);
 8008cea:	2005      	movs	r0, #5
 8008cec:	f7ff ff3c 	bl	8008b68 <DS3231_GetRegByte>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cf6:	b2db      	uxtb	r3, r3
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f000 f94a 	bl	8008f92 <DS3231_DecodeBCD>
 8008cfe:	4603      	mov	r3, r0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <DS3231_GetYear>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2199.
 */
uint16_t DS3231_GetYear(void) {
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b082      	sub	sp, #8
 8008d08:	af00      	add	r7, sp, #0
	uint8_t decYear = DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_YEAR));
 8008d0a:	2006      	movs	r0, #6
 8008d0c:	f7ff ff2c 	bl	8008b68 <DS3231_GetRegByte>
 8008d10:	4603      	mov	r3, r0
 8008d12:	4618      	mov	r0, r3
 8008d14:	f000 f93d 	bl	8008f92 <DS3231_DecodeBCD>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	71fb      	strb	r3, [r7, #7]
	uint16_t century = (DS3231_GetRegByte(DS3231_REG_MONTH) >> DS3231_CENTURY) * 100 + 2000;
 8008d1c:	2005      	movs	r0, #5
 8008d1e:	f7ff ff23 	bl	8008b68 <DS3231_GetRegByte>
 8008d22:	4603      	mov	r3, r0
 8008d24:	09db      	lsrs	r3, r3, #7
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	461a      	mov	r2, r3
 8008d2a:	0092      	lsls	r2, r2, #2
 8008d2c:	4413      	add	r3, r2
 8008d2e:	461a      	mov	r2, r3
 8008d30:	0091      	lsls	r1, r2, #2
 8008d32:	461a      	mov	r2, r3
 8008d34:	460b      	mov	r3, r1
 8008d36:	4413      	add	r3, r2
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8008d40:	80bb      	strh	r3, [r7, #4]
	return century + decYear;
 8008d42:	79fb      	ldrb	r3, [r7, #7]
 8008d44:	b29a      	uxth	r2, r3
 8008d46:	88bb      	ldrh	r3, [r7, #4]
 8008d48:	4413      	add	r3, r2
 8008d4a:	b29b      	uxth	r3, r3
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3708      	adds	r7, #8
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <DS3231_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS3231_GetHour(void) {
 8008d54:	b580      	push	{r7, lr}
 8008d56:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_HOUR));
 8008d58:	2002      	movs	r0, #2
 8008d5a:	f7ff ff05 	bl	8008b68 <DS3231_GetRegByte>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	4618      	mov	r0, r3
 8008d62:	f000 f916 	bl	8008f92 <DS3231_DecodeBCD>
 8008d66:	4603      	mov	r3, r0
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <DS3231_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS3231_GetMinute(void) {
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MINUTE));
 8008d70:	2001      	movs	r0, #1
 8008d72:	f7ff fef9 	bl	8008b68 <DS3231_GetRegByte>
 8008d76:	4603      	mov	r3, r0
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f000 f90a 	bl	8008f92 <DS3231_DecodeBCD>
 8008d7e:	4603      	mov	r3, r0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <DS3231_GetSecond>:

/**
 * @brief Gets the current second. Clock halt bit not included.
 * @return Second, 0 to 59.
 */
uint8_t DS3231_GetSecond(void) {
 8008d84:	b580      	push	{r7, lr}
 8008d86:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_SECOND));
 8008d88:	2000      	movs	r0, #0
 8008d8a:	f7ff feed 	bl	8008b68 <DS3231_GetRegByte>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	4618      	mov	r0, r3
 8008d92:	f000 f8fe 	bl	8008f92 <DS3231_DecodeBCD>
 8008d96:	4603      	mov	r3, r0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <DS3231_SetDayOfWeek>:

/**
 * @brief Set the current day of week.
 * @param dayOfWeek Days since last Sunday, 1 to 7.
 */
void DS3231_SetDayOfWeek(uint8_t dayOfWeek) {
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b082      	sub	sp, #8
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	4603      	mov	r3, r0
 8008da4:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_DOW, DS3231_EncodeBCD(dayOfWeek));
 8008da6:	79fb      	ldrb	r3, [r7, #7]
 8008da8:	4618      	mov	r0, r3
 8008daa:	f000 f90b 	bl	8008fc4 <DS3231_EncodeBCD>
 8008dae:	4603      	mov	r3, r0
 8008db0:	4619      	mov	r1, r3
 8008db2:	2003      	movs	r0, #3
 8008db4:	f7ff feba 	bl	8008b2c <DS3231_SetRegByte>
}
 8008db8:	bf00      	nop
 8008dba:	3708      	adds	r7, #8
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <DS3231_SetDate>:

/**
 * @brief Set the current day of month.
 * @param date Day of month, 1 to 31.
 */
void DS3231_SetDate(uint8_t date) {
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b082      	sub	sp, #8
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_DATE, DS3231_EncodeBCD(date));
 8008dca:	79fb      	ldrb	r3, [r7, #7]
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f000 f8f9 	bl	8008fc4 <DS3231_EncodeBCD>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	2004      	movs	r0, #4
 8008dd8:	f7ff fea8 	bl	8008b2c <DS3231_SetRegByte>
}
 8008ddc:	bf00      	nop
 8008dde:	3708      	adds	r7, #8
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <DS3231_SetMonth>:

/**
 * @brief Set the current month.
 * @param month Month, 1 to 12.
 */
void DS3231_SetMonth(uint8_t month) {
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	4603      	mov	r3, r0
 8008dec:	71fb      	strb	r3, [r7, #7]
	uint8_t century = DS3231_GetRegByte(DS3231_REG_MONTH) & 0x80;
 8008dee:	2005      	movs	r0, #5
 8008df0:	f7ff feba 	bl	8008b68 <DS3231_GetRegByte>
 8008df4:	4603      	mov	r3, r0
 8008df6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008dfa:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_MONTH, DS3231_EncodeBCD(month) | century);
 8008dfc:	79fb      	ldrb	r3, [r7, #7]
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f000 f8e0 	bl	8008fc4 <DS3231_EncodeBCD>
 8008e04:	4603      	mov	r3, r0
 8008e06:	461a      	mov	r2, r3
 8008e08:	7bfb      	ldrb	r3, [r7, #15]
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	4619      	mov	r1, r3
 8008e10:	2005      	movs	r0, #5
 8008e12:	f7ff fe8b 	bl	8008b2c <DS3231_SetRegByte>
}
 8008e16:	bf00      	nop
 8008e18:	3710      	adds	r7, #16
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
	...

08008e20 <DS3231_SetYear>:

/**
 * @brief Set the current year.
 * @param year Year, 2000 to 2199.
 */
void DS3231_SetYear(uint16_t year) {
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	4603      	mov	r3, r0
 8008e28:	80fb      	strh	r3, [r7, #6]
	uint8_t century = (year / 100) % 20;
 8008e2a:	88fb      	ldrh	r3, [r7, #6]
 8008e2c:	4a1c      	ldr	r2, [pc, #112]	@ (8008ea0 <DS3231_SetYear+0x80>)
 8008e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e32:	095b      	lsrs	r3, r3, #5
 8008e34:	b29a      	uxth	r2, r3
 8008e36:	4b1b      	ldr	r3, [pc, #108]	@ (8008ea4 <DS3231_SetYear+0x84>)
 8008e38:	fba3 1302 	umull	r1, r3, r3, r2
 8008e3c:	0919      	lsrs	r1, r3, #4
 8008e3e:	460b      	mov	r3, r1
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	440b      	add	r3, r1
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	1ad3      	subs	r3, r2, r3
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	73fb      	strb	r3, [r7, #15]
	uint8_t monthReg = (DS3231_GetRegByte(DS3231_REG_MONTH) & 0x7f) | (century << DS3231_CENTURY);
 8008e4c:	2005      	movs	r0, #5
 8008e4e:	f7ff fe8b 	bl	8008b68 <DS3231_GetRegByte>
 8008e52:	4603      	mov	r3, r0
 8008e54:	b25b      	sxtb	r3, r3
 8008e56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e5a:	b25a      	sxtb	r2, r3
 8008e5c:	7bfb      	ldrb	r3, [r7, #15]
 8008e5e:	01db      	lsls	r3, r3, #7
 8008e60:	b25b      	sxtb	r3, r3
 8008e62:	4313      	orrs	r3, r2
 8008e64:	b25b      	sxtb	r3, r3
 8008e66:	73bb      	strb	r3, [r7, #14]
	DS3231_SetRegByte(DS3231_REG_MONTH, monthReg);
 8008e68:	7bbb      	ldrb	r3, [r7, #14]
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	2005      	movs	r0, #5
 8008e6e:	f7ff fe5d 	bl	8008b2c <DS3231_SetRegByte>
	DS3231_SetRegByte(DS3231_REG_YEAR, DS3231_EncodeBCD(year % 100));
 8008e72:	88fb      	ldrh	r3, [r7, #6]
 8008e74:	4a0a      	ldr	r2, [pc, #40]	@ (8008ea0 <DS3231_SetYear+0x80>)
 8008e76:	fba2 1203 	umull	r1, r2, r2, r3
 8008e7a:	0952      	lsrs	r2, r2, #5
 8008e7c:	2164      	movs	r1, #100	@ 0x64
 8008e7e:	fb01 f202 	mul.w	r2, r1, r2
 8008e82:	1a9b      	subs	r3, r3, r2
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f000 f89b 	bl	8008fc4 <DS3231_EncodeBCD>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	4619      	mov	r1, r3
 8008e92:	2006      	movs	r0, #6
 8008e94:	f7ff fe4a 	bl	8008b2c <DS3231_SetRegByte>
}
 8008e98:	bf00      	nop
 8008e9a:	3710      	adds	r7, #16
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	51eb851f 	.word	0x51eb851f
 8008ea4:	cccccccd 	.word	0xcccccccd

08008ea8 <DS3231_SetHour>:

/**
 * @brief Set the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS3231_SetHour(uint8_t hour_24mode) {
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	4603      	mov	r3, r0
 8008eb0:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 8008eb2:	79fb      	ldrb	r3, [r7, #7]
 8008eb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f000 f882 	bl	8008fc4 <DS3231_EncodeBCD>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	2002      	movs	r0, #2
 8008ec6:	f7ff fe31 	bl	8008b2c <DS3231_SetRegByte>
}
 8008eca:	bf00      	nop
 8008ecc:	3708      	adds	r7, #8
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <DS3231_SetMinute>:

/**
 * @brief Set the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS3231_SetMinute(uint8_t minute) {
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b082      	sub	sp, #8
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	4603      	mov	r3, r0
 8008eda:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 8008edc:	79fb      	ldrb	r3, [r7, #7]
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f000 f870 	bl	8008fc4 <DS3231_EncodeBCD>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	2001      	movs	r0, #1
 8008eea:	f7ff fe1f 	bl	8008b2c <DS3231_SetRegByte>
}
 8008eee:	bf00      	nop
 8008ef0:	3708      	adds	r7, #8
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <DS3231_SetSecond>:

/**
 * @brief Set the current second.
 * @param second Second, 0 to 59.
 */
void DS3231_SetSecond(uint8_t second) {
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b082      	sub	sp, #8
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	4603      	mov	r3, r0
 8008efe:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_SECOND, DS3231_EncodeBCD(second));
 8008f00:	79fb      	ldrb	r3, [r7, #7]
 8008f02:	4618      	mov	r0, r3
 8008f04:	f000 f85e 	bl	8008fc4 <DS3231_EncodeBCD>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	2000      	movs	r0, #0
 8008f0e:	f7ff fe0d 	bl	8008b2c <DS3231_SetRegByte>
}
 8008f12:	bf00      	nop
 8008f14:	3708      	adds	r7, #8
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}

08008f1a <DS3231_SetFullTime>:
 * @brief Set the current time.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 * @param minute  Minute, 0 to 59.
 * @param second Second, 0 to 59.
 */
void DS3231_SetFullTime(uint8_t  hour_24mode, uint8_t minute, uint8_t second){
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b082      	sub	sp, #8
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	4603      	mov	r3, r0
 8008f22:	71fb      	strb	r3, [r7, #7]
 8008f24:	460b      	mov	r3, r1
 8008f26:	71bb      	strb	r3, [r7, #6]
 8008f28:	4613      	mov	r3, r2
 8008f2a:	717b      	strb	r3, [r7, #5]
	DS3231_SetHour(hour_24mode);
 8008f2c:	79fb      	ldrb	r3, [r7, #7]
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7ff ffba 	bl	8008ea8 <DS3231_SetHour>
	DS3231_SetMinute(minute);
 8008f34:	79bb      	ldrb	r3, [r7, #6]
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7ff ffcb 	bl	8008ed2 <DS3231_SetMinute>
	DS3231_SetSecond(second);
 8008f3c:	797b      	ldrb	r3, [r7, #5]
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7ff ffd9 	bl	8008ef6 <DS3231_SetSecond>
}
 8008f44:	bf00      	nop
 8008f46:	3708      	adds	r7, #8
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <DS3231_SetFullDate>:
 * @param date Date, 0 to 31.
 * @param month Month, 1 to 12.
 * @param dow Days since last Sunday, 1 to 7.
 * @param year Year, 2000 to 2199.
 */
void DS3231_SetFullDate(uint8_t date, uint8_t month, uint8_t dow, uint16_t year){
 8008f4c:	b590      	push	{r4, r7, lr}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	4604      	mov	r4, r0
 8008f54:	4608      	mov	r0, r1
 8008f56:	4611      	mov	r1, r2
 8008f58:	461a      	mov	r2, r3
 8008f5a:	4623      	mov	r3, r4
 8008f5c:	71fb      	strb	r3, [r7, #7]
 8008f5e:	4603      	mov	r3, r0
 8008f60:	71bb      	strb	r3, [r7, #6]
 8008f62:	460b      	mov	r3, r1
 8008f64:	717b      	strb	r3, [r7, #5]
 8008f66:	4613      	mov	r3, r2
 8008f68:	807b      	strh	r3, [r7, #2]
	DS3231_SetDate(date);
 8008f6a:	79fb      	ldrb	r3, [r7, #7]
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f7ff ff27 	bl	8008dc0 <DS3231_SetDate>
	DS3231_SetMonth(month);
 8008f72:	79bb      	ldrb	r3, [r7, #6]
 8008f74:	4618      	mov	r0, r3
 8008f76:	f7ff ff35 	bl	8008de4 <DS3231_SetMonth>
	DS3231_SetDayOfWeek(dow);
 8008f7a:	797b      	ldrb	r3, [r7, #5]
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f7ff ff0d 	bl	8008d9c <DS3231_SetDayOfWeek>
	DS3231_SetYear(year);
 8008f82:	887b      	ldrh	r3, [r7, #2]
 8008f84:	4618      	mov	r0, r3
 8008f86:	f7ff ff4b 	bl	8008e20 <DS3231_SetYear>
}
 8008f8a:	bf00      	nop
 8008f8c:	370c      	adds	r7, #12
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd90      	pop	{r4, r7, pc}

08008f92 <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 8008f92:	b480      	push	{r7}
 8008f94:	b083      	sub	sp, #12
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	4603      	mov	r3, r0
 8008f9a:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8008f9c:	79fb      	ldrb	r3, [r7, #7]
 8008f9e:	091b      	lsrs	r3, r3, #4
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	0092      	lsls	r2, r2, #2
 8008fa6:	4413      	add	r3, r2
 8008fa8:	005b      	lsls	r3, r3, #1
 8008faa:	b2da      	uxtb	r2, r3
 8008fac:	79fb      	ldrb	r3, [r7, #7]
 8008fae:	f003 030f 	and.w	r3, r3, #15
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	4413      	add	r3, r2
 8008fb6:	b2db      	uxtb	r3, r3
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	4603      	mov	r3, r0
 8008fcc:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 8008fce:	79fa      	ldrb	r2, [r7, #7]
 8008fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8009004 <DS3231_EncodeBCD+0x40>)
 8008fd2:	fba3 1302 	umull	r1, r3, r3, r2
 8008fd6:	08d9      	lsrs	r1, r3, #3
 8008fd8:	460b      	mov	r3, r1
 8008fda:	009b      	lsls	r3, r3, #2
 8008fdc:	440b      	add	r3, r1
 8008fde:	005b      	lsls	r3, r3, #1
 8008fe0:	1ad3      	subs	r3, r2, r3
 8008fe2:	b2da      	uxtb	r2, r3
 8008fe4:	79fb      	ldrb	r3, [r7, #7]
 8008fe6:	4907      	ldr	r1, [pc, #28]	@ (8009004 <DS3231_EncodeBCD+0x40>)
 8008fe8:	fba1 1303 	umull	r1, r3, r1, r3
 8008fec:	08db      	lsrs	r3, r3, #3
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	011b      	lsls	r3, r3, #4
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	4413      	add	r3, r2
 8008ff6:	b2db      	uxtb	r3, r3
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr
 8009004:	cccccccd 	.word	0xcccccccd

08009008 <ht16k33_init>:

} Ht16k33_Config;


Ht16k33_Config_t* ht16k33_init(I2C_HandleTypeDef* const hi2c, const uint8_t addrs)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	460b      	mov	r3, r1
 8009012:	70fb      	strb	r3, [r7, #3]
  Ht16k33_Config_t* pConfig = malloc(sizeof(Ht16k33_Config_t));
 8009014:	200c      	movs	r0, #12
 8009016:	f006 fb67 	bl	800f6e8 <malloc>
 800901a:	4603      	mov	r3, r0
 800901c:	60fb      	str	r3, [r7, #12]
  pConfig->i2cAddrs = addrs << 1;
 800901e:	78fb      	ldrb	r3, [r7, #3]
 8009020:	005b      	lsls	r3, r3, #1
 8009022:	b2da      	uxtb	r2, r3
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	711a      	strb	r2, [r3, #4]
  pConfig->hi2c = hi2c;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	601a      	str	r2, [r3, #0]

  pConfig->hSysSetupReg.regAddrs        = SYSTEM_SETUP_REG_ADDRESS;
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	7953      	ldrb	r3, [r2, #5]
 8009032:	2102      	movs	r1, #2
 8009034:	f361 1307 	bfi	r3, r1, #4, #4
 8009038:	7153      	strb	r3, [r2, #5]
  pConfig->hDisplayReg.regAddrs         = DISPLAY_SETUP_REG_ADDRESS;
 800903a:	68fa      	ldr	r2, [r7, #12]
 800903c:	7993      	ldrb	r3, [r2, #6]
 800903e:	2108      	movs	r1, #8
 8009040:	f361 1307 	bfi	r3, r1, #4, #4
 8009044:	7193      	strb	r3, [r2, #6]
  pConfig->hDimmingSetReg.regAddrs      = DIMMING_SET_REG_ADDRESS;
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	79d3      	ldrb	r3, [r2, #7]
 800904a:	210e      	movs	r1, #14
 800904c:	f361 1307 	bfi	r3, r1, #4, #4
 8009050:	71d3      	strb	r3, [r2, #7]
  pConfig->hDisplayAddrsPtrReg.regAddrs = DISPLAY_DATA_REG_ADDRESS;
 8009052:	68fa      	ldr	r2, [r7, #12]
 8009054:	7a13      	ldrb	r3, [r2, #8]
 8009056:	f36f 1307 	bfc	r3, #4, #4
 800905a:	7213      	strb	r3, [r2, #8]
  return pConfig;
 800905c:	68fb      	ldr	r3, [r7, #12]
}
 800905e:	4618      	mov	r0, r3
 8009060:	3710      	adds	r7, #16
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}

08009066 <ht16k33_setSystemSetup>:

Ht16k33_Status_t ht16k33_setSystemSetup(Ht16k33_Config_t* const pConfig, const Ht16k33_DisplayStatus_e displayStatus)
{
 8009066:	b580      	push	{r7, lr}
 8009068:	b086      	sub	sp, #24
 800906a:	af02      	add	r7, sp, #8
 800906c:	6078      	str	r0, [r7, #4]
 800906e:	460b      	mov	r3, r1
 8009070:	70fb      	strb	r3, [r7, #3]
  pConfig->hSysSetupReg.s = displayStatus;
 8009072:	78fb      	ldrb	r3, [r7, #3]
 8009074:	f003 0301 	and.w	r3, r3, #1
 8009078:	b2d9      	uxtb	r1, r3
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	7953      	ldrb	r3, [r2, #5]
 800907e:	f361 0300 	bfi	r3, r1, #0, #1
 8009082:	7153      	strb	r3, [r2, #5]

  uint8_t sysSetupReg = 0;
 8009084:	2300      	movs	r3, #0
 8009086:	73fb      	strb	r3, [r7, #15]
  sysSetupReg |= (pConfig->hSysSetupReg.s & 0x01) << 0;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	795b      	ldrb	r3, [r3, #5]
 800908c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009090:	b2db      	uxtb	r3, r3
 8009092:	b25b      	sxtb	r3, r3
 8009094:	f003 0301 	and.w	r3, r3, #1
 8009098:	b25a      	sxtb	r2, r3
 800909a:	7bfb      	ldrb	r3, [r7, #15]
 800909c:	b25b      	sxtb	r3, r3
 800909e:	4313      	orrs	r3, r2
 80090a0:	b25b      	sxtb	r3, r3
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	73fb      	strb	r3, [r7, #15]
  sysSetupReg |= (pConfig->hSysSetupReg.regAddrs & 0x0F) << 4;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	795b      	ldrb	r3, [r3, #5]
 80090aa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	011b      	lsls	r3, r3, #4
 80090b2:	b25a      	sxtb	r2, r3
 80090b4:	7bfb      	ldrb	r3, [r7, #15]
 80090b6:	b25b      	sxtb	r3, r3
 80090b8:	4313      	orrs	r3, r2
 80090ba:	b25b      	sxtb	r3, r3
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	73fb      	strb	r3, [r7, #15]

  return
      HAL_I2C_Master_Transmit(pConfig->hi2c, pConfig->i2cAddrs, &sysSetupReg, sizeof(sysSetupReg),HAL_MAX_DELAY);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6818      	ldr	r0, [r3, #0]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	791b      	ldrb	r3, [r3, #4]
 80090c8:	4619      	mov	r1, r3
 80090ca:	f107 020f 	add.w	r2, r7, #15
 80090ce:	f04f 33ff 	mov.w	r3, #4294967295
 80090d2:	9300      	str	r3, [sp, #0]
 80090d4:	2301      	movs	r3, #1
 80090d6:	f7f9 fdff 	bl	8002cd8 <HAL_I2C_Master_Transmit>
 80090da:	4603      	mov	r3, r0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	bf14      	ite	ne
 80090e0:	2301      	movne	r3, #1
 80090e2:	2300      	moveq	r3, #0
 80090e4:	b2db      	uxtb	r3, r3
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3710      	adds	r7, #16
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}

080090ee <ht16k33_setDisplaySetup>:

Ht16k33_Status_t ht16k33_setDisplaySetup(Ht16k33_Config_t* const pConfig, const Ht16k33_DisplayStatus_e dispStatus,
    const Ht16k33_BlinkingFreq_e frequency)
{
 80090ee:	b580      	push	{r7, lr}
 80090f0:	b086      	sub	sp, #24
 80090f2:	af02      	add	r7, sp, #8
 80090f4:	6078      	str	r0, [r7, #4]
 80090f6:	460b      	mov	r3, r1
 80090f8:	70fb      	strb	r3, [r7, #3]
 80090fa:	4613      	mov	r3, r2
 80090fc:	70bb      	strb	r3, [r7, #2]
  pConfig->hDisplayReg.d = dispStatus;
 80090fe:	78fb      	ldrb	r3, [r7, #3]
 8009100:	f003 0301 	and.w	r3, r3, #1
 8009104:	b2d9      	uxtb	r1, r3
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	7993      	ldrb	r3, [r2, #6]
 800910a:	f361 0300 	bfi	r3, r1, #0, #1
 800910e:	7193      	strb	r3, [r2, #6]
  pConfig->hDisplayReg.b = frequency;
 8009110:	78bb      	ldrb	r3, [r7, #2]
 8009112:	f003 0303 	and.w	r3, r3, #3
 8009116:	b2d9      	uxtb	r1, r3
 8009118:	687a      	ldr	r2, [r7, #4]
 800911a:	7993      	ldrb	r3, [r2, #6]
 800911c:	f361 0342 	bfi	r3, r1, #1, #2
 8009120:	7193      	strb	r3, [r2, #6]

  uint8_t dispSetupReg = 0;
 8009122:	2300      	movs	r3, #0
 8009124:	73fb      	strb	r3, [r7, #15]

  dispSetupReg |= (pConfig->hDisplayReg.d & 0x01) << 0;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	799b      	ldrb	r3, [r3, #6]
 800912a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800912e:	b2db      	uxtb	r3, r3
 8009130:	b25b      	sxtb	r3, r3
 8009132:	f003 0301 	and.w	r3, r3, #1
 8009136:	b25a      	sxtb	r2, r3
 8009138:	7bfb      	ldrb	r3, [r7, #15]
 800913a:	b25b      	sxtb	r3, r3
 800913c:	4313      	orrs	r3, r2
 800913e:	b25b      	sxtb	r3, r3
 8009140:	b2db      	uxtb	r3, r3
 8009142:	73fb      	strb	r3, [r7, #15]
  dispSetupReg |= (pConfig->hDisplayReg.b & 0x03) << 1;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	799b      	ldrb	r3, [r3, #6]
 8009148:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800914c:	b2db      	uxtb	r3, r3
 800914e:	005b      	lsls	r3, r3, #1
 8009150:	b25b      	sxtb	r3, r3
 8009152:	f003 0306 	and.w	r3, r3, #6
 8009156:	b25a      	sxtb	r2, r3
 8009158:	7bfb      	ldrb	r3, [r7, #15]
 800915a:	b25b      	sxtb	r3, r3
 800915c:	4313      	orrs	r3, r2
 800915e:	b25b      	sxtb	r3, r3
 8009160:	b2db      	uxtb	r3, r3
 8009162:	73fb      	strb	r3, [r7, #15]
  dispSetupReg |= (pConfig->hDisplayReg.regAddrs & 0x0F) << 4;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	799b      	ldrb	r3, [r3, #6]
 8009168:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800916c:	b2db      	uxtb	r3, r3
 800916e:	011b      	lsls	r3, r3, #4
 8009170:	b25a      	sxtb	r2, r3
 8009172:	7bfb      	ldrb	r3, [r7, #15]
 8009174:	b25b      	sxtb	r3, r3
 8009176:	4313      	orrs	r3, r2
 8009178:	b25b      	sxtb	r3, r3
 800917a:	b2db      	uxtb	r3, r3
 800917c:	73fb      	strb	r3, [r7, #15]

  return
      HAL_I2C_Master_Transmit(pConfig->hi2c, pConfig->i2cAddrs, &dispSetupReg, sizeof(dispSetupReg),HAL_MAX_DELAY);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6818      	ldr	r0, [r3, #0]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	791b      	ldrb	r3, [r3, #4]
 8009186:	4619      	mov	r1, r3
 8009188:	f107 020f 	add.w	r2, r7, #15
 800918c:	f04f 33ff 	mov.w	r3, #4294967295
 8009190:	9300      	str	r3, [sp, #0]
 8009192:	2301      	movs	r3, #1
 8009194:	f7f9 fda0 	bl	8002cd8 <HAL_I2C_Master_Transmit>
 8009198:	4603      	mov	r3, r0
 800919a:	2b00      	cmp	r3, #0
 800919c:	bf14      	ite	ne
 800919e:	2301      	movne	r3, #1
 80091a0:	2300      	moveq	r3, #0
 80091a2:	b2db      	uxtb	r3, r3
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3710      	adds	r7, #16
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <ht16k33_updateDisplayData>:
      HAL_I2C_Master_Transmit(pConfig->hi2c, pConfig->i2cAddrs, &dimmingSetReg, sizeof(dimmingSetReg),HAL_MAX_DELAY);
}

Ht16k33_Status_t ht16k33_updateDisplayData (Ht16k33_Config_t* const pConfig, const uint8_t ramAddrs,
    uint8_t* const dispDataBuffer, const uint8_t dispDataBufferSize)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b088      	sub	sp, #32
 80091b0:	af02      	add	r7, sp, #8
 80091b2:	60f8      	str	r0, [r7, #12]
 80091b4:	607a      	str	r2, [r7, #4]
 80091b6:	461a      	mov	r2, r3
 80091b8:	460b      	mov	r3, r1
 80091ba:	72fb      	strb	r3, [r7, #11]
 80091bc:	4613      	mov	r3, r2
 80091be:	72bb      	strb	r3, [r7, #10]
  uint8_t* transmitBuffer     = malloc (dispDataBufferSize + 1);
 80091c0:	7abb      	ldrb	r3, [r7, #10]
 80091c2:	3301      	adds	r3, #1
 80091c4:	4618      	mov	r0, r3
 80091c6:	f006 fa8f 	bl	800f6e8 <malloc>
 80091ca:	4603      	mov	r3, r0
 80091cc:	617b      	str	r3, [r7, #20]
  Ht16k33_Status_t isSuccess   = 0;
 80091ce:	2300      	movs	r3, #0
 80091d0:	74fb      	strb	r3, [r7, #19]
  uint8_t dispDataAddrsPtrReg = 0;
 80091d2:	2300      	movs	r3, #0
 80091d4:	74bb      	strb	r3, [r7, #18]

  pConfig->hDisplayAddrsPtrReg.a = ramAddrs;
 80091d6:	7afb      	ldrb	r3, [r7, #11]
 80091d8:	f003 030f 	and.w	r3, r3, #15
 80091dc:	b2d9      	uxtb	r1, r3
 80091de:	68fa      	ldr	r2, [r7, #12]
 80091e0:	7a13      	ldrb	r3, [r2, #8]
 80091e2:	f361 0303 	bfi	r3, r1, #0, #4
 80091e6:	7213      	strb	r3, [r2, #8]

  dispDataAddrsPtrReg |= (pConfig->hDisplayAddrsPtrReg.a & 0x0F) << 0;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	7a1b      	ldrb	r3, [r3, #8]
 80091ec:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	b25b      	sxtb	r3, r3
 80091f4:	f003 030f 	and.w	r3, r3, #15
 80091f8:	b25a      	sxtb	r2, r3
 80091fa:	7cbb      	ldrb	r3, [r7, #18]
 80091fc:	b25b      	sxtb	r3, r3
 80091fe:	4313      	orrs	r3, r2
 8009200:	b25b      	sxtb	r3, r3
 8009202:	b2db      	uxtb	r3, r3
 8009204:	74bb      	strb	r3, [r7, #18]
  dispDataAddrsPtrReg |= (pConfig->hDisplayAddrsPtrReg.regAddrs & 0x0F) << 4;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	7a1b      	ldrb	r3, [r3, #8]
 800920a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800920e:	b2db      	uxtb	r3, r3
 8009210:	011b      	lsls	r3, r3, #4
 8009212:	b25a      	sxtb	r2, r3
 8009214:	7cbb      	ldrb	r3, [r7, #18]
 8009216:	b25b      	sxtb	r3, r3
 8009218:	4313      	orrs	r3, r2
 800921a:	b25b      	sxtb	r3, r3
 800921c:	b2db      	uxtb	r3, r3
 800921e:	74bb      	strb	r3, [r7, #18]

  memcpy(transmitBuffer, &dispDataAddrsPtrReg, sizeof(dispDataAddrsPtrReg));
 8009220:	7cba      	ldrb	r2, [r7, #18]
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	701a      	strb	r2, [r3, #0]
  memcpy(transmitBuffer + 1, dispDataBuffer, dispDataBufferSize);
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	3301      	adds	r3, #1
 800922a:	7aba      	ldrb	r2, [r7, #10]
 800922c:	6879      	ldr	r1, [r7, #4]
 800922e:	4618      	mov	r0, r3
 8009230:	f006 fecb 	bl	800ffca <memcpy>

  isSuccess = HAL_I2C_Master_Transmit(pConfig->hi2c, pConfig->i2cAddrs, transmitBuffer, (dispDataBufferSize + 1),
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6818      	ldr	r0, [r3, #0]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	791b      	ldrb	r3, [r3, #4]
 800923c:	4619      	mov	r1, r3
 800923e:	7abb      	ldrb	r3, [r7, #10]
 8009240:	b29b      	uxth	r3, r3
 8009242:	3301      	adds	r3, #1
 8009244:	b29b      	uxth	r3, r3
 8009246:	f04f 32ff 	mov.w	r2, #4294967295
 800924a:	9200      	str	r2, [sp, #0]
 800924c:	697a      	ldr	r2, [r7, #20]
 800924e:	f7f9 fd43 	bl	8002cd8 <HAL_I2C_Master_Transmit>
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	bf14      	ite	ne
 8009258:	2301      	movne	r3, #1
 800925a:	2300      	moveq	r3, #0
 800925c:	74fb      	strb	r3, [r7, #19]
      HAL_MAX_DELAY);

  free(transmitBuffer);
 800925e:	6978      	ldr	r0, [r7, #20]
 8009260:	f006 fa4a 	bl	800f6f8 <free>

  return isSuccess;
 8009264:	7cfb      	ldrb	r3, [r7, #19]
}
 8009266:	4618      	mov	r0, r3
 8009268:	3718      	adds	r7, #24
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}

0800926e <keypad3x4w_init>:

} Keypad3x4w_Config;


Keypad3x4w_Config_t * keypad3x4w_init(const Keypad3x4w_PinConfig_t * const pPinConfig)
{
 800926e:	b580      	push	{r7, lr}
 8009270:	b084      	sub	sp, #16
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
  Keypad3x4w_Config_t * pConfig = malloc(sizeof(Keypad3x4w_Config_t));
 8009276:	2008      	movs	r0, #8
 8009278:	f006 fa36 	bl	800f6e8 <malloc>
 800927c:	4603      	mov	r3, r0
 800927e:	60fb      	str	r3, [r7, #12]

  pConfig->pkeypadPinConfig = pPinConfig;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	601a      	str	r2, [r3, #0]

  return pConfig;
 8009286:	68fb      	ldr	r3, [r7, #12]
}
 8009288:	4618      	mov	r0, r3
 800928a:	3710      	adds	r7, #16
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <keypad3x4w_setColumnGpio>:

Keypad3x4w_Status_t keypad3x4w_setColumnGpio(Keypad3x4w_Config_t * pConfig, keypad3x4w_ColumnScanType_e columnScanType)
{
 8009290:	b5b0      	push	{r4, r5, r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	460b      	mov	r3, r1
 800929a:	70fb      	strb	r3, [r7, #3]

  for (uint8_t columnCount = 0; columnCount < KEYPAD_COLUMN_NUMBER; columnCount++)
 800929c:	2300      	movs	r3, #0
 800929e:	73fb      	strb	r3, [r7, #15]
 80092a0:	e01b      	b.n	80092da <keypad3x4w_setColumnGpio+0x4a>
  {
    HAL_GPIO_WritePin(pConfig->pkeypadPinConfig->Column_Port[columnCount],
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	7bfa      	ldrb	r2, [r7, #15]
 80092a8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
        pConfig->pkeypadPinConfig->Column_Pin[columnCount], columnScanConfig[columnScanType][columnCount]);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681a      	ldr	r2, [r3, #0]
    HAL_GPIO_WritePin(pConfig->pkeypadPinConfig->Column_Port[columnCount],
 80092b0:	7bfb      	ldrb	r3, [r7, #15]
        pConfig->pkeypadPinConfig->Column_Pin[columnCount], columnScanConfig[columnScanType][columnCount]);
 80092b2:	3304      	adds	r3, #4
 80092b4:	005b      	lsls	r3, r3, #1
 80092b6:	4413      	add	r3, r2
 80092b8:	889c      	ldrh	r4, [r3, #4]
 80092ba:	78fa      	ldrb	r2, [r7, #3]
 80092bc:	7bf9      	ldrb	r1, [r7, #15]
 80092be:	4d0b      	ldr	r5, [pc, #44]	@ (80092ec <keypad3x4w_setColumnGpio+0x5c>)
 80092c0:	4613      	mov	r3, r2
 80092c2:	005b      	lsls	r3, r3, #1
 80092c4:	4413      	add	r3, r2
 80092c6:	442b      	add	r3, r5
 80092c8:	440b      	add	r3, r1
 80092ca:	781b      	ldrb	r3, [r3, #0]
    HAL_GPIO_WritePin(pConfig->pkeypadPinConfig->Column_Port[columnCount],
 80092cc:	461a      	mov	r2, r3
 80092ce:	4621      	mov	r1, r4
 80092d0:	f7f9 fb8c 	bl	80029ec <HAL_GPIO_WritePin>
  for (uint8_t columnCount = 0; columnCount < KEYPAD_COLUMN_NUMBER; columnCount++)
 80092d4:	7bfb      	ldrb	r3, [r7, #15]
 80092d6:	3301      	adds	r3, #1
 80092d8:	73fb      	strb	r3, [r7, #15]
 80092da:	7bfb      	ldrb	r3, [r7, #15]
 80092dc:	2b02      	cmp	r3, #2
 80092de:	d9e0      	bls.n	80092a2 <keypad3x4w_setColumnGpio+0x12>
  }
  return 0;
 80092e0:	2300      	movs	r3, #0
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3710      	adds	r7, #16
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bdb0      	pop	{r4, r5, r7, pc}
 80092ea:	bf00      	nop
 80092ec:	08010cbc 	.word	0x08010cbc

080092f0 <keypad3x4w_readKeypad>:


Keypad3x4w_Status_t keypad3x4w_readKeypad(Keypad3x4w_Config_t * pConfig, uint8_t* pKey)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
  Keypad3x4w_Status_t isPressed = false;
 80092fa:	2300      	movs	r3, #0
 80092fc:	73fb      	strb	r3, [r7, #15]

  //Turn on column GPIO outputs
  keypad3x4w_setColumnGpio(pConfig, keypad3x4w_ColumnScanType_Full);
 80092fe:	2100      	movs	r1, #0
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f7ff ffc5 	bl	8009290 <keypad3x4w_setColumnGpio>

  //Check if a row has been activated
  for (uint8_t rowCount = 0; rowCount < KEYPAD_ROW_NUMBER; rowCount++)
 8009306:	2300      	movs	r3, #0
 8009308:	73bb      	strb	r3, [r7, #14]
 800930a:	e050      	b.n	80093ae <keypad3x4w_readKeypad+0xbe>
  {
    if (HAL_GPIO_ReadPin (pConfig->pkeypadPinConfig->Row_Port[rowCount], pConfig->pkeypadPinConfig->Row_Pin[rowCount]))
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	7bbb      	ldrb	r3, [r7, #14]
 8009312:	3304      	adds	r3, #4
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	4413      	add	r3, r2
 8009318:	6858      	ldr	r0, [r3, #4]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	7bbb      	ldrb	r3, [r7, #14]
 8009320:	3310      	adds	r3, #16
 8009322:	005b      	lsls	r3, r3, #1
 8009324:	4413      	add	r3, r2
 8009326:	889b      	ldrh	r3, [r3, #4]
 8009328:	4619      	mov	r1, r3
 800932a:	f7f9 fb47 	bl	80029bc <HAL_GPIO_ReadPin>
 800932e:	4603      	mov	r3, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d039      	beq.n	80093a8 <keypad3x4w_readKeypad+0xb8>
    {
      //Determine Column Pressed
      for (uint8_t columnCount = 0; columnCount < KEYPAD_COLUMN_NUMBER; columnCount++)
 8009334:	2300      	movs	r3, #0
 8009336:	737b      	strb	r3, [r7, #13]
 8009338:	e033      	b.n	80093a2 <keypad3x4w_readKeypad+0xb2>
      {
        keypad3x4w_setColumnGpio(pConfig, keypad3x4w_ColumnScanType_Col1 + columnCount);
 800933a:	7b7b      	ldrb	r3, [r7, #13]
 800933c:	3301      	adds	r3, #1
 800933e:	b2db      	uxtb	r3, r3
 8009340:	4619      	mov	r1, r3
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f7ff ffa4 	bl	8009290 <keypad3x4w_setColumnGpio>

        for (uint8_t rowCount = 0; rowCount < KEYPAD_ROW_NUMBER; rowCount++)
 8009348:	2300      	movs	r3, #0
 800934a:	733b      	strb	r3, [r7, #12]
 800934c:	e023      	b.n	8009396 <keypad3x4w_readKeypad+0xa6>
        {
          if (HAL_GPIO_ReadPin (pConfig->pkeypadPinConfig->Row_Port[rowCount], pConfig->pkeypadPinConfig->Row_Pin[rowCount]))
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	7b3b      	ldrb	r3, [r7, #12]
 8009354:	3304      	adds	r3, #4
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	4413      	add	r3, r2
 800935a:	6858      	ldr	r0, [r3, #4]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681a      	ldr	r2, [r3, #0]
 8009360:	7b3b      	ldrb	r3, [r7, #12]
 8009362:	3310      	adds	r3, #16
 8009364:	005b      	lsls	r3, r3, #1
 8009366:	4413      	add	r3, r2
 8009368:	889b      	ldrh	r3, [r3, #4]
 800936a:	4619      	mov	r1, r3
 800936c:	f7f9 fb26 	bl	80029bc <HAL_GPIO_ReadPin>
 8009370:	4603      	mov	r3, r0
 8009372:	2b00      	cmp	r3, #0
 8009374:	d00c      	beq.n	8009390 <keypad3x4w_readKeypad+0xa0>
          {
            isPressed = true;
 8009376:	2301      	movs	r3, #1
 8009378:	73fb      	strb	r3, [r7, #15]
            *pKey = keypadNumberOrder[rowCount][columnCount];
 800937a:	7b3a      	ldrb	r2, [r7, #12]
 800937c:	7b79      	ldrb	r1, [r7, #13]
 800937e:	4810      	ldr	r0, [pc, #64]	@ (80093c0 <keypad3x4w_readKeypad+0xd0>)
 8009380:	4613      	mov	r3, r2
 8009382:	005b      	lsls	r3, r3, #1
 8009384:	4413      	add	r3, r2
 8009386:	4403      	add	r3, r0
 8009388:	440b      	add	r3, r1
 800938a:	781a      	ldrb	r2, [r3, #0]
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	701a      	strb	r2, [r3, #0]
        for (uint8_t rowCount = 0; rowCount < KEYPAD_ROW_NUMBER; rowCount++)
 8009390:	7b3b      	ldrb	r3, [r7, #12]
 8009392:	3301      	adds	r3, #1
 8009394:	733b      	strb	r3, [r7, #12]
 8009396:	7b3b      	ldrb	r3, [r7, #12]
 8009398:	2b03      	cmp	r3, #3
 800939a:	d9d8      	bls.n	800934e <keypad3x4w_readKeypad+0x5e>
      for (uint8_t columnCount = 0; columnCount < KEYPAD_COLUMN_NUMBER; columnCount++)
 800939c:	7b7b      	ldrb	r3, [r7, #13]
 800939e:	3301      	adds	r3, #1
 80093a0:	737b      	strb	r3, [r7, #13]
 80093a2:	7b7b      	ldrb	r3, [r7, #13]
 80093a4:	2b02      	cmp	r3, #2
 80093a6:	d9c8      	bls.n	800933a <keypad3x4w_readKeypad+0x4a>
  for (uint8_t rowCount = 0; rowCount < KEYPAD_ROW_NUMBER; rowCount++)
 80093a8:	7bbb      	ldrb	r3, [r7, #14]
 80093aa:	3301      	adds	r3, #1
 80093ac:	73bb      	strb	r3, [r7, #14]
 80093ae:	7bbb      	ldrb	r3, [r7, #14]
 80093b0:	2b03      	cmp	r3, #3
 80093b2:	d9ab      	bls.n	800930c <keypad3x4w_readKeypad+0x1c>
        }
      }
    }
  }

  return isPressed;
 80093b4:	7bfb      	ldrb	r3, [r7, #15]
 }
 80093b6:	4618      	mov	r0, r3
 80093b8:	3710      	adds	r7, #16
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	08010cc8 	.word	0x08010cc8

080093c4 <dateTime_display_init>:

} DateTime_Display_Config;


DateTime_Display_Config_t * dateTime_display_init(I2C_HandleTypeDef* const hi2c, const uint8_t addrs)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	460b      	mov	r3, r1
 80093ce:	70fb      	strb	r3, [r7, #3]
  DateTime_Display_Config_t* pConfig = malloc(sizeof(DateTime_Display_Config_t));
 80093d0:	2018      	movs	r0, #24
 80093d2:	f006 f989 	bl	800f6e8 <malloc>
 80093d6:	4603      	mov	r3, r0
 80093d8:	60fb      	str	r3, [r7, #12]
  pConfig->i2cAddrs = addrs;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	78fa      	ldrb	r2, [r7, #3]
 80093de:	711a      	strb	r2, [r3, #4]
  pConfig->hi2c = hi2c;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	601a      	str	r2, [r3, #0]
  pConfig->hDisplayDriver = ht16k33_init(hi2c, addrs);
 80093e6:	78fb      	ldrb	r3, [r7, #3]
 80093e8:	4619      	mov	r1, r3
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f7ff fe0c 	bl	8009008 <ht16k33_init>
 80093f0:	4602      	mov	r2, r0
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	609a      	str	r2, [r3, #8]

  dateTime_clearDisplay(pConfig);
 80093f6:	68f8      	ldr	r0, [r7, #12]
 80093f8:	f000 f9f1 	bl	80097de <dateTime_clearDisplay>

  ht16k33_setSystemSetup(pConfig->hDisplayDriver, Ht16k33_SystemOscillator_On);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	2101      	movs	r1, #1
 8009402:	4618      	mov	r0, r3
 8009404:	f7ff fe2f 	bl	8009066 <ht16k33_setSystemSetup>
  ht16k33_setDisplaySetup(pConfig->hDisplayDriver, Ht16k33_DisplayStatus_On, Ht16k33_BlinkingFrequency_Off);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	2200      	movs	r2, #0
 800940e:	2101      	movs	r1, #1
 8009410:	4618      	mov	r0, r3
 8009412:	f7ff fe6c 	bl	80090ee <ht16k33_setDisplaySetup>

  return pConfig;
 8009416:	68fb      	ldr	r3, [r7, #12]
}
 8009418:	4618      	mov	r0, r3
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <dateTime_setDateTimeMonth>:

DateTime_Display_Status_t dateTime_setDateTimeMonth(DateTime_Display_Config_t* const pConfig,
    const uint8_t* const inputDateTime)
{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
  //Extract and check input month
  pConfig->dateTimeData.Month = (inputDateTime[0]*10) + (inputDateTime[1]);
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	461a      	mov	r2, r3
 8009430:	0092      	lsls	r2, r2, #2
 8009432:	4413      	add	r3, r2
 8009434:	005b      	lsls	r3, r3, #1
 8009436:	b2da      	uxtb	r2, r3
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	3301      	adds	r3, #1
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	4413      	add	r3, r2
 8009440:	b2da      	uxtb	r2, r3
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	731a      	strb	r2, [r3, #12]
  if ((pConfig->dateTimeData.Month >= 1) && (pConfig->dateTimeData.Month <= 12))
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	7b1b      	ldrb	r3, [r3, #12]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d005      	beq.n	800945a <dateTime_setDateTimeMonth+0x3a>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	7b1b      	ldrb	r3, [r3, #12]
 8009452:	2b0c      	cmp	r3, #12
 8009454:	d801      	bhi.n	800945a <dateTime_setDateTimeMonth+0x3a>
  {
    return 1;
 8009456:	2301      	movs	r3, #1
 8009458:	e000      	b.n	800945c <dateTime_setDateTimeMonth+0x3c>
  }
  else
  {
    return 0;
 800945a:	2300      	movs	r3, #0
  }
}
 800945c:	4618      	mov	r0, r3
 800945e:	370c      	adds	r7, #12
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <dateTime_setDateTimeDay>:

DateTime_Display_Status_t dateTime_setDateTimeDay(DateTime_Display_Config_t* const pConfig,
    const uint8_t* const inputDateTime)
{
 8009468:	b480      	push	{r7}
 800946a:	b085      	sub	sp, #20
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]
  bool leapYear = false;
 8009472:	2300      	movs	r3, #0
 8009474:	73fb      	strb	r3, [r7, #15]

  //Extract input day and check for days per month
  pConfig->dateTimeData.Day = (inputDateTime[2]*10) + (inputDateTime[3]);
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	3302      	adds	r3, #2
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	461a      	mov	r2, r3
 800947e:	0092      	lsls	r2, r2, #2
 8009480:	4413      	add	r3, r2
 8009482:	005b      	lsls	r3, r3, #1
 8009484:	b2da      	uxtb	r2, r3
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	3303      	adds	r3, #3
 800948a:	781b      	ldrb	r3, [r3, #0]
 800948c:	4413      	add	r3, r2
 800948e:	b2da      	uxtb	r2, r3
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	735a      	strb	r2, [r3, #13]

  //Check for leap year
  if ((((pConfig->dateTimeData.Year % 4) == 0) && ((pConfig->dateTimeData.Year % 100) != 0)) ||
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	89db      	ldrh	r3, [r3, #14]
 8009498:	f003 0303 	and.w	r3, r3, #3
 800949c:	b29b      	uxth	r3, r3
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d10c      	bne.n	80094bc <dateTime_setDateTimeDay+0x54>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	89db      	ldrh	r3, [r3, #14]
 80094a6:	4a1a      	ldr	r2, [pc, #104]	@ (8009510 <dateTime_setDateTimeDay+0xa8>)
 80094a8:	fba2 1203 	umull	r1, r2, r2, r3
 80094ac:	0952      	lsrs	r2, r2, #5
 80094ae:	2164      	movs	r1, #100	@ 0x64
 80094b0:	fb01 f202 	mul.w	r2, r1, r2
 80094b4:	1a9b      	subs	r3, r3, r2
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d10d      	bne.n	80094d8 <dateTime_setDateTimeDay+0x70>
      ((pConfig->dateTimeData.Year % 400) == 0))
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	89db      	ldrh	r3, [r3, #14]
 80094c0:	4a13      	ldr	r2, [pc, #76]	@ (8009510 <dateTime_setDateTimeDay+0xa8>)
 80094c2:	fba2 1203 	umull	r1, r2, r2, r3
 80094c6:	09d2      	lsrs	r2, r2, #7
 80094c8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80094cc:	fb01 f202 	mul.w	r2, r1, r2
 80094d0:	1a9b      	subs	r3, r3, r2
 80094d2:	b29b      	uxth	r3, r3
  if ((((pConfig->dateTimeData.Year % 4) == 0) && ((pConfig->dateTimeData.Year % 100) != 0)) ||
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d101      	bne.n	80094dc <dateTime_setDateTimeDay+0x74>
  {
    leapYear = true;
 80094d8:	2301      	movs	r3, #1
 80094da:	73fb      	strb	r3, [r7, #15]
  }

  if (pConfig->dateTimeData.Day <= (monthDaysCount[pConfig->dateTimeData.Month-1] + leapYear) &&
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	7b5b      	ldrb	r3, [r3, #13]
 80094e0:	4619      	mov	r1, r3
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	7b1b      	ldrb	r3, [r3, #12]
 80094e6:	3b01      	subs	r3, #1
 80094e8:	4a0a      	ldr	r2, [pc, #40]	@ (8009514 <dateTime_setDateTimeDay+0xac>)
 80094ea:	5cd3      	ldrb	r3, [r2, r3]
 80094ec:	461a      	mov	r2, r3
 80094ee:	7bfb      	ldrb	r3, [r7, #15]
 80094f0:	4413      	add	r3, r2
 80094f2:	4299      	cmp	r1, r3
 80094f4:	dc05      	bgt.n	8009502 <dateTime_setDateTimeDay+0x9a>
      (pConfig->dateTimeData.Day > 0))
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	7b5b      	ldrb	r3, [r3, #13]
  if (pConfig->dateTimeData.Day <= (monthDaysCount[pConfig->dateTimeData.Month-1] + leapYear) &&
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d001      	beq.n	8009502 <dateTime_setDateTimeDay+0x9a>
  {
    return 1;
 80094fe:	2301      	movs	r3, #1
 8009500:	e000      	b.n	8009504 <dateTime_setDateTimeDay+0x9c>
  }
  else
  {
    return 0;
 8009502:	2300      	movs	r3, #0
  }
}
 8009504:	4618      	mov	r0, r3
 8009506:	3714      	adds	r7, #20
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr
 8009510:	51eb851f 	.word	0x51eb851f
 8009514:	08010d44 	.word	0x08010d44

08009518 <dateTime_setDateTimeYear>:

DateTime_Display_Status_t dateTime_setDateTimeYear(DateTime_Display_Config_t* const pConfig,
    const uint8_t* const inputDateTime)
{
 8009518:	b480      	push	{r7}
 800951a:	b083      	sub	sp, #12
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
  //Extract input year
  pConfig->dateTimeData.Year = (inputDateTime[4]*1000)+(inputDateTime[5]*100)
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	3304      	adds	r3, #4
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	461a      	mov	r2, r3
 800952a:	0152      	lsls	r2, r2, #5
 800952c:	1ad2      	subs	r2, r2, r3
 800952e:	0092      	lsls	r2, r2, #2
 8009530:	4413      	add	r3, r2
 8009532:	00db      	lsls	r3, r3, #3
 8009534:	b29a      	uxth	r2, r3
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	3305      	adds	r3, #5
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	4619      	mov	r1, r3
 800953e:	0089      	lsls	r1, r1, #2
 8009540:	440b      	add	r3, r1
 8009542:	4619      	mov	r1, r3
 8009544:	0088      	lsls	r0, r1, #2
 8009546:	4619      	mov	r1, r3
 8009548:	4603      	mov	r3, r0
 800954a:	440b      	add	r3, r1
 800954c:	009b      	lsls	r3, r3, #2
 800954e:	b29b      	uxth	r3, r3
 8009550:	4413      	add	r3, r2
 8009552:	b29a      	uxth	r2, r3
      + (inputDateTime[6]*10) + (inputDateTime[7]);
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	3306      	adds	r3, #6
 8009558:	781b      	ldrb	r3, [r3, #0]
 800955a:	4619      	mov	r1, r3
 800955c:	0089      	lsls	r1, r1, #2
 800955e:	440b      	add	r3, r1
 8009560:	005b      	lsls	r3, r3, #1
 8009562:	b29b      	uxth	r3, r3
 8009564:	4413      	add	r3, r2
 8009566:	b29b      	uxth	r3, r3
 8009568:	683a      	ldr	r2, [r7, #0]
 800956a:	3207      	adds	r2, #7
 800956c:	7812      	ldrb	r2, [r2, #0]
 800956e:	4413      	add	r3, r2
 8009570:	b29a      	uxth	r2, r3
  pConfig->dateTimeData.Year = (inputDateTime[4]*1000)+(inputDateTime[5]*100)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	81da      	strh	r2, [r3, #14]

  return 1;
 8009576:	2301      	movs	r3, #1
}
 8009578:	4618      	mov	r0, r3
 800957a:	370c      	adds	r7, #12
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr

08009584 <dateTime_setDateTimeHour>:

DateTime_Display_Status_t dateTime_setDateTimeHour(DateTime_Display_Config_t* const pConfig,
    const uint8_t* const inputDateTime)
{
 8009584:	b480      	push	{r7}
 8009586:	b085      	sub	sp, #20
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]
  DateTime_Display_Status_t isSuccess = 1;
 800958e:	2301      	movs	r3, #1
 8009590:	73fb      	strb	r3, [r7, #15]

  //Extract and check input hour
  pConfig->dateTimeData.Hour = (inputDateTime[8]*10) + (inputDateTime[9]);
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	3308      	adds	r3, #8
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	461a      	mov	r2, r3
 800959a:	0092      	lsls	r2, r2, #2
 800959c:	4413      	add	r3, r2
 800959e:	005b      	lsls	r3, r3, #1
 80095a0:	b2da      	uxtb	r2, r3
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	3309      	adds	r3, #9
 80095a6:	781b      	ldrb	r3, [r3, #0]
 80095a8:	4413      	add	r3, r2
 80095aa:	b2da      	uxtb	r2, r3
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	741a      	strb	r2, [r3, #16]

  if ((pConfig->dateTimeData.Hour >= 0) && (pConfig->dateTimeData.Hour <= 24))
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	7c1b      	ldrb	r3, [r3, #16]
 80095b4:	2b18      	cmp	r3, #24
 80095b6:	d827      	bhi.n	8009608 <dateTime_setDateTimeHour+0x84>
  {
    //Convert to 12 hour time and set meridiem
    if ((pConfig->dateTimeData.Hour > 12))
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	7c1b      	ldrb	r3, [r3, #16]
 80095bc:	2b0c      	cmp	r3, #12
 80095be:	d90f      	bls.n	80095e0 <dateTime_setDateTimeHour+0x5c>
    {
      pConfig->dateTimeData.Hour -= 12;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	7c1b      	ldrb	r3, [r3, #16]
 80095c4:	3b0c      	subs	r3, #12
 80095c6:	b2da      	uxtb	r2, r3
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	741a      	strb	r2, [r3, #16]
      pConfig->dateTimeData.Meridiem = (pConfig->dateTimeData.Hour == 12) ?
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	7c1b      	ldrb	r3, [r3, #16]
          DateTime_DisplayDataMeridiem_AM : DateTime_DisplayDataMeridiem_PM;
 80095d0:	2b0c      	cmp	r3, #12
 80095d2:	d101      	bne.n	80095d8 <dateTime_setDateTimeHour+0x54>
 80095d4:	2201      	movs	r2, #1
 80095d6:	e000      	b.n	80095da <dateTime_setDateTimeHour+0x56>
 80095d8:	2202      	movs	r2, #2
      pConfig->dateTimeData.Meridiem = (pConfig->dateTimeData.Hour == 12) ?
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	749a      	strb	r2, [r3, #18]
 80095de:	e015      	b.n	800960c <dateTime_setDateTimeHour+0x88>
    }
    else
    {
      pConfig->dateTimeData.Meridiem = (pConfig->dateTimeData.Hour == 12) ?
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	7c1b      	ldrb	r3, [r3, #16]
          DateTime_DisplayDataMeridiem_PM : DateTime_DisplayDataMeridiem_AM;
 80095e4:	2b0c      	cmp	r3, #12
 80095e6:	d101      	bne.n	80095ec <dateTime_setDateTimeHour+0x68>
 80095e8:	2202      	movs	r2, #2
 80095ea:	e000      	b.n	80095ee <dateTime_setDateTimeHour+0x6a>
 80095ec:	2201      	movs	r2, #1
      pConfig->dateTimeData.Meridiem = (pConfig->dateTimeData.Hour == 12) ?
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	749a      	strb	r2, [r3, #18]
      pConfig->dateTimeData.Hour = (pConfig->dateTimeData.Hour == 0) ? 12 : pConfig->dateTimeData.Hour;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	7c1b      	ldrb	r3, [r3, #16]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d002      	beq.n	8009600 <dateTime_setDateTimeHour+0x7c>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	7c1a      	ldrb	r2, [r3, #16]
 80095fe:	e000      	b.n	8009602 <dateTime_setDateTimeHour+0x7e>
 8009600:	220c      	movs	r2, #12
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	741a      	strb	r2, [r3, #16]
 8009606:	e001      	b.n	800960c <dateTime_setDateTimeHour+0x88>
    }
  }
  else
  {
    isSuccess = 0;
 8009608:	2300      	movs	r3, #0
 800960a:	73fb      	strb	r3, [r7, #15]
  }

  return isSuccess;
 800960c:	7bfb      	ldrb	r3, [r7, #15]
}
 800960e:	4618      	mov	r0, r3
 8009610:	3714      	adds	r7, #20
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr

0800961a <dateTime_setDateTimeMinute>:

DateTime_Display_Status_t dateTime_setDateTimeMinute(DateTime_Display_Config_t* const pConfig,
    const uint8_t* const inputDateTime)
{
 800961a:	b480      	push	{r7}
 800961c:	b083      	sub	sp, #12
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
 8009622:	6039      	str	r1, [r7, #0]
  //Extract and check input month
  pConfig->dateTimeData.Minute = (inputDateTime[10]*10) + (inputDateTime[11]);
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	330a      	adds	r3, #10
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	461a      	mov	r2, r3
 800962c:	0092      	lsls	r2, r2, #2
 800962e:	4413      	add	r3, r2
 8009630:	005b      	lsls	r3, r3, #1
 8009632:	b2da      	uxtb	r2, r3
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	330b      	adds	r3, #11
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	4413      	add	r3, r2
 800963c:	b2da      	uxtb	r2, r3
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	745a      	strb	r2, [r3, #17]
  if ((pConfig->dateTimeData.Minute >= 0) && (pConfig->dateTimeData.Minute < 60))
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	7c5b      	ldrb	r3, [r3, #17]
 8009646:	2b3b      	cmp	r3, #59	@ 0x3b
 8009648:	d801      	bhi.n	800964e <dateTime_setDateTimeMinute+0x34>
  {
    return 1;
 800964a:	2301      	movs	r3, #1
 800964c:	e000      	b.n	8009650 <dateTime_setDateTimeMinute+0x36>
  }
  else
  {
    return 0;
 800964e:	2300      	movs	r3, #0

  }
}
 8009650:	4618      	mov	r0, r3
 8009652:	370c      	adds	r7, #12
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <dateTime_setDisplayData>:

DateTime_Display_Status_t dateTime_setDisplayData(DateTime_Display_Config_t* const pConfig,
    const uint8_t* const inputDateTime)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
  DateTime_Display_Status_t isSuccess = 1;
 8009666:	2301      	movs	r3, #1
 8009668:	73fb      	strb	r3, [r7, #15]

  isSuccess &= dateTime_setDateTimeMonth(pConfig, inputDateTime);
 800966a:	6839      	ldr	r1, [r7, #0]
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f7ff fed7 	bl	8009420 <dateTime_setDateTimeMonth>
 8009672:	4603      	mov	r3, r0
 8009674:	461a      	mov	r2, r3
 8009676:	7bfb      	ldrb	r3, [r7, #15]
 8009678:	4013      	ands	r3, r2
 800967a:	2b00      	cmp	r3, #0
 800967c:	bf14      	ite	ne
 800967e:	2301      	movne	r3, #1
 8009680:	2300      	moveq	r3, #0
 8009682:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_setDateTimeYear(pConfig, inputDateTime);
 8009684:	6839      	ldr	r1, [r7, #0]
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f7ff ff46 	bl	8009518 <dateTime_setDateTimeYear>
 800968c:	4603      	mov	r3, r0
 800968e:	461a      	mov	r2, r3
 8009690:	7bfb      	ldrb	r3, [r7, #15]
 8009692:	4013      	ands	r3, r2
 8009694:	2b00      	cmp	r3, #0
 8009696:	bf14      	ite	ne
 8009698:	2301      	movne	r3, #1
 800969a:	2300      	moveq	r3, #0
 800969c:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_setDateTimeDay(pConfig, inputDateTime);
 800969e:	6839      	ldr	r1, [r7, #0]
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f7ff fee1 	bl	8009468 <dateTime_setDateTimeDay>
 80096a6:	4603      	mov	r3, r0
 80096a8:	461a      	mov	r2, r3
 80096aa:	7bfb      	ldrb	r3, [r7, #15]
 80096ac:	4013      	ands	r3, r2
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	bf14      	ite	ne
 80096b2:	2301      	movne	r3, #1
 80096b4:	2300      	moveq	r3, #0
 80096b6:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_setDateTimeHour(pConfig, inputDateTime);
 80096b8:	6839      	ldr	r1, [r7, #0]
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f7ff ff62 	bl	8009584 <dateTime_setDateTimeHour>
 80096c0:	4603      	mov	r3, r0
 80096c2:	461a      	mov	r2, r3
 80096c4:	7bfb      	ldrb	r3, [r7, #15]
 80096c6:	4013      	ands	r3, r2
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	bf14      	ite	ne
 80096cc:	2301      	movne	r3, #1
 80096ce:	2300      	moveq	r3, #0
 80096d0:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_setDateTimeMinute(pConfig, inputDateTime);
 80096d2:	6839      	ldr	r1, [r7, #0]
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f7ff ffa0 	bl	800961a <dateTime_setDateTimeMinute>
 80096da:	4603      	mov	r3, r0
 80096dc:	461a      	mov	r2, r3
 80096de:	7bfb      	ldrb	r3, [r7, #15]
 80096e0:	4013      	ands	r3, r2
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	bf14      	ite	ne
 80096e6:	2301      	movne	r3, #1
 80096e8:	2300      	moveq	r3, #0
 80096ea:	73fb      	strb	r3, [r7, #15]

  return isSuccess;
 80096ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3710      	adds	r7, #16
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <dateTime_getRtcDateTimeData>:

DateTime_Display_Status_t   dateTime_getRtcDateTimeData(DateTime_Display_Config_t* const pConfig,
    RTC_DateTypeDef* const pRtcDate, RTC_TimeTypeDef* const pRtcTime)
{
 80096f6:	b480      	push	{r7}
 80096f8:	b087      	sub	sp, #28
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	60f8      	str	r0, [r7, #12]
 80096fe:	60b9      	str	r1, [r7, #8]
 8009700:	607a      	str	r2, [r7, #4]
  DateTime_Display_Status_t isSuccess = 1;
 8009702:	2301      	movs	r3, #1
 8009704:	75fb      	strb	r3, [r7, #23]

  pRtcDate->Date        = pConfig->dateTimeData.Day;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	7b5a      	ldrb	r2, [r3, #13]
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	709a      	strb	r2, [r3, #2]
  pRtcDate->Month       = pConfig->dateTimeData.Month;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	7b1a      	ldrb	r2, [r3, #12]
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	705a      	strb	r2, [r3, #1]
  pRtcDate->Year        = 0;                            //Set to zero because maximum value from RTC is 99 years
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	2200      	movs	r2, #0
 800971a:	70da      	strb	r2, [r3, #3]
  pRtcTime->Hours       = pConfig->dateTimeData.Hour;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	7c1a      	ldrb	r2, [r3, #16]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	701a      	strb	r2, [r3, #0]
  pRtcTime->Minutes     = pConfig->dateTimeData.Minute;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	7c5a      	ldrb	r2, [r3, #17]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	705a      	strb	r2, [r3, #1]
  pRtcTime->TimeFormat  = pConfig->dateTimeData.Meridiem - 1; //RTC AM = 0, RTC PM = 1;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	7c9b      	ldrb	r3, [r3, #18]
 8009730:	3b01      	subs	r3, #1
 8009732:	b2da      	uxtb	r2, r3
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	70da      	strb	r2, [r3, #3]
  pRtcTime->Seconds     = 0;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	709a      	strb	r2, [r3, #2]
  pRtcTime->SubSeconds  = 0;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2200      	movs	r2, #0
 8009742:	605a      	str	r2, [r3, #4]
  pConfig->orignalYear  = pConfig->dateTimeData.Year; //Hacky way to fix RTC year issue
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	89da      	ldrh	r2, [r3, #14]
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	829a      	strh	r2, [r3, #20]
  return isSuccess;
 800974c:	7dfb      	ldrb	r3, [r7, #23]
}
 800974e:	4618      	mov	r0, r3
 8009750:	371c      	adds	r7, #28
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr

0800975a <dateTime_setRtcDateTimeData>:

DateTime_Display_Status_t   dateTime_setRtcDateTimeData(DateTime_Display_Config_t* const pConfig,
    RTC_DateTypeDef* const pRtcDate, RTC_TimeTypeDef* const pRtcTime)
{
 800975a:	b480      	push	{r7}
 800975c:	b087      	sub	sp, #28
 800975e:	af00      	add	r7, sp, #0
 8009760:	60f8      	str	r0, [r7, #12]
 8009762:	60b9      	str	r1, [r7, #8]
 8009764:	607a      	str	r2, [r7, #4]
  DateTime_Display_Status_t isSuccess = 1;
 8009766:	2301      	movs	r3, #1
 8009768:	75fb      	strb	r3, [r7, #23]

  pConfig->dateTimeData.Day       = pRtcDate->Date;
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	789a      	ldrb	r2, [r3, #2]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	735a      	strb	r2, [r3, #13]
  pConfig->dateTimeData.Month     = pRtcDate->Month;
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	785a      	ldrb	r2, [r3, #1]
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	731a      	strb	r2, [r3, #12]
  pConfig->dateTimeData.Year      = pConfig->orignalYear + pRtcDate->Year;  //Add years because maximum value from RTC is 99 years
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	8a9b      	ldrh	r3, [r3, #20]
 800977e:	68ba      	ldr	r2, [r7, #8]
 8009780:	78d2      	ldrb	r2, [r2, #3]
 8009782:	4413      	add	r3, r2
 8009784:	b29a      	uxth	r2, r3
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	81da      	strh	r2, [r3, #14]
  pConfig->dateTimeData.Hour      = pRtcTime->Hours;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	781a      	ldrb	r2, [r3, #0]
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	741a      	strb	r2, [r3, #16]
  pConfig->dateTimeData.Minute    = pRtcTime->Minutes;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	785a      	ldrb	r2, [r3, #1]
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	745a      	strb	r2, [r3, #17]
  pConfig->dateTimeData.Meridiem  = pRtcTime->TimeFormat + 1; //RTC AM = 0, RTC PM = 1;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	78db      	ldrb	r3, [r3, #3]
 800979e:	3301      	adds	r3, #1
 80097a0:	b2da      	uxtb	r2, r3
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	749a      	strb	r2, [r3, #18]

  return isSuccess;
 80097a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	371c      	adds	r7, #28
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr

080097b4 <dateTime_copyDateTime>:

DateTime_Display_Status_t dateTime_copyDateTime(DateTime_Display_Config_t* const pDestConfig,
    DateTime_Display_Config_t* const pSourceConfig)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
  DateTime_Display_Status_t isSuccess = 1;
 80097be:	2301      	movs	r3, #1
 80097c0:	73fb      	strb	r3, [r7, #15]

  memcpy(&pDestConfig->dateTimeData, &pSourceConfig->dateTimeData, sizeof(pDestConfig->dateTimeData));
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f103 000c 	add.w	r0, r3, #12
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	330c      	adds	r3, #12
 80097cc:	2208      	movs	r2, #8
 80097ce:	4619      	mov	r1, r3
 80097d0:	f006 fbfb 	bl	800ffca <memcpy>

  return isSuccess;
 80097d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3710      	adds	r7, #16
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}

080097de <dateTime_clearDisplay>:


DateTime_Display_Status_t dateTime_clearDisplay(DateTime_Display_Config_t* const pConfig)
{
 80097de:	b580      	push	{r7, lr}
 80097e0:	b088      	sub	sp, #32
 80097e2:	af02      	add	r7, sp, #8
 80097e4:	6078      	str	r0, [r7, #4]
  uint8_t* clearBuffer = malloc (TOTAL_NUMBER_OF_ROWS);
 80097e6:	2010      	movs	r0, #16
 80097e8:	f005 ff7e 	bl	800f6e8 <malloc>
 80097ec:	4603      	mov	r3, r0
 80097ee:	60fb      	str	r3, [r7, #12]
  DateTime_Display_Status_t isSuccess   = 0;
 80097f0:	2300      	movs	r3, #0
 80097f2:	75fb      	strb	r3, [r7, #23]

  //Save colon state
  uint8_t ColonStateData = 0;
 80097f4:	2300      	movs	r3, #0
 80097f6:	72fb      	strb	r3, [r7, #11]
  uint8_t RequestData = COLON_LED_SEGMENT_ADDRESS;
 80097f8:	2307      	movs	r3, #7
 80097fa:	72bb      	strb	r3, [r7, #10]

  isSuccess |= HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->i2cAddrs)<<1, &RequestData,  1, HAL_MAX_DELAY);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6818      	ldr	r0, [r3, #0]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	791b      	ldrb	r3, [r3, #4]
 8009804:	005b      	lsls	r3, r3, #1
 8009806:	b299      	uxth	r1, r3
 8009808:	f107 020a 	add.w	r2, r7, #10
 800980c:	f04f 33ff 	mov.w	r3, #4294967295
 8009810:	9300      	str	r3, [sp, #0]
 8009812:	2301      	movs	r3, #1
 8009814:	f7f9 fa60 	bl	8002cd8 <HAL_I2C_Master_Transmit>
 8009818:	4603      	mov	r3, r0
 800981a:	461a      	mov	r2, r3
 800981c:	7dfb      	ldrb	r3, [r7, #23]
 800981e:	4313      	orrs	r3, r2
 8009820:	2b00      	cmp	r3, #0
 8009822:	bf14      	ite	ne
 8009824:	2301      	movne	r3, #1
 8009826:	2300      	moveq	r3, #0
 8009828:	75fb      	strb	r3, [r7, #23]
  isSuccess |= HAL_I2C_Master_Receive(pConfig->hi2c, ((pConfig->i2cAddrs)<<1)|0x01, &ColonStateData, 1, HAL_MAX_DELAY);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6818      	ldr	r0, [r3, #0]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	791b      	ldrb	r3, [r3, #4]
 8009832:	005b      	lsls	r3, r3, #1
 8009834:	b21b      	sxth	r3, r3
 8009836:	f043 0301 	orr.w	r3, r3, #1
 800983a:	b21b      	sxth	r3, r3
 800983c:	b299      	uxth	r1, r3
 800983e:	f107 020b 	add.w	r2, r7, #11
 8009842:	f04f 33ff 	mov.w	r3, #4294967295
 8009846:	9300      	str	r3, [sp, #0]
 8009848:	2301      	movs	r3, #1
 800984a:	f7f9 fb43 	bl	8002ed4 <HAL_I2C_Master_Receive>
 800984e:	4603      	mov	r3, r0
 8009850:	461a      	mov	r2, r3
 8009852:	7dfb      	ldrb	r3, [r7, #23]
 8009854:	4313      	orrs	r3, r2
 8009856:	2b00      	cmp	r3, #0
 8009858:	bf14      	ite	ne
 800985a:	2301      	movne	r3, #1
 800985c:	2300      	moveq	r3, #0
 800985e:	75fb      	strb	r3, [r7, #23]
  ColonStateData &= 0b11000000;
 8009860:	7afb      	ldrb	r3, [r7, #11]
 8009862:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009866:	b2db      	uxtb	r3, r3
 8009868:	72fb      	strb	r3, [r7, #11]

  for (int buffCount = 0; buffCount < TOTAL_NUMBER_OF_ROWS; buffCount++)
 800986a:	2300      	movs	r3, #0
 800986c:	613b      	str	r3, [r7, #16]
 800986e:	e007      	b.n	8009880 <dateTime_clearDisplay+0xa2>
  {
    clearBuffer[buffCount] = 0x00;
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	68fa      	ldr	r2, [r7, #12]
 8009874:	4413      	add	r3, r2
 8009876:	2200      	movs	r2, #0
 8009878:	701a      	strb	r2, [r3, #0]
  for (int buffCount = 0; buffCount < TOTAL_NUMBER_OF_ROWS; buffCount++)
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	3301      	adds	r3, #1
 800987e:	613b      	str	r3, [r7, #16]
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	2b0f      	cmp	r3, #15
 8009884:	ddf4      	ble.n	8009870 <dateTime_clearDisplay+0x92>
  }

  isSuccess = ht16k33_updateDisplayData (pConfig->hDisplayDriver,DISPLAY_DATA_REG_ADDRESS, clearBuffer,
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6898      	ldr	r0, [r3, #8]
 800988a:	2310      	movs	r3, #16
 800988c:	68fa      	ldr	r2, [r7, #12]
 800988e:	2100      	movs	r1, #0
 8009890:	f7ff fc8c 	bl	80091ac <ht16k33_updateDisplayData>
 8009894:	4603      	mov	r3, r0
 8009896:	75fb      	strb	r3, [r7, #23]
      TOTAL_NUMBER_OF_ROWS);

  if (isSuccess)
 8009898:	7dfb      	ldrb	r3, [r7, #23]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d010      	beq.n	80098c0 <dateTime_clearDisplay+0xe2>
  {
    isSuccess |= ht16k33_setDisplaySetup(pConfig->hDisplayDriver, Ht16k33_DisplayStatus_On,
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	2200      	movs	r2, #0
 80098a4:	2101      	movs	r1, #1
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7ff fc21 	bl	80090ee <ht16k33_setDisplaySetup>
 80098ac:	4603      	mov	r3, r0
 80098ae:	461a      	mov	r2, r3
 80098b0:	7dfb      	ldrb	r3, [r7, #23]
 80098b2:	4313      	orrs	r3, r2
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	bf14      	ite	ne
 80098ba:	2301      	movne	r3, #1
 80098bc:	2300      	moveq	r3, #0
 80098be:	75fb      	strb	r3, [r7, #23]
        Ht16k33_BlinkingFrequency_Off);
  }

  //Restore colon state
  uint8_t SegmentData = 0;
 80098c0:	2300      	movs	r3, #0
 80098c2:	727b      	strb	r3, [r7, #9]
  isSuccess |= HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->i2cAddrs)<<1, &RequestData,  1, HAL_MAX_DELAY);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6818      	ldr	r0, [r3, #0]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	791b      	ldrb	r3, [r3, #4]
 80098cc:	005b      	lsls	r3, r3, #1
 80098ce:	b299      	uxth	r1, r3
 80098d0:	f107 020a 	add.w	r2, r7, #10
 80098d4:	f04f 33ff 	mov.w	r3, #4294967295
 80098d8:	9300      	str	r3, [sp, #0]
 80098da:	2301      	movs	r3, #1
 80098dc:	f7f9 f9fc 	bl	8002cd8 <HAL_I2C_Master_Transmit>
 80098e0:	4603      	mov	r3, r0
 80098e2:	461a      	mov	r2, r3
 80098e4:	7dfb      	ldrb	r3, [r7, #23]
 80098e6:	4313      	orrs	r3, r2
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	bf14      	ite	ne
 80098ec:	2301      	movne	r3, #1
 80098ee:	2300      	moveq	r3, #0
 80098f0:	75fb      	strb	r3, [r7, #23]
  isSuccess |= HAL_I2C_Master_Receive(pConfig->hi2c, ((pConfig->i2cAddrs)<<1)|0x01, &SegmentData, 1, HAL_MAX_DELAY);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6818      	ldr	r0, [r3, #0]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	791b      	ldrb	r3, [r3, #4]
 80098fa:	005b      	lsls	r3, r3, #1
 80098fc:	b21b      	sxth	r3, r3
 80098fe:	f043 0301 	orr.w	r3, r3, #1
 8009902:	b21b      	sxth	r3, r3
 8009904:	b299      	uxth	r1, r3
 8009906:	f107 0209 	add.w	r2, r7, #9
 800990a:	f04f 33ff 	mov.w	r3, #4294967295
 800990e:	9300      	str	r3, [sp, #0]
 8009910:	2301      	movs	r3, #1
 8009912:	f7f9 fadf 	bl	8002ed4 <HAL_I2C_Master_Receive>
 8009916:	4603      	mov	r3, r0
 8009918:	461a      	mov	r2, r3
 800991a:	7dfb      	ldrb	r3, [r7, #23]
 800991c:	4313      	orrs	r3, r2
 800991e:	2b00      	cmp	r3, #0
 8009920:	bf14      	ite	ne
 8009922:	2301      	movne	r3, #1
 8009924:	2300      	moveq	r3, #0
 8009926:	75fb      	strb	r3, [r7, #23]
  SegmentData &= 0b00111111;
 8009928:	7a7b      	ldrb	r3, [r7, #9]
 800992a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800992e:	b2db      	uxtb	r3, r3
 8009930:	727b      	strb	r3, [r7, #9]
  SegmentData |= ColonStateData;
 8009932:	7a7a      	ldrb	r2, [r7, #9]
 8009934:	7afb      	ldrb	r3, [r7, #11]
 8009936:	4313      	orrs	r3, r2
 8009938:	b2db      	uxtb	r3, r3
 800993a:	727b      	strb	r3, [r7, #9]
  isSuccess |= ht16k33_updateDisplayData (pConfig->hDisplayDriver, RequestData, &SegmentData, 1);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6898      	ldr	r0, [r3, #8]
 8009940:	7ab9      	ldrb	r1, [r7, #10]
 8009942:	f107 0209 	add.w	r2, r7, #9
 8009946:	2301      	movs	r3, #1
 8009948:	f7ff fc30 	bl	80091ac <ht16k33_updateDisplayData>
 800994c:	4603      	mov	r3, r0
 800994e:	461a      	mov	r2, r3
 8009950:	7dfb      	ldrb	r3, [r7, #23]
 8009952:	4313      	orrs	r3, r2
 8009954:	b2db      	uxtb	r3, r3
 8009956:	2b00      	cmp	r3, #0
 8009958:	bf14      	ite	ne
 800995a:	2301      	movne	r3, #1
 800995c:	2300      	moveq	r3, #0
 800995e:	75fb      	strb	r3, [r7, #23]

  free(clearBuffer);
 8009960:	68f8      	ldr	r0, [r7, #12]
 8009962:	f005 fec9 	bl	800f6f8 <free>

  return isSuccess;
 8009966:	7dfb      	ldrb	r3, [r7, #23]
}
 8009968:	4618      	mov	r0, r3
 800996a:	3718      	adds	r7, #24
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}

08009970 <dateTime_setLed>:

DateTime_Display_Status_t dateTime_setLed(DateTime_Display_Config_t* const pConfig, const uint8_t segmentNumber,
       const uint8_t ledState)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b086      	sub	sp, #24
 8009974:	af02      	add	r7, sp, #8
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	460b      	mov	r3, r1
 800997a:	70fb      	strb	r3, [r7, #3]
 800997c:	4613      	mov	r3, r2
 800997e:	70bb      	strb	r3, [r7, #2]
     DateTime_Display_Status_t isSuccess   = 0;
 8009980:	2300      	movs	r3, #0
 8009982:	73fb      	strb	r3, [r7, #15]
     uint8_t SegmentData = 0;
 8009984:	2300      	movs	r3, #0
 8009986:	73bb      	strb	r3, [r7, #14]
     uint8_t RequestData = segmentNumber;
 8009988:	78fb      	ldrb	r3, [r7, #3]
 800998a:	737b      	strb	r3, [r7, #13]

     isSuccess |= HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->i2cAddrs)<<1, &RequestData,  1, HAL_MAX_DELAY);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6818      	ldr	r0, [r3, #0]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	791b      	ldrb	r3, [r3, #4]
 8009994:	005b      	lsls	r3, r3, #1
 8009996:	b299      	uxth	r1, r3
 8009998:	f107 020d 	add.w	r2, r7, #13
 800999c:	f04f 33ff 	mov.w	r3, #4294967295
 80099a0:	9300      	str	r3, [sp, #0]
 80099a2:	2301      	movs	r3, #1
 80099a4:	f7f9 f998 	bl	8002cd8 <HAL_I2C_Master_Transmit>
 80099a8:	4603      	mov	r3, r0
 80099aa:	461a      	mov	r2, r3
 80099ac:	7bfb      	ldrb	r3, [r7, #15]
 80099ae:	4313      	orrs	r3, r2
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	bf14      	ite	ne
 80099b4:	2301      	movne	r3, #1
 80099b6:	2300      	moveq	r3, #0
 80099b8:	73fb      	strb	r3, [r7, #15]
     isSuccess |= HAL_I2C_Master_Receive(pConfig->hi2c, ((pConfig->i2cAddrs)<<1)|0x01, &SegmentData, 1, HAL_MAX_DELAY);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6818      	ldr	r0, [r3, #0]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	791b      	ldrb	r3, [r3, #4]
 80099c2:	005b      	lsls	r3, r3, #1
 80099c4:	b21b      	sxth	r3, r3
 80099c6:	f043 0301 	orr.w	r3, r3, #1
 80099ca:	b21b      	sxth	r3, r3
 80099cc:	b299      	uxth	r1, r3
 80099ce:	f107 020e 	add.w	r2, r7, #14
 80099d2:	f04f 33ff 	mov.w	r3, #4294967295
 80099d6:	9300      	str	r3, [sp, #0]
 80099d8:	2301      	movs	r3, #1
 80099da:	f7f9 fa7b 	bl	8002ed4 <HAL_I2C_Master_Receive>
 80099de:	4603      	mov	r3, r0
 80099e0:	461a      	mov	r2, r3
 80099e2:	7bfb      	ldrb	r3, [r7, #15]
 80099e4:	4313      	orrs	r3, r2
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	bf14      	ite	ne
 80099ea:	2301      	movne	r3, #1
 80099ec:	2300      	moveq	r3, #0
 80099ee:	73fb      	strb	r3, [r7, #15]
     SegmentData &= 0b00111111;
 80099f0:	7bbb      	ldrb	r3, [r7, #14]
 80099f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	73bb      	strb	r3, [r7, #14]
     SegmentData |= ledState;
 80099fa:	7bba      	ldrb	r2, [r7, #14]
 80099fc:	78bb      	ldrb	r3, [r7, #2]
 80099fe:	4313      	orrs	r3, r2
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	73bb      	strb	r3, [r7, #14]
     isSuccess |= ht16k33_updateDisplayData (pConfig->hDisplayDriver, RequestData, &SegmentData, 1);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6898      	ldr	r0, [r3, #8]
 8009a08:	7b79      	ldrb	r1, [r7, #13]
 8009a0a:	f107 020e 	add.w	r2, r7, #14
 8009a0e:	2301      	movs	r3, #1
 8009a10:	f7ff fbcc 	bl	80091ac <ht16k33_updateDisplayData>
 8009a14:	4603      	mov	r3, r0
 8009a16:	461a      	mov	r2, r3
 8009a18:	7bfb      	ldrb	r3, [r7, #15]
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	bf14      	ite	ne
 8009a22:	2301      	movne	r3, #1
 8009a24:	2300      	moveq	r3, #0
 8009a26:	73fb      	strb	r3, [r7, #15]

     return isSuccess;
 8009a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3710      	adds	r7, #16
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
	...

08009a34 <dateTime_setDigitSegments>:
}

//Hacky way of fixing wiring issue of LED numerical digits
DateTime_Display_Status_t dateTime_setDigitSegments(DateTime_Display_Config_t* const pConfig, const uint8_t segmentNum,
    const char dispDigit)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b088      	sub	sp, #32
 8009a38:	af02      	add	r7, sp, #8
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	70fb      	strb	r3, [r7, #3]
 8009a40:	4613      	mov	r3, r2
 8009a42:	70bb      	strb	r3, [r7, #2]
  uint8_t* displayBuffer = malloc (2);
 8009a44:	2002      	movs	r0, #2
 8009a46:	f005 fe4f 	bl	800f6e8 <malloc>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	617b      	str	r3, [r7, #20]
  uint8_t test[] = {0,0};
 8009a4e:	2300      	movs	r3, #0
 8009a50:	823b      	strh	r3, [r7, #16]
  uint8_t boo[] = {0x00};
 8009a52:	2300      	movs	r3, #0
 8009a54:	733b      	strb	r3, [r7, #12]

  if (segmentNum % 2)
 8009a56:	78fb      	ldrb	r3, [r7, #3]
 8009a58:	f003 0301 	and.w	r3, r3, #1
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d047      	beq.n	8009af2 <dateTime_setDigitSegments+0xbe>
  {
    boo[0] = segmentNum - 0x01;
 8009a62:	78fb      	ldrb	r3, [r7, #3]
 8009a64:	3b01      	subs	r3, #1
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->i2cAddrs)<<1, boo,  sizeof(boo), HAL_MAX_DELAY);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6818      	ldr	r0, [r3, #0]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	791b      	ldrb	r3, [r3, #4]
 8009a72:	005b      	lsls	r3, r3, #1
 8009a74:	b299      	uxth	r1, r3
 8009a76:	f107 020c 	add.w	r2, r7, #12
 8009a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8009a7e:	9300      	str	r3, [sp, #0]
 8009a80:	2301      	movs	r3, #1
 8009a82:	f7f9 f929 	bl	8002cd8 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(pConfig->hi2c, ((pConfig->i2cAddrs)<<1)|0x01, test, 1, HAL_MAX_DELAY);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6818      	ldr	r0, [r3, #0]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	791b      	ldrb	r3, [r3, #4]
 8009a8e:	005b      	lsls	r3, r3, #1
 8009a90:	b21b      	sxth	r3, r3
 8009a92:	f043 0301 	orr.w	r3, r3, #1
 8009a96:	b21b      	sxth	r3, r3
 8009a98:	b299      	uxth	r1, r3
 8009a9a:	f107 0210 	add.w	r2, r7, #16
 8009a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8009aa2:	9300      	str	r3, [sp, #0]
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	f7f9 fa15 	bl	8002ed4 <HAL_I2C_Master_Receive>
    test[0] = 0x7F & test[0];
 8009aaa:	7c3b      	ldrb	r3, [r7, #16]
 8009aac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	743b      	strb	r3, [r7, #16]
    test[0] |= (sevenSegmentChars[(dispDigit-'0')] & 0x01 )<< 7;
 8009ab4:	7c3b      	ldrb	r3, [r7, #16]
 8009ab6:	b25a      	sxtb	r2, r3
 8009ab8:	78bb      	ldrb	r3, [r7, #2]
 8009aba:	3b30      	subs	r3, #48	@ 0x30
 8009abc:	492c      	ldr	r1, [pc, #176]	@ (8009b70 <dateTime_setDigitSegments+0x13c>)
 8009abe:	5ccb      	ldrb	r3, [r1, r3]
 8009ac0:	01db      	lsls	r3, r3, #7
 8009ac2:	b25b      	sxtb	r3, r3
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	b25b      	sxtb	r3, r3
 8009ac8:	b2db      	uxtb	r3, r3
 8009aca:	743b      	strb	r3, [r7, #16]
    test[1] |= sevenSegmentChars[(dispDigit-'0')] >> 1;
 8009acc:	7c7a      	ldrb	r2, [r7, #17]
 8009ace:	78bb      	ldrb	r3, [r7, #2]
 8009ad0:	3b30      	subs	r3, #48	@ 0x30
 8009ad2:	4927      	ldr	r1, [pc, #156]	@ (8009b70 <dateTime_setDigitSegments+0x13c>)
 8009ad4:	5ccb      	ldrb	r3, [r1, r3]
 8009ad6:	085b      	lsrs	r3, r3, #1
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	4313      	orrs	r3, r2
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	747b      	strb	r3, [r7, #17]
    ht16k33_updateDisplayData (pConfig->hDisplayDriver, boo[0], test, 2);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6898      	ldr	r0, [r3, #8]
 8009ae4:	7b39      	ldrb	r1, [r7, #12]
 8009ae6:	f107 0210 	add.w	r2, r7, #16
 8009aea:	2302      	movs	r3, #2
 8009aec:	f7ff fb5e 	bl	80091ac <ht16k33_updateDisplayData>
 8009af0:	e036      	b.n	8009b60 <dateTime_setDigitSegments+0x12c>
  }
  else
  {
    boo[0] = segmentNum;
 8009af2:	78fb      	ldrb	r3, [r7, #3]
 8009af4:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->i2cAddrs)<<1, boo,  1, HAL_MAX_DELAY);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6818      	ldr	r0, [r3, #0]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	791b      	ldrb	r3, [r3, #4]
 8009afe:	005b      	lsls	r3, r3, #1
 8009b00:	b299      	uxth	r1, r3
 8009b02:	f107 020c 	add.w	r2, r7, #12
 8009b06:	f04f 33ff 	mov.w	r3, #4294967295
 8009b0a:	9300      	str	r3, [sp, #0]
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	f7f9 f8e3 	bl	8002cd8 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(pConfig->hi2c, ((pConfig->i2cAddrs)<<1)|0x01, test, 1, HAL_MAX_DELAY);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6818      	ldr	r0, [r3, #0]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	791b      	ldrb	r3, [r3, #4]
 8009b1a:	005b      	lsls	r3, r3, #1
 8009b1c:	b21b      	sxth	r3, r3
 8009b1e:	f043 0301 	orr.w	r3, r3, #1
 8009b22:	b21b      	sxth	r3, r3
 8009b24:	b299      	uxth	r1, r3
 8009b26:	f107 0210 	add.w	r2, r7, #16
 8009b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8009b2e:	9300      	str	r3, [sp, #0]
 8009b30:	2301      	movs	r3, #1
 8009b32:	f7f9 f9cf 	bl	8002ed4 <HAL_I2C_Master_Receive>
    test[0] = 0x80 & test[0];
 8009b36:	7c3b      	ldrb	r3, [r7, #16]
 8009b38:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	743b      	strb	r3, [r7, #16]
    displayBuffer[0] = test[0] | sevenSegmentChars[(dispDigit-'0')];
 8009b40:	7c3a      	ldrb	r2, [r7, #16]
 8009b42:	78bb      	ldrb	r3, [r7, #2]
 8009b44:	3b30      	subs	r3, #48	@ 0x30
 8009b46:	490a      	ldr	r1, [pc, #40]	@ (8009b70 <dateTime_setDigitSegments+0x13c>)
 8009b48:	5ccb      	ldrb	r3, [r1, r3]
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	b2da      	uxtb	r2, r3
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	701a      	strb	r2, [r3, #0]
    ht16k33_updateDisplayData (pConfig->hDisplayDriver, segmentNum, displayBuffer, 1);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6898      	ldr	r0, [r3, #8]
 8009b56:	78f9      	ldrb	r1, [r7, #3]
 8009b58:	2301      	movs	r3, #1
 8009b5a:	697a      	ldr	r2, [r7, #20]
 8009b5c:	f7ff fb26 	bl	80091ac <ht16k33_updateDisplayData>
  }

  free(displayBuffer);
 8009b60:	6978      	ldr	r0, [r7, #20]
 8009b62:	f005 fdc9 	bl	800f6f8 <free>
  return 1;
 8009b66:	2301      	movs	r3, #1
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3718      	adds	r7, #24
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}
 8009b70:	08010d14 	.word	0x08010d14

08009b74 <dateTime_setAlphaSegments>:

DateTime_Display_Status_t dateTime_setAlphaSegments(DateTime_Display_Config_t* const pConfig, const uint8_t segmentNum,
    const char dispAlpha)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b084      	sub	sp, #16
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	460b      	mov	r3, r1
 8009b7e:	70fb      	strb	r3, [r7, #3]
 8009b80:	4613      	mov	r3, r2
 8009b82:	70bb      	strb	r3, [r7, #2]
  uint8_t displayBuffer[2] = {0,0};
 8009b84:	2300      	movs	r3, #0
 8009b86:	81bb      	strh	r3, [r7, #12]

  displayBuffer[0] = (uint8_t)((fourteenSegmentChars[(uint8_t)(dispAlpha-0x41)]>>0) & 0xFF);
 8009b88:	78bb      	ldrb	r3, [r7, #2]
 8009b8a:	3b41      	subs	r3, #65	@ 0x41
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	461a      	mov	r2, r3
 8009b90:	4b10      	ldr	r3, [pc, #64]	@ (8009bd4 <dateTime_setAlphaSegments+0x60>)
 8009b92:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009b96:	b2db      	uxtb	r3, r3
 8009b98:	733b      	strb	r3, [r7, #12]
  displayBuffer[1] = (uint8_t)((fourteenSegmentChars[(uint8_t)(dispAlpha-0x41)]>>8) & 0xFF);
 8009b9a:	78bb      	ldrb	r3, [r7, #2]
 8009b9c:	3b41      	subs	r3, #65	@ 0x41
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8009bd4 <dateTime_setAlphaSegments+0x60>)
 8009ba4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009ba8:	0a1b      	lsrs	r3, r3, #8
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	737b      	strb	r3, [r7, #13]
  ht16k33_updateDisplayData (pConfig->hDisplayDriver, (10 + (2*segmentNum)), displayBuffer, 2);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6898      	ldr	r0, [r3, #8]
 8009bb4:	78fb      	ldrb	r3, [r7, #3]
 8009bb6:	3305      	adds	r3, #5
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	005b      	lsls	r3, r3, #1
 8009bbc:	b2d9      	uxtb	r1, r3
 8009bbe:	f107 020c 	add.w	r2, r7, #12
 8009bc2:	2302      	movs	r3, #2
 8009bc4:	f7ff faf2 	bl	80091ac <ht16k33_updateDisplayData>

  return 1;
 8009bc8:	2301      	movs	r3, #1
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3710      	adds	r7, #16
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	08010ce0 	.word	0x08010ce0

08009bd8 <dateTime_updateDisplayGlitch>:

DateTime_Display_Status_t dateTime_updateDisplayGlitch(DateTime_Display_Config_t* const pConfig,
    const char* const pGlitchData)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b08a      	sub	sp, #40	@ 0x28
 8009bdc:	af02      	add	r7, sp, #8
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
  DateTime_Display_Status_t isSuccess           = 0;
 8009be2:	2300      	movs	r3, #0
 8009be4:	77fb      	strb	r3, [r7, #31]
  uint8_t                   segmentCount        = 0;
 8009be6:	2300      	movs	r3, #0
 8009be8:	77bb      	strb	r3, [r7, #30]
  char                      digitSegBuffer[11];

  memcpy(&digitSegBuffer, pGlitchData+3, sizeof(digitSegBuffer));
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	1cda      	adds	r2, r3, #3
 8009bee:	f107 0310 	add.w	r3, r7, #16
 8009bf2:	6810      	ldr	r0, [r2, #0]
 8009bf4:	6851      	ldr	r1, [r2, #4]
 8009bf6:	c303      	stmia	r3!, {r0, r1}
 8009bf8:	8911      	ldrh	r1, [r2, #8]
 8009bfa:	7a92      	ldrb	r2, [r2, #10]
 8009bfc:	8019      	strh	r1, [r3, #0]
 8009bfe:	709a      	strb	r2, [r3, #2]

  //Save colon state
  uint8_t ColonStateData = 0;
 8009c00:	2300      	movs	r3, #0
 8009c02:	73fb      	strb	r3, [r7, #15]
  uint8_t RequestData = COLON_LED_SEGMENT_ADDRESS;
 8009c04:	2307      	movs	r3, #7
 8009c06:	73bb      	strb	r3, [r7, #14]

  isSuccess |= HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->i2cAddrs)<<1, &RequestData,  1, HAL_MAX_DELAY);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6818      	ldr	r0, [r3, #0]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	791b      	ldrb	r3, [r3, #4]
 8009c10:	005b      	lsls	r3, r3, #1
 8009c12:	b299      	uxth	r1, r3
 8009c14:	f107 020e 	add.w	r2, r7, #14
 8009c18:	f04f 33ff 	mov.w	r3, #4294967295
 8009c1c:	9300      	str	r3, [sp, #0]
 8009c1e:	2301      	movs	r3, #1
 8009c20:	f7f9 f85a 	bl	8002cd8 <HAL_I2C_Master_Transmit>
 8009c24:	4603      	mov	r3, r0
 8009c26:	461a      	mov	r2, r3
 8009c28:	7ffb      	ldrb	r3, [r7, #31]
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	bf14      	ite	ne
 8009c30:	2301      	movne	r3, #1
 8009c32:	2300      	moveq	r3, #0
 8009c34:	77fb      	strb	r3, [r7, #31]
  isSuccess |= HAL_I2C_Master_Receive(pConfig->hi2c, ((pConfig->i2cAddrs)<<1)|0x01, &ColonStateData, 1, HAL_MAX_DELAY);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6818      	ldr	r0, [r3, #0]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	791b      	ldrb	r3, [r3, #4]
 8009c3e:	005b      	lsls	r3, r3, #1
 8009c40:	b21b      	sxth	r3, r3
 8009c42:	f043 0301 	orr.w	r3, r3, #1
 8009c46:	b21b      	sxth	r3, r3
 8009c48:	b299      	uxth	r1, r3
 8009c4a:	f107 020f 	add.w	r2, r7, #15
 8009c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8009c52:	9300      	str	r3, [sp, #0]
 8009c54:	2301      	movs	r3, #1
 8009c56:	f7f9 f93d 	bl	8002ed4 <HAL_I2C_Master_Receive>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	7ffb      	ldrb	r3, [r7, #31]
 8009c60:	4313      	orrs	r3, r2
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	bf14      	ite	ne
 8009c66:	2301      	movne	r3, #1
 8009c68:	2300      	moveq	r3, #0
 8009c6a:	77fb      	strb	r3, [r7, #31]
  ColonStateData &= 0b11000000;
 8009c6c:	7bfb      	ldrb	r3, [r7, #15]
 8009c6e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009c72:	b2db      	uxtb	r3, r3
 8009c74:	73fb      	strb	r3, [r7, #15]


  //Update glitch alphanumeric display
  for (segmentCount = 0; segmentCount <= 2; segmentCount++)
 8009c76:	2300      	movs	r3, #0
 8009c78:	77bb      	strb	r3, [r7, #30]
 8009c7a:	e01e      	b.n	8009cba <dateTime_updateDisplayGlitch+0xe2>
  {
    if (pGlitchData[segmentCount] !=' ')
 8009c7c:	7fbb      	ldrb	r3, [r7, #30]
 8009c7e:	683a      	ldr	r2, [r7, #0]
 8009c80:	4413      	add	r3, r2
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	2b20      	cmp	r3, #32
 8009c86:	d015      	beq.n	8009cb4 <dateTime_updateDisplayGlitch+0xdc>
    {
      isSuccess |= dateTime_setAlphaSegments(pConfig, segmentCount, pGlitchData[2-segmentCount]);
 8009c88:	7fbb      	ldrb	r3, [r7, #30]
 8009c8a:	f1c3 0302 	rsb	r3, r3, #2
 8009c8e:	461a      	mov	r2, r3
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	4413      	add	r3, r2
 8009c94:	781a      	ldrb	r2, [r3, #0]
 8009c96:	7fbb      	ldrb	r3, [r7, #30]
 8009c98:	4619      	mov	r1, r3
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f7ff ff6a 	bl	8009b74 <dateTime_setAlphaSegments>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	7ffb      	ldrb	r3, [r7, #31]
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	b2db      	uxtb	r3, r3
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	bf14      	ite	ne
 8009cae:	2301      	movne	r3, #1
 8009cb0:	2300      	moveq	r3, #0
 8009cb2:	77fb      	strb	r3, [r7, #31]
  for (segmentCount = 0; segmentCount <= 2; segmentCount++)
 8009cb4:	7fbb      	ldrb	r3, [r7, #30]
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	77bb      	strb	r3, [r7, #30]
 8009cba:	7fbb      	ldrb	r3, [r7, #30]
 8009cbc:	2b02      	cmp	r3, #2
 8009cbe:	d9dd      	bls.n	8009c7c <dateTime_updateDisplayGlitch+0xa4>
    }
  }

  //Update glitch digit display
  for (segmentCount = 0; segmentCount < (sizeof(digitSegBuffer)-1); segmentCount++)
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	77bb      	strb	r3, [r7, #30]
 8009cc4:	e018      	b.n	8009cf8 <dateTime_updateDisplayGlitch+0x120>
  {
    isSuccess |= dateTime_setDigitSegments(pConfig, digitSegmentOrder[segmentCount], digitSegBuffer[segmentCount]);
 8009cc6:	7fbb      	ldrb	r3, [r7, #30]
 8009cc8:	4a3f      	ldr	r2, [pc, #252]	@ (8009dc8 <dateTime_updateDisplayGlitch+0x1f0>)
 8009cca:	5cd1      	ldrb	r1, [r2, r3]
 8009ccc:	7fbb      	ldrb	r3, [r7, #30]
 8009cce:	3320      	adds	r3, #32
 8009cd0:	443b      	add	r3, r7
 8009cd2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f7ff feab 	bl	8009a34 <dateTime_setDigitSegments>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	7ffb      	ldrb	r3, [r7, #31]
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	bf14      	ite	ne
 8009cec:	2301      	movne	r3, #1
 8009cee:	2300      	moveq	r3, #0
 8009cf0:	77fb      	strb	r3, [r7, #31]
  for (segmentCount = 0; segmentCount < (sizeof(digitSegBuffer)-1); segmentCount++)
 8009cf2:	7fbb      	ldrb	r3, [r7, #30]
 8009cf4:	3301      	adds	r3, #1
 8009cf6:	77bb      	strb	r3, [r7, #30]
 8009cf8:	7fbb      	ldrb	r3, [r7, #30]
 8009cfa:	2b09      	cmp	r3, #9
 8009cfc:	d9e3      	bls.n	8009cc6 <dateTime_updateDisplayGlitch+0xee>
  }

  //Restore colon state
  uint8_t SegmentData = 0;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	737b      	strb	r3, [r7, #13]
  isSuccess |= HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->i2cAddrs)<<1, &RequestData,  1, HAL_MAX_DELAY);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6818      	ldr	r0, [r3, #0]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	791b      	ldrb	r3, [r3, #4]
 8009d0a:	005b      	lsls	r3, r3, #1
 8009d0c:	b299      	uxth	r1, r3
 8009d0e:	f107 020e 	add.w	r2, r7, #14
 8009d12:	f04f 33ff 	mov.w	r3, #4294967295
 8009d16:	9300      	str	r3, [sp, #0]
 8009d18:	2301      	movs	r3, #1
 8009d1a:	f7f8 ffdd 	bl	8002cd8 <HAL_I2C_Master_Transmit>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	461a      	mov	r2, r3
 8009d22:	7ffb      	ldrb	r3, [r7, #31]
 8009d24:	4313      	orrs	r3, r2
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	bf14      	ite	ne
 8009d2a:	2301      	movne	r3, #1
 8009d2c:	2300      	moveq	r3, #0
 8009d2e:	77fb      	strb	r3, [r7, #31]
  isSuccess |= HAL_I2C_Master_Receive(pConfig->hi2c, ((pConfig->i2cAddrs)<<1)|0x01, &SegmentData, 1, HAL_MAX_DELAY);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6818      	ldr	r0, [r3, #0]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	791b      	ldrb	r3, [r3, #4]
 8009d38:	005b      	lsls	r3, r3, #1
 8009d3a:	b21b      	sxth	r3, r3
 8009d3c:	f043 0301 	orr.w	r3, r3, #1
 8009d40:	b21b      	sxth	r3, r3
 8009d42:	b299      	uxth	r1, r3
 8009d44:	f107 020d 	add.w	r2, r7, #13
 8009d48:	f04f 33ff 	mov.w	r3, #4294967295
 8009d4c:	9300      	str	r3, [sp, #0]
 8009d4e:	2301      	movs	r3, #1
 8009d50:	f7f9 f8c0 	bl	8002ed4 <HAL_I2C_Master_Receive>
 8009d54:	4603      	mov	r3, r0
 8009d56:	461a      	mov	r2, r3
 8009d58:	7ffb      	ldrb	r3, [r7, #31]
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	bf14      	ite	ne
 8009d60:	2301      	movne	r3, #1
 8009d62:	2300      	moveq	r3, #0
 8009d64:	77fb      	strb	r3, [r7, #31]
  SegmentData &= 0b00111111;
 8009d66:	7b7b      	ldrb	r3, [r7, #13]
 8009d68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	737b      	strb	r3, [r7, #13]
  SegmentData |= ColonStateData;
 8009d70:	7b7a      	ldrb	r2, [r7, #13]
 8009d72:	7bfb      	ldrb	r3, [r7, #15]
 8009d74:	4313      	orrs	r3, r2
 8009d76:	b2db      	uxtb	r3, r3
 8009d78:	737b      	strb	r3, [r7, #13]
  isSuccess |= ht16k33_updateDisplayData (pConfig->hDisplayDriver, RequestData, &SegmentData, 1);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6898      	ldr	r0, [r3, #8]
 8009d7e:	7bb9      	ldrb	r1, [r7, #14]
 8009d80:	f107 020d 	add.w	r2, r7, #13
 8009d84:	2301      	movs	r3, #1
 8009d86:	f7ff fa11 	bl	80091ac <ht16k33_updateDisplayData>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	7ffb      	ldrb	r3, [r7, #31]
 8009d90:	4313      	orrs	r3, r2
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	bf14      	ite	ne
 8009d98:	2301      	movne	r3, #1
 8009d9a:	2300      	moveq	r3, #0
 8009d9c:	77fb      	strb	r3, [r7, #31]

  //Update Meridiem
  isSuccess |= dateTime_setLed(pConfig, MERIDIEM_LED_SEGMENT_ADDRESS, (DateTime_DisplayDataMeridiem_AM << 6));
 8009d9e:	2240      	movs	r2, #64	@ 0x40
 8009da0:	2109      	movs	r1, #9
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f7ff fde4 	bl	8009970 <dateTime_setLed>
 8009da8:	4603      	mov	r3, r0
 8009daa:	461a      	mov	r2, r3
 8009dac:	7ffb      	ldrb	r3, [r7, #31]
 8009dae:	4313      	orrs	r3, r2
 8009db0:	b2db      	uxtb	r3, r3
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	bf14      	ite	ne
 8009db6:	2301      	movne	r3, #1
 8009db8:	2300      	moveq	r3, #0
 8009dba:	77fb      	strb	r3, [r7, #31]

  return isSuccess;
 8009dbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3720      	adds	r7, #32
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	08010cd4 	.word	0x08010cd4

08009dcc <dateTime_convertDateTimeToChar>:

DateTime_Display_Status_t dateTime_convertDateTimeToChar(DateTime_Display_Config_t* const pConfig,
    char* const writeBuf, uint8_t bufferSize, uint8_t* pBufferCount)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b086      	sub	sp, #24
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	60b9      	str	r1, [r7, #8]
 8009dd6:	603b      	str	r3, [r7, #0]
 8009dd8:	4613      	mov	r3, r2
 8009dda:	71fb      	strb	r3, [r7, #7]
  DateTime_Display_Status_t isSuccess = 0;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	75bb      	strb	r3, [r7, #22]
  uint8_t convertedHour;

  *pBufferCount +=  snprintf(writeBuf+*pBufferCount, bufferSize-*pBufferCount,
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	461a      	mov	r2, r3
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	1898      	adds	r0, r3, r2
 8009dea:	79fb      	ldrb	r3, [r7, #7]
 8009dec:	683a      	ldr	r2, [r7, #0]
 8009dee:	7812      	ldrb	r2, [r2, #0]
 8009df0:	1a9b      	subs	r3, r3, r2
 8009df2:	4619      	mov	r1, r3
      "%02d", pConfig->dateTimeData.Month);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	7b1b      	ldrb	r3, [r3, #12]
  *pBufferCount +=  snprintf(writeBuf+*pBufferCount, bufferSize-*pBufferCount,
 8009df8:	4a45      	ldr	r2, [pc, #276]	@ (8009f10 <dateTime_convertDateTimeToChar+0x144>)
 8009dfa:	f005 fedf 	bl	800fbbc <sniprintf>
 8009dfe:	4601      	mov	r1, r0
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	781a      	ldrb	r2, [r3, #0]
 8009e04:	b2cb      	uxtb	r3, r1
 8009e06:	4413      	add	r3, r2
 8009e08:	b2da      	uxtb	r2, r3
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	701a      	strb	r2, [r3, #0]
  *pBufferCount += snprintf(writeBuf+*pBufferCount, bufferSize-*pBufferCount,
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	461a      	mov	r2, r3
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	1898      	adds	r0, r3, r2
 8009e18:	79fb      	ldrb	r3, [r7, #7]
 8009e1a:	683a      	ldr	r2, [r7, #0]
 8009e1c:	7812      	ldrb	r2, [r2, #0]
 8009e1e:	1a9b      	subs	r3, r3, r2
 8009e20:	4619      	mov	r1, r3
      "%02d", pConfig->dateTimeData.Day);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	7b5b      	ldrb	r3, [r3, #13]
  *pBufferCount += snprintf(writeBuf+*pBufferCount, bufferSize-*pBufferCount,
 8009e26:	4a3a      	ldr	r2, [pc, #232]	@ (8009f10 <dateTime_convertDateTimeToChar+0x144>)
 8009e28:	f005 fec8 	bl	800fbbc <sniprintf>
 8009e2c:	4601      	mov	r1, r0
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	781a      	ldrb	r2, [r3, #0]
 8009e32:	b2cb      	uxtb	r3, r1
 8009e34:	4413      	add	r3, r2
 8009e36:	b2da      	uxtb	r2, r3
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	701a      	strb	r2, [r3, #0]
  *pBufferCount += snprintf(writeBuf+*pBufferCount, bufferSize-*pBufferCount,
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	461a      	mov	r2, r3
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	1898      	adds	r0, r3, r2
 8009e46:	79fb      	ldrb	r3, [r7, #7]
 8009e48:	683a      	ldr	r2, [r7, #0]
 8009e4a:	7812      	ldrb	r2, [r2, #0]
 8009e4c:	1a9b      	subs	r3, r3, r2
 8009e4e:	4619      	mov	r1, r3
      "%04d", pConfig->dateTimeData.Year);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	89db      	ldrh	r3, [r3, #14]
  *pBufferCount += snprintf(writeBuf+*pBufferCount, bufferSize-*pBufferCount,
 8009e54:	4a2f      	ldr	r2, [pc, #188]	@ (8009f14 <dateTime_convertDateTimeToChar+0x148>)
 8009e56:	f005 feb1 	bl	800fbbc <sniprintf>
 8009e5a:	4601      	mov	r1, r0
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	781a      	ldrb	r2, [r3, #0]
 8009e60:	b2cb      	uxtb	r3, r1
 8009e62:	4413      	add	r3, r2
 8009e64:	b2da      	uxtb	r2, r3
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	701a      	strb	r2, [r3, #0]
  switch (pConfig->dateTimeData.Meridiem)
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	7c9b      	ldrb	r3, [r3, #18]
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d00e      	beq.n	8009e90 <dateTime_convertDateTimeToChar+0xc4>
 8009e72:	2b02      	cmp	r3, #2
 8009e74:	d119      	bne.n	8009eaa <dateTime_convertDateTimeToChar+0xde>
  {
    case  DateTime_DisplayDataMeridiem_PM:
      convertedHour = (pConfig->dateTimeData.Hour == 12) ? (pConfig->dateTimeData.Hour) : (pConfig->dateTimeData.Hour + 12);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	7c1b      	ldrb	r3, [r3, #16]
 8009e7a:	2b0c      	cmp	r3, #12
 8009e7c:	d102      	bne.n	8009e84 <dateTime_convertDateTimeToChar+0xb8>
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	7c1b      	ldrb	r3, [r3, #16]
 8009e82:	e003      	b.n	8009e8c <dateTime_convertDateTimeToChar+0xc0>
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	7c1b      	ldrb	r3, [r3, #16]
 8009e88:	330c      	adds	r3, #12
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	75fb      	strb	r3, [r7, #23]
      break;
 8009e8e:	e00c      	b.n	8009eaa <dateTime_convertDateTimeToChar+0xde>
    case  DateTime_DisplayDataMeridiem_AM:
      convertedHour = (pConfig->dateTimeData.Hour == 12) ? (pConfig->dateTimeData.Hour + 12) : (pConfig->dateTimeData.Hour);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	7c1b      	ldrb	r3, [r3, #16]
 8009e94:	2b0c      	cmp	r3, #12
 8009e96:	d104      	bne.n	8009ea2 <dateTime_convertDateTimeToChar+0xd6>
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	7c1b      	ldrb	r3, [r3, #16]
 8009e9c:	330c      	adds	r3, #12
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	e001      	b.n	8009ea6 <dateTime_convertDateTimeToChar+0xda>
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	7c1b      	ldrb	r3, [r3, #16]
 8009ea6:	75fb      	strb	r3, [r7, #23]
      break;
 8009ea8:	bf00      	nop
  }
  *pBufferCount += snprintf(writeBuf+*pBufferCount, bufferSize-*pBufferCount,
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	781b      	ldrb	r3, [r3, #0]
 8009eae:	461a      	mov	r2, r3
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	1898      	adds	r0, r3, r2
 8009eb4:	79fb      	ldrb	r3, [r7, #7]
 8009eb6:	683a      	ldr	r2, [r7, #0]
 8009eb8:	7812      	ldrb	r2, [r2, #0]
 8009eba:	1a9b      	subs	r3, r3, r2
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	7dfb      	ldrb	r3, [r7, #23]
 8009ec0:	4a13      	ldr	r2, [pc, #76]	@ (8009f10 <dateTime_convertDateTimeToChar+0x144>)
 8009ec2:	f005 fe7b 	bl	800fbbc <sniprintf>
 8009ec6:	4601      	mov	r1, r0
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	781a      	ldrb	r2, [r3, #0]
 8009ecc:	b2cb      	uxtb	r3, r1
 8009ece:	4413      	add	r3, r2
 8009ed0:	b2da      	uxtb	r2, r3
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	701a      	strb	r2, [r3, #0]
      "%02d", convertedHour);
  *pBufferCount += snprintf(writeBuf+*pBufferCount, bufferSize-*pBufferCount,
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	461a      	mov	r2, r3
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	1898      	adds	r0, r3, r2
 8009ee0:	79fb      	ldrb	r3, [r7, #7]
 8009ee2:	683a      	ldr	r2, [r7, #0]
 8009ee4:	7812      	ldrb	r2, [r2, #0]
 8009ee6:	1a9b      	subs	r3, r3, r2
 8009ee8:	4619      	mov	r1, r3
      "%02d", pConfig->dateTimeData.Minute);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	7c5b      	ldrb	r3, [r3, #17]
  *pBufferCount += snprintf(writeBuf+*pBufferCount, bufferSize-*pBufferCount,
 8009eee:	4a08      	ldr	r2, [pc, #32]	@ (8009f10 <dateTime_convertDateTimeToChar+0x144>)
 8009ef0:	f005 fe64 	bl	800fbbc <sniprintf>
 8009ef4:	4601      	mov	r1, r0
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	781a      	ldrb	r2, [r3, #0]
 8009efa:	b2cb      	uxtb	r3, r1
 8009efc:	4413      	add	r3, r2
 8009efe:	b2da      	uxtb	r2, r3
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	701a      	strb	r2, [r3, #0]

  return isSuccess;
 8009f04:	7dbb      	ldrb	r3, [r7, #22]
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3718      	adds	r7, #24
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	08010b74 	.word	0x08010b74
 8009f14:	08010b7c 	.word	0x08010b7c

08009f18 <dateTime_updateDisplay>:
DateTime_Display_Status_t dateTime_updateDisplay(DateTime_Display_Config_t* const pConfig)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b08a      	sub	sp, #40	@ 0x28
 8009f1c:	af02      	add	r7, sp, #8
 8009f1e:	6078      	str	r0, [r7, #4]
  DateTime_Display_Status_t isSuccess           = 0;
 8009f20:	2300      	movs	r3, #0
 8009f22:	77fb      	strb	r3, [r7, #31]
  uint8_t                   digitSegBufferCount = 0;
 8009f24:	2300      	movs	r3, #0
 8009f26:	777b      	strb	r3, [r7, #29]
  uint8_t                   segmentCount        = 0;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	77bb      	strb	r3, [r7, #30]
  char                      digitSegBuffer[11];

  //Save colon state
  uint8_t ColonStateData = 0;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	73fb      	strb	r3, [r7, #15]
  uint8_t RequestData = COLON_LED_SEGMENT_ADDRESS;
 8009f30:	2307      	movs	r3, #7
 8009f32:	73bb      	strb	r3, [r7, #14]

  isSuccess |= HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->i2cAddrs)<<1, &RequestData,  1, HAL_MAX_DELAY);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6818      	ldr	r0, [r3, #0]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	791b      	ldrb	r3, [r3, #4]
 8009f3c:	005b      	lsls	r3, r3, #1
 8009f3e:	b299      	uxth	r1, r3
 8009f40:	f107 020e 	add.w	r2, r7, #14
 8009f44:	f04f 33ff 	mov.w	r3, #4294967295
 8009f48:	9300      	str	r3, [sp, #0]
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	f7f8 fec4 	bl	8002cd8 <HAL_I2C_Master_Transmit>
 8009f50:	4603      	mov	r3, r0
 8009f52:	461a      	mov	r2, r3
 8009f54:	7ffb      	ldrb	r3, [r7, #31]
 8009f56:	4313      	orrs	r3, r2
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	bf14      	ite	ne
 8009f5c:	2301      	movne	r3, #1
 8009f5e:	2300      	moveq	r3, #0
 8009f60:	77fb      	strb	r3, [r7, #31]
  isSuccess |= HAL_I2C_Master_Receive(pConfig->hi2c, ((pConfig->i2cAddrs)<<1)|0x01, &ColonStateData, 1, HAL_MAX_DELAY);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6818      	ldr	r0, [r3, #0]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	791b      	ldrb	r3, [r3, #4]
 8009f6a:	005b      	lsls	r3, r3, #1
 8009f6c:	b21b      	sxth	r3, r3
 8009f6e:	f043 0301 	orr.w	r3, r3, #1
 8009f72:	b21b      	sxth	r3, r3
 8009f74:	b299      	uxth	r1, r3
 8009f76:	f107 020f 	add.w	r2, r7, #15
 8009f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8009f7e:	9300      	str	r3, [sp, #0]
 8009f80:	2301      	movs	r3, #1
 8009f82:	f7f8 ffa7 	bl	8002ed4 <HAL_I2C_Master_Receive>
 8009f86:	4603      	mov	r3, r0
 8009f88:	461a      	mov	r2, r3
 8009f8a:	7ffb      	ldrb	r3, [r7, #31]
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	bf14      	ite	ne
 8009f92:	2301      	movne	r3, #1
 8009f94:	2300      	moveq	r3, #0
 8009f96:	77fb      	strb	r3, [r7, #31]
  ColonStateData &= 0b11000000;
 8009f98:	7bfb      	ldrb	r3, [r7, #15]
 8009f9a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009f9e:	b2db      	uxtb	r3, r3
 8009fa0:	73fb      	strb	r3, [r7, #15]

  //Update Month Display Characters
  for (segmentCount = 0; segmentCount <= 2; segmentCount++)
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	77bb      	strb	r3, [r7, #30]
 8009fa6:	e01e      	b.n	8009fe6 <dateTime_updateDisplay+0xce>
  {
    isSuccess |= dateTime_setAlphaSegments(pConfig, segmentCount,
        monthDisplayChars[(pConfig->dateTimeData.Month)-1][2-segmentCount]);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	7b1b      	ldrb	r3, [r3, #12]
 8009fac:	1e5a      	subs	r2, r3, #1
 8009fae:	7fbb      	ldrb	r3, [r7, #30]
 8009fb0:	f1c3 0102 	rsb	r1, r3, #2
 8009fb4:	486f      	ldr	r0, [pc, #444]	@ (800a174 <dateTime_updateDisplay+0x25c>)
 8009fb6:	4613      	mov	r3, r2
 8009fb8:	005b      	lsls	r3, r3, #1
 8009fba:	4413      	add	r3, r2
 8009fbc:	4403      	add	r3, r0
 8009fbe:	440b      	add	r3, r1
 8009fc0:	781a      	ldrb	r2, [r3, #0]
    isSuccess |= dateTime_setAlphaSegments(pConfig, segmentCount,
 8009fc2:	7fbb      	ldrb	r3, [r7, #30]
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f7ff fdd4 	bl	8009b74 <dateTime_setAlphaSegments>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	461a      	mov	r2, r3
 8009fd0:	7ffb      	ldrb	r3, [r7, #31]
 8009fd2:	4313      	orrs	r3, r2
 8009fd4:	b2db      	uxtb	r3, r3
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	bf14      	ite	ne
 8009fda:	2301      	movne	r3, #1
 8009fdc:	2300      	moveq	r3, #0
 8009fde:	77fb      	strb	r3, [r7, #31]
  for (segmentCount = 0; segmentCount <= 2; segmentCount++)
 8009fe0:	7fbb      	ldrb	r3, [r7, #30]
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	77bb      	strb	r3, [r7, #30]
 8009fe6:	7fbb      	ldrb	r3, [r7, #30]
 8009fe8:	2b02      	cmp	r3, #2
 8009fea:	d9dd      	bls.n	8009fa8 <dateTime_updateDisplay+0x90>
  }

  //Update Day, Year and Time
  digitSegBufferCount = snprintf(digitSegBuffer, sizeof(digitSegBuffer), "%02d", pConfig->dateTimeData.Day);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	7b5b      	ldrb	r3, [r3, #13]
 8009ff0:	f107 0010 	add.w	r0, r7, #16
 8009ff4:	4a60      	ldr	r2, [pc, #384]	@ (800a178 <dateTime_updateDisplay+0x260>)
 8009ff6:	210b      	movs	r1, #11
 8009ff8:	f005 fde0 	bl	800fbbc <sniprintf>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	777b      	strb	r3, [r7, #29]
  digitSegBufferCount += snprintf(digitSegBuffer+digitSegBufferCount, sizeof(digitSegBuffer)-digitSegBufferCount,
 800a000:	7f7b      	ldrb	r3, [r7, #29]
 800a002:	f107 0210 	add.w	r2, r7, #16
 800a006:	18d0      	adds	r0, r2, r3
 800a008:	7f7b      	ldrb	r3, [r7, #29]
 800a00a:	f1c3 010b 	rsb	r1, r3, #11
      "%04d", pConfig->dateTimeData.Year);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	89db      	ldrh	r3, [r3, #14]
  digitSegBufferCount += snprintf(digitSegBuffer+digitSegBufferCount, sizeof(digitSegBuffer)-digitSegBufferCount,
 800a012:	4a5a      	ldr	r2, [pc, #360]	@ (800a17c <dateTime_updateDisplay+0x264>)
 800a014:	f005 fdd2 	bl	800fbbc <sniprintf>
 800a018:	4603      	mov	r3, r0
 800a01a:	b2da      	uxtb	r2, r3
 800a01c:	7f7b      	ldrb	r3, [r7, #29]
 800a01e:	4413      	add	r3, r2
 800a020:	777b      	strb	r3, [r7, #29]
  digitSegBufferCount += snprintf(digitSegBuffer+digitSegBufferCount, sizeof(digitSegBuffer)-digitSegBufferCount,
 800a022:	7f7b      	ldrb	r3, [r7, #29]
 800a024:	f107 0210 	add.w	r2, r7, #16
 800a028:	18d0      	adds	r0, r2, r3
 800a02a:	7f7b      	ldrb	r3, [r7, #29]
 800a02c:	f1c3 010b 	rsb	r1, r3, #11
      "%02d", pConfig->dateTimeData.Hour);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	7c1b      	ldrb	r3, [r3, #16]
  digitSegBufferCount += snprintf(digitSegBuffer+digitSegBufferCount, sizeof(digitSegBuffer)-digitSegBufferCount,
 800a034:	4a50      	ldr	r2, [pc, #320]	@ (800a178 <dateTime_updateDisplay+0x260>)
 800a036:	f005 fdc1 	bl	800fbbc <sniprintf>
 800a03a:	4603      	mov	r3, r0
 800a03c:	b2da      	uxtb	r2, r3
 800a03e:	7f7b      	ldrb	r3, [r7, #29]
 800a040:	4413      	add	r3, r2
 800a042:	777b      	strb	r3, [r7, #29]
  digitSegBufferCount += snprintf(digitSegBuffer+digitSegBufferCount, sizeof(digitSegBuffer)-digitSegBufferCount,
 800a044:	7f7b      	ldrb	r3, [r7, #29]
 800a046:	f107 0210 	add.w	r2, r7, #16
 800a04a:	18d0      	adds	r0, r2, r3
 800a04c:	7f7b      	ldrb	r3, [r7, #29]
 800a04e:	f1c3 010b 	rsb	r1, r3, #11
      "%02d", pConfig->dateTimeData.Minute);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	7c5b      	ldrb	r3, [r3, #17]
  digitSegBufferCount += snprintf(digitSegBuffer+digitSegBufferCount, sizeof(digitSegBuffer)-digitSegBufferCount,
 800a056:	4a48      	ldr	r2, [pc, #288]	@ (800a178 <dateTime_updateDisplay+0x260>)
 800a058:	f005 fdb0 	bl	800fbbc <sniprintf>
 800a05c:	4603      	mov	r3, r0
 800a05e:	b2da      	uxtb	r2, r3
 800a060:	7f7b      	ldrb	r3, [r7, #29]
 800a062:	4413      	add	r3, r2
 800a064:	777b      	strb	r3, [r7, #29]

  for (segmentCount = 0; segmentCount < (sizeof(digitSegBuffer)-1); segmentCount++)
 800a066:	2300      	movs	r3, #0
 800a068:	77bb      	strb	r3, [r7, #30]
 800a06a:	e018      	b.n	800a09e <dateTime_updateDisplay+0x186>
  {
    isSuccess |= dateTime_setDigitSegments(pConfig, digitSegmentOrder[segmentCount], digitSegBuffer[segmentCount]);
 800a06c:	7fbb      	ldrb	r3, [r7, #30]
 800a06e:	4a44      	ldr	r2, [pc, #272]	@ (800a180 <dateTime_updateDisplay+0x268>)
 800a070:	5cd1      	ldrb	r1, [r2, r3]
 800a072:	7fbb      	ldrb	r3, [r7, #30]
 800a074:	3320      	adds	r3, #32
 800a076:	443b      	add	r3, r7
 800a078:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800a07c:	461a      	mov	r2, r3
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f7ff fcd8 	bl	8009a34 <dateTime_setDigitSegments>
 800a084:	4603      	mov	r3, r0
 800a086:	461a      	mov	r2, r3
 800a088:	7ffb      	ldrb	r3, [r7, #31]
 800a08a:	4313      	orrs	r3, r2
 800a08c:	b2db      	uxtb	r3, r3
 800a08e:	2b00      	cmp	r3, #0
 800a090:	bf14      	ite	ne
 800a092:	2301      	movne	r3, #1
 800a094:	2300      	moveq	r3, #0
 800a096:	77fb      	strb	r3, [r7, #31]
  for (segmentCount = 0; segmentCount < (sizeof(digitSegBuffer)-1); segmentCount++)
 800a098:	7fbb      	ldrb	r3, [r7, #30]
 800a09a:	3301      	adds	r3, #1
 800a09c:	77bb      	strb	r3, [r7, #30]
 800a09e:	7fbb      	ldrb	r3, [r7, #30]
 800a0a0:	2b09      	cmp	r3, #9
 800a0a2:	d9e3      	bls.n	800a06c <dateTime_updateDisplay+0x154>
  }

  //Restore colon state
  uint8_t SegmentData = 0;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	737b      	strb	r3, [r7, #13]
  isSuccess |= HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->i2cAddrs)<<1, &RequestData,  1, HAL_MAX_DELAY);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6818      	ldr	r0, [r3, #0]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	791b      	ldrb	r3, [r3, #4]
 800a0b0:	005b      	lsls	r3, r3, #1
 800a0b2:	b299      	uxth	r1, r3
 800a0b4:	f107 020e 	add.w	r2, r7, #14
 800a0b8:	f04f 33ff 	mov.w	r3, #4294967295
 800a0bc:	9300      	str	r3, [sp, #0]
 800a0be:	2301      	movs	r3, #1
 800a0c0:	f7f8 fe0a 	bl	8002cd8 <HAL_I2C_Master_Transmit>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	461a      	mov	r2, r3
 800a0c8:	7ffb      	ldrb	r3, [r7, #31]
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	bf14      	ite	ne
 800a0d0:	2301      	movne	r3, #1
 800a0d2:	2300      	moveq	r3, #0
 800a0d4:	77fb      	strb	r3, [r7, #31]
  isSuccess |= HAL_I2C_Master_Receive(pConfig->hi2c, ((pConfig->i2cAddrs)<<1)|0x01, &SegmentData, 1, HAL_MAX_DELAY);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6818      	ldr	r0, [r3, #0]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	791b      	ldrb	r3, [r3, #4]
 800a0de:	005b      	lsls	r3, r3, #1
 800a0e0:	b21b      	sxth	r3, r3
 800a0e2:	f043 0301 	orr.w	r3, r3, #1
 800a0e6:	b21b      	sxth	r3, r3
 800a0e8:	b299      	uxth	r1, r3
 800a0ea:	f107 020d 	add.w	r2, r7, #13
 800a0ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a0f2:	9300      	str	r3, [sp, #0]
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	f7f8 feed 	bl	8002ed4 <HAL_I2C_Master_Receive>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	7ffb      	ldrb	r3, [r7, #31]
 800a100:	4313      	orrs	r3, r2
 800a102:	2b00      	cmp	r3, #0
 800a104:	bf14      	ite	ne
 800a106:	2301      	movne	r3, #1
 800a108:	2300      	moveq	r3, #0
 800a10a:	77fb      	strb	r3, [r7, #31]
  SegmentData &= 0b00111111;
 800a10c:	7b7b      	ldrb	r3, [r7, #13]
 800a10e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a112:	b2db      	uxtb	r3, r3
 800a114:	737b      	strb	r3, [r7, #13]
  SegmentData |= ColonStateData;
 800a116:	7b7a      	ldrb	r2, [r7, #13]
 800a118:	7bfb      	ldrb	r3, [r7, #15]
 800a11a:	4313      	orrs	r3, r2
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	737b      	strb	r3, [r7, #13]
  isSuccess |= ht16k33_updateDisplayData (pConfig->hDisplayDriver, RequestData, &SegmentData, 1);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6898      	ldr	r0, [r3, #8]
 800a124:	7bb9      	ldrb	r1, [r7, #14]
 800a126:	f107 020d 	add.w	r2, r7, #13
 800a12a:	2301      	movs	r3, #1
 800a12c:	f7ff f83e 	bl	80091ac <ht16k33_updateDisplayData>
 800a130:	4603      	mov	r3, r0
 800a132:	461a      	mov	r2, r3
 800a134:	7ffb      	ldrb	r3, [r7, #31]
 800a136:	4313      	orrs	r3, r2
 800a138:	b2db      	uxtb	r3, r3
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	bf14      	ite	ne
 800a13e:	2301      	movne	r3, #1
 800a140:	2300      	moveq	r3, #0
 800a142:	77fb      	strb	r3, [r7, #31]

  //Update Meridiem
  isSuccess |= dateTime_setLed(pConfig, MERIDIEM_LED_SEGMENT_ADDRESS, (pConfig->dateTimeData.Meridiem << 6));
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	7c9b      	ldrb	r3, [r3, #18]
 800a148:	019b      	lsls	r3, r3, #6
 800a14a:	b2db      	uxtb	r3, r3
 800a14c:	461a      	mov	r2, r3
 800a14e:	2109      	movs	r1, #9
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f7ff fc0d 	bl	8009970 <dateTime_setLed>
 800a156:	4603      	mov	r3, r0
 800a158:	461a      	mov	r2, r3
 800a15a:	7ffb      	ldrb	r3, [r7, #31]
 800a15c:	4313      	orrs	r3, r2
 800a15e:	b2db      	uxtb	r3, r3
 800a160:	2b00      	cmp	r3, #0
 800a162:	bf14      	ite	ne
 800a164:	2301      	movne	r3, #1
 800a166:	2300      	moveq	r3, #0
 800a168:	77fb      	strb	r3, [r7, #31]

  return isSuccess;
 800a16a:	7ffb      	ldrb	r3, [r7, #31]
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3720      	adds	r7, #32
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}
 800a174:	08010d20 	.word	0x08010d20
 800a178:	08010b74 	.word	0x08010b74
 800a17c:	08010b7c 	.word	0x08010b7c
 800a180:	08010cd4 	.word	0x08010cd4

0800a184 <HAL_GPIO_EXTI_Callback>:

volatile bool gGlitchDoubleHit = false;


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	4603      	mov	r3, r0
 800a18c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == IMU_INTERRUPT_Pin)
 800a18e:	88fb      	ldrh	r3, [r7, #6]
 800a190:	2b04      	cmp	r3, #4
 800a192:	d128      	bne.n	800a1e6 <HAL_GPIO_EXTI_Callback+0x62>
      {
          uint32_t now = HAL_GetTick();
 800a194:	f7f7 fb1c 	bl	80017d0 <HAL_GetTick>
 800a198:	60f8      	str	r0, [r7, #12]

          if (!waiting_for_second_hit)
 800a19a:	4b15      	ldr	r3, [pc, #84]	@ (800a1f0 <HAL_GPIO_EXTI_Callback+0x6c>)
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	f083 0301 	eor.w	r3, r3, #1
 800a1a2:	b2db      	uxtb	r3, r3
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d009      	beq.n	800a1bc <HAL_GPIO_EXTI_Callback+0x38>
          {
              // First hit detected
              first_hit_time = now;
 800a1a8:	4a12      	ldr	r2, [pc, #72]	@ (800a1f4 <HAL_GPIO_EXTI_Callback+0x70>)
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	6013      	str	r3, [r2, #0]
              waiting_for_second_hit = true;
 800a1ae:	4b10      	ldr	r3, [pc, #64]	@ (800a1f0 <HAL_GPIO_EXTI_Callback+0x6c>)
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	701a      	strb	r2, [r3, #0]
              gGlitchDoubleHit = false;
 800a1b4:	4b10      	ldr	r3, [pc, #64]	@ (800a1f8 <HAL_GPIO_EXTI_Callback+0x74>)
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	701a      	strb	r2, [r3, #0]
 800a1ba:	e011      	b.n	800a1e0 <HAL_GPIO_EXTI_Callback+0x5c>
          }
          else if ((now - first_hit_time) <= double_hit_window_ms)
 800a1bc:	4b0d      	ldr	r3, [pc, #52]	@ (800a1f4 <HAL_GPIO_EXTI_Callback+0x70>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	68fa      	ldr	r2, [r7, #12]
 800a1c2:	1ad3      	subs	r3, r2, r3
 800a1c4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d806      	bhi.n	800a1da <HAL_GPIO_EXTI_Callback+0x56>
          {
              // Second hit detected within time window → Double Hit!
              waiting_for_second_hit = false;
 800a1cc:	4b08      	ldr	r3, [pc, #32]	@ (800a1f0 <HAL_GPIO_EXTI_Callback+0x6c>)
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	701a      	strb	r2, [r3, #0]
              gGlitchDoubleHit = true;
 800a1d2:	4b09      	ldr	r3, [pc, #36]	@ (800a1f8 <HAL_GPIO_EXTI_Callback+0x74>)
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	701a      	strb	r2, [r3, #0]
 800a1d8:	e002      	b.n	800a1e0 <HAL_GPIO_EXTI_Callback+0x5c>
          }
          else
          {
              // Too late — treat as new first hit
              first_hit_time = now;
 800a1da:	4a06      	ldr	r2, [pc, #24]	@ (800a1f4 <HAL_GPIO_EXTI_Callback+0x70>)
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	6013      	str	r3, [r2, #0]
          }

          // Clear interrupt
          bno055_set_intr_rst(ENABLED);
 800a1e0:	2001      	movs	r0, #1
 800a1e2:	f7fe f957 	bl	8008494 <bno055_set_intr_rst>
      }
}
 800a1e6:	bf00      	nop
 800a1e8:	3710      	adds	r7, #16
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
 800a1ee:	bf00      	nop
 800a1f0:	2000041c 	.word	0x2000041c
 800a1f4:	20000418 	.word	0x20000418
 800a1f8:	2000041d 	.word	0x2000041d

0800a1fc <BNO055_I2C_bus_write>:

s8 BNO055_I2C_bus_write(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b086      	sub	sp, #24
 800a200:	af04      	add	r7, sp, #16
 800a202:	603a      	str	r2, [r7, #0]
 800a204:	461a      	mov	r2, r3
 800a206:	4603      	mov	r3, r0
 800a208:	71fb      	strb	r3, [r7, #7]
 800a20a:	460b      	mov	r3, r1
 800a20c:	71bb      	strb	r3, [r7, #6]
 800a20e:	4613      	mov	r3, r2
 800a210:	717b      	strb	r3, [r7, #5]
    if (HAL_I2C_Mem_Write(&hi2c1, dev_addr << 1, reg_addr,
 800a212:	79fb      	ldrb	r3, [r7, #7]
 800a214:	b29b      	uxth	r3, r3
 800a216:	005b      	lsls	r3, r3, #1
 800a218:	b299      	uxth	r1, r3
 800a21a:	79bb      	ldrb	r3, [r7, #6]
 800a21c:	b29a      	uxth	r2, r3
 800a21e:	797b      	ldrb	r3, [r7, #5]
 800a220:	b29b      	uxth	r3, r3
 800a222:	2064      	movs	r0, #100	@ 0x64
 800a224:	9002      	str	r0, [sp, #8]
 800a226:	9301      	str	r3, [sp, #4]
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	9300      	str	r3, [sp, #0]
 800a22c:	2301      	movs	r3, #1
 800a22e:	4807      	ldr	r0, [pc, #28]	@ (800a24c <BNO055_I2C_bus_write+0x50>)
 800a230:	f7f9 f882 	bl	8003338 <HAL_I2C_Mem_Write>
 800a234:	4603      	mov	r3, r0
 800a236:	2b00      	cmp	r3, #0
 800a238:	d101      	bne.n	800a23e <BNO055_I2C_bus_write+0x42>
                          I2C_MEMADD_SIZE_8BIT, reg_data, cnt, 100) == HAL_OK)
        return 0;
 800a23a:	2300      	movs	r3, #0
 800a23c:	e001      	b.n	800a242 <BNO055_I2C_bus_write+0x46>
    else
        return -1;
 800a23e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a242:	4618      	mov	r0, r3
 800a244:	3708      	adds	r7, #8
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	20000124 	.word	0x20000124

0800a250 <BNO055_I2C_bus_read>:

s8 BNO055_I2C_bus_read(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b086      	sub	sp, #24
 800a254:	af04      	add	r7, sp, #16
 800a256:	603a      	str	r2, [r7, #0]
 800a258:	461a      	mov	r2, r3
 800a25a:	4603      	mov	r3, r0
 800a25c:	71fb      	strb	r3, [r7, #7]
 800a25e:	460b      	mov	r3, r1
 800a260:	71bb      	strb	r3, [r7, #6]
 800a262:	4613      	mov	r3, r2
 800a264:	717b      	strb	r3, [r7, #5]
    if (HAL_I2C_Mem_Read(&hi2c1, dev_addr << 1, reg_addr,
 800a266:	79fb      	ldrb	r3, [r7, #7]
 800a268:	b29b      	uxth	r3, r3
 800a26a:	005b      	lsls	r3, r3, #1
 800a26c:	b299      	uxth	r1, r3
 800a26e:	79bb      	ldrb	r3, [r7, #6]
 800a270:	b29a      	uxth	r2, r3
 800a272:	797b      	ldrb	r3, [r7, #5]
 800a274:	b29b      	uxth	r3, r3
 800a276:	2064      	movs	r0, #100	@ 0x64
 800a278:	9002      	str	r0, [sp, #8]
 800a27a:	9301      	str	r3, [sp, #4]
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	9300      	str	r3, [sp, #0]
 800a280:	2301      	movs	r3, #1
 800a282:	4807      	ldr	r0, [pc, #28]	@ (800a2a0 <BNO055_I2C_bus_read+0x50>)
 800a284:	f7f9 f952 	bl	800352c <HAL_I2C_Mem_Read>
 800a288:	4603      	mov	r3, r0
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d101      	bne.n	800a292 <BNO055_I2C_bus_read+0x42>
                         I2C_MEMADD_SIZE_8BIT, reg_data, cnt, 100) == HAL_OK)
        return 0;
 800a28e:	2300      	movs	r3, #0
 800a290:	e001      	b.n	800a296 <BNO055_I2C_bus_read+0x46>
    else
        return -1;
 800a292:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a296:	4618      	mov	r0, r3
 800a298:	3708      	adds	r7, #8
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	20000124 	.word	0x20000124

0800a2a4 <BNO055_delay_msek>:

void BNO055_delay_msek(u32 msek)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b082      	sub	sp, #8
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  HAL_Delay(msek);
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f7f7 fa9b 	bl	80017e8 <HAL_Delay>
}
 800a2b2:	bf00      	nop
 800a2b4:	3708      	adds	r7, #8
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
	...

0800a2bc <imu_bno055_init>:


IMU_BNO055_Status_t imu_bno055_init(void)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	af00      	add	r7, sp, #0
  // Assign platform-specific read/write/delay functions
  bno055.bus_read     = BNO055_I2C_bus_read;
 800a2c0:	4b29      	ldr	r3, [pc, #164]	@ (800a368 <imu_bno055_init+0xac>)
 800a2c2:	4a2a      	ldr	r2, [pc, #168]	@ (800a36c <imu_bno055_init+0xb0>)
 800a2c4:	611a      	str	r2, [r3, #16]
  bno055.bus_write    = BNO055_I2C_bus_write;
 800a2c6:	4b28      	ldr	r3, [pc, #160]	@ (800a368 <imu_bno055_init+0xac>)
 800a2c8:	4a29      	ldr	r2, [pc, #164]	@ (800a370 <imu_bno055_init+0xb4>)
 800a2ca:	60da      	str	r2, [r3, #12]
  bno055.delay_msec   = BNO055_delay_msek;
 800a2cc:	4b26      	ldr	r3, [pc, #152]	@ (800a368 <imu_bno055_init+0xac>)
 800a2ce:	4a29      	ldr	r2, [pc, #164]	@ (800a374 <imu_bno055_init+0xb8>)
 800a2d0:	615a      	str	r2, [r3, #20]
  bno055.dev_addr     = BNO055_I2C_ADDR1;  // 0x28 << 1 if needed
 800a2d2:	4b25      	ldr	r3, [pc, #148]	@ (800a368 <imu_bno055_init+0xac>)
 800a2d4:	2228      	movs	r2, #40	@ 0x28
 800a2d6:	725a      	strb	r2, [r3, #9]

  // Initialize sensor
  if (bno055_init(&bno055) != BNO055_SUCCESS)
 800a2d8:	4823      	ldr	r0, [pc, #140]	@ (800a368 <imu_bno055_init+0xac>)
 800a2da:	f7fd fc3b 	bl	8007b54 <bno055_init>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d001      	beq.n	800a2e8 <imu_bno055_init+0x2c>
      return IMU_BNO055_ERROR;
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	e03d      	b.n	800a364 <imu_bno055_init+0xa8>
  bno055.delay_msec(1500);
 800a2e8:	4b1f      	ldr	r3, [pc, #124]	@ (800a368 <imu_bno055_init+0xac>)
 800a2ea:	695b      	ldr	r3, [r3, #20]
 800a2ec:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800a2f0:	4798      	blx	r3

  bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 800a2f2:	2000      	movs	r0, #0
 800a2f4:	f7fd ff8c 	bl	8008210 <bno055_set_operation_mode>
  bno055.delay_msec(25);
 800a2f8:	4b1b      	ldr	r3, [pc, #108]	@ (800a368 <imu_bno055_init+0xac>)
 800a2fa:	695b      	ldr	r3, [r3, #20]
 800a2fc:	2019      	movs	r0, #25
 800a2fe:	4798      	blx	r3

  bno055_set_power_mode(BNO055_POWER_MODE_NORMAL);
 800a300:	2000      	movs	r0, #0
 800a302:	f7fe f84d 	bl	80083a0 <bno055_set_power_mode>

  // reset all previous int signal
  bno055_set_intr_rst(ENABLED);
 800a306:	2001      	movs	r0, #1
 800a308:	f7fe f8c4 	bl	8008494 <bno055_set_intr_rst>

  bno055_set_accel_unit(BNO055_ACCEL_UNIT_MSQ);
 800a30c:	2000      	movs	r0, #0
 800a30e:	f7fd fd4f 	bl	8007db0 <bno055_set_accel_unit>
  bno055_set_gyro_unit(BNO055_GYRO_UNIT_DPS);
 800a312:	2000      	movs	r0, #0
 800a314:	f7fd fdc6 	bl	8007ea4 <bno055_set_gyro_unit>
  bno055_set_euler_unit(BNO055_EULER_UNIT_DEG);
 800a318:	2000      	movs	r0, #0
 800a31a:	f7fd fe3f 	bl	8007f9c <bno055_set_euler_unit>
  bno055_set_temp_unit(BNO055_TEMP_UNIT_CELSIUS);
 800a31e:	2000      	movs	r0, #0
 800a320:	f7fd feb8 	bl	8008094 <bno055_set_temp_unit>

  bno055_set_accel_any_motion_no_motion_axis_enable(0, ENABLED);
 800a324:	2101      	movs	r1, #1
 800a326:	2000      	movs	r0, #0
 800a328:	f7fe fade 	bl	80088e8 <bno055_set_accel_any_motion_no_motion_axis_enable>
  bno055_set_accel_any_motion_no_motion_axis_enable(1, ENABLED);
 800a32c:	2101      	movs	r1, #1
 800a32e:	2001      	movs	r0, #1
 800a330:	f7fe fada 	bl	80088e8 <bno055_set_accel_any_motion_no_motion_axis_enable>
  bno055_set_accel_any_motion_no_motion_axis_enable(2, ENABLED);
 800a334:	2101      	movs	r1, #1
 800a336:	2002      	movs	r0, #2
 800a338:	f7fe fad6 	bl	80088e8 <bno055_set_accel_any_motion_no_motion_axis_enable>

  bno055_set_accel_any_motion_thres(35);
 800a33c:	2023      	movs	r0, #35	@ 0x23
 800a33e:	f7fe f9cf 	bl	80086e0 <bno055_set_accel_any_motion_thres>
  bno055_set_accel_any_motion_durn(1);
 800a342:	2001      	movs	r0, #1
 800a344:	f7fe fa48 	bl	80087d8 <bno055_set_accel_any_motion_durn>
  bno055_set_intr_accel_any_motion(ENABLED);
 800a348:	2001      	movs	r0, #1
 800a34a:	f7fe f967 	bl	800861c <bno055_set_intr_accel_any_motion>
  bno055_set_intr_mask_accel_any_motion(ENABLED);
 800a34e:	2001      	movs	r0, #1
 800a350:	f7fe f902 	bl	8008558 <bno055_set_intr_mask_accel_any_motion>

  bno055_set_operation_mode(BNO055_OPERATION_MODE_AMG);
 800a354:	2007      	movs	r0, #7
 800a356:	f7fd ff5b 	bl	8008210 <bno055_set_operation_mode>
  bno055.delay_msec(25);
 800a35a:	4b03      	ldr	r3, [pc, #12]	@ (800a368 <imu_bno055_init+0xac>)
 800a35c:	695b      	ldr	r3, [r3, #20]
 800a35e:	2019      	movs	r0, #25
 800a360:	4798      	blx	r3

  return IMU_BNO055_OK;
 800a362:	2300      	movs	r3, #0

}
 800a364:	4618      	mov	r0, r3
 800a366:	bd80      	pop	{r7, pc}
 800a368:	200003fc 	.word	0x200003fc
 800a36c:	0800a251 	.word	0x0800a251
 800a370:	0800a1fd 	.word	0x0800a1fd
 800a374:	0800a2a5 	.word	0x0800a2a5

0800a378 <soundEffects_init>:
uint32_t gRecordingSize           = 0;
uint32_t gPlayedSize              = 0;
uint16_t gSamples[1000];

SoundEffects_Config_t* soundEffects_init(I2S_HandleTypeDef* hi2s, GPIO_TypeDef* pGpioPort, uint16_t gpioPin)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b086      	sub	sp, #24
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	60b9      	str	r1, [r7, #8]
 800a382:	4613      	mov	r3, r2
 800a384:	80fb      	strh	r3, [r7, #6]
  SoundEffects_Config_t* pConfig = malloc(sizeof(SoundEffects_Config_t));
 800a386:	2014      	movs	r0, #20
 800a388:	f005 f9ae 	bl	800f6e8 <malloc>
 800a38c:	4603      	mov	r3, r0
 800a38e:	617b      	str	r3, [r7, #20]
  pConfig->hi2s = hi2s;
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	68fa      	ldr	r2, [r7, #12]
 800a394:	601a      	str	r2, [r3, #0]
  pConfig->pMuteSwitchGpioPort = pGpioPort;
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	68ba      	ldr	r2, [r7, #8]
 800a39a:	605a      	str	r2, [r3, #4]
  pConfig->pMuteSwitchGpioPin  = gpioPin;
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	88fa      	ldrh	r2, [r7, #6]
 800a3a0:	811a      	strh	r2, [r3, #8]
  return pConfig;
 800a3a2:	697b      	ldr	r3, [r7, #20]
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3718      	adds	r7, #24
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <HAL_I2S_TxCpltCallback>:

return 1;
}

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b083      	sub	sp, #12
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
    extern bool gIsPlaying;
    extern uint32_t gPlayedSize, gRecordingSize;

    gPlayedSize += 1000;
 800a3b4:	4b0b      	ldr	r3, [pc, #44]	@ (800a3e4 <HAL_I2S_TxCpltCallback+0x38>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800a3bc:	4a09      	ldr	r2, [pc, #36]	@ (800a3e4 <HAL_I2S_TxCpltCallback+0x38>)
 800a3be:	6013      	str	r3, [r2, #0]

    if (gPlayedSize >= gRecordingSize)
 800a3c0:	4b08      	ldr	r3, [pc, #32]	@ (800a3e4 <HAL_I2S_TxCpltCallback+0x38>)
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	4b08      	ldr	r3, [pc, #32]	@ (800a3e8 <HAL_I2S_TxCpltCallback+0x3c>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d302      	bcc.n	800a3d2 <HAL_I2S_TxCpltCallback+0x26>
    {
        gIsPlaying = false;
 800a3cc:	4b07      	ldr	r3, [pc, #28]	@ (800a3ec <HAL_I2S_TxCpltCallback+0x40>)
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	701a      	strb	r2, [r3, #0]
    }

    gCallbackResult = FULL_COMPLETED;
 800a3d2:	4b07      	ldr	r3, [pc, #28]	@ (800a3f0 <HAL_I2S_TxCpltCallback+0x44>)
 800a3d4:	2202      	movs	r2, #2
 800a3d6:	701a      	strb	r2, [r3, #0]
}
 800a3d8:	bf00      	nop
 800a3da:	370c      	adds	r7, #12
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr
 800a3e4:	20000424 	.word	0x20000424
 800a3e8:	20000420 	.word	0x20000420
 800a3ec:	20000114 	.word	0x20000114
 800a3f0:	2000041e 	.word	0x2000041e

0800a3f4 <storageDevice_init>:
//Private Function Definitions
StorageDevice_Status_t storageDevice_closeFile(StorageDevice_Config_t * pConfig);


StorageDevice_Config_t* storageDevice_init(SPI_HandleTypeDef * hspi)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  StorageDevice_Config_t* pConfig = malloc(sizeof(StorageDevice_Config_t));
 800a3fc:	f240 407c 	movw	r0, #1148	@ 0x47c
 800a400:	f005 f972 	bl	800f6e8 <malloc>
 800a404:	4603      	mov	r3, r0
 800a406:	60fb      	str	r3, [r7, #12]
  pConfig->hspi = hspi;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	687a      	ldr	r2, [r7, #4]
 800a40c:	601a      	str	r2, [r3, #0]

//  storageDevice_demountDrive(pConfig);

  storageDevice_mountDrive(pConfig);
 800a40e:	68f8      	ldr	r0, [r7, #12]
 800a410:	f000 f806 	bl	800a420 <storageDevice_mountDrive>

  return pConfig;
 800a414:	68fb      	ldr	r3, [r7, #12]
}
 800a416:	4618      	mov	r0, r3
 800a418:	3710      	adds	r7, #16
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
	...

0800a420 <storageDevice_mountDrive>:
  return isSuccess;

}

StorageDevice_Status_t storageDevice_mountDrive(StorageDevice_Config_t * pConfig)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b084      	sub	sp, #16
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  StorageDevice_Status_t isSuccess = true;
 800a428:	2301      	movs	r3, #1
 800a42a:	73fb      	strb	r3, [r7, #15]

  //Recommended delay while SD Card Boots
  HAL_Delay(100);
 800a42c:	2064      	movs	r0, #100	@ 0x64
 800a42e:	f7f7 f9db 	bl	80017e8 <HAL_Delay>

  pConfig->fres = f_mount(&pConfig->FatFs, "", 1); //1=mount now
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	3304      	adds	r3, #4
 800a436:	2201      	movs	r2, #1
 800a438:	4922      	ldr	r1, [pc, #136]	@ (800a4c4 <storageDevice_mountDrive+0xa4>)
 800a43a:	4618      	mov	r0, r3
 800a43c:	f001 fbc8 	bl	800bbd0 <f_mount>
 800a440:	4603      	mov	r3, r0
 800a442:	461a      	mov	r2, r3
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f883 2468 	strb.w	r2, [r3, #1128]	@ 0x468
  if (pConfig->fres != FR_OK) {
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f893 3468 	ldrb.w	r3, [r3, #1128]	@ 0x468
 800a450:	2b00      	cmp	r3, #0
 800a452:	d001      	beq.n	800a458 <storageDevice_mountDrive+0x38>
    isSuccess = 0;
 800a454:	2300      	movs	r3, #0
 800a456:	73fb      	strb	r3, [r7, #15]
  //while(1);
  }

  pConfig->fres = f_getfree("", &pConfig->free_clusters, &pConfig->getFreeFs);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f203 416c 	addw	r1, r3, #1132	@ 0x46c
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 800a464:	461a      	mov	r2, r3
 800a466:	4817      	ldr	r0, [pc, #92]	@ (800a4c4 <storageDevice_mountDrive+0xa4>)
 800a468:	f001 fc16 	bl	800bc98 <f_getfree>
 800a46c:	4603      	mov	r3, r0
 800a46e:	461a      	mov	r2, r3
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f883 2468 	strb.w	r2, [r3, #1128]	@ 0x468
  if (pConfig->fres != FR_OK) {
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f893 3468 	ldrb.w	r3, [r3, #1128]	@ 0x468
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d001      	beq.n	800a484 <storageDevice_mountDrive+0x64>
    isSuccess = 0;
 800a480:	2300      	movs	r3, #0
 800a482:	73fb      	strb	r3, [r7, #15]
  //while(1);
  }

  pConfig->total_sectors = (pConfig->getFreeFs->n_fatent - 2) * pConfig->getFreeFs->csize;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8d3 3478 	ldr.w	r3, [r3, #1144]	@ 0x478
 800a48a:	699b      	ldr	r3, [r3, #24]
 800a48c:	3b02      	subs	r3, #2
 800a48e:	687a      	ldr	r2, [r7, #4]
 800a490:	f8d2 2478 	ldr.w	r2, [r2, #1144]	@ 0x478
 800a494:	8952      	ldrh	r2, [r2, #10]
 800a496:	fb03 f202 	mul.w	r2, r3, r2
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f8c3 2474 	str.w	r2, [r3, #1140]	@ 0x474
  pConfig->free_sectors = pConfig->free_clusters * pConfig->getFreeFs->csize;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8d3 346c 	ldr.w	r3, [r3, #1132]	@ 0x46c
 800a4a6:	687a      	ldr	r2, [r7, #4]
 800a4a8:	f8d2 2478 	ldr.w	r2, [r2, #1144]	@ 0x478
 800a4ac:	8952      	ldrh	r2, [r2, #10]
 800a4ae:	fb03 f202 	mul.w	r2, r3, r2
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f8c3 2470 	str.w	r2, [r3, #1136]	@ 0x470

  return isSuccess;
 800a4b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3710      	adds	r7, #16
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	08010b84 	.word	0x08010b84

0800a4c8 <timeCircuit_control_init>:
    uint8_t * currentMinutes);


TimeCircuit_Control_Config_t* timeCircuit_control_init(I2C_HandleTypeDef* const hi2c_display, I2C_HandleTypeDef* const hi2c_rtc,
    RTC_HandleTypeDef* hrtc, SPI_HandleTypeDef* hspi, I2S_HandleTypeDef* hi2s)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b086      	sub	sp, #24
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	60f8      	str	r0, [r7, #12]
 800a4d0:	60b9      	str	r1, [r7, #8]
 800a4d2:	607a      	str	r2, [r7, #4]
 800a4d4:	603b      	str	r3, [r7, #0]
  TimeCircuit_Control_Config_t* pConfig = malloc(sizeof(TimeCircuit_Control_Config_t));
 800a4d6:	2054      	movs	r0, #84	@ 0x54
 800a4d8:	f005 f906 	bl	800f6e8 <malloc>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	617b      	str	r3, [r7, #20]
  pConfig->hi2c_display = hi2c_display;
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	68fa      	ldr	r2, [r7, #12]
 800a4e4:	601a      	str	r2, [r3, #0]
  pConfig->hi2c_rtc = hi2c_rtc;
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	68ba      	ldr	r2, [r7, #8]
 800a4ea:	605a      	str	r2, [r3, #4]
  pConfig->hrtc = hrtc;
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	609a      	str	r2, [r3, #8]
  pConfig->hspi = hspi;
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	683a      	ldr	r2, [r7, #0]
 800a4f6:	60da      	str	r2, [r3, #12]
  pConfig->hi2s = hi2s;
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	6a3a      	ldr	r2, [r7, #32]
 800a4fc:	611a      	str	r2, [r3, #16]


  //Initialise the time circuit displays
  pConfig->pDestinationTime  = dateTime_display_init(pConfig->hi2c_display, DESTINATION_DISPLAY_I2C_ADDRESS);
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	2171      	movs	r1, #113	@ 0x71
 800a504:	4618      	mov	r0, r3
 800a506:	f7fe ff5d 	bl	80093c4 <dateTime_display_init>
 800a50a:	4602      	mov	r2, r0
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	615a      	str	r2, [r3, #20]
  pConfig->pPresentTime      = dateTime_display_init(pConfig->hi2c_display, PRESENT_DISPLAY_I2C_ADDRESS);
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	2172      	movs	r1, #114	@ 0x72
 800a516:	4618      	mov	r0, r3
 800a518:	f7fe ff54 	bl	80093c4 <dateTime_display_init>
 800a51c:	4602      	mov	r2, r0
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	619a      	str	r2, [r3, #24]
  pConfig->pLastDepartedTime = dateTime_display_init(pConfig->hi2c_display, DEPARTED_DISPLAY_I2C_ADDRESS);
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	2174      	movs	r1, #116	@ 0x74
 800a528:	4618      	mov	r0, r3
 800a52a:	f7fe ff4b 	bl	80093c4 <dateTime_display_init>
 800a52e:	4602      	mov	r2, r0
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	61da      	str	r2, [r3, #28]


  //Initialise the time circuit keypad
  pConfig->pTimeCircuitKeypad = keypad3x4w_init(gKeypadPinConfig);
 800a534:	480a      	ldr	r0, [pc, #40]	@ (800a560 <timeCircuit_control_init+0x98>)
 800a536:	f7fe fe9a 	bl	800926e <keypad3x4w_init>
 800a53a:	4602      	mov	r2, r0
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	621a      	str	r2, [r3, #32]
  //Play TC Start Up Sound
//  char filename[] = "locked.wav";
//  osMessageQueuePut(soundQueueHandle, &filename, 0, 0);

  //Set displays to last stored values or defaults
  timeCircuit_control_setDefaultDateTimes(pConfig);
 800a540:	6978      	ldr	r0, [r7, #20]
 800a542:	f000 f845 	bl	800a5d0 <timeCircuit_control_setDefaultDateTimes>

  //Update display with retrieved date times
  timeCircuit_control_updateDisplays(pConfig);
 800a546:	6978      	ldr	r0, [r7, #20]
 800a548:	f000 f880 	bl	800a64c <timeCircuit_control_updateDisplays>
    //Update RTC with retrieved present date time
    timeCircuit_control_setRtcDateTime(pConfig);

  #elif defined(SET_EXTERNAL_RTC)
    //Initialise RTC
    DS3231_Init(pConfig->hi2c_rtc);
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	4618      	mov	r0, r3
 800a552:	f7fe fad1 	bl	8008af8 <DS3231_Init>

  #endif

  return pConfig;
 800a556:	697b      	ldr	r3, [r7, #20]
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3718      	adds	r7, #24
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	08010da0 	.word	0x08010da0

0800a564 <timeCircuit_control_clearDisplays>:
  free (pConfig);
  return 1;
}

TimeCircuit_Control_Status_t timeCircuit_control_clearDisplays(TimeCircuit_Control_Config_t* const pConfig)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = 1;
 800a56c:	2301      	movs	r3, #1
 800a56e:	73fb      	strb	r3, [r7, #15]

  isSuccess &= dateTime_clearDisplay(pConfig->pDestinationTime);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	695b      	ldr	r3, [r3, #20]
 800a574:	4618      	mov	r0, r3
 800a576:	f7ff f932 	bl	80097de <dateTime_clearDisplay>
 800a57a:	4603      	mov	r3, r0
 800a57c:	461a      	mov	r2, r3
 800a57e:	7bfb      	ldrb	r3, [r7, #15]
 800a580:	4013      	ands	r3, r2
 800a582:	2b00      	cmp	r3, #0
 800a584:	bf14      	ite	ne
 800a586:	2301      	movne	r3, #1
 800a588:	2300      	moveq	r3, #0
 800a58a:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_clearDisplay(pConfig->pPresentTime);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	699b      	ldr	r3, [r3, #24]
 800a590:	4618      	mov	r0, r3
 800a592:	f7ff f924 	bl	80097de <dateTime_clearDisplay>
 800a596:	4603      	mov	r3, r0
 800a598:	461a      	mov	r2, r3
 800a59a:	7bfb      	ldrb	r3, [r7, #15]
 800a59c:	4013      	ands	r3, r2
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	bf14      	ite	ne
 800a5a2:	2301      	movne	r3, #1
 800a5a4:	2300      	moveq	r3, #0
 800a5a6:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_clearDisplay(pConfig->pLastDepartedTime);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	69db      	ldr	r3, [r3, #28]
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f7ff f916 	bl	80097de <dateTime_clearDisplay>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	461a      	mov	r2, r3
 800a5b6:	7bfb      	ldrb	r3, [r7, #15]
 800a5b8:	4013      	ands	r3, r2
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	bf14      	ite	ne
 800a5be:	2301      	movne	r3, #1
 800a5c0:	2300      	moveq	r3, #0
 800a5c2:	73fb      	strb	r3, [r7, #15]

  return isSuccess;
 800a5c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3710      	adds	r7, #16
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
	...

0800a5d0 <timeCircuit_control_setDefaultDateTimes>:

TimeCircuit_Control_Status_t timeCircuit_control_setDefaultDateTimes(TimeCircuit_Control_Config_t* const pConfig)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = 1;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	73fb      	strb	r3, [r7, #15]

  isSuccess &= dateTime_setDisplayData(pConfig->pDestinationTime, gDefaultDestinationTime);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	695b      	ldr	r3, [r3, #20]
 800a5e0:	4917      	ldr	r1, [pc, #92]	@ (800a640 <timeCircuit_control_setDefaultDateTimes+0x70>)
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f7ff f83a 	bl	800965c <dateTime_setDisplayData>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	7bfb      	ldrb	r3, [r7, #15]
 800a5ee:	4013      	ands	r3, r2
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	bf14      	ite	ne
 800a5f4:	2301      	movne	r3, #1
 800a5f6:	2300      	moveq	r3, #0
 800a5f8:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_setDisplayData(pConfig->pPresentTime, gDefaultPresentTime);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	699b      	ldr	r3, [r3, #24]
 800a5fe:	4911      	ldr	r1, [pc, #68]	@ (800a644 <timeCircuit_control_setDefaultDateTimes+0x74>)
 800a600:	4618      	mov	r0, r3
 800a602:	f7ff f82b 	bl	800965c <dateTime_setDisplayData>
 800a606:	4603      	mov	r3, r0
 800a608:	461a      	mov	r2, r3
 800a60a:	7bfb      	ldrb	r3, [r7, #15]
 800a60c:	4013      	ands	r3, r2
 800a60e:	2b00      	cmp	r3, #0
 800a610:	bf14      	ite	ne
 800a612:	2301      	movne	r3, #1
 800a614:	2300      	moveq	r3, #0
 800a616:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_setDisplayData(pConfig->pLastDepartedTime, gDefaultLastDepartedTime);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	69db      	ldr	r3, [r3, #28]
 800a61c:	490a      	ldr	r1, [pc, #40]	@ (800a648 <timeCircuit_control_setDefaultDateTimes+0x78>)
 800a61e:	4618      	mov	r0, r3
 800a620:	f7ff f81c 	bl	800965c <dateTime_setDisplayData>
 800a624:	4603      	mov	r3, r0
 800a626:	461a      	mov	r2, r3
 800a628:	7bfb      	ldrb	r3, [r7, #15]
 800a62a:	4013      	ands	r3, r2
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	bf14      	ite	ne
 800a630:	2301      	movne	r3, #1
 800a632:	2300      	moveq	r3, #0
 800a634:	73fb      	strb	r3, [r7, #15]

  return isSuccess;
 800a636:	7bfb      	ldrb	r3, [r7, #15]
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3710      	adds	r7, #16
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}
 800a640:	08010d50 	.word	0x08010d50
 800a644:	08010d5c 	.word	0x08010d5c
 800a648:	08010d68 	.word	0x08010d68

0800a64c <timeCircuit_control_updateDisplays>:

TimeCircuit_Control_Status_t timeCircuit_control_updateDisplays(TimeCircuit_Control_Config_t* const pConfig)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = false;
 800a654:	2300      	movs	r3, #0
 800a656:	73fb      	strb	r3, [r7, #15]

  isSuccess = dateTime_updateDisplay(pConfig->pDestinationTime);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	695b      	ldr	r3, [r3, #20]
 800a65c:	4618      	mov	r0, r3
 800a65e:	f7ff fc5b 	bl	8009f18 <dateTime_updateDisplay>
 800a662:	4603      	mov	r3, r0
 800a664:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_updateDisplay(pConfig->pPresentTime);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	699b      	ldr	r3, [r3, #24]
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7ff fc54 	bl	8009f18 <dateTime_updateDisplay>
 800a670:	4603      	mov	r3, r0
 800a672:	461a      	mov	r2, r3
 800a674:	7bfb      	ldrb	r3, [r7, #15]
 800a676:	4013      	ands	r3, r2
 800a678:	2b00      	cmp	r3, #0
 800a67a:	bf14      	ite	ne
 800a67c:	2301      	movne	r3, #1
 800a67e:	2300      	moveq	r3, #0
 800a680:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_updateDisplay(pConfig->pLastDepartedTime);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	69db      	ldr	r3, [r3, #28]
 800a686:	4618      	mov	r0, r3
 800a688:	f7ff fc46 	bl	8009f18 <dateTime_updateDisplay>
 800a68c:	4603      	mov	r3, r0
 800a68e:	461a      	mov	r2, r3
 800a690:	7bfb      	ldrb	r3, [r7, #15]
 800a692:	4013      	ands	r3, r2
 800a694:	2b00      	cmp	r3, #0
 800a696:	bf14      	ite	ne
 800a698:	2301      	movne	r3, #1
 800a69a:	2300      	moveq	r3, #0
 800a69c:	73fb      	strb	r3, [r7, #15]

  return isSuccess;
 800a69e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3710      	adds	r7, #16
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}

0800a6a8 <timeCircuit_control_checkButtonActivation>:

TimeCircuit_Control_Status_t timeCircuit_control_checkButtonActivation(const bool* const isbuttonActivated,
    bool* hasButtonActivated, uint32_t* previousTimeMS, uint32_t debounceTime)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b086      	sub	sp, #24
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	60f8      	str	r0, [r7, #12]
 800a6b0:	60b9      	str	r1, [r7, #8]
 800a6b2:	607a      	str	r2, [r7, #4]
 800a6b4:	603b      	str	r3, [r7, #0]
  TimeCircuit_Control_Status_t hasStateChanged = 0;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	75fb      	strb	r3, [r7, #23]
  uint32_t currentTimeMS = HAL_GetTick();
 800a6ba:	f7f7 f889 	bl	80017d0 <HAL_GetTick>
 800a6be:	6138      	str	r0, [r7, #16]

  //Verify that the button state hasn't changed
  if (*isbuttonActivated != *hasButtonActivated)
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	781a      	ldrb	r2, [r3, #0]
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	781b      	ldrb	r3, [r3, #0]
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d00f      	beq.n	800a6ec <timeCircuit_control_checkButtonActivation+0x44>
  {
    //Filter out false positive button activations
    if ((currentTimeMS - *previousTimeMS) > debounceTime)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	693a      	ldr	r2, [r7, #16]
 800a6d2:	1ad3      	subs	r3, r2, r3
 800a6d4:	683a      	ldr	r2, [r7, #0]
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d208      	bcs.n	800a6ec <timeCircuit_control_checkButtonActivation+0x44>
    {
      *previousTimeMS = currentTimeMS;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	693a      	ldr	r2, [r7, #16]
 800a6de:	601a      	str	r2, [r3, #0]
      hasStateChanged = true;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	75fb      	strb	r3, [r7, #23]
      *hasButtonActivated = *isbuttonActivated;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	781a      	ldrb	r2, [r3, #0]
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	701a      	strb	r2, [r3, #0]
    }
  }
  return hasStateChanged;
 800a6ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3718      	adds	r7, #24
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}
	...

0800a6f8 <timeCircuit_control_readInputDateTime>:

TimeCircuit_Control_Status_t timeCircuit_control_readInputDateTime(TimeCircuit_Control_Config_t * const pConfig)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b0a2      	sub	sp, #136	@ 0x88
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = 1;
 800a700:	2301      	movs	r3, #1
 800a702:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  bool isButtonActivated                  = false;
 800a706:	2300      	movs	r3, #0
 800a708:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
  bool hasButtonStateChanged              = false;
 800a70c:	2300      	movs	r3, #0
 800a70e:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86

  static bool hasButtonActivated          = false;
  static uint32_t previousTime            = 0;


  isButtonActivated  = keypad3x4w_readKeypad(pConfig->pTimeCircuitKeypad, &pConfig->keypadInputValue);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6a1a      	ldr	r2, [r3, #32]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	3348      	adds	r3, #72	@ 0x48
 800a71a:	4619      	mov	r1, r3
 800a71c:	4610      	mov	r0, r2
 800a71e:	f7fe fde7 	bl	80092f0 <keypad3x4w_readKeypad>
 800a722:	4603      	mov	r3, r0
 800a724:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
  hasButtonStateChanged = timeCircuit_control_checkButtonActivation(&isButtonActivated, &hasButtonActivated,
 800a728:	f107 0085 	add.w	r0, r7, #133	@ 0x85
 800a72c:	2332      	movs	r3, #50	@ 0x32
 800a72e:	4a82      	ldr	r2, [pc, #520]	@ (800a938 <timeCircuit_control_readInputDateTime+0x240>)
 800a730:	4982      	ldr	r1, [pc, #520]	@ (800a93c <timeCircuit_control_readInputDateTime+0x244>)
 800a732:	f7ff ffb9 	bl	800a6a8 <timeCircuit_control_checkButtonActivation>
 800a736:	4603      	mov	r3, r0
 800a738:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
        &previousTime, KEYPAD_DEBOUNCE_TIME_MS);

  if ((hasButtonStateChanged == true) && (isButtonActivated == true))
 800a73c:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800a740:	2b00      	cmp	r3, #0
 800a742:	f000 80e9 	beq.w	800a918 <timeCircuit_control_readInputDateTime+0x220>
 800a746:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	f000 80e4 	beq.w	800a918 <timeCircuit_control_readInputDateTime+0x220>
  {
    pConfig->keypadInput[pConfig->keypadInputCount] = pConfig->keypadInputValue;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800a756:	4619      	mov	r1, r3
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	440b      	add	r3, r1
 800a762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    pConfig->keypadInputCount++;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800a76c:	3301      	adds	r3, #1
 800a76e:	b2da      	uxtb	r2, r3
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    switch(pConfig->keypadInputValue)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800a77c:	2b09      	cmp	r3, #9
 800a77e:	f200 80cb 	bhi.w	800a918 <timeCircuit_control_readInputDateTime+0x220>
 800a782:	a201      	add	r2, pc, #4	@ (adr r2, 800a788 <timeCircuit_control_readInputDateTime+0x90>)
 800a784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a788:	0800a7b1 	.word	0x0800a7b1
 800a78c:	0800a7d5 	.word	0x0800a7d5
 800a790:	0800a7f9 	.word	0x0800a7f9
 800a794:	0800a81d 	.word	0x0800a81d
 800a798:	0800a841 	.word	0x0800a841
 800a79c:	0800a865 	.word	0x0800a865
 800a7a0:	0800a889 	.word	0x0800a889
 800a7a4:	0800a8ad 	.word	0x0800a8ad
 800a7a8:	0800a8d1 	.word	0x0800a8d1
 800a7ac:	0800a8f5 	.word	0x0800a8f5
    {
      case 0:
        char filename[] = "Dtmf-0.wav";
 800a7b0:	4a63      	ldr	r2, [pc, #396]	@ (800a940 <timeCircuit_control_readInputDateTime+0x248>)
 800a7b2:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800a7b6:	ca07      	ldmia	r2, {r0, r1, r2}
 800a7b8:	c303      	stmia	r3!, {r0, r1}
 800a7ba:	801a      	strh	r2, [r3, #0]
 800a7bc:	3302      	adds	r3, #2
 800a7be:	0c12      	lsrs	r2, r2, #16
 800a7c0:	701a      	strb	r2, [r3, #0]
        osMessageQueuePut(soundQueueHandle, &filename, 0, 0);
 800a7c2:	4b60      	ldr	r3, [pc, #384]	@ (800a944 <timeCircuit_control_readInputDateTime+0x24c>)
 800a7c4:	6818      	ldr	r0, [r3, #0]
 800a7c6:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	f001 fe3f 	bl	800c450 <osMessageQueuePut>
        break;
 800a7d2:	e0a1      	b.n	800a918 <timeCircuit_control_readInputDateTime+0x220>
      case 1:
        char filename1[] = "Dtmf-1.wav";
 800a7d4:	4a5c      	ldr	r2, [pc, #368]	@ (800a948 <timeCircuit_control_readInputDateTime+0x250>)
 800a7d6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800a7da:	ca07      	ldmia	r2, {r0, r1, r2}
 800a7dc:	c303      	stmia	r3!, {r0, r1}
 800a7de:	801a      	strh	r2, [r3, #0]
 800a7e0:	3302      	adds	r3, #2
 800a7e2:	0c12      	lsrs	r2, r2, #16
 800a7e4:	701a      	strb	r2, [r3, #0]
        osMessageQueuePut(soundQueueHandle, &filename1, 0, 0);
 800a7e6:	4b57      	ldr	r3, [pc, #348]	@ (800a944 <timeCircuit_control_readInputDateTime+0x24c>)
 800a7e8:	6818      	ldr	r0, [r3, #0]
 800a7ea:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	f001 fe2d 	bl	800c450 <osMessageQueuePut>
        break;
 800a7f6:	e08f      	b.n	800a918 <timeCircuit_control_readInputDateTime+0x220>
      case 2:
        char filename2[] = "Dtmf-2.wav";
 800a7f8:	4a54      	ldr	r2, [pc, #336]	@ (800a94c <timeCircuit_control_readInputDateTime+0x254>)
 800a7fa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800a7fe:	ca07      	ldmia	r2, {r0, r1, r2}
 800a800:	c303      	stmia	r3!, {r0, r1}
 800a802:	801a      	strh	r2, [r3, #0]
 800a804:	3302      	adds	r3, #2
 800a806:	0c12      	lsrs	r2, r2, #16
 800a808:	701a      	strb	r2, [r3, #0]
        osMessageQueuePut(soundQueueHandle, &filename2, 0, 0);
 800a80a:	4b4e      	ldr	r3, [pc, #312]	@ (800a944 <timeCircuit_control_readInputDateTime+0x24c>)
 800a80c:	6818      	ldr	r0, [r3, #0]
 800a80e:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 800a812:	2300      	movs	r3, #0
 800a814:	2200      	movs	r2, #0
 800a816:	f001 fe1b 	bl	800c450 <osMessageQueuePut>
        break;
 800a81a:	e07d      	b.n	800a918 <timeCircuit_control_readInputDateTime+0x220>
      case 3:
        char filename3[] = "Dtmf-3.wav";
 800a81c:	4a4c      	ldr	r2, [pc, #304]	@ (800a950 <timeCircuit_control_readInputDateTime+0x258>)
 800a81e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800a822:	ca07      	ldmia	r2, {r0, r1, r2}
 800a824:	c303      	stmia	r3!, {r0, r1}
 800a826:	801a      	strh	r2, [r3, #0]
 800a828:	3302      	adds	r3, #2
 800a82a:	0c12      	lsrs	r2, r2, #16
 800a82c:	701a      	strb	r2, [r3, #0]
        osMessageQueuePut(soundQueueHandle, &filename3, 0, 0);
 800a82e:	4b45      	ldr	r3, [pc, #276]	@ (800a944 <timeCircuit_control_readInputDateTime+0x24c>)
 800a830:	6818      	ldr	r0, [r3, #0]
 800a832:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 800a836:	2300      	movs	r3, #0
 800a838:	2200      	movs	r2, #0
 800a83a:	f001 fe09 	bl	800c450 <osMessageQueuePut>
        break;
 800a83e:	e06b      	b.n	800a918 <timeCircuit_control_readInputDateTime+0x220>
      case 4:
        char filename4[] = "Dtmf-4.wav";
 800a840:	4a44      	ldr	r2, [pc, #272]	@ (800a954 <timeCircuit_control_readInputDateTime+0x25c>)
 800a842:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800a846:	ca07      	ldmia	r2, {r0, r1, r2}
 800a848:	c303      	stmia	r3!, {r0, r1}
 800a84a:	801a      	strh	r2, [r3, #0]
 800a84c:	3302      	adds	r3, #2
 800a84e:	0c12      	lsrs	r2, r2, #16
 800a850:	701a      	strb	r2, [r3, #0]
        osMessageQueuePut(soundQueueHandle, &filename4, 0, 0);
 800a852:	4b3c      	ldr	r3, [pc, #240]	@ (800a944 <timeCircuit_control_readInputDateTime+0x24c>)
 800a854:	6818      	ldr	r0, [r3, #0]
 800a856:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800a85a:	2300      	movs	r3, #0
 800a85c:	2200      	movs	r2, #0
 800a85e:	f001 fdf7 	bl	800c450 <osMessageQueuePut>
        break;
 800a862:	e059      	b.n	800a918 <timeCircuit_control_readInputDateTime+0x220>
      case 5:
        char filename5[] = "Dtmf-5.wav";
 800a864:	4a3c      	ldr	r2, [pc, #240]	@ (800a958 <timeCircuit_control_readInputDateTime+0x260>)
 800a866:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800a86a:	ca07      	ldmia	r2, {r0, r1, r2}
 800a86c:	c303      	stmia	r3!, {r0, r1}
 800a86e:	801a      	strh	r2, [r3, #0]
 800a870:	3302      	adds	r3, #2
 800a872:	0c12      	lsrs	r2, r2, #16
 800a874:	701a      	strb	r2, [r3, #0]
        osMessageQueuePut(soundQueueHandle, &filename5, 0, 0);
 800a876:	4b33      	ldr	r3, [pc, #204]	@ (800a944 <timeCircuit_control_readInputDateTime+0x24c>)
 800a878:	6818      	ldr	r0, [r3, #0]
 800a87a:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800a87e:	2300      	movs	r3, #0
 800a880:	2200      	movs	r2, #0
 800a882:	f001 fde5 	bl	800c450 <osMessageQueuePut>
        break;
 800a886:	e047      	b.n	800a918 <timeCircuit_control_readInputDateTime+0x220>
      case 6:
        char filename6[] = "Dtmf-6.wav";
 800a888:	4a34      	ldr	r2, [pc, #208]	@ (800a95c <timeCircuit_control_readInputDateTime+0x264>)
 800a88a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a88e:	ca07      	ldmia	r2, {r0, r1, r2}
 800a890:	c303      	stmia	r3!, {r0, r1}
 800a892:	801a      	strh	r2, [r3, #0]
 800a894:	3302      	adds	r3, #2
 800a896:	0c12      	lsrs	r2, r2, #16
 800a898:	701a      	strb	r2, [r3, #0]
        osMessageQueuePut(soundQueueHandle, &filename6, 0, 0);
 800a89a:	4b2a      	ldr	r3, [pc, #168]	@ (800a944 <timeCircuit_control_readInputDateTime+0x24c>)
 800a89c:	6818      	ldr	r0, [r3, #0]
 800a89e:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	f001 fdd3 	bl	800c450 <osMessageQueuePut>
        break;
 800a8aa:	e035      	b.n	800a918 <timeCircuit_control_readInputDateTime+0x220>
      case 7:
        char filename7[] = "Dtmf-7.wav";
 800a8ac:	4a2c      	ldr	r2, [pc, #176]	@ (800a960 <timeCircuit_control_readInputDateTime+0x268>)
 800a8ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a8b2:	ca07      	ldmia	r2, {r0, r1, r2}
 800a8b4:	c303      	stmia	r3!, {r0, r1}
 800a8b6:	801a      	strh	r2, [r3, #0]
 800a8b8:	3302      	adds	r3, #2
 800a8ba:	0c12      	lsrs	r2, r2, #16
 800a8bc:	701a      	strb	r2, [r3, #0]
        osMessageQueuePut(soundQueueHandle, &filename7, 0, 0);
 800a8be:	4b21      	ldr	r3, [pc, #132]	@ (800a944 <timeCircuit_control_readInputDateTime+0x24c>)
 800a8c0:	6818      	ldr	r0, [r3, #0]
 800a8c2:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	f001 fdc1 	bl	800c450 <osMessageQueuePut>
        break;
 800a8ce:	e023      	b.n	800a918 <timeCircuit_control_readInputDateTime+0x220>
      case 8:
        char filename8[] = "Dtmf-8.wav";
 800a8d0:	4a24      	ldr	r2, [pc, #144]	@ (800a964 <timeCircuit_control_readInputDateTime+0x26c>)
 800a8d2:	f107 0318 	add.w	r3, r7, #24
 800a8d6:	ca07      	ldmia	r2, {r0, r1, r2}
 800a8d8:	c303      	stmia	r3!, {r0, r1}
 800a8da:	801a      	strh	r2, [r3, #0]
 800a8dc:	3302      	adds	r3, #2
 800a8de:	0c12      	lsrs	r2, r2, #16
 800a8e0:	701a      	strb	r2, [r3, #0]
        osMessageQueuePut(soundQueueHandle, &filename8, 0, 0);
 800a8e2:	4b18      	ldr	r3, [pc, #96]	@ (800a944 <timeCircuit_control_readInputDateTime+0x24c>)
 800a8e4:	6818      	ldr	r0, [r3, #0]
 800a8e6:	f107 0118 	add.w	r1, r7, #24
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	f001 fdaf 	bl	800c450 <osMessageQueuePut>
        break;
 800a8f2:	e011      	b.n	800a918 <timeCircuit_control_readInputDateTime+0x220>
      case 9:
        char filename9[] = "Dtmf-9.wav";
 800a8f4:	4a1c      	ldr	r2, [pc, #112]	@ (800a968 <timeCircuit_control_readInputDateTime+0x270>)
 800a8f6:	f107 030c 	add.w	r3, r7, #12
 800a8fa:	ca07      	ldmia	r2, {r0, r1, r2}
 800a8fc:	c303      	stmia	r3!, {r0, r1}
 800a8fe:	801a      	strh	r2, [r3, #0]
 800a900:	3302      	adds	r3, #2
 800a902:	0c12      	lsrs	r2, r2, #16
 800a904:	701a      	strb	r2, [r3, #0]
        osMessageQueuePut(soundQueueHandle, &filename9, 0, 0);
 800a906:	4b0f      	ldr	r3, [pc, #60]	@ (800a944 <timeCircuit_control_readInputDateTime+0x24c>)
 800a908:	6818      	ldr	r0, [r3, #0]
 800a90a:	f107 010c 	add.w	r1, r7, #12
 800a90e:	2300      	movs	r3, #0
 800a910:	2200      	movs	r2, #0
 800a912:	f001 fd9d 	bl	800c450 <osMessageQueuePut>
        break;
 800a916:	bf00      	nop

    }
  }

  if (pConfig->keypadInputCount >= 12)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800a91e:	2b0b      	cmp	r3, #11
 800a920:	d903      	bls.n	800a92a <timeCircuit_control_readInputDateTime+0x232>
  {
    pConfig->keypadInputCount = 0;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2200      	movs	r2, #0
 800a926:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
  }

  return isSuccess;
 800a92a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3788      	adds	r7, #136	@ 0x88
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	2000042c 	.word	0x2000042c
 800a93c:	20000428 	.word	0x20000428
 800a940:	08010b88 	.word	0x08010b88
 800a944:	20000110 	.word	0x20000110
 800a948:	08010b94 	.word	0x08010b94
 800a94c:	08010ba0 	.word	0x08010ba0
 800a950:	08010bac 	.word	0x08010bac
 800a954:	08010bb8 	.word	0x08010bb8
 800a958:	08010bc4 	.word	0x08010bc4
 800a95c:	08010bd0 	.word	0x08010bd0
 800a960:	08010bdc 	.word	0x08010bdc
 800a964:	08010be8 	.word	0x08010be8
 800a968:	08010bf4 	.word	0x08010bf4

0800a96c <timeCircuit_control_getRtcDateTime>:
}


#elif defined(SET_EXTERNAL_RTC)
TimeCircuit_Control_Status_t timeCircuit_control_getRtcDateTime(TimeCircuit_Control_Config_t * const pConfig)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b084      	sub	sp, #16
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = 1;
 800a974:	2301      	movs	r3, #1
 800a976:	73fb      	strb	r3, [r7, #15]

  //Retrieve RTC Date Time Data
  pConfig->hRtcTime.Hours   = DS3231_GetHour();
 800a978:	f7fe f9ec 	bl	8008d54 <DS3231_GetHour>
 800a97c:	4603      	mov	r3, r0
 800a97e:	461a      	mov	r2, r3
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  pConfig->hRtcTime.Minutes = DS3231_GetMinute();
 800a986:	f7fe f9f1 	bl	8008d6c <DS3231_GetMinute>
 800a98a:	4603      	mov	r3, r0
 800a98c:	461a      	mov	r2, r3
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  pConfig->hRtcTime.Seconds = DS3231_GetSecond();
 800a994:	f7fe f9f6 	bl	8008d84 <DS3231_GetSecond>
 800a998:	4603      	mov	r3, r0
 800a99a:	461a      	mov	r2, r3
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pConfig->hRtcDate.Date    = DS3231_GetDate();
 800a9a2:	f7fe f994 	bl	8008cce <DS3231_GetDate>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	461a      	mov	r2, r3
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
  pConfig->hRtcDate.Month   = DS3231_GetMonth();
 800a9b0:	f7fe f999 	bl	8008ce6 <DS3231_GetMonth>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  pConfig->hRtcDate.Year    = DS3231_GetYear();
 800a9be:	f7fe f9a1 	bl	8008d04 <DS3231_GetYear>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	b2da      	uxtb	r2, r3
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b

  return isSuccess;
 800a9cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3710      	adds	r7, #16
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}

0800a9d6 <timeCircuit_control_setRtcDateTime>:

TimeCircuit_Control_Status_t timeCircuit_control_setRtcDateTime(TimeCircuit_Control_Config_t * const pConfig)
{
 800a9d6:	b580      	push	{r7, lr}
 800a9d8:	b084      	sub	sp, #16
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = 1;
 800a9de:	2301      	movs	r3, #1
 800a9e0:	73fb      	strb	r3, [r7, #15]

  //Retrieve default RTC date time data
  isSuccess &= timeCircuit_control_getRtcDateTime(pConfig);
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f7ff ffc2 	bl	800a96c <timeCircuit_control_getRtcDateTime>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	7bfb      	ldrb	r3, [r7, #15]
 800a9ee:	4013      	ands	r3, r2
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	bf14      	ite	ne
 800a9f4:	2301      	movne	r3, #1
 800a9f6:	2300      	moveq	r3, #0
 800a9f8:	73fb      	strb	r3, [r7, #15]

  //Get present date time for RTC date time
  isSuccess &= dateTime_getRtcDateTimeData(pConfig->pPresentTime, &pConfig->hRtcDate, &pConfig->hRtcTime);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6998      	ldr	r0, [r3, #24]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	3324      	adds	r3, #36	@ 0x24
 800aa08:	461a      	mov	r2, r3
 800aa0a:	f7fe fe74 	bl	80096f6 <dateTime_getRtcDateTimeData>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	461a      	mov	r2, r3
 800aa12:	7bfb      	ldrb	r3, [r7, #15]
 800aa14:	4013      	ands	r3, r2
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	bf14      	ite	ne
 800aa1a:	2301      	movne	r3, #1
 800aa1c:	2300      	moveq	r3, #0
 800aa1e:	73fb      	strb	r3, [r7, #15]

  //Set RTC with present date time data
  DS3231_SetFullTime(pConfig->hRtcTime.Hours,
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f893 0024 	ldrb.w	r0, [r3, #36]	@ 0x24
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f893 1025 	ldrb.w	r1, [r3, #37]	@ 0x25
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800aa32:	461a      	mov	r2, r3
 800aa34:	f7fe fa71 	bl	8008f1a <DS3231_SetFullTime>
                           pConfig->hRtcTime.Minutes,
                           pConfig->hRtcTime.Seconds);

  DS3231_SetFullDate(pConfig->hRtcDate.Date,
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f893 003a 	ldrb.w	r0, [r3, #58]	@ 0x3a
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f893 1039 	ldrb.w	r1, [r3, #57]	@ 0x39
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
                         pConfig->hRtcDate.Month,
                         pConfig->hRtcDate.WeekDay,
                         pConfig->hRtcDate.Year);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
  DS3231_SetFullDate(pConfig->hRtcDate.Date,
 800aa50:	f7fe fa7c 	bl	8008f4c <DS3231_SetFullDate>

  return isSuccess;
 800aa54:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3710      	adds	r7, #16
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}

0800aa5e <timeCircuit_control_getRTCMinute>:

TimeCircuit_Control_Status_t timeCircuit_control_getRTCMinute(TimeCircuit_Control_Config_t * const pConfig,
    uint8_t * currentMinutes)
{
 800aa5e:	b580      	push	{r7, lr}
 800aa60:	b084      	sub	sp, #16
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	6078      	str	r0, [r7, #4]
 800aa66:	6039      	str	r1, [r7, #0]
  TimeCircuit_Control_Status_t isSuccess = 1;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	73fb      	strb	r3, [r7, #15]

  *currentMinutes = DS3231_GetMinute();
 800aa6c:	f7fe f97e 	bl	8008d6c <DS3231_GetMinute>
 800aa70:	4603      	mov	r3, r0
 800aa72:	461a      	mov	r2, r3
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	701a      	strb	r2, [r3, #0]

  return isSuccess;
 800aa78:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3710      	adds	r7, #16
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}

0800aa82 <timeCircuit_control_saveDateTimes>:
#endif



TimeCircuit_Control_Status_t timeCircuit_control_saveDateTimes(TimeCircuit_Control_Config_t * const pConfig)
{
 800aa82:	b580      	push	{r7, lr}
 800aa84:	b090      	sub	sp, #64	@ 0x40
 800aa86:	af00      	add	r7, sp, #0
 800aa88:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = false;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

  char    writeBuf[(MAXIMUM_DATETIME_INPUT_CHARS * 3) + 1];
  uint8_t bufferCount = 0;
 800aa90:	2300      	movs	r3, #0
 800aa92:	75fb      	strb	r3, [r7, #23]
  DateTime_Display_Config_t* pDateTimeDisplays[] = {pConfig->pDestinationTime, pConfig->pPresentTime, pConfig->pLastDepartedTime};
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	695b      	ldr	r3, [r3, #20]
 800aa98:	60bb      	str	r3, [r7, #8]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	699b      	ldr	r3, [r3, #24]
 800aa9e:	60fb      	str	r3, [r7, #12]
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	69db      	ldr	r3, [r3, #28]
 800aaa4:	613b      	str	r3, [r7, #16]

    //Prepare buffer with datetimes
  for (uint8_t displayCount = 0; displayCount < 3; displayCount++)
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800aaac:	e012      	b.n	800aad4 <timeCircuit_control_saveDateTimes+0x52>
  {
    dateTime_convertDateTimeToChar(pDateTimeDisplays[displayCount], writeBuf, sizeof(writeBuf), &bufferCount);
 800aaae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800aab2:	009b      	lsls	r3, r3, #2
 800aab4:	3340      	adds	r3, #64	@ 0x40
 800aab6:	443b      	add	r3, r7
 800aab8:	f853 0c38 	ldr.w	r0, [r3, #-56]
 800aabc:	f107 0317 	add.w	r3, r7, #23
 800aac0:	f107 0118 	add.w	r1, r7, #24
 800aac4:	2225      	movs	r2, #37	@ 0x25
 800aac6:	f7ff f981 	bl	8009dcc <dateTime_convertDateTimeToChar>
  for (uint8_t displayCount = 0; displayCount < 3; displayCount++)
 800aaca:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800aace:	3301      	adds	r3, #1
 800aad0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800aad4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800aad8:	2b02      	cmp	r3, #2
 800aada:	d9e8      	bls.n	800aaae <timeCircuit_control_saveDateTimes+0x2c>
  }

  //Write datetime data to SD card
  // isSuccess = storageDevice_writeFile(pConfig->pStorageDeviceConfig, writeBuf, sizeof(writeBuf), gStoredDateTimeFileName);

  return isSuccess;
 800aadc:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3740      	adds	r7, #64	@ 0x40
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <timeCircuit_control_updatePresentDateTime>:

  return isSuccess;
}

TimeCircuit_Control_Status_t timeCircuit_control_updatePresentDateTime(TimeCircuit_Control_Config_t * const pConfig)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b084      	sub	sp, #16
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = 1;
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	73fb      	strb	r3, [r7, #15]
  static uint8_t previousMinute = 0;
  uint8_t currentMinute = 0;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	73bb      	strb	r3, [r7, #14]

  isSuccess &=  timeCircuit_control_getRTCMinute(pConfig, &currentMinute);
 800aaf8:	f107 030e 	add.w	r3, r7, #14
 800aafc:	4619      	mov	r1, r3
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f7ff ffad 	bl	800aa5e <timeCircuit_control_getRTCMinute>
 800ab04:	4603      	mov	r3, r0
 800ab06:	461a      	mov	r2, r3
 800ab08:	7bfb      	ldrb	r3, [r7, #15]
 800ab0a:	4013      	ands	r3, r2
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	bf14      	ite	ne
 800ab10:	2301      	movne	r3, #1
 800ab12:	2300      	moveq	r3, #0
 800ab14:	73fb      	strb	r3, [r7, #15]

  if (currentMinute != previousMinute)
 800ab16:	7bba      	ldrb	r2, [r7, #14]
 800ab18:	4b23      	ldr	r3, [pc, #140]	@ (800aba8 <timeCircuit_control_updatePresentDateTime+0xc0>)
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d03d      	beq.n	800ab9c <timeCircuit_control_updatePresentDateTime+0xb4>
  {
    //Retrieve RTC date time data
    isSuccess &= timeCircuit_control_getRtcDateTime(pConfig);
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f7ff ff23 	bl	800a96c <timeCircuit_control_getRtcDateTime>
 800ab26:	4603      	mov	r3, r0
 800ab28:	461a      	mov	r2, r3
 800ab2a:	7bfb      	ldrb	r3, [r7, #15]
 800ab2c:	4013      	ands	r3, r2
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	bf14      	ite	ne
 800ab32:	2301      	movne	r3, #1
 800ab34:	2300      	moveq	r3, #0
 800ab36:	73fb      	strb	r3, [r7, #15]

    //Set present date time to RTC date time
    isSuccess &= dateTime_setRtcDateTimeData(pConfig->pPresentTime, &pConfig->hRtcDate, &pConfig->hRtcTime);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6998      	ldr	r0, [r3, #24]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	3324      	adds	r3, #36	@ 0x24
 800ab46:	461a      	mov	r2, r3
 800ab48:	f7fe fe07 	bl	800975a <dateTime_setRtcDateTimeData>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	461a      	mov	r2, r3
 800ab50:	7bfb      	ldrb	r3, [r7, #15]
 800ab52:	4013      	ands	r3, r2
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	bf14      	ite	ne
 800ab58:	2301      	movne	r3, #1
 800ab5a:	2300      	moveq	r3, #0
 800ab5c:	73fb      	strb	r3, [r7, #15]

    //Update present display
    isSuccess &= dateTime_updateDisplay(pConfig->pPresentTime);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	699b      	ldr	r3, [r3, #24]
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7ff f9d8 	bl	8009f18 <dateTime_updateDisplay>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	7bfb      	ldrb	r3, [r7, #15]
 800ab6e:	4013      	ands	r3, r2
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	bf14      	ite	ne
 800ab74:	2301      	movne	r3, #1
 800ab76:	2300      	moveq	r3, #0
 800ab78:	73fb      	strb	r3, [r7, #15]

    //Store new date time
    isSuccess &= timeCircuit_control_saveDateTimes(pConfig);
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f7ff ff81 	bl	800aa82 <timeCircuit_control_saveDateTimes>
 800ab80:	4603      	mov	r3, r0
 800ab82:	461a      	mov	r2, r3
 800ab84:	7bfb      	ldrb	r3, [r7, #15]
 800ab86:	4013      	ands	r3, r2
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	bf14      	ite	ne
 800ab8c:	2301      	movne	r3, #1
 800ab8e:	2300      	moveq	r3, #0
 800ab90:	73fb      	strb	r3, [r7, #15]

    previousMinute = pConfig->hRtcTime.Minutes;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800ab98:	4b03      	ldr	r3, [pc, #12]	@ (800aba8 <timeCircuit_control_updatePresentDateTime+0xc0>)
 800ab9a:	701a      	strb	r2, [r3, #0]
  }

  return isSuccess;
 800ab9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3710      	adds	r7, #16
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
 800aba6:	bf00      	nop
 800aba8:	20000430 	.word	0x20000430

0800abac <timeCircuit_control_updateTimeTravelDateTimes>:

TimeCircuit_Control_Status_t timeCircuit_control_updateTimeTravelDateTimes(TimeCircuit_Control_Config_t* const pConfig)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b086      	sub	sp, #24
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess  = true;
 800abb4:	2301      	movs	r3, #1
 800abb6:	75fb      	strb	r3, [r7, #23]
  bool isButtonActivated                  = false;
 800abb8:	2300      	movs	r3, #0
 800abba:	757b      	strb	r3, [r7, #21]
  bool hasButtonStateChanged              = false;
 800abbc:	2300      	movs	r3, #0
 800abbe:	75bb      	strb	r3, [r7, #22]

  static bool hasButtonActivated          = false;
  static uint32_t previousTime            = 0;

  isButtonActivated  = HAL_GPIO_ReadPin(TIME_TRAVEL_SWITCH_GPIO_PORT, TIME_TRAVEL_SWITCH_PIN);
 800abc0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800abc4:	4843      	ldr	r0, [pc, #268]	@ (800acd4 <timeCircuit_control_updateTimeTravelDateTimes+0x128>)
 800abc6:	f7f7 fef9 	bl	80029bc <HAL_GPIO_ReadPin>
 800abca:	4603      	mov	r3, r0
 800abcc:	2b00      	cmp	r3, #0
 800abce:	bf14      	ite	ne
 800abd0:	2301      	movne	r3, #1
 800abd2:	2300      	moveq	r3, #0
 800abd4:	b2db      	uxtb	r3, r3
 800abd6:	757b      	strb	r3, [r7, #21]
  hasButtonStateChanged = timeCircuit_control_checkButtonActivation(&isButtonActivated, &hasButtonActivated,
 800abd8:	f107 0015 	add.w	r0, r7, #21
 800abdc:	2364      	movs	r3, #100	@ 0x64
 800abde:	4a3e      	ldr	r2, [pc, #248]	@ (800acd8 <timeCircuit_control_updateTimeTravelDateTimes+0x12c>)
 800abe0:	493e      	ldr	r1, [pc, #248]	@ (800acdc <timeCircuit_control_updateTimeTravelDateTimes+0x130>)
 800abe2:	f7ff fd61 	bl	800a6a8 <timeCircuit_control_checkButtonActivation>
 800abe6:	4603      	mov	r3, r0
 800abe8:	75bb      	strb	r3, [r7, #22]
        &previousTime, TIME_TRAVEL_SWITCH_DEBOUNCE_TIME_MS);

  if (hasButtonStateChanged == true)
 800abea:	7dbb      	ldrb	r3, [r7, #22]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d06c      	beq.n	800acca <timeCircuit_control_updateTimeTravelDateTimes+0x11e>
  {
    if (isButtonActivated != true )
 800abf0:	7d7b      	ldrb	r3, [r7, #21]
 800abf2:	f083 0301 	eor.w	r3, r3, #1
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d066      	beq.n	800acca <timeCircuit_control_updateTimeTravelDateTimes+0x11e>
    {
      //Clear displays
      isSuccess &= timeCircuit_control_clearDisplays(pConfig);
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f7ff fcb1 	bl	800a564 <timeCircuit_control_clearDisplays>
 800ac02:	4603      	mov	r3, r0
 800ac04:	461a      	mov	r2, r3
 800ac06:	7dfb      	ldrb	r3, [r7, #23]
 800ac08:	4013      	ands	r3, r2
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	bf14      	ite	ne
 800ac0e:	2301      	movne	r3, #1
 800ac10:	2300      	moveq	r3, #0
 800ac12:	75fb      	strb	r3, [r7, #23]

      //Play Sound
      char filename9[] = "locked.wav";
 800ac14:	4a32      	ldr	r2, [pc, #200]	@ (800ace0 <timeCircuit_control_updateTimeTravelDateTimes+0x134>)
 800ac16:	f107 0308 	add.w	r3, r7, #8
 800ac1a:	ca07      	ldmia	r2, {r0, r1, r2}
 800ac1c:	c303      	stmia	r3!, {r0, r1}
 800ac1e:	801a      	strh	r2, [r3, #0]
 800ac20:	3302      	adds	r3, #2
 800ac22:	0c12      	lsrs	r2, r2, #16
 800ac24:	701a      	strb	r2, [r3, #0]
      osMessageQueuePut(soundQueueHandle, &filename9, 0, 0);
 800ac26:	4b2f      	ldr	r3, [pc, #188]	@ (800ace4 <timeCircuit_control_updateTimeTravelDateTimes+0x138>)
 800ac28:	6818      	ldr	r0, [r3, #0]
 800ac2a:	f107 0108 	add.w	r1, r7, #8
 800ac2e:	2300      	movs	r3, #0
 800ac30:	2200      	movs	r2, #0
 800ac32:	f001 fc0d 	bl	800c450 <osMessageQueuePut>

      //Delay Display Update
      HAL_Delay(DISPLAY_DELAY_MS);
 800ac36:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800ac3a:	f7f6 fdd5 	bl	80017e8 <HAL_Delay>

      //Copy last time departed time data to present time
      isSuccess &= dateTime_copyDateTime(pConfig->pLastDepartedTime, pConfig->pPresentTime);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	69da      	ldr	r2, [r3, #28]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	699b      	ldr	r3, [r3, #24]
 800ac46:	4619      	mov	r1, r3
 800ac48:	4610      	mov	r0, r2
 800ac4a:	f7fe fdb3 	bl	80097b4 <dateTime_copyDateTime>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	461a      	mov	r2, r3
 800ac52:	7dfb      	ldrb	r3, [r7, #23]
 800ac54:	4013      	ands	r3, r2
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	bf14      	ite	ne
 800ac5a:	2301      	movne	r3, #1
 800ac5c:	2300      	moveq	r3, #0
 800ac5e:	75fb      	strb	r3, [r7, #23]

      //Copy present time data to destination time
      isSuccess &= dateTime_copyDateTime(pConfig->pPresentTime, pConfig->pDestinationTime);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	699a      	ldr	r2, [r3, #24]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	695b      	ldr	r3, [r3, #20]
 800ac68:	4619      	mov	r1, r3
 800ac6a:	4610      	mov	r0, r2
 800ac6c:	f7fe fda2 	bl	80097b4 <dateTime_copyDateTime>
 800ac70:	4603      	mov	r3, r0
 800ac72:	461a      	mov	r2, r3
 800ac74:	7dfb      	ldrb	r3, [r7, #23]
 800ac76:	4013      	ands	r3, r2
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	bf14      	ite	ne
 800ac7c:	2301      	movne	r3, #1
 800ac7e:	2300      	moveq	r3, #0
 800ac80:	75fb      	strb	r3, [r7, #23]

      //Update displays with new date times
      isSuccess &= timeCircuit_control_updateDisplays(pConfig);
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f7ff fce2 	bl	800a64c <timeCircuit_control_updateDisplays>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	7dfb      	ldrb	r3, [r7, #23]
 800ac8e:	4013      	ands	r3, r2
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	bf14      	ite	ne
 800ac94:	2301      	movne	r3, #1
 800ac96:	2300      	moveq	r3, #0
 800ac98:	75fb      	strb	r3, [r7, #23]

      //Set the RTC with new present time
      isSuccess &= timeCircuit_control_setRtcDateTime(pConfig);
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f7ff fe9b 	bl	800a9d6 <timeCircuit_control_setRtcDateTime>
 800aca0:	4603      	mov	r3, r0
 800aca2:	461a      	mov	r2, r3
 800aca4:	7dfb      	ldrb	r3, [r7, #23]
 800aca6:	4013      	ands	r3, r2
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	bf14      	ite	ne
 800acac:	2301      	movne	r3, #1
 800acae:	2300      	moveq	r3, #0
 800acb0:	75fb      	strb	r3, [r7, #23]

      //Store new date time
      isSuccess &= timeCircuit_control_saveDateTimes(pConfig);
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f7ff fee5 	bl	800aa82 <timeCircuit_control_saveDateTimes>
 800acb8:	4603      	mov	r3, r0
 800acba:	461a      	mov	r2, r3
 800acbc:	7dfb      	ldrb	r3, [r7, #23]
 800acbe:	4013      	ands	r3, r2
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	bf14      	ite	ne
 800acc4:	2301      	movne	r3, #1
 800acc6:	2300      	moveq	r3, #0
 800acc8:	75fb      	strb	r3, [r7, #23]
    }
  }
  return isSuccess;
 800acca:	7dfb      	ldrb	r3, [r7, #23]
}
 800accc:	4618      	mov	r0, r3
 800acce:	3718      	adds	r7, #24
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}
 800acd4:	40020800 	.word	0x40020800
 800acd8:	20000434 	.word	0x20000434
 800acdc:	20000431 	.word	0x20000431
 800ace0:	08010c00 	.word	0x08010c00
 800ace4:	20000110 	.word	0x20000110

0800ace8 <timeCircuit_control_updateDestinationDateTime>:

TimeCircuit_Control_Status_t timeCircuit_control_updateDestinationDateTime(TimeCircuit_Control_Config_t* const pConfig)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b086      	sub	sp, #24
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess  = true;
 800acf0:	2301      	movs	r3, #1
 800acf2:	75fb      	strb	r3, [r7, #23]
  bool isButtonActivated                  = false;
 800acf4:	2300      	movs	r3, #0
 800acf6:	757b      	strb	r3, [r7, #21]
  bool hasButtonStateChanged              = false;
 800acf8:	2300      	movs	r3, #0
 800acfa:	75bb      	strb	r3, [r7, #22]

  static bool hasButtonActivated          = false;
  static uint32_t previousTime            = 0;

  isButtonActivated  = !HAL_GPIO_ReadPin(KEYPAD_ENTER_SWITCH_GPIO_PORT, KEYPAD_ENTER_SWITCH_PIN);
 800acfc:	2102      	movs	r1, #2
 800acfe:	4839      	ldr	r0, [pc, #228]	@ (800ade4 <timeCircuit_control_updateDestinationDateTime+0xfc>)
 800ad00:	f7f7 fe5c 	bl	80029bc <HAL_GPIO_ReadPin>
 800ad04:	4603      	mov	r3, r0
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	bf0c      	ite	eq
 800ad0a:	2301      	moveq	r3, #1
 800ad0c:	2300      	movne	r3, #0
 800ad0e:	b2db      	uxtb	r3, r3
 800ad10:	757b      	strb	r3, [r7, #21]
  hasButtonStateChanged = timeCircuit_control_checkButtonActivation(&isButtonActivated, &hasButtonActivated,
 800ad12:	f107 0015 	add.w	r0, r7, #21
 800ad16:	2332      	movs	r3, #50	@ 0x32
 800ad18:	4a33      	ldr	r2, [pc, #204]	@ (800ade8 <timeCircuit_control_updateDestinationDateTime+0x100>)
 800ad1a:	4934      	ldr	r1, [pc, #208]	@ (800adec <timeCircuit_control_updateDestinationDateTime+0x104>)
 800ad1c:	f7ff fcc4 	bl	800a6a8 <timeCircuit_control_checkButtonActivation>
 800ad20:	4603      	mov	r3, r0
 800ad22:	75bb      	strb	r3, [r7, #22]
      &previousTime, ENTER_SWITCH_DEBOUNCE_TIME_MS);

  if (hasButtonStateChanged == true)
 800ad24:	7dbb      	ldrb	r3, [r7, #22]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d056      	beq.n	800add8 <timeCircuit_control_updateDestinationDateTime+0xf0>
  {
    if (isButtonActivated == true )
 800ad2a:	7d7b      	ldrb	r3, [r7, #21]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d04e      	beq.n	800adce <timeCircuit_control_updateDestinationDateTime+0xe6>
    {
      //Activate Keypad White Indicator
      HAL_GPIO_WritePin(KEYPAD_WHITE_INDICATOR_GPIO_PORT, KEYPAD_WHITE_INDICATOR_PIN, GPIO_PIN_SET);
 800ad30:	2201      	movs	r2, #1
 800ad32:	2108      	movs	r1, #8
 800ad34:	482e      	ldr	r0, [pc, #184]	@ (800adf0 <timeCircuit_control_updateDestinationDateTime+0x108>)
 800ad36:	f7f7 fe59 	bl	80029ec <HAL_GPIO_WritePin>
      //Clear destination date time
      isSuccess &= dateTime_clearDisplay(pConfig->pDestinationTime);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	695b      	ldr	r3, [r3, #20]
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7fe fd4d 	bl	80097de <dateTime_clearDisplay>
 800ad44:	4603      	mov	r3, r0
 800ad46:	461a      	mov	r2, r3
 800ad48:	7dfb      	ldrb	r3, [r7, #23]
 800ad4a:	4013      	ands	r3, r2
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	bf14      	ite	ne
 800ad50:	2301      	movne	r3, #1
 800ad52:	2300      	moveq	r3, #0
 800ad54:	75fb      	strb	r3, [r7, #23]
      //Update date time if a valid entry has submitted
      if (dateTime_setDisplayData(pConfig->pDestinationTime,pConfig->keypadInput))
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	695a      	ldr	r2, [r3, #20]
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	333c      	adds	r3, #60	@ 0x3c
 800ad5e:	4619      	mov	r1, r3
 800ad60:	4610      	mov	r0, r2
 800ad62:	f7fe fc7b 	bl	800965c <dateTime_setDisplayData>
 800ad66:	4603      	mov	r3, r0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d01f      	beq.n	800adac <timeCircuit_control_updateDestinationDateTime+0xc4>
      {
        //Play sound
        char filename[] = "enter.wav";
 800ad6c:	4a21      	ldr	r2, [pc, #132]	@ (800adf4 <timeCircuit_control_updateDestinationDateTime+0x10c>)
 800ad6e:	f107 0308 	add.w	r3, r7, #8
 800ad72:	ca07      	ldmia	r2, {r0, r1, r2}
 800ad74:	c303      	stmia	r3!, {r0, r1}
 800ad76:	801a      	strh	r2, [r3, #0]
        osMessageQueuePut(soundQueueHandle, &filename, 0, 0);
 800ad78:	4b1f      	ldr	r3, [pc, #124]	@ (800adf8 <timeCircuit_control_updateDestinationDateTime+0x110>)
 800ad7a:	6818      	ldr	r0, [r3, #0]
 800ad7c:	f107 0108 	add.w	r1, r7, #8
 800ad80:	2300      	movs	r3, #0
 800ad82:	2200      	movs	r2, #0
 800ad84:	f001 fb64 	bl	800c450 <osMessageQueuePut>

        //Delay Display Update
        HAL_Delay(DISPLAY_DELAY_MS);
 800ad88:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800ad8c:	f7f6 fd2c 	bl	80017e8 <HAL_Delay>
        isSuccess &= dateTime_updateDisplay(pConfig->pDestinationTime);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	695b      	ldr	r3, [r3, #20]
 800ad94:	4618      	mov	r0, r3
 800ad96:	f7ff f8bf 	bl	8009f18 <dateTime_updateDisplay>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	7dfb      	ldrb	r3, [r7, #23]
 800ada0:	4013      	ands	r3, r2
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	bf14      	ite	ne
 800ada6:	2301      	movne	r3, #1
 800ada8:	2300      	moveq	r3, #0
 800adaa:	75fb      	strb	r3, [r7, #23]
      }
      pConfig->keypadInputCount = 0;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2200      	movs	r2, #0
 800adb0:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

      //Save new date times
      isSuccess &= timeCircuit_control_saveDateTimes(pConfig);
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f7ff fe64 	bl	800aa82 <timeCircuit_control_saveDateTimes>
 800adba:	4603      	mov	r3, r0
 800adbc:	461a      	mov	r2, r3
 800adbe:	7dfb      	ldrb	r3, [r7, #23]
 800adc0:	4013      	ands	r3, r2
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	bf14      	ite	ne
 800adc6:	2301      	movne	r3, #1
 800adc8:	2300      	moveq	r3, #0
 800adca:	75fb      	strb	r3, [r7, #23]
 800adcc:	e004      	b.n	800add8 <timeCircuit_control_updateDestinationDateTime+0xf0>
    }
    else
    {
      //Deactivate Keypad White Indicator
      HAL_GPIO_WritePin(KEYPAD_WHITE_INDICATOR_GPIO_PORT, KEYPAD_WHITE_INDICATOR_PIN, GPIO_PIN_RESET);
 800adce:	2200      	movs	r2, #0
 800add0:	2108      	movs	r1, #8
 800add2:	4807      	ldr	r0, [pc, #28]	@ (800adf0 <timeCircuit_control_updateDestinationDateTime+0x108>)
 800add4:	f7f7 fe0a 	bl	80029ec <HAL_GPIO_WritePin>
    }

  }
  return isSuccess;
 800add8:	7dfb      	ldrb	r3, [r7, #23]
}
 800adda:	4618      	mov	r0, r3
 800addc:	3718      	adds	r7, #24
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	bf00      	nop
 800ade4:	40020400 	.word	0x40020400
 800ade8:	2000043c 	.word	0x2000043c
 800adec:	20000438 	.word	0x20000438
 800adf0:	40020000 	.word	0x40020000
 800adf4:	08010c0c 	.word	0x08010c0c
 800adf8:	20000110 	.word	0x20000110

0800adfc <timeCircuit_control_updateGlitch>:

TimeCircuit_Control_Status_t timeCircuit_control_updateGlitch(TimeCircuit_Control_Config_t* const pConfig)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess  = true;
 800ae04:	2301      	movs	r3, #1
 800ae06:	73fb      	strb	r3, [r7, #15]
  static uint32_t previousTime            = 0;
  static uint32_t randomFaultTime         = 0;
  static uint8_t  stateCount              = 0;

  bool bIsButtonActivated                 = false;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	737b      	strb	r3, [r7, #13]
  bool bHasButtonStateChanged              = false;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	73bb      	strb	r3, [r7, #14]

  static bool hasButtonActivated          = false;
  static uint32_t previousTimeMS          = 0;
  static uint32_t previousFaultTime       = 0;

  bIsButtonActivated  = !HAL_GPIO_ReadPin(GLITCH_SWITCH_GPIO_PORT, GLITCH_SWITCH_PIN);
 800ae10:	2120      	movs	r1, #32
 800ae12:	4882      	ldr	r0, [pc, #520]	@ (800b01c <timeCircuit_control_updateGlitch+0x220>)
 800ae14:	f7f7 fdd2 	bl	80029bc <HAL_GPIO_ReadPin>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	bf0c      	ite	eq
 800ae1e:	2301      	moveq	r3, #1
 800ae20:	2300      	movne	r3, #0
 800ae22:	b2db      	uxtb	r3, r3
 800ae24:	737b      	strb	r3, [r7, #13]
  bHasButtonStateChanged = timeCircuit_control_checkButtonActivation(&bIsButtonActivated, &hasButtonActivated,
 800ae26:	f107 000d 	add.w	r0, r7, #13
 800ae2a:	2364      	movs	r3, #100	@ 0x64
 800ae2c:	4a7c      	ldr	r2, [pc, #496]	@ (800b020 <timeCircuit_control_updateGlitch+0x224>)
 800ae2e:	497d      	ldr	r1, [pc, #500]	@ (800b024 <timeCircuit_control_updateGlitch+0x228>)
 800ae30:	f7ff fc3a 	bl	800a6a8 <timeCircuit_control_checkButtonActivation>
 800ae34:	4603      	mov	r3, r0
 800ae36:	73bb      	strb	r3, [r7, #14]
      &previousTimeMS, GLITCH_SWITCH_DEBOUNCE_TIME_MS);

  //Checks if glitch switch has been enabled
  if (bHasButtonStateChanged == true)
 800ae38:	7bbb      	ldrb	r3, [r7, #14]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d02f      	beq.n	800ae9e <timeCircuit_control_updateGlitch+0xa2>
  {
    if (bIsButtonActivated == true )
 800ae3e:	7b7b      	ldrb	r3, [r7, #13]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d015      	beq.n	800ae70 <timeCircuit_control_updateGlitch+0x74>
    {
      randomFaultTime = rand() % MAXIMUM_GLITCH_RANDOM_PERIOD_MS;
 800ae44:	f004 fd0e 	bl	800f864 <rand>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	4a77      	ldr	r2, [pc, #476]	@ (800b028 <timeCircuit_control_updateGlitch+0x22c>)
 800ae4c:	fb82 1203 	smull	r1, r2, r2, r3
 800ae50:	1391      	asrs	r1, r2, #14
 800ae52:	17da      	asrs	r2, r3, #31
 800ae54:	1a8a      	subs	r2, r1, r2
 800ae56:	f64e 2160 	movw	r1, #60000	@ 0xea60
 800ae5a:	fb01 f202 	mul.w	r2, r1, r2
 800ae5e:	1a9a      	subs	r2, r3, r2
 800ae60:	4b72      	ldr	r3, [pc, #456]	@ (800b02c <timeCircuit_control_updateGlitch+0x230>)
 800ae62:	601a      	str	r2, [r3, #0]
      previousFaultTime = HAL_GetTick();
 800ae64:	f7f6 fcb4 	bl	80017d0 <HAL_GetTick>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	4a71      	ldr	r2, [pc, #452]	@ (800b030 <timeCircuit_control_updateGlitch+0x234>)
 800ae6c:	6013      	str	r3, [r2, #0]
 800ae6e:	e016      	b.n	800ae9e <timeCircuit_control_updateGlitch+0xa2>
    }
    else
    {
      isSuccess &= dateTime_clearDisplay(pConfig->pDestinationTime);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	695b      	ldr	r3, [r3, #20]
 800ae74:	4618      	mov	r0, r3
 800ae76:	f7fe fcb2 	bl	80097de <dateTime_clearDisplay>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	461a      	mov	r2, r3
 800ae7e:	7bfb      	ldrb	r3, [r7, #15]
 800ae80:	4013      	ands	r3, r2
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	bf14      	ite	ne
 800ae86:	2301      	movne	r3, #1
 800ae88:	2300      	moveq	r3, #0
 800ae8a:	73fb      	strb	r3, [r7, #15]
      isSuccess = dateTime_updateDisplay(pConfig->pDestinationTime);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	695b      	ldr	r3, [r3, #20]
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7ff f841 	bl	8009f18 <dateTime_updateDisplay>
 800ae96:	4603      	mov	r3, r0
 800ae98:	73fb      	strb	r3, [r7, #15]

      return true;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	e0ba      	b.n	800b014 <timeCircuit_control_updateGlitch+0x218>
    }
  }

  //Update display with glitch
  if (((HAL_GetTick() - previousTime) > gGlitchTimeDelay[stateCount]) &&
 800ae9e:	f7f6 fc97 	bl	80017d0 <HAL_GetTick>
 800aea2:	4602      	mov	r2, r0
 800aea4:	4b63      	ldr	r3, [pc, #396]	@ (800b034 <timeCircuit_control_updateGlitch+0x238>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	1ad2      	subs	r2, r2, r3
 800aeaa:	4b63      	ldr	r3, [pc, #396]	@ (800b038 <timeCircuit_control_updateGlitch+0x23c>)
 800aeac:	781b      	ldrb	r3, [r3, #0]
 800aeae:	4619      	mov	r1, r3
 800aeb0:	4b62      	ldr	r3, [pc, #392]	@ (800b03c <timeCircuit_control_updateGlitch+0x240>)
 800aeb2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	d963      	bls.n	800af82 <timeCircuit_control_updateGlitch+0x186>
      ((HAL_GetTick() - previousFaultTime) > randomFaultTime) &&
 800aeba:	f7f6 fc89 	bl	80017d0 <HAL_GetTick>
 800aebe:	4602      	mov	r2, r0
 800aec0:	4b5b      	ldr	r3, [pc, #364]	@ (800b030 <timeCircuit_control_updateGlitch+0x234>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	1ad2      	subs	r2, r2, r3
 800aec6:	4b59      	ldr	r3, [pc, #356]	@ (800b02c <timeCircuit_control_updateGlitch+0x230>)
 800aec8:	681b      	ldr	r3, [r3, #0]
  if (((HAL_GetTick() - previousTime) > gGlitchTimeDelay[stateCount]) &&
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d959      	bls.n	800af82 <timeCircuit_control_updateGlitch+0x186>
      (bIsButtonActivated == true) && (gGlitchDoubleHit  == false))
 800aece:	7b7b      	ldrb	r3, [r7, #13]
      ((HAL_GetTick() - previousFaultTime) > randomFaultTime) &&
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d056      	beq.n	800af82 <timeCircuit_control_updateGlitch+0x186>
      (bIsButtonActivated == true) && (gGlitchDoubleHit  == false))
 800aed4:	4b5a      	ldr	r3, [pc, #360]	@ (800b040 <timeCircuit_control_updateGlitch+0x244>)
 800aed6:	781b      	ldrb	r3, [r3, #0]
 800aed8:	b2db      	uxtb	r3, r3
 800aeda:	f083 0301 	eor.w	r3, r3, #1
 800aede:	b2db      	uxtb	r3, r3
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d04e      	beq.n	800af82 <timeCircuit_control_updateGlitch+0x186>
  {
    switch (stateCount)
 800aee4:	4b54      	ldr	r3, [pc, #336]	@ (800b038 <timeCircuit_control_updateGlitch+0x23c>)
 800aee6:	781b      	ldrb	r3, [r3, #0]
 800aee8:	2b02      	cmp	r3, #2
 800aeea:	d031      	beq.n	800af50 <timeCircuit_control_updateGlitch+0x154>
 800aeec:	2b02      	cmp	r3, #2
 800aeee:	dc42      	bgt.n	800af76 <timeCircuit_control_updateGlitch+0x17a>
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d002      	beq.n	800aefa <timeCircuit_control_updateGlitch+0xfe>
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d015      	beq.n	800af24 <timeCircuit_control_updateGlitch+0x128>
//        char filename[] = "glitch2.wav";
//        osMessageQueuePut(soundQueueHandle, &filename, 0, 0);
        break;

      default:
        break;
 800aef8:	e03d      	b.n	800af76 <timeCircuit_control_updateGlitch+0x17a>
        isSuccess &= dateTime_clearDisplay(pConfig->pDestinationTime);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	695b      	ldr	r3, [r3, #20]
 800aefe:	4618      	mov	r0, r3
 800af00:	f7fe fc6d 	bl	80097de <dateTime_clearDisplay>
 800af04:	4603      	mov	r3, r0
 800af06:	461a      	mov	r2, r3
 800af08:	7bfb      	ldrb	r3, [r7, #15]
 800af0a:	4013      	ands	r3, r2
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	bf14      	ite	ne
 800af10:	2301      	movne	r3, #1
 800af12:	2300      	moveq	r3, #0
 800af14:	73fb      	strb	r3, [r7, #15]
        stateCount++;
 800af16:	4b48      	ldr	r3, [pc, #288]	@ (800b038 <timeCircuit_control_updateGlitch+0x23c>)
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	3301      	adds	r3, #1
 800af1c:	b2da      	uxtb	r2, r3
 800af1e:	4b46      	ldr	r3, [pc, #280]	@ (800b038 <timeCircuit_control_updateGlitch+0x23c>)
 800af20:	701a      	strb	r2, [r3, #0]
        break;
 800af22:	e029      	b.n	800af78 <timeCircuit_control_updateGlitch+0x17c>
        isSuccess &= dateTime_updateDisplayGlitch(pConfig->pDestinationTime, gGlitchDisplayChars);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	695b      	ldr	r3, [r3, #20]
 800af28:	4946      	ldr	r1, [pc, #280]	@ (800b044 <timeCircuit_control_updateGlitch+0x248>)
 800af2a:	4618      	mov	r0, r3
 800af2c:	f7fe fe54 	bl	8009bd8 <dateTime_updateDisplayGlitch>
 800af30:	4603      	mov	r3, r0
 800af32:	461a      	mov	r2, r3
 800af34:	7bfb      	ldrb	r3, [r7, #15]
 800af36:	4013      	ands	r3, r2
 800af38:	2b00      	cmp	r3, #0
 800af3a:	bf14      	ite	ne
 800af3c:	2301      	movne	r3, #1
 800af3e:	2300      	moveq	r3, #0
 800af40:	73fb      	strb	r3, [r7, #15]
        stateCount++;
 800af42:	4b3d      	ldr	r3, [pc, #244]	@ (800b038 <timeCircuit_control_updateGlitch+0x23c>)
 800af44:	781b      	ldrb	r3, [r3, #0]
 800af46:	3301      	adds	r3, #1
 800af48:	b2da      	uxtb	r2, r3
 800af4a:	4b3b      	ldr	r3, [pc, #236]	@ (800b038 <timeCircuit_control_updateGlitch+0x23c>)
 800af4c:	701a      	strb	r2, [r3, #0]
        break;
 800af4e:	e013      	b.n	800af78 <timeCircuit_control_updateGlitch+0x17c>
        isSuccess &= dateTime_updateDisplayGlitch(pConfig->pDestinationTime,gGlitchDisplayDate);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	695b      	ldr	r3, [r3, #20]
 800af54:	493c      	ldr	r1, [pc, #240]	@ (800b048 <timeCircuit_control_updateGlitch+0x24c>)
 800af56:	4618      	mov	r0, r3
 800af58:	f7fe fe3e 	bl	8009bd8 <dateTime_updateDisplayGlitch>
 800af5c:	4603      	mov	r3, r0
 800af5e:	461a      	mov	r2, r3
 800af60:	7bfb      	ldrb	r3, [r7, #15]
 800af62:	4013      	ands	r3, r2
 800af64:	2b00      	cmp	r3, #0
 800af66:	bf14      	ite	ne
 800af68:	2301      	movne	r3, #1
 800af6a:	2300      	moveq	r3, #0
 800af6c:	73fb      	strb	r3, [r7, #15]
        stateCount = 0;
 800af6e:	4b32      	ldr	r3, [pc, #200]	@ (800b038 <timeCircuit_control_updateGlitch+0x23c>)
 800af70:	2200      	movs	r2, #0
 800af72:	701a      	strb	r2, [r3, #0]
        break;
 800af74:	e000      	b.n	800af78 <timeCircuit_control_updateGlitch+0x17c>
        break;
 800af76:	bf00      	nop
     }
    previousTime = HAL_GetTick();
 800af78:	f7f6 fc2a 	bl	80017d0 <HAL_GetTick>
 800af7c:	4603      	mov	r3, r0
 800af7e:	4a2d      	ldr	r2, [pc, #180]	@ (800b034 <timeCircuit_control_updateGlitch+0x238>)
 800af80:	6013      	str	r3, [r2, #0]
  }

  // Clear glitch
  if (gGlitchDoubleHit == true)
 800af82:	4b2f      	ldr	r3, [pc, #188]	@ (800b040 <timeCircuit_control_updateGlitch+0x244>)
 800af84:	781b      	ldrb	r3, [r3, #0]
 800af86:	b2db      	uxtb	r3, r3
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d042      	beq.n	800b012 <timeCircuit_control_updateGlitch+0x216>
  {
    //Clear glitching display
    isSuccess &= dateTime_clearDisplay(pConfig->pDestinationTime);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	695b      	ldr	r3, [r3, #20]
 800af90:	4618      	mov	r0, r3
 800af92:	f7fe fc24 	bl	80097de <dateTime_clearDisplay>
 800af96:	4603      	mov	r3, r0
 800af98:	461a      	mov	r2, r3
 800af9a:	7bfb      	ldrb	r3, [r7, #15]
 800af9c:	4013      	ands	r3, r2
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	bf14      	ite	ne
 800afa2:	2301      	movne	r3, #1
 800afa4:	2300      	moveq	r3, #0
 800afa6:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(500);
 800afa8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800afac:	f7f6 fc1c 	bl	80017e8 <HAL_Delay>
    isSuccess &= dateTime_updateDisplayGlitch(pConfig->pDestinationTime, gGlitchDisplayChars);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	695b      	ldr	r3, [r3, #20]
 800afb4:	4923      	ldr	r1, [pc, #140]	@ (800b044 <timeCircuit_control_updateGlitch+0x248>)
 800afb6:	4618      	mov	r0, r3
 800afb8:	f7fe fe0e 	bl	8009bd8 <dateTime_updateDisplayGlitch>
 800afbc:	4603      	mov	r3, r0
 800afbe:	461a      	mov	r2, r3
 800afc0:	7bfb      	ldrb	r3, [r7, #15]
 800afc2:	4013      	ands	r3, r2
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	bf14      	ite	ne
 800afc8:	2301      	movne	r3, #1
 800afca:	2300      	moveq	r3, #0
 800afcc:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(100);
 800afce:	2064      	movs	r0, #100	@ 0x64
 800afd0:	f7f6 fc0a 	bl	80017e8 <HAL_Delay>
    isSuccess = dateTime_updateDisplay(pConfig->pDestinationTime);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	695b      	ldr	r3, [r3, #20]
 800afd8:	4618      	mov	r0, r3
 800afda:	f7fe ff9d 	bl	8009f18 <dateTime_updateDisplay>
 800afde:	4603      	mov	r3, r0
 800afe0:	73fb      	strb	r3, [r7, #15]

    //Clear glitch flag
    gGlitchDoubleHit = false;
 800afe2:	4b17      	ldr	r3, [pc, #92]	@ (800b040 <timeCircuit_control_updateGlitch+0x244>)
 800afe4:	2200      	movs	r2, #0
 800afe6:	701a      	strb	r2, [r3, #0]

    //Generate new random time
    randomFaultTime = rand() % MAXIMUM_GLITCH_RANDOM_PERIOD_MS;
 800afe8:	f004 fc3c 	bl	800f864 <rand>
 800afec:	4603      	mov	r3, r0
 800afee:	4a0e      	ldr	r2, [pc, #56]	@ (800b028 <timeCircuit_control_updateGlitch+0x22c>)
 800aff0:	fb82 1203 	smull	r1, r2, r2, r3
 800aff4:	1391      	asrs	r1, r2, #14
 800aff6:	17da      	asrs	r2, r3, #31
 800aff8:	1a8a      	subs	r2, r1, r2
 800affa:	f64e 2160 	movw	r1, #60000	@ 0xea60
 800affe:	fb01 f202 	mul.w	r2, r1, r2
 800b002:	1a9a      	subs	r2, r3, r2
 800b004:	4b09      	ldr	r3, [pc, #36]	@ (800b02c <timeCircuit_control_updateGlitch+0x230>)
 800b006:	601a      	str	r2, [r3, #0]

    //Reset glitch timer
    previousFaultTime = HAL_GetTick();
 800b008:	f7f6 fbe2 	bl	80017d0 <HAL_GetTick>
 800b00c:	4603      	mov	r3, r0
 800b00e:	4a08      	ldr	r2, [pc, #32]	@ (800b030 <timeCircuit_control_updateGlitch+0x234>)
 800b010:	6013      	str	r3, [r2, #0]


  }

  return isSuccess;
 800b012:	7bfb      	ldrb	r3, [r7, #15]
}
 800b014:	4618      	mov	r0, r3
 800b016:	3710      	adds	r7, #16
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}
 800b01c:	40020400 	.word	0x40020400
 800b020:	20000444 	.word	0x20000444
 800b024:	20000440 	.word	0x20000440
 800b028:	45e7b273 	.word	0x45e7b273
 800b02c:	20000448 	.word	0x20000448
 800b030:	2000044c 	.word	0x2000044c
 800b034:	20000450 	.word	0x20000450
 800b038:	20000454 	.word	0x20000454
 800b03c:	08010d94 	.word	0x08010d94
 800b040:	2000041d 	.word	0x2000041d
 800b044:	08010d84 	.word	0x08010d84
 800b048:	08010d74 	.word	0x08010d74

0800b04c <timeCircuit__toggleTimeColon>:
  return isSuccess;

}

TimeCircuit_Control_Status_t timeCircuit__toggleTimeColon(TimeCircuit_Control_Config_t* const pConfig)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b084      	sub	sp, #16
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  static uint8_t toogleStatus = 0;
  static uint32_t previousTime = 0;
  DateTime_Display_Status_t isSuccess   = 0;
 800b054:	2300      	movs	r3, #0
 800b056:	73fb      	strb	r3, [r7, #15]

  if ((HAL_GetTick()-previousTime) >= COLON_TIME_DELAY_MS)
 800b058:	f7f6 fbba 	bl	80017d0 <HAL_GetTick>
 800b05c:	4602      	mov	r2, r0
 800b05e:	4b2a      	ldr	r3, [pc, #168]	@ (800b108 <timeCircuit__toggleTimeColon+0xbc>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	1ad3      	subs	r3, r2, r3
 800b064:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800b068:	d349      	bcc.n	800b0fe <timeCircuit__toggleTimeColon+0xb2>
  {
    toogleStatus = ((toogleStatus) == 0) ? 3 : 0;
 800b06a:	4b28      	ldr	r3, [pc, #160]	@ (800b10c <timeCircuit__toggleTimeColon+0xc0>)
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d101      	bne.n	800b076 <timeCircuit__toggleTimeColon+0x2a>
 800b072:	2203      	movs	r2, #3
 800b074:	e000      	b.n	800b078 <timeCircuit__toggleTimeColon+0x2c>
 800b076:	2200      	movs	r2, #0
 800b078:	4b24      	ldr	r3, [pc, #144]	@ (800b10c <timeCircuit__toggleTimeColon+0xc0>)
 800b07a:	701a      	strb	r2, [r3, #0]
    previousTime = HAL_GetTick();
 800b07c:	f7f6 fba8 	bl	80017d0 <HAL_GetTick>
 800b080:	4603      	mov	r3, r0
 800b082:	4a21      	ldr	r2, [pc, #132]	@ (800b108 <timeCircuit__toggleTimeColon+0xbc>)
 800b084:	6013      	str	r3, [r2, #0]
    isSuccess |= dateTime_setLed(pConfig->pDestinationTime,   COLON_LED_SEGMENT_ADDRESS, (toogleStatus<<6));
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6958      	ldr	r0, [r3, #20]
 800b08a:	4b20      	ldr	r3, [pc, #128]	@ (800b10c <timeCircuit__toggleTimeColon+0xc0>)
 800b08c:	781b      	ldrb	r3, [r3, #0]
 800b08e:	019b      	lsls	r3, r3, #6
 800b090:	b2db      	uxtb	r3, r3
 800b092:	461a      	mov	r2, r3
 800b094:	2107      	movs	r1, #7
 800b096:	f7fe fc6b 	bl	8009970 <dateTime_setLed>
 800b09a:	4603      	mov	r3, r0
 800b09c:	461a      	mov	r2, r3
 800b09e:	7bfb      	ldrb	r3, [r7, #15]
 800b0a0:	4313      	orrs	r3, r2
 800b0a2:	b2db      	uxtb	r3, r3
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	bf14      	ite	ne
 800b0a8:	2301      	movne	r3, #1
 800b0aa:	2300      	moveq	r3, #0
 800b0ac:	73fb      	strb	r3, [r7, #15]
    isSuccess |= dateTime_setLed(pConfig->pLastDepartedTime,  COLON_LED_SEGMENT_ADDRESS, (toogleStatus<<6));
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	69d8      	ldr	r0, [r3, #28]
 800b0b2:	4b16      	ldr	r3, [pc, #88]	@ (800b10c <timeCircuit__toggleTimeColon+0xc0>)
 800b0b4:	781b      	ldrb	r3, [r3, #0]
 800b0b6:	019b      	lsls	r3, r3, #6
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	2107      	movs	r1, #7
 800b0be:	f7fe fc57 	bl	8009970 <dateTime_setLed>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	461a      	mov	r2, r3
 800b0c6:	7bfb      	ldrb	r3, [r7, #15]
 800b0c8:	4313      	orrs	r3, r2
 800b0ca:	b2db      	uxtb	r3, r3
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	bf14      	ite	ne
 800b0d0:	2301      	movne	r3, #1
 800b0d2:	2300      	moveq	r3, #0
 800b0d4:	73fb      	strb	r3, [r7, #15]
    isSuccess |= dateTime_setLed(pConfig->pPresentTime,       COLON_LED_SEGMENT_ADDRESS, (toogleStatus<<6));
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6998      	ldr	r0, [r3, #24]
 800b0da:	4b0c      	ldr	r3, [pc, #48]	@ (800b10c <timeCircuit__toggleTimeColon+0xc0>)
 800b0dc:	781b      	ldrb	r3, [r3, #0]
 800b0de:	019b      	lsls	r3, r3, #6
 800b0e0:	b2db      	uxtb	r3, r3
 800b0e2:	461a      	mov	r2, r3
 800b0e4:	2107      	movs	r1, #7
 800b0e6:	f7fe fc43 	bl	8009970 <dateTime_setLed>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	461a      	mov	r2, r3
 800b0ee:	7bfb      	ldrb	r3, [r7, #15]
 800b0f0:	4313      	orrs	r3, r2
 800b0f2:	b2db      	uxtb	r3, r3
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	bf14      	ite	ne
 800b0f8:	2301      	movne	r3, #1
 800b0fa:	2300      	moveq	r3, #0
 800b0fc:	73fb      	strb	r3, [r7, #15]


  }

  return isSuccess;
 800b0fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b100:	4618      	mov	r0, r3
 800b102:	3710      	adds	r7, #16
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}
 800b108:	20000458 	.word	0x20000458
 800b10c:	2000045c 	.word	0x2000045c

0800b110 <timeCircuit_control_update>:



TimeCircuit_Control_Status_t timeCircuit_control_update(TimeCircuit_Control_Config_t * const pConfig)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b084      	sub	sp, #16
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = 1;
 800b118:	2301      	movs	r3, #1
 800b11a:	73fb      	strb	r3, [r7, #15]

  //Update date times after time travel simulation event
  isSuccess &= timeCircuit_control_updateTimeTravelDateTimes(pConfig);
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f7ff fd45 	bl	800abac <timeCircuit_control_updateTimeTravelDateTimes>
 800b122:	4603      	mov	r3, r0
 800b124:	461a      	mov	r2, r3
 800b126:	7bfb      	ldrb	r3, [r7, #15]
 800b128:	4013      	ands	r3, r2
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	bf14      	ite	ne
 800b12e:	2301      	movne	r3, #1
 800b130:	2300      	moveq	r3, #0
 800b132:	73fb      	strb	r3, [r7, #15]

  //Read user input date time
  isSuccess &= timeCircuit_control_readInputDateTime(pConfig);
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f7ff fadf 	bl	800a6f8 <timeCircuit_control_readInputDateTime>
 800b13a:	4603      	mov	r3, r0
 800b13c:	461a      	mov	r2, r3
 800b13e:	7bfb      	ldrb	r3, [r7, #15]
 800b140:	4013      	ands	r3, r2
 800b142:	2b00      	cmp	r3, #0
 800b144:	bf14      	ite	ne
 800b146:	2301      	movne	r3, #1
 800b148:	2300      	moveq	r3, #0
 800b14a:	73fb      	strb	r3, [r7, #15]

  //Update Destination Time from user input
  isSuccess &= timeCircuit_control_updateDestinationDateTime(pConfig);
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f7ff fdcb 	bl	800ace8 <timeCircuit_control_updateDestinationDateTime>
 800b152:	4603      	mov	r3, r0
 800b154:	461a      	mov	r2, r3
 800b156:	7bfb      	ldrb	r3, [r7, #15]
 800b158:	4013      	ands	r3, r2
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	bf14      	ite	ne
 800b15e:	2301      	movne	r3, #1
 800b160:	2300      	moveq	r3, #0
 800b162:	73fb      	strb	r3, [r7, #15]


  //Update Present Time from RTC
  isSuccess &= timeCircuit_control_updatePresentDateTime(pConfig);
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f7ff fcbf 	bl	800aae8 <timeCircuit_control_updatePresentDateTime>
 800b16a:	4603      	mov	r3, r0
 800b16c:	461a      	mov	r2, r3
 800b16e:	7bfb      	ldrb	r3, [r7, #15]
 800b170:	4013      	ands	r3, r2
 800b172:	2b00      	cmp	r3, #0
 800b174:	bf14      	ite	ne
 800b176:	2301      	movne	r3, #1
 800b178:	2300      	moveq	r3, #0
 800b17a:	73fb      	strb	r3, [r7, #15]

  //Update Glitch
  isSuccess &= timeCircuit_control_updateGlitch(pConfig);
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f7ff fe3d 	bl	800adfc <timeCircuit_control_updateGlitch>
 800b182:	4603      	mov	r3, r0
 800b184:	461a      	mov	r2, r3
 800b186:	7bfb      	ldrb	r3, [r7, #15]
 800b188:	4013      	ands	r3, r2
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	bf14      	ite	ne
 800b18e:	2301      	movne	r3, #1
 800b190:	2300      	moveq	r3, #0
 800b192:	73fb      	strb	r3, [r7, #15]



  return isSuccess;
 800b194:	7bfb      	ldrb	r3, [r7, #15]
}
 800b196:	4618      	mov	r0, r3
 800b198:	3710      	adds	r7, #16
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}
	...

0800b1a0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b084      	sub	sp, #16
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b1aa:	79fb      	ldrb	r3, [r7, #7]
 800b1ac:	4a08      	ldr	r2, [pc, #32]	@ (800b1d0 <disk_status+0x30>)
 800b1ae:	009b      	lsls	r3, r3, #2
 800b1b0:	4413      	add	r3, r2
 800b1b2:	685b      	ldr	r3, [r3, #4]
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	79fa      	ldrb	r2, [r7, #7]
 800b1b8:	4905      	ldr	r1, [pc, #20]	@ (800b1d0 <disk_status+0x30>)
 800b1ba:	440a      	add	r2, r1
 800b1bc:	7a12      	ldrb	r2, [r2, #8]
 800b1be:	4610      	mov	r0, r2
 800b1c0:	4798      	blx	r3
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b1c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3710      	adds	r7, #16
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}
 800b1d0:	20000488 	.word	0x20000488

0800b1d4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b084      	sub	sp, #16
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	4603      	mov	r3, r0
 800b1dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b1e2:	79fb      	ldrb	r3, [r7, #7]
 800b1e4:	4a0e      	ldr	r2, [pc, #56]	@ (800b220 <disk_initialize+0x4c>)
 800b1e6:	5cd3      	ldrb	r3, [r2, r3]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d114      	bne.n	800b216 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b1ec:	79fb      	ldrb	r3, [r7, #7]
 800b1ee:	4a0c      	ldr	r2, [pc, #48]	@ (800b220 <disk_initialize+0x4c>)
 800b1f0:	009b      	lsls	r3, r3, #2
 800b1f2:	4413      	add	r3, r2
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	79fa      	ldrb	r2, [r7, #7]
 800b1fa:	4909      	ldr	r1, [pc, #36]	@ (800b220 <disk_initialize+0x4c>)
 800b1fc:	440a      	add	r2, r1
 800b1fe:	7a12      	ldrb	r2, [r2, #8]
 800b200:	4610      	mov	r0, r2
 800b202:	4798      	blx	r3
 800b204:	4603      	mov	r3, r0
 800b206:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800b208:	7bfb      	ldrb	r3, [r7, #15]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d103      	bne.n	800b216 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800b20e:	79fb      	ldrb	r3, [r7, #7]
 800b210:	4a03      	ldr	r2, [pc, #12]	@ (800b220 <disk_initialize+0x4c>)
 800b212:	2101      	movs	r1, #1
 800b214:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800b216:	7bfb      	ldrb	r3, [r7, #15]
}
 800b218:	4618      	mov	r0, r3
 800b21a:	3710      	adds	r7, #16
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}
 800b220:	20000488 	.word	0x20000488

0800b224 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b224:	b590      	push	{r4, r7, lr}
 800b226:	b087      	sub	sp, #28
 800b228:	af00      	add	r7, sp, #0
 800b22a:	60b9      	str	r1, [r7, #8]
 800b22c:	607a      	str	r2, [r7, #4]
 800b22e:	603b      	str	r3, [r7, #0]
 800b230:	4603      	mov	r3, r0
 800b232:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b234:	7bfb      	ldrb	r3, [r7, #15]
 800b236:	4a0a      	ldr	r2, [pc, #40]	@ (800b260 <disk_read+0x3c>)
 800b238:	009b      	lsls	r3, r3, #2
 800b23a:	4413      	add	r3, r2
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	689c      	ldr	r4, [r3, #8]
 800b240:	7bfb      	ldrb	r3, [r7, #15]
 800b242:	4a07      	ldr	r2, [pc, #28]	@ (800b260 <disk_read+0x3c>)
 800b244:	4413      	add	r3, r2
 800b246:	7a18      	ldrb	r0, [r3, #8]
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	687a      	ldr	r2, [r7, #4]
 800b24c:	68b9      	ldr	r1, [r7, #8]
 800b24e:	47a0      	blx	r4
 800b250:	4603      	mov	r3, r0
 800b252:	75fb      	strb	r3, [r7, #23]
  return res;
 800b254:	7dfb      	ldrb	r3, [r7, #23]
}
 800b256:	4618      	mov	r0, r3
 800b258:	371c      	adds	r7, #28
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd90      	pop	{r4, r7, pc}
 800b25e:	bf00      	nop
 800b260:	20000488 	.word	0x20000488

0800b264 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b264:	b590      	push	{r4, r7, lr}
 800b266:	b087      	sub	sp, #28
 800b268:	af00      	add	r7, sp, #0
 800b26a:	60b9      	str	r1, [r7, #8]
 800b26c:	607a      	str	r2, [r7, #4]
 800b26e:	603b      	str	r3, [r7, #0]
 800b270:	4603      	mov	r3, r0
 800b272:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b274:	7bfb      	ldrb	r3, [r7, #15]
 800b276:	4a0a      	ldr	r2, [pc, #40]	@ (800b2a0 <disk_write+0x3c>)
 800b278:	009b      	lsls	r3, r3, #2
 800b27a:	4413      	add	r3, r2
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	68dc      	ldr	r4, [r3, #12]
 800b280:	7bfb      	ldrb	r3, [r7, #15]
 800b282:	4a07      	ldr	r2, [pc, #28]	@ (800b2a0 <disk_write+0x3c>)
 800b284:	4413      	add	r3, r2
 800b286:	7a18      	ldrb	r0, [r3, #8]
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	687a      	ldr	r2, [r7, #4]
 800b28c:	68b9      	ldr	r1, [r7, #8]
 800b28e:	47a0      	blx	r4
 800b290:	4603      	mov	r3, r0
 800b292:	75fb      	strb	r3, [r7, #23]
  return res;
 800b294:	7dfb      	ldrb	r3, [r7, #23]
}
 800b296:	4618      	mov	r0, r3
 800b298:	371c      	adds	r7, #28
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd90      	pop	{r4, r7, pc}
 800b29e:	bf00      	nop
 800b2a0:	20000488 	.word	0x20000488

0800b2a4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b085      	sub	sp, #20
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	3301      	adds	r3, #1
 800b2b0:	781b      	ldrb	r3, [r3, #0]
 800b2b2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b2b4:	89fb      	ldrh	r3, [r7, #14]
 800b2b6:	021b      	lsls	r3, r3, #8
 800b2b8:	b21a      	sxth	r2, r3
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	781b      	ldrb	r3, [r3, #0]
 800b2be:	b21b      	sxth	r3, r3
 800b2c0:	4313      	orrs	r3, r2
 800b2c2:	b21b      	sxth	r3, r3
 800b2c4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b2c6:	89fb      	ldrh	r3, [r7, #14]
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3714      	adds	r7, #20
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d2:	4770      	bx	lr

0800b2d4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b085      	sub	sp, #20
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	3303      	adds	r3, #3
 800b2e0:	781b      	ldrb	r3, [r3, #0]
 800b2e2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	021b      	lsls	r3, r3, #8
 800b2e8:	687a      	ldr	r2, [r7, #4]
 800b2ea:	3202      	adds	r2, #2
 800b2ec:	7812      	ldrb	r2, [r2, #0]
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	021b      	lsls	r3, r3, #8
 800b2f6:	687a      	ldr	r2, [r7, #4]
 800b2f8:	3201      	adds	r2, #1
 800b2fa:	7812      	ldrb	r2, [r2, #0]
 800b2fc:	4313      	orrs	r3, r2
 800b2fe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	021b      	lsls	r3, r3, #8
 800b304:	687a      	ldr	r2, [r7, #4]
 800b306:	7812      	ldrb	r2, [r2, #0]
 800b308:	4313      	orrs	r3, r2
 800b30a:	60fb      	str	r3, [r7, #12]
	return rv;
 800b30c:	68fb      	ldr	r3, [r7, #12]
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3714      	adds	r7, #20
 800b312:	46bd      	mov	sp, r7
 800b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b318:	4770      	bx	lr

0800b31a <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800b31a:	b580      	push	{r7, lr}
 800b31c:	b082      	sub	sp, #8
 800b31e:	af00      	add	r7, sp, #0
 800b320:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d009      	beq.n	800b33c <lock_fs+0x22>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	68db      	ldr	r3, [r3, #12]
 800b32c:	4618      	mov	r0, r3
 800b32e:	f000 fdf1 	bl	800bf14 <ff_req_grant>
 800b332:	4603      	mov	r3, r0
 800b334:	2b00      	cmp	r3, #0
 800b336:	d001      	beq.n	800b33c <lock_fs+0x22>
 800b338:	2301      	movs	r3, #1
 800b33a:	e000      	b.n	800b33e <lock_fs+0x24>
 800b33c:	2300      	movs	r3, #0
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3708      	adds	r7, #8
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}

0800b346 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800b346:	b580      	push	{r7, lr}
 800b348:	b082      	sub	sp, #8
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
 800b34e:	460b      	mov	r3, r1
 800b350:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d00d      	beq.n	800b374 <unlock_fs+0x2e>
 800b358:	78fb      	ldrb	r3, [r7, #3]
 800b35a:	2b0c      	cmp	r3, #12
 800b35c:	d00a      	beq.n	800b374 <unlock_fs+0x2e>
 800b35e:	78fb      	ldrb	r3, [r7, #3]
 800b360:	2b0b      	cmp	r3, #11
 800b362:	d007      	beq.n	800b374 <unlock_fs+0x2e>
 800b364:	78fb      	ldrb	r3, [r7, #3]
 800b366:	2b0f      	cmp	r3, #15
 800b368:	d004      	beq.n	800b374 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	68db      	ldr	r3, [r3, #12]
 800b36e:	4618      	mov	r0, r3
 800b370:	f000 fde5 	bl	800bf3e <ff_rel_grant>
	}
}
 800b374:	bf00      	nop
 800b376:	3708      	adds	r7, #8
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}

0800b37c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b085      	sub	sp, #20
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b384:	2300      	movs	r3, #0
 800b386:	60fb      	str	r3, [r7, #12]
 800b388:	e010      	b.n	800b3ac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b38a:	4a0d      	ldr	r2, [pc, #52]	@ (800b3c0 <clear_lock+0x44>)
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	011b      	lsls	r3, r3, #4
 800b390:	4413      	add	r3, r2
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	687a      	ldr	r2, [r7, #4]
 800b396:	429a      	cmp	r2, r3
 800b398:	d105      	bne.n	800b3a6 <clear_lock+0x2a>
 800b39a:	4a09      	ldr	r2, [pc, #36]	@ (800b3c0 <clear_lock+0x44>)
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	011b      	lsls	r3, r3, #4
 800b3a0:	4413      	add	r3, r2
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	3301      	adds	r3, #1
 800b3aa:	60fb      	str	r3, [r7, #12]
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	2b01      	cmp	r3, #1
 800b3b0:	d9eb      	bls.n	800b38a <clear_lock+0xe>
	}
}
 800b3b2:	bf00      	nop
 800b3b4:	bf00      	nop
 800b3b6:	3714      	adds	r7, #20
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr
 800b3c0:	20000468 	.word	0x20000468

0800b3c4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b086      	sub	sp, #24
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	78db      	ldrb	r3, [r3, #3]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d034      	beq.n	800b442 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3dc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	7858      	ldrb	r0, [r3, #1]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	697a      	ldr	r2, [r7, #20]
 800b3ec:	f7ff ff3a 	bl	800b264 <disk_write>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d002      	beq.n	800b3fc <sync_window+0x38>
			res = FR_DISK_ERR;
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	73fb      	strb	r3, [r7, #15]
 800b3fa:	e022      	b.n	800b442 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2200      	movs	r2, #0
 800b400:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b406:	697a      	ldr	r2, [r7, #20]
 800b408:	1ad2      	subs	r2, r2, r3
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	69db      	ldr	r3, [r3, #28]
 800b40e:	429a      	cmp	r2, r3
 800b410:	d217      	bcs.n	800b442 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	789b      	ldrb	r3, [r3, #2]
 800b416:	613b      	str	r3, [r7, #16]
 800b418:	e010      	b.n	800b43c <sync_window+0x78>
					wsect += fs->fsize;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	69db      	ldr	r3, [r3, #28]
 800b41e:	697a      	ldr	r2, [r7, #20]
 800b420:	4413      	add	r3, r2
 800b422:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	7858      	ldrb	r0, [r3, #1]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b42e:	2301      	movs	r3, #1
 800b430:	697a      	ldr	r2, [r7, #20]
 800b432:	f7ff ff17 	bl	800b264 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	3b01      	subs	r3, #1
 800b43a:	613b      	str	r3, [r7, #16]
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	2b01      	cmp	r3, #1
 800b440:	d8eb      	bhi.n	800b41a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b442:	7bfb      	ldrb	r3, [r7, #15]
}
 800b444:	4618      	mov	r0, r3
 800b446:	3718      	adds	r7, #24
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}

0800b44c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b084      	sub	sp, #16
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b456:	2300      	movs	r3, #0
 800b458:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b45e:	683a      	ldr	r2, [r7, #0]
 800b460:	429a      	cmp	r2, r3
 800b462:	d01b      	beq.n	800b49c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f7ff ffad 	bl	800b3c4 <sync_window>
 800b46a:	4603      	mov	r3, r0
 800b46c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b46e:	7bfb      	ldrb	r3, [r7, #15]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d113      	bne.n	800b49c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	7858      	ldrb	r0, [r3, #1]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b47e:	2301      	movs	r3, #1
 800b480:	683a      	ldr	r2, [r7, #0]
 800b482:	f7ff fecf 	bl	800b224 <disk_read>
 800b486:	4603      	mov	r3, r0
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d004      	beq.n	800b496 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b48c:	f04f 33ff 	mov.w	r3, #4294967295
 800b490:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b492:	2301      	movs	r3, #1
 800b494:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	683a      	ldr	r2, [r7, #0]
 800b49a:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800b49c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3710      	adds	r7, #16
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}

0800b4a6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b4a6:	b580      	push	{r7, lr}
 800b4a8:	b086      	sub	sp, #24
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	6078      	str	r0, [r7, #4]
 800b4ae:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	2b01      	cmp	r3, #1
 800b4ba:	d904      	bls.n	800b4c6 <get_fat+0x20>
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	699b      	ldr	r3, [r3, #24]
 800b4c0:	683a      	ldr	r2, [r7, #0]
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d302      	bcc.n	800b4cc <get_fat+0x26>
		val = 1;	/* Internal error */
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	617b      	str	r3, [r7, #20]
 800b4ca:	e08e      	b.n	800b5ea <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b4cc:	f04f 33ff 	mov.w	r3, #4294967295
 800b4d0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b4d2:	693b      	ldr	r3, [r7, #16]
 800b4d4:	781b      	ldrb	r3, [r3, #0]
 800b4d6:	2b03      	cmp	r3, #3
 800b4d8:	d061      	beq.n	800b59e <get_fat+0xf8>
 800b4da:	2b03      	cmp	r3, #3
 800b4dc:	dc7b      	bgt.n	800b5d6 <get_fat+0x130>
 800b4de:	2b01      	cmp	r3, #1
 800b4e0:	d002      	beq.n	800b4e8 <get_fat+0x42>
 800b4e2:	2b02      	cmp	r3, #2
 800b4e4:	d041      	beq.n	800b56a <get_fat+0xc4>
 800b4e6:	e076      	b.n	800b5d6 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	60fb      	str	r3, [r7, #12]
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	085b      	lsrs	r3, r3, #1
 800b4f0:	68fa      	ldr	r2, [r7, #12]
 800b4f2:	4413      	add	r3, r2
 800b4f4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	0a5b      	lsrs	r3, r3, #9
 800b4fe:	4413      	add	r3, r2
 800b500:	4619      	mov	r1, r3
 800b502:	6938      	ldr	r0, [r7, #16]
 800b504:	f7ff ffa2 	bl	800b44c <move_window>
 800b508:	4603      	mov	r3, r0
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d166      	bne.n	800b5dc <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	1c5a      	adds	r2, r3, #1
 800b512:	60fa      	str	r2, [r7, #12]
 800b514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b518:	693a      	ldr	r2, [r7, #16]
 800b51a:	4413      	add	r3, r2
 800b51c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b520:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	0a5b      	lsrs	r3, r3, #9
 800b52a:	4413      	add	r3, r2
 800b52c:	4619      	mov	r1, r3
 800b52e:	6938      	ldr	r0, [r7, #16]
 800b530:	f7ff ff8c 	bl	800b44c <move_window>
 800b534:	4603      	mov	r3, r0
 800b536:	2b00      	cmp	r3, #0
 800b538:	d152      	bne.n	800b5e0 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b540:	693a      	ldr	r2, [r7, #16]
 800b542:	4413      	add	r3, r2
 800b544:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b548:	021b      	lsls	r3, r3, #8
 800b54a:	68ba      	ldr	r2, [r7, #8]
 800b54c:	4313      	orrs	r3, r2
 800b54e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	f003 0301 	and.w	r3, r3, #1
 800b556:	2b00      	cmp	r3, #0
 800b558:	d002      	beq.n	800b560 <get_fat+0xba>
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	091b      	lsrs	r3, r3, #4
 800b55e:	e002      	b.n	800b566 <get_fat+0xc0>
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b566:	617b      	str	r3, [r7, #20]
			break;
 800b568:	e03f      	b.n	800b5ea <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	0a1b      	lsrs	r3, r3, #8
 800b572:	4413      	add	r3, r2
 800b574:	4619      	mov	r1, r3
 800b576:	6938      	ldr	r0, [r7, #16]
 800b578:	f7ff ff68 	bl	800b44c <move_window>
 800b57c:	4603      	mov	r3, r0
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d130      	bne.n	800b5e4 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	005b      	lsls	r3, r3, #1
 800b58c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b590:	4413      	add	r3, r2
 800b592:	4618      	mov	r0, r3
 800b594:	f7ff fe86 	bl	800b2a4 <ld_word>
 800b598:	4603      	mov	r3, r0
 800b59a:	617b      	str	r3, [r7, #20]
			break;
 800b59c:	e025      	b.n	800b5ea <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	09db      	lsrs	r3, r3, #7
 800b5a6:	4413      	add	r3, r2
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	6938      	ldr	r0, [r7, #16]
 800b5ac:	f7ff ff4e 	bl	800b44c <move_window>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d118      	bne.n	800b5e8 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	009b      	lsls	r3, r3, #2
 800b5c0:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b5c4:	4413      	add	r3, r2
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7ff fe84 	bl	800b2d4 <ld_dword>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b5d2:	617b      	str	r3, [r7, #20]
			break;
 800b5d4:	e009      	b.n	800b5ea <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	617b      	str	r3, [r7, #20]
 800b5da:	e006      	b.n	800b5ea <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b5dc:	bf00      	nop
 800b5de:	e004      	b.n	800b5ea <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b5e0:	bf00      	nop
 800b5e2:	e002      	b.n	800b5ea <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b5e4:	bf00      	nop
 800b5e6:	e000      	b.n	800b5ea <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b5e8:	bf00      	nop
		}
	}

	return val;
 800b5ea:	697b      	ldr	r3, [r7, #20]
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3718      	adds	r7, #24
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b087      	sub	sp, #28
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b5fc:	f04f 33ff 	mov.w	r3, #4294967295
 800b600:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d031      	beq.n	800b66e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	617b      	str	r3, [r7, #20]
 800b610:	e002      	b.n	800b618 <get_ldnumber+0x24>
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	3301      	adds	r3, #1
 800b616:	617b      	str	r3, [r7, #20]
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	781b      	ldrb	r3, [r3, #0]
 800b61c:	2b20      	cmp	r3, #32
 800b61e:	d903      	bls.n	800b628 <get_ldnumber+0x34>
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	2b3a      	cmp	r3, #58	@ 0x3a
 800b626:	d1f4      	bne.n	800b612 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	781b      	ldrb	r3, [r3, #0]
 800b62c:	2b3a      	cmp	r3, #58	@ 0x3a
 800b62e:	d11c      	bne.n	800b66a <get_ldnumber+0x76>
			tp = *path;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	1c5a      	adds	r2, r3, #1
 800b63a:	60fa      	str	r2, [r7, #12]
 800b63c:	781b      	ldrb	r3, [r3, #0]
 800b63e:	3b30      	subs	r3, #48	@ 0x30
 800b640:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	2b09      	cmp	r3, #9
 800b646:	d80e      	bhi.n	800b666 <get_ldnumber+0x72>
 800b648:	68fa      	ldr	r2, [r7, #12]
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d10a      	bne.n	800b666 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d107      	bne.n	800b666 <get_ldnumber+0x72>
					vol = (int)i;
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	3301      	adds	r3, #1
 800b65e:	617b      	str	r3, [r7, #20]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	697a      	ldr	r2, [r7, #20]
 800b664:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	e002      	b.n	800b670 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b66a:	2300      	movs	r3, #0
 800b66c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b66e:	693b      	ldr	r3, [r7, #16]
}
 800b670:	4618      	mov	r0, r3
 800b672:	371c      	adds	r7, #28
 800b674:	46bd      	mov	sp, r7
 800b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67a:	4770      	bx	lr

0800b67c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b082      	sub	sp, #8
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2200      	movs	r2, #0
 800b68a:	70da      	strb	r2, [r3, #3]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f04f 32ff 	mov.w	r2, #4294967295
 800b692:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b694:	6839      	ldr	r1, [r7, #0]
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f7ff fed8 	bl	800b44c <move_window>
 800b69c:	4603      	mov	r3, r0
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d001      	beq.n	800b6a6 <check_fs+0x2a>
 800b6a2:	2304      	movs	r3, #4
 800b6a4:	e038      	b.n	800b718 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	3334      	adds	r3, #52	@ 0x34
 800b6aa:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f7ff fdf8 	bl	800b2a4 <ld_word>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	d001      	beq.n	800b6c4 <check_fs+0x48>
 800b6c0:	2303      	movs	r3, #3
 800b6c2:	e029      	b.n	800b718 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b6ca:	2be9      	cmp	r3, #233	@ 0xe9
 800b6cc:	d009      	beq.n	800b6e2 <check_fs+0x66>
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b6d4:	2beb      	cmp	r3, #235	@ 0xeb
 800b6d6:	d11e      	bne.n	800b716 <check_fs+0x9a>
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800b6de:	2b90      	cmp	r3, #144	@ 0x90
 800b6e0:	d119      	bne.n	800b716 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	3334      	adds	r3, #52	@ 0x34
 800b6e6:	3336      	adds	r3, #54	@ 0x36
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f7ff fdf3 	bl	800b2d4 <ld_dword>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b6f4:	4a0a      	ldr	r2, [pc, #40]	@ (800b720 <check_fs+0xa4>)
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	d101      	bne.n	800b6fe <check_fs+0x82>
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	e00c      	b.n	800b718 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	3334      	adds	r3, #52	@ 0x34
 800b702:	3352      	adds	r3, #82	@ 0x52
 800b704:	4618      	mov	r0, r3
 800b706:	f7ff fde5 	bl	800b2d4 <ld_dword>
 800b70a:	4603      	mov	r3, r0
 800b70c:	4a05      	ldr	r2, [pc, #20]	@ (800b724 <check_fs+0xa8>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d101      	bne.n	800b716 <check_fs+0x9a>
 800b712:	2300      	movs	r3, #0
 800b714:	e000      	b.n	800b718 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b716:	2302      	movs	r3, #2
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3708      	adds	r7, #8
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}
 800b720:	00544146 	.word	0x00544146
 800b724:	33544146 	.word	0x33544146

0800b728 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b096      	sub	sp, #88	@ 0x58
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	60f8      	str	r0, [r7, #12]
 800b730:	60b9      	str	r1, [r7, #8]
 800b732:	4613      	mov	r3, r2
 800b734:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	2200      	movs	r2, #0
 800b73a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b73c:	68f8      	ldr	r0, [r7, #12]
 800b73e:	f7ff ff59 	bl	800b5f4 <get_ldnumber>
 800b742:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b744:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b746:	2b00      	cmp	r3, #0
 800b748:	da01      	bge.n	800b74e <find_volume+0x26>
 800b74a:	230b      	movs	r3, #11
 800b74c:	e235      	b.n	800bbba <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b74e:	4aa5      	ldr	r2, [pc, #660]	@ (800b9e4 <find_volume+0x2bc>)
 800b750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b756:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d101      	bne.n	800b762 <find_volume+0x3a>
 800b75e:	230c      	movs	r3, #12
 800b760:	e22b      	b.n	800bbba <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800b762:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b764:	f7ff fdd9 	bl	800b31a <lock_fs>
 800b768:	4603      	mov	r3, r0
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d101      	bne.n	800b772 <find_volume+0x4a>
 800b76e:	230f      	movs	r3, #15
 800b770:	e223      	b.n	800bbba <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b776:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b778:	79fb      	ldrb	r3, [r7, #7]
 800b77a:	f023 0301 	bic.w	r3, r3, #1
 800b77e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b782:	781b      	ldrb	r3, [r3, #0]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d01a      	beq.n	800b7be <find_volume+0x96>
		stat = disk_status(fs->drv);
 800b788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b78a:	785b      	ldrb	r3, [r3, #1]
 800b78c:	4618      	mov	r0, r3
 800b78e:	f7ff fd07 	bl	800b1a0 <disk_status>
 800b792:	4603      	mov	r3, r0
 800b794:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b798:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b79c:	f003 0301 	and.w	r3, r3, #1
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d10c      	bne.n	800b7be <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b7a4:	79fb      	ldrb	r3, [r7, #7]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d007      	beq.n	800b7ba <find_volume+0x92>
 800b7aa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b7ae:	f003 0304 	and.w	r3, r3, #4
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d001      	beq.n	800b7ba <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800b7b6:	230a      	movs	r3, #10
 800b7b8:	e1ff      	b.n	800bbba <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	e1fd      	b.n	800bbba <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b7be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b7c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7c6:	b2da      	uxtb	r2, r3
 800b7c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ca:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b7cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ce:	785b      	ldrb	r3, [r3, #1]
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f7ff fcff 	bl	800b1d4 <disk_initialize>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b7dc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b7e0:	f003 0301 	and.w	r3, r3, #1
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d001      	beq.n	800b7ec <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b7e8:	2303      	movs	r3, #3
 800b7ea:	e1e6      	b.n	800bbba <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b7ec:	79fb      	ldrb	r3, [r7, #7]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d007      	beq.n	800b802 <find_volume+0xda>
 800b7f2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b7f6:	f003 0304 	and.w	r3, r3, #4
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d001      	beq.n	800b802 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800b7fe:	230a      	movs	r3, #10
 800b800:	e1db      	b.n	800bbba <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b802:	2300      	movs	r3, #0
 800b804:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b806:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b808:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b80a:	f7ff ff37 	bl	800b67c <check_fs>
 800b80e:	4603      	mov	r3, r0
 800b810:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b814:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b818:	2b02      	cmp	r3, #2
 800b81a:	d149      	bne.n	800b8b0 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b81c:	2300      	movs	r3, #0
 800b81e:	643b      	str	r3, [r7, #64]	@ 0x40
 800b820:	e01e      	b.n	800b860 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b824:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b828:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b82a:	011b      	lsls	r3, r3, #4
 800b82c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800b830:	4413      	add	r3, r2
 800b832:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b836:	3304      	adds	r3, #4
 800b838:	781b      	ldrb	r3, [r3, #0]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d006      	beq.n	800b84c <find_volume+0x124>
 800b83e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b840:	3308      	adds	r3, #8
 800b842:	4618      	mov	r0, r3
 800b844:	f7ff fd46 	bl	800b2d4 <ld_dword>
 800b848:	4602      	mov	r2, r0
 800b84a:	e000      	b.n	800b84e <find_volume+0x126>
 800b84c:	2200      	movs	r2, #0
 800b84e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b850:	009b      	lsls	r3, r3, #2
 800b852:	3358      	adds	r3, #88	@ 0x58
 800b854:	443b      	add	r3, r7
 800b856:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b85a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b85c:	3301      	adds	r3, #1
 800b85e:	643b      	str	r3, [r7, #64]	@ 0x40
 800b860:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b862:	2b03      	cmp	r3, #3
 800b864:	d9dd      	bls.n	800b822 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b866:	2300      	movs	r3, #0
 800b868:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800b86a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d002      	beq.n	800b876 <find_volume+0x14e>
 800b870:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b872:	3b01      	subs	r3, #1
 800b874:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b876:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b878:	009b      	lsls	r3, r3, #2
 800b87a:	3358      	adds	r3, #88	@ 0x58
 800b87c:	443b      	add	r3, r7
 800b87e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b882:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b884:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b886:	2b00      	cmp	r3, #0
 800b888:	d005      	beq.n	800b896 <find_volume+0x16e>
 800b88a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b88c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b88e:	f7ff fef5 	bl	800b67c <check_fs>
 800b892:	4603      	mov	r3, r0
 800b894:	e000      	b.n	800b898 <find_volume+0x170>
 800b896:	2303      	movs	r3, #3
 800b898:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b89c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b8a0:	2b01      	cmp	r3, #1
 800b8a2:	d905      	bls.n	800b8b0 <find_volume+0x188>
 800b8a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b8a6:	3301      	adds	r3, #1
 800b8a8:	643b      	str	r3, [r7, #64]	@ 0x40
 800b8aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b8ac:	2b03      	cmp	r3, #3
 800b8ae:	d9e2      	bls.n	800b876 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b8b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b8b4:	2b04      	cmp	r3, #4
 800b8b6:	d101      	bne.n	800b8bc <find_volume+0x194>
 800b8b8:	2301      	movs	r3, #1
 800b8ba:	e17e      	b.n	800bbba <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b8bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b8c0:	2b01      	cmp	r3, #1
 800b8c2:	d901      	bls.n	800b8c8 <find_volume+0x1a0>
 800b8c4:	230d      	movs	r3, #13
 800b8c6:	e178      	b.n	800bbba <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b8c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8ca:	3334      	adds	r3, #52	@ 0x34
 800b8cc:	330b      	adds	r3, #11
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f7ff fce8 	bl	800b2a4 <ld_word>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b8da:	d001      	beq.n	800b8e0 <find_volume+0x1b8>
 800b8dc:	230d      	movs	r3, #13
 800b8de:	e16c      	b.n	800bbba <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b8e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8e2:	3334      	adds	r3, #52	@ 0x34
 800b8e4:	3316      	adds	r3, #22
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f7ff fcdc 	bl	800b2a4 <ld_word>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b8f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d106      	bne.n	800b904 <find_volume+0x1dc>
 800b8f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8f8:	3334      	adds	r3, #52	@ 0x34
 800b8fa:	3324      	adds	r3, #36	@ 0x24
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f7ff fce9 	bl	800b2d4 <ld_dword>
 800b902:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800b904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b906:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b908:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b90a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b90c:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800b910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b912:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b916:	789b      	ldrb	r3, [r3, #2]
 800b918:	2b01      	cmp	r3, #1
 800b91a:	d005      	beq.n	800b928 <find_volume+0x200>
 800b91c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b91e:	789b      	ldrb	r3, [r3, #2]
 800b920:	2b02      	cmp	r3, #2
 800b922:	d001      	beq.n	800b928 <find_volume+0x200>
 800b924:	230d      	movs	r3, #13
 800b926:	e148      	b.n	800bbba <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b92a:	789b      	ldrb	r3, [r3, #2]
 800b92c:	461a      	mov	r2, r3
 800b92e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b930:	fb02 f303 	mul.w	r3, r2, r3
 800b934:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b938:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b93c:	461a      	mov	r2, r3
 800b93e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b940:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b944:	895b      	ldrh	r3, [r3, #10]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d008      	beq.n	800b95c <find_volume+0x234>
 800b94a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b94c:	895b      	ldrh	r3, [r3, #10]
 800b94e:	461a      	mov	r2, r3
 800b950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b952:	895b      	ldrh	r3, [r3, #10]
 800b954:	3b01      	subs	r3, #1
 800b956:	4013      	ands	r3, r2
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d001      	beq.n	800b960 <find_volume+0x238>
 800b95c:	230d      	movs	r3, #13
 800b95e:	e12c      	b.n	800bbba <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b962:	3334      	adds	r3, #52	@ 0x34
 800b964:	3311      	adds	r3, #17
 800b966:	4618      	mov	r0, r3
 800b968:	f7ff fc9c 	bl	800b2a4 <ld_word>
 800b96c:	4603      	mov	r3, r0
 800b96e:	461a      	mov	r2, r3
 800b970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b972:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b976:	891b      	ldrh	r3, [r3, #8]
 800b978:	f003 030f 	and.w	r3, r3, #15
 800b97c:	b29b      	uxth	r3, r3
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d001      	beq.n	800b986 <find_volume+0x25e>
 800b982:	230d      	movs	r3, #13
 800b984:	e119      	b.n	800bbba <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b988:	3334      	adds	r3, #52	@ 0x34
 800b98a:	3313      	adds	r3, #19
 800b98c:	4618      	mov	r0, r3
 800b98e:	f7ff fc89 	bl	800b2a4 <ld_word>
 800b992:	4603      	mov	r3, r0
 800b994:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b996:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d106      	bne.n	800b9aa <find_volume+0x282>
 800b99c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b99e:	3334      	adds	r3, #52	@ 0x34
 800b9a0:	3320      	adds	r3, #32
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f7ff fc96 	bl	800b2d4 <ld_dword>
 800b9a8:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b9aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9ac:	3334      	adds	r3, #52	@ 0x34
 800b9ae:	330e      	adds	r3, #14
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f7ff fc77 	bl	800b2a4 <ld_word>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b9ba:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d101      	bne.n	800b9c4 <find_volume+0x29c>
 800b9c0:	230d      	movs	r3, #13
 800b9c2:	e0fa      	b.n	800bbba <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b9c4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b9c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9c8:	4413      	add	r3, r2
 800b9ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b9cc:	8912      	ldrh	r2, [r2, #8]
 800b9ce:	0912      	lsrs	r2, r2, #4
 800b9d0:	b292      	uxth	r2, r2
 800b9d2:	4413      	add	r3, r2
 800b9d4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b9d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b9d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d204      	bcs.n	800b9e8 <find_volume+0x2c0>
 800b9de:	230d      	movs	r3, #13
 800b9e0:	e0eb      	b.n	800bbba <find_volume+0x492>
 800b9e2:	bf00      	nop
 800b9e4:	20000460 	.word	0x20000460
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b9e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b9ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9ec:	1ad3      	subs	r3, r2, r3
 800b9ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b9f0:	8952      	ldrh	r2, [r2, #10]
 800b9f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b9f6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b9f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d101      	bne.n	800ba02 <find_volume+0x2da>
 800b9fe:	230d      	movs	r3, #13
 800ba00:	e0db      	b.n	800bbba <find_volume+0x492>
		fmt = FS_FAT32;
 800ba02:	2303      	movs	r3, #3
 800ba04:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ba08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba0a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d802      	bhi.n	800ba18 <find_volume+0x2f0>
 800ba12:	2302      	movs	r3, #2
 800ba14:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ba18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba1a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d802      	bhi.n	800ba28 <find_volume+0x300>
 800ba22:	2301      	movs	r3, #1
 800ba24:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ba28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba2a:	1c9a      	adds	r2, r3, #2
 800ba2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba2e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800ba30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba32:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ba34:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ba36:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ba38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba3a:	441a      	add	r2, r3
 800ba3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba3e:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800ba40:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ba42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba44:	441a      	add	r2, r3
 800ba46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba48:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800ba4a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ba4e:	2b03      	cmp	r3, #3
 800ba50:	d11e      	bne.n	800ba90 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ba52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba54:	3334      	adds	r3, #52	@ 0x34
 800ba56:	332a      	adds	r3, #42	@ 0x2a
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f7ff fc23 	bl	800b2a4 <ld_word>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d001      	beq.n	800ba68 <find_volume+0x340>
 800ba64:	230d      	movs	r3, #13
 800ba66:	e0a8      	b.n	800bbba <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ba68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba6a:	891b      	ldrh	r3, [r3, #8]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d001      	beq.n	800ba74 <find_volume+0x34c>
 800ba70:	230d      	movs	r3, #13
 800ba72:	e0a2      	b.n	800bbba <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ba74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba76:	3334      	adds	r3, #52	@ 0x34
 800ba78:	332c      	adds	r3, #44	@ 0x2c
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f7ff fc2a 	bl	800b2d4 <ld_dword>
 800ba80:	4602      	mov	r2, r0
 800ba82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba84:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ba86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba88:	699b      	ldr	r3, [r3, #24]
 800ba8a:	009b      	lsls	r3, r3, #2
 800ba8c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba8e:	e01f      	b.n	800bad0 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ba90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba92:	891b      	ldrh	r3, [r3, #8]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d101      	bne.n	800ba9c <find_volume+0x374>
 800ba98:	230d      	movs	r3, #13
 800ba9a:	e08e      	b.n	800bbba <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ba9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800baa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800baa2:	441a      	add	r2, r3
 800baa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baa6:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800baa8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800baac:	2b02      	cmp	r3, #2
 800baae:	d103      	bne.n	800bab8 <find_volume+0x390>
 800bab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bab2:	699b      	ldr	r3, [r3, #24]
 800bab4:	005b      	lsls	r3, r3, #1
 800bab6:	e00a      	b.n	800bace <find_volume+0x3a6>
 800bab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baba:	699a      	ldr	r2, [r3, #24]
 800babc:	4613      	mov	r3, r2
 800babe:	005b      	lsls	r3, r3, #1
 800bac0:	4413      	add	r3, r2
 800bac2:	085a      	lsrs	r2, r3, #1
 800bac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bac6:	699b      	ldr	r3, [r3, #24]
 800bac8:	f003 0301 	and.w	r3, r3, #1
 800bacc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800bace:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bad2:	69da      	ldr	r2, [r3, #28]
 800bad4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bad6:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800bada:	0a5b      	lsrs	r3, r3, #9
 800badc:	429a      	cmp	r2, r3
 800bade:	d201      	bcs.n	800bae4 <find_volume+0x3bc>
 800bae0:	230d      	movs	r3, #13
 800bae2:	e06a      	b.n	800bbba <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bae6:	f04f 32ff 	mov.w	r2, #4294967295
 800baea:	615a      	str	r2, [r3, #20]
 800baec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baee:	695a      	ldr	r2, [r3, #20]
 800baf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baf2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800baf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baf6:	2280      	movs	r2, #128	@ 0x80
 800baf8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800bafa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bafe:	2b03      	cmp	r3, #3
 800bb00:	d149      	bne.n	800bb96 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bb02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb04:	3334      	adds	r3, #52	@ 0x34
 800bb06:	3330      	adds	r3, #48	@ 0x30
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f7ff fbcb 	bl	800b2a4 <ld_word>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	2b01      	cmp	r3, #1
 800bb12:	d140      	bne.n	800bb96 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800bb14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb16:	3301      	adds	r3, #1
 800bb18:	4619      	mov	r1, r3
 800bb1a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bb1c:	f7ff fc96 	bl	800b44c <move_window>
 800bb20:	4603      	mov	r3, r0
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d137      	bne.n	800bb96 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800bb26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb28:	2200      	movs	r2, #0
 800bb2a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bb2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb2e:	3334      	adds	r3, #52	@ 0x34
 800bb30:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bb34:	4618      	mov	r0, r3
 800bb36:	f7ff fbb5 	bl	800b2a4 <ld_word>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	461a      	mov	r2, r3
 800bb3e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800bb42:	429a      	cmp	r2, r3
 800bb44:	d127      	bne.n	800bb96 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bb46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb48:	3334      	adds	r3, #52	@ 0x34
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f7ff fbc2 	bl	800b2d4 <ld_dword>
 800bb50:	4603      	mov	r3, r0
 800bb52:	4a1c      	ldr	r2, [pc, #112]	@ (800bbc4 <find_volume+0x49c>)
 800bb54:	4293      	cmp	r3, r2
 800bb56:	d11e      	bne.n	800bb96 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bb58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb5a:	3334      	adds	r3, #52	@ 0x34
 800bb5c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800bb60:	4618      	mov	r0, r3
 800bb62:	f7ff fbb7 	bl	800b2d4 <ld_dword>
 800bb66:	4603      	mov	r3, r0
 800bb68:	4a17      	ldr	r2, [pc, #92]	@ (800bbc8 <find_volume+0x4a0>)
 800bb6a:	4293      	cmp	r3, r2
 800bb6c:	d113      	bne.n	800bb96 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bb6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb70:	3334      	adds	r3, #52	@ 0x34
 800bb72:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800bb76:	4618      	mov	r0, r3
 800bb78:	f7ff fbac 	bl	800b2d4 <ld_dword>
 800bb7c:	4602      	mov	r2, r0
 800bb7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb80:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bb82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb84:	3334      	adds	r3, #52	@ 0x34
 800bb86:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f7ff fba2 	bl	800b2d4 <ld_dword>
 800bb90:	4602      	mov	r2, r0
 800bb92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb94:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bb96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb98:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800bb9c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bb9e:	4b0b      	ldr	r3, [pc, #44]	@ (800bbcc <find_volume+0x4a4>)
 800bba0:	881b      	ldrh	r3, [r3, #0]
 800bba2:	3301      	adds	r3, #1
 800bba4:	b29a      	uxth	r2, r3
 800bba6:	4b09      	ldr	r3, [pc, #36]	@ (800bbcc <find_volume+0x4a4>)
 800bba8:	801a      	strh	r2, [r3, #0]
 800bbaa:	4b08      	ldr	r3, [pc, #32]	@ (800bbcc <find_volume+0x4a4>)
 800bbac:	881a      	ldrh	r2, [r3, #0]
 800bbae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbb0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bbb2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bbb4:	f7ff fbe2 	bl	800b37c <clear_lock>
#endif
	return FR_OK;
 800bbb8:	2300      	movs	r3, #0
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3758      	adds	r7, #88	@ 0x58
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}
 800bbc2:	bf00      	nop
 800bbc4:	41615252 	.word	0x41615252
 800bbc8:	61417272 	.word	0x61417272
 800bbcc:	20000464 	.word	0x20000464

0800bbd0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b088      	sub	sp, #32
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	60f8      	str	r0, [r7, #12]
 800bbd8:	60b9      	str	r1, [r7, #8]
 800bbda:	4613      	mov	r3, r2
 800bbdc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800bbe2:	f107 0310 	add.w	r3, r7, #16
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f7ff fd04 	bl	800b5f4 <get_ldnumber>
 800bbec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800bbee:	69fb      	ldr	r3, [r7, #28]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	da01      	bge.n	800bbf8 <f_mount+0x28>
 800bbf4:	230b      	movs	r3, #11
 800bbf6:	e048      	b.n	800bc8a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bbf8:	4a26      	ldr	r2, [pc, #152]	@ (800bc94 <f_mount+0xc4>)
 800bbfa:	69fb      	ldr	r3, [r7, #28]
 800bbfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc00:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800bc02:	69bb      	ldr	r3, [r7, #24]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d00f      	beq.n	800bc28 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800bc08:	69b8      	ldr	r0, [r7, #24]
 800bc0a:	f7ff fbb7 	bl	800b37c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800bc0e:	69bb      	ldr	r3, [r7, #24]
 800bc10:	68db      	ldr	r3, [r3, #12]
 800bc12:	4618      	mov	r0, r3
 800bc14:	f000 f972 	bl	800befc <ff_del_syncobj>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d101      	bne.n	800bc22 <f_mount+0x52>
 800bc1e:	2302      	movs	r3, #2
 800bc20:	e033      	b.n	800bc8a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800bc22:	69bb      	ldr	r3, [r7, #24]
 800bc24:	2200      	movs	r2, #0
 800bc26:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d00f      	beq.n	800bc4e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	2200      	movs	r2, #0
 800bc32:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800bc34:	69fb      	ldr	r3, [r7, #28]
 800bc36:	b2da      	uxtb	r2, r3
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	330c      	adds	r3, #12
 800bc3c:	4619      	mov	r1, r3
 800bc3e:	4610      	mov	r0, r2
 800bc40:	f000 f941 	bl	800bec6 <ff_cre_syncobj>
 800bc44:	4603      	mov	r3, r0
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d101      	bne.n	800bc4e <f_mount+0x7e>
 800bc4a:	2302      	movs	r3, #2
 800bc4c:	e01d      	b.n	800bc8a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bc4e:	68fa      	ldr	r2, [r7, #12]
 800bc50:	4910      	ldr	r1, [pc, #64]	@ (800bc94 <f_mount+0xc4>)
 800bc52:	69fb      	ldr	r3, [r7, #28]
 800bc54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d002      	beq.n	800bc64 <f_mount+0x94>
 800bc5e:	79fb      	ldrb	r3, [r7, #7]
 800bc60:	2b01      	cmp	r3, #1
 800bc62:	d001      	beq.n	800bc68 <f_mount+0x98>
 800bc64:	2300      	movs	r3, #0
 800bc66:	e010      	b.n	800bc8a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800bc68:	f107 010c 	add.w	r1, r7, #12
 800bc6c:	f107 0308 	add.w	r3, r7, #8
 800bc70:	2200      	movs	r2, #0
 800bc72:	4618      	mov	r0, r3
 800bc74:	f7ff fd58 	bl	800b728 <find_volume>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	7dfa      	ldrb	r2, [r7, #23]
 800bc80:	4611      	mov	r1, r2
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7ff fb5f 	bl	800b346 <unlock_fs>
 800bc88:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3720      	adds	r7, #32
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}
 800bc92:	bf00      	nop
 800bc94:	20000460 	.word	0x20000460

0800bc98 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b092      	sub	sp, #72	@ 0x48
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	60f8      	str	r0, [r7, #12]
 800bca0:	60b9      	str	r1, [r7, #8]
 800bca2:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800bca4:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800bca8:	f107 030c 	add.w	r3, r7, #12
 800bcac:	2200      	movs	r2, #0
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f7ff fd3a 	bl	800b728 <find_volume>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800bcba:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	f040 8099 	bne.w	800bdf6 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800bcc4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800bcca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bccc:	695a      	ldr	r2, [r3, #20]
 800bcce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcd0:	699b      	ldr	r3, [r3, #24]
 800bcd2:	3b02      	subs	r3, #2
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	d804      	bhi.n	800bce2 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800bcd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcda:	695a      	ldr	r2, [r3, #20]
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	601a      	str	r2, [r3, #0]
 800bce0:	e089      	b.n	800bdf6 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800bce2:	2300      	movs	r3, #0
 800bce4:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800bce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bce8:	781b      	ldrb	r3, [r3, #0]
 800bcea:	2b01      	cmp	r3, #1
 800bcec:	d128      	bne.n	800bd40 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800bcee:	2302      	movs	r3, #2
 800bcf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bcf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcf4:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800bcf6:	f107 0314 	add.w	r3, r7, #20
 800bcfa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f7ff fbd2 	bl	800b4a6 <get_fat>
 800bd02:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800bd04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd0a:	d103      	bne.n	800bd14 <f_getfree+0x7c>
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800bd12:	e063      	b.n	800bddc <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800bd14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd16:	2b01      	cmp	r3, #1
 800bd18:	d103      	bne.n	800bd22 <f_getfree+0x8a>
 800bd1a:	2302      	movs	r3, #2
 800bd1c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800bd20:	e05c      	b.n	800bddc <f_getfree+0x144>
					if (stat == 0) nfree++;
 800bd22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d102      	bne.n	800bd2e <f_getfree+0x96>
 800bd28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd2a:	3301      	adds	r3, #1
 800bd2c:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800bd2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd30:	3301      	adds	r3, #1
 800bd32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bd34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd36:	699b      	ldr	r3, [r3, #24]
 800bd38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d3db      	bcc.n	800bcf6 <f_getfree+0x5e>
 800bd3e:	e04d      	b.n	800bddc <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800bd40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd42:	699b      	ldr	r3, [r3, #24]
 800bd44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bd46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd4a:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd50:	2300      	movs	r3, #0
 800bd52:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800bd54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d113      	bne.n	800bd82 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800bd5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bd5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd5e:	1c5a      	adds	r2, r3, #1
 800bd60:	63ba      	str	r2, [r7, #56]	@ 0x38
 800bd62:	4619      	mov	r1, r3
 800bd64:	f7ff fb72 	bl	800b44c <move_window>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800bd6e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d131      	bne.n	800bdda <f_getfree+0x142>
							p = fs->win;
 800bd76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd78:	3334      	adds	r3, #52	@ 0x34
 800bd7a:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800bd7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bd80:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800bd82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	2b02      	cmp	r3, #2
 800bd88:	d10f      	bne.n	800bdaa <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800bd8a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bd8c:	f7ff fa8a 	bl	800b2a4 <ld_word>
 800bd90:	4603      	mov	r3, r0
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d102      	bne.n	800bd9c <f_getfree+0x104>
 800bd96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd98:	3301      	adds	r3, #1
 800bd9a:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800bd9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd9e:	3302      	adds	r3, #2
 800bda0:	633b      	str	r3, [r7, #48]	@ 0x30
 800bda2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bda4:	3b02      	subs	r3, #2
 800bda6:	637b      	str	r3, [r7, #52]	@ 0x34
 800bda8:	e010      	b.n	800bdcc <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800bdaa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bdac:	f7ff fa92 	bl	800b2d4 <ld_dword>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d102      	bne.n	800bdc0 <f_getfree+0x128>
 800bdba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800bdc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdc2:	3304      	adds	r3, #4
 800bdc4:	633b      	str	r3, [r7, #48]	@ 0x30
 800bdc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdc8:	3b04      	subs	r3, #4
 800bdca:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800bdcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdce:	3b01      	subs	r3, #1
 800bdd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bdd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d1bd      	bne.n	800bd54 <f_getfree+0xbc>
 800bdd8:	e000      	b.n	800bddc <f_getfree+0x144>
							if (res != FR_OK) break;
 800bdda:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bde0:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800bde2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bde4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bde6:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800bde8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdea:	791a      	ldrb	r2, [r3, #4]
 800bdec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdee:	f042 0201 	orr.w	r2, r2, #1
 800bdf2:	b2d2      	uxtb	r2, r2
 800bdf4:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800bdf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdf8:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800bdfc:	4611      	mov	r1, r2
 800bdfe:	4618      	mov	r0, r3
 800be00:	f7ff faa1 	bl	800b346 <unlock_fs>
 800be04:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3748      	adds	r7, #72	@ 0x48
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}

0800be10 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800be10:	b480      	push	{r7}
 800be12:	b087      	sub	sp, #28
 800be14:	af00      	add	r7, sp, #0
 800be16:	60f8      	str	r0, [r7, #12]
 800be18:	60b9      	str	r1, [r7, #8]
 800be1a:	4613      	mov	r3, r2
 800be1c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800be1e:	2301      	movs	r3, #1
 800be20:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800be22:	2300      	movs	r3, #0
 800be24:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800be26:	4b1f      	ldr	r3, [pc, #124]	@ (800bea4 <FATFS_LinkDriverEx+0x94>)
 800be28:	7a5b      	ldrb	r3, [r3, #9]
 800be2a:	b2db      	uxtb	r3, r3
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d131      	bne.n	800be94 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800be30:	4b1c      	ldr	r3, [pc, #112]	@ (800bea4 <FATFS_LinkDriverEx+0x94>)
 800be32:	7a5b      	ldrb	r3, [r3, #9]
 800be34:	b2db      	uxtb	r3, r3
 800be36:	461a      	mov	r2, r3
 800be38:	4b1a      	ldr	r3, [pc, #104]	@ (800bea4 <FATFS_LinkDriverEx+0x94>)
 800be3a:	2100      	movs	r1, #0
 800be3c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800be3e:	4b19      	ldr	r3, [pc, #100]	@ (800bea4 <FATFS_LinkDriverEx+0x94>)
 800be40:	7a5b      	ldrb	r3, [r3, #9]
 800be42:	b2db      	uxtb	r3, r3
 800be44:	4a17      	ldr	r2, [pc, #92]	@ (800bea4 <FATFS_LinkDriverEx+0x94>)
 800be46:	009b      	lsls	r3, r3, #2
 800be48:	4413      	add	r3, r2
 800be4a:	68fa      	ldr	r2, [r7, #12]
 800be4c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800be4e:	4b15      	ldr	r3, [pc, #84]	@ (800bea4 <FATFS_LinkDriverEx+0x94>)
 800be50:	7a5b      	ldrb	r3, [r3, #9]
 800be52:	b2db      	uxtb	r3, r3
 800be54:	461a      	mov	r2, r3
 800be56:	4b13      	ldr	r3, [pc, #76]	@ (800bea4 <FATFS_LinkDriverEx+0x94>)
 800be58:	4413      	add	r3, r2
 800be5a:	79fa      	ldrb	r2, [r7, #7]
 800be5c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800be5e:	4b11      	ldr	r3, [pc, #68]	@ (800bea4 <FATFS_LinkDriverEx+0x94>)
 800be60:	7a5b      	ldrb	r3, [r3, #9]
 800be62:	b2db      	uxtb	r3, r3
 800be64:	1c5a      	adds	r2, r3, #1
 800be66:	b2d1      	uxtb	r1, r2
 800be68:	4a0e      	ldr	r2, [pc, #56]	@ (800bea4 <FATFS_LinkDriverEx+0x94>)
 800be6a:	7251      	strb	r1, [r2, #9]
 800be6c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800be6e:	7dbb      	ldrb	r3, [r7, #22]
 800be70:	3330      	adds	r3, #48	@ 0x30
 800be72:	b2da      	uxtb	r2, r3
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	3301      	adds	r3, #1
 800be7c:	223a      	movs	r2, #58	@ 0x3a
 800be7e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	3302      	adds	r3, #2
 800be84:	222f      	movs	r2, #47	@ 0x2f
 800be86:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	3303      	adds	r3, #3
 800be8c:	2200      	movs	r2, #0
 800be8e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800be90:	2300      	movs	r3, #0
 800be92:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800be94:	7dfb      	ldrb	r3, [r7, #23]
}
 800be96:	4618      	mov	r0, r3
 800be98:	371c      	adds	r7, #28
 800be9a:	46bd      	mov	sp, r7
 800be9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea0:	4770      	bx	lr
 800bea2:	bf00      	nop
 800bea4:	20000488 	.word	0x20000488

0800bea8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b082      	sub	sp, #8
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800beb2:	2200      	movs	r2, #0
 800beb4:	6839      	ldr	r1, [r7, #0]
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f7ff ffaa 	bl	800be10 <FATFS_LinkDriverEx>
 800bebc:	4603      	mov	r3, r0
}
 800bebe:	4618      	mov	r0, r3
 800bec0:	3708      	adds	r7, #8
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}

0800bec6 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800bec6:	b580      	push	{r7, lr}
 800bec8:	b084      	sub	sp, #16
 800beca:	af00      	add	r7, sp, #0
 800becc:	4603      	mov	r3, r0
 800bece:	6039      	str	r1, [r7, #0]
 800bed0:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800bed2:	2200      	movs	r2, #0
 800bed4:	2101      	movs	r1, #1
 800bed6:	2001      	movs	r0, #1
 800bed8:	f000 f977 	bl	800c1ca <osSemaphoreNew>
 800bedc:	4602      	mov	r2, r0
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	bf14      	ite	ne
 800beea:	2301      	movne	r3, #1
 800beec:	2300      	moveq	r3, #0
 800beee:	b2db      	uxtb	r3, r3
 800bef0:	60fb      	str	r3, [r7, #12]

    return ret;
 800bef2:	68fb      	ldr	r3, [r7, #12]
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	3710      	adds	r7, #16
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}

0800befc <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b082      	sub	sp, #8
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f000 fa7f 	bl	800c408 <osSemaphoreDelete>
#endif
    return 1;
 800bf0a:	2301      	movs	r3, #1
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3708      	adds	r7, #8
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b084      	sub	sp, #16
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800bf20:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f000 f9d9 	bl	800c2dc <osSemaphoreAcquire>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d101      	bne.n	800bf34 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800bf30:	2301      	movs	r3, #1
 800bf32:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800bf34:	68fb      	ldr	r3, [r7, #12]
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3710      	adds	r7, #16
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}

0800bf3e <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800bf3e:	b580      	push	{r7, lr}
 800bf40:	b082      	sub	sp, #8
 800bf42:	af00      	add	r7, sp, #0
 800bf44:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f000 fa1a 	bl	800c380 <osSemaphoreRelease>
#endif
}
 800bf4c:	bf00      	nop
 800bf4e:	3708      	adds	r7, #8
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}

0800bf54 <__NVIC_SetPriority>:
{
 800bf54:	b480      	push	{r7}
 800bf56:	b083      	sub	sp, #12
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	6039      	str	r1, [r7, #0]
 800bf5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bf60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	db0a      	blt.n	800bf7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	b2da      	uxtb	r2, r3
 800bf6c:	490c      	ldr	r1, [pc, #48]	@ (800bfa0 <__NVIC_SetPriority+0x4c>)
 800bf6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf72:	0112      	lsls	r2, r2, #4
 800bf74:	b2d2      	uxtb	r2, r2
 800bf76:	440b      	add	r3, r1
 800bf78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800bf7c:	e00a      	b.n	800bf94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	b2da      	uxtb	r2, r3
 800bf82:	4908      	ldr	r1, [pc, #32]	@ (800bfa4 <__NVIC_SetPriority+0x50>)
 800bf84:	79fb      	ldrb	r3, [r7, #7]
 800bf86:	f003 030f 	and.w	r3, r3, #15
 800bf8a:	3b04      	subs	r3, #4
 800bf8c:	0112      	lsls	r2, r2, #4
 800bf8e:	b2d2      	uxtb	r2, r2
 800bf90:	440b      	add	r3, r1
 800bf92:	761a      	strb	r2, [r3, #24]
}
 800bf94:	bf00      	nop
 800bf96:	370c      	adds	r7, #12
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9e:	4770      	bx	lr
 800bfa0:	e000e100 	.word	0xe000e100
 800bfa4:	e000ed00 	.word	0xe000ed00

0800bfa8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bfac:	4b05      	ldr	r3, [pc, #20]	@ (800bfc4 <SysTick_Handler+0x1c>)
 800bfae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bfb0:	f002 fa1a 	bl	800e3e8 <xTaskGetSchedulerState>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	2b01      	cmp	r3, #1
 800bfb8:	d001      	beq.n	800bfbe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bfba:	f003 f915 	bl	800f1e8 <xPortSysTickHandler>
  }
}
 800bfbe:	bf00      	nop
 800bfc0:	bd80      	pop	{r7, pc}
 800bfc2:	bf00      	nop
 800bfc4:	e000e010 	.word	0xe000e010

0800bfc8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bfcc:	2100      	movs	r1, #0
 800bfce:	f06f 0004 	mvn.w	r0, #4
 800bfd2:	f7ff ffbf 	bl	800bf54 <__NVIC_SetPriority>
#endif
}
 800bfd6:	bf00      	nop
 800bfd8:	bd80      	pop	{r7, pc}
	...

0800bfdc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bfdc:	b480      	push	{r7}
 800bfde:	b083      	sub	sp, #12
 800bfe0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bfe2:	f3ef 8305 	mrs	r3, IPSR
 800bfe6:	603b      	str	r3, [r7, #0]
  return(result);
 800bfe8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d003      	beq.n	800bff6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bfee:	f06f 0305 	mvn.w	r3, #5
 800bff2:	607b      	str	r3, [r7, #4]
 800bff4:	e00c      	b.n	800c010 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bff6:	4b0a      	ldr	r3, [pc, #40]	@ (800c020 <osKernelInitialize+0x44>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d105      	bne.n	800c00a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bffe:	4b08      	ldr	r3, [pc, #32]	@ (800c020 <osKernelInitialize+0x44>)
 800c000:	2201      	movs	r2, #1
 800c002:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c004:	2300      	movs	r3, #0
 800c006:	607b      	str	r3, [r7, #4]
 800c008:	e002      	b.n	800c010 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c00a:	f04f 33ff 	mov.w	r3, #4294967295
 800c00e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c010:	687b      	ldr	r3, [r7, #4]
}
 800c012:	4618      	mov	r0, r3
 800c014:	370c      	adds	r7, #12
 800c016:	46bd      	mov	sp, r7
 800c018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01c:	4770      	bx	lr
 800c01e:	bf00      	nop
 800c020:	20000494 	.word	0x20000494

0800c024 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c024:	b580      	push	{r7, lr}
 800c026:	b082      	sub	sp, #8
 800c028:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c02a:	f3ef 8305 	mrs	r3, IPSR
 800c02e:	603b      	str	r3, [r7, #0]
  return(result);
 800c030:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c032:	2b00      	cmp	r3, #0
 800c034:	d003      	beq.n	800c03e <osKernelStart+0x1a>
    stat = osErrorISR;
 800c036:	f06f 0305 	mvn.w	r3, #5
 800c03a:	607b      	str	r3, [r7, #4]
 800c03c:	e010      	b.n	800c060 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c03e:	4b0b      	ldr	r3, [pc, #44]	@ (800c06c <osKernelStart+0x48>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	2b01      	cmp	r3, #1
 800c044:	d109      	bne.n	800c05a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c046:	f7ff ffbf 	bl	800bfc8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c04a:	4b08      	ldr	r3, [pc, #32]	@ (800c06c <osKernelStart+0x48>)
 800c04c:	2202      	movs	r2, #2
 800c04e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c050:	f001 fd66 	bl	800db20 <vTaskStartScheduler>
      stat = osOK;
 800c054:	2300      	movs	r3, #0
 800c056:	607b      	str	r3, [r7, #4]
 800c058:	e002      	b.n	800c060 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c05a:	f04f 33ff 	mov.w	r3, #4294967295
 800c05e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c060:	687b      	ldr	r3, [r7, #4]
}
 800c062:	4618      	mov	r0, r3
 800c064:	3708      	adds	r7, #8
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}
 800c06a:	bf00      	nop
 800c06c:	20000494 	.word	0x20000494

0800c070 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c070:	b580      	push	{r7, lr}
 800c072:	b08e      	sub	sp, #56	@ 0x38
 800c074:	af04      	add	r7, sp, #16
 800c076:	60f8      	str	r0, [r7, #12]
 800c078:	60b9      	str	r1, [r7, #8]
 800c07a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c07c:	2300      	movs	r3, #0
 800c07e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c080:	f3ef 8305 	mrs	r3, IPSR
 800c084:	617b      	str	r3, [r7, #20]
  return(result);
 800c086:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d17e      	bne.n	800c18a <osThreadNew+0x11a>
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d07b      	beq.n	800c18a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c092:	2380      	movs	r3, #128	@ 0x80
 800c094:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c096:	2318      	movs	r3, #24
 800c098:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c09a:	2300      	movs	r3, #0
 800c09c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800c09e:	f04f 33ff 	mov.w	r3, #4294967295
 800c0a2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d045      	beq.n	800c136 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d002      	beq.n	800c0b8 <osThreadNew+0x48>
        name = attr->name;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	699b      	ldr	r3, [r3, #24]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d002      	beq.n	800c0c6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	699b      	ldr	r3, [r3, #24]
 800c0c4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c0c6:	69fb      	ldr	r3, [r7, #28]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d008      	beq.n	800c0de <osThreadNew+0x6e>
 800c0cc:	69fb      	ldr	r3, [r7, #28]
 800c0ce:	2b38      	cmp	r3, #56	@ 0x38
 800c0d0:	d805      	bhi.n	800c0de <osThreadNew+0x6e>
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	685b      	ldr	r3, [r3, #4]
 800c0d6:	f003 0301 	and.w	r3, r3, #1
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d001      	beq.n	800c0e2 <osThreadNew+0x72>
        return (NULL);
 800c0de:	2300      	movs	r3, #0
 800c0e0:	e054      	b.n	800c18c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	695b      	ldr	r3, [r3, #20]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d003      	beq.n	800c0f2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	695b      	ldr	r3, [r3, #20]
 800c0ee:	089b      	lsrs	r3, r3, #2
 800c0f0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	689b      	ldr	r3, [r3, #8]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d00e      	beq.n	800c118 <osThreadNew+0xa8>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	68db      	ldr	r3, [r3, #12]
 800c0fe:	2ba7      	cmp	r3, #167	@ 0xa7
 800c100:	d90a      	bls.n	800c118 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c106:	2b00      	cmp	r3, #0
 800c108:	d006      	beq.n	800c118 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	695b      	ldr	r3, [r3, #20]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d002      	beq.n	800c118 <osThreadNew+0xa8>
        mem = 1;
 800c112:	2301      	movs	r3, #1
 800c114:	61bb      	str	r3, [r7, #24]
 800c116:	e010      	b.n	800c13a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	689b      	ldr	r3, [r3, #8]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d10c      	bne.n	800c13a <osThreadNew+0xca>
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	68db      	ldr	r3, [r3, #12]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d108      	bne.n	800c13a <osThreadNew+0xca>
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	691b      	ldr	r3, [r3, #16]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d104      	bne.n	800c13a <osThreadNew+0xca>
          mem = 0;
 800c130:	2300      	movs	r3, #0
 800c132:	61bb      	str	r3, [r7, #24]
 800c134:	e001      	b.n	800c13a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c136:	2300      	movs	r3, #0
 800c138:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c13a:	69bb      	ldr	r3, [r7, #24]
 800c13c:	2b01      	cmp	r3, #1
 800c13e:	d110      	bne.n	800c162 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c144:	687a      	ldr	r2, [r7, #4]
 800c146:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c148:	9202      	str	r2, [sp, #8]
 800c14a:	9301      	str	r3, [sp, #4]
 800c14c:	69fb      	ldr	r3, [r7, #28]
 800c14e:	9300      	str	r3, [sp, #0]
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	6a3a      	ldr	r2, [r7, #32]
 800c154:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c156:	68f8      	ldr	r0, [r7, #12]
 800c158:	f001 faee 	bl	800d738 <xTaskCreateStatic>
 800c15c:	4603      	mov	r3, r0
 800c15e:	613b      	str	r3, [r7, #16]
 800c160:	e013      	b.n	800c18a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c162:	69bb      	ldr	r3, [r7, #24]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d110      	bne.n	800c18a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c168:	6a3b      	ldr	r3, [r7, #32]
 800c16a:	b29a      	uxth	r2, r3
 800c16c:	f107 0310 	add.w	r3, r7, #16
 800c170:	9301      	str	r3, [sp, #4]
 800c172:	69fb      	ldr	r3, [r7, #28]
 800c174:	9300      	str	r3, [sp, #0]
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c17a:	68f8      	ldr	r0, [r7, #12]
 800c17c:	f001 fb3c 	bl	800d7f8 <xTaskCreate>
 800c180:	4603      	mov	r3, r0
 800c182:	2b01      	cmp	r3, #1
 800c184:	d001      	beq.n	800c18a <osThreadNew+0x11a>
            hTask = NULL;
 800c186:	2300      	movs	r3, #0
 800c188:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c18a:	693b      	ldr	r3, [r7, #16]
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3728      	adds	r7, #40	@ 0x28
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}

0800c194 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c194:	b580      	push	{r7, lr}
 800c196:	b084      	sub	sp, #16
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c19c:	f3ef 8305 	mrs	r3, IPSR
 800c1a0:	60bb      	str	r3, [r7, #8]
  return(result);
 800c1a2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d003      	beq.n	800c1b0 <osDelay+0x1c>
    stat = osErrorISR;
 800c1a8:	f06f 0305 	mvn.w	r3, #5
 800c1ac:	60fb      	str	r3, [r7, #12]
 800c1ae:	e007      	b.n	800c1c0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d002      	beq.n	800c1c0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f001 fc7a 	bl	800dab4 <vTaskDelay>
    }
  }

  return (stat);
 800c1c0:	68fb      	ldr	r3, [r7, #12]
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3710      	adds	r7, #16
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}

0800c1ca <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c1ca:	b580      	push	{r7, lr}
 800c1cc:	b08a      	sub	sp, #40	@ 0x28
 800c1ce:	af02      	add	r7, sp, #8
 800c1d0:	60f8      	str	r0, [r7, #12]
 800c1d2:	60b9      	str	r1, [r7, #8]
 800c1d4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1da:	f3ef 8305 	mrs	r3, IPSR
 800c1de:	613b      	str	r3, [r7, #16]
  return(result);
 800c1e0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d175      	bne.n	800c2d2 <osSemaphoreNew+0x108>
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d072      	beq.n	800c2d2 <osSemaphoreNew+0x108>
 800c1ec:	68ba      	ldr	r2, [r7, #8]
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	d86e      	bhi.n	800c2d2 <osSemaphoreNew+0x108>
    mem = -1;
 800c1f4:	f04f 33ff 	mov.w	r3, #4294967295
 800c1f8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d015      	beq.n	800c22c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	689b      	ldr	r3, [r3, #8]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d006      	beq.n	800c216 <osSemaphoreNew+0x4c>
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	68db      	ldr	r3, [r3, #12]
 800c20c:	2b4f      	cmp	r3, #79	@ 0x4f
 800c20e:	d902      	bls.n	800c216 <osSemaphoreNew+0x4c>
        mem = 1;
 800c210:	2301      	movs	r3, #1
 800c212:	61bb      	str	r3, [r7, #24]
 800c214:	e00c      	b.n	800c230 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	689b      	ldr	r3, [r3, #8]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d108      	bne.n	800c230 <osSemaphoreNew+0x66>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	68db      	ldr	r3, [r3, #12]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d104      	bne.n	800c230 <osSemaphoreNew+0x66>
          mem = 0;
 800c226:	2300      	movs	r3, #0
 800c228:	61bb      	str	r3, [r7, #24]
 800c22a:	e001      	b.n	800c230 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800c22c:	2300      	movs	r3, #0
 800c22e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800c230:	69bb      	ldr	r3, [r7, #24]
 800c232:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c236:	d04c      	beq.n	800c2d2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	2b01      	cmp	r3, #1
 800c23c:	d128      	bne.n	800c290 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800c23e:	69bb      	ldr	r3, [r7, #24]
 800c240:	2b01      	cmp	r3, #1
 800c242:	d10a      	bne.n	800c25a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	689b      	ldr	r3, [r3, #8]
 800c248:	2203      	movs	r2, #3
 800c24a:	9200      	str	r2, [sp, #0]
 800c24c:	2200      	movs	r2, #0
 800c24e:	2100      	movs	r1, #0
 800c250:	2001      	movs	r0, #1
 800c252:	f000 faaf 	bl	800c7b4 <xQueueGenericCreateStatic>
 800c256:	61f8      	str	r0, [r7, #28]
 800c258:	e005      	b.n	800c266 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800c25a:	2203      	movs	r2, #3
 800c25c:	2100      	movs	r1, #0
 800c25e:	2001      	movs	r0, #1
 800c260:	f000 fb25 	bl	800c8ae <xQueueGenericCreate>
 800c264:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c266:	69fb      	ldr	r3, [r7, #28]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d022      	beq.n	800c2b2 <osSemaphoreNew+0xe8>
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d01f      	beq.n	800c2b2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c272:	2300      	movs	r3, #0
 800c274:	2200      	movs	r2, #0
 800c276:	2100      	movs	r1, #0
 800c278:	69f8      	ldr	r0, [r7, #28]
 800c27a:	f000 fbe5 	bl	800ca48 <xQueueGenericSend>
 800c27e:	4603      	mov	r3, r0
 800c280:	2b01      	cmp	r3, #1
 800c282:	d016      	beq.n	800c2b2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800c284:	69f8      	ldr	r0, [r7, #28]
 800c286:	f001 f883 	bl	800d390 <vQueueDelete>
            hSemaphore = NULL;
 800c28a:	2300      	movs	r3, #0
 800c28c:	61fb      	str	r3, [r7, #28]
 800c28e:	e010      	b.n	800c2b2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800c290:	69bb      	ldr	r3, [r7, #24]
 800c292:	2b01      	cmp	r3, #1
 800c294:	d108      	bne.n	800c2a8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	689b      	ldr	r3, [r3, #8]
 800c29a:	461a      	mov	r2, r3
 800c29c:	68b9      	ldr	r1, [r7, #8]
 800c29e:	68f8      	ldr	r0, [r7, #12]
 800c2a0:	f000 fb63 	bl	800c96a <xQueueCreateCountingSemaphoreStatic>
 800c2a4:	61f8      	str	r0, [r7, #28]
 800c2a6:	e004      	b.n	800c2b2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c2a8:	68b9      	ldr	r1, [r7, #8]
 800c2aa:	68f8      	ldr	r0, [r7, #12]
 800c2ac:	f000 fb96 	bl	800c9dc <xQueueCreateCountingSemaphore>
 800c2b0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c2b2:	69fb      	ldr	r3, [r7, #28]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d00c      	beq.n	800c2d2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d003      	beq.n	800c2c6 <osSemaphoreNew+0xfc>
          name = attr->name;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	617b      	str	r3, [r7, #20]
 800c2c4:	e001      	b.n	800c2ca <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c2ca:	6979      	ldr	r1, [r7, #20]
 800c2cc:	69f8      	ldr	r0, [r7, #28]
 800c2ce:	f001 f9ab 	bl	800d628 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800c2d2:	69fb      	ldr	r3, [r7, #28]
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	3720      	adds	r7, #32
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}

0800c2dc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b086      	sub	sp, #24
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
 800c2e4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c2ee:	693b      	ldr	r3, [r7, #16]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d103      	bne.n	800c2fc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800c2f4:	f06f 0303 	mvn.w	r3, #3
 800c2f8:	617b      	str	r3, [r7, #20]
 800c2fa:	e039      	b.n	800c370 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2fc:	f3ef 8305 	mrs	r3, IPSR
 800c300:	60fb      	str	r3, [r7, #12]
  return(result);
 800c302:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c304:	2b00      	cmp	r3, #0
 800c306:	d022      	beq.n	800c34e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d003      	beq.n	800c316 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800c30e:	f06f 0303 	mvn.w	r3, #3
 800c312:	617b      	str	r3, [r7, #20]
 800c314:	e02c      	b.n	800c370 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800c316:	2300      	movs	r3, #0
 800c318:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c31a:	f107 0308 	add.w	r3, r7, #8
 800c31e:	461a      	mov	r2, r3
 800c320:	2100      	movs	r1, #0
 800c322:	6938      	ldr	r0, [r7, #16]
 800c324:	f000 ffb2 	bl	800d28c <xQueueReceiveFromISR>
 800c328:	4603      	mov	r3, r0
 800c32a:	2b01      	cmp	r3, #1
 800c32c:	d003      	beq.n	800c336 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800c32e:	f06f 0302 	mvn.w	r3, #2
 800c332:	617b      	str	r3, [r7, #20]
 800c334:	e01c      	b.n	800c370 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d019      	beq.n	800c370 <osSemaphoreAcquire+0x94>
 800c33c:	4b0f      	ldr	r3, [pc, #60]	@ (800c37c <osSemaphoreAcquire+0xa0>)
 800c33e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c342:	601a      	str	r2, [r3, #0]
 800c344:	f3bf 8f4f 	dsb	sy
 800c348:	f3bf 8f6f 	isb	sy
 800c34c:	e010      	b.n	800c370 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c34e:	6839      	ldr	r1, [r7, #0]
 800c350:	6938      	ldr	r0, [r7, #16]
 800c352:	f000 fe8b 	bl	800d06c <xQueueSemaphoreTake>
 800c356:	4603      	mov	r3, r0
 800c358:	2b01      	cmp	r3, #1
 800c35a:	d009      	beq.n	800c370 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d003      	beq.n	800c36a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800c362:	f06f 0301 	mvn.w	r3, #1
 800c366:	617b      	str	r3, [r7, #20]
 800c368:	e002      	b.n	800c370 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800c36a:	f06f 0302 	mvn.w	r3, #2
 800c36e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c370:	697b      	ldr	r3, [r7, #20]
}
 800c372:	4618      	mov	r0, r3
 800c374:	3718      	adds	r7, #24
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}
 800c37a:	bf00      	nop
 800c37c:	e000ed04 	.word	0xe000ed04

0800c380 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c380:	b580      	push	{r7, lr}
 800c382:	b086      	sub	sp, #24
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c38c:	2300      	movs	r3, #0
 800c38e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d103      	bne.n	800c39e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800c396:	f06f 0303 	mvn.w	r3, #3
 800c39a:	617b      	str	r3, [r7, #20]
 800c39c:	e02c      	b.n	800c3f8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c39e:	f3ef 8305 	mrs	r3, IPSR
 800c3a2:	60fb      	str	r3, [r7, #12]
  return(result);
 800c3a4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d01a      	beq.n	800c3e0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c3ae:	f107 0308 	add.w	r3, r7, #8
 800c3b2:	4619      	mov	r1, r3
 800c3b4:	6938      	ldr	r0, [r7, #16]
 800c3b6:	f000 fce7 	bl	800cd88 <xQueueGiveFromISR>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	2b01      	cmp	r3, #1
 800c3be:	d003      	beq.n	800c3c8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800c3c0:	f06f 0302 	mvn.w	r3, #2
 800c3c4:	617b      	str	r3, [r7, #20]
 800c3c6:	e017      	b.n	800c3f8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d014      	beq.n	800c3f8 <osSemaphoreRelease+0x78>
 800c3ce:	4b0d      	ldr	r3, [pc, #52]	@ (800c404 <osSemaphoreRelease+0x84>)
 800c3d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c3d4:	601a      	str	r2, [r3, #0]
 800c3d6:	f3bf 8f4f 	dsb	sy
 800c3da:	f3bf 8f6f 	isb	sy
 800c3de:	e00b      	b.n	800c3f8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	2100      	movs	r1, #0
 800c3e6:	6938      	ldr	r0, [r7, #16]
 800c3e8:	f000 fb2e 	bl	800ca48 <xQueueGenericSend>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	2b01      	cmp	r3, #1
 800c3f0:	d002      	beq.n	800c3f8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800c3f2:	f06f 0302 	mvn.w	r3, #2
 800c3f6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800c3f8:	697b      	ldr	r3, [r7, #20]
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	3718      	adds	r7, #24
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}
 800c402:	bf00      	nop
 800c404:	e000ed04 	.word	0xe000ed04

0800c408 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800c408:	b580      	push	{r7, lr}
 800c40a:	b086      	sub	sp, #24
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c414:	f3ef 8305 	mrs	r3, IPSR
 800c418:	60fb      	str	r3, [r7, #12]
  return(result);
 800c41a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d003      	beq.n	800c428 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800c420:	f06f 0305 	mvn.w	r3, #5
 800c424:	617b      	str	r3, [r7, #20]
 800c426:	e00e      	b.n	800c446 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d103      	bne.n	800c436 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800c42e:	f06f 0303 	mvn.w	r3, #3
 800c432:	617b      	str	r3, [r7, #20]
 800c434:	e007      	b.n	800c446 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800c436:	6938      	ldr	r0, [r7, #16]
 800c438:	f001 f920 	bl	800d67c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800c43c:	2300      	movs	r3, #0
 800c43e:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800c440:	6938      	ldr	r0, [r7, #16]
 800c442:	f000 ffa5 	bl	800d390 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800c446:	697b      	ldr	r3, [r7, #20]
}
 800c448:	4618      	mov	r0, r3
 800c44a:	3718      	adds	r7, #24
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}

0800c450 <osMessageQueuePut>:
  }

  return ((osMessageQueueId_t)hQueue);
}

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c450:	b580      	push	{r7, lr}
 800c452:	b088      	sub	sp, #32
 800c454:	af00      	add	r7, sp, #0
 800c456:	60f8      	str	r0, [r7, #12]
 800c458:	60b9      	str	r1, [r7, #8]
 800c45a:	603b      	str	r3, [r7, #0]
 800c45c:	4613      	mov	r3, r2
 800c45e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c464:	2300      	movs	r3, #0
 800c466:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c468:	f3ef 8305 	mrs	r3, IPSR
 800c46c:	617b      	str	r3, [r7, #20]
  return(result);
 800c46e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c470:	2b00      	cmp	r3, #0
 800c472:	d028      	beq.n	800c4c6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c474:	69bb      	ldr	r3, [r7, #24]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d005      	beq.n	800c486 <osMessageQueuePut+0x36>
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d002      	beq.n	800c486 <osMessageQueuePut+0x36>
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d003      	beq.n	800c48e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c486:	f06f 0303 	mvn.w	r3, #3
 800c48a:	61fb      	str	r3, [r7, #28]
 800c48c:	e038      	b.n	800c500 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c48e:	2300      	movs	r3, #0
 800c490:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c492:	f107 0210 	add.w	r2, r7, #16
 800c496:	2300      	movs	r3, #0
 800c498:	68b9      	ldr	r1, [r7, #8]
 800c49a:	69b8      	ldr	r0, [r7, #24]
 800c49c:	f000 fbd6 	bl	800cc4c <xQueueGenericSendFromISR>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	2b01      	cmp	r3, #1
 800c4a4:	d003      	beq.n	800c4ae <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c4a6:	f06f 0302 	mvn.w	r3, #2
 800c4aa:	61fb      	str	r3, [r7, #28]
 800c4ac:	e028      	b.n	800c500 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d025      	beq.n	800c500 <osMessageQueuePut+0xb0>
 800c4b4:	4b15      	ldr	r3, [pc, #84]	@ (800c50c <osMessageQueuePut+0xbc>)
 800c4b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c4ba:	601a      	str	r2, [r3, #0]
 800c4bc:	f3bf 8f4f 	dsb	sy
 800c4c0:	f3bf 8f6f 	isb	sy
 800c4c4:	e01c      	b.n	800c500 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c4c6:	69bb      	ldr	r3, [r7, #24]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d002      	beq.n	800c4d2 <osMessageQueuePut+0x82>
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d103      	bne.n	800c4da <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c4d2:	f06f 0303 	mvn.w	r3, #3
 800c4d6:	61fb      	str	r3, [r7, #28]
 800c4d8:	e012      	b.n	800c500 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c4da:	2300      	movs	r3, #0
 800c4dc:	683a      	ldr	r2, [r7, #0]
 800c4de:	68b9      	ldr	r1, [r7, #8]
 800c4e0:	69b8      	ldr	r0, [r7, #24]
 800c4e2:	f000 fab1 	bl	800ca48 <xQueueGenericSend>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	2b01      	cmp	r3, #1
 800c4ea:	d009      	beq.n	800c500 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d003      	beq.n	800c4fa <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c4f2:	f06f 0301 	mvn.w	r3, #1
 800c4f6:	61fb      	str	r3, [r7, #28]
 800c4f8:	e002      	b.n	800c500 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c4fa:	f06f 0302 	mvn.w	r3, #2
 800c4fe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c500:	69fb      	ldr	r3, [r7, #28]
}
 800c502:	4618      	mov	r0, r3
 800c504:	3720      	adds	r7, #32
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}
 800c50a:	bf00      	nop
 800c50c:	e000ed04 	.word	0xe000ed04

0800c510 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c510:	b480      	push	{r7}
 800c512:	b085      	sub	sp, #20
 800c514:	af00      	add	r7, sp, #0
 800c516:	60f8      	str	r0, [r7, #12]
 800c518:	60b9      	str	r1, [r7, #8]
 800c51a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	4a07      	ldr	r2, [pc, #28]	@ (800c53c <vApplicationGetIdleTaskMemory+0x2c>)
 800c520:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	4a06      	ldr	r2, [pc, #24]	@ (800c540 <vApplicationGetIdleTaskMemory+0x30>)
 800c526:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2280      	movs	r2, #128	@ 0x80
 800c52c:	601a      	str	r2, [r3, #0]
}
 800c52e:	bf00      	nop
 800c530:	3714      	adds	r7, #20
 800c532:	46bd      	mov	sp, r7
 800c534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c538:	4770      	bx	lr
 800c53a:	bf00      	nop
 800c53c:	20000498 	.word	0x20000498
 800c540:	20000540 	.word	0x20000540

0800c544 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c544:	b480      	push	{r7}
 800c546:	b085      	sub	sp, #20
 800c548:	af00      	add	r7, sp, #0
 800c54a:	60f8      	str	r0, [r7, #12]
 800c54c:	60b9      	str	r1, [r7, #8]
 800c54e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	4a07      	ldr	r2, [pc, #28]	@ (800c570 <vApplicationGetTimerTaskMemory+0x2c>)
 800c554:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	4a06      	ldr	r2, [pc, #24]	@ (800c574 <vApplicationGetTimerTaskMemory+0x30>)
 800c55a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c562:	601a      	str	r2, [r3, #0]
}
 800c564:	bf00      	nop
 800c566:	3714      	adds	r7, #20
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr
 800c570:	20000740 	.word	0x20000740
 800c574:	200007e8 	.word	0x200007e8

0800c578 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c578:	b480      	push	{r7}
 800c57a:	b083      	sub	sp, #12
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f103 0208 	add.w	r2, r3, #8
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f04f 32ff 	mov.w	r2, #4294967295
 800c590:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f103 0208 	add.w	r2, r3, #8
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f103 0208 	add.w	r2, r3, #8
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c5ac:	bf00      	nop
 800c5ae:	370c      	adds	r7, #12
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b6:	4770      	bx	lr

0800c5b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b083      	sub	sp, #12
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c5c6:	bf00      	nop
 800c5c8:	370c      	adds	r7, #12
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d0:	4770      	bx	lr

0800c5d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c5d2:	b480      	push	{r7}
 800c5d4:	b085      	sub	sp, #20
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	6078      	str	r0, [r7, #4]
 800c5da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	685b      	ldr	r3, [r3, #4]
 800c5e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	68fa      	ldr	r2, [r7, #12]
 800c5e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	689a      	ldr	r2, [r3, #8]
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	689b      	ldr	r3, [r3, #8]
 800c5f4:	683a      	ldr	r2, [r7, #0]
 800c5f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	683a      	ldr	r2, [r7, #0]
 800c5fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	687a      	ldr	r2, [r7, #4]
 800c602:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	1c5a      	adds	r2, r3, #1
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	601a      	str	r2, [r3, #0]
}
 800c60e:	bf00      	nop
 800c610:	3714      	adds	r7, #20
 800c612:	46bd      	mov	sp, r7
 800c614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c618:	4770      	bx	lr

0800c61a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c61a:	b480      	push	{r7}
 800c61c:	b085      	sub	sp, #20
 800c61e:	af00      	add	r7, sp, #0
 800c620:	6078      	str	r0, [r7, #4]
 800c622:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c630:	d103      	bne.n	800c63a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	691b      	ldr	r3, [r3, #16]
 800c636:	60fb      	str	r3, [r7, #12]
 800c638:	e00c      	b.n	800c654 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	3308      	adds	r3, #8
 800c63e:	60fb      	str	r3, [r7, #12]
 800c640:	e002      	b.n	800c648 <vListInsert+0x2e>
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	685b      	ldr	r3, [r3, #4]
 800c646:	60fb      	str	r3, [r7, #12]
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	685b      	ldr	r3, [r3, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	68ba      	ldr	r2, [r7, #8]
 800c650:	429a      	cmp	r2, r3
 800c652:	d2f6      	bcs.n	800c642 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	685a      	ldr	r2, [r3, #4]
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	685b      	ldr	r3, [r3, #4]
 800c660:	683a      	ldr	r2, [r7, #0]
 800c662:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	68fa      	ldr	r2, [r7, #12]
 800c668:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	683a      	ldr	r2, [r7, #0]
 800c66e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	687a      	ldr	r2, [r7, #4]
 800c674:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	1c5a      	adds	r2, r3, #1
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	601a      	str	r2, [r3, #0]
}
 800c680:	bf00      	nop
 800c682:	3714      	adds	r7, #20
 800c684:	46bd      	mov	sp, r7
 800c686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68a:	4770      	bx	lr

0800c68c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c68c:	b480      	push	{r7}
 800c68e:	b085      	sub	sp, #20
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	691b      	ldr	r3, [r3, #16]
 800c698:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	685b      	ldr	r3, [r3, #4]
 800c69e:	687a      	ldr	r2, [r7, #4]
 800c6a0:	6892      	ldr	r2, [r2, #8]
 800c6a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	689b      	ldr	r3, [r3, #8]
 800c6a8:	687a      	ldr	r2, [r7, #4]
 800c6aa:	6852      	ldr	r2, [r2, #4]
 800c6ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	685b      	ldr	r3, [r3, #4]
 800c6b2:	687a      	ldr	r2, [r7, #4]
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d103      	bne.n	800c6c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	689a      	ldr	r2, [r3, #8]
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	1e5a      	subs	r2, r3, #1
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	681b      	ldr	r3, [r3, #0]
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3714      	adds	r7, #20
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr

0800c6e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b084      	sub	sp, #16
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
 800c6e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d10b      	bne.n	800c70c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c6f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6f8:	f383 8811 	msr	BASEPRI, r3
 800c6fc:	f3bf 8f6f 	isb	sy
 800c700:	f3bf 8f4f 	dsb	sy
 800c704:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c706:	bf00      	nop
 800c708:	bf00      	nop
 800c70a:	e7fd      	b.n	800c708 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c70c:	f002 fcdc 	bl	800f0c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	681a      	ldr	r2, [r3, #0]
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c718:	68f9      	ldr	r1, [r7, #12]
 800c71a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c71c:	fb01 f303 	mul.w	r3, r1, r3
 800c720:	441a      	add	r2, r3
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	2200      	movs	r2, #0
 800c72a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	681a      	ldr	r2, [r3, #0]
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	681a      	ldr	r2, [r3, #0]
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c73c:	3b01      	subs	r3, #1
 800c73e:	68f9      	ldr	r1, [r7, #12]
 800c740:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c742:	fb01 f303 	mul.w	r3, r1, r3
 800c746:	441a      	add	r2, r3
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	22ff      	movs	r2, #255	@ 0xff
 800c750:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	22ff      	movs	r2, #255	@ 0xff
 800c758:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d114      	bne.n	800c78c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	691b      	ldr	r3, [r3, #16]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d01a      	beq.n	800c7a0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	3310      	adds	r3, #16
 800c76e:	4618      	mov	r0, r3
 800c770:	f001 fc74 	bl	800e05c <xTaskRemoveFromEventList>
 800c774:	4603      	mov	r3, r0
 800c776:	2b00      	cmp	r3, #0
 800c778:	d012      	beq.n	800c7a0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c77a:	4b0d      	ldr	r3, [pc, #52]	@ (800c7b0 <xQueueGenericReset+0xd0>)
 800c77c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c780:	601a      	str	r2, [r3, #0]
 800c782:	f3bf 8f4f 	dsb	sy
 800c786:	f3bf 8f6f 	isb	sy
 800c78a:	e009      	b.n	800c7a0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	3310      	adds	r3, #16
 800c790:	4618      	mov	r0, r3
 800c792:	f7ff fef1 	bl	800c578 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	3324      	adds	r3, #36	@ 0x24
 800c79a:	4618      	mov	r0, r3
 800c79c:	f7ff feec 	bl	800c578 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c7a0:	f002 fcc4 	bl	800f12c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c7a4:	2301      	movs	r3, #1
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	3710      	adds	r7, #16
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}
 800c7ae:	bf00      	nop
 800c7b0:	e000ed04 	.word	0xe000ed04

0800c7b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b08e      	sub	sp, #56	@ 0x38
 800c7b8:	af02      	add	r7, sp, #8
 800c7ba:	60f8      	str	r0, [r7, #12]
 800c7bc:	60b9      	str	r1, [r7, #8]
 800c7be:	607a      	str	r2, [r7, #4]
 800c7c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d10b      	bne.n	800c7e0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c7c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7cc:	f383 8811 	msr	BASEPRI, r3
 800c7d0:	f3bf 8f6f 	isb	sy
 800c7d4:	f3bf 8f4f 	dsb	sy
 800c7d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c7da:	bf00      	nop
 800c7dc:	bf00      	nop
 800c7de:	e7fd      	b.n	800c7dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d10b      	bne.n	800c7fe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c7e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7ea:	f383 8811 	msr	BASEPRI, r3
 800c7ee:	f3bf 8f6f 	isb	sy
 800c7f2:	f3bf 8f4f 	dsb	sy
 800c7f6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c7f8:	bf00      	nop
 800c7fa:	bf00      	nop
 800c7fc:	e7fd      	b.n	800c7fa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d002      	beq.n	800c80a <xQueueGenericCreateStatic+0x56>
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d001      	beq.n	800c80e <xQueueGenericCreateStatic+0x5a>
 800c80a:	2301      	movs	r3, #1
 800c80c:	e000      	b.n	800c810 <xQueueGenericCreateStatic+0x5c>
 800c80e:	2300      	movs	r3, #0
 800c810:	2b00      	cmp	r3, #0
 800c812:	d10b      	bne.n	800c82c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c818:	f383 8811 	msr	BASEPRI, r3
 800c81c:	f3bf 8f6f 	isb	sy
 800c820:	f3bf 8f4f 	dsb	sy
 800c824:	623b      	str	r3, [r7, #32]
}
 800c826:	bf00      	nop
 800c828:	bf00      	nop
 800c82a:	e7fd      	b.n	800c828 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d102      	bne.n	800c838 <xQueueGenericCreateStatic+0x84>
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d101      	bne.n	800c83c <xQueueGenericCreateStatic+0x88>
 800c838:	2301      	movs	r3, #1
 800c83a:	e000      	b.n	800c83e <xQueueGenericCreateStatic+0x8a>
 800c83c:	2300      	movs	r3, #0
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d10b      	bne.n	800c85a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c846:	f383 8811 	msr	BASEPRI, r3
 800c84a:	f3bf 8f6f 	isb	sy
 800c84e:	f3bf 8f4f 	dsb	sy
 800c852:	61fb      	str	r3, [r7, #28]
}
 800c854:	bf00      	nop
 800c856:	bf00      	nop
 800c858:	e7fd      	b.n	800c856 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c85a:	2350      	movs	r3, #80	@ 0x50
 800c85c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	2b50      	cmp	r3, #80	@ 0x50
 800c862:	d00b      	beq.n	800c87c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c868:	f383 8811 	msr	BASEPRI, r3
 800c86c:	f3bf 8f6f 	isb	sy
 800c870:	f3bf 8f4f 	dsb	sy
 800c874:	61bb      	str	r3, [r7, #24]
}
 800c876:	bf00      	nop
 800c878:	bf00      	nop
 800c87a:	e7fd      	b.n	800c878 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c87c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c884:	2b00      	cmp	r3, #0
 800c886:	d00d      	beq.n	800c8a4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c88a:	2201      	movs	r2, #1
 800c88c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c890:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c896:	9300      	str	r3, [sp, #0]
 800c898:	4613      	mov	r3, r2
 800c89a:	687a      	ldr	r2, [r7, #4]
 800c89c:	68b9      	ldr	r1, [r7, #8]
 800c89e:	68f8      	ldr	r0, [r7, #12]
 800c8a0:	f000 f840 	bl	800c924 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c8a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3730      	adds	r7, #48	@ 0x30
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}

0800c8ae <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c8ae:	b580      	push	{r7, lr}
 800c8b0:	b08a      	sub	sp, #40	@ 0x28
 800c8b2:	af02      	add	r7, sp, #8
 800c8b4:	60f8      	str	r0, [r7, #12]
 800c8b6:	60b9      	str	r1, [r7, #8]
 800c8b8:	4613      	mov	r3, r2
 800c8ba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d10b      	bne.n	800c8da <xQueueGenericCreate+0x2c>
	__asm volatile
 800c8c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8c6:	f383 8811 	msr	BASEPRI, r3
 800c8ca:	f3bf 8f6f 	isb	sy
 800c8ce:	f3bf 8f4f 	dsb	sy
 800c8d2:	613b      	str	r3, [r7, #16]
}
 800c8d4:	bf00      	nop
 800c8d6:	bf00      	nop
 800c8d8:	e7fd      	b.n	800c8d6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	68ba      	ldr	r2, [r7, #8]
 800c8de:	fb02 f303 	mul.w	r3, r2, r3
 800c8e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c8e4:	69fb      	ldr	r3, [r7, #28]
 800c8e6:	3350      	adds	r3, #80	@ 0x50
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f002 fd0f 	bl	800f30c <pvPortMalloc>
 800c8ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c8f0:	69bb      	ldr	r3, [r7, #24]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d011      	beq.n	800c91a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c8f6:	69bb      	ldr	r3, [r7, #24]
 800c8f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	3350      	adds	r3, #80	@ 0x50
 800c8fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c900:	69bb      	ldr	r3, [r7, #24]
 800c902:	2200      	movs	r2, #0
 800c904:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c908:	79fa      	ldrb	r2, [r7, #7]
 800c90a:	69bb      	ldr	r3, [r7, #24]
 800c90c:	9300      	str	r3, [sp, #0]
 800c90e:	4613      	mov	r3, r2
 800c910:	697a      	ldr	r2, [r7, #20]
 800c912:	68b9      	ldr	r1, [r7, #8]
 800c914:	68f8      	ldr	r0, [r7, #12]
 800c916:	f000 f805 	bl	800c924 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c91a:	69bb      	ldr	r3, [r7, #24]
	}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3720      	adds	r7, #32
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}

0800c924 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b084      	sub	sp, #16
 800c928:	af00      	add	r7, sp, #0
 800c92a:	60f8      	str	r0, [r7, #12]
 800c92c:	60b9      	str	r1, [r7, #8]
 800c92e:	607a      	str	r2, [r7, #4]
 800c930:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d103      	bne.n	800c940 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c938:	69bb      	ldr	r3, [r7, #24]
 800c93a:	69ba      	ldr	r2, [r7, #24]
 800c93c:	601a      	str	r2, [r3, #0]
 800c93e:	e002      	b.n	800c946 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c940:	69bb      	ldr	r3, [r7, #24]
 800c942:	687a      	ldr	r2, [r7, #4]
 800c944:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c946:	69bb      	ldr	r3, [r7, #24]
 800c948:	68fa      	ldr	r2, [r7, #12]
 800c94a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c94c:	69bb      	ldr	r3, [r7, #24]
 800c94e:	68ba      	ldr	r2, [r7, #8]
 800c950:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c952:	2101      	movs	r1, #1
 800c954:	69b8      	ldr	r0, [r7, #24]
 800c956:	f7ff fec3 	bl	800c6e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c95a:	69bb      	ldr	r3, [r7, #24]
 800c95c:	78fa      	ldrb	r2, [r7, #3]
 800c95e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c962:	bf00      	nop
 800c964:	3710      	adds	r7, #16
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}

0800c96a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c96a:	b580      	push	{r7, lr}
 800c96c:	b08a      	sub	sp, #40	@ 0x28
 800c96e:	af02      	add	r7, sp, #8
 800c970:	60f8      	str	r0, [r7, #12]
 800c972:	60b9      	str	r1, [r7, #8]
 800c974:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d10b      	bne.n	800c994 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800c97c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c980:	f383 8811 	msr	BASEPRI, r3
 800c984:	f3bf 8f6f 	isb	sy
 800c988:	f3bf 8f4f 	dsb	sy
 800c98c:	61bb      	str	r3, [r7, #24]
}
 800c98e:	bf00      	nop
 800c990:	bf00      	nop
 800c992:	e7fd      	b.n	800c990 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c994:	68ba      	ldr	r2, [r7, #8]
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	429a      	cmp	r2, r3
 800c99a:	d90b      	bls.n	800c9b4 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800c99c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9a0:	f383 8811 	msr	BASEPRI, r3
 800c9a4:	f3bf 8f6f 	isb	sy
 800c9a8:	f3bf 8f4f 	dsb	sy
 800c9ac:	617b      	str	r3, [r7, #20]
}
 800c9ae:	bf00      	nop
 800c9b0:	bf00      	nop
 800c9b2:	e7fd      	b.n	800c9b0 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c9b4:	2302      	movs	r3, #2
 800c9b6:	9300      	str	r3, [sp, #0]
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	2100      	movs	r1, #0
 800c9be:	68f8      	ldr	r0, [r7, #12]
 800c9c0:	f7ff fef8 	bl	800c7b4 <xQueueGenericCreateStatic>
 800c9c4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c9c6:	69fb      	ldr	r3, [r7, #28]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d002      	beq.n	800c9d2 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c9cc:	69fb      	ldr	r3, [r7, #28]
 800c9ce:	68ba      	ldr	r2, [r7, #8]
 800c9d0:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c9d2:	69fb      	ldr	r3, [r7, #28]
	}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3720      	adds	r7, #32
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}

0800c9dc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b086      	sub	sp, #24
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
 800c9e4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d10b      	bne.n	800ca04 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800c9ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9f0:	f383 8811 	msr	BASEPRI, r3
 800c9f4:	f3bf 8f6f 	isb	sy
 800c9f8:	f3bf 8f4f 	dsb	sy
 800c9fc:	613b      	str	r3, [r7, #16]
}
 800c9fe:	bf00      	nop
 800ca00:	bf00      	nop
 800ca02:	e7fd      	b.n	800ca00 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ca04:	683a      	ldr	r2, [r7, #0]
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	429a      	cmp	r2, r3
 800ca0a:	d90b      	bls.n	800ca24 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800ca0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca10:	f383 8811 	msr	BASEPRI, r3
 800ca14:	f3bf 8f6f 	isb	sy
 800ca18:	f3bf 8f4f 	dsb	sy
 800ca1c:	60fb      	str	r3, [r7, #12]
}
 800ca1e:	bf00      	nop
 800ca20:	bf00      	nop
 800ca22:	e7fd      	b.n	800ca20 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ca24:	2202      	movs	r2, #2
 800ca26:	2100      	movs	r1, #0
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f7ff ff40 	bl	800c8ae <xQueueGenericCreate>
 800ca2e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d002      	beq.n	800ca3c <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ca36:	697b      	ldr	r3, [r7, #20]
 800ca38:	683a      	ldr	r2, [r7, #0]
 800ca3a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ca3c:	697b      	ldr	r3, [r7, #20]
	}
 800ca3e:	4618      	mov	r0, r3
 800ca40:	3718      	adds	r7, #24
 800ca42:	46bd      	mov	sp, r7
 800ca44:	bd80      	pop	{r7, pc}
	...

0800ca48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b08e      	sub	sp, #56	@ 0x38
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	60f8      	str	r0, [r7, #12]
 800ca50:	60b9      	str	r1, [r7, #8]
 800ca52:	607a      	str	r2, [r7, #4]
 800ca54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ca56:	2300      	movs	r3, #0
 800ca58:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ca5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d10b      	bne.n	800ca7c <xQueueGenericSend+0x34>
	__asm volatile
 800ca64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca68:	f383 8811 	msr	BASEPRI, r3
 800ca6c:	f3bf 8f6f 	isb	sy
 800ca70:	f3bf 8f4f 	dsb	sy
 800ca74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ca76:	bf00      	nop
 800ca78:	bf00      	nop
 800ca7a:	e7fd      	b.n	800ca78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d103      	bne.n	800ca8a <xQueueGenericSend+0x42>
 800ca82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d101      	bne.n	800ca8e <xQueueGenericSend+0x46>
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	e000      	b.n	800ca90 <xQueueGenericSend+0x48>
 800ca8e:	2300      	movs	r3, #0
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d10b      	bne.n	800caac <xQueueGenericSend+0x64>
	__asm volatile
 800ca94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca98:	f383 8811 	msr	BASEPRI, r3
 800ca9c:	f3bf 8f6f 	isb	sy
 800caa0:	f3bf 8f4f 	dsb	sy
 800caa4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800caa6:	bf00      	nop
 800caa8:	bf00      	nop
 800caaa:	e7fd      	b.n	800caa8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	2b02      	cmp	r3, #2
 800cab0:	d103      	bne.n	800caba <xQueueGenericSend+0x72>
 800cab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cab6:	2b01      	cmp	r3, #1
 800cab8:	d101      	bne.n	800cabe <xQueueGenericSend+0x76>
 800caba:	2301      	movs	r3, #1
 800cabc:	e000      	b.n	800cac0 <xQueueGenericSend+0x78>
 800cabe:	2300      	movs	r3, #0
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d10b      	bne.n	800cadc <xQueueGenericSend+0x94>
	__asm volatile
 800cac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cac8:	f383 8811 	msr	BASEPRI, r3
 800cacc:	f3bf 8f6f 	isb	sy
 800cad0:	f3bf 8f4f 	dsb	sy
 800cad4:	623b      	str	r3, [r7, #32]
}
 800cad6:	bf00      	nop
 800cad8:	bf00      	nop
 800cada:	e7fd      	b.n	800cad8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cadc:	f001 fc84 	bl	800e3e8 <xTaskGetSchedulerState>
 800cae0:	4603      	mov	r3, r0
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d102      	bne.n	800caec <xQueueGenericSend+0xa4>
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d101      	bne.n	800caf0 <xQueueGenericSend+0xa8>
 800caec:	2301      	movs	r3, #1
 800caee:	e000      	b.n	800caf2 <xQueueGenericSend+0xaa>
 800caf0:	2300      	movs	r3, #0
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d10b      	bne.n	800cb0e <xQueueGenericSend+0xc6>
	__asm volatile
 800caf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cafa:	f383 8811 	msr	BASEPRI, r3
 800cafe:	f3bf 8f6f 	isb	sy
 800cb02:	f3bf 8f4f 	dsb	sy
 800cb06:	61fb      	str	r3, [r7, #28]
}
 800cb08:	bf00      	nop
 800cb0a:	bf00      	nop
 800cb0c:	e7fd      	b.n	800cb0a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cb0e:	f002 fadb 	bl	800f0c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cb12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cb16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb1a:	429a      	cmp	r2, r3
 800cb1c:	d302      	bcc.n	800cb24 <xQueueGenericSend+0xdc>
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	2b02      	cmp	r3, #2
 800cb22:	d129      	bne.n	800cb78 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cb24:	683a      	ldr	r2, [r7, #0]
 800cb26:	68b9      	ldr	r1, [r7, #8]
 800cb28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cb2a:	f000 fc6d 	bl	800d408 <prvCopyDataToQueue>
 800cb2e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cb30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d010      	beq.n	800cb5a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cb38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb3a:	3324      	adds	r3, #36	@ 0x24
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f001 fa8d 	bl	800e05c <xTaskRemoveFromEventList>
 800cb42:	4603      	mov	r3, r0
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d013      	beq.n	800cb70 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cb48:	4b3f      	ldr	r3, [pc, #252]	@ (800cc48 <xQueueGenericSend+0x200>)
 800cb4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb4e:	601a      	str	r2, [r3, #0]
 800cb50:	f3bf 8f4f 	dsb	sy
 800cb54:	f3bf 8f6f 	isb	sy
 800cb58:	e00a      	b.n	800cb70 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cb5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d007      	beq.n	800cb70 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cb60:	4b39      	ldr	r3, [pc, #228]	@ (800cc48 <xQueueGenericSend+0x200>)
 800cb62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb66:	601a      	str	r2, [r3, #0]
 800cb68:	f3bf 8f4f 	dsb	sy
 800cb6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cb70:	f002 fadc 	bl	800f12c <vPortExitCritical>
				return pdPASS;
 800cb74:	2301      	movs	r3, #1
 800cb76:	e063      	b.n	800cc40 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d103      	bne.n	800cb86 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cb7e:	f002 fad5 	bl	800f12c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cb82:	2300      	movs	r3, #0
 800cb84:	e05c      	b.n	800cc40 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cb86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d106      	bne.n	800cb9a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cb8c:	f107 0314 	add.w	r3, r7, #20
 800cb90:	4618      	mov	r0, r3
 800cb92:	f001 fac7 	bl	800e124 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cb96:	2301      	movs	r3, #1
 800cb98:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cb9a:	f002 fac7 	bl	800f12c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cb9e:	f001 f82f 	bl	800dc00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cba2:	f002 fa91 	bl	800f0c8 <vPortEnterCritical>
 800cba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cba8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cbac:	b25b      	sxtb	r3, r3
 800cbae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbb2:	d103      	bne.n	800cbbc <xQueueGenericSend+0x174>
 800cbb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cbbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbbe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cbc2:	b25b      	sxtb	r3, r3
 800cbc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbc8:	d103      	bne.n	800cbd2 <xQueueGenericSend+0x18a>
 800cbca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbcc:	2200      	movs	r2, #0
 800cbce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cbd2:	f002 faab 	bl	800f12c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cbd6:	1d3a      	adds	r2, r7, #4
 800cbd8:	f107 0314 	add.w	r3, r7, #20
 800cbdc:	4611      	mov	r1, r2
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f001 fab6 	bl	800e150 <xTaskCheckForTimeOut>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d124      	bne.n	800cc34 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cbea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cbec:	f000 fd04 	bl	800d5f8 <prvIsQueueFull>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d018      	beq.n	800cc28 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cbf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbf8:	3310      	adds	r3, #16
 800cbfa:	687a      	ldr	r2, [r7, #4]
 800cbfc:	4611      	mov	r1, r2
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f001 f9da 	bl	800dfb8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cc04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cc06:	f000 fc8f 	bl	800d528 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cc0a:	f001 f807 	bl	800dc1c <xTaskResumeAll>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	f47f af7c 	bne.w	800cb0e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800cc16:	4b0c      	ldr	r3, [pc, #48]	@ (800cc48 <xQueueGenericSend+0x200>)
 800cc18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc1c:	601a      	str	r2, [r3, #0]
 800cc1e:	f3bf 8f4f 	dsb	sy
 800cc22:	f3bf 8f6f 	isb	sy
 800cc26:	e772      	b.n	800cb0e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cc28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cc2a:	f000 fc7d 	bl	800d528 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cc2e:	f000 fff5 	bl	800dc1c <xTaskResumeAll>
 800cc32:	e76c      	b.n	800cb0e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cc34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cc36:	f000 fc77 	bl	800d528 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cc3a:	f000 ffef 	bl	800dc1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cc3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	3738      	adds	r7, #56	@ 0x38
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}
 800cc48:	e000ed04 	.word	0xe000ed04

0800cc4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b090      	sub	sp, #64	@ 0x40
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	60f8      	str	r0, [r7, #12]
 800cc54:	60b9      	str	r1, [r7, #8]
 800cc56:	607a      	str	r2, [r7, #4]
 800cc58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800cc5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d10b      	bne.n	800cc7c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800cc64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc68:	f383 8811 	msr	BASEPRI, r3
 800cc6c:	f3bf 8f6f 	isb	sy
 800cc70:	f3bf 8f4f 	dsb	sy
 800cc74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cc76:	bf00      	nop
 800cc78:	bf00      	nop
 800cc7a:	e7fd      	b.n	800cc78 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d103      	bne.n	800cc8a <xQueueGenericSendFromISR+0x3e>
 800cc82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d101      	bne.n	800cc8e <xQueueGenericSendFromISR+0x42>
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	e000      	b.n	800cc90 <xQueueGenericSendFromISR+0x44>
 800cc8e:	2300      	movs	r3, #0
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d10b      	bne.n	800ccac <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800cc94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc98:	f383 8811 	msr	BASEPRI, r3
 800cc9c:	f3bf 8f6f 	isb	sy
 800cca0:	f3bf 8f4f 	dsb	sy
 800cca4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cca6:	bf00      	nop
 800cca8:	bf00      	nop
 800ccaa:	e7fd      	b.n	800cca8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	2b02      	cmp	r3, #2
 800ccb0:	d103      	bne.n	800ccba <xQueueGenericSendFromISR+0x6e>
 800ccb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ccb6:	2b01      	cmp	r3, #1
 800ccb8:	d101      	bne.n	800ccbe <xQueueGenericSendFromISR+0x72>
 800ccba:	2301      	movs	r3, #1
 800ccbc:	e000      	b.n	800ccc0 <xQueueGenericSendFromISR+0x74>
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d10b      	bne.n	800ccdc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800ccc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccc8:	f383 8811 	msr	BASEPRI, r3
 800cccc:	f3bf 8f6f 	isb	sy
 800ccd0:	f3bf 8f4f 	dsb	sy
 800ccd4:	623b      	str	r3, [r7, #32]
}
 800ccd6:	bf00      	nop
 800ccd8:	bf00      	nop
 800ccda:	e7fd      	b.n	800ccd8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ccdc:	f002 fad4 	bl	800f288 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cce0:	f3ef 8211 	mrs	r2, BASEPRI
 800cce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cce8:	f383 8811 	msr	BASEPRI, r3
 800ccec:	f3bf 8f6f 	isb	sy
 800ccf0:	f3bf 8f4f 	dsb	sy
 800ccf4:	61fa      	str	r2, [r7, #28]
 800ccf6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ccf8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ccfa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ccfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccfe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cd00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d302      	bcc.n	800cd0e <xQueueGenericSendFromISR+0xc2>
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	2b02      	cmp	r3, #2
 800cd0c:	d12f      	bne.n	800cd6e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cd0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cd14:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cd1e:	683a      	ldr	r2, [r7, #0]
 800cd20:	68b9      	ldr	r1, [r7, #8]
 800cd22:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cd24:	f000 fb70 	bl	800d408 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cd28:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800cd2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd30:	d112      	bne.n	800cd58 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cd32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d016      	beq.n	800cd68 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cd3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd3c:	3324      	adds	r3, #36	@ 0x24
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f001 f98c 	bl	800e05c <xTaskRemoveFromEventList>
 800cd44:	4603      	mov	r3, r0
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d00e      	beq.n	800cd68 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d00b      	beq.n	800cd68 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2201      	movs	r2, #1
 800cd54:	601a      	str	r2, [r3, #0]
 800cd56:	e007      	b.n	800cd68 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cd58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800cd5c:	3301      	adds	r3, #1
 800cd5e:	b2db      	uxtb	r3, r3
 800cd60:	b25a      	sxtb	r2, r3
 800cd62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800cd68:	2301      	movs	r3, #1
 800cd6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800cd6c:	e001      	b.n	800cd72 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cd72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd74:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cd7c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cd7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	3740      	adds	r7, #64	@ 0x40
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}

0800cd88 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b08e      	sub	sp, #56	@ 0x38
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
 800cd90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cd96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d10b      	bne.n	800cdb4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800cd9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cda0:	f383 8811 	msr	BASEPRI, r3
 800cda4:	f3bf 8f6f 	isb	sy
 800cda8:	f3bf 8f4f 	dsb	sy
 800cdac:	623b      	str	r3, [r7, #32]
}
 800cdae:	bf00      	nop
 800cdb0:	bf00      	nop
 800cdb2:	e7fd      	b.n	800cdb0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cdb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d00b      	beq.n	800cdd4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800cdbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdc0:	f383 8811 	msr	BASEPRI, r3
 800cdc4:	f3bf 8f6f 	isb	sy
 800cdc8:	f3bf 8f4f 	dsb	sy
 800cdcc:	61fb      	str	r3, [r7, #28]
}
 800cdce:	bf00      	nop
 800cdd0:	bf00      	nop
 800cdd2:	e7fd      	b.n	800cdd0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cdd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d103      	bne.n	800cde4 <xQueueGiveFromISR+0x5c>
 800cddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdde:	689b      	ldr	r3, [r3, #8]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d101      	bne.n	800cde8 <xQueueGiveFromISR+0x60>
 800cde4:	2301      	movs	r3, #1
 800cde6:	e000      	b.n	800cdea <xQueueGiveFromISR+0x62>
 800cde8:	2300      	movs	r3, #0
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d10b      	bne.n	800ce06 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800cdee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdf2:	f383 8811 	msr	BASEPRI, r3
 800cdf6:	f3bf 8f6f 	isb	sy
 800cdfa:	f3bf 8f4f 	dsb	sy
 800cdfe:	61bb      	str	r3, [r7, #24]
}
 800ce00:	bf00      	nop
 800ce02:	bf00      	nop
 800ce04:	e7fd      	b.n	800ce02 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ce06:	f002 fa3f 	bl	800f288 <vPortValidateInterruptPriority>
	__asm volatile
 800ce0a:	f3ef 8211 	mrs	r2, BASEPRI
 800ce0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce12:	f383 8811 	msr	BASEPRI, r3
 800ce16:	f3bf 8f6f 	isb	sy
 800ce1a:	f3bf 8f4f 	dsb	sy
 800ce1e:	617a      	str	r2, [r7, #20]
 800ce20:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ce22:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ce24:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce2a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ce2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d22b      	bcs.n	800ce8e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ce36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ce3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ce40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce42:	1c5a      	adds	r2, r3, #1
 800ce44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce46:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ce48:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ce4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce50:	d112      	bne.n	800ce78 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d016      	beq.n	800ce88 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce5c:	3324      	adds	r3, #36	@ 0x24
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f001 f8fc 	bl	800e05c <xTaskRemoveFromEventList>
 800ce64:	4603      	mov	r3, r0
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d00e      	beq.n	800ce88 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d00b      	beq.n	800ce88 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	2201      	movs	r2, #1
 800ce74:	601a      	str	r2, [r3, #0]
 800ce76:	e007      	b.n	800ce88 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ce78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ce7c:	3301      	adds	r3, #1
 800ce7e:	b2db      	uxtb	r3, r3
 800ce80:	b25a      	sxtb	r2, r3
 800ce82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ce88:	2301      	movs	r3, #1
 800ce8a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce8c:	e001      	b.n	800ce92 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce94:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	f383 8811 	msr	BASEPRI, r3
}
 800ce9c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ce9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	3738      	adds	r7, #56	@ 0x38
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd80      	pop	{r7, pc}

0800cea8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b08c      	sub	sp, #48	@ 0x30
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	60f8      	str	r0, [r7, #12]
 800ceb0:	60b9      	str	r1, [r7, #8]
 800ceb2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d10b      	bne.n	800ceda <xQueueReceive+0x32>
	__asm volatile
 800cec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cec6:	f383 8811 	msr	BASEPRI, r3
 800ceca:	f3bf 8f6f 	isb	sy
 800cece:	f3bf 8f4f 	dsb	sy
 800ced2:	623b      	str	r3, [r7, #32]
}
 800ced4:	bf00      	nop
 800ced6:	bf00      	nop
 800ced8:	e7fd      	b.n	800ced6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d103      	bne.n	800cee8 <xQueueReceive+0x40>
 800cee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d101      	bne.n	800ceec <xQueueReceive+0x44>
 800cee8:	2301      	movs	r3, #1
 800ceea:	e000      	b.n	800ceee <xQueueReceive+0x46>
 800ceec:	2300      	movs	r3, #0
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d10b      	bne.n	800cf0a <xQueueReceive+0x62>
	__asm volatile
 800cef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cef6:	f383 8811 	msr	BASEPRI, r3
 800cefa:	f3bf 8f6f 	isb	sy
 800cefe:	f3bf 8f4f 	dsb	sy
 800cf02:	61fb      	str	r3, [r7, #28]
}
 800cf04:	bf00      	nop
 800cf06:	bf00      	nop
 800cf08:	e7fd      	b.n	800cf06 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cf0a:	f001 fa6d 	bl	800e3e8 <xTaskGetSchedulerState>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d102      	bne.n	800cf1a <xQueueReceive+0x72>
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d101      	bne.n	800cf1e <xQueueReceive+0x76>
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	e000      	b.n	800cf20 <xQueueReceive+0x78>
 800cf1e:	2300      	movs	r3, #0
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d10b      	bne.n	800cf3c <xQueueReceive+0x94>
	__asm volatile
 800cf24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf28:	f383 8811 	msr	BASEPRI, r3
 800cf2c:	f3bf 8f6f 	isb	sy
 800cf30:	f3bf 8f4f 	dsb	sy
 800cf34:	61bb      	str	r3, [r7, #24]
}
 800cf36:	bf00      	nop
 800cf38:	bf00      	nop
 800cf3a:	e7fd      	b.n	800cf38 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cf3c:	f002 f8c4 	bl	800f0c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf44:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cf46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d01f      	beq.n	800cf8c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cf4c:	68b9      	ldr	r1, [r7, #8]
 800cf4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf50:	f000 fac4 	bl	800d4dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cf54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf56:	1e5a      	subs	r2, r3, #1
 800cf58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf5a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf5e:	691b      	ldr	r3, [r3, #16]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d00f      	beq.n	800cf84 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf66:	3310      	adds	r3, #16
 800cf68:	4618      	mov	r0, r3
 800cf6a:	f001 f877 	bl	800e05c <xTaskRemoveFromEventList>
 800cf6e:	4603      	mov	r3, r0
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d007      	beq.n	800cf84 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cf74:	4b3c      	ldr	r3, [pc, #240]	@ (800d068 <xQueueReceive+0x1c0>)
 800cf76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf7a:	601a      	str	r2, [r3, #0]
 800cf7c:	f3bf 8f4f 	dsb	sy
 800cf80:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cf84:	f002 f8d2 	bl	800f12c <vPortExitCritical>
				return pdPASS;
 800cf88:	2301      	movs	r3, #1
 800cf8a:	e069      	b.n	800d060 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d103      	bne.n	800cf9a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cf92:	f002 f8cb 	bl	800f12c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cf96:	2300      	movs	r3, #0
 800cf98:	e062      	b.n	800d060 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cf9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d106      	bne.n	800cfae <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cfa0:	f107 0310 	add.w	r3, r7, #16
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f001 f8bd 	bl	800e124 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cfaa:	2301      	movs	r3, #1
 800cfac:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cfae:	f002 f8bd 	bl	800f12c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cfb2:	f000 fe25 	bl	800dc00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cfb6:	f002 f887 	bl	800f0c8 <vPortEnterCritical>
 800cfba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfbc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cfc0:	b25b      	sxtb	r3, r3
 800cfc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfc6:	d103      	bne.n	800cfd0 <xQueueReceive+0x128>
 800cfc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfca:	2200      	movs	r2, #0
 800cfcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cfd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfd2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cfd6:	b25b      	sxtb	r3, r3
 800cfd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfdc:	d103      	bne.n	800cfe6 <xQueueReceive+0x13e>
 800cfde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cfe6:	f002 f8a1 	bl	800f12c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cfea:	1d3a      	adds	r2, r7, #4
 800cfec:	f107 0310 	add.w	r3, r7, #16
 800cff0:	4611      	mov	r1, r2
 800cff2:	4618      	mov	r0, r3
 800cff4:	f001 f8ac 	bl	800e150 <xTaskCheckForTimeOut>
 800cff8:	4603      	mov	r3, r0
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d123      	bne.n	800d046 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cffe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d000:	f000 fae4 	bl	800d5cc <prvIsQueueEmpty>
 800d004:	4603      	mov	r3, r0
 800d006:	2b00      	cmp	r3, #0
 800d008:	d017      	beq.n	800d03a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d00a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d00c:	3324      	adds	r3, #36	@ 0x24
 800d00e:	687a      	ldr	r2, [r7, #4]
 800d010:	4611      	mov	r1, r2
 800d012:	4618      	mov	r0, r3
 800d014:	f000 ffd0 	bl	800dfb8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d018:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d01a:	f000 fa85 	bl	800d528 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d01e:	f000 fdfd 	bl	800dc1c <xTaskResumeAll>
 800d022:	4603      	mov	r3, r0
 800d024:	2b00      	cmp	r3, #0
 800d026:	d189      	bne.n	800cf3c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d028:	4b0f      	ldr	r3, [pc, #60]	@ (800d068 <xQueueReceive+0x1c0>)
 800d02a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d02e:	601a      	str	r2, [r3, #0]
 800d030:	f3bf 8f4f 	dsb	sy
 800d034:	f3bf 8f6f 	isb	sy
 800d038:	e780      	b.n	800cf3c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d03a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d03c:	f000 fa74 	bl	800d528 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d040:	f000 fdec 	bl	800dc1c <xTaskResumeAll>
 800d044:	e77a      	b.n	800cf3c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d046:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d048:	f000 fa6e 	bl	800d528 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d04c:	f000 fde6 	bl	800dc1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d050:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d052:	f000 fabb 	bl	800d5cc <prvIsQueueEmpty>
 800d056:	4603      	mov	r3, r0
 800d058:	2b00      	cmp	r3, #0
 800d05a:	f43f af6f 	beq.w	800cf3c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d05e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d060:	4618      	mov	r0, r3
 800d062:	3730      	adds	r7, #48	@ 0x30
 800d064:	46bd      	mov	sp, r7
 800d066:	bd80      	pop	{r7, pc}
 800d068:	e000ed04 	.word	0xe000ed04

0800d06c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b08e      	sub	sp, #56	@ 0x38
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
 800d074:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d076:	2300      	movs	r3, #0
 800d078:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d07e:	2300      	movs	r3, #0
 800d080:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d084:	2b00      	cmp	r3, #0
 800d086:	d10b      	bne.n	800d0a0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800d088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d08c:	f383 8811 	msr	BASEPRI, r3
 800d090:	f3bf 8f6f 	isb	sy
 800d094:	f3bf 8f4f 	dsb	sy
 800d098:	623b      	str	r3, [r7, #32]
}
 800d09a:	bf00      	nop
 800d09c:	bf00      	nop
 800d09e:	e7fd      	b.n	800d09c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d0a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d00b      	beq.n	800d0c0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800d0a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0ac:	f383 8811 	msr	BASEPRI, r3
 800d0b0:	f3bf 8f6f 	isb	sy
 800d0b4:	f3bf 8f4f 	dsb	sy
 800d0b8:	61fb      	str	r3, [r7, #28]
}
 800d0ba:	bf00      	nop
 800d0bc:	bf00      	nop
 800d0be:	e7fd      	b.n	800d0bc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d0c0:	f001 f992 	bl	800e3e8 <xTaskGetSchedulerState>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d102      	bne.n	800d0d0 <xQueueSemaphoreTake+0x64>
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d101      	bne.n	800d0d4 <xQueueSemaphoreTake+0x68>
 800d0d0:	2301      	movs	r3, #1
 800d0d2:	e000      	b.n	800d0d6 <xQueueSemaphoreTake+0x6a>
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d10b      	bne.n	800d0f2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800d0da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0de:	f383 8811 	msr	BASEPRI, r3
 800d0e2:	f3bf 8f6f 	isb	sy
 800d0e6:	f3bf 8f4f 	dsb	sy
 800d0ea:	61bb      	str	r3, [r7, #24]
}
 800d0ec:	bf00      	nop
 800d0ee:	bf00      	nop
 800d0f0:	e7fd      	b.n	800d0ee <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d0f2:	f001 ffe9 	bl	800f0c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d0f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0fa:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d0fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d024      	beq.n	800d14c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d104:	1e5a      	subs	r2, r3, #1
 800d106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d108:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d10a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d104      	bne.n	800d11c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d112:	f001 fae3 	bl	800e6dc <pvTaskIncrementMutexHeldCount>
 800d116:	4602      	mov	r2, r0
 800d118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d11a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d11c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d11e:	691b      	ldr	r3, [r3, #16]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d00f      	beq.n	800d144 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d126:	3310      	adds	r3, #16
 800d128:	4618      	mov	r0, r3
 800d12a:	f000 ff97 	bl	800e05c <xTaskRemoveFromEventList>
 800d12e:	4603      	mov	r3, r0
 800d130:	2b00      	cmp	r3, #0
 800d132:	d007      	beq.n	800d144 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d134:	4b54      	ldr	r3, [pc, #336]	@ (800d288 <xQueueSemaphoreTake+0x21c>)
 800d136:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d13a:	601a      	str	r2, [r3, #0]
 800d13c:	f3bf 8f4f 	dsb	sy
 800d140:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d144:	f001 fff2 	bl	800f12c <vPortExitCritical>
				return pdPASS;
 800d148:	2301      	movs	r3, #1
 800d14a:	e098      	b.n	800d27e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d112      	bne.n	800d178 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d154:	2b00      	cmp	r3, #0
 800d156:	d00b      	beq.n	800d170 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800d158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d15c:	f383 8811 	msr	BASEPRI, r3
 800d160:	f3bf 8f6f 	isb	sy
 800d164:	f3bf 8f4f 	dsb	sy
 800d168:	617b      	str	r3, [r7, #20]
}
 800d16a:	bf00      	nop
 800d16c:	bf00      	nop
 800d16e:	e7fd      	b.n	800d16c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d170:	f001 ffdc 	bl	800f12c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d174:	2300      	movs	r3, #0
 800d176:	e082      	b.n	800d27e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d106      	bne.n	800d18c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d17e:	f107 030c 	add.w	r3, r7, #12
 800d182:	4618      	mov	r0, r3
 800d184:	f000 ffce 	bl	800e124 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d188:	2301      	movs	r3, #1
 800d18a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d18c:	f001 ffce 	bl	800f12c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d190:	f000 fd36 	bl	800dc00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d194:	f001 ff98 	bl	800f0c8 <vPortEnterCritical>
 800d198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d19a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d19e:	b25b      	sxtb	r3, r3
 800d1a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1a4:	d103      	bne.n	800d1ae <xQueueSemaphoreTake+0x142>
 800d1a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d1ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d1b4:	b25b      	sxtb	r3, r3
 800d1b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1ba:	d103      	bne.n	800d1c4 <xQueueSemaphoreTake+0x158>
 800d1bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1be:	2200      	movs	r2, #0
 800d1c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d1c4:	f001 ffb2 	bl	800f12c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d1c8:	463a      	mov	r2, r7
 800d1ca:	f107 030c 	add.w	r3, r7, #12
 800d1ce:	4611      	mov	r1, r2
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f000 ffbd 	bl	800e150 <xTaskCheckForTimeOut>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d132      	bne.n	800d242 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d1dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d1de:	f000 f9f5 	bl	800d5cc <prvIsQueueEmpty>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d026      	beq.n	800d236 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d1e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d109      	bne.n	800d204 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d1f0:	f001 ff6a 	bl	800f0c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d1f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1f6:	689b      	ldr	r3, [r3, #8]
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	f001 f913 	bl	800e424 <xTaskPriorityInherit>
 800d1fe:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800d200:	f001 ff94 	bl	800f12c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d206:	3324      	adds	r3, #36	@ 0x24
 800d208:	683a      	ldr	r2, [r7, #0]
 800d20a:	4611      	mov	r1, r2
 800d20c:	4618      	mov	r0, r3
 800d20e:	f000 fed3 	bl	800dfb8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d212:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d214:	f000 f988 	bl	800d528 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d218:	f000 fd00 	bl	800dc1c <xTaskResumeAll>
 800d21c:	4603      	mov	r3, r0
 800d21e:	2b00      	cmp	r3, #0
 800d220:	f47f af67 	bne.w	800d0f2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d224:	4b18      	ldr	r3, [pc, #96]	@ (800d288 <xQueueSemaphoreTake+0x21c>)
 800d226:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d22a:	601a      	str	r2, [r3, #0]
 800d22c:	f3bf 8f4f 	dsb	sy
 800d230:	f3bf 8f6f 	isb	sy
 800d234:	e75d      	b.n	800d0f2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d236:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d238:	f000 f976 	bl	800d528 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d23c:	f000 fcee 	bl	800dc1c <xTaskResumeAll>
 800d240:	e757      	b.n	800d0f2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d242:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d244:	f000 f970 	bl	800d528 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d248:	f000 fce8 	bl	800dc1c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d24c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d24e:	f000 f9bd 	bl	800d5cc <prvIsQueueEmpty>
 800d252:	4603      	mov	r3, r0
 800d254:	2b00      	cmp	r3, #0
 800d256:	f43f af4c 	beq.w	800d0f2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d25a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d00d      	beq.n	800d27c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d260:	f001 ff32 	bl	800f0c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d264:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d266:	f000 f8b7 	bl	800d3d8 <prvGetDisinheritPriorityAfterTimeout>
 800d26a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d26c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d26e:	689b      	ldr	r3, [r3, #8]
 800d270:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d272:	4618      	mov	r0, r3
 800d274:	f001 f9ae 	bl	800e5d4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d278:	f001 ff58 	bl	800f12c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d27c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d27e:	4618      	mov	r0, r3
 800d280:	3738      	adds	r7, #56	@ 0x38
 800d282:	46bd      	mov	sp, r7
 800d284:	bd80      	pop	{r7, pc}
 800d286:	bf00      	nop
 800d288:	e000ed04 	.word	0xe000ed04

0800d28c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b08e      	sub	sp, #56	@ 0x38
 800d290:	af00      	add	r7, sp, #0
 800d292:	60f8      	str	r0, [r7, #12]
 800d294:	60b9      	str	r1, [r7, #8]
 800d296:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d29c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d10b      	bne.n	800d2ba <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800d2a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2a6:	f383 8811 	msr	BASEPRI, r3
 800d2aa:	f3bf 8f6f 	isb	sy
 800d2ae:	f3bf 8f4f 	dsb	sy
 800d2b2:	623b      	str	r3, [r7, #32]
}
 800d2b4:	bf00      	nop
 800d2b6:	bf00      	nop
 800d2b8:	e7fd      	b.n	800d2b6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d103      	bne.n	800d2c8 <xQueueReceiveFromISR+0x3c>
 800d2c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d101      	bne.n	800d2cc <xQueueReceiveFromISR+0x40>
 800d2c8:	2301      	movs	r3, #1
 800d2ca:	e000      	b.n	800d2ce <xQueueReceiveFromISR+0x42>
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d10b      	bne.n	800d2ea <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800d2d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2d6:	f383 8811 	msr	BASEPRI, r3
 800d2da:	f3bf 8f6f 	isb	sy
 800d2de:	f3bf 8f4f 	dsb	sy
 800d2e2:	61fb      	str	r3, [r7, #28]
}
 800d2e4:	bf00      	nop
 800d2e6:	bf00      	nop
 800d2e8:	e7fd      	b.n	800d2e6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d2ea:	f001 ffcd 	bl	800f288 <vPortValidateInterruptPriority>
	__asm volatile
 800d2ee:	f3ef 8211 	mrs	r2, BASEPRI
 800d2f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2f6:	f383 8811 	msr	BASEPRI, r3
 800d2fa:	f3bf 8f6f 	isb	sy
 800d2fe:	f3bf 8f4f 	dsb	sy
 800d302:	61ba      	str	r2, [r7, #24]
 800d304:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d306:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d308:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d30a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d30c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d30e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d312:	2b00      	cmp	r3, #0
 800d314:	d02f      	beq.n	800d376 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d318:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d31c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d320:	68b9      	ldr	r1, [r7, #8]
 800d322:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d324:	f000 f8da 	bl	800d4dc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d32a:	1e5a      	subs	r2, r3, #1
 800d32c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d32e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d330:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d334:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d338:	d112      	bne.n	800d360 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d33a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d33c:	691b      	ldr	r3, [r3, #16]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d016      	beq.n	800d370 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d344:	3310      	adds	r3, #16
 800d346:	4618      	mov	r0, r3
 800d348:	f000 fe88 	bl	800e05c <xTaskRemoveFromEventList>
 800d34c:	4603      	mov	r3, r0
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d00e      	beq.n	800d370 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d00b      	beq.n	800d370 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2201      	movs	r2, #1
 800d35c:	601a      	str	r2, [r3, #0]
 800d35e:	e007      	b.n	800d370 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d360:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d364:	3301      	adds	r3, #1
 800d366:	b2db      	uxtb	r3, r3
 800d368:	b25a      	sxtb	r2, r3
 800d36a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d36c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800d370:	2301      	movs	r3, #1
 800d372:	637b      	str	r3, [r7, #52]	@ 0x34
 800d374:	e001      	b.n	800d37a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800d376:	2300      	movs	r3, #0
 800d378:	637b      	str	r3, [r7, #52]	@ 0x34
 800d37a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d37c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	f383 8811 	msr	BASEPRI, r3
}
 800d384:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d388:	4618      	mov	r0, r3
 800d38a:	3738      	adds	r7, #56	@ 0x38
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}

0800d390 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b084      	sub	sp, #16
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d10b      	bne.n	800d3ba <vQueueDelete+0x2a>
	__asm volatile
 800d3a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3a6:	f383 8811 	msr	BASEPRI, r3
 800d3aa:	f3bf 8f6f 	isb	sy
 800d3ae:	f3bf 8f4f 	dsb	sy
 800d3b2:	60bb      	str	r3, [r7, #8]
}
 800d3b4:	bf00      	nop
 800d3b6:	bf00      	nop
 800d3b8:	e7fd      	b.n	800d3b6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d3ba:	68f8      	ldr	r0, [r7, #12]
 800d3bc:	f000 f95e 	bl	800d67c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d102      	bne.n	800d3d0 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800d3ca:	68f8      	ldr	r0, [r7, #12]
 800d3cc:	f002 f86c 	bl	800f4a8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d3d0:	bf00      	nop
 800d3d2:	3710      	adds	r7, #16
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}

0800d3d8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d3d8:	b480      	push	{r7}
 800d3da:	b085      	sub	sp, #20
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d006      	beq.n	800d3f6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800d3f2:	60fb      	str	r3, [r7, #12]
 800d3f4:	e001      	b.n	800d3fa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
	}
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	3714      	adds	r7, #20
 800d400:	46bd      	mov	sp, r7
 800d402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d406:	4770      	bx	lr

0800d408 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b086      	sub	sp, #24
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	60f8      	str	r0, [r7, #12]
 800d410:	60b9      	str	r1, [r7, #8]
 800d412:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d414:	2300      	movs	r3, #0
 800d416:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d41c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d422:	2b00      	cmp	r3, #0
 800d424:	d10d      	bne.n	800d442 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d14d      	bne.n	800d4ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	689b      	ldr	r3, [r3, #8]
 800d432:	4618      	mov	r0, r3
 800d434:	f001 f85e 	bl	800e4f4 <xTaskPriorityDisinherit>
 800d438:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	2200      	movs	r2, #0
 800d43e:	609a      	str	r2, [r3, #8]
 800d440:	e043      	b.n	800d4ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d119      	bne.n	800d47c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	6858      	ldr	r0, [r3, #4]
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d450:	461a      	mov	r2, r3
 800d452:	68b9      	ldr	r1, [r7, #8]
 800d454:	f002 fdb9 	bl	800ffca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	685a      	ldr	r2, [r3, #4]
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d460:	441a      	add	r2, r3
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	685a      	ldr	r2, [r3, #4]
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	689b      	ldr	r3, [r3, #8]
 800d46e:	429a      	cmp	r2, r3
 800d470:	d32b      	bcc.n	800d4ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	681a      	ldr	r2, [r3, #0]
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	605a      	str	r2, [r3, #4]
 800d47a:	e026      	b.n	800d4ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	68d8      	ldr	r0, [r3, #12]
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d484:	461a      	mov	r2, r3
 800d486:	68b9      	ldr	r1, [r7, #8]
 800d488:	f002 fd9f 	bl	800ffca <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	68da      	ldr	r2, [r3, #12]
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d494:	425b      	negs	r3, r3
 800d496:	441a      	add	r2, r3
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	68da      	ldr	r2, [r3, #12]
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	429a      	cmp	r2, r3
 800d4a6:	d207      	bcs.n	800d4b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	689a      	ldr	r2, [r3, #8]
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4b0:	425b      	negs	r3, r3
 800d4b2:	441a      	add	r2, r3
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2b02      	cmp	r3, #2
 800d4bc:	d105      	bne.n	800d4ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d002      	beq.n	800d4ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d4c4:	693b      	ldr	r3, [r7, #16]
 800d4c6:	3b01      	subs	r3, #1
 800d4c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d4ca:	693b      	ldr	r3, [r7, #16]
 800d4cc:	1c5a      	adds	r2, r3, #1
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d4d2:	697b      	ldr	r3, [r7, #20]
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3718      	adds	r7, #24
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}

0800d4dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b082      	sub	sp, #8
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
 800d4e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d018      	beq.n	800d520 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	68da      	ldr	r2, [r3, #12]
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4f6:	441a      	add	r2, r3
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	68da      	ldr	r2, [r3, #12]
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	689b      	ldr	r3, [r3, #8]
 800d504:	429a      	cmp	r2, r3
 800d506:	d303      	bcc.n	800d510 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681a      	ldr	r2, [r3, #0]
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	68d9      	ldr	r1, [r3, #12]
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d518:	461a      	mov	r2, r3
 800d51a:	6838      	ldr	r0, [r7, #0]
 800d51c:	f002 fd55 	bl	800ffca <memcpy>
	}
}
 800d520:	bf00      	nop
 800d522:	3708      	adds	r7, #8
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}

0800d528 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b084      	sub	sp, #16
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d530:	f001 fdca 	bl	800f0c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d53a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d53c:	e011      	b.n	800d562 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d542:	2b00      	cmp	r3, #0
 800d544:	d012      	beq.n	800d56c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	3324      	adds	r3, #36	@ 0x24
 800d54a:	4618      	mov	r0, r3
 800d54c:	f000 fd86 	bl	800e05c <xTaskRemoveFromEventList>
 800d550:	4603      	mov	r3, r0
 800d552:	2b00      	cmp	r3, #0
 800d554:	d001      	beq.n	800d55a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d556:	f000 fe5f 	bl	800e218 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d55a:	7bfb      	ldrb	r3, [r7, #15]
 800d55c:	3b01      	subs	r3, #1
 800d55e:	b2db      	uxtb	r3, r3
 800d560:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d566:	2b00      	cmp	r3, #0
 800d568:	dce9      	bgt.n	800d53e <prvUnlockQueue+0x16>
 800d56a:	e000      	b.n	800d56e <prvUnlockQueue+0x46>
					break;
 800d56c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	22ff      	movs	r2, #255	@ 0xff
 800d572:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d576:	f001 fdd9 	bl	800f12c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d57a:	f001 fda5 	bl	800f0c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d584:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d586:	e011      	b.n	800d5ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	691b      	ldr	r3, [r3, #16]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d012      	beq.n	800d5b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	3310      	adds	r3, #16
 800d594:	4618      	mov	r0, r3
 800d596:	f000 fd61 	bl	800e05c <xTaskRemoveFromEventList>
 800d59a:	4603      	mov	r3, r0
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d001      	beq.n	800d5a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d5a0:	f000 fe3a 	bl	800e218 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d5a4:	7bbb      	ldrb	r3, [r7, #14]
 800d5a6:	3b01      	subs	r3, #1
 800d5a8:	b2db      	uxtb	r3, r3
 800d5aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d5ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	dce9      	bgt.n	800d588 <prvUnlockQueue+0x60>
 800d5b4:	e000      	b.n	800d5b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d5b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	22ff      	movs	r2, #255	@ 0xff
 800d5bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d5c0:	f001 fdb4 	bl	800f12c <vPortExitCritical>
}
 800d5c4:	bf00      	nop
 800d5c6:	3710      	adds	r7, #16
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}

0800d5cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b084      	sub	sp, #16
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d5d4:	f001 fd78 	bl	800f0c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d102      	bne.n	800d5e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	60fb      	str	r3, [r7, #12]
 800d5e4:	e001      	b.n	800d5ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d5ea:	f001 fd9f 	bl	800f12c <vPortExitCritical>

	return xReturn;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3710      	adds	r7, #16
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}

0800d5f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b084      	sub	sp, #16
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d600:	f001 fd62 	bl	800f0c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d60c:	429a      	cmp	r2, r3
 800d60e:	d102      	bne.n	800d616 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d610:	2301      	movs	r3, #1
 800d612:	60fb      	str	r3, [r7, #12]
 800d614:	e001      	b.n	800d61a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d616:	2300      	movs	r3, #0
 800d618:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d61a:	f001 fd87 	bl	800f12c <vPortExitCritical>

	return xReturn;
 800d61e:	68fb      	ldr	r3, [r7, #12]
}
 800d620:	4618      	mov	r0, r3
 800d622:	3710      	adds	r7, #16
 800d624:	46bd      	mov	sp, r7
 800d626:	bd80      	pop	{r7, pc}

0800d628 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d628:	b480      	push	{r7}
 800d62a:	b085      	sub	sp, #20
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
 800d630:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d632:	2300      	movs	r3, #0
 800d634:	60fb      	str	r3, [r7, #12]
 800d636:	e014      	b.n	800d662 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d638:	4a0f      	ldr	r2, [pc, #60]	@ (800d678 <vQueueAddToRegistry+0x50>)
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d10b      	bne.n	800d65c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d644:	490c      	ldr	r1, [pc, #48]	@ (800d678 <vQueueAddToRegistry+0x50>)
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	683a      	ldr	r2, [r7, #0]
 800d64a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d64e:	4a0a      	ldr	r2, [pc, #40]	@ (800d678 <vQueueAddToRegistry+0x50>)
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	00db      	lsls	r3, r3, #3
 800d654:	4413      	add	r3, r2
 800d656:	687a      	ldr	r2, [r7, #4]
 800d658:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d65a:	e006      	b.n	800d66a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	3301      	adds	r3, #1
 800d660:	60fb      	str	r3, [r7, #12]
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	2b07      	cmp	r3, #7
 800d666:	d9e7      	bls.n	800d638 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d668:	bf00      	nop
 800d66a:	bf00      	nop
 800d66c:	3714      	adds	r7, #20
 800d66e:	46bd      	mov	sp, r7
 800d670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d674:	4770      	bx	lr
 800d676:	bf00      	nop
 800d678:	20000be8 	.word	0x20000be8

0800d67c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d67c:	b480      	push	{r7}
 800d67e:	b085      	sub	sp, #20
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d684:	2300      	movs	r3, #0
 800d686:	60fb      	str	r3, [r7, #12]
 800d688:	e016      	b.n	800d6b8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d68a:	4a10      	ldr	r2, [pc, #64]	@ (800d6cc <vQueueUnregisterQueue+0x50>)
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	00db      	lsls	r3, r3, #3
 800d690:	4413      	add	r3, r2
 800d692:	685b      	ldr	r3, [r3, #4]
 800d694:	687a      	ldr	r2, [r7, #4]
 800d696:	429a      	cmp	r2, r3
 800d698:	d10b      	bne.n	800d6b2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d69a:	4a0c      	ldr	r2, [pc, #48]	@ (800d6cc <vQueueUnregisterQueue+0x50>)
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	2100      	movs	r1, #0
 800d6a0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d6a4:	4a09      	ldr	r2, [pc, #36]	@ (800d6cc <vQueueUnregisterQueue+0x50>)
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	00db      	lsls	r3, r3, #3
 800d6aa:	4413      	add	r3, r2
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	605a      	str	r2, [r3, #4]
				break;
 800d6b0:	e006      	b.n	800d6c0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	3301      	adds	r3, #1
 800d6b6:	60fb      	str	r3, [r7, #12]
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	2b07      	cmp	r3, #7
 800d6bc:	d9e5      	bls.n	800d68a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d6be:	bf00      	nop
 800d6c0:	bf00      	nop
 800d6c2:	3714      	adds	r7, #20
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ca:	4770      	bx	lr
 800d6cc:	20000be8 	.word	0x20000be8

0800d6d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b086      	sub	sp, #24
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	60f8      	str	r0, [r7, #12]
 800d6d8:	60b9      	str	r1, [r7, #8]
 800d6da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d6e0:	f001 fcf2 	bl	800f0c8 <vPortEnterCritical>
 800d6e4:	697b      	ldr	r3, [r7, #20]
 800d6e6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d6ea:	b25b      	sxtb	r3, r3
 800d6ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6f0:	d103      	bne.n	800d6fa <vQueueWaitForMessageRestricted+0x2a>
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d6fa:	697b      	ldr	r3, [r7, #20]
 800d6fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d700:	b25b      	sxtb	r3, r3
 800d702:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d706:	d103      	bne.n	800d710 <vQueueWaitForMessageRestricted+0x40>
 800d708:	697b      	ldr	r3, [r7, #20]
 800d70a:	2200      	movs	r2, #0
 800d70c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d710:	f001 fd0c 	bl	800f12c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d106      	bne.n	800d72a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d71c:	697b      	ldr	r3, [r7, #20]
 800d71e:	3324      	adds	r3, #36	@ 0x24
 800d720:	687a      	ldr	r2, [r7, #4]
 800d722:	68b9      	ldr	r1, [r7, #8]
 800d724:	4618      	mov	r0, r3
 800d726:	f000 fc6d 	bl	800e004 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d72a:	6978      	ldr	r0, [r7, #20]
 800d72c:	f7ff fefc 	bl	800d528 <prvUnlockQueue>
	}
 800d730:	bf00      	nop
 800d732:	3718      	adds	r7, #24
 800d734:	46bd      	mov	sp, r7
 800d736:	bd80      	pop	{r7, pc}

0800d738 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b08e      	sub	sp, #56	@ 0x38
 800d73c:	af04      	add	r7, sp, #16
 800d73e:	60f8      	str	r0, [r7, #12]
 800d740:	60b9      	str	r1, [r7, #8]
 800d742:	607a      	str	r2, [r7, #4]
 800d744:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d10b      	bne.n	800d764 <xTaskCreateStatic+0x2c>
	__asm volatile
 800d74c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d750:	f383 8811 	msr	BASEPRI, r3
 800d754:	f3bf 8f6f 	isb	sy
 800d758:	f3bf 8f4f 	dsb	sy
 800d75c:	623b      	str	r3, [r7, #32]
}
 800d75e:	bf00      	nop
 800d760:	bf00      	nop
 800d762:	e7fd      	b.n	800d760 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d766:	2b00      	cmp	r3, #0
 800d768:	d10b      	bne.n	800d782 <xTaskCreateStatic+0x4a>
	__asm volatile
 800d76a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d76e:	f383 8811 	msr	BASEPRI, r3
 800d772:	f3bf 8f6f 	isb	sy
 800d776:	f3bf 8f4f 	dsb	sy
 800d77a:	61fb      	str	r3, [r7, #28]
}
 800d77c:	bf00      	nop
 800d77e:	bf00      	nop
 800d780:	e7fd      	b.n	800d77e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d782:	23a8      	movs	r3, #168	@ 0xa8
 800d784:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d786:	693b      	ldr	r3, [r7, #16]
 800d788:	2ba8      	cmp	r3, #168	@ 0xa8
 800d78a:	d00b      	beq.n	800d7a4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800d78c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d790:	f383 8811 	msr	BASEPRI, r3
 800d794:	f3bf 8f6f 	isb	sy
 800d798:	f3bf 8f4f 	dsb	sy
 800d79c:	61bb      	str	r3, [r7, #24]
}
 800d79e:	bf00      	nop
 800d7a0:	bf00      	nop
 800d7a2:	e7fd      	b.n	800d7a0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d7a4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d7a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d01e      	beq.n	800d7ea <xTaskCreateStatic+0xb2>
 800d7ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d01b      	beq.n	800d7ea <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d7b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7b4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d7b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d7ba:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d7bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7be:	2202      	movs	r2, #2
 800d7c0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	9303      	str	r3, [sp, #12]
 800d7c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7ca:	9302      	str	r3, [sp, #8]
 800d7cc:	f107 0314 	add.w	r3, r7, #20
 800d7d0:	9301      	str	r3, [sp, #4]
 800d7d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7d4:	9300      	str	r3, [sp, #0]
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	687a      	ldr	r2, [r7, #4]
 800d7da:	68b9      	ldr	r1, [r7, #8]
 800d7dc:	68f8      	ldr	r0, [r7, #12]
 800d7de:	f000 f851 	bl	800d884 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d7e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d7e4:	f000 f8f6 	bl	800d9d4 <prvAddNewTaskToReadyList>
 800d7e8:	e001      	b.n	800d7ee <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d7ee:	697b      	ldr	r3, [r7, #20]
	}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	3728      	adds	r7, #40	@ 0x28
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}

0800d7f8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b08c      	sub	sp, #48	@ 0x30
 800d7fc:	af04      	add	r7, sp, #16
 800d7fe:	60f8      	str	r0, [r7, #12]
 800d800:	60b9      	str	r1, [r7, #8]
 800d802:	603b      	str	r3, [r7, #0]
 800d804:	4613      	mov	r3, r2
 800d806:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d808:	88fb      	ldrh	r3, [r7, #6]
 800d80a:	009b      	lsls	r3, r3, #2
 800d80c:	4618      	mov	r0, r3
 800d80e:	f001 fd7d 	bl	800f30c <pvPortMalloc>
 800d812:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d814:	697b      	ldr	r3, [r7, #20]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d00e      	beq.n	800d838 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d81a:	20a8      	movs	r0, #168	@ 0xa8
 800d81c:	f001 fd76 	bl	800f30c <pvPortMalloc>
 800d820:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d822:	69fb      	ldr	r3, [r7, #28]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d003      	beq.n	800d830 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d828:	69fb      	ldr	r3, [r7, #28]
 800d82a:	697a      	ldr	r2, [r7, #20]
 800d82c:	631a      	str	r2, [r3, #48]	@ 0x30
 800d82e:	e005      	b.n	800d83c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d830:	6978      	ldr	r0, [r7, #20]
 800d832:	f001 fe39 	bl	800f4a8 <vPortFree>
 800d836:	e001      	b.n	800d83c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d838:	2300      	movs	r3, #0
 800d83a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d83c:	69fb      	ldr	r3, [r7, #28]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d017      	beq.n	800d872 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d842:	69fb      	ldr	r3, [r7, #28]
 800d844:	2200      	movs	r2, #0
 800d846:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d84a:	88fa      	ldrh	r2, [r7, #6]
 800d84c:	2300      	movs	r3, #0
 800d84e:	9303      	str	r3, [sp, #12]
 800d850:	69fb      	ldr	r3, [r7, #28]
 800d852:	9302      	str	r3, [sp, #8]
 800d854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d856:	9301      	str	r3, [sp, #4]
 800d858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d85a:	9300      	str	r3, [sp, #0]
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	68b9      	ldr	r1, [r7, #8]
 800d860:	68f8      	ldr	r0, [r7, #12]
 800d862:	f000 f80f 	bl	800d884 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d866:	69f8      	ldr	r0, [r7, #28]
 800d868:	f000 f8b4 	bl	800d9d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d86c:	2301      	movs	r3, #1
 800d86e:	61bb      	str	r3, [r7, #24]
 800d870:	e002      	b.n	800d878 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d872:	f04f 33ff 	mov.w	r3, #4294967295
 800d876:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d878:	69bb      	ldr	r3, [r7, #24]
	}
 800d87a:	4618      	mov	r0, r3
 800d87c:	3720      	adds	r7, #32
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}
	...

0800d884 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b088      	sub	sp, #32
 800d888:	af00      	add	r7, sp, #0
 800d88a:	60f8      	str	r0, [r7, #12]
 800d88c:	60b9      	str	r1, [r7, #8]
 800d88e:	607a      	str	r2, [r7, #4]
 800d890:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d894:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	009b      	lsls	r3, r3, #2
 800d89a:	461a      	mov	r2, r3
 800d89c:	21a5      	movs	r1, #165	@ 0xa5
 800d89e:	f002 fab3 	bl	800fe08 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d8a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d8ac:	3b01      	subs	r3, #1
 800d8ae:	009b      	lsls	r3, r3, #2
 800d8b0:	4413      	add	r3, r2
 800d8b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d8b4:	69bb      	ldr	r3, [r7, #24]
 800d8b6:	f023 0307 	bic.w	r3, r3, #7
 800d8ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d8bc:	69bb      	ldr	r3, [r7, #24]
 800d8be:	f003 0307 	and.w	r3, r3, #7
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d00b      	beq.n	800d8de <prvInitialiseNewTask+0x5a>
	__asm volatile
 800d8c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8ca:	f383 8811 	msr	BASEPRI, r3
 800d8ce:	f3bf 8f6f 	isb	sy
 800d8d2:	f3bf 8f4f 	dsb	sy
 800d8d6:	617b      	str	r3, [r7, #20]
}
 800d8d8:	bf00      	nop
 800d8da:	bf00      	nop
 800d8dc:	e7fd      	b.n	800d8da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d8de:	68bb      	ldr	r3, [r7, #8]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d01f      	beq.n	800d924 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	61fb      	str	r3, [r7, #28]
 800d8e8:	e012      	b.n	800d910 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d8ea:	68ba      	ldr	r2, [r7, #8]
 800d8ec:	69fb      	ldr	r3, [r7, #28]
 800d8ee:	4413      	add	r3, r2
 800d8f0:	7819      	ldrb	r1, [r3, #0]
 800d8f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8f4:	69fb      	ldr	r3, [r7, #28]
 800d8f6:	4413      	add	r3, r2
 800d8f8:	3334      	adds	r3, #52	@ 0x34
 800d8fa:	460a      	mov	r2, r1
 800d8fc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d8fe:	68ba      	ldr	r2, [r7, #8]
 800d900:	69fb      	ldr	r3, [r7, #28]
 800d902:	4413      	add	r3, r2
 800d904:	781b      	ldrb	r3, [r3, #0]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d006      	beq.n	800d918 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d90a:	69fb      	ldr	r3, [r7, #28]
 800d90c:	3301      	adds	r3, #1
 800d90e:	61fb      	str	r3, [r7, #28]
 800d910:	69fb      	ldr	r3, [r7, #28]
 800d912:	2b0f      	cmp	r3, #15
 800d914:	d9e9      	bls.n	800d8ea <prvInitialiseNewTask+0x66>
 800d916:	e000      	b.n	800d91a <prvInitialiseNewTask+0x96>
			{
				break;
 800d918:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d91a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d91c:	2200      	movs	r2, #0
 800d91e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d922:	e003      	b.n	800d92c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d926:	2200      	movs	r2, #0
 800d928:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d92c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d92e:	2b37      	cmp	r3, #55	@ 0x37
 800d930:	d901      	bls.n	800d936 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d932:	2337      	movs	r3, #55	@ 0x37
 800d934:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d938:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d93a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d93c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d93e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d940:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d944:	2200      	movs	r2, #0
 800d946:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d94a:	3304      	adds	r3, #4
 800d94c:	4618      	mov	r0, r3
 800d94e:	f7fe fe33 	bl	800c5b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d954:	3318      	adds	r3, #24
 800d956:	4618      	mov	r0, r3
 800d958:	f7fe fe2e 	bl	800c5b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d95c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d95e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d960:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d964:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d96a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d96c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d96e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d970:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d974:	2200      	movs	r2, #0
 800d976:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d97a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d97c:	2200      	movs	r2, #0
 800d97e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d984:	3354      	adds	r3, #84	@ 0x54
 800d986:	224c      	movs	r2, #76	@ 0x4c
 800d988:	2100      	movs	r1, #0
 800d98a:	4618      	mov	r0, r3
 800d98c:	f002 fa3c 	bl	800fe08 <memset>
 800d990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d992:	4a0d      	ldr	r2, [pc, #52]	@ (800d9c8 <prvInitialiseNewTask+0x144>)
 800d994:	659a      	str	r2, [r3, #88]	@ 0x58
 800d996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d998:	4a0c      	ldr	r2, [pc, #48]	@ (800d9cc <prvInitialiseNewTask+0x148>)
 800d99a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800d99c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d99e:	4a0c      	ldr	r2, [pc, #48]	@ (800d9d0 <prvInitialiseNewTask+0x14c>)
 800d9a0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d9a2:	683a      	ldr	r2, [r7, #0]
 800d9a4:	68f9      	ldr	r1, [r7, #12]
 800d9a6:	69b8      	ldr	r0, [r7, #24]
 800d9a8:	f001 fa5a 	bl	800ee60 <pxPortInitialiseStack>
 800d9ac:	4602      	mov	r2, r0
 800d9ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d9b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d002      	beq.n	800d9be <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d9b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d9bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d9be:	bf00      	nop
 800d9c0:	3720      	adds	r7, #32
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bd80      	pop	{r7, pc}
 800d9c6:	bf00      	nop
 800d9c8:	20005284 	.word	0x20005284
 800d9cc:	200052ec 	.word	0x200052ec
 800d9d0:	20005354 	.word	0x20005354

0800d9d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b082      	sub	sp, #8
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d9dc:	f001 fb74 	bl	800f0c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d9e0:	4b2d      	ldr	r3, [pc, #180]	@ (800da98 <prvAddNewTaskToReadyList+0xc4>)
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	3301      	adds	r3, #1
 800d9e6:	4a2c      	ldr	r2, [pc, #176]	@ (800da98 <prvAddNewTaskToReadyList+0xc4>)
 800d9e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d9ea:	4b2c      	ldr	r3, [pc, #176]	@ (800da9c <prvAddNewTaskToReadyList+0xc8>)
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d109      	bne.n	800da06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d9f2:	4a2a      	ldr	r2, [pc, #168]	@ (800da9c <prvAddNewTaskToReadyList+0xc8>)
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d9f8:	4b27      	ldr	r3, [pc, #156]	@ (800da98 <prvAddNewTaskToReadyList+0xc4>)
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	2b01      	cmp	r3, #1
 800d9fe:	d110      	bne.n	800da22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800da00:	f000 fc2e 	bl	800e260 <prvInitialiseTaskLists>
 800da04:	e00d      	b.n	800da22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800da06:	4b26      	ldr	r3, [pc, #152]	@ (800daa0 <prvAddNewTaskToReadyList+0xcc>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d109      	bne.n	800da22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800da0e:	4b23      	ldr	r3, [pc, #140]	@ (800da9c <prvAddNewTaskToReadyList+0xc8>)
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da18:	429a      	cmp	r2, r3
 800da1a:	d802      	bhi.n	800da22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800da1c:	4a1f      	ldr	r2, [pc, #124]	@ (800da9c <prvAddNewTaskToReadyList+0xc8>)
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800da22:	4b20      	ldr	r3, [pc, #128]	@ (800daa4 <prvAddNewTaskToReadyList+0xd0>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	3301      	adds	r3, #1
 800da28:	4a1e      	ldr	r2, [pc, #120]	@ (800daa4 <prvAddNewTaskToReadyList+0xd0>)
 800da2a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800da2c:	4b1d      	ldr	r3, [pc, #116]	@ (800daa4 <prvAddNewTaskToReadyList+0xd0>)
 800da2e:	681a      	ldr	r2, [r3, #0]
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da38:	4b1b      	ldr	r3, [pc, #108]	@ (800daa8 <prvAddNewTaskToReadyList+0xd4>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	429a      	cmp	r2, r3
 800da3e:	d903      	bls.n	800da48 <prvAddNewTaskToReadyList+0x74>
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da44:	4a18      	ldr	r2, [pc, #96]	@ (800daa8 <prvAddNewTaskToReadyList+0xd4>)
 800da46:	6013      	str	r3, [r2, #0]
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da4c:	4613      	mov	r3, r2
 800da4e:	009b      	lsls	r3, r3, #2
 800da50:	4413      	add	r3, r2
 800da52:	009b      	lsls	r3, r3, #2
 800da54:	4a15      	ldr	r2, [pc, #84]	@ (800daac <prvAddNewTaskToReadyList+0xd8>)
 800da56:	441a      	add	r2, r3
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	3304      	adds	r3, #4
 800da5c:	4619      	mov	r1, r3
 800da5e:	4610      	mov	r0, r2
 800da60:	f7fe fdb7 	bl	800c5d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800da64:	f001 fb62 	bl	800f12c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800da68:	4b0d      	ldr	r3, [pc, #52]	@ (800daa0 <prvAddNewTaskToReadyList+0xcc>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d00e      	beq.n	800da8e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800da70:	4b0a      	ldr	r3, [pc, #40]	@ (800da9c <prvAddNewTaskToReadyList+0xc8>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da7a:	429a      	cmp	r2, r3
 800da7c:	d207      	bcs.n	800da8e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800da7e:	4b0c      	ldr	r3, [pc, #48]	@ (800dab0 <prvAddNewTaskToReadyList+0xdc>)
 800da80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da84:	601a      	str	r2, [r3, #0]
 800da86:	f3bf 8f4f 	dsb	sy
 800da8a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da8e:	bf00      	nop
 800da90:	3708      	adds	r7, #8
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}
 800da96:	bf00      	nop
 800da98:	200010fc 	.word	0x200010fc
 800da9c:	20000c28 	.word	0x20000c28
 800daa0:	20001108 	.word	0x20001108
 800daa4:	20001118 	.word	0x20001118
 800daa8:	20001104 	.word	0x20001104
 800daac:	20000c2c 	.word	0x20000c2c
 800dab0:	e000ed04 	.word	0xe000ed04

0800dab4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b084      	sub	sp, #16
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dabc:	2300      	movs	r3, #0
 800dabe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d018      	beq.n	800daf8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dac6:	4b14      	ldr	r3, [pc, #80]	@ (800db18 <vTaskDelay+0x64>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d00b      	beq.n	800dae6 <vTaskDelay+0x32>
	__asm volatile
 800dace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dad2:	f383 8811 	msr	BASEPRI, r3
 800dad6:	f3bf 8f6f 	isb	sy
 800dada:	f3bf 8f4f 	dsb	sy
 800dade:	60bb      	str	r3, [r7, #8]
}
 800dae0:	bf00      	nop
 800dae2:	bf00      	nop
 800dae4:	e7fd      	b.n	800dae2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dae6:	f000 f88b 	bl	800dc00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800daea:	2100      	movs	r1, #0
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f000 fe09 	bl	800e704 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800daf2:	f000 f893 	bl	800dc1c <xTaskResumeAll>
 800daf6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d107      	bne.n	800db0e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800dafe:	4b07      	ldr	r3, [pc, #28]	@ (800db1c <vTaskDelay+0x68>)
 800db00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db04:	601a      	str	r2, [r3, #0]
 800db06:	f3bf 8f4f 	dsb	sy
 800db0a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800db0e:	bf00      	nop
 800db10:	3710      	adds	r7, #16
 800db12:	46bd      	mov	sp, r7
 800db14:	bd80      	pop	{r7, pc}
 800db16:	bf00      	nop
 800db18:	20001124 	.word	0x20001124
 800db1c:	e000ed04 	.word	0xe000ed04

0800db20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b08a      	sub	sp, #40	@ 0x28
 800db24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800db26:	2300      	movs	r3, #0
 800db28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800db2a:	2300      	movs	r3, #0
 800db2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800db2e:	463a      	mov	r2, r7
 800db30:	1d39      	adds	r1, r7, #4
 800db32:	f107 0308 	add.w	r3, r7, #8
 800db36:	4618      	mov	r0, r3
 800db38:	f7fe fcea 	bl	800c510 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800db3c:	6839      	ldr	r1, [r7, #0]
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	68ba      	ldr	r2, [r7, #8]
 800db42:	9202      	str	r2, [sp, #8]
 800db44:	9301      	str	r3, [sp, #4]
 800db46:	2300      	movs	r3, #0
 800db48:	9300      	str	r3, [sp, #0]
 800db4a:	2300      	movs	r3, #0
 800db4c:	460a      	mov	r2, r1
 800db4e:	4924      	ldr	r1, [pc, #144]	@ (800dbe0 <vTaskStartScheduler+0xc0>)
 800db50:	4824      	ldr	r0, [pc, #144]	@ (800dbe4 <vTaskStartScheduler+0xc4>)
 800db52:	f7ff fdf1 	bl	800d738 <xTaskCreateStatic>
 800db56:	4603      	mov	r3, r0
 800db58:	4a23      	ldr	r2, [pc, #140]	@ (800dbe8 <vTaskStartScheduler+0xc8>)
 800db5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800db5c:	4b22      	ldr	r3, [pc, #136]	@ (800dbe8 <vTaskStartScheduler+0xc8>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d002      	beq.n	800db6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800db64:	2301      	movs	r3, #1
 800db66:	617b      	str	r3, [r7, #20]
 800db68:	e001      	b.n	800db6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800db6a:	2300      	movs	r3, #0
 800db6c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800db6e:	697b      	ldr	r3, [r7, #20]
 800db70:	2b01      	cmp	r3, #1
 800db72:	d102      	bne.n	800db7a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800db74:	f000 fe1a 	bl	800e7ac <xTimerCreateTimerTask>
 800db78:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800db7a:	697b      	ldr	r3, [r7, #20]
 800db7c:	2b01      	cmp	r3, #1
 800db7e:	d11b      	bne.n	800dbb8 <vTaskStartScheduler+0x98>
	__asm volatile
 800db80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db84:	f383 8811 	msr	BASEPRI, r3
 800db88:	f3bf 8f6f 	isb	sy
 800db8c:	f3bf 8f4f 	dsb	sy
 800db90:	613b      	str	r3, [r7, #16]
}
 800db92:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800db94:	4b15      	ldr	r3, [pc, #84]	@ (800dbec <vTaskStartScheduler+0xcc>)
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	3354      	adds	r3, #84	@ 0x54
 800db9a:	4a15      	ldr	r2, [pc, #84]	@ (800dbf0 <vTaskStartScheduler+0xd0>)
 800db9c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800db9e:	4b15      	ldr	r3, [pc, #84]	@ (800dbf4 <vTaskStartScheduler+0xd4>)
 800dba0:	f04f 32ff 	mov.w	r2, #4294967295
 800dba4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dba6:	4b14      	ldr	r3, [pc, #80]	@ (800dbf8 <vTaskStartScheduler+0xd8>)
 800dba8:	2201      	movs	r2, #1
 800dbaa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dbac:	4b13      	ldr	r3, [pc, #76]	@ (800dbfc <vTaskStartScheduler+0xdc>)
 800dbae:	2200      	movs	r2, #0
 800dbb0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dbb2:	f001 f9e5 	bl	800ef80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dbb6:	e00f      	b.n	800dbd8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbbe:	d10b      	bne.n	800dbd8 <vTaskStartScheduler+0xb8>
	__asm volatile
 800dbc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbc4:	f383 8811 	msr	BASEPRI, r3
 800dbc8:	f3bf 8f6f 	isb	sy
 800dbcc:	f3bf 8f4f 	dsb	sy
 800dbd0:	60fb      	str	r3, [r7, #12]
}
 800dbd2:	bf00      	nop
 800dbd4:	bf00      	nop
 800dbd6:	e7fd      	b.n	800dbd4 <vTaskStartScheduler+0xb4>
}
 800dbd8:	bf00      	nop
 800dbda:	3718      	adds	r7, #24
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}
 800dbe0:	08010c18 	.word	0x08010c18
 800dbe4:	0800e231 	.word	0x0800e231
 800dbe8:	20001120 	.word	0x20001120
 800dbec:	20000c28 	.word	0x20000c28
 800dbf0:	20000034 	.word	0x20000034
 800dbf4:	2000111c 	.word	0x2000111c
 800dbf8:	20001108 	.word	0x20001108
 800dbfc:	20001100 	.word	0x20001100

0800dc00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dc00:	b480      	push	{r7}
 800dc02:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dc04:	4b04      	ldr	r3, [pc, #16]	@ (800dc18 <vTaskSuspendAll+0x18>)
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	3301      	adds	r3, #1
 800dc0a:	4a03      	ldr	r2, [pc, #12]	@ (800dc18 <vTaskSuspendAll+0x18>)
 800dc0c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dc0e:	bf00      	nop
 800dc10:	46bd      	mov	sp, r7
 800dc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc16:	4770      	bx	lr
 800dc18:	20001124 	.word	0x20001124

0800dc1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b084      	sub	sp, #16
 800dc20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dc22:	2300      	movs	r3, #0
 800dc24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dc26:	2300      	movs	r3, #0
 800dc28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dc2a:	4b42      	ldr	r3, [pc, #264]	@ (800dd34 <xTaskResumeAll+0x118>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d10b      	bne.n	800dc4a <xTaskResumeAll+0x2e>
	__asm volatile
 800dc32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc36:	f383 8811 	msr	BASEPRI, r3
 800dc3a:	f3bf 8f6f 	isb	sy
 800dc3e:	f3bf 8f4f 	dsb	sy
 800dc42:	603b      	str	r3, [r7, #0]
}
 800dc44:	bf00      	nop
 800dc46:	bf00      	nop
 800dc48:	e7fd      	b.n	800dc46 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dc4a:	f001 fa3d 	bl	800f0c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dc4e:	4b39      	ldr	r3, [pc, #228]	@ (800dd34 <xTaskResumeAll+0x118>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	3b01      	subs	r3, #1
 800dc54:	4a37      	ldr	r2, [pc, #220]	@ (800dd34 <xTaskResumeAll+0x118>)
 800dc56:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc58:	4b36      	ldr	r3, [pc, #216]	@ (800dd34 <xTaskResumeAll+0x118>)
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d162      	bne.n	800dd26 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dc60:	4b35      	ldr	r3, [pc, #212]	@ (800dd38 <xTaskResumeAll+0x11c>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d05e      	beq.n	800dd26 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dc68:	e02f      	b.n	800dcca <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc6a:	4b34      	ldr	r3, [pc, #208]	@ (800dd3c <xTaskResumeAll+0x120>)
 800dc6c:	68db      	ldr	r3, [r3, #12]
 800dc6e:	68db      	ldr	r3, [r3, #12]
 800dc70:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	3318      	adds	r3, #24
 800dc76:	4618      	mov	r0, r3
 800dc78:	f7fe fd08 	bl	800c68c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	3304      	adds	r3, #4
 800dc80:	4618      	mov	r0, r3
 800dc82:	f7fe fd03 	bl	800c68c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc8a:	4b2d      	ldr	r3, [pc, #180]	@ (800dd40 <xTaskResumeAll+0x124>)
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	429a      	cmp	r2, r3
 800dc90:	d903      	bls.n	800dc9a <xTaskResumeAll+0x7e>
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc96:	4a2a      	ldr	r2, [pc, #168]	@ (800dd40 <xTaskResumeAll+0x124>)
 800dc98:	6013      	str	r3, [r2, #0]
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc9e:	4613      	mov	r3, r2
 800dca0:	009b      	lsls	r3, r3, #2
 800dca2:	4413      	add	r3, r2
 800dca4:	009b      	lsls	r3, r3, #2
 800dca6:	4a27      	ldr	r2, [pc, #156]	@ (800dd44 <xTaskResumeAll+0x128>)
 800dca8:	441a      	add	r2, r3
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	3304      	adds	r3, #4
 800dcae:	4619      	mov	r1, r3
 800dcb0:	4610      	mov	r0, r2
 800dcb2:	f7fe fc8e 	bl	800c5d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcba:	4b23      	ldr	r3, [pc, #140]	@ (800dd48 <xTaskResumeAll+0x12c>)
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	d302      	bcc.n	800dcca <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800dcc4:	4b21      	ldr	r3, [pc, #132]	@ (800dd4c <xTaskResumeAll+0x130>)
 800dcc6:	2201      	movs	r2, #1
 800dcc8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dcca:	4b1c      	ldr	r3, [pc, #112]	@ (800dd3c <xTaskResumeAll+0x120>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d1cb      	bne.n	800dc6a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d001      	beq.n	800dcdc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dcd8:	f000 fb66 	bl	800e3a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dcdc:	4b1c      	ldr	r3, [pc, #112]	@ (800dd50 <xTaskResumeAll+0x134>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d010      	beq.n	800dd0a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dce8:	f000 f846 	bl	800dd78 <xTaskIncrementTick>
 800dcec:	4603      	mov	r3, r0
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d002      	beq.n	800dcf8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800dcf2:	4b16      	ldr	r3, [pc, #88]	@ (800dd4c <xTaskResumeAll+0x130>)
 800dcf4:	2201      	movs	r2, #1
 800dcf6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	3b01      	subs	r3, #1
 800dcfc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d1f1      	bne.n	800dce8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800dd04:	4b12      	ldr	r3, [pc, #72]	@ (800dd50 <xTaskResumeAll+0x134>)
 800dd06:	2200      	movs	r2, #0
 800dd08:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dd0a:	4b10      	ldr	r3, [pc, #64]	@ (800dd4c <xTaskResumeAll+0x130>)
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d009      	beq.n	800dd26 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dd12:	2301      	movs	r3, #1
 800dd14:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dd16:	4b0f      	ldr	r3, [pc, #60]	@ (800dd54 <xTaskResumeAll+0x138>)
 800dd18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd1c:	601a      	str	r2, [r3, #0]
 800dd1e:	f3bf 8f4f 	dsb	sy
 800dd22:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dd26:	f001 fa01 	bl	800f12c <vPortExitCritical>

	return xAlreadyYielded;
 800dd2a:	68bb      	ldr	r3, [r7, #8]
}
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	3710      	adds	r7, #16
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd80      	pop	{r7, pc}
 800dd34:	20001124 	.word	0x20001124
 800dd38:	200010fc 	.word	0x200010fc
 800dd3c:	200010bc 	.word	0x200010bc
 800dd40:	20001104 	.word	0x20001104
 800dd44:	20000c2c 	.word	0x20000c2c
 800dd48:	20000c28 	.word	0x20000c28
 800dd4c:	20001110 	.word	0x20001110
 800dd50:	2000110c 	.word	0x2000110c
 800dd54:	e000ed04 	.word	0xe000ed04

0800dd58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dd58:	b480      	push	{r7}
 800dd5a:	b083      	sub	sp, #12
 800dd5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dd5e:	4b05      	ldr	r3, [pc, #20]	@ (800dd74 <xTaskGetTickCount+0x1c>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dd64:	687b      	ldr	r3, [r7, #4]
}
 800dd66:	4618      	mov	r0, r3
 800dd68:	370c      	adds	r7, #12
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd70:	4770      	bx	lr
 800dd72:	bf00      	nop
 800dd74:	20001100 	.word	0x20001100

0800dd78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b086      	sub	sp, #24
 800dd7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dd7e:	2300      	movs	r3, #0
 800dd80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd82:	4b4f      	ldr	r3, [pc, #316]	@ (800dec0 <xTaskIncrementTick+0x148>)
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	f040 8090 	bne.w	800deac <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dd8c:	4b4d      	ldr	r3, [pc, #308]	@ (800dec4 <xTaskIncrementTick+0x14c>)
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	3301      	adds	r3, #1
 800dd92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dd94:	4a4b      	ldr	r2, [pc, #300]	@ (800dec4 <xTaskIncrementTick+0x14c>)
 800dd96:	693b      	ldr	r3, [r7, #16]
 800dd98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dd9a:	693b      	ldr	r3, [r7, #16]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d121      	bne.n	800dde4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800dda0:	4b49      	ldr	r3, [pc, #292]	@ (800dec8 <xTaskIncrementTick+0x150>)
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d00b      	beq.n	800ddc2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800ddaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddae:	f383 8811 	msr	BASEPRI, r3
 800ddb2:	f3bf 8f6f 	isb	sy
 800ddb6:	f3bf 8f4f 	dsb	sy
 800ddba:	603b      	str	r3, [r7, #0]
}
 800ddbc:	bf00      	nop
 800ddbe:	bf00      	nop
 800ddc0:	e7fd      	b.n	800ddbe <xTaskIncrementTick+0x46>
 800ddc2:	4b41      	ldr	r3, [pc, #260]	@ (800dec8 <xTaskIncrementTick+0x150>)
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	60fb      	str	r3, [r7, #12]
 800ddc8:	4b40      	ldr	r3, [pc, #256]	@ (800decc <xTaskIncrementTick+0x154>)
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	4a3e      	ldr	r2, [pc, #248]	@ (800dec8 <xTaskIncrementTick+0x150>)
 800ddce:	6013      	str	r3, [r2, #0]
 800ddd0:	4a3e      	ldr	r2, [pc, #248]	@ (800decc <xTaskIncrementTick+0x154>)
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	6013      	str	r3, [r2, #0]
 800ddd6:	4b3e      	ldr	r3, [pc, #248]	@ (800ded0 <xTaskIncrementTick+0x158>)
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	3301      	adds	r3, #1
 800dddc:	4a3c      	ldr	r2, [pc, #240]	@ (800ded0 <xTaskIncrementTick+0x158>)
 800ddde:	6013      	str	r3, [r2, #0]
 800dde0:	f000 fae2 	bl	800e3a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dde4:	4b3b      	ldr	r3, [pc, #236]	@ (800ded4 <xTaskIncrementTick+0x15c>)
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	693a      	ldr	r2, [r7, #16]
 800ddea:	429a      	cmp	r2, r3
 800ddec:	d349      	bcc.n	800de82 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ddee:	4b36      	ldr	r3, [pc, #216]	@ (800dec8 <xTaskIncrementTick+0x150>)
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d104      	bne.n	800de02 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ddf8:	4b36      	ldr	r3, [pc, #216]	@ (800ded4 <xTaskIncrementTick+0x15c>)
 800ddfa:	f04f 32ff 	mov.w	r2, #4294967295
 800ddfe:	601a      	str	r2, [r3, #0]
					break;
 800de00:	e03f      	b.n	800de82 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de02:	4b31      	ldr	r3, [pc, #196]	@ (800dec8 <xTaskIncrementTick+0x150>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	68db      	ldr	r3, [r3, #12]
 800de08:	68db      	ldr	r3, [r3, #12]
 800de0a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800de0c:	68bb      	ldr	r3, [r7, #8]
 800de0e:	685b      	ldr	r3, [r3, #4]
 800de10:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800de12:	693a      	ldr	r2, [r7, #16]
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	429a      	cmp	r2, r3
 800de18:	d203      	bcs.n	800de22 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800de1a:	4a2e      	ldr	r2, [pc, #184]	@ (800ded4 <xTaskIncrementTick+0x15c>)
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800de20:	e02f      	b.n	800de82 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de22:	68bb      	ldr	r3, [r7, #8]
 800de24:	3304      	adds	r3, #4
 800de26:	4618      	mov	r0, r3
 800de28:	f7fe fc30 	bl	800c68c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800de2c:	68bb      	ldr	r3, [r7, #8]
 800de2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de30:	2b00      	cmp	r3, #0
 800de32:	d004      	beq.n	800de3e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	3318      	adds	r3, #24
 800de38:	4618      	mov	r0, r3
 800de3a:	f7fe fc27 	bl	800c68c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800de3e:	68bb      	ldr	r3, [r7, #8]
 800de40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de42:	4b25      	ldr	r3, [pc, #148]	@ (800ded8 <xTaskIncrementTick+0x160>)
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	429a      	cmp	r2, r3
 800de48:	d903      	bls.n	800de52 <xTaskIncrementTick+0xda>
 800de4a:	68bb      	ldr	r3, [r7, #8]
 800de4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de4e:	4a22      	ldr	r2, [pc, #136]	@ (800ded8 <xTaskIncrementTick+0x160>)
 800de50:	6013      	str	r3, [r2, #0]
 800de52:	68bb      	ldr	r3, [r7, #8]
 800de54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de56:	4613      	mov	r3, r2
 800de58:	009b      	lsls	r3, r3, #2
 800de5a:	4413      	add	r3, r2
 800de5c:	009b      	lsls	r3, r3, #2
 800de5e:	4a1f      	ldr	r2, [pc, #124]	@ (800dedc <xTaskIncrementTick+0x164>)
 800de60:	441a      	add	r2, r3
 800de62:	68bb      	ldr	r3, [r7, #8]
 800de64:	3304      	adds	r3, #4
 800de66:	4619      	mov	r1, r3
 800de68:	4610      	mov	r0, r2
 800de6a:	f7fe fbb2 	bl	800c5d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800de6e:	68bb      	ldr	r3, [r7, #8]
 800de70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de72:	4b1b      	ldr	r3, [pc, #108]	@ (800dee0 <xTaskIncrementTick+0x168>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de78:	429a      	cmp	r2, r3
 800de7a:	d3b8      	bcc.n	800ddee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800de7c:	2301      	movs	r3, #1
 800de7e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de80:	e7b5      	b.n	800ddee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800de82:	4b17      	ldr	r3, [pc, #92]	@ (800dee0 <xTaskIncrementTick+0x168>)
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de88:	4914      	ldr	r1, [pc, #80]	@ (800dedc <xTaskIncrementTick+0x164>)
 800de8a:	4613      	mov	r3, r2
 800de8c:	009b      	lsls	r3, r3, #2
 800de8e:	4413      	add	r3, r2
 800de90:	009b      	lsls	r3, r3, #2
 800de92:	440b      	add	r3, r1
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	2b01      	cmp	r3, #1
 800de98:	d901      	bls.n	800de9e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800de9a:	2301      	movs	r3, #1
 800de9c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800de9e:	4b11      	ldr	r3, [pc, #68]	@ (800dee4 <xTaskIncrementTick+0x16c>)
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d007      	beq.n	800deb6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800dea6:	2301      	movs	r3, #1
 800dea8:	617b      	str	r3, [r7, #20]
 800deaa:	e004      	b.n	800deb6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800deac:	4b0e      	ldr	r3, [pc, #56]	@ (800dee8 <xTaskIncrementTick+0x170>)
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	3301      	adds	r3, #1
 800deb2:	4a0d      	ldr	r2, [pc, #52]	@ (800dee8 <xTaskIncrementTick+0x170>)
 800deb4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800deb6:	697b      	ldr	r3, [r7, #20]
}
 800deb8:	4618      	mov	r0, r3
 800deba:	3718      	adds	r7, #24
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}
 800dec0:	20001124 	.word	0x20001124
 800dec4:	20001100 	.word	0x20001100
 800dec8:	200010b4 	.word	0x200010b4
 800decc:	200010b8 	.word	0x200010b8
 800ded0:	20001114 	.word	0x20001114
 800ded4:	2000111c 	.word	0x2000111c
 800ded8:	20001104 	.word	0x20001104
 800dedc:	20000c2c 	.word	0x20000c2c
 800dee0:	20000c28 	.word	0x20000c28
 800dee4:	20001110 	.word	0x20001110
 800dee8:	2000110c 	.word	0x2000110c

0800deec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800deec:	b480      	push	{r7}
 800deee:	b085      	sub	sp, #20
 800def0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800def2:	4b2b      	ldr	r3, [pc, #172]	@ (800dfa0 <vTaskSwitchContext+0xb4>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d003      	beq.n	800df02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800defa:	4b2a      	ldr	r3, [pc, #168]	@ (800dfa4 <vTaskSwitchContext+0xb8>)
 800defc:	2201      	movs	r2, #1
 800defe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800df00:	e047      	b.n	800df92 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800df02:	4b28      	ldr	r3, [pc, #160]	@ (800dfa4 <vTaskSwitchContext+0xb8>)
 800df04:	2200      	movs	r2, #0
 800df06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df08:	4b27      	ldr	r3, [pc, #156]	@ (800dfa8 <vTaskSwitchContext+0xbc>)
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	60fb      	str	r3, [r7, #12]
 800df0e:	e011      	b.n	800df34 <vTaskSwitchContext+0x48>
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d10b      	bne.n	800df2e <vTaskSwitchContext+0x42>
	__asm volatile
 800df16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df1a:	f383 8811 	msr	BASEPRI, r3
 800df1e:	f3bf 8f6f 	isb	sy
 800df22:	f3bf 8f4f 	dsb	sy
 800df26:	607b      	str	r3, [r7, #4]
}
 800df28:	bf00      	nop
 800df2a:	bf00      	nop
 800df2c:	e7fd      	b.n	800df2a <vTaskSwitchContext+0x3e>
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	3b01      	subs	r3, #1
 800df32:	60fb      	str	r3, [r7, #12]
 800df34:	491d      	ldr	r1, [pc, #116]	@ (800dfac <vTaskSwitchContext+0xc0>)
 800df36:	68fa      	ldr	r2, [r7, #12]
 800df38:	4613      	mov	r3, r2
 800df3a:	009b      	lsls	r3, r3, #2
 800df3c:	4413      	add	r3, r2
 800df3e:	009b      	lsls	r3, r3, #2
 800df40:	440b      	add	r3, r1
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d0e3      	beq.n	800df10 <vTaskSwitchContext+0x24>
 800df48:	68fa      	ldr	r2, [r7, #12]
 800df4a:	4613      	mov	r3, r2
 800df4c:	009b      	lsls	r3, r3, #2
 800df4e:	4413      	add	r3, r2
 800df50:	009b      	lsls	r3, r3, #2
 800df52:	4a16      	ldr	r2, [pc, #88]	@ (800dfac <vTaskSwitchContext+0xc0>)
 800df54:	4413      	add	r3, r2
 800df56:	60bb      	str	r3, [r7, #8]
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	685b      	ldr	r3, [r3, #4]
 800df5c:	685a      	ldr	r2, [r3, #4]
 800df5e:	68bb      	ldr	r3, [r7, #8]
 800df60:	605a      	str	r2, [r3, #4]
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	685a      	ldr	r2, [r3, #4]
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	3308      	adds	r3, #8
 800df6a:	429a      	cmp	r2, r3
 800df6c:	d104      	bne.n	800df78 <vTaskSwitchContext+0x8c>
 800df6e:	68bb      	ldr	r3, [r7, #8]
 800df70:	685b      	ldr	r3, [r3, #4]
 800df72:	685a      	ldr	r2, [r3, #4]
 800df74:	68bb      	ldr	r3, [r7, #8]
 800df76:	605a      	str	r2, [r3, #4]
 800df78:	68bb      	ldr	r3, [r7, #8]
 800df7a:	685b      	ldr	r3, [r3, #4]
 800df7c:	68db      	ldr	r3, [r3, #12]
 800df7e:	4a0c      	ldr	r2, [pc, #48]	@ (800dfb0 <vTaskSwitchContext+0xc4>)
 800df80:	6013      	str	r3, [r2, #0]
 800df82:	4a09      	ldr	r2, [pc, #36]	@ (800dfa8 <vTaskSwitchContext+0xbc>)
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800df88:	4b09      	ldr	r3, [pc, #36]	@ (800dfb0 <vTaskSwitchContext+0xc4>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	3354      	adds	r3, #84	@ 0x54
 800df8e:	4a09      	ldr	r2, [pc, #36]	@ (800dfb4 <vTaskSwitchContext+0xc8>)
 800df90:	6013      	str	r3, [r2, #0]
}
 800df92:	bf00      	nop
 800df94:	3714      	adds	r7, #20
 800df96:	46bd      	mov	sp, r7
 800df98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9c:	4770      	bx	lr
 800df9e:	bf00      	nop
 800dfa0:	20001124 	.word	0x20001124
 800dfa4:	20001110 	.word	0x20001110
 800dfa8:	20001104 	.word	0x20001104
 800dfac:	20000c2c 	.word	0x20000c2c
 800dfb0:	20000c28 	.word	0x20000c28
 800dfb4:	20000034 	.word	0x20000034

0800dfb8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b084      	sub	sp, #16
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
 800dfc0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d10b      	bne.n	800dfe0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800dfc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfcc:	f383 8811 	msr	BASEPRI, r3
 800dfd0:	f3bf 8f6f 	isb	sy
 800dfd4:	f3bf 8f4f 	dsb	sy
 800dfd8:	60fb      	str	r3, [r7, #12]
}
 800dfda:	bf00      	nop
 800dfdc:	bf00      	nop
 800dfde:	e7fd      	b.n	800dfdc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dfe0:	4b07      	ldr	r3, [pc, #28]	@ (800e000 <vTaskPlaceOnEventList+0x48>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	3318      	adds	r3, #24
 800dfe6:	4619      	mov	r1, r3
 800dfe8:	6878      	ldr	r0, [r7, #4]
 800dfea:	f7fe fb16 	bl	800c61a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dfee:	2101      	movs	r1, #1
 800dff0:	6838      	ldr	r0, [r7, #0]
 800dff2:	f000 fb87 	bl	800e704 <prvAddCurrentTaskToDelayedList>
}
 800dff6:	bf00      	nop
 800dff8:	3710      	adds	r7, #16
 800dffa:	46bd      	mov	sp, r7
 800dffc:	bd80      	pop	{r7, pc}
 800dffe:	bf00      	nop
 800e000:	20000c28 	.word	0x20000c28

0800e004 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e004:	b580      	push	{r7, lr}
 800e006:	b086      	sub	sp, #24
 800e008:	af00      	add	r7, sp, #0
 800e00a:	60f8      	str	r0, [r7, #12]
 800e00c:	60b9      	str	r1, [r7, #8]
 800e00e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d10b      	bne.n	800e02e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e01a:	f383 8811 	msr	BASEPRI, r3
 800e01e:	f3bf 8f6f 	isb	sy
 800e022:	f3bf 8f4f 	dsb	sy
 800e026:	617b      	str	r3, [r7, #20]
}
 800e028:	bf00      	nop
 800e02a:	bf00      	nop
 800e02c:	e7fd      	b.n	800e02a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e02e:	4b0a      	ldr	r3, [pc, #40]	@ (800e058 <vTaskPlaceOnEventListRestricted+0x54>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	3318      	adds	r3, #24
 800e034:	4619      	mov	r1, r3
 800e036:	68f8      	ldr	r0, [r7, #12]
 800e038:	f7fe facb 	bl	800c5d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d002      	beq.n	800e048 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e042:	f04f 33ff 	mov.w	r3, #4294967295
 800e046:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e048:	6879      	ldr	r1, [r7, #4]
 800e04a:	68b8      	ldr	r0, [r7, #8]
 800e04c:	f000 fb5a 	bl	800e704 <prvAddCurrentTaskToDelayedList>
	}
 800e050:	bf00      	nop
 800e052:	3718      	adds	r7, #24
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}
 800e058:	20000c28 	.word	0x20000c28

0800e05c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b086      	sub	sp, #24
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	68db      	ldr	r3, [r3, #12]
 800e068:	68db      	ldr	r3, [r3, #12]
 800e06a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e06c:	693b      	ldr	r3, [r7, #16]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d10b      	bne.n	800e08a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e076:	f383 8811 	msr	BASEPRI, r3
 800e07a:	f3bf 8f6f 	isb	sy
 800e07e:	f3bf 8f4f 	dsb	sy
 800e082:	60fb      	str	r3, [r7, #12]
}
 800e084:	bf00      	nop
 800e086:	bf00      	nop
 800e088:	e7fd      	b.n	800e086 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	3318      	adds	r3, #24
 800e08e:	4618      	mov	r0, r3
 800e090:	f7fe fafc 	bl	800c68c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e094:	4b1d      	ldr	r3, [pc, #116]	@ (800e10c <xTaskRemoveFromEventList+0xb0>)
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d11d      	bne.n	800e0d8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e09c:	693b      	ldr	r3, [r7, #16]
 800e09e:	3304      	adds	r3, #4
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f7fe faf3 	bl	800c68c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e0a6:	693b      	ldr	r3, [r7, #16]
 800e0a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0aa:	4b19      	ldr	r3, [pc, #100]	@ (800e110 <xTaskRemoveFromEventList+0xb4>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	429a      	cmp	r2, r3
 800e0b0:	d903      	bls.n	800e0ba <xTaskRemoveFromEventList+0x5e>
 800e0b2:	693b      	ldr	r3, [r7, #16]
 800e0b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0b6:	4a16      	ldr	r2, [pc, #88]	@ (800e110 <xTaskRemoveFromEventList+0xb4>)
 800e0b8:	6013      	str	r3, [r2, #0]
 800e0ba:	693b      	ldr	r3, [r7, #16]
 800e0bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0be:	4613      	mov	r3, r2
 800e0c0:	009b      	lsls	r3, r3, #2
 800e0c2:	4413      	add	r3, r2
 800e0c4:	009b      	lsls	r3, r3, #2
 800e0c6:	4a13      	ldr	r2, [pc, #76]	@ (800e114 <xTaskRemoveFromEventList+0xb8>)
 800e0c8:	441a      	add	r2, r3
 800e0ca:	693b      	ldr	r3, [r7, #16]
 800e0cc:	3304      	adds	r3, #4
 800e0ce:	4619      	mov	r1, r3
 800e0d0:	4610      	mov	r0, r2
 800e0d2:	f7fe fa7e 	bl	800c5d2 <vListInsertEnd>
 800e0d6:	e005      	b.n	800e0e4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e0d8:	693b      	ldr	r3, [r7, #16]
 800e0da:	3318      	adds	r3, #24
 800e0dc:	4619      	mov	r1, r3
 800e0de:	480e      	ldr	r0, [pc, #56]	@ (800e118 <xTaskRemoveFromEventList+0xbc>)
 800e0e0:	f7fe fa77 	bl	800c5d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e0e4:	693b      	ldr	r3, [r7, #16]
 800e0e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0e8:	4b0c      	ldr	r3, [pc, #48]	@ (800e11c <xTaskRemoveFromEventList+0xc0>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0ee:	429a      	cmp	r2, r3
 800e0f0:	d905      	bls.n	800e0fe <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e0f2:	2301      	movs	r3, #1
 800e0f4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e0f6:	4b0a      	ldr	r3, [pc, #40]	@ (800e120 <xTaskRemoveFromEventList+0xc4>)
 800e0f8:	2201      	movs	r2, #1
 800e0fa:	601a      	str	r2, [r3, #0]
 800e0fc:	e001      	b.n	800e102 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e0fe:	2300      	movs	r3, #0
 800e100:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e102:	697b      	ldr	r3, [r7, #20]
}
 800e104:	4618      	mov	r0, r3
 800e106:	3718      	adds	r7, #24
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}
 800e10c:	20001124 	.word	0x20001124
 800e110:	20001104 	.word	0x20001104
 800e114:	20000c2c 	.word	0x20000c2c
 800e118:	200010bc 	.word	0x200010bc
 800e11c:	20000c28 	.word	0x20000c28
 800e120:	20001110 	.word	0x20001110

0800e124 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e124:	b480      	push	{r7}
 800e126:	b083      	sub	sp, #12
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e12c:	4b06      	ldr	r3, [pc, #24]	@ (800e148 <vTaskInternalSetTimeOutState+0x24>)
 800e12e:	681a      	ldr	r2, [r3, #0]
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e134:	4b05      	ldr	r3, [pc, #20]	@ (800e14c <vTaskInternalSetTimeOutState+0x28>)
 800e136:	681a      	ldr	r2, [r3, #0]
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	605a      	str	r2, [r3, #4]
}
 800e13c:	bf00      	nop
 800e13e:	370c      	adds	r7, #12
 800e140:	46bd      	mov	sp, r7
 800e142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e146:	4770      	bx	lr
 800e148:	20001114 	.word	0x20001114
 800e14c:	20001100 	.word	0x20001100

0800e150 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b088      	sub	sp, #32
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
 800e158:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d10b      	bne.n	800e178 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e164:	f383 8811 	msr	BASEPRI, r3
 800e168:	f3bf 8f6f 	isb	sy
 800e16c:	f3bf 8f4f 	dsb	sy
 800e170:	613b      	str	r3, [r7, #16]
}
 800e172:	bf00      	nop
 800e174:	bf00      	nop
 800e176:	e7fd      	b.n	800e174 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d10b      	bne.n	800e196 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e17e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e182:	f383 8811 	msr	BASEPRI, r3
 800e186:	f3bf 8f6f 	isb	sy
 800e18a:	f3bf 8f4f 	dsb	sy
 800e18e:	60fb      	str	r3, [r7, #12]
}
 800e190:	bf00      	nop
 800e192:	bf00      	nop
 800e194:	e7fd      	b.n	800e192 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e196:	f000 ff97 	bl	800f0c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e19a:	4b1d      	ldr	r3, [pc, #116]	@ (800e210 <xTaskCheckForTimeOut+0xc0>)
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	685b      	ldr	r3, [r3, #4]
 800e1a4:	69ba      	ldr	r2, [r7, #24]
 800e1a6:	1ad3      	subs	r3, r2, r3
 800e1a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1b2:	d102      	bne.n	800e1ba <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	61fb      	str	r3, [r7, #28]
 800e1b8:	e023      	b.n	800e202 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681a      	ldr	r2, [r3, #0]
 800e1be:	4b15      	ldr	r3, [pc, #84]	@ (800e214 <xTaskCheckForTimeOut+0xc4>)
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	429a      	cmp	r2, r3
 800e1c4:	d007      	beq.n	800e1d6 <xTaskCheckForTimeOut+0x86>
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	685b      	ldr	r3, [r3, #4]
 800e1ca:	69ba      	ldr	r2, [r7, #24]
 800e1cc:	429a      	cmp	r2, r3
 800e1ce:	d302      	bcc.n	800e1d6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e1d0:	2301      	movs	r3, #1
 800e1d2:	61fb      	str	r3, [r7, #28]
 800e1d4:	e015      	b.n	800e202 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	697a      	ldr	r2, [r7, #20]
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	d20b      	bcs.n	800e1f8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	681a      	ldr	r2, [r3, #0]
 800e1e4:	697b      	ldr	r3, [r7, #20]
 800e1e6:	1ad2      	subs	r2, r2, r3
 800e1e8:	683b      	ldr	r3, [r7, #0]
 800e1ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	f7ff ff99 	bl	800e124 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	61fb      	str	r3, [r7, #28]
 800e1f6:	e004      	b.n	800e202 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e1fe:	2301      	movs	r3, #1
 800e200:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e202:	f000 ff93 	bl	800f12c <vPortExitCritical>

	return xReturn;
 800e206:	69fb      	ldr	r3, [r7, #28]
}
 800e208:	4618      	mov	r0, r3
 800e20a:	3720      	adds	r7, #32
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bd80      	pop	{r7, pc}
 800e210:	20001100 	.word	0x20001100
 800e214:	20001114 	.word	0x20001114

0800e218 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e218:	b480      	push	{r7}
 800e21a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e21c:	4b03      	ldr	r3, [pc, #12]	@ (800e22c <vTaskMissedYield+0x14>)
 800e21e:	2201      	movs	r2, #1
 800e220:	601a      	str	r2, [r3, #0]
}
 800e222:	bf00      	nop
 800e224:	46bd      	mov	sp, r7
 800e226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22a:	4770      	bx	lr
 800e22c:	20001110 	.word	0x20001110

0800e230 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b082      	sub	sp, #8
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e238:	f000 f852 	bl	800e2e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e23c:	4b06      	ldr	r3, [pc, #24]	@ (800e258 <prvIdleTask+0x28>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	2b01      	cmp	r3, #1
 800e242:	d9f9      	bls.n	800e238 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e244:	4b05      	ldr	r3, [pc, #20]	@ (800e25c <prvIdleTask+0x2c>)
 800e246:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e24a:	601a      	str	r2, [r3, #0]
 800e24c:	f3bf 8f4f 	dsb	sy
 800e250:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e254:	e7f0      	b.n	800e238 <prvIdleTask+0x8>
 800e256:	bf00      	nop
 800e258:	20000c2c 	.word	0x20000c2c
 800e25c:	e000ed04 	.word	0xe000ed04

0800e260 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b082      	sub	sp, #8
 800e264:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e266:	2300      	movs	r3, #0
 800e268:	607b      	str	r3, [r7, #4]
 800e26a:	e00c      	b.n	800e286 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e26c:	687a      	ldr	r2, [r7, #4]
 800e26e:	4613      	mov	r3, r2
 800e270:	009b      	lsls	r3, r3, #2
 800e272:	4413      	add	r3, r2
 800e274:	009b      	lsls	r3, r3, #2
 800e276:	4a12      	ldr	r2, [pc, #72]	@ (800e2c0 <prvInitialiseTaskLists+0x60>)
 800e278:	4413      	add	r3, r2
 800e27a:	4618      	mov	r0, r3
 800e27c:	f7fe f97c 	bl	800c578 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	3301      	adds	r3, #1
 800e284:	607b      	str	r3, [r7, #4]
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2b37      	cmp	r3, #55	@ 0x37
 800e28a:	d9ef      	bls.n	800e26c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e28c:	480d      	ldr	r0, [pc, #52]	@ (800e2c4 <prvInitialiseTaskLists+0x64>)
 800e28e:	f7fe f973 	bl	800c578 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e292:	480d      	ldr	r0, [pc, #52]	@ (800e2c8 <prvInitialiseTaskLists+0x68>)
 800e294:	f7fe f970 	bl	800c578 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e298:	480c      	ldr	r0, [pc, #48]	@ (800e2cc <prvInitialiseTaskLists+0x6c>)
 800e29a:	f7fe f96d 	bl	800c578 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e29e:	480c      	ldr	r0, [pc, #48]	@ (800e2d0 <prvInitialiseTaskLists+0x70>)
 800e2a0:	f7fe f96a 	bl	800c578 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e2a4:	480b      	ldr	r0, [pc, #44]	@ (800e2d4 <prvInitialiseTaskLists+0x74>)
 800e2a6:	f7fe f967 	bl	800c578 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e2aa:	4b0b      	ldr	r3, [pc, #44]	@ (800e2d8 <prvInitialiseTaskLists+0x78>)
 800e2ac:	4a05      	ldr	r2, [pc, #20]	@ (800e2c4 <prvInitialiseTaskLists+0x64>)
 800e2ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e2b0:	4b0a      	ldr	r3, [pc, #40]	@ (800e2dc <prvInitialiseTaskLists+0x7c>)
 800e2b2:	4a05      	ldr	r2, [pc, #20]	@ (800e2c8 <prvInitialiseTaskLists+0x68>)
 800e2b4:	601a      	str	r2, [r3, #0]
}
 800e2b6:	bf00      	nop
 800e2b8:	3708      	adds	r7, #8
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}
 800e2be:	bf00      	nop
 800e2c0:	20000c2c 	.word	0x20000c2c
 800e2c4:	2000108c 	.word	0x2000108c
 800e2c8:	200010a0 	.word	0x200010a0
 800e2cc:	200010bc 	.word	0x200010bc
 800e2d0:	200010d0 	.word	0x200010d0
 800e2d4:	200010e8 	.word	0x200010e8
 800e2d8:	200010b4 	.word	0x200010b4
 800e2dc:	200010b8 	.word	0x200010b8

0800e2e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b082      	sub	sp, #8
 800e2e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e2e6:	e019      	b.n	800e31c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e2e8:	f000 feee 	bl	800f0c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2ec:	4b10      	ldr	r3, [pc, #64]	@ (800e330 <prvCheckTasksWaitingTermination+0x50>)
 800e2ee:	68db      	ldr	r3, [r3, #12]
 800e2f0:	68db      	ldr	r3, [r3, #12]
 800e2f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	3304      	adds	r3, #4
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	f7fe f9c7 	bl	800c68c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e2fe:	4b0d      	ldr	r3, [pc, #52]	@ (800e334 <prvCheckTasksWaitingTermination+0x54>)
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	3b01      	subs	r3, #1
 800e304:	4a0b      	ldr	r2, [pc, #44]	@ (800e334 <prvCheckTasksWaitingTermination+0x54>)
 800e306:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e308:	4b0b      	ldr	r3, [pc, #44]	@ (800e338 <prvCheckTasksWaitingTermination+0x58>)
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	3b01      	subs	r3, #1
 800e30e:	4a0a      	ldr	r2, [pc, #40]	@ (800e338 <prvCheckTasksWaitingTermination+0x58>)
 800e310:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e312:	f000 ff0b 	bl	800f12c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e316:	6878      	ldr	r0, [r7, #4]
 800e318:	f000 f810 	bl	800e33c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e31c:	4b06      	ldr	r3, [pc, #24]	@ (800e338 <prvCheckTasksWaitingTermination+0x58>)
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d1e1      	bne.n	800e2e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e324:	bf00      	nop
 800e326:	bf00      	nop
 800e328:	3708      	adds	r7, #8
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}
 800e32e:	bf00      	nop
 800e330:	200010d0 	.word	0x200010d0
 800e334:	200010fc 	.word	0x200010fc
 800e338:	200010e4 	.word	0x200010e4

0800e33c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b084      	sub	sp, #16
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	3354      	adds	r3, #84	@ 0x54
 800e348:	4618      	mov	r0, r3
 800e34a:	f001 fd75 	bl	800fe38 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e354:	2b00      	cmp	r3, #0
 800e356:	d108      	bne.n	800e36a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e35c:	4618      	mov	r0, r3
 800e35e:	f001 f8a3 	bl	800f4a8 <vPortFree>
				vPortFree( pxTCB );
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	f001 f8a0 	bl	800f4a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e368:	e019      	b.n	800e39e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e370:	2b01      	cmp	r3, #1
 800e372:	d103      	bne.n	800e37c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	f001 f897 	bl	800f4a8 <vPortFree>
	}
 800e37a:	e010      	b.n	800e39e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e382:	2b02      	cmp	r3, #2
 800e384:	d00b      	beq.n	800e39e <prvDeleteTCB+0x62>
	__asm volatile
 800e386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e38a:	f383 8811 	msr	BASEPRI, r3
 800e38e:	f3bf 8f6f 	isb	sy
 800e392:	f3bf 8f4f 	dsb	sy
 800e396:	60fb      	str	r3, [r7, #12]
}
 800e398:	bf00      	nop
 800e39a:	bf00      	nop
 800e39c:	e7fd      	b.n	800e39a <prvDeleteTCB+0x5e>
	}
 800e39e:	bf00      	nop
 800e3a0:	3710      	adds	r7, #16
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	bd80      	pop	{r7, pc}
	...

0800e3a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e3a8:	b480      	push	{r7}
 800e3aa:	b083      	sub	sp, #12
 800e3ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e3ae:	4b0c      	ldr	r3, [pc, #48]	@ (800e3e0 <prvResetNextTaskUnblockTime+0x38>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d104      	bne.n	800e3c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e3b8:	4b0a      	ldr	r3, [pc, #40]	@ (800e3e4 <prvResetNextTaskUnblockTime+0x3c>)
 800e3ba:	f04f 32ff 	mov.w	r2, #4294967295
 800e3be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e3c0:	e008      	b.n	800e3d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3c2:	4b07      	ldr	r3, [pc, #28]	@ (800e3e0 <prvResetNextTaskUnblockTime+0x38>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	68db      	ldr	r3, [r3, #12]
 800e3c8:	68db      	ldr	r3, [r3, #12]
 800e3ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	685b      	ldr	r3, [r3, #4]
 800e3d0:	4a04      	ldr	r2, [pc, #16]	@ (800e3e4 <prvResetNextTaskUnblockTime+0x3c>)
 800e3d2:	6013      	str	r3, [r2, #0]
}
 800e3d4:	bf00      	nop
 800e3d6:	370c      	adds	r7, #12
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3de:	4770      	bx	lr
 800e3e0:	200010b4 	.word	0x200010b4
 800e3e4:	2000111c 	.word	0x2000111c

0800e3e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e3e8:	b480      	push	{r7}
 800e3ea:	b083      	sub	sp, #12
 800e3ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e3ee:	4b0b      	ldr	r3, [pc, #44]	@ (800e41c <xTaskGetSchedulerState+0x34>)
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d102      	bne.n	800e3fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	607b      	str	r3, [r7, #4]
 800e3fa:	e008      	b.n	800e40e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3fc:	4b08      	ldr	r3, [pc, #32]	@ (800e420 <xTaskGetSchedulerState+0x38>)
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d102      	bne.n	800e40a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e404:	2302      	movs	r3, #2
 800e406:	607b      	str	r3, [r7, #4]
 800e408:	e001      	b.n	800e40e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e40a:	2300      	movs	r3, #0
 800e40c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e40e:	687b      	ldr	r3, [r7, #4]
	}
 800e410:	4618      	mov	r0, r3
 800e412:	370c      	adds	r7, #12
 800e414:	46bd      	mov	sp, r7
 800e416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41a:	4770      	bx	lr
 800e41c:	20001108 	.word	0x20001108
 800e420:	20001124 	.word	0x20001124

0800e424 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e424:	b580      	push	{r7, lr}
 800e426:	b084      	sub	sp, #16
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e430:	2300      	movs	r3, #0
 800e432:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d051      	beq.n	800e4de <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e43a:	68bb      	ldr	r3, [r7, #8]
 800e43c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e43e:	4b2a      	ldr	r3, [pc, #168]	@ (800e4e8 <xTaskPriorityInherit+0xc4>)
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e444:	429a      	cmp	r2, r3
 800e446:	d241      	bcs.n	800e4cc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e448:	68bb      	ldr	r3, [r7, #8]
 800e44a:	699b      	ldr	r3, [r3, #24]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	db06      	blt.n	800e45e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e450:	4b25      	ldr	r3, [pc, #148]	@ (800e4e8 <xTaskPriorityInherit+0xc4>)
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e456:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e45a:	68bb      	ldr	r3, [r7, #8]
 800e45c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	6959      	ldr	r1, [r3, #20]
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e466:	4613      	mov	r3, r2
 800e468:	009b      	lsls	r3, r3, #2
 800e46a:	4413      	add	r3, r2
 800e46c:	009b      	lsls	r3, r3, #2
 800e46e:	4a1f      	ldr	r2, [pc, #124]	@ (800e4ec <xTaskPriorityInherit+0xc8>)
 800e470:	4413      	add	r3, r2
 800e472:	4299      	cmp	r1, r3
 800e474:	d122      	bne.n	800e4bc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	3304      	adds	r3, #4
 800e47a:	4618      	mov	r0, r3
 800e47c:	f7fe f906 	bl	800c68c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e480:	4b19      	ldr	r3, [pc, #100]	@ (800e4e8 <xTaskPriorityInherit+0xc4>)
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e486:	68bb      	ldr	r3, [r7, #8]
 800e488:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e48a:	68bb      	ldr	r3, [r7, #8]
 800e48c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e48e:	4b18      	ldr	r3, [pc, #96]	@ (800e4f0 <xTaskPriorityInherit+0xcc>)
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	429a      	cmp	r2, r3
 800e494:	d903      	bls.n	800e49e <xTaskPriorityInherit+0x7a>
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e49a:	4a15      	ldr	r2, [pc, #84]	@ (800e4f0 <xTaskPriorityInherit+0xcc>)
 800e49c:	6013      	str	r3, [r2, #0]
 800e49e:	68bb      	ldr	r3, [r7, #8]
 800e4a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4a2:	4613      	mov	r3, r2
 800e4a4:	009b      	lsls	r3, r3, #2
 800e4a6:	4413      	add	r3, r2
 800e4a8:	009b      	lsls	r3, r3, #2
 800e4aa:	4a10      	ldr	r2, [pc, #64]	@ (800e4ec <xTaskPriorityInherit+0xc8>)
 800e4ac:	441a      	add	r2, r3
 800e4ae:	68bb      	ldr	r3, [r7, #8]
 800e4b0:	3304      	adds	r3, #4
 800e4b2:	4619      	mov	r1, r3
 800e4b4:	4610      	mov	r0, r2
 800e4b6:	f7fe f88c 	bl	800c5d2 <vListInsertEnd>
 800e4ba:	e004      	b.n	800e4c6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e4bc:	4b0a      	ldr	r3, [pc, #40]	@ (800e4e8 <xTaskPriorityInherit+0xc4>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4c2:	68bb      	ldr	r3, [r7, #8]
 800e4c4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e4c6:	2301      	movs	r3, #1
 800e4c8:	60fb      	str	r3, [r7, #12]
 800e4ca:	e008      	b.n	800e4de <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e4cc:	68bb      	ldr	r3, [r7, #8]
 800e4ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e4d0:	4b05      	ldr	r3, [pc, #20]	@ (800e4e8 <xTaskPriorityInherit+0xc4>)
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4d6:	429a      	cmp	r2, r3
 800e4d8:	d201      	bcs.n	800e4de <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e4da:	2301      	movs	r3, #1
 800e4dc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e4de:	68fb      	ldr	r3, [r7, #12]
	}
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	3710      	adds	r7, #16
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	bd80      	pop	{r7, pc}
 800e4e8:	20000c28 	.word	0x20000c28
 800e4ec:	20000c2c 	.word	0x20000c2c
 800e4f0:	20001104 	.word	0x20001104

0800e4f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b086      	sub	sp, #24
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e500:	2300      	movs	r3, #0
 800e502:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d058      	beq.n	800e5bc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e50a:	4b2f      	ldr	r3, [pc, #188]	@ (800e5c8 <xTaskPriorityDisinherit+0xd4>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	693a      	ldr	r2, [r7, #16]
 800e510:	429a      	cmp	r2, r3
 800e512:	d00b      	beq.n	800e52c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e518:	f383 8811 	msr	BASEPRI, r3
 800e51c:	f3bf 8f6f 	isb	sy
 800e520:	f3bf 8f4f 	dsb	sy
 800e524:	60fb      	str	r3, [r7, #12]
}
 800e526:	bf00      	nop
 800e528:	bf00      	nop
 800e52a:	e7fd      	b.n	800e528 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e52c:	693b      	ldr	r3, [r7, #16]
 800e52e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e530:	2b00      	cmp	r3, #0
 800e532:	d10b      	bne.n	800e54c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e538:	f383 8811 	msr	BASEPRI, r3
 800e53c:	f3bf 8f6f 	isb	sy
 800e540:	f3bf 8f4f 	dsb	sy
 800e544:	60bb      	str	r3, [r7, #8]
}
 800e546:	bf00      	nop
 800e548:	bf00      	nop
 800e54a:	e7fd      	b.n	800e548 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e54c:	693b      	ldr	r3, [r7, #16]
 800e54e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e550:	1e5a      	subs	r2, r3, #1
 800e552:	693b      	ldr	r3, [r7, #16]
 800e554:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e556:	693b      	ldr	r3, [r7, #16]
 800e558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e55a:	693b      	ldr	r3, [r7, #16]
 800e55c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e55e:	429a      	cmp	r2, r3
 800e560:	d02c      	beq.n	800e5bc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e562:	693b      	ldr	r3, [r7, #16]
 800e564:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e566:	2b00      	cmp	r3, #0
 800e568:	d128      	bne.n	800e5bc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e56a:	693b      	ldr	r3, [r7, #16]
 800e56c:	3304      	adds	r3, #4
 800e56e:	4618      	mov	r0, r3
 800e570:	f7fe f88c 	bl	800c68c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e574:	693b      	ldr	r3, [r7, #16]
 800e576:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e578:	693b      	ldr	r3, [r7, #16]
 800e57a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e57c:	693b      	ldr	r3, [r7, #16]
 800e57e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e580:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e584:	693b      	ldr	r3, [r7, #16]
 800e586:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e588:	693b      	ldr	r3, [r7, #16]
 800e58a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e58c:	4b0f      	ldr	r3, [pc, #60]	@ (800e5cc <xTaskPriorityDisinherit+0xd8>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	429a      	cmp	r2, r3
 800e592:	d903      	bls.n	800e59c <xTaskPriorityDisinherit+0xa8>
 800e594:	693b      	ldr	r3, [r7, #16]
 800e596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e598:	4a0c      	ldr	r2, [pc, #48]	@ (800e5cc <xTaskPriorityDisinherit+0xd8>)
 800e59a:	6013      	str	r3, [r2, #0]
 800e59c:	693b      	ldr	r3, [r7, #16]
 800e59e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5a0:	4613      	mov	r3, r2
 800e5a2:	009b      	lsls	r3, r3, #2
 800e5a4:	4413      	add	r3, r2
 800e5a6:	009b      	lsls	r3, r3, #2
 800e5a8:	4a09      	ldr	r2, [pc, #36]	@ (800e5d0 <xTaskPriorityDisinherit+0xdc>)
 800e5aa:	441a      	add	r2, r3
 800e5ac:	693b      	ldr	r3, [r7, #16]
 800e5ae:	3304      	adds	r3, #4
 800e5b0:	4619      	mov	r1, r3
 800e5b2:	4610      	mov	r0, r2
 800e5b4:	f7fe f80d 	bl	800c5d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e5b8:	2301      	movs	r3, #1
 800e5ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e5bc:	697b      	ldr	r3, [r7, #20]
	}
 800e5be:	4618      	mov	r0, r3
 800e5c0:	3718      	adds	r7, #24
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd80      	pop	{r7, pc}
 800e5c6:	bf00      	nop
 800e5c8:	20000c28 	.word	0x20000c28
 800e5cc:	20001104 	.word	0x20001104
 800e5d0:	20000c2c 	.word	0x20000c2c

0800e5d4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b088      	sub	sp, #32
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	6078      	str	r0, [r7, #4]
 800e5dc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d06c      	beq.n	800e6c6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e5ec:	69bb      	ldr	r3, [r7, #24]
 800e5ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d10b      	bne.n	800e60c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800e5f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5f8:	f383 8811 	msr	BASEPRI, r3
 800e5fc:	f3bf 8f6f 	isb	sy
 800e600:	f3bf 8f4f 	dsb	sy
 800e604:	60fb      	str	r3, [r7, #12]
}
 800e606:	bf00      	nop
 800e608:	bf00      	nop
 800e60a:	e7fd      	b.n	800e608 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e60c:	69bb      	ldr	r3, [r7, #24]
 800e60e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e610:	683a      	ldr	r2, [r7, #0]
 800e612:	429a      	cmp	r2, r3
 800e614:	d902      	bls.n	800e61c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	61fb      	str	r3, [r7, #28]
 800e61a:	e002      	b.n	800e622 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e61c:	69bb      	ldr	r3, [r7, #24]
 800e61e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e620:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e622:	69bb      	ldr	r3, [r7, #24]
 800e624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e626:	69fa      	ldr	r2, [r7, #28]
 800e628:	429a      	cmp	r2, r3
 800e62a:	d04c      	beq.n	800e6c6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e62c:	69bb      	ldr	r3, [r7, #24]
 800e62e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e630:	697a      	ldr	r2, [r7, #20]
 800e632:	429a      	cmp	r2, r3
 800e634:	d147      	bne.n	800e6c6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e636:	4b26      	ldr	r3, [pc, #152]	@ (800e6d0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	69ba      	ldr	r2, [r7, #24]
 800e63c:	429a      	cmp	r2, r3
 800e63e:	d10b      	bne.n	800e658 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800e640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e644:	f383 8811 	msr	BASEPRI, r3
 800e648:	f3bf 8f6f 	isb	sy
 800e64c:	f3bf 8f4f 	dsb	sy
 800e650:	60bb      	str	r3, [r7, #8]
}
 800e652:	bf00      	nop
 800e654:	bf00      	nop
 800e656:	e7fd      	b.n	800e654 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e658:	69bb      	ldr	r3, [r7, #24]
 800e65a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e65c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e65e:	69bb      	ldr	r3, [r7, #24]
 800e660:	69fa      	ldr	r2, [r7, #28]
 800e662:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e664:	69bb      	ldr	r3, [r7, #24]
 800e666:	699b      	ldr	r3, [r3, #24]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	db04      	blt.n	800e676 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e66c:	69fb      	ldr	r3, [r7, #28]
 800e66e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e672:	69bb      	ldr	r3, [r7, #24]
 800e674:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e676:	69bb      	ldr	r3, [r7, #24]
 800e678:	6959      	ldr	r1, [r3, #20]
 800e67a:	693a      	ldr	r2, [r7, #16]
 800e67c:	4613      	mov	r3, r2
 800e67e:	009b      	lsls	r3, r3, #2
 800e680:	4413      	add	r3, r2
 800e682:	009b      	lsls	r3, r3, #2
 800e684:	4a13      	ldr	r2, [pc, #76]	@ (800e6d4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e686:	4413      	add	r3, r2
 800e688:	4299      	cmp	r1, r3
 800e68a:	d11c      	bne.n	800e6c6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e68c:	69bb      	ldr	r3, [r7, #24]
 800e68e:	3304      	adds	r3, #4
 800e690:	4618      	mov	r0, r3
 800e692:	f7fd fffb 	bl	800c68c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e696:	69bb      	ldr	r3, [r7, #24]
 800e698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e69a:	4b0f      	ldr	r3, [pc, #60]	@ (800e6d8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	429a      	cmp	r2, r3
 800e6a0:	d903      	bls.n	800e6aa <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800e6a2:	69bb      	ldr	r3, [r7, #24]
 800e6a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6a6:	4a0c      	ldr	r2, [pc, #48]	@ (800e6d8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800e6a8:	6013      	str	r3, [r2, #0]
 800e6aa:	69bb      	ldr	r3, [r7, #24]
 800e6ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6ae:	4613      	mov	r3, r2
 800e6b0:	009b      	lsls	r3, r3, #2
 800e6b2:	4413      	add	r3, r2
 800e6b4:	009b      	lsls	r3, r3, #2
 800e6b6:	4a07      	ldr	r2, [pc, #28]	@ (800e6d4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e6b8:	441a      	add	r2, r3
 800e6ba:	69bb      	ldr	r3, [r7, #24]
 800e6bc:	3304      	adds	r3, #4
 800e6be:	4619      	mov	r1, r3
 800e6c0:	4610      	mov	r0, r2
 800e6c2:	f7fd ff86 	bl	800c5d2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e6c6:	bf00      	nop
 800e6c8:	3720      	adds	r7, #32
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd80      	pop	{r7, pc}
 800e6ce:	bf00      	nop
 800e6d0:	20000c28 	.word	0x20000c28
 800e6d4:	20000c2c 	.word	0x20000c2c
 800e6d8:	20001104 	.word	0x20001104

0800e6dc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e6dc:	b480      	push	{r7}
 800e6de:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e6e0:	4b07      	ldr	r3, [pc, #28]	@ (800e700 <pvTaskIncrementMutexHeldCount+0x24>)
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d004      	beq.n	800e6f2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e6e8:	4b05      	ldr	r3, [pc, #20]	@ (800e700 <pvTaskIncrementMutexHeldCount+0x24>)
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e6ee:	3201      	adds	r2, #1
 800e6f0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800e6f2:	4b03      	ldr	r3, [pc, #12]	@ (800e700 <pvTaskIncrementMutexHeldCount+0x24>)
 800e6f4:	681b      	ldr	r3, [r3, #0]
	}
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fe:	4770      	bx	lr
 800e700:	20000c28 	.word	0x20000c28

0800e704 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b084      	sub	sp, #16
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
 800e70c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e70e:	4b21      	ldr	r3, [pc, #132]	@ (800e794 <prvAddCurrentTaskToDelayedList+0x90>)
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e714:	4b20      	ldr	r3, [pc, #128]	@ (800e798 <prvAddCurrentTaskToDelayedList+0x94>)
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	3304      	adds	r3, #4
 800e71a:	4618      	mov	r0, r3
 800e71c:	f7fd ffb6 	bl	800c68c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e726:	d10a      	bne.n	800e73e <prvAddCurrentTaskToDelayedList+0x3a>
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d007      	beq.n	800e73e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e72e:	4b1a      	ldr	r3, [pc, #104]	@ (800e798 <prvAddCurrentTaskToDelayedList+0x94>)
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	3304      	adds	r3, #4
 800e734:	4619      	mov	r1, r3
 800e736:	4819      	ldr	r0, [pc, #100]	@ (800e79c <prvAddCurrentTaskToDelayedList+0x98>)
 800e738:	f7fd ff4b 	bl	800c5d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e73c:	e026      	b.n	800e78c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e73e:	68fa      	ldr	r2, [r7, #12]
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	4413      	add	r3, r2
 800e744:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e746:	4b14      	ldr	r3, [pc, #80]	@ (800e798 <prvAddCurrentTaskToDelayedList+0x94>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	68ba      	ldr	r2, [r7, #8]
 800e74c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e74e:	68ba      	ldr	r2, [r7, #8]
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	429a      	cmp	r2, r3
 800e754:	d209      	bcs.n	800e76a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e756:	4b12      	ldr	r3, [pc, #72]	@ (800e7a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e758:	681a      	ldr	r2, [r3, #0]
 800e75a:	4b0f      	ldr	r3, [pc, #60]	@ (800e798 <prvAddCurrentTaskToDelayedList+0x94>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	3304      	adds	r3, #4
 800e760:	4619      	mov	r1, r3
 800e762:	4610      	mov	r0, r2
 800e764:	f7fd ff59 	bl	800c61a <vListInsert>
}
 800e768:	e010      	b.n	800e78c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e76a:	4b0e      	ldr	r3, [pc, #56]	@ (800e7a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e76c:	681a      	ldr	r2, [r3, #0]
 800e76e:	4b0a      	ldr	r3, [pc, #40]	@ (800e798 <prvAddCurrentTaskToDelayedList+0x94>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	3304      	adds	r3, #4
 800e774:	4619      	mov	r1, r3
 800e776:	4610      	mov	r0, r2
 800e778:	f7fd ff4f 	bl	800c61a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e77c:	4b0a      	ldr	r3, [pc, #40]	@ (800e7a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	68ba      	ldr	r2, [r7, #8]
 800e782:	429a      	cmp	r2, r3
 800e784:	d202      	bcs.n	800e78c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e786:	4a08      	ldr	r2, [pc, #32]	@ (800e7a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e788:	68bb      	ldr	r3, [r7, #8]
 800e78a:	6013      	str	r3, [r2, #0]
}
 800e78c:	bf00      	nop
 800e78e:	3710      	adds	r7, #16
 800e790:	46bd      	mov	sp, r7
 800e792:	bd80      	pop	{r7, pc}
 800e794:	20001100 	.word	0x20001100
 800e798:	20000c28 	.word	0x20000c28
 800e79c:	200010e8 	.word	0x200010e8
 800e7a0:	200010b8 	.word	0x200010b8
 800e7a4:	200010b4 	.word	0x200010b4
 800e7a8:	2000111c 	.word	0x2000111c

0800e7ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b08a      	sub	sp, #40	@ 0x28
 800e7b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e7b6:	f000 fb13 	bl	800ede0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e7ba:	4b1d      	ldr	r3, [pc, #116]	@ (800e830 <xTimerCreateTimerTask+0x84>)
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d021      	beq.n	800e806 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e7ca:	1d3a      	adds	r2, r7, #4
 800e7cc:	f107 0108 	add.w	r1, r7, #8
 800e7d0:	f107 030c 	add.w	r3, r7, #12
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	f7fd feb5 	bl	800c544 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e7da:	6879      	ldr	r1, [r7, #4]
 800e7dc:	68bb      	ldr	r3, [r7, #8]
 800e7de:	68fa      	ldr	r2, [r7, #12]
 800e7e0:	9202      	str	r2, [sp, #8]
 800e7e2:	9301      	str	r3, [sp, #4]
 800e7e4:	2302      	movs	r3, #2
 800e7e6:	9300      	str	r3, [sp, #0]
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	460a      	mov	r2, r1
 800e7ec:	4911      	ldr	r1, [pc, #68]	@ (800e834 <xTimerCreateTimerTask+0x88>)
 800e7ee:	4812      	ldr	r0, [pc, #72]	@ (800e838 <xTimerCreateTimerTask+0x8c>)
 800e7f0:	f7fe ffa2 	bl	800d738 <xTaskCreateStatic>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	4a11      	ldr	r2, [pc, #68]	@ (800e83c <xTimerCreateTimerTask+0x90>)
 800e7f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e7fa:	4b10      	ldr	r3, [pc, #64]	@ (800e83c <xTimerCreateTimerTask+0x90>)
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d001      	beq.n	800e806 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e802:	2301      	movs	r3, #1
 800e804:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e806:	697b      	ldr	r3, [r7, #20]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d10b      	bne.n	800e824 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800e80c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e810:	f383 8811 	msr	BASEPRI, r3
 800e814:	f3bf 8f6f 	isb	sy
 800e818:	f3bf 8f4f 	dsb	sy
 800e81c:	613b      	str	r3, [r7, #16]
}
 800e81e:	bf00      	nop
 800e820:	bf00      	nop
 800e822:	e7fd      	b.n	800e820 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e824:	697b      	ldr	r3, [r7, #20]
}
 800e826:	4618      	mov	r0, r3
 800e828:	3718      	adds	r7, #24
 800e82a:	46bd      	mov	sp, r7
 800e82c:	bd80      	pop	{r7, pc}
 800e82e:	bf00      	nop
 800e830:	20001158 	.word	0x20001158
 800e834:	08010c20 	.word	0x08010c20
 800e838:	0800e979 	.word	0x0800e979
 800e83c:	2000115c 	.word	0x2000115c

0800e840 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b08a      	sub	sp, #40	@ 0x28
 800e844:	af00      	add	r7, sp, #0
 800e846:	60f8      	str	r0, [r7, #12]
 800e848:	60b9      	str	r1, [r7, #8]
 800e84a:	607a      	str	r2, [r7, #4]
 800e84c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e84e:	2300      	movs	r3, #0
 800e850:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d10b      	bne.n	800e870 <xTimerGenericCommand+0x30>
	__asm volatile
 800e858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e85c:	f383 8811 	msr	BASEPRI, r3
 800e860:	f3bf 8f6f 	isb	sy
 800e864:	f3bf 8f4f 	dsb	sy
 800e868:	623b      	str	r3, [r7, #32]
}
 800e86a:	bf00      	nop
 800e86c:	bf00      	nop
 800e86e:	e7fd      	b.n	800e86c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e870:	4b19      	ldr	r3, [pc, #100]	@ (800e8d8 <xTimerGenericCommand+0x98>)
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d02a      	beq.n	800e8ce <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e878:	68bb      	ldr	r3, [r7, #8]
 800e87a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e884:	68bb      	ldr	r3, [r7, #8]
 800e886:	2b05      	cmp	r3, #5
 800e888:	dc18      	bgt.n	800e8bc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e88a:	f7ff fdad 	bl	800e3e8 <xTaskGetSchedulerState>
 800e88e:	4603      	mov	r3, r0
 800e890:	2b02      	cmp	r3, #2
 800e892:	d109      	bne.n	800e8a8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e894:	4b10      	ldr	r3, [pc, #64]	@ (800e8d8 <xTimerGenericCommand+0x98>)
 800e896:	6818      	ldr	r0, [r3, #0]
 800e898:	f107 0110 	add.w	r1, r7, #16
 800e89c:	2300      	movs	r3, #0
 800e89e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e8a0:	f7fe f8d2 	bl	800ca48 <xQueueGenericSend>
 800e8a4:	6278      	str	r0, [r7, #36]	@ 0x24
 800e8a6:	e012      	b.n	800e8ce <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e8a8:	4b0b      	ldr	r3, [pc, #44]	@ (800e8d8 <xTimerGenericCommand+0x98>)
 800e8aa:	6818      	ldr	r0, [r3, #0]
 800e8ac:	f107 0110 	add.w	r1, r7, #16
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	f7fe f8c8 	bl	800ca48 <xQueueGenericSend>
 800e8b8:	6278      	str	r0, [r7, #36]	@ 0x24
 800e8ba:	e008      	b.n	800e8ce <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e8bc:	4b06      	ldr	r3, [pc, #24]	@ (800e8d8 <xTimerGenericCommand+0x98>)
 800e8be:	6818      	ldr	r0, [r3, #0]
 800e8c0:	f107 0110 	add.w	r1, r7, #16
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	683a      	ldr	r2, [r7, #0]
 800e8c8:	f7fe f9c0 	bl	800cc4c <xQueueGenericSendFromISR>
 800e8cc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e8ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	3728      	adds	r7, #40	@ 0x28
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	bd80      	pop	{r7, pc}
 800e8d8:	20001158 	.word	0x20001158

0800e8dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b088      	sub	sp, #32
 800e8e0:	af02      	add	r7, sp, #8
 800e8e2:	6078      	str	r0, [r7, #4]
 800e8e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8e6:	4b23      	ldr	r3, [pc, #140]	@ (800e974 <prvProcessExpiredTimer+0x98>)
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	68db      	ldr	r3, [r3, #12]
 800e8ec:	68db      	ldr	r3, [r3, #12]
 800e8ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e8f0:	697b      	ldr	r3, [r7, #20]
 800e8f2:	3304      	adds	r3, #4
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	f7fd fec9 	bl	800c68c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e8fa:	697b      	ldr	r3, [r7, #20]
 800e8fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e900:	f003 0304 	and.w	r3, r3, #4
 800e904:	2b00      	cmp	r3, #0
 800e906:	d023      	beq.n	800e950 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e908:	697b      	ldr	r3, [r7, #20]
 800e90a:	699a      	ldr	r2, [r3, #24]
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	18d1      	adds	r1, r2, r3
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	683a      	ldr	r2, [r7, #0]
 800e914:	6978      	ldr	r0, [r7, #20]
 800e916:	f000 f8d5 	bl	800eac4 <prvInsertTimerInActiveList>
 800e91a:	4603      	mov	r3, r0
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d020      	beq.n	800e962 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e920:	2300      	movs	r3, #0
 800e922:	9300      	str	r3, [sp, #0]
 800e924:	2300      	movs	r3, #0
 800e926:	687a      	ldr	r2, [r7, #4]
 800e928:	2100      	movs	r1, #0
 800e92a:	6978      	ldr	r0, [r7, #20]
 800e92c:	f7ff ff88 	bl	800e840 <xTimerGenericCommand>
 800e930:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e932:	693b      	ldr	r3, [r7, #16]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d114      	bne.n	800e962 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800e938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e93c:	f383 8811 	msr	BASEPRI, r3
 800e940:	f3bf 8f6f 	isb	sy
 800e944:	f3bf 8f4f 	dsb	sy
 800e948:	60fb      	str	r3, [r7, #12]
}
 800e94a:	bf00      	nop
 800e94c:	bf00      	nop
 800e94e:	e7fd      	b.n	800e94c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e950:	697b      	ldr	r3, [r7, #20]
 800e952:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e956:	f023 0301 	bic.w	r3, r3, #1
 800e95a:	b2da      	uxtb	r2, r3
 800e95c:	697b      	ldr	r3, [r7, #20]
 800e95e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e962:	697b      	ldr	r3, [r7, #20]
 800e964:	6a1b      	ldr	r3, [r3, #32]
 800e966:	6978      	ldr	r0, [r7, #20]
 800e968:	4798      	blx	r3
}
 800e96a:	bf00      	nop
 800e96c:	3718      	adds	r7, #24
 800e96e:	46bd      	mov	sp, r7
 800e970:	bd80      	pop	{r7, pc}
 800e972:	bf00      	nop
 800e974:	20001150 	.word	0x20001150

0800e978 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b084      	sub	sp, #16
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e980:	f107 0308 	add.w	r3, r7, #8
 800e984:	4618      	mov	r0, r3
 800e986:	f000 f859 	bl	800ea3c <prvGetNextExpireTime>
 800e98a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e98c:	68bb      	ldr	r3, [r7, #8]
 800e98e:	4619      	mov	r1, r3
 800e990:	68f8      	ldr	r0, [r7, #12]
 800e992:	f000 f805 	bl	800e9a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e996:	f000 f8d7 	bl	800eb48 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e99a:	bf00      	nop
 800e99c:	e7f0      	b.n	800e980 <prvTimerTask+0x8>
	...

0800e9a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b084      	sub	sp, #16
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
 800e9a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e9aa:	f7ff f929 	bl	800dc00 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e9ae:	f107 0308 	add.w	r3, r7, #8
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f000 f866 	bl	800ea84 <prvSampleTimeNow>
 800e9b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e9ba:	68bb      	ldr	r3, [r7, #8]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d130      	bne.n	800ea22 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d10a      	bne.n	800e9dc <prvProcessTimerOrBlockTask+0x3c>
 800e9c6:	687a      	ldr	r2, [r7, #4]
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	429a      	cmp	r2, r3
 800e9cc:	d806      	bhi.n	800e9dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e9ce:	f7ff f925 	bl	800dc1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e9d2:	68f9      	ldr	r1, [r7, #12]
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	f7ff ff81 	bl	800e8dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e9da:	e024      	b.n	800ea26 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d008      	beq.n	800e9f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e9e2:	4b13      	ldr	r3, [pc, #76]	@ (800ea30 <prvProcessTimerOrBlockTask+0x90>)
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d101      	bne.n	800e9f0 <prvProcessTimerOrBlockTask+0x50>
 800e9ec:	2301      	movs	r3, #1
 800e9ee:	e000      	b.n	800e9f2 <prvProcessTimerOrBlockTask+0x52>
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e9f4:	4b0f      	ldr	r3, [pc, #60]	@ (800ea34 <prvProcessTimerOrBlockTask+0x94>)
 800e9f6:	6818      	ldr	r0, [r3, #0]
 800e9f8:	687a      	ldr	r2, [r7, #4]
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	1ad3      	subs	r3, r2, r3
 800e9fe:	683a      	ldr	r2, [r7, #0]
 800ea00:	4619      	mov	r1, r3
 800ea02:	f7fe fe65 	bl	800d6d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ea06:	f7ff f909 	bl	800dc1c <xTaskResumeAll>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d10a      	bne.n	800ea26 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ea10:	4b09      	ldr	r3, [pc, #36]	@ (800ea38 <prvProcessTimerOrBlockTask+0x98>)
 800ea12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea16:	601a      	str	r2, [r3, #0]
 800ea18:	f3bf 8f4f 	dsb	sy
 800ea1c:	f3bf 8f6f 	isb	sy
}
 800ea20:	e001      	b.n	800ea26 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ea22:	f7ff f8fb 	bl	800dc1c <xTaskResumeAll>
}
 800ea26:	bf00      	nop
 800ea28:	3710      	adds	r7, #16
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}
 800ea2e:	bf00      	nop
 800ea30:	20001154 	.word	0x20001154
 800ea34:	20001158 	.word	0x20001158
 800ea38:	e000ed04 	.word	0xe000ed04

0800ea3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ea3c:	b480      	push	{r7}
 800ea3e:	b085      	sub	sp, #20
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ea44:	4b0e      	ldr	r3, [pc, #56]	@ (800ea80 <prvGetNextExpireTime+0x44>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d101      	bne.n	800ea52 <prvGetNextExpireTime+0x16>
 800ea4e:	2201      	movs	r2, #1
 800ea50:	e000      	b.n	800ea54 <prvGetNextExpireTime+0x18>
 800ea52:	2200      	movs	r2, #0
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d105      	bne.n	800ea6c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ea60:	4b07      	ldr	r3, [pc, #28]	@ (800ea80 <prvGetNextExpireTime+0x44>)
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	68db      	ldr	r3, [r3, #12]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	60fb      	str	r3, [r7, #12]
 800ea6a:	e001      	b.n	800ea70 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ea70:	68fb      	ldr	r3, [r7, #12]
}
 800ea72:	4618      	mov	r0, r3
 800ea74:	3714      	adds	r7, #20
 800ea76:	46bd      	mov	sp, r7
 800ea78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7c:	4770      	bx	lr
 800ea7e:	bf00      	nop
 800ea80:	20001150 	.word	0x20001150

0800ea84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b084      	sub	sp, #16
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ea8c:	f7ff f964 	bl	800dd58 <xTaskGetTickCount>
 800ea90:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ea92:	4b0b      	ldr	r3, [pc, #44]	@ (800eac0 <prvSampleTimeNow+0x3c>)
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	68fa      	ldr	r2, [r7, #12]
 800ea98:	429a      	cmp	r2, r3
 800ea9a:	d205      	bcs.n	800eaa8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ea9c:	f000 f93a 	bl	800ed14 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	2201      	movs	r2, #1
 800eaa4:	601a      	str	r2, [r3, #0]
 800eaa6:	e002      	b.n	800eaae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2200      	movs	r2, #0
 800eaac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800eaae:	4a04      	ldr	r2, [pc, #16]	@ (800eac0 <prvSampleTimeNow+0x3c>)
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800eab4:	68fb      	ldr	r3, [r7, #12]
}
 800eab6:	4618      	mov	r0, r3
 800eab8:	3710      	adds	r7, #16
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bd80      	pop	{r7, pc}
 800eabe:	bf00      	nop
 800eac0:	20001160 	.word	0x20001160

0800eac4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b086      	sub	sp, #24
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	60f8      	str	r0, [r7, #12]
 800eacc:	60b9      	str	r1, [r7, #8]
 800eace:	607a      	str	r2, [r7, #4]
 800ead0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ead2:	2300      	movs	r3, #0
 800ead4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	68ba      	ldr	r2, [r7, #8]
 800eada:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	68fa      	ldr	r2, [r7, #12]
 800eae0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800eae2:	68ba      	ldr	r2, [r7, #8]
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	429a      	cmp	r2, r3
 800eae8:	d812      	bhi.n	800eb10 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eaea:	687a      	ldr	r2, [r7, #4]
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	1ad2      	subs	r2, r2, r3
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	699b      	ldr	r3, [r3, #24]
 800eaf4:	429a      	cmp	r2, r3
 800eaf6:	d302      	bcc.n	800eafe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800eaf8:	2301      	movs	r3, #1
 800eafa:	617b      	str	r3, [r7, #20]
 800eafc:	e01b      	b.n	800eb36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800eafe:	4b10      	ldr	r3, [pc, #64]	@ (800eb40 <prvInsertTimerInActiveList+0x7c>)
 800eb00:	681a      	ldr	r2, [r3, #0]
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	3304      	adds	r3, #4
 800eb06:	4619      	mov	r1, r3
 800eb08:	4610      	mov	r0, r2
 800eb0a:	f7fd fd86 	bl	800c61a <vListInsert>
 800eb0e:	e012      	b.n	800eb36 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800eb10:	687a      	ldr	r2, [r7, #4]
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	429a      	cmp	r2, r3
 800eb16:	d206      	bcs.n	800eb26 <prvInsertTimerInActiveList+0x62>
 800eb18:	68ba      	ldr	r2, [r7, #8]
 800eb1a:	683b      	ldr	r3, [r7, #0]
 800eb1c:	429a      	cmp	r2, r3
 800eb1e:	d302      	bcc.n	800eb26 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800eb20:	2301      	movs	r3, #1
 800eb22:	617b      	str	r3, [r7, #20]
 800eb24:	e007      	b.n	800eb36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eb26:	4b07      	ldr	r3, [pc, #28]	@ (800eb44 <prvInsertTimerInActiveList+0x80>)
 800eb28:	681a      	ldr	r2, [r3, #0]
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	3304      	adds	r3, #4
 800eb2e:	4619      	mov	r1, r3
 800eb30:	4610      	mov	r0, r2
 800eb32:	f7fd fd72 	bl	800c61a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800eb36:	697b      	ldr	r3, [r7, #20]
}
 800eb38:	4618      	mov	r0, r3
 800eb3a:	3718      	adds	r7, #24
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	bd80      	pop	{r7, pc}
 800eb40:	20001154 	.word	0x20001154
 800eb44:	20001150 	.word	0x20001150

0800eb48 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b08e      	sub	sp, #56	@ 0x38
 800eb4c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800eb4e:	e0ce      	b.n	800ecee <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	da19      	bge.n	800eb8a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800eb56:	1d3b      	adds	r3, r7, #4
 800eb58:	3304      	adds	r3, #4
 800eb5a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800eb5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d10b      	bne.n	800eb7a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800eb62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb66:	f383 8811 	msr	BASEPRI, r3
 800eb6a:	f3bf 8f6f 	isb	sy
 800eb6e:	f3bf 8f4f 	dsb	sy
 800eb72:	61fb      	str	r3, [r7, #28]
}
 800eb74:	bf00      	nop
 800eb76:	bf00      	nop
 800eb78:	e7fd      	b.n	800eb76 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800eb7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eb80:	6850      	ldr	r0, [r2, #4]
 800eb82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eb84:	6892      	ldr	r2, [r2, #8]
 800eb86:	4611      	mov	r1, r2
 800eb88:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	f2c0 80ae 	blt.w	800ecee <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800eb96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb98:	695b      	ldr	r3, [r3, #20]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d004      	beq.n	800eba8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eb9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eba0:	3304      	adds	r3, #4
 800eba2:	4618      	mov	r0, r3
 800eba4:	f7fd fd72 	bl	800c68c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800eba8:	463b      	mov	r3, r7
 800ebaa:	4618      	mov	r0, r3
 800ebac:	f7ff ff6a 	bl	800ea84 <prvSampleTimeNow>
 800ebb0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2b09      	cmp	r3, #9
 800ebb6:	f200 8097 	bhi.w	800ece8 <prvProcessReceivedCommands+0x1a0>
 800ebba:	a201      	add	r2, pc, #4	@ (adr r2, 800ebc0 <prvProcessReceivedCommands+0x78>)
 800ebbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebc0:	0800ebe9 	.word	0x0800ebe9
 800ebc4:	0800ebe9 	.word	0x0800ebe9
 800ebc8:	0800ebe9 	.word	0x0800ebe9
 800ebcc:	0800ec5f 	.word	0x0800ec5f
 800ebd0:	0800ec73 	.word	0x0800ec73
 800ebd4:	0800ecbf 	.word	0x0800ecbf
 800ebd8:	0800ebe9 	.word	0x0800ebe9
 800ebdc:	0800ebe9 	.word	0x0800ebe9
 800ebe0:	0800ec5f 	.word	0x0800ec5f
 800ebe4:	0800ec73 	.word	0x0800ec73
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ebe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ebee:	f043 0301 	orr.w	r3, r3, #1
 800ebf2:	b2da      	uxtb	r2, r3
 800ebf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebf6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ebfa:	68ba      	ldr	r2, [r7, #8]
 800ebfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebfe:	699b      	ldr	r3, [r3, #24]
 800ec00:	18d1      	adds	r1, r2, r3
 800ec02:	68bb      	ldr	r3, [r7, #8]
 800ec04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ec06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ec08:	f7ff ff5c 	bl	800eac4 <prvInsertTimerInActiveList>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d06c      	beq.n	800ecec <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ec12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec14:	6a1b      	ldr	r3, [r3, #32]
 800ec16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ec18:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ec1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ec20:	f003 0304 	and.w	r3, r3, #4
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d061      	beq.n	800ecec <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ec28:	68ba      	ldr	r2, [r7, #8]
 800ec2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec2c:	699b      	ldr	r3, [r3, #24]
 800ec2e:	441a      	add	r2, r3
 800ec30:	2300      	movs	r3, #0
 800ec32:	9300      	str	r3, [sp, #0]
 800ec34:	2300      	movs	r3, #0
 800ec36:	2100      	movs	r1, #0
 800ec38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ec3a:	f7ff fe01 	bl	800e840 <xTimerGenericCommand>
 800ec3e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ec40:	6a3b      	ldr	r3, [r7, #32]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d152      	bne.n	800ecec <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ec46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec4a:	f383 8811 	msr	BASEPRI, r3
 800ec4e:	f3bf 8f6f 	isb	sy
 800ec52:	f3bf 8f4f 	dsb	sy
 800ec56:	61bb      	str	r3, [r7, #24]
}
 800ec58:	bf00      	nop
 800ec5a:	bf00      	nop
 800ec5c:	e7fd      	b.n	800ec5a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ec5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ec64:	f023 0301 	bic.w	r3, r3, #1
 800ec68:	b2da      	uxtb	r2, r3
 800ec6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec6c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ec70:	e03d      	b.n	800ecee <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ec72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ec78:	f043 0301 	orr.w	r3, r3, #1
 800ec7c:	b2da      	uxtb	r2, r3
 800ec7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec80:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ec84:	68ba      	ldr	r2, [r7, #8]
 800ec86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec88:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ec8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec8c:	699b      	ldr	r3, [r3, #24]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d10b      	bne.n	800ecaa <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ec92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec96:	f383 8811 	msr	BASEPRI, r3
 800ec9a:	f3bf 8f6f 	isb	sy
 800ec9e:	f3bf 8f4f 	dsb	sy
 800eca2:	617b      	str	r3, [r7, #20]
}
 800eca4:	bf00      	nop
 800eca6:	bf00      	nop
 800eca8:	e7fd      	b.n	800eca6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ecaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecac:	699a      	ldr	r2, [r3, #24]
 800ecae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecb0:	18d1      	adds	r1, r2, r3
 800ecb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ecb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ecb8:	f7ff ff04 	bl	800eac4 <prvInsertTimerInActiveList>
					break;
 800ecbc:	e017      	b.n	800ecee <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ecbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ecc4:	f003 0302 	and.w	r3, r3, #2
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d103      	bne.n	800ecd4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800eccc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ecce:	f000 fbeb 	bl	800f4a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ecd2:	e00c      	b.n	800ecee <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ecd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ecda:	f023 0301 	bic.w	r3, r3, #1
 800ecde:	b2da      	uxtb	r2, r3
 800ece0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ece2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ece6:	e002      	b.n	800ecee <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ece8:	bf00      	nop
 800ecea:	e000      	b.n	800ecee <prvProcessReceivedCommands+0x1a6>
					break;
 800ecec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ecee:	4b08      	ldr	r3, [pc, #32]	@ (800ed10 <prvProcessReceivedCommands+0x1c8>)
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	1d39      	adds	r1, r7, #4
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	f7fe f8d6 	bl	800cea8 <xQueueReceive>
 800ecfc:	4603      	mov	r3, r0
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	f47f af26 	bne.w	800eb50 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ed04:	bf00      	nop
 800ed06:	bf00      	nop
 800ed08:	3730      	adds	r7, #48	@ 0x30
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	bd80      	pop	{r7, pc}
 800ed0e:	bf00      	nop
 800ed10:	20001158 	.word	0x20001158

0800ed14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b088      	sub	sp, #32
 800ed18:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ed1a:	e049      	b.n	800edb0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ed1c:	4b2e      	ldr	r3, [pc, #184]	@ (800edd8 <prvSwitchTimerLists+0xc4>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	68db      	ldr	r3, [r3, #12]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed26:	4b2c      	ldr	r3, [pc, #176]	@ (800edd8 <prvSwitchTimerLists+0xc4>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	68db      	ldr	r3, [r3, #12]
 800ed2c:	68db      	ldr	r3, [r3, #12]
 800ed2e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	3304      	adds	r3, #4
 800ed34:	4618      	mov	r0, r3
 800ed36:	f7fd fca9 	bl	800c68c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	6a1b      	ldr	r3, [r3, #32]
 800ed3e:	68f8      	ldr	r0, [r7, #12]
 800ed40:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ed48:	f003 0304 	and.w	r3, r3, #4
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d02f      	beq.n	800edb0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	699b      	ldr	r3, [r3, #24]
 800ed54:	693a      	ldr	r2, [r7, #16]
 800ed56:	4413      	add	r3, r2
 800ed58:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ed5a:	68ba      	ldr	r2, [r7, #8]
 800ed5c:	693b      	ldr	r3, [r7, #16]
 800ed5e:	429a      	cmp	r2, r3
 800ed60:	d90e      	bls.n	800ed80 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	68ba      	ldr	r2, [r7, #8]
 800ed66:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	68fa      	ldr	r2, [r7, #12]
 800ed6c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ed6e:	4b1a      	ldr	r3, [pc, #104]	@ (800edd8 <prvSwitchTimerLists+0xc4>)
 800ed70:	681a      	ldr	r2, [r3, #0]
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	3304      	adds	r3, #4
 800ed76:	4619      	mov	r1, r3
 800ed78:	4610      	mov	r0, r2
 800ed7a:	f7fd fc4e 	bl	800c61a <vListInsert>
 800ed7e:	e017      	b.n	800edb0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ed80:	2300      	movs	r3, #0
 800ed82:	9300      	str	r3, [sp, #0]
 800ed84:	2300      	movs	r3, #0
 800ed86:	693a      	ldr	r2, [r7, #16]
 800ed88:	2100      	movs	r1, #0
 800ed8a:	68f8      	ldr	r0, [r7, #12]
 800ed8c:	f7ff fd58 	bl	800e840 <xTimerGenericCommand>
 800ed90:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d10b      	bne.n	800edb0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800ed98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed9c:	f383 8811 	msr	BASEPRI, r3
 800eda0:	f3bf 8f6f 	isb	sy
 800eda4:	f3bf 8f4f 	dsb	sy
 800eda8:	603b      	str	r3, [r7, #0]
}
 800edaa:	bf00      	nop
 800edac:	bf00      	nop
 800edae:	e7fd      	b.n	800edac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800edb0:	4b09      	ldr	r3, [pc, #36]	@ (800edd8 <prvSwitchTimerLists+0xc4>)
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d1b0      	bne.n	800ed1c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800edba:	4b07      	ldr	r3, [pc, #28]	@ (800edd8 <prvSwitchTimerLists+0xc4>)
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800edc0:	4b06      	ldr	r3, [pc, #24]	@ (800eddc <prvSwitchTimerLists+0xc8>)
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	4a04      	ldr	r2, [pc, #16]	@ (800edd8 <prvSwitchTimerLists+0xc4>)
 800edc6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800edc8:	4a04      	ldr	r2, [pc, #16]	@ (800eddc <prvSwitchTimerLists+0xc8>)
 800edca:	697b      	ldr	r3, [r7, #20]
 800edcc:	6013      	str	r3, [r2, #0]
}
 800edce:	bf00      	nop
 800edd0:	3718      	adds	r7, #24
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}
 800edd6:	bf00      	nop
 800edd8:	20001150 	.word	0x20001150
 800eddc:	20001154 	.word	0x20001154

0800ede0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b082      	sub	sp, #8
 800ede4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ede6:	f000 f96f 	bl	800f0c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800edea:	4b15      	ldr	r3, [pc, #84]	@ (800ee40 <prvCheckForValidListAndQueue+0x60>)
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d120      	bne.n	800ee34 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800edf2:	4814      	ldr	r0, [pc, #80]	@ (800ee44 <prvCheckForValidListAndQueue+0x64>)
 800edf4:	f7fd fbc0 	bl	800c578 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800edf8:	4813      	ldr	r0, [pc, #76]	@ (800ee48 <prvCheckForValidListAndQueue+0x68>)
 800edfa:	f7fd fbbd 	bl	800c578 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800edfe:	4b13      	ldr	r3, [pc, #76]	@ (800ee4c <prvCheckForValidListAndQueue+0x6c>)
 800ee00:	4a10      	ldr	r2, [pc, #64]	@ (800ee44 <prvCheckForValidListAndQueue+0x64>)
 800ee02:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ee04:	4b12      	ldr	r3, [pc, #72]	@ (800ee50 <prvCheckForValidListAndQueue+0x70>)
 800ee06:	4a10      	ldr	r2, [pc, #64]	@ (800ee48 <prvCheckForValidListAndQueue+0x68>)
 800ee08:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	9300      	str	r3, [sp, #0]
 800ee0e:	4b11      	ldr	r3, [pc, #68]	@ (800ee54 <prvCheckForValidListAndQueue+0x74>)
 800ee10:	4a11      	ldr	r2, [pc, #68]	@ (800ee58 <prvCheckForValidListAndQueue+0x78>)
 800ee12:	2110      	movs	r1, #16
 800ee14:	200a      	movs	r0, #10
 800ee16:	f7fd fccd 	bl	800c7b4 <xQueueGenericCreateStatic>
 800ee1a:	4603      	mov	r3, r0
 800ee1c:	4a08      	ldr	r2, [pc, #32]	@ (800ee40 <prvCheckForValidListAndQueue+0x60>)
 800ee1e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ee20:	4b07      	ldr	r3, [pc, #28]	@ (800ee40 <prvCheckForValidListAndQueue+0x60>)
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d005      	beq.n	800ee34 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ee28:	4b05      	ldr	r3, [pc, #20]	@ (800ee40 <prvCheckForValidListAndQueue+0x60>)
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	490b      	ldr	r1, [pc, #44]	@ (800ee5c <prvCheckForValidListAndQueue+0x7c>)
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f7fe fbfa 	bl	800d628 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ee34:	f000 f97a 	bl	800f12c <vPortExitCritical>
}
 800ee38:	bf00      	nop
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	bd80      	pop	{r7, pc}
 800ee3e:	bf00      	nop
 800ee40:	20001158 	.word	0x20001158
 800ee44:	20001128 	.word	0x20001128
 800ee48:	2000113c 	.word	0x2000113c
 800ee4c:	20001150 	.word	0x20001150
 800ee50:	20001154 	.word	0x20001154
 800ee54:	20001204 	.word	0x20001204
 800ee58:	20001164 	.word	0x20001164
 800ee5c:	08010c28 	.word	0x08010c28

0800ee60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ee60:	b480      	push	{r7}
 800ee62:	b085      	sub	sp, #20
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	60f8      	str	r0, [r7, #12]
 800ee68:	60b9      	str	r1, [r7, #8]
 800ee6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	3b04      	subs	r3, #4
 800ee70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ee78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	3b04      	subs	r3, #4
 800ee7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	f023 0201 	bic.w	r2, r3, #1
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	3b04      	subs	r3, #4
 800ee8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ee90:	4a0c      	ldr	r2, [pc, #48]	@ (800eec4 <pxPortInitialiseStack+0x64>)
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	3b14      	subs	r3, #20
 800ee9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ee9c:	687a      	ldr	r2, [r7, #4]
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	3b04      	subs	r3, #4
 800eea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	f06f 0202 	mvn.w	r2, #2
 800eeae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	3b20      	subs	r3, #32
 800eeb4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800eeb6:	68fb      	ldr	r3, [r7, #12]
}
 800eeb8:	4618      	mov	r0, r3
 800eeba:	3714      	adds	r7, #20
 800eebc:	46bd      	mov	sp, r7
 800eebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec2:	4770      	bx	lr
 800eec4:	0800eec9 	.word	0x0800eec9

0800eec8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800eec8:	b480      	push	{r7}
 800eeca:	b085      	sub	sp, #20
 800eecc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800eece:	2300      	movs	r3, #0
 800eed0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800eed2:	4b13      	ldr	r3, [pc, #76]	@ (800ef20 <prvTaskExitError+0x58>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eeda:	d00b      	beq.n	800eef4 <prvTaskExitError+0x2c>
	__asm volatile
 800eedc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eee0:	f383 8811 	msr	BASEPRI, r3
 800eee4:	f3bf 8f6f 	isb	sy
 800eee8:	f3bf 8f4f 	dsb	sy
 800eeec:	60fb      	str	r3, [r7, #12]
}
 800eeee:	bf00      	nop
 800eef0:	bf00      	nop
 800eef2:	e7fd      	b.n	800eef0 <prvTaskExitError+0x28>
	__asm volatile
 800eef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eef8:	f383 8811 	msr	BASEPRI, r3
 800eefc:	f3bf 8f6f 	isb	sy
 800ef00:	f3bf 8f4f 	dsb	sy
 800ef04:	60bb      	str	r3, [r7, #8]
}
 800ef06:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ef08:	bf00      	nop
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d0fc      	beq.n	800ef0a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ef10:	bf00      	nop
 800ef12:	bf00      	nop
 800ef14:	3714      	adds	r7, #20
 800ef16:	46bd      	mov	sp, r7
 800ef18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1c:	4770      	bx	lr
 800ef1e:	bf00      	nop
 800ef20:	20000024 	.word	0x20000024
	...

0800ef30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ef30:	4b07      	ldr	r3, [pc, #28]	@ (800ef50 <pxCurrentTCBConst2>)
 800ef32:	6819      	ldr	r1, [r3, #0]
 800ef34:	6808      	ldr	r0, [r1, #0]
 800ef36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef3a:	f380 8809 	msr	PSP, r0
 800ef3e:	f3bf 8f6f 	isb	sy
 800ef42:	f04f 0000 	mov.w	r0, #0
 800ef46:	f380 8811 	msr	BASEPRI, r0
 800ef4a:	4770      	bx	lr
 800ef4c:	f3af 8000 	nop.w

0800ef50 <pxCurrentTCBConst2>:
 800ef50:	20000c28 	.word	0x20000c28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ef54:	bf00      	nop
 800ef56:	bf00      	nop

0800ef58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ef58:	4808      	ldr	r0, [pc, #32]	@ (800ef7c <prvPortStartFirstTask+0x24>)
 800ef5a:	6800      	ldr	r0, [r0, #0]
 800ef5c:	6800      	ldr	r0, [r0, #0]
 800ef5e:	f380 8808 	msr	MSP, r0
 800ef62:	f04f 0000 	mov.w	r0, #0
 800ef66:	f380 8814 	msr	CONTROL, r0
 800ef6a:	b662      	cpsie	i
 800ef6c:	b661      	cpsie	f
 800ef6e:	f3bf 8f4f 	dsb	sy
 800ef72:	f3bf 8f6f 	isb	sy
 800ef76:	df00      	svc	0
 800ef78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ef7a:	bf00      	nop
 800ef7c:	e000ed08 	.word	0xe000ed08

0800ef80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b086      	sub	sp, #24
 800ef84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ef86:	4b47      	ldr	r3, [pc, #284]	@ (800f0a4 <xPortStartScheduler+0x124>)
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	4a47      	ldr	r2, [pc, #284]	@ (800f0a8 <xPortStartScheduler+0x128>)
 800ef8c:	4293      	cmp	r3, r2
 800ef8e:	d10b      	bne.n	800efa8 <xPortStartScheduler+0x28>
	__asm volatile
 800ef90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef94:	f383 8811 	msr	BASEPRI, r3
 800ef98:	f3bf 8f6f 	isb	sy
 800ef9c:	f3bf 8f4f 	dsb	sy
 800efa0:	613b      	str	r3, [r7, #16]
}
 800efa2:	bf00      	nop
 800efa4:	bf00      	nop
 800efa6:	e7fd      	b.n	800efa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800efa8:	4b3e      	ldr	r3, [pc, #248]	@ (800f0a4 <xPortStartScheduler+0x124>)
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	4a3f      	ldr	r2, [pc, #252]	@ (800f0ac <xPortStartScheduler+0x12c>)
 800efae:	4293      	cmp	r3, r2
 800efb0:	d10b      	bne.n	800efca <xPortStartScheduler+0x4a>
	__asm volatile
 800efb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efb6:	f383 8811 	msr	BASEPRI, r3
 800efba:	f3bf 8f6f 	isb	sy
 800efbe:	f3bf 8f4f 	dsb	sy
 800efc2:	60fb      	str	r3, [r7, #12]
}
 800efc4:	bf00      	nop
 800efc6:	bf00      	nop
 800efc8:	e7fd      	b.n	800efc6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800efca:	4b39      	ldr	r3, [pc, #228]	@ (800f0b0 <xPortStartScheduler+0x130>)
 800efcc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800efce:	697b      	ldr	r3, [r7, #20]
 800efd0:	781b      	ldrb	r3, [r3, #0]
 800efd2:	b2db      	uxtb	r3, r3
 800efd4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800efd6:	697b      	ldr	r3, [r7, #20]
 800efd8:	22ff      	movs	r2, #255	@ 0xff
 800efda:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800efdc:	697b      	ldr	r3, [r7, #20]
 800efde:	781b      	ldrb	r3, [r3, #0]
 800efe0:	b2db      	uxtb	r3, r3
 800efe2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800efe4:	78fb      	ldrb	r3, [r7, #3]
 800efe6:	b2db      	uxtb	r3, r3
 800efe8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800efec:	b2da      	uxtb	r2, r3
 800efee:	4b31      	ldr	r3, [pc, #196]	@ (800f0b4 <xPortStartScheduler+0x134>)
 800eff0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800eff2:	4b31      	ldr	r3, [pc, #196]	@ (800f0b8 <xPortStartScheduler+0x138>)
 800eff4:	2207      	movs	r2, #7
 800eff6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eff8:	e009      	b.n	800f00e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800effa:	4b2f      	ldr	r3, [pc, #188]	@ (800f0b8 <xPortStartScheduler+0x138>)
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	3b01      	subs	r3, #1
 800f000:	4a2d      	ldr	r2, [pc, #180]	@ (800f0b8 <xPortStartScheduler+0x138>)
 800f002:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f004:	78fb      	ldrb	r3, [r7, #3]
 800f006:	b2db      	uxtb	r3, r3
 800f008:	005b      	lsls	r3, r3, #1
 800f00a:	b2db      	uxtb	r3, r3
 800f00c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f00e:	78fb      	ldrb	r3, [r7, #3]
 800f010:	b2db      	uxtb	r3, r3
 800f012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f016:	2b80      	cmp	r3, #128	@ 0x80
 800f018:	d0ef      	beq.n	800effa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f01a:	4b27      	ldr	r3, [pc, #156]	@ (800f0b8 <xPortStartScheduler+0x138>)
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	f1c3 0307 	rsb	r3, r3, #7
 800f022:	2b04      	cmp	r3, #4
 800f024:	d00b      	beq.n	800f03e <xPortStartScheduler+0xbe>
	__asm volatile
 800f026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f02a:	f383 8811 	msr	BASEPRI, r3
 800f02e:	f3bf 8f6f 	isb	sy
 800f032:	f3bf 8f4f 	dsb	sy
 800f036:	60bb      	str	r3, [r7, #8]
}
 800f038:	bf00      	nop
 800f03a:	bf00      	nop
 800f03c:	e7fd      	b.n	800f03a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f03e:	4b1e      	ldr	r3, [pc, #120]	@ (800f0b8 <xPortStartScheduler+0x138>)
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	021b      	lsls	r3, r3, #8
 800f044:	4a1c      	ldr	r2, [pc, #112]	@ (800f0b8 <xPortStartScheduler+0x138>)
 800f046:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f048:	4b1b      	ldr	r3, [pc, #108]	@ (800f0b8 <xPortStartScheduler+0x138>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f050:	4a19      	ldr	r2, [pc, #100]	@ (800f0b8 <xPortStartScheduler+0x138>)
 800f052:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	b2da      	uxtb	r2, r3
 800f058:	697b      	ldr	r3, [r7, #20]
 800f05a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f05c:	4b17      	ldr	r3, [pc, #92]	@ (800f0bc <xPortStartScheduler+0x13c>)
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	4a16      	ldr	r2, [pc, #88]	@ (800f0bc <xPortStartScheduler+0x13c>)
 800f062:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f066:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f068:	4b14      	ldr	r3, [pc, #80]	@ (800f0bc <xPortStartScheduler+0x13c>)
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	4a13      	ldr	r2, [pc, #76]	@ (800f0bc <xPortStartScheduler+0x13c>)
 800f06e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f072:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f074:	f000 f8da 	bl	800f22c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f078:	4b11      	ldr	r3, [pc, #68]	@ (800f0c0 <xPortStartScheduler+0x140>)
 800f07a:	2200      	movs	r2, #0
 800f07c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f07e:	f000 f8f9 	bl	800f274 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f082:	4b10      	ldr	r3, [pc, #64]	@ (800f0c4 <xPortStartScheduler+0x144>)
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	4a0f      	ldr	r2, [pc, #60]	@ (800f0c4 <xPortStartScheduler+0x144>)
 800f088:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f08c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f08e:	f7ff ff63 	bl	800ef58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f092:	f7fe ff2b 	bl	800deec <vTaskSwitchContext>
	prvTaskExitError();
 800f096:	f7ff ff17 	bl	800eec8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f09a:	2300      	movs	r3, #0
}
 800f09c:	4618      	mov	r0, r3
 800f09e:	3718      	adds	r7, #24
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	bd80      	pop	{r7, pc}
 800f0a4:	e000ed00 	.word	0xe000ed00
 800f0a8:	410fc271 	.word	0x410fc271
 800f0ac:	410fc270 	.word	0x410fc270
 800f0b0:	e000e400 	.word	0xe000e400
 800f0b4:	20001254 	.word	0x20001254
 800f0b8:	20001258 	.word	0x20001258
 800f0bc:	e000ed20 	.word	0xe000ed20
 800f0c0:	20000024 	.word	0x20000024
 800f0c4:	e000ef34 	.word	0xe000ef34

0800f0c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f0c8:	b480      	push	{r7}
 800f0ca:	b083      	sub	sp, #12
 800f0cc:	af00      	add	r7, sp, #0
	__asm volatile
 800f0ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0d2:	f383 8811 	msr	BASEPRI, r3
 800f0d6:	f3bf 8f6f 	isb	sy
 800f0da:	f3bf 8f4f 	dsb	sy
 800f0de:	607b      	str	r3, [r7, #4]
}
 800f0e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f0e2:	4b10      	ldr	r3, [pc, #64]	@ (800f124 <vPortEnterCritical+0x5c>)
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	3301      	adds	r3, #1
 800f0e8:	4a0e      	ldr	r2, [pc, #56]	@ (800f124 <vPortEnterCritical+0x5c>)
 800f0ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f0ec:	4b0d      	ldr	r3, [pc, #52]	@ (800f124 <vPortEnterCritical+0x5c>)
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	2b01      	cmp	r3, #1
 800f0f2:	d110      	bne.n	800f116 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f0f4:	4b0c      	ldr	r3, [pc, #48]	@ (800f128 <vPortEnterCritical+0x60>)
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	b2db      	uxtb	r3, r3
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d00b      	beq.n	800f116 <vPortEnterCritical+0x4e>
	__asm volatile
 800f0fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f102:	f383 8811 	msr	BASEPRI, r3
 800f106:	f3bf 8f6f 	isb	sy
 800f10a:	f3bf 8f4f 	dsb	sy
 800f10e:	603b      	str	r3, [r7, #0]
}
 800f110:	bf00      	nop
 800f112:	bf00      	nop
 800f114:	e7fd      	b.n	800f112 <vPortEnterCritical+0x4a>
	}
}
 800f116:	bf00      	nop
 800f118:	370c      	adds	r7, #12
 800f11a:	46bd      	mov	sp, r7
 800f11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f120:	4770      	bx	lr
 800f122:	bf00      	nop
 800f124:	20000024 	.word	0x20000024
 800f128:	e000ed04 	.word	0xe000ed04

0800f12c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f12c:	b480      	push	{r7}
 800f12e:	b083      	sub	sp, #12
 800f130:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f132:	4b12      	ldr	r3, [pc, #72]	@ (800f17c <vPortExitCritical+0x50>)
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d10b      	bne.n	800f152 <vPortExitCritical+0x26>
	__asm volatile
 800f13a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f13e:	f383 8811 	msr	BASEPRI, r3
 800f142:	f3bf 8f6f 	isb	sy
 800f146:	f3bf 8f4f 	dsb	sy
 800f14a:	607b      	str	r3, [r7, #4]
}
 800f14c:	bf00      	nop
 800f14e:	bf00      	nop
 800f150:	e7fd      	b.n	800f14e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f152:	4b0a      	ldr	r3, [pc, #40]	@ (800f17c <vPortExitCritical+0x50>)
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	3b01      	subs	r3, #1
 800f158:	4a08      	ldr	r2, [pc, #32]	@ (800f17c <vPortExitCritical+0x50>)
 800f15a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f15c:	4b07      	ldr	r3, [pc, #28]	@ (800f17c <vPortExitCritical+0x50>)
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d105      	bne.n	800f170 <vPortExitCritical+0x44>
 800f164:	2300      	movs	r3, #0
 800f166:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f168:	683b      	ldr	r3, [r7, #0]
 800f16a:	f383 8811 	msr	BASEPRI, r3
}
 800f16e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f170:	bf00      	nop
 800f172:	370c      	adds	r7, #12
 800f174:	46bd      	mov	sp, r7
 800f176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f17a:	4770      	bx	lr
 800f17c:	20000024 	.word	0x20000024

0800f180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f180:	f3ef 8009 	mrs	r0, PSP
 800f184:	f3bf 8f6f 	isb	sy
 800f188:	4b15      	ldr	r3, [pc, #84]	@ (800f1e0 <pxCurrentTCBConst>)
 800f18a:	681a      	ldr	r2, [r3, #0]
 800f18c:	f01e 0f10 	tst.w	lr, #16
 800f190:	bf08      	it	eq
 800f192:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f196:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f19a:	6010      	str	r0, [r2, #0]
 800f19c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f1a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f1a4:	f380 8811 	msr	BASEPRI, r0
 800f1a8:	f3bf 8f4f 	dsb	sy
 800f1ac:	f3bf 8f6f 	isb	sy
 800f1b0:	f7fe fe9c 	bl	800deec <vTaskSwitchContext>
 800f1b4:	f04f 0000 	mov.w	r0, #0
 800f1b8:	f380 8811 	msr	BASEPRI, r0
 800f1bc:	bc09      	pop	{r0, r3}
 800f1be:	6819      	ldr	r1, [r3, #0]
 800f1c0:	6808      	ldr	r0, [r1, #0]
 800f1c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1c6:	f01e 0f10 	tst.w	lr, #16
 800f1ca:	bf08      	it	eq
 800f1cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f1d0:	f380 8809 	msr	PSP, r0
 800f1d4:	f3bf 8f6f 	isb	sy
 800f1d8:	4770      	bx	lr
 800f1da:	bf00      	nop
 800f1dc:	f3af 8000 	nop.w

0800f1e0 <pxCurrentTCBConst>:
 800f1e0:	20000c28 	.word	0x20000c28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f1e4:	bf00      	nop
 800f1e6:	bf00      	nop

0800f1e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b082      	sub	sp, #8
 800f1ec:	af00      	add	r7, sp, #0
	__asm volatile
 800f1ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1f2:	f383 8811 	msr	BASEPRI, r3
 800f1f6:	f3bf 8f6f 	isb	sy
 800f1fa:	f3bf 8f4f 	dsb	sy
 800f1fe:	607b      	str	r3, [r7, #4]
}
 800f200:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f202:	f7fe fdb9 	bl	800dd78 <xTaskIncrementTick>
 800f206:	4603      	mov	r3, r0
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d003      	beq.n	800f214 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f20c:	4b06      	ldr	r3, [pc, #24]	@ (800f228 <xPortSysTickHandler+0x40>)
 800f20e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f212:	601a      	str	r2, [r3, #0]
 800f214:	2300      	movs	r3, #0
 800f216:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f218:	683b      	ldr	r3, [r7, #0]
 800f21a:	f383 8811 	msr	BASEPRI, r3
}
 800f21e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f220:	bf00      	nop
 800f222:	3708      	adds	r7, #8
 800f224:	46bd      	mov	sp, r7
 800f226:	bd80      	pop	{r7, pc}
 800f228:	e000ed04 	.word	0xe000ed04

0800f22c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f22c:	b480      	push	{r7}
 800f22e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f230:	4b0b      	ldr	r3, [pc, #44]	@ (800f260 <vPortSetupTimerInterrupt+0x34>)
 800f232:	2200      	movs	r2, #0
 800f234:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f236:	4b0b      	ldr	r3, [pc, #44]	@ (800f264 <vPortSetupTimerInterrupt+0x38>)
 800f238:	2200      	movs	r2, #0
 800f23a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f23c:	4b0a      	ldr	r3, [pc, #40]	@ (800f268 <vPortSetupTimerInterrupt+0x3c>)
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	4a0a      	ldr	r2, [pc, #40]	@ (800f26c <vPortSetupTimerInterrupt+0x40>)
 800f242:	fba2 2303 	umull	r2, r3, r2, r3
 800f246:	099b      	lsrs	r3, r3, #6
 800f248:	4a09      	ldr	r2, [pc, #36]	@ (800f270 <vPortSetupTimerInterrupt+0x44>)
 800f24a:	3b01      	subs	r3, #1
 800f24c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f24e:	4b04      	ldr	r3, [pc, #16]	@ (800f260 <vPortSetupTimerInterrupt+0x34>)
 800f250:	2207      	movs	r2, #7
 800f252:	601a      	str	r2, [r3, #0]
}
 800f254:	bf00      	nop
 800f256:	46bd      	mov	sp, r7
 800f258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f25c:	4770      	bx	lr
 800f25e:	bf00      	nop
 800f260:	e000e010 	.word	0xe000e010
 800f264:	e000e018 	.word	0xe000e018
 800f268:	20000000 	.word	0x20000000
 800f26c:	10624dd3 	.word	0x10624dd3
 800f270:	e000e014 	.word	0xe000e014

0800f274 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f274:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f284 <vPortEnableVFP+0x10>
 800f278:	6801      	ldr	r1, [r0, #0]
 800f27a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f27e:	6001      	str	r1, [r0, #0]
 800f280:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f282:	bf00      	nop
 800f284:	e000ed88 	.word	0xe000ed88

0800f288 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f288:	b480      	push	{r7}
 800f28a:	b085      	sub	sp, #20
 800f28c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f28e:	f3ef 8305 	mrs	r3, IPSR
 800f292:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	2b0f      	cmp	r3, #15
 800f298:	d915      	bls.n	800f2c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f29a:	4a18      	ldr	r2, [pc, #96]	@ (800f2fc <vPortValidateInterruptPriority+0x74>)
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	4413      	add	r3, r2
 800f2a0:	781b      	ldrb	r3, [r3, #0]
 800f2a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f2a4:	4b16      	ldr	r3, [pc, #88]	@ (800f300 <vPortValidateInterruptPriority+0x78>)
 800f2a6:	781b      	ldrb	r3, [r3, #0]
 800f2a8:	7afa      	ldrb	r2, [r7, #11]
 800f2aa:	429a      	cmp	r2, r3
 800f2ac:	d20b      	bcs.n	800f2c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f2ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2b2:	f383 8811 	msr	BASEPRI, r3
 800f2b6:	f3bf 8f6f 	isb	sy
 800f2ba:	f3bf 8f4f 	dsb	sy
 800f2be:	607b      	str	r3, [r7, #4]
}
 800f2c0:	bf00      	nop
 800f2c2:	bf00      	nop
 800f2c4:	e7fd      	b.n	800f2c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f2c6:	4b0f      	ldr	r3, [pc, #60]	@ (800f304 <vPortValidateInterruptPriority+0x7c>)
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f2ce:	4b0e      	ldr	r3, [pc, #56]	@ (800f308 <vPortValidateInterruptPriority+0x80>)
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	429a      	cmp	r2, r3
 800f2d4:	d90b      	bls.n	800f2ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f2d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2da:	f383 8811 	msr	BASEPRI, r3
 800f2de:	f3bf 8f6f 	isb	sy
 800f2e2:	f3bf 8f4f 	dsb	sy
 800f2e6:	603b      	str	r3, [r7, #0]
}
 800f2e8:	bf00      	nop
 800f2ea:	bf00      	nop
 800f2ec:	e7fd      	b.n	800f2ea <vPortValidateInterruptPriority+0x62>
	}
 800f2ee:	bf00      	nop
 800f2f0:	3714      	adds	r7, #20
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f8:	4770      	bx	lr
 800f2fa:	bf00      	nop
 800f2fc:	e000e3f0 	.word	0xe000e3f0
 800f300:	20001254 	.word	0x20001254
 800f304:	e000ed0c 	.word	0xe000ed0c
 800f308:	20001258 	.word	0x20001258

0800f30c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b08a      	sub	sp, #40	@ 0x28
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f314:	2300      	movs	r3, #0
 800f316:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f318:	f7fe fc72 	bl	800dc00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f31c:	4b5c      	ldr	r3, [pc, #368]	@ (800f490 <pvPortMalloc+0x184>)
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d101      	bne.n	800f328 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f324:	f000 f924 	bl	800f570 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f328:	4b5a      	ldr	r3, [pc, #360]	@ (800f494 <pvPortMalloc+0x188>)
 800f32a:	681a      	ldr	r2, [r3, #0]
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	4013      	ands	r3, r2
 800f330:	2b00      	cmp	r3, #0
 800f332:	f040 8095 	bne.w	800f460 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d01e      	beq.n	800f37a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f33c:	2208      	movs	r2, #8
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	4413      	add	r3, r2
 800f342:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	f003 0307 	and.w	r3, r3, #7
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d015      	beq.n	800f37a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	f023 0307 	bic.w	r3, r3, #7
 800f354:	3308      	adds	r3, #8
 800f356:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	f003 0307 	and.w	r3, r3, #7
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d00b      	beq.n	800f37a <pvPortMalloc+0x6e>
	__asm volatile
 800f362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f366:	f383 8811 	msr	BASEPRI, r3
 800f36a:	f3bf 8f6f 	isb	sy
 800f36e:	f3bf 8f4f 	dsb	sy
 800f372:	617b      	str	r3, [r7, #20]
}
 800f374:	bf00      	nop
 800f376:	bf00      	nop
 800f378:	e7fd      	b.n	800f376 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d06f      	beq.n	800f460 <pvPortMalloc+0x154>
 800f380:	4b45      	ldr	r3, [pc, #276]	@ (800f498 <pvPortMalloc+0x18c>)
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	687a      	ldr	r2, [r7, #4]
 800f386:	429a      	cmp	r2, r3
 800f388:	d86a      	bhi.n	800f460 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f38a:	4b44      	ldr	r3, [pc, #272]	@ (800f49c <pvPortMalloc+0x190>)
 800f38c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f38e:	4b43      	ldr	r3, [pc, #268]	@ (800f49c <pvPortMalloc+0x190>)
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f394:	e004      	b.n	800f3a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f398:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f39a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3a2:	685b      	ldr	r3, [r3, #4]
 800f3a4:	687a      	ldr	r2, [r7, #4]
 800f3a6:	429a      	cmp	r2, r3
 800f3a8:	d903      	bls.n	800f3b2 <pvPortMalloc+0xa6>
 800f3aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d1f1      	bne.n	800f396 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f3b2:	4b37      	ldr	r3, [pc, #220]	@ (800f490 <pvPortMalloc+0x184>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f3b8:	429a      	cmp	r2, r3
 800f3ba:	d051      	beq.n	800f460 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f3bc:	6a3b      	ldr	r3, [r7, #32]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	2208      	movs	r2, #8
 800f3c2:	4413      	add	r3, r2
 800f3c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f3c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3c8:	681a      	ldr	r2, [r3, #0]
 800f3ca:	6a3b      	ldr	r3, [r7, #32]
 800f3cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f3ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3d0:	685a      	ldr	r2, [r3, #4]
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	1ad2      	subs	r2, r2, r3
 800f3d6:	2308      	movs	r3, #8
 800f3d8:	005b      	lsls	r3, r3, #1
 800f3da:	429a      	cmp	r2, r3
 800f3dc:	d920      	bls.n	800f420 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f3de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	4413      	add	r3, r2
 800f3e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f3e6:	69bb      	ldr	r3, [r7, #24]
 800f3e8:	f003 0307 	and.w	r3, r3, #7
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d00b      	beq.n	800f408 <pvPortMalloc+0xfc>
	__asm volatile
 800f3f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3f4:	f383 8811 	msr	BASEPRI, r3
 800f3f8:	f3bf 8f6f 	isb	sy
 800f3fc:	f3bf 8f4f 	dsb	sy
 800f400:	613b      	str	r3, [r7, #16]
}
 800f402:	bf00      	nop
 800f404:	bf00      	nop
 800f406:	e7fd      	b.n	800f404 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f40a:	685a      	ldr	r2, [r3, #4]
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	1ad2      	subs	r2, r2, r3
 800f410:	69bb      	ldr	r3, [r7, #24]
 800f412:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f416:	687a      	ldr	r2, [r7, #4]
 800f418:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f41a:	69b8      	ldr	r0, [r7, #24]
 800f41c:	f000 f90a 	bl	800f634 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f420:	4b1d      	ldr	r3, [pc, #116]	@ (800f498 <pvPortMalloc+0x18c>)
 800f422:	681a      	ldr	r2, [r3, #0]
 800f424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f426:	685b      	ldr	r3, [r3, #4]
 800f428:	1ad3      	subs	r3, r2, r3
 800f42a:	4a1b      	ldr	r2, [pc, #108]	@ (800f498 <pvPortMalloc+0x18c>)
 800f42c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f42e:	4b1a      	ldr	r3, [pc, #104]	@ (800f498 <pvPortMalloc+0x18c>)
 800f430:	681a      	ldr	r2, [r3, #0]
 800f432:	4b1b      	ldr	r3, [pc, #108]	@ (800f4a0 <pvPortMalloc+0x194>)
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	429a      	cmp	r2, r3
 800f438:	d203      	bcs.n	800f442 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f43a:	4b17      	ldr	r3, [pc, #92]	@ (800f498 <pvPortMalloc+0x18c>)
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	4a18      	ldr	r2, [pc, #96]	@ (800f4a0 <pvPortMalloc+0x194>)
 800f440:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f444:	685a      	ldr	r2, [r3, #4]
 800f446:	4b13      	ldr	r3, [pc, #76]	@ (800f494 <pvPortMalloc+0x188>)
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	431a      	orrs	r2, r3
 800f44c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f44e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f452:	2200      	movs	r2, #0
 800f454:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f456:	4b13      	ldr	r3, [pc, #76]	@ (800f4a4 <pvPortMalloc+0x198>)
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	3301      	adds	r3, #1
 800f45c:	4a11      	ldr	r2, [pc, #68]	@ (800f4a4 <pvPortMalloc+0x198>)
 800f45e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f460:	f7fe fbdc 	bl	800dc1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f464:	69fb      	ldr	r3, [r7, #28]
 800f466:	f003 0307 	and.w	r3, r3, #7
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d00b      	beq.n	800f486 <pvPortMalloc+0x17a>
	__asm volatile
 800f46e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f472:	f383 8811 	msr	BASEPRI, r3
 800f476:	f3bf 8f6f 	isb	sy
 800f47a:	f3bf 8f4f 	dsb	sy
 800f47e:	60fb      	str	r3, [r7, #12]
}
 800f480:	bf00      	nop
 800f482:	bf00      	nop
 800f484:	e7fd      	b.n	800f482 <pvPortMalloc+0x176>
	return pvReturn;
 800f486:	69fb      	ldr	r3, [r7, #28]
}
 800f488:	4618      	mov	r0, r3
 800f48a:	3728      	adds	r7, #40	@ 0x28
 800f48c:	46bd      	mov	sp, r7
 800f48e:	bd80      	pop	{r7, pc}
 800f490:	20005264 	.word	0x20005264
 800f494:	20005278 	.word	0x20005278
 800f498:	20005268 	.word	0x20005268
 800f49c:	2000525c 	.word	0x2000525c
 800f4a0:	2000526c 	.word	0x2000526c
 800f4a4:	20005270 	.word	0x20005270

0800f4a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b086      	sub	sp, #24
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d04f      	beq.n	800f55a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f4ba:	2308      	movs	r3, #8
 800f4bc:	425b      	negs	r3, r3
 800f4be:	697a      	ldr	r2, [r7, #20]
 800f4c0:	4413      	add	r3, r2
 800f4c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f4c4:	697b      	ldr	r3, [r7, #20]
 800f4c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f4c8:	693b      	ldr	r3, [r7, #16]
 800f4ca:	685a      	ldr	r2, [r3, #4]
 800f4cc:	4b25      	ldr	r3, [pc, #148]	@ (800f564 <vPortFree+0xbc>)
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	4013      	ands	r3, r2
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d10b      	bne.n	800f4ee <vPortFree+0x46>
	__asm volatile
 800f4d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4da:	f383 8811 	msr	BASEPRI, r3
 800f4de:	f3bf 8f6f 	isb	sy
 800f4e2:	f3bf 8f4f 	dsb	sy
 800f4e6:	60fb      	str	r3, [r7, #12]
}
 800f4e8:	bf00      	nop
 800f4ea:	bf00      	nop
 800f4ec:	e7fd      	b.n	800f4ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f4ee:	693b      	ldr	r3, [r7, #16]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d00b      	beq.n	800f50e <vPortFree+0x66>
	__asm volatile
 800f4f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4fa:	f383 8811 	msr	BASEPRI, r3
 800f4fe:	f3bf 8f6f 	isb	sy
 800f502:	f3bf 8f4f 	dsb	sy
 800f506:	60bb      	str	r3, [r7, #8]
}
 800f508:	bf00      	nop
 800f50a:	bf00      	nop
 800f50c:	e7fd      	b.n	800f50a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f50e:	693b      	ldr	r3, [r7, #16]
 800f510:	685a      	ldr	r2, [r3, #4]
 800f512:	4b14      	ldr	r3, [pc, #80]	@ (800f564 <vPortFree+0xbc>)
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	4013      	ands	r3, r2
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d01e      	beq.n	800f55a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f51c:	693b      	ldr	r3, [r7, #16]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d11a      	bne.n	800f55a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f524:	693b      	ldr	r3, [r7, #16]
 800f526:	685a      	ldr	r2, [r3, #4]
 800f528:	4b0e      	ldr	r3, [pc, #56]	@ (800f564 <vPortFree+0xbc>)
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	43db      	mvns	r3, r3
 800f52e:	401a      	ands	r2, r3
 800f530:	693b      	ldr	r3, [r7, #16]
 800f532:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f534:	f7fe fb64 	bl	800dc00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f538:	693b      	ldr	r3, [r7, #16]
 800f53a:	685a      	ldr	r2, [r3, #4]
 800f53c:	4b0a      	ldr	r3, [pc, #40]	@ (800f568 <vPortFree+0xc0>)
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	4413      	add	r3, r2
 800f542:	4a09      	ldr	r2, [pc, #36]	@ (800f568 <vPortFree+0xc0>)
 800f544:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f546:	6938      	ldr	r0, [r7, #16]
 800f548:	f000 f874 	bl	800f634 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f54c:	4b07      	ldr	r3, [pc, #28]	@ (800f56c <vPortFree+0xc4>)
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	3301      	adds	r3, #1
 800f552:	4a06      	ldr	r2, [pc, #24]	@ (800f56c <vPortFree+0xc4>)
 800f554:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f556:	f7fe fb61 	bl	800dc1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f55a:	bf00      	nop
 800f55c:	3718      	adds	r7, #24
 800f55e:	46bd      	mov	sp, r7
 800f560:	bd80      	pop	{r7, pc}
 800f562:	bf00      	nop
 800f564:	20005278 	.word	0x20005278
 800f568:	20005268 	.word	0x20005268
 800f56c:	20005274 	.word	0x20005274

0800f570 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f570:	b480      	push	{r7}
 800f572:	b085      	sub	sp, #20
 800f574:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f576:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800f57a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f57c:	4b27      	ldr	r3, [pc, #156]	@ (800f61c <prvHeapInit+0xac>)
 800f57e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	f003 0307 	and.w	r3, r3, #7
 800f586:	2b00      	cmp	r3, #0
 800f588:	d00c      	beq.n	800f5a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	3307      	adds	r3, #7
 800f58e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	f023 0307 	bic.w	r3, r3, #7
 800f596:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f598:	68ba      	ldr	r2, [r7, #8]
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	1ad3      	subs	r3, r2, r3
 800f59e:	4a1f      	ldr	r2, [pc, #124]	@ (800f61c <prvHeapInit+0xac>)
 800f5a0:	4413      	add	r3, r2
 800f5a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f5a8:	4a1d      	ldr	r2, [pc, #116]	@ (800f620 <prvHeapInit+0xb0>)
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f5ae:	4b1c      	ldr	r3, [pc, #112]	@ (800f620 <prvHeapInit+0xb0>)
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	68ba      	ldr	r2, [r7, #8]
 800f5b8:	4413      	add	r3, r2
 800f5ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f5bc:	2208      	movs	r2, #8
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	1a9b      	subs	r3, r3, r2
 800f5c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	f023 0307 	bic.w	r3, r3, #7
 800f5ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	4a15      	ldr	r2, [pc, #84]	@ (800f624 <prvHeapInit+0xb4>)
 800f5d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f5d2:	4b14      	ldr	r3, [pc, #80]	@ (800f624 <prvHeapInit+0xb4>)
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f5da:	4b12      	ldr	r3, [pc, #72]	@ (800f624 <prvHeapInit+0xb4>)
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	2200      	movs	r2, #0
 800f5e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f5e6:	683b      	ldr	r3, [r7, #0]
 800f5e8:	68fa      	ldr	r2, [r7, #12]
 800f5ea:	1ad2      	subs	r2, r2, r3
 800f5ec:	683b      	ldr	r3, [r7, #0]
 800f5ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f5f0:	4b0c      	ldr	r3, [pc, #48]	@ (800f624 <prvHeapInit+0xb4>)
 800f5f2:	681a      	ldr	r2, [r3, #0]
 800f5f4:	683b      	ldr	r3, [r7, #0]
 800f5f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f5f8:	683b      	ldr	r3, [r7, #0]
 800f5fa:	685b      	ldr	r3, [r3, #4]
 800f5fc:	4a0a      	ldr	r2, [pc, #40]	@ (800f628 <prvHeapInit+0xb8>)
 800f5fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f600:	683b      	ldr	r3, [r7, #0]
 800f602:	685b      	ldr	r3, [r3, #4]
 800f604:	4a09      	ldr	r2, [pc, #36]	@ (800f62c <prvHeapInit+0xbc>)
 800f606:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f608:	4b09      	ldr	r3, [pc, #36]	@ (800f630 <prvHeapInit+0xc0>)
 800f60a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800f60e:	601a      	str	r2, [r3, #0]
}
 800f610:	bf00      	nop
 800f612:	3714      	adds	r7, #20
 800f614:	46bd      	mov	sp, r7
 800f616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61a:	4770      	bx	lr
 800f61c:	2000125c 	.word	0x2000125c
 800f620:	2000525c 	.word	0x2000525c
 800f624:	20005264 	.word	0x20005264
 800f628:	2000526c 	.word	0x2000526c
 800f62c:	20005268 	.word	0x20005268
 800f630:	20005278 	.word	0x20005278

0800f634 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f634:	b480      	push	{r7}
 800f636:	b085      	sub	sp, #20
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f63c:	4b28      	ldr	r3, [pc, #160]	@ (800f6e0 <prvInsertBlockIntoFreeList+0xac>)
 800f63e:	60fb      	str	r3, [r7, #12]
 800f640:	e002      	b.n	800f648 <prvInsertBlockIntoFreeList+0x14>
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	60fb      	str	r3, [r7, #12]
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	687a      	ldr	r2, [r7, #4]
 800f64e:	429a      	cmp	r2, r3
 800f650:	d8f7      	bhi.n	800f642 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	685b      	ldr	r3, [r3, #4]
 800f65a:	68ba      	ldr	r2, [r7, #8]
 800f65c:	4413      	add	r3, r2
 800f65e:	687a      	ldr	r2, [r7, #4]
 800f660:	429a      	cmp	r2, r3
 800f662:	d108      	bne.n	800f676 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	685a      	ldr	r2, [r3, #4]
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	685b      	ldr	r3, [r3, #4]
 800f66c:	441a      	add	r2, r3
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	685b      	ldr	r3, [r3, #4]
 800f67e:	68ba      	ldr	r2, [r7, #8]
 800f680:	441a      	add	r2, r3
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	429a      	cmp	r2, r3
 800f688:	d118      	bne.n	800f6bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	681a      	ldr	r2, [r3, #0]
 800f68e:	4b15      	ldr	r3, [pc, #84]	@ (800f6e4 <prvInsertBlockIntoFreeList+0xb0>)
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	429a      	cmp	r2, r3
 800f694:	d00d      	beq.n	800f6b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	685a      	ldr	r2, [r3, #4]
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	685b      	ldr	r3, [r3, #4]
 800f6a0:	441a      	add	r2, r3
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	681a      	ldr	r2, [r3, #0]
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	601a      	str	r2, [r3, #0]
 800f6b0:	e008      	b.n	800f6c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f6b2:	4b0c      	ldr	r3, [pc, #48]	@ (800f6e4 <prvInsertBlockIntoFreeList+0xb0>)
 800f6b4:	681a      	ldr	r2, [r3, #0]
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	601a      	str	r2, [r3, #0]
 800f6ba:	e003      	b.n	800f6c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	681a      	ldr	r2, [r3, #0]
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f6c4:	68fa      	ldr	r2, [r7, #12]
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	429a      	cmp	r2, r3
 800f6ca:	d002      	beq.n	800f6d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	687a      	ldr	r2, [r7, #4]
 800f6d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f6d2:	bf00      	nop
 800f6d4:	3714      	adds	r7, #20
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6dc:	4770      	bx	lr
 800f6de:	bf00      	nop
 800f6e0:	2000525c 	.word	0x2000525c
 800f6e4:	20005264 	.word	0x20005264

0800f6e8 <malloc>:
 800f6e8:	4b02      	ldr	r3, [pc, #8]	@ (800f6f4 <malloc+0xc>)
 800f6ea:	4601      	mov	r1, r0
 800f6ec:	6818      	ldr	r0, [r3, #0]
 800f6ee:	f000 b82d 	b.w	800f74c <_malloc_r>
 800f6f2:	bf00      	nop
 800f6f4:	20000034 	.word	0x20000034

0800f6f8 <free>:
 800f6f8:	4b02      	ldr	r3, [pc, #8]	@ (800f704 <free+0xc>)
 800f6fa:	4601      	mov	r1, r0
 800f6fc:	6818      	ldr	r0, [r3, #0]
 800f6fe:	f000 bc91 	b.w	8010024 <_free_r>
 800f702:	bf00      	nop
 800f704:	20000034 	.word	0x20000034

0800f708 <sbrk_aligned>:
 800f708:	b570      	push	{r4, r5, r6, lr}
 800f70a:	4e0f      	ldr	r6, [pc, #60]	@ (800f748 <sbrk_aligned+0x40>)
 800f70c:	460c      	mov	r4, r1
 800f70e:	6831      	ldr	r1, [r6, #0]
 800f710:	4605      	mov	r5, r0
 800f712:	b911      	cbnz	r1, 800f71a <sbrk_aligned+0x12>
 800f714:	f000 fc0a 	bl	800ff2c <_sbrk_r>
 800f718:	6030      	str	r0, [r6, #0]
 800f71a:	4621      	mov	r1, r4
 800f71c:	4628      	mov	r0, r5
 800f71e:	f000 fc05 	bl	800ff2c <_sbrk_r>
 800f722:	1c43      	adds	r3, r0, #1
 800f724:	d103      	bne.n	800f72e <sbrk_aligned+0x26>
 800f726:	f04f 34ff 	mov.w	r4, #4294967295
 800f72a:	4620      	mov	r0, r4
 800f72c:	bd70      	pop	{r4, r5, r6, pc}
 800f72e:	1cc4      	adds	r4, r0, #3
 800f730:	f024 0403 	bic.w	r4, r4, #3
 800f734:	42a0      	cmp	r0, r4
 800f736:	d0f8      	beq.n	800f72a <sbrk_aligned+0x22>
 800f738:	1a21      	subs	r1, r4, r0
 800f73a:	4628      	mov	r0, r5
 800f73c:	f000 fbf6 	bl	800ff2c <_sbrk_r>
 800f740:	3001      	adds	r0, #1
 800f742:	d1f2      	bne.n	800f72a <sbrk_aligned+0x22>
 800f744:	e7ef      	b.n	800f726 <sbrk_aligned+0x1e>
 800f746:	bf00      	nop
 800f748:	2000527c 	.word	0x2000527c

0800f74c <_malloc_r>:
 800f74c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f750:	1ccd      	adds	r5, r1, #3
 800f752:	f025 0503 	bic.w	r5, r5, #3
 800f756:	3508      	adds	r5, #8
 800f758:	2d0c      	cmp	r5, #12
 800f75a:	bf38      	it	cc
 800f75c:	250c      	movcc	r5, #12
 800f75e:	2d00      	cmp	r5, #0
 800f760:	4606      	mov	r6, r0
 800f762:	db01      	blt.n	800f768 <_malloc_r+0x1c>
 800f764:	42a9      	cmp	r1, r5
 800f766:	d904      	bls.n	800f772 <_malloc_r+0x26>
 800f768:	230c      	movs	r3, #12
 800f76a:	6033      	str	r3, [r6, #0]
 800f76c:	2000      	movs	r0, #0
 800f76e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f772:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f848 <_malloc_r+0xfc>
 800f776:	f000 f869 	bl	800f84c <__malloc_lock>
 800f77a:	f8d8 3000 	ldr.w	r3, [r8]
 800f77e:	461c      	mov	r4, r3
 800f780:	bb44      	cbnz	r4, 800f7d4 <_malloc_r+0x88>
 800f782:	4629      	mov	r1, r5
 800f784:	4630      	mov	r0, r6
 800f786:	f7ff ffbf 	bl	800f708 <sbrk_aligned>
 800f78a:	1c43      	adds	r3, r0, #1
 800f78c:	4604      	mov	r4, r0
 800f78e:	d158      	bne.n	800f842 <_malloc_r+0xf6>
 800f790:	f8d8 4000 	ldr.w	r4, [r8]
 800f794:	4627      	mov	r7, r4
 800f796:	2f00      	cmp	r7, #0
 800f798:	d143      	bne.n	800f822 <_malloc_r+0xd6>
 800f79a:	2c00      	cmp	r4, #0
 800f79c:	d04b      	beq.n	800f836 <_malloc_r+0xea>
 800f79e:	6823      	ldr	r3, [r4, #0]
 800f7a0:	4639      	mov	r1, r7
 800f7a2:	4630      	mov	r0, r6
 800f7a4:	eb04 0903 	add.w	r9, r4, r3
 800f7a8:	f000 fbc0 	bl	800ff2c <_sbrk_r>
 800f7ac:	4581      	cmp	r9, r0
 800f7ae:	d142      	bne.n	800f836 <_malloc_r+0xea>
 800f7b0:	6821      	ldr	r1, [r4, #0]
 800f7b2:	1a6d      	subs	r5, r5, r1
 800f7b4:	4629      	mov	r1, r5
 800f7b6:	4630      	mov	r0, r6
 800f7b8:	f7ff ffa6 	bl	800f708 <sbrk_aligned>
 800f7bc:	3001      	adds	r0, #1
 800f7be:	d03a      	beq.n	800f836 <_malloc_r+0xea>
 800f7c0:	6823      	ldr	r3, [r4, #0]
 800f7c2:	442b      	add	r3, r5
 800f7c4:	6023      	str	r3, [r4, #0]
 800f7c6:	f8d8 3000 	ldr.w	r3, [r8]
 800f7ca:	685a      	ldr	r2, [r3, #4]
 800f7cc:	bb62      	cbnz	r2, 800f828 <_malloc_r+0xdc>
 800f7ce:	f8c8 7000 	str.w	r7, [r8]
 800f7d2:	e00f      	b.n	800f7f4 <_malloc_r+0xa8>
 800f7d4:	6822      	ldr	r2, [r4, #0]
 800f7d6:	1b52      	subs	r2, r2, r5
 800f7d8:	d420      	bmi.n	800f81c <_malloc_r+0xd0>
 800f7da:	2a0b      	cmp	r2, #11
 800f7dc:	d917      	bls.n	800f80e <_malloc_r+0xc2>
 800f7de:	1961      	adds	r1, r4, r5
 800f7e0:	42a3      	cmp	r3, r4
 800f7e2:	6025      	str	r5, [r4, #0]
 800f7e4:	bf18      	it	ne
 800f7e6:	6059      	strne	r1, [r3, #4]
 800f7e8:	6863      	ldr	r3, [r4, #4]
 800f7ea:	bf08      	it	eq
 800f7ec:	f8c8 1000 	streq.w	r1, [r8]
 800f7f0:	5162      	str	r2, [r4, r5]
 800f7f2:	604b      	str	r3, [r1, #4]
 800f7f4:	4630      	mov	r0, r6
 800f7f6:	f000 f82f 	bl	800f858 <__malloc_unlock>
 800f7fa:	f104 000b 	add.w	r0, r4, #11
 800f7fe:	1d23      	adds	r3, r4, #4
 800f800:	f020 0007 	bic.w	r0, r0, #7
 800f804:	1ac2      	subs	r2, r0, r3
 800f806:	bf1c      	itt	ne
 800f808:	1a1b      	subne	r3, r3, r0
 800f80a:	50a3      	strne	r3, [r4, r2]
 800f80c:	e7af      	b.n	800f76e <_malloc_r+0x22>
 800f80e:	6862      	ldr	r2, [r4, #4]
 800f810:	42a3      	cmp	r3, r4
 800f812:	bf0c      	ite	eq
 800f814:	f8c8 2000 	streq.w	r2, [r8]
 800f818:	605a      	strne	r2, [r3, #4]
 800f81a:	e7eb      	b.n	800f7f4 <_malloc_r+0xa8>
 800f81c:	4623      	mov	r3, r4
 800f81e:	6864      	ldr	r4, [r4, #4]
 800f820:	e7ae      	b.n	800f780 <_malloc_r+0x34>
 800f822:	463c      	mov	r4, r7
 800f824:	687f      	ldr	r7, [r7, #4]
 800f826:	e7b6      	b.n	800f796 <_malloc_r+0x4a>
 800f828:	461a      	mov	r2, r3
 800f82a:	685b      	ldr	r3, [r3, #4]
 800f82c:	42a3      	cmp	r3, r4
 800f82e:	d1fb      	bne.n	800f828 <_malloc_r+0xdc>
 800f830:	2300      	movs	r3, #0
 800f832:	6053      	str	r3, [r2, #4]
 800f834:	e7de      	b.n	800f7f4 <_malloc_r+0xa8>
 800f836:	230c      	movs	r3, #12
 800f838:	6033      	str	r3, [r6, #0]
 800f83a:	4630      	mov	r0, r6
 800f83c:	f000 f80c 	bl	800f858 <__malloc_unlock>
 800f840:	e794      	b.n	800f76c <_malloc_r+0x20>
 800f842:	6005      	str	r5, [r0, #0]
 800f844:	e7d6      	b.n	800f7f4 <_malloc_r+0xa8>
 800f846:	bf00      	nop
 800f848:	20005280 	.word	0x20005280

0800f84c <__malloc_lock>:
 800f84c:	4801      	ldr	r0, [pc, #4]	@ (800f854 <__malloc_lock+0x8>)
 800f84e:	f000 bbba 	b.w	800ffc6 <__retarget_lock_acquire_recursive>
 800f852:	bf00      	nop
 800f854:	200053c4 	.word	0x200053c4

0800f858 <__malloc_unlock>:
 800f858:	4801      	ldr	r0, [pc, #4]	@ (800f860 <__malloc_unlock+0x8>)
 800f85a:	f000 bbb5 	b.w	800ffc8 <__retarget_lock_release_recursive>
 800f85e:	bf00      	nop
 800f860:	200053c4 	.word	0x200053c4

0800f864 <rand>:
 800f864:	4b16      	ldr	r3, [pc, #88]	@ (800f8c0 <rand+0x5c>)
 800f866:	b510      	push	{r4, lr}
 800f868:	681c      	ldr	r4, [r3, #0]
 800f86a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f86c:	b9b3      	cbnz	r3, 800f89c <rand+0x38>
 800f86e:	2018      	movs	r0, #24
 800f870:	f7ff ff3a 	bl	800f6e8 <malloc>
 800f874:	4602      	mov	r2, r0
 800f876:	6320      	str	r0, [r4, #48]	@ 0x30
 800f878:	b920      	cbnz	r0, 800f884 <rand+0x20>
 800f87a:	4b12      	ldr	r3, [pc, #72]	@ (800f8c4 <rand+0x60>)
 800f87c:	4812      	ldr	r0, [pc, #72]	@ (800f8c8 <rand+0x64>)
 800f87e:	2152      	movs	r1, #82	@ 0x52
 800f880:	f000 fbb2 	bl	800ffe8 <__assert_func>
 800f884:	4911      	ldr	r1, [pc, #68]	@ (800f8cc <rand+0x68>)
 800f886:	4b12      	ldr	r3, [pc, #72]	@ (800f8d0 <rand+0x6c>)
 800f888:	e9c0 1300 	strd	r1, r3, [r0]
 800f88c:	4b11      	ldr	r3, [pc, #68]	@ (800f8d4 <rand+0x70>)
 800f88e:	6083      	str	r3, [r0, #8]
 800f890:	230b      	movs	r3, #11
 800f892:	8183      	strh	r3, [r0, #12]
 800f894:	2100      	movs	r1, #0
 800f896:	2001      	movs	r0, #1
 800f898:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800f89c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f89e:	480e      	ldr	r0, [pc, #56]	@ (800f8d8 <rand+0x74>)
 800f8a0:	690b      	ldr	r3, [r1, #16]
 800f8a2:	694c      	ldr	r4, [r1, #20]
 800f8a4:	4a0d      	ldr	r2, [pc, #52]	@ (800f8dc <rand+0x78>)
 800f8a6:	4358      	muls	r0, r3
 800f8a8:	fb02 0004 	mla	r0, r2, r4, r0
 800f8ac:	fba3 3202 	umull	r3, r2, r3, r2
 800f8b0:	3301      	adds	r3, #1
 800f8b2:	eb40 0002 	adc.w	r0, r0, r2
 800f8b6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800f8ba:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800f8be:	bd10      	pop	{r4, pc}
 800f8c0:	20000034 	.word	0x20000034
 800f8c4:	08010dcc 	.word	0x08010dcc
 800f8c8:	08010de3 	.word	0x08010de3
 800f8cc:	abcd330e 	.word	0xabcd330e
 800f8d0:	e66d1234 	.word	0xe66d1234
 800f8d4:	0005deec 	.word	0x0005deec
 800f8d8:	5851f42d 	.word	0x5851f42d
 800f8dc:	4c957f2d 	.word	0x4c957f2d

0800f8e0 <__sflush_r>:
 800f8e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f8e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8e8:	0716      	lsls	r6, r2, #28
 800f8ea:	4605      	mov	r5, r0
 800f8ec:	460c      	mov	r4, r1
 800f8ee:	d454      	bmi.n	800f99a <__sflush_r+0xba>
 800f8f0:	684b      	ldr	r3, [r1, #4]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	dc02      	bgt.n	800f8fc <__sflush_r+0x1c>
 800f8f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	dd48      	ble.n	800f98e <__sflush_r+0xae>
 800f8fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f8fe:	2e00      	cmp	r6, #0
 800f900:	d045      	beq.n	800f98e <__sflush_r+0xae>
 800f902:	2300      	movs	r3, #0
 800f904:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f908:	682f      	ldr	r7, [r5, #0]
 800f90a:	6a21      	ldr	r1, [r4, #32]
 800f90c:	602b      	str	r3, [r5, #0]
 800f90e:	d030      	beq.n	800f972 <__sflush_r+0x92>
 800f910:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f912:	89a3      	ldrh	r3, [r4, #12]
 800f914:	0759      	lsls	r1, r3, #29
 800f916:	d505      	bpl.n	800f924 <__sflush_r+0x44>
 800f918:	6863      	ldr	r3, [r4, #4]
 800f91a:	1ad2      	subs	r2, r2, r3
 800f91c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f91e:	b10b      	cbz	r3, 800f924 <__sflush_r+0x44>
 800f920:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f922:	1ad2      	subs	r2, r2, r3
 800f924:	2300      	movs	r3, #0
 800f926:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f928:	6a21      	ldr	r1, [r4, #32]
 800f92a:	4628      	mov	r0, r5
 800f92c:	47b0      	blx	r6
 800f92e:	1c43      	adds	r3, r0, #1
 800f930:	89a3      	ldrh	r3, [r4, #12]
 800f932:	d106      	bne.n	800f942 <__sflush_r+0x62>
 800f934:	6829      	ldr	r1, [r5, #0]
 800f936:	291d      	cmp	r1, #29
 800f938:	d82b      	bhi.n	800f992 <__sflush_r+0xb2>
 800f93a:	4a2a      	ldr	r2, [pc, #168]	@ (800f9e4 <__sflush_r+0x104>)
 800f93c:	410a      	asrs	r2, r1
 800f93e:	07d6      	lsls	r6, r2, #31
 800f940:	d427      	bmi.n	800f992 <__sflush_r+0xb2>
 800f942:	2200      	movs	r2, #0
 800f944:	6062      	str	r2, [r4, #4]
 800f946:	04d9      	lsls	r1, r3, #19
 800f948:	6922      	ldr	r2, [r4, #16]
 800f94a:	6022      	str	r2, [r4, #0]
 800f94c:	d504      	bpl.n	800f958 <__sflush_r+0x78>
 800f94e:	1c42      	adds	r2, r0, #1
 800f950:	d101      	bne.n	800f956 <__sflush_r+0x76>
 800f952:	682b      	ldr	r3, [r5, #0]
 800f954:	b903      	cbnz	r3, 800f958 <__sflush_r+0x78>
 800f956:	6560      	str	r0, [r4, #84]	@ 0x54
 800f958:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f95a:	602f      	str	r7, [r5, #0]
 800f95c:	b1b9      	cbz	r1, 800f98e <__sflush_r+0xae>
 800f95e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f962:	4299      	cmp	r1, r3
 800f964:	d002      	beq.n	800f96c <__sflush_r+0x8c>
 800f966:	4628      	mov	r0, r5
 800f968:	f000 fb5c 	bl	8010024 <_free_r>
 800f96c:	2300      	movs	r3, #0
 800f96e:	6363      	str	r3, [r4, #52]	@ 0x34
 800f970:	e00d      	b.n	800f98e <__sflush_r+0xae>
 800f972:	2301      	movs	r3, #1
 800f974:	4628      	mov	r0, r5
 800f976:	47b0      	blx	r6
 800f978:	4602      	mov	r2, r0
 800f97a:	1c50      	adds	r0, r2, #1
 800f97c:	d1c9      	bne.n	800f912 <__sflush_r+0x32>
 800f97e:	682b      	ldr	r3, [r5, #0]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d0c6      	beq.n	800f912 <__sflush_r+0x32>
 800f984:	2b1d      	cmp	r3, #29
 800f986:	d001      	beq.n	800f98c <__sflush_r+0xac>
 800f988:	2b16      	cmp	r3, #22
 800f98a:	d11e      	bne.n	800f9ca <__sflush_r+0xea>
 800f98c:	602f      	str	r7, [r5, #0]
 800f98e:	2000      	movs	r0, #0
 800f990:	e022      	b.n	800f9d8 <__sflush_r+0xf8>
 800f992:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f996:	b21b      	sxth	r3, r3
 800f998:	e01b      	b.n	800f9d2 <__sflush_r+0xf2>
 800f99a:	690f      	ldr	r7, [r1, #16]
 800f99c:	2f00      	cmp	r7, #0
 800f99e:	d0f6      	beq.n	800f98e <__sflush_r+0xae>
 800f9a0:	0793      	lsls	r3, r2, #30
 800f9a2:	680e      	ldr	r6, [r1, #0]
 800f9a4:	bf08      	it	eq
 800f9a6:	694b      	ldreq	r3, [r1, #20]
 800f9a8:	600f      	str	r7, [r1, #0]
 800f9aa:	bf18      	it	ne
 800f9ac:	2300      	movne	r3, #0
 800f9ae:	eba6 0807 	sub.w	r8, r6, r7
 800f9b2:	608b      	str	r3, [r1, #8]
 800f9b4:	f1b8 0f00 	cmp.w	r8, #0
 800f9b8:	dde9      	ble.n	800f98e <__sflush_r+0xae>
 800f9ba:	6a21      	ldr	r1, [r4, #32]
 800f9bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f9be:	4643      	mov	r3, r8
 800f9c0:	463a      	mov	r2, r7
 800f9c2:	4628      	mov	r0, r5
 800f9c4:	47b0      	blx	r6
 800f9c6:	2800      	cmp	r0, #0
 800f9c8:	dc08      	bgt.n	800f9dc <__sflush_r+0xfc>
 800f9ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f9d2:	81a3      	strh	r3, [r4, #12]
 800f9d4:	f04f 30ff 	mov.w	r0, #4294967295
 800f9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9dc:	4407      	add	r7, r0
 800f9de:	eba8 0800 	sub.w	r8, r8, r0
 800f9e2:	e7e7      	b.n	800f9b4 <__sflush_r+0xd4>
 800f9e4:	dfbffffe 	.word	0xdfbffffe

0800f9e8 <_fflush_r>:
 800f9e8:	b538      	push	{r3, r4, r5, lr}
 800f9ea:	690b      	ldr	r3, [r1, #16]
 800f9ec:	4605      	mov	r5, r0
 800f9ee:	460c      	mov	r4, r1
 800f9f0:	b913      	cbnz	r3, 800f9f8 <_fflush_r+0x10>
 800f9f2:	2500      	movs	r5, #0
 800f9f4:	4628      	mov	r0, r5
 800f9f6:	bd38      	pop	{r3, r4, r5, pc}
 800f9f8:	b118      	cbz	r0, 800fa02 <_fflush_r+0x1a>
 800f9fa:	6a03      	ldr	r3, [r0, #32]
 800f9fc:	b90b      	cbnz	r3, 800fa02 <_fflush_r+0x1a>
 800f9fe:	f000 f8a7 	bl	800fb50 <__sinit>
 800fa02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d0f3      	beq.n	800f9f2 <_fflush_r+0xa>
 800fa0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fa0c:	07d0      	lsls	r0, r2, #31
 800fa0e:	d404      	bmi.n	800fa1a <_fflush_r+0x32>
 800fa10:	0599      	lsls	r1, r3, #22
 800fa12:	d402      	bmi.n	800fa1a <_fflush_r+0x32>
 800fa14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fa16:	f000 fad6 	bl	800ffc6 <__retarget_lock_acquire_recursive>
 800fa1a:	4628      	mov	r0, r5
 800fa1c:	4621      	mov	r1, r4
 800fa1e:	f7ff ff5f 	bl	800f8e0 <__sflush_r>
 800fa22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fa24:	07da      	lsls	r2, r3, #31
 800fa26:	4605      	mov	r5, r0
 800fa28:	d4e4      	bmi.n	800f9f4 <_fflush_r+0xc>
 800fa2a:	89a3      	ldrh	r3, [r4, #12]
 800fa2c:	059b      	lsls	r3, r3, #22
 800fa2e:	d4e1      	bmi.n	800f9f4 <_fflush_r+0xc>
 800fa30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fa32:	f000 fac9 	bl	800ffc8 <__retarget_lock_release_recursive>
 800fa36:	e7dd      	b.n	800f9f4 <_fflush_r+0xc>

0800fa38 <std>:
 800fa38:	2300      	movs	r3, #0
 800fa3a:	b510      	push	{r4, lr}
 800fa3c:	4604      	mov	r4, r0
 800fa3e:	e9c0 3300 	strd	r3, r3, [r0]
 800fa42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fa46:	6083      	str	r3, [r0, #8]
 800fa48:	8181      	strh	r1, [r0, #12]
 800fa4a:	6643      	str	r3, [r0, #100]	@ 0x64
 800fa4c:	81c2      	strh	r2, [r0, #14]
 800fa4e:	6183      	str	r3, [r0, #24]
 800fa50:	4619      	mov	r1, r3
 800fa52:	2208      	movs	r2, #8
 800fa54:	305c      	adds	r0, #92	@ 0x5c
 800fa56:	f000 f9d7 	bl	800fe08 <memset>
 800fa5a:	4b0d      	ldr	r3, [pc, #52]	@ (800fa90 <std+0x58>)
 800fa5c:	6263      	str	r3, [r4, #36]	@ 0x24
 800fa5e:	4b0d      	ldr	r3, [pc, #52]	@ (800fa94 <std+0x5c>)
 800fa60:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fa62:	4b0d      	ldr	r3, [pc, #52]	@ (800fa98 <std+0x60>)
 800fa64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fa66:	4b0d      	ldr	r3, [pc, #52]	@ (800fa9c <std+0x64>)
 800fa68:	6323      	str	r3, [r4, #48]	@ 0x30
 800fa6a:	4b0d      	ldr	r3, [pc, #52]	@ (800faa0 <std+0x68>)
 800fa6c:	6224      	str	r4, [r4, #32]
 800fa6e:	429c      	cmp	r4, r3
 800fa70:	d006      	beq.n	800fa80 <std+0x48>
 800fa72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fa76:	4294      	cmp	r4, r2
 800fa78:	d002      	beq.n	800fa80 <std+0x48>
 800fa7a:	33d0      	adds	r3, #208	@ 0xd0
 800fa7c:	429c      	cmp	r4, r3
 800fa7e:	d105      	bne.n	800fa8c <std+0x54>
 800fa80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fa84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa88:	f000 ba9c 	b.w	800ffc4 <__retarget_lock_init_recursive>
 800fa8c:	bd10      	pop	{r4, pc}
 800fa8e:	bf00      	nop
 800fa90:	0800fc25 	.word	0x0800fc25
 800fa94:	0800fc47 	.word	0x0800fc47
 800fa98:	0800fc7f 	.word	0x0800fc7f
 800fa9c:	0800fca3 	.word	0x0800fca3
 800faa0:	20005284 	.word	0x20005284

0800faa4 <stdio_exit_handler>:
 800faa4:	4a02      	ldr	r2, [pc, #8]	@ (800fab0 <stdio_exit_handler+0xc>)
 800faa6:	4903      	ldr	r1, [pc, #12]	@ (800fab4 <stdio_exit_handler+0x10>)
 800faa8:	4803      	ldr	r0, [pc, #12]	@ (800fab8 <stdio_exit_handler+0x14>)
 800faaa:	f000 b869 	b.w	800fb80 <_fwalk_sglue>
 800faae:	bf00      	nop
 800fab0:	20000028 	.word	0x20000028
 800fab4:	0800f9e9 	.word	0x0800f9e9
 800fab8:	20000038 	.word	0x20000038

0800fabc <cleanup_stdio>:
 800fabc:	6841      	ldr	r1, [r0, #4]
 800fabe:	4b0c      	ldr	r3, [pc, #48]	@ (800faf0 <cleanup_stdio+0x34>)
 800fac0:	4299      	cmp	r1, r3
 800fac2:	b510      	push	{r4, lr}
 800fac4:	4604      	mov	r4, r0
 800fac6:	d001      	beq.n	800facc <cleanup_stdio+0x10>
 800fac8:	f7ff ff8e 	bl	800f9e8 <_fflush_r>
 800facc:	68a1      	ldr	r1, [r4, #8]
 800face:	4b09      	ldr	r3, [pc, #36]	@ (800faf4 <cleanup_stdio+0x38>)
 800fad0:	4299      	cmp	r1, r3
 800fad2:	d002      	beq.n	800fada <cleanup_stdio+0x1e>
 800fad4:	4620      	mov	r0, r4
 800fad6:	f7ff ff87 	bl	800f9e8 <_fflush_r>
 800fada:	68e1      	ldr	r1, [r4, #12]
 800fadc:	4b06      	ldr	r3, [pc, #24]	@ (800faf8 <cleanup_stdio+0x3c>)
 800fade:	4299      	cmp	r1, r3
 800fae0:	d004      	beq.n	800faec <cleanup_stdio+0x30>
 800fae2:	4620      	mov	r0, r4
 800fae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fae8:	f7ff bf7e 	b.w	800f9e8 <_fflush_r>
 800faec:	bd10      	pop	{r4, pc}
 800faee:	bf00      	nop
 800faf0:	20005284 	.word	0x20005284
 800faf4:	200052ec 	.word	0x200052ec
 800faf8:	20005354 	.word	0x20005354

0800fafc <global_stdio_init.part.0>:
 800fafc:	b510      	push	{r4, lr}
 800fafe:	4b0b      	ldr	r3, [pc, #44]	@ (800fb2c <global_stdio_init.part.0+0x30>)
 800fb00:	4c0b      	ldr	r4, [pc, #44]	@ (800fb30 <global_stdio_init.part.0+0x34>)
 800fb02:	4a0c      	ldr	r2, [pc, #48]	@ (800fb34 <global_stdio_init.part.0+0x38>)
 800fb04:	601a      	str	r2, [r3, #0]
 800fb06:	4620      	mov	r0, r4
 800fb08:	2200      	movs	r2, #0
 800fb0a:	2104      	movs	r1, #4
 800fb0c:	f7ff ff94 	bl	800fa38 <std>
 800fb10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fb14:	2201      	movs	r2, #1
 800fb16:	2109      	movs	r1, #9
 800fb18:	f7ff ff8e 	bl	800fa38 <std>
 800fb1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fb20:	2202      	movs	r2, #2
 800fb22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb26:	2112      	movs	r1, #18
 800fb28:	f7ff bf86 	b.w	800fa38 <std>
 800fb2c:	200053bc 	.word	0x200053bc
 800fb30:	20005284 	.word	0x20005284
 800fb34:	0800faa5 	.word	0x0800faa5

0800fb38 <__sfp_lock_acquire>:
 800fb38:	4801      	ldr	r0, [pc, #4]	@ (800fb40 <__sfp_lock_acquire+0x8>)
 800fb3a:	f000 ba44 	b.w	800ffc6 <__retarget_lock_acquire_recursive>
 800fb3e:	bf00      	nop
 800fb40:	200053c5 	.word	0x200053c5

0800fb44 <__sfp_lock_release>:
 800fb44:	4801      	ldr	r0, [pc, #4]	@ (800fb4c <__sfp_lock_release+0x8>)
 800fb46:	f000 ba3f 	b.w	800ffc8 <__retarget_lock_release_recursive>
 800fb4a:	bf00      	nop
 800fb4c:	200053c5 	.word	0x200053c5

0800fb50 <__sinit>:
 800fb50:	b510      	push	{r4, lr}
 800fb52:	4604      	mov	r4, r0
 800fb54:	f7ff fff0 	bl	800fb38 <__sfp_lock_acquire>
 800fb58:	6a23      	ldr	r3, [r4, #32]
 800fb5a:	b11b      	cbz	r3, 800fb64 <__sinit+0x14>
 800fb5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb60:	f7ff bff0 	b.w	800fb44 <__sfp_lock_release>
 800fb64:	4b04      	ldr	r3, [pc, #16]	@ (800fb78 <__sinit+0x28>)
 800fb66:	6223      	str	r3, [r4, #32]
 800fb68:	4b04      	ldr	r3, [pc, #16]	@ (800fb7c <__sinit+0x2c>)
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d1f5      	bne.n	800fb5c <__sinit+0xc>
 800fb70:	f7ff ffc4 	bl	800fafc <global_stdio_init.part.0>
 800fb74:	e7f2      	b.n	800fb5c <__sinit+0xc>
 800fb76:	bf00      	nop
 800fb78:	0800fabd 	.word	0x0800fabd
 800fb7c:	200053bc 	.word	0x200053bc

0800fb80 <_fwalk_sglue>:
 800fb80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb84:	4607      	mov	r7, r0
 800fb86:	4688      	mov	r8, r1
 800fb88:	4614      	mov	r4, r2
 800fb8a:	2600      	movs	r6, #0
 800fb8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fb90:	f1b9 0901 	subs.w	r9, r9, #1
 800fb94:	d505      	bpl.n	800fba2 <_fwalk_sglue+0x22>
 800fb96:	6824      	ldr	r4, [r4, #0]
 800fb98:	2c00      	cmp	r4, #0
 800fb9a:	d1f7      	bne.n	800fb8c <_fwalk_sglue+0xc>
 800fb9c:	4630      	mov	r0, r6
 800fb9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fba2:	89ab      	ldrh	r3, [r5, #12]
 800fba4:	2b01      	cmp	r3, #1
 800fba6:	d907      	bls.n	800fbb8 <_fwalk_sglue+0x38>
 800fba8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fbac:	3301      	adds	r3, #1
 800fbae:	d003      	beq.n	800fbb8 <_fwalk_sglue+0x38>
 800fbb0:	4629      	mov	r1, r5
 800fbb2:	4638      	mov	r0, r7
 800fbb4:	47c0      	blx	r8
 800fbb6:	4306      	orrs	r6, r0
 800fbb8:	3568      	adds	r5, #104	@ 0x68
 800fbba:	e7e9      	b.n	800fb90 <_fwalk_sglue+0x10>

0800fbbc <sniprintf>:
 800fbbc:	b40c      	push	{r2, r3}
 800fbbe:	b530      	push	{r4, r5, lr}
 800fbc0:	4b17      	ldr	r3, [pc, #92]	@ (800fc20 <sniprintf+0x64>)
 800fbc2:	1e0c      	subs	r4, r1, #0
 800fbc4:	681d      	ldr	r5, [r3, #0]
 800fbc6:	b09d      	sub	sp, #116	@ 0x74
 800fbc8:	da08      	bge.n	800fbdc <sniprintf+0x20>
 800fbca:	238b      	movs	r3, #139	@ 0x8b
 800fbcc:	602b      	str	r3, [r5, #0]
 800fbce:	f04f 30ff 	mov.w	r0, #4294967295
 800fbd2:	b01d      	add	sp, #116	@ 0x74
 800fbd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fbd8:	b002      	add	sp, #8
 800fbda:	4770      	bx	lr
 800fbdc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fbe0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fbe4:	bf14      	ite	ne
 800fbe6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fbea:	4623      	moveq	r3, r4
 800fbec:	9304      	str	r3, [sp, #16]
 800fbee:	9307      	str	r3, [sp, #28]
 800fbf0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fbf4:	9002      	str	r0, [sp, #8]
 800fbf6:	9006      	str	r0, [sp, #24]
 800fbf8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fbfc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800fbfe:	ab21      	add	r3, sp, #132	@ 0x84
 800fc00:	a902      	add	r1, sp, #8
 800fc02:	4628      	mov	r0, r5
 800fc04:	9301      	str	r3, [sp, #4]
 800fc06:	f000 fab3 	bl	8010170 <_svfiprintf_r>
 800fc0a:	1c43      	adds	r3, r0, #1
 800fc0c:	bfbc      	itt	lt
 800fc0e:	238b      	movlt	r3, #139	@ 0x8b
 800fc10:	602b      	strlt	r3, [r5, #0]
 800fc12:	2c00      	cmp	r4, #0
 800fc14:	d0dd      	beq.n	800fbd2 <sniprintf+0x16>
 800fc16:	9b02      	ldr	r3, [sp, #8]
 800fc18:	2200      	movs	r2, #0
 800fc1a:	701a      	strb	r2, [r3, #0]
 800fc1c:	e7d9      	b.n	800fbd2 <sniprintf+0x16>
 800fc1e:	bf00      	nop
 800fc20:	20000034 	.word	0x20000034

0800fc24 <__sread>:
 800fc24:	b510      	push	{r4, lr}
 800fc26:	460c      	mov	r4, r1
 800fc28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc2c:	f000 f96c 	bl	800ff08 <_read_r>
 800fc30:	2800      	cmp	r0, #0
 800fc32:	bfab      	itete	ge
 800fc34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fc36:	89a3      	ldrhlt	r3, [r4, #12]
 800fc38:	181b      	addge	r3, r3, r0
 800fc3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fc3e:	bfac      	ite	ge
 800fc40:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fc42:	81a3      	strhlt	r3, [r4, #12]
 800fc44:	bd10      	pop	{r4, pc}

0800fc46 <__swrite>:
 800fc46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc4a:	461f      	mov	r7, r3
 800fc4c:	898b      	ldrh	r3, [r1, #12]
 800fc4e:	05db      	lsls	r3, r3, #23
 800fc50:	4605      	mov	r5, r0
 800fc52:	460c      	mov	r4, r1
 800fc54:	4616      	mov	r6, r2
 800fc56:	d505      	bpl.n	800fc64 <__swrite+0x1e>
 800fc58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc5c:	2302      	movs	r3, #2
 800fc5e:	2200      	movs	r2, #0
 800fc60:	f000 f940 	bl	800fee4 <_lseek_r>
 800fc64:	89a3      	ldrh	r3, [r4, #12]
 800fc66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fc6e:	81a3      	strh	r3, [r4, #12]
 800fc70:	4632      	mov	r2, r6
 800fc72:	463b      	mov	r3, r7
 800fc74:	4628      	mov	r0, r5
 800fc76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc7a:	f000 b967 	b.w	800ff4c <_write_r>

0800fc7e <__sseek>:
 800fc7e:	b510      	push	{r4, lr}
 800fc80:	460c      	mov	r4, r1
 800fc82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc86:	f000 f92d 	bl	800fee4 <_lseek_r>
 800fc8a:	1c43      	adds	r3, r0, #1
 800fc8c:	89a3      	ldrh	r3, [r4, #12]
 800fc8e:	bf15      	itete	ne
 800fc90:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fc92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fc96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fc9a:	81a3      	strheq	r3, [r4, #12]
 800fc9c:	bf18      	it	ne
 800fc9e:	81a3      	strhne	r3, [r4, #12]
 800fca0:	bd10      	pop	{r4, pc}

0800fca2 <__sclose>:
 800fca2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fca6:	f000 b8b7 	b.w	800fe18 <_close_r>

0800fcaa <__swbuf_r>:
 800fcaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcac:	460e      	mov	r6, r1
 800fcae:	4614      	mov	r4, r2
 800fcb0:	4605      	mov	r5, r0
 800fcb2:	b118      	cbz	r0, 800fcbc <__swbuf_r+0x12>
 800fcb4:	6a03      	ldr	r3, [r0, #32]
 800fcb6:	b90b      	cbnz	r3, 800fcbc <__swbuf_r+0x12>
 800fcb8:	f7ff ff4a 	bl	800fb50 <__sinit>
 800fcbc:	69a3      	ldr	r3, [r4, #24]
 800fcbe:	60a3      	str	r3, [r4, #8]
 800fcc0:	89a3      	ldrh	r3, [r4, #12]
 800fcc2:	071a      	lsls	r2, r3, #28
 800fcc4:	d501      	bpl.n	800fcca <__swbuf_r+0x20>
 800fcc6:	6923      	ldr	r3, [r4, #16]
 800fcc8:	b943      	cbnz	r3, 800fcdc <__swbuf_r+0x32>
 800fcca:	4621      	mov	r1, r4
 800fccc:	4628      	mov	r0, r5
 800fcce:	f000 f82b 	bl	800fd28 <__swsetup_r>
 800fcd2:	b118      	cbz	r0, 800fcdc <__swbuf_r+0x32>
 800fcd4:	f04f 37ff 	mov.w	r7, #4294967295
 800fcd8:	4638      	mov	r0, r7
 800fcda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fcdc:	6823      	ldr	r3, [r4, #0]
 800fcde:	6922      	ldr	r2, [r4, #16]
 800fce0:	1a98      	subs	r0, r3, r2
 800fce2:	6963      	ldr	r3, [r4, #20]
 800fce4:	b2f6      	uxtb	r6, r6
 800fce6:	4283      	cmp	r3, r0
 800fce8:	4637      	mov	r7, r6
 800fcea:	dc05      	bgt.n	800fcf8 <__swbuf_r+0x4e>
 800fcec:	4621      	mov	r1, r4
 800fcee:	4628      	mov	r0, r5
 800fcf0:	f7ff fe7a 	bl	800f9e8 <_fflush_r>
 800fcf4:	2800      	cmp	r0, #0
 800fcf6:	d1ed      	bne.n	800fcd4 <__swbuf_r+0x2a>
 800fcf8:	68a3      	ldr	r3, [r4, #8]
 800fcfa:	3b01      	subs	r3, #1
 800fcfc:	60a3      	str	r3, [r4, #8]
 800fcfe:	6823      	ldr	r3, [r4, #0]
 800fd00:	1c5a      	adds	r2, r3, #1
 800fd02:	6022      	str	r2, [r4, #0]
 800fd04:	701e      	strb	r6, [r3, #0]
 800fd06:	6962      	ldr	r2, [r4, #20]
 800fd08:	1c43      	adds	r3, r0, #1
 800fd0a:	429a      	cmp	r2, r3
 800fd0c:	d004      	beq.n	800fd18 <__swbuf_r+0x6e>
 800fd0e:	89a3      	ldrh	r3, [r4, #12]
 800fd10:	07db      	lsls	r3, r3, #31
 800fd12:	d5e1      	bpl.n	800fcd8 <__swbuf_r+0x2e>
 800fd14:	2e0a      	cmp	r6, #10
 800fd16:	d1df      	bne.n	800fcd8 <__swbuf_r+0x2e>
 800fd18:	4621      	mov	r1, r4
 800fd1a:	4628      	mov	r0, r5
 800fd1c:	f7ff fe64 	bl	800f9e8 <_fflush_r>
 800fd20:	2800      	cmp	r0, #0
 800fd22:	d0d9      	beq.n	800fcd8 <__swbuf_r+0x2e>
 800fd24:	e7d6      	b.n	800fcd4 <__swbuf_r+0x2a>
	...

0800fd28 <__swsetup_r>:
 800fd28:	b538      	push	{r3, r4, r5, lr}
 800fd2a:	4b29      	ldr	r3, [pc, #164]	@ (800fdd0 <__swsetup_r+0xa8>)
 800fd2c:	4605      	mov	r5, r0
 800fd2e:	6818      	ldr	r0, [r3, #0]
 800fd30:	460c      	mov	r4, r1
 800fd32:	b118      	cbz	r0, 800fd3c <__swsetup_r+0x14>
 800fd34:	6a03      	ldr	r3, [r0, #32]
 800fd36:	b90b      	cbnz	r3, 800fd3c <__swsetup_r+0x14>
 800fd38:	f7ff ff0a 	bl	800fb50 <__sinit>
 800fd3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd40:	0719      	lsls	r1, r3, #28
 800fd42:	d422      	bmi.n	800fd8a <__swsetup_r+0x62>
 800fd44:	06da      	lsls	r2, r3, #27
 800fd46:	d407      	bmi.n	800fd58 <__swsetup_r+0x30>
 800fd48:	2209      	movs	r2, #9
 800fd4a:	602a      	str	r2, [r5, #0]
 800fd4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fd50:	81a3      	strh	r3, [r4, #12]
 800fd52:	f04f 30ff 	mov.w	r0, #4294967295
 800fd56:	e033      	b.n	800fdc0 <__swsetup_r+0x98>
 800fd58:	0758      	lsls	r0, r3, #29
 800fd5a:	d512      	bpl.n	800fd82 <__swsetup_r+0x5a>
 800fd5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fd5e:	b141      	cbz	r1, 800fd72 <__swsetup_r+0x4a>
 800fd60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fd64:	4299      	cmp	r1, r3
 800fd66:	d002      	beq.n	800fd6e <__swsetup_r+0x46>
 800fd68:	4628      	mov	r0, r5
 800fd6a:	f000 f95b 	bl	8010024 <_free_r>
 800fd6e:	2300      	movs	r3, #0
 800fd70:	6363      	str	r3, [r4, #52]	@ 0x34
 800fd72:	89a3      	ldrh	r3, [r4, #12]
 800fd74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fd78:	81a3      	strh	r3, [r4, #12]
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	6063      	str	r3, [r4, #4]
 800fd7e:	6923      	ldr	r3, [r4, #16]
 800fd80:	6023      	str	r3, [r4, #0]
 800fd82:	89a3      	ldrh	r3, [r4, #12]
 800fd84:	f043 0308 	orr.w	r3, r3, #8
 800fd88:	81a3      	strh	r3, [r4, #12]
 800fd8a:	6923      	ldr	r3, [r4, #16]
 800fd8c:	b94b      	cbnz	r3, 800fda2 <__swsetup_r+0x7a>
 800fd8e:	89a3      	ldrh	r3, [r4, #12]
 800fd90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fd94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fd98:	d003      	beq.n	800fda2 <__swsetup_r+0x7a>
 800fd9a:	4621      	mov	r1, r4
 800fd9c:	4628      	mov	r0, r5
 800fd9e:	f000 fdeb 	bl	8010978 <__smakebuf_r>
 800fda2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fda6:	f013 0201 	ands.w	r2, r3, #1
 800fdaa:	d00a      	beq.n	800fdc2 <__swsetup_r+0x9a>
 800fdac:	2200      	movs	r2, #0
 800fdae:	60a2      	str	r2, [r4, #8]
 800fdb0:	6962      	ldr	r2, [r4, #20]
 800fdb2:	4252      	negs	r2, r2
 800fdb4:	61a2      	str	r2, [r4, #24]
 800fdb6:	6922      	ldr	r2, [r4, #16]
 800fdb8:	b942      	cbnz	r2, 800fdcc <__swsetup_r+0xa4>
 800fdba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fdbe:	d1c5      	bne.n	800fd4c <__swsetup_r+0x24>
 800fdc0:	bd38      	pop	{r3, r4, r5, pc}
 800fdc2:	0799      	lsls	r1, r3, #30
 800fdc4:	bf58      	it	pl
 800fdc6:	6962      	ldrpl	r2, [r4, #20]
 800fdc8:	60a2      	str	r2, [r4, #8]
 800fdca:	e7f4      	b.n	800fdb6 <__swsetup_r+0x8e>
 800fdcc:	2000      	movs	r0, #0
 800fdce:	e7f7      	b.n	800fdc0 <__swsetup_r+0x98>
 800fdd0:	20000034 	.word	0x20000034

0800fdd4 <memmove>:
 800fdd4:	4288      	cmp	r0, r1
 800fdd6:	b510      	push	{r4, lr}
 800fdd8:	eb01 0402 	add.w	r4, r1, r2
 800fddc:	d902      	bls.n	800fde4 <memmove+0x10>
 800fdde:	4284      	cmp	r4, r0
 800fde0:	4623      	mov	r3, r4
 800fde2:	d807      	bhi.n	800fdf4 <memmove+0x20>
 800fde4:	1e43      	subs	r3, r0, #1
 800fde6:	42a1      	cmp	r1, r4
 800fde8:	d008      	beq.n	800fdfc <memmove+0x28>
 800fdea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fdee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fdf2:	e7f8      	b.n	800fde6 <memmove+0x12>
 800fdf4:	4402      	add	r2, r0
 800fdf6:	4601      	mov	r1, r0
 800fdf8:	428a      	cmp	r2, r1
 800fdfa:	d100      	bne.n	800fdfe <memmove+0x2a>
 800fdfc:	bd10      	pop	{r4, pc}
 800fdfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fe02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fe06:	e7f7      	b.n	800fdf8 <memmove+0x24>

0800fe08 <memset>:
 800fe08:	4402      	add	r2, r0
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	4293      	cmp	r3, r2
 800fe0e:	d100      	bne.n	800fe12 <memset+0xa>
 800fe10:	4770      	bx	lr
 800fe12:	f803 1b01 	strb.w	r1, [r3], #1
 800fe16:	e7f9      	b.n	800fe0c <memset+0x4>

0800fe18 <_close_r>:
 800fe18:	b538      	push	{r3, r4, r5, lr}
 800fe1a:	4d06      	ldr	r5, [pc, #24]	@ (800fe34 <_close_r+0x1c>)
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	4604      	mov	r4, r0
 800fe20:	4608      	mov	r0, r1
 800fe22:	602b      	str	r3, [r5, #0]
 800fe24:	f7f1 fb86 	bl	8001534 <_close>
 800fe28:	1c43      	adds	r3, r0, #1
 800fe2a:	d102      	bne.n	800fe32 <_close_r+0x1a>
 800fe2c:	682b      	ldr	r3, [r5, #0]
 800fe2e:	b103      	cbz	r3, 800fe32 <_close_r+0x1a>
 800fe30:	6023      	str	r3, [r4, #0]
 800fe32:	bd38      	pop	{r3, r4, r5, pc}
 800fe34:	200053c0 	.word	0x200053c0

0800fe38 <_reclaim_reent>:
 800fe38:	4b29      	ldr	r3, [pc, #164]	@ (800fee0 <_reclaim_reent+0xa8>)
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	4283      	cmp	r3, r0
 800fe3e:	b570      	push	{r4, r5, r6, lr}
 800fe40:	4604      	mov	r4, r0
 800fe42:	d04b      	beq.n	800fedc <_reclaim_reent+0xa4>
 800fe44:	69c3      	ldr	r3, [r0, #28]
 800fe46:	b1ab      	cbz	r3, 800fe74 <_reclaim_reent+0x3c>
 800fe48:	68db      	ldr	r3, [r3, #12]
 800fe4a:	b16b      	cbz	r3, 800fe68 <_reclaim_reent+0x30>
 800fe4c:	2500      	movs	r5, #0
 800fe4e:	69e3      	ldr	r3, [r4, #28]
 800fe50:	68db      	ldr	r3, [r3, #12]
 800fe52:	5959      	ldr	r1, [r3, r5]
 800fe54:	2900      	cmp	r1, #0
 800fe56:	d13b      	bne.n	800fed0 <_reclaim_reent+0x98>
 800fe58:	3504      	adds	r5, #4
 800fe5a:	2d80      	cmp	r5, #128	@ 0x80
 800fe5c:	d1f7      	bne.n	800fe4e <_reclaim_reent+0x16>
 800fe5e:	69e3      	ldr	r3, [r4, #28]
 800fe60:	4620      	mov	r0, r4
 800fe62:	68d9      	ldr	r1, [r3, #12]
 800fe64:	f000 f8de 	bl	8010024 <_free_r>
 800fe68:	69e3      	ldr	r3, [r4, #28]
 800fe6a:	6819      	ldr	r1, [r3, #0]
 800fe6c:	b111      	cbz	r1, 800fe74 <_reclaim_reent+0x3c>
 800fe6e:	4620      	mov	r0, r4
 800fe70:	f000 f8d8 	bl	8010024 <_free_r>
 800fe74:	6961      	ldr	r1, [r4, #20]
 800fe76:	b111      	cbz	r1, 800fe7e <_reclaim_reent+0x46>
 800fe78:	4620      	mov	r0, r4
 800fe7a:	f000 f8d3 	bl	8010024 <_free_r>
 800fe7e:	69e1      	ldr	r1, [r4, #28]
 800fe80:	b111      	cbz	r1, 800fe88 <_reclaim_reent+0x50>
 800fe82:	4620      	mov	r0, r4
 800fe84:	f000 f8ce 	bl	8010024 <_free_r>
 800fe88:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800fe8a:	b111      	cbz	r1, 800fe92 <_reclaim_reent+0x5a>
 800fe8c:	4620      	mov	r0, r4
 800fe8e:	f000 f8c9 	bl	8010024 <_free_r>
 800fe92:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fe94:	b111      	cbz	r1, 800fe9c <_reclaim_reent+0x64>
 800fe96:	4620      	mov	r0, r4
 800fe98:	f000 f8c4 	bl	8010024 <_free_r>
 800fe9c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800fe9e:	b111      	cbz	r1, 800fea6 <_reclaim_reent+0x6e>
 800fea0:	4620      	mov	r0, r4
 800fea2:	f000 f8bf 	bl	8010024 <_free_r>
 800fea6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800fea8:	b111      	cbz	r1, 800feb0 <_reclaim_reent+0x78>
 800feaa:	4620      	mov	r0, r4
 800feac:	f000 f8ba 	bl	8010024 <_free_r>
 800feb0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800feb2:	b111      	cbz	r1, 800feba <_reclaim_reent+0x82>
 800feb4:	4620      	mov	r0, r4
 800feb6:	f000 f8b5 	bl	8010024 <_free_r>
 800feba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800febc:	b111      	cbz	r1, 800fec4 <_reclaim_reent+0x8c>
 800febe:	4620      	mov	r0, r4
 800fec0:	f000 f8b0 	bl	8010024 <_free_r>
 800fec4:	6a23      	ldr	r3, [r4, #32]
 800fec6:	b14b      	cbz	r3, 800fedc <_reclaim_reent+0xa4>
 800fec8:	4620      	mov	r0, r4
 800feca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fece:	4718      	bx	r3
 800fed0:	680e      	ldr	r6, [r1, #0]
 800fed2:	4620      	mov	r0, r4
 800fed4:	f000 f8a6 	bl	8010024 <_free_r>
 800fed8:	4631      	mov	r1, r6
 800feda:	e7bb      	b.n	800fe54 <_reclaim_reent+0x1c>
 800fedc:	bd70      	pop	{r4, r5, r6, pc}
 800fede:	bf00      	nop
 800fee0:	20000034 	.word	0x20000034

0800fee4 <_lseek_r>:
 800fee4:	b538      	push	{r3, r4, r5, lr}
 800fee6:	4d07      	ldr	r5, [pc, #28]	@ (800ff04 <_lseek_r+0x20>)
 800fee8:	4604      	mov	r4, r0
 800feea:	4608      	mov	r0, r1
 800feec:	4611      	mov	r1, r2
 800feee:	2200      	movs	r2, #0
 800fef0:	602a      	str	r2, [r5, #0]
 800fef2:	461a      	mov	r2, r3
 800fef4:	f7f1 fb45 	bl	8001582 <_lseek>
 800fef8:	1c43      	adds	r3, r0, #1
 800fefa:	d102      	bne.n	800ff02 <_lseek_r+0x1e>
 800fefc:	682b      	ldr	r3, [r5, #0]
 800fefe:	b103      	cbz	r3, 800ff02 <_lseek_r+0x1e>
 800ff00:	6023      	str	r3, [r4, #0]
 800ff02:	bd38      	pop	{r3, r4, r5, pc}
 800ff04:	200053c0 	.word	0x200053c0

0800ff08 <_read_r>:
 800ff08:	b538      	push	{r3, r4, r5, lr}
 800ff0a:	4d07      	ldr	r5, [pc, #28]	@ (800ff28 <_read_r+0x20>)
 800ff0c:	4604      	mov	r4, r0
 800ff0e:	4608      	mov	r0, r1
 800ff10:	4611      	mov	r1, r2
 800ff12:	2200      	movs	r2, #0
 800ff14:	602a      	str	r2, [r5, #0]
 800ff16:	461a      	mov	r2, r3
 800ff18:	f7f1 fad3 	bl	80014c2 <_read>
 800ff1c:	1c43      	adds	r3, r0, #1
 800ff1e:	d102      	bne.n	800ff26 <_read_r+0x1e>
 800ff20:	682b      	ldr	r3, [r5, #0]
 800ff22:	b103      	cbz	r3, 800ff26 <_read_r+0x1e>
 800ff24:	6023      	str	r3, [r4, #0]
 800ff26:	bd38      	pop	{r3, r4, r5, pc}
 800ff28:	200053c0 	.word	0x200053c0

0800ff2c <_sbrk_r>:
 800ff2c:	b538      	push	{r3, r4, r5, lr}
 800ff2e:	4d06      	ldr	r5, [pc, #24]	@ (800ff48 <_sbrk_r+0x1c>)
 800ff30:	2300      	movs	r3, #0
 800ff32:	4604      	mov	r4, r0
 800ff34:	4608      	mov	r0, r1
 800ff36:	602b      	str	r3, [r5, #0]
 800ff38:	f7f1 fb30 	bl	800159c <_sbrk>
 800ff3c:	1c43      	adds	r3, r0, #1
 800ff3e:	d102      	bne.n	800ff46 <_sbrk_r+0x1a>
 800ff40:	682b      	ldr	r3, [r5, #0]
 800ff42:	b103      	cbz	r3, 800ff46 <_sbrk_r+0x1a>
 800ff44:	6023      	str	r3, [r4, #0]
 800ff46:	bd38      	pop	{r3, r4, r5, pc}
 800ff48:	200053c0 	.word	0x200053c0

0800ff4c <_write_r>:
 800ff4c:	b538      	push	{r3, r4, r5, lr}
 800ff4e:	4d07      	ldr	r5, [pc, #28]	@ (800ff6c <_write_r+0x20>)
 800ff50:	4604      	mov	r4, r0
 800ff52:	4608      	mov	r0, r1
 800ff54:	4611      	mov	r1, r2
 800ff56:	2200      	movs	r2, #0
 800ff58:	602a      	str	r2, [r5, #0]
 800ff5a:	461a      	mov	r2, r3
 800ff5c:	f7f1 face 	bl	80014fc <_write>
 800ff60:	1c43      	adds	r3, r0, #1
 800ff62:	d102      	bne.n	800ff6a <_write_r+0x1e>
 800ff64:	682b      	ldr	r3, [r5, #0]
 800ff66:	b103      	cbz	r3, 800ff6a <_write_r+0x1e>
 800ff68:	6023      	str	r3, [r4, #0]
 800ff6a:	bd38      	pop	{r3, r4, r5, pc}
 800ff6c:	200053c0 	.word	0x200053c0

0800ff70 <__errno>:
 800ff70:	4b01      	ldr	r3, [pc, #4]	@ (800ff78 <__errno+0x8>)
 800ff72:	6818      	ldr	r0, [r3, #0]
 800ff74:	4770      	bx	lr
 800ff76:	bf00      	nop
 800ff78:	20000034 	.word	0x20000034

0800ff7c <__libc_init_array>:
 800ff7c:	b570      	push	{r4, r5, r6, lr}
 800ff7e:	4d0d      	ldr	r5, [pc, #52]	@ (800ffb4 <__libc_init_array+0x38>)
 800ff80:	4c0d      	ldr	r4, [pc, #52]	@ (800ffb8 <__libc_init_array+0x3c>)
 800ff82:	1b64      	subs	r4, r4, r5
 800ff84:	10a4      	asrs	r4, r4, #2
 800ff86:	2600      	movs	r6, #0
 800ff88:	42a6      	cmp	r6, r4
 800ff8a:	d109      	bne.n	800ffa0 <__libc_init_array+0x24>
 800ff8c:	4d0b      	ldr	r5, [pc, #44]	@ (800ffbc <__libc_init_array+0x40>)
 800ff8e:	4c0c      	ldr	r4, [pc, #48]	@ (800ffc0 <__libc_init_array+0x44>)
 800ff90:	f000 fdd2 	bl	8010b38 <_init>
 800ff94:	1b64      	subs	r4, r4, r5
 800ff96:	10a4      	asrs	r4, r4, #2
 800ff98:	2600      	movs	r6, #0
 800ff9a:	42a6      	cmp	r6, r4
 800ff9c:	d105      	bne.n	800ffaa <__libc_init_array+0x2e>
 800ff9e:	bd70      	pop	{r4, r5, r6, pc}
 800ffa0:	f855 3b04 	ldr.w	r3, [r5], #4
 800ffa4:	4798      	blx	r3
 800ffa6:	3601      	adds	r6, #1
 800ffa8:	e7ee      	b.n	800ff88 <__libc_init_array+0xc>
 800ffaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800ffae:	4798      	blx	r3
 800ffb0:	3601      	adds	r6, #1
 800ffb2:	e7f2      	b.n	800ff9a <__libc_init_array+0x1e>
 800ffb4:	08010eb4 	.word	0x08010eb4
 800ffb8:	08010eb4 	.word	0x08010eb4
 800ffbc:	08010eb4 	.word	0x08010eb4
 800ffc0:	08010eb8 	.word	0x08010eb8

0800ffc4 <__retarget_lock_init_recursive>:
 800ffc4:	4770      	bx	lr

0800ffc6 <__retarget_lock_acquire_recursive>:
 800ffc6:	4770      	bx	lr

0800ffc8 <__retarget_lock_release_recursive>:
 800ffc8:	4770      	bx	lr

0800ffca <memcpy>:
 800ffca:	440a      	add	r2, r1
 800ffcc:	4291      	cmp	r1, r2
 800ffce:	f100 33ff 	add.w	r3, r0, #4294967295
 800ffd2:	d100      	bne.n	800ffd6 <memcpy+0xc>
 800ffd4:	4770      	bx	lr
 800ffd6:	b510      	push	{r4, lr}
 800ffd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ffdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ffe0:	4291      	cmp	r1, r2
 800ffe2:	d1f9      	bne.n	800ffd8 <memcpy+0xe>
 800ffe4:	bd10      	pop	{r4, pc}
	...

0800ffe8 <__assert_func>:
 800ffe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ffea:	4614      	mov	r4, r2
 800ffec:	461a      	mov	r2, r3
 800ffee:	4b09      	ldr	r3, [pc, #36]	@ (8010014 <__assert_func+0x2c>)
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	4605      	mov	r5, r0
 800fff4:	68d8      	ldr	r0, [r3, #12]
 800fff6:	b954      	cbnz	r4, 801000e <__assert_func+0x26>
 800fff8:	4b07      	ldr	r3, [pc, #28]	@ (8010018 <__assert_func+0x30>)
 800fffa:	461c      	mov	r4, r3
 800fffc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010000:	9100      	str	r1, [sp, #0]
 8010002:	462b      	mov	r3, r5
 8010004:	4905      	ldr	r1, [pc, #20]	@ (801001c <__assert_func+0x34>)
 8010006:	f000 fc7f 	bl	8010908 <fiprintf>
 801000a:	f000 fd13 	bl	8010a34 <abort>
 801000e:	4b04      	ldr	r3, [pc, #16]	@ (8010020 <__assert_func+0x38>)
 8010010:	e7f4      	b.n	800fffc <__assert_func+0x14>
 8010012:	bf00      	nop
 8010014:	20000034 	.word	0x20000034
 8010018:	08010e76 	.word	0x08010e76
 801001c:	08010e48 	.word	0x08010e48
 8010020:	08010e3b 	.word	0x08010e3b

08010024 <_free_r>:
 8010024:	b538      	push	{r3, r4, r5, lr}
 8010026:	4605      	mov	r5, r0
 8010028:	2900      	cmp	r1, #0
 801002a:	d041      	beq.n	80100b0 <_free_r+0x8c>
 801002c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010030:	1f0c      	subs	r4, r1, #4
 8010032:	2b00      	cmp	r3, #0
 8010034:	bfb8      	it	lt
 8010036:	18e4      	addlt	r4, r4, r3
 8010038:	f7ff fc08 	bl	800f84c <__malloc_lock>
 801003c:	4a1d      	ldr	r2, [pc, #116]	@ (80100b4 <_free_r+0x90>)
 801003e:	6813      	ldr	r3, [r2, #0]
 8010040:	b933      	cbnz	r3, 8010050 <_free_r+0x2c>
 8010042:	6063      	str	r3, [r4, #4]
 8010044:	6014      	str	r4, [r2, #0]
 8010046:	4628      	mov	r0, r5
 8010048:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801004c:	f7ff bc04 	b.w	800f858 <__malloc_unlock>
 8010050:	42a3      	cmp	r3, r4
 8010052:	d908      	bls.n	8010066 <_free_r+0x42>
 8010054:	6820      	ldr	r0, [r4, #0]
 8010056:	1821      	adds	r1, r4, r0
 8010058:	428b      	cmp	r3, r1
 801005a:	bf01      	itttt	eq
 801005c:	6819      	ldreq	r1, [r3, #0]
 801005e:	685b      	ldreq	r3, [r3, #4]
 8010060:	1809      	addeq	r1, r1, r0
 8010062:	6021      	streq	r1, [r4, #0]
 8010064:	e7ed      	b.n	8010042 <_free_r+0x1e>
 8010066:	461a      	mov	r2, r3
 8010068:	685b      	ldr	r3, [r3, #4]
 801006a:	b10b      	cbz	r3, 8010070 <_free_r+0x4c>
 801006c:	42a3      	cmp	r3, r4
 801006e:	d9fa      	bls.n	8010066 <_free_r+0x42>
 8010070:	6811      	ldr	r1, [r2, #0]
 8010072:	1850      	adds	r0, r2, r1
 8010074:	42a0      	cmp	r0, r4
 8010076:	d10b      	bne.n	8010090 <_free_r+0x6c>
 8010078:	6820      	ldr	r0, [r4, #0]
 801007a:	4401      	add	r1, r0
 801007c:	1850      	adds	r0, r2, r1
 801007e:	4283      	cmp	r3, r0
 8010080:	6011      	str	r1, [r2, #0]
 8010082:	d1e0      	bne.n	8010046 <_free_r+0x22>
 8010084:	6818      	ldr	r0, [r3, #0]
 8010086:	685b      	ldr	r3, [r3, #4]
 8010088:	6053      	str	r3, [r2, #4]
 801008a:	4408      	add	r0, r1
 801008c:	6010      	str	r0, [r2, #0]
 801008e:	e7da      	b.n	8010046 <_free_r+0x22>
 8010090:	d902      	bls.n	8010098 <_free_r+0x74>
 8010092:	230c      	movs	r3, #12
 8010094:	602b      	str	r3, [r5, #0]
 8010096:	e7d6      	b.n	8010046 <_free_r+0x22>
 8010098:	6820      	ldr	r0, [r4, #0]
 801009a:	1821      	adds	r1, r4, r0
 801009c:	428b      	cmp	r3, r1
 801009e:	bf04      	itt	eq
 80100a0:	6819      	ldreq	r1, [r3, #0]
 80100a2:	685b      	ldreq	r3, [r3, #4]
 80100a4:	6063      	str	r3, [r4, #4]
 80100a6:	bf04      	itt	eq
 80100a8:	1809      	addeq	r1, r1, r0
 80100aa:	6021      	streq	r1, [r4, #0]
 80100ac:	6054      	str	r4, [r2, #4]
 80100ae:	e7ca      	b.n	8010046 <_free_r+0x22>
 80100b0:	bd38      	pop	{r3, r4, r5, pc}
 80100b2:	bf00      	nop
 80100b4:	20005280 	.word	0x20005280

080100b8 <__ssputs_r>:
 80100b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100bc:	688e      	ldr	r6, [r1, #8]
 80100be:	461f      	mov	r7, r3
 80100c0:	42be      	cmp	r6, r7
 80100c2:	680b      	ldr	r3, [r1, #0]
 80100c4:	4682      	mov	sl, r0
 80100c6:	460c      	mov	r4, r1
 80100c8:	4690      	mov	r8, r2
 80100ca:	d82d      	bhi.n	8010128 <__ssputs_r+0x70>
 80100cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80100d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80100d4:	d026      	beq.n	8010124 <__ssputs_r+0x6c>
 80100d6:	6965      	ldr	r5, [r4, #20]
 80100d8:	6909      	ldr	r1, [r1, #16]
 80100da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80100de:	eba3 0901 	sub.w	r9, r3, r1
 80100e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80100e6:	1c7b      	adds	r3, r7, #1
 80100e8:	444b      	add	r3, r9
 80100ea:	106d      	asrs	r5, r5, #1
 80100ec:	429d      	cmp	r5, r3
 80100ee:	bf38      	it	cc
 80100f0:	461d      	movcc	r5, r3
 80100f2:	0553      	lsls	r3, r2, #21
 80100f4:	d527      	bpl.n	8010146 <__ssputs_r+0x8e>
 80100f6:	4629      	mov	r1, r5
 80100f8:	f7ff fb28 	bl	800f74c <_malloc_r>
 80100fc:	4606      	mov	r6, r0
 80100fe:	b360      	cbz	r0, 801015a <__ssputs_r+0xa2>
 8010100:	6921      	ldr	r1, [r4, #16]
 8010102:	464a      	mov	r2, r9
 8010104:	f7ff ff61 	bl	800ffca <memcpy>
 8010108:	89a3      	ldrh	r3, [r4, #12]
 801010a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801010e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010112:	81a3      	strh	r3, [r4, #12]
 8010114:	6126      	str	r6, [r4, #16]
 8010116:	6165      	str	r5, [r4, #20]
 8010118:	444e      	add	r6, r9
 801011a:	eba5 0509 	sub.w	r5, r5, r9
 801011e:	6026      	str	r6, [r4, #0]
 8010120:	60a5      	str	r5, [r4, #8]
 8010122:	463e      	mov	r6, r7
 8010124:	42be      	cmp	r6, r7
 8010126:	d900      	bls.n	801012a <__ssputs_r+0x72>
 8010128:	463e      	mov	r6, r7
 801012a:	6820      	ldr	r0, [r4, #0]
 801012c:	4632      	mov	r2, r6
 801012e:	4641      	mov	r1, r8
 8010130:	f7ff fe50 	bl	800fdd4 <memmove>
 8010134:	68a3      	ldr	r3, [r4, #8]
 8010136:	1b9b      	subs	r3, r3, r6
 8010138:	60a3      	str	r3, [r4, #8]
 801013a:	6823      	ldr	r3, [r4, #0]
 801013c:	4433      	add	r3, r6
 801013e:	6023      	str	r3, [r4, #0]
 8010140:	2000      	movs	r0, #0
 8010142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010146:	462a      	mov	r2, r5
 8010148:	f000 fc7b 	bl	8010a42 <_realloc_r>
 801014c:	4606      	mov	r6, r0
 801014e:	2800      	cmp	r0, #0
 8010150:	d1e0      	bne.n	8010114 <__ssputs_r+0x5c>
 8010152:	6921      	ldr	r1, [r4, #16]
 8010154:	4650      	mov	r0, sl
 8010156:	f7ff ff65 	bl	8010024 <_free_r>
 801015a:	230c      	movs	r3, #12
 801015c:	f8ca 3000 	str.w	r3, [sl]
 8010160:	89a3      	ldrh	r3, [r4, #12]
 8010162:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010166:	81a3      	strh	r3, [r4, #12]
 8010168:	f04f 30ff 	mov.w	r0, #4294967295
 801016c:	e7e9      	b.n	8010142 <__ssputs_r+0x8a>
	...

08010170 <_svfiprintf_r>:
 8010170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010174:	4698      	mov	r8, r3
 8010176:	898b      	ldrh	r3, [r1, #12]
 8010178:	061b      	lsls	r3, r3, #24
 801017a:	b09d      	sub	sp, #116	@ 0x74
 801017c:	4607      	mov	r7, r0
 801017e:	460d      	mov	r5, r1
 8010180:	4614      	mov	r4, r2
 8010182:	d510      	bpl.n	80101a6 <_svfiprintf_r+0x36>
 8010184:	690b      	ldr	r3, [r1, #16]
 8010186:	b973      	cbnz	r3, 80101a6 <_svfiprintf_r+0x36>
 8010188:	2140      	movs	r1, #64	@ 0x40
 801018a:	f7ff fadf 	bl	800f74c <_malloc_r>
 801018e:	6028      	str	r0, [r5, #0]
 8010190:	6128      	str	r0, [r5, #16]
 8010192:	b930      	cbnz	r0, 80101a2 <_svfiprintf_r+0x32>
 8010194:	230c      	movs	r3, #12
 8010196:	603b      	str	r3, [r7, #0]
 8010198:	f04f 30ff 	mov.w	r0, #4294967295
 801019c:	b01d      	add	sp, #116	@ 0x74
 801019e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101a2:	2340      	movs	r3, #64	@ 0x40
 80101a4:	616b      	str	r3, [r5, #20]
 80101a6:	2300      	movs	r3, #0
 80101a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80101aa:	2320      	movs	r3, #32
 80101ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80101b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80101b4:	2330      	movs	r3, #48	@ 0x30
 80101b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010354 <_svfiprintf_r+0x1e4>
 80101ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80101be:	f04f 0901 	mov.w	r9, #1
 80101c2:	4623      	mov	r3, r4
 80101c4:	469a      	mov	sl, r3
 80101c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80101ca:	b10a      	cbz	r2, 80101d0 <_svfiprintf_r+0x60>
 80101cc:	2a25      	cmp	r2, #37	@ 0x25
 80101ce:	d1f9      	bne.n	80101c4 <_svfiprintf_r+0x54>
 80101d0:	ebba 0b04 	subs.w	fp, sl, r4
 80101d4:	d00b      	beq.n	80101ee <_svfiprintf_r+0x7e>
 80101d6:	465b      	mov	r3, fp
 80101d8:	4622      	mov	r2, r4
 80101da:	4629      	mov	r1, r5
 80101dc:	4638      	mov	r0, r7
 80101de:	f7ff ff6b 	bl	80100b8 <__ssputs_r>
 80101e2:	3001      	adds	r0, #1
 80101e4:	f000 80a7 	beq.w	8010336 <_svfiprintf_r+0x1c6>
 80101e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80101ea:	445a      	add	r2, fp
 80101ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80101ee:	f89a 3000 	ldrb.w	r3, [sl]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	f000 809f 	beq.w	8010336 <_svfiprintf_r+0x1c6>
 80101f8:	2300      	movs	r3, #0
 80101fa:	f04f 32ff 	mov.w	r2, #4294967295
 80101fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010202:	f10a 0a01 	add.w	sl, sl, #1
 8010206:	9304      	str	r3, [sp, #16]
 8010208:	9307      	str	r3, [sp, #28]
 801020a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801020e:	931a      	str	r3, [sp, #104]	@ 0x68
 8010210:	4654      	mov	r4, sl
 8010212:	2205      	movs	r2, #5
 8010214:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010218:	484e      	ldr	r0, [pc, #312]	@ (8010354 <_svfiprintf_r+0x1e4>)
 801021a:	f7ef ffd9 	bl	80001d0 <memchr>
 801021e:	9a04      	ldr	r2, [sp, #16]
 8010220:	b9d8      	cbnz	r0, 801025a <_svfiprintf_r+0xea>
 8010222:	06d0      	lsls	r0, r2, #27
 8010224:	bf44      	itt	mi
 8010226:	2320      	movmi	r3, #32
 8010228:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801022c:	0711      	lsls	r1, r2, #28
 801022e:	bf44      	itt	mi
 8010230:	232b      	movmi	r3, #43	@ 0x2b
 8010232:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010236:	f89a 3000 	ldrb.w	r3, [sl]
 801023a:	2b2a      	cmp	r3, #42	@ 0x2a
 801023c:	d015      	beq.n	801026a <_svfiprintf_r+0xfa>
 801023e:	9a07      	ldr	r2, [sp, #28]
 8010240:	4654      	mov	r4, sl
 8010242:	2000      	movs	r0, #0
 8010244:	f04f 0c0a 	mov.w	ip, #10
 8010248:	4621      	mov	r1, r4
 801024a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801024e:	3b30      	subs	r3, #48	@ 0x30
 8010250:	2b09      	cmp	r3, #9
 8010252:	d94b      	bls.n	80102ec <_svfiprintf_r+0x17c>
 8010254:	b1b0      	cbz	r0, 8010284 <_svfiprintf_r+0x114>
 8010256:	9207      	str	r2, [sp, #28]
 8010258:	e014      	b.n	8010284 <_svfiprintf_r+0x114>
 801025a:	eba0 0308 	sub.w	r3, r0, r8
 801025e:	fa09 f303 	lsl.w	r3, r9, r3
 8010262:	4313      	orrs	r3, r2
 8010264:	9304      	str	r3, [sp, #16]
 8010266:	46a2      	mov	sl, r4
 8010268:	e7d2      	b.n	8010210 <_svfiprintf_r+0xa0>
 801026a:	9b03      	ldr	r3, [sp, #12]
 801026c:	1d19      	adds	r1, r3, #4
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	9103      	str	r1, [sp, #12]
 8010272:	2b00      	cmp	r3, #0
 8010274:	bfbb      	ittet	lt
 8010276:	425b      	neglt	r3, r3
 8010278:	f042 0202 	orrlt.w	r2, r2, #2
 801027c:	9307      	strge	r3, [sp, #28]
 801027e:	9307      	strlt	r3, [sp, #28]
 8010280:	bfb8      	it	lt
 8010282:	9204      	strlt	r2, [sp, #16]
 8010284:	7823      	ldrb	r3, [r4, #0]
 8010286:	2b2e      	cmp	r3, #46	@ 0x2e
 8010288:	d10a      	bne.n	80102a0 <_svfiprintf_r+0x130>
 801028a:	7863      	ldrb	r3, [r4, #1]
 801028c:	2b2a      	cmp	r3, #42	@ 0x2a
 801028e:	d132      	bne.n	80102f6 <_svfiprintf_r+0x186>
 8010290:	9b03      	ldr	r3, [sp, #12]
 8010292:	1d1a      	adds	r2, r3, #4
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	9203      	str	r2, [sp, #12]
 8010298:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801029c:	3402      	adds	r4, #2
 801029e:	9305      	str	r3, [sp, #20]
 80102a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010364 <_svfiprintf_r+0x1f4>
 80102a4:	7821      	ldrb	r1, [r4, #0]
 80102a6:	2203      	movs	r2, #3
 80102a8:	4650      	mov	r0, sl
 80102aa:	f7ef ff91 	bl	80001d0 <memchr>
 80102ae:	b138      	cbz	r0, 80102c0 <_svfiprintf_r+0x150>
 80102b0:	9b04      	ldr	r3, [sp, #16]
 80102b2:	eba0 000a 	sub.w	r0, r0, sl
 80102b6:	2240      	movs	r2, #64	@ 0x40
 80102b8:	4082      	lsls	r2, r0
 80102ba:	4313      	orrs	r3, r2
 80102bc:	3401      	adds	r4, #1
 80102be:	9304      	str	r3, [sp, #16]
 80102c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102c4:	4824      	ldr	r0, [pc, #144]	@ (8010358 <_svfiprintf_r+0x1e8>)
 80102c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80102ca:	2206      	movs	r2, #6
 80102cc:	f7ef ff80 	bl	80001d0 <memchr>
 80102d0:	2800      	cmp	r0, #0
 80102d2:	d036      	beq.n	8010342 <_svfiprintf_r+0x1d2>
 80102d4:	4b21      	ldr	r3, [pc, #132]	@ (801035c <_svfiprintf_r+0x1ec>)
 80102d6:	bb1b      	cbnz	r3, 8010320 <_svfiprintf_r+0x1b0>
 80102d8:	9b03      	ldr	r3, [sp, #12]
 80102da:	3307      	adds	r3, #7
 80102dc:	f023 0307 	bic.w	r3, r3, #7
 80102e0:	3308      	adds	r3, #8
 80102e2:	9303      	str	r3, [sp, #12]
 80102e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102e6:	4433      	add	r3, r6
 80102e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80102ea:	e76a      	b.n	80101c2 <_svfiprintf_r+0x52>
 80102ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80102f0:	460c      	mov	r4, r1
 80102f2:	2001      	movs	r0, #1
 80102f4:	e7a8      	b.n	8010248 <_svfiprintf_r+0xd8>
 80102f6:	2300      	movs	r3, #0
 80102f8:	3401      	adds	r4, #1
 80102fa:	9305      	str	r3, [sp, #20]
 80102fc:	4619      	mov	r1, r3
 80102fe:	f04f 0c0a 	mov.w	ip, #10
 8010302:	4620      	mov	r0, r4
 8010304:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010308:	3a30      	subs	r2, #48	@ 0x30
 801030a:	2a09      	cmp	r2, #9
 801030c:	d903      	bls.n	8010316 <_svfiprintf_r+0x1a6>
 801030e:	2b00      	cmp	r3, #0
 8010310:	d0c6      	beq.n	80102a0 <_svfiprintf_r+0x130>
 8010312:	9105      	str	r1, [sp, #20]
 8010314:	e7c4      	b.n	80102a0 <_svfiprintf_r+0x130>
 8010316:	fb0c 2101 	mla	r1, ip, r1, r2
 801031a:	4604      	mov	r4, r0
 801031c:	2301      	movs	r3, #1
 801031e:	e7f0      	b.n	8010302 <_svfiprintf_r+0x192>
 8010320:	ab03      	add	r3, sp, #12
 8010322:	9300      	str	r3, [sp, #0]
 8010324:	462a      	mov	r2, r5
 8010326:	4b0e      	ldr	r3, [pc, #56]	@ (8010360 <_svfiprintf_r+0x1f0>)
 8010328:	a904      	add	r1, sp, #16
 801032a:	4638      	mov	r0, r7
 801032c:	f3af 8000 	nop.w
 8010330:	1c42      	adds	r2, r0, #1
 8010332:	4606      	mov	r6, r0
 8010334:	d1d6      	bne.n	80102e4 <_svfiprintf_r+0x174>
 8010336:	89ab      	ldrh	r3, [r5, #12]
 8010338:	065b      	lsls	r3, r3, #25
 801033a:	f53f af2d 	bmi.w	8010198 <_svfiprintf_r+0x28>
 801033e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010340:	e72c      	b.n	801019c <_svfiprintf_r+0x2c>
 8010342:	ab03      	add	r3, sp, #12
 8010344:	9300      	str	r3, [sp, #0]
 8010346:	462a      	mov	r2, r5
 8010348:	4b05      	ldr	r3, [pc, #20]	@ (8010360 <_svfiprintf_r+0x1f0>)
 801034a:	a904      	add	r1, sp, #16
 801034c:	4638      	mov	r0, r7
 801034e:	f000 f9bb 	bl	80106c8 <_printf_i>
 8010352:	e7ed      	b.n	8010330 <_svfiprintf_r+0x1c0>
 8010354:	08010e77 	.word	0x08010e77
 8010358:	08010e81 	.word	0x08010e81
 801035c:	00000000 	.word	0x00000000
 8010360:	080100b9 	.word	0x080100b9
 8010364:	08010e7d 	.word	0x08010e7d

08010368 <__sfputc_r>:
 8010368:	6893      	ldr	r3, [r2, #8]
 801036a:	3b01      	subs	r3, #1
 801036c:	2b00      	cmp	r3, #0
 801036e:	b410      	push	{r4}
 8010370:	6093      	str	r3, [r2, #8]
 8010372:	da08      	bge.n	8010386 <__sfputc_r+0x1e>
 8010374:	6994      	ldr	r4, [r2, #24]
 8010376:	42a3      	cmp	r3, r4
 8010378:	db01      	blt.n	801037e <__sfputc_r+0x16>
 801037a:	290a      	cmp	r1, #10
 801037c:	d103      	bne.n	8010386 <__sfputc_r+0x1e>
 801037e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010382:	f7ff bc92 	b.w	800fcaa <__swbuf_r>
 8010386:	6813      	ldr	r3, [r2, #0]
 8010388:	1c58      	adds	r0, r3, #1
 801038a:	6010      	str	r0, [r2, #0]
 801038c:	7019      	strb	r1, [r3, #0]
 801038e:	4608      	mov	r0, r1
 8010390:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010394:	4770      	bx	lr

08010396 <__sfputs_r>:
 8010396:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010398:	4606      	mov	r6, r0
 801039a:	460f      	mov	r7, r1
 801039c:	4614      	mov	r4, r2
 801039e:	18d5      	adds	r5, r2, r3
 80103a0:	42ac      	cmp	r4, r5
 80103a2:	d101      	bne.n	80103a8 <__sfputs_r+0x12>
 80103a4:	2000      	movs	r0, #0
 80103a6:	e007      	b.n	80103b8 <__sfputs_r+0x22>
 80103a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103ac:	463a      	mov	r2, r7
 80103ae:	4630      	mov	r0, r6
 80103b0:	f7ff ffda 	bl	8010368 <__sfputc_r>
 80103b4:	1c43      	adds	r3, r0, #1
 80103b6:	d1f3      	bne.n	80103a0 <__sfputs_r+0xa>
 80103b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080103bc <_vfiprintf_r>:
 80103bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103c0:	460d      	mov	r5, r1
 80103c2:	b09d      	sub	sp, #116	@ 0x74
 80103c4:	4614      	mov	r4, r2
 80103c6:	4698      	mov	r8, r3
 80103c8:	4606      	mov	r6, r0
 80103ca:	b118      	cbz	r0, 80103d4 <_vfiprintf_r+0x18>
 80103cc:	6a03      	ldr	r3, [r0, #32]
 80103ce:	b90b      	cbnz	r3, 80103d4 <_vfiprintf_r+0x18>
 80103d0:	f7ff fbbe 	bl	800fb50 <__sinit>
 80103d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80103d6:	07d9      	lsls	r1, r3, #31
 80103d8:	d405      	bmi.n	80103e6 <_vfiprintf_r+0x2a>
 80103da:	89ab      	ldrh	r3, [r5, #12]
 80103dc:	059a      	lsls	r2, r3, #22
 80103de:	d402      	bmi.n	80103e6 <_vfiprintf_r+0x2a>
 80103e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80103e2:	f7ff fdf0 	bl	800ffc6 <__retarget_lock_acquire_recursive>
 80103e6:	89ab      	ldrh	r3, [r5, #12]
 80103e8:	071b      	lsls	r3, r3, #28
 80103ea:	d501      	bpl.n	80103f0 <_vfiprintf_r+0x34>
 80103ec:	692b      	ldr	r3, [r5, #16]
 80103ee:	b99b      	cbnz	r3, 8010418 <_vfiprintf_r+0x5c>
 80103f0:	4629      	mov	r1, r5
 80103f2:	4630      	mov	r0, r6
 80103f4:	f7ff fc98 	bl	800fd28 <__swsetup_r>
 80103f8:	b170      	cbz	r0, 8010418 <_vfiprintf_r+0x5c>
 80103fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80103fc:	07dc      	lsls	r4, r3, #31
 80103fe:	d504      	bpl.n	801040a <_vfiprintf_r+0x4e>
 8010400:	f04f 30ff 	mov.w	r0, #4294967295
 8010404:	b01d      	add	sp, #116	@ 0x74
 8010406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801040a:	89ab      	ldrh	r3, [r5, #12]
 801040c:	0598      	lsls	r0, r3, #22
 801040e:	d4f7      	bmi.n	8010400 <_vfiprintf_r+0x44>
 8010410:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010412:	f7ff fdd9 	bl	800ffc8 <__retarget_lock_release_recursive>
 8010416:	e7f3      	b.n	8010400 <_vfiprintf_r+0x44>
 8010418:	2300      	movs	r3, #0
 801041a:	9309      	str	r3, [sp, #36]	@ 0x24
 801041c:	2320      	movs	r3, #32
 801041e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010422:	f8cd 800c 	str.w	r8, [sp, #12]
 8010426:	2330      	movs	r3, #48	@ 0x30
 8010428:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80105d8 <_vfiprintf_r+0x21c>
 801042c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010430:	f04f 0901 	mov.w	r9, #1
 8010434:	4623      	mov	r3, r4
 8010436:	469a      	mov	sl, r3
 8010438:	f813 2b01 	ldrb.w	r2, [r3], #1
 801043c:	b10a      	cbz	r2, 8010442 <_vfiprintf_r+0x86>
 801043e:	2a25      	cmp	r2, #37	@ 0x25
 8010440:	d1f9      	bne.n	8010436 <_vfiprintf_r+0x7a>
 8010442:	ebba 0b04 	subs.w	fp, sl, r4
 8010446:	d00b      	beq.n	8010460 <_vfiprintf_r+0xa4>
 8010448:	465b      	mov	r3, fp
 801044a:	4622      	mov	r2, r4
 801044c:	4629      	mov	r1, r5
 801044e:	4630      	mov	r0, r6
 8010450:	f7ff ffa1 	bl	8010396 <__sfputs_r>
 8010454:	3001      	adds	r0, #1
 8010456:	f000 80a7 	beq.w	80105a8 <_vfiprintf_r+0x1ec>
 801045a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801045c:	445a      	add	r2, fp
 801045e:	9209      	str	r2, [sp, #36]	@ 0x24
 8010460:	f89a 3000 	ldrb.w	r3, [sl]
 8010464:	2b00      	cmp	r3, #0
 8010466:	f000 809f 	beq.w	80105a8 <_vfiprintf_r+0x1ec>
 801046a:	2300      	movs	r3, #0
 801046c:	f04f 32ff 	mov.w	r2, #4294967295
 8010470:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010474:	f10a 0a01 	add.w	sl, sl, #1
 8010478:	9304      	str	r3, [sp, #16]
 801047a:	9307      	str	r3, [sp, #28]
 801047c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010480:	931a      	str	r3, [sp, #104]	@ 0x68
 8010482:	4654      	mov	r4, sl
 8010484:	2205      	movs	r2, #5
 8010486:	f814 1b01 	ldrb.w	r1, [r4], #1
 801048a:	4853      	ldr	r0, [pc, #332]	@ (80105d8 <_vfiprintf_r+0x21c>)
 801048c:	f7ef fea0 	bl	80001d0 <memchr>
 8010490:	9a04      	ldr	r2, [sp, #16]
 8010492:	b9d8      	cbnz	r0, 80104cc <_vfiprintf_r+0x110>
 8010494:	06d1      	lsls	r1, r2, #27
 8010496:	bf44      	itt	mi
 8010498:	2320      	movmi	r3, #32
 801049a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801049e:	0713      	lsls	r3, r2, #28
 80104a0:	bf44      	itt	mi
 80104a2:	232b      	movmi	r3, #43	@ 0x2b
 80104a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80104a8:	f89a 3000 	ldrb.w	r3, [sl]
 80104ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80104ae:	d015      	beq.n	80104dc <_vfiprintf_r+0x120>
 80104b0:	9a07      	ldr	r2, [sp, #28]
 80104b2:	4654      	mov	r4, sl
 80104b4:	2000      	movs	r0, #0
 80104b6:	f04f 0c0a 	mov.w	ip, #10
 80104ba:	4621      	mov	r1, r4
 80104bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80104c0:	3b30      	subs	r3, #48	@ 0x30
 80104c2:	2b09      	cmp	r3, #9
 80104c4:	d94b      	bls.n	801055e <_vfiprintf_r+0x1a2>
 80104c6:	b1b0      	cbz	r0, 80104f6 <_vfiprintf_r+0x13a>
 80104c8:	9207      	str	r2, [sp, #28]
 80104ca:	e014      	b.n	80104f6 <_vfiprintf_r+0x13a>
 80104cc:	eba0 0308 	sub.w	r3, r0, r8
 80104d0:	fa09 f303 	lsl.w	r3, r9, r3
 80104d4:	4313      	orrs	r3, r2
 80104d6:	9304      	str	r3, [sp, #16]
 80104d8:	46a2      	mov	sl, r4
 80104da:	e7d2      	b.n	8010482 <_vfiprintf_r+0xc6>
 80104dc:	9b03      	ldr	r3, [sp, #12]
 80104de:	1d19      	adds	r1, r3, #4
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	9103      	str	r1, [sp, #12]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	bfbb      	ittet	lt
 80104e8:	425b      	neglt	r3, r3
 80104ea:	f042 0202 	orrlt.w	r2, r2, #2
 80104ee:	9307      	strge	r3, [sp, #28]
 80104f0:	9307      	strlt	r3, [sp, #28]
 80104f2:	bfb8      	it	lt
 80104f4:	9204      	strlt	r2, [sp, #16]
 80104f6:	7823      	ldrb	r3, [r4, #0]
 80104f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80104fa:	d10a      	bne.n	8010512 <_vfiprintf_r+0x156>
 80104fc:	7863      	ldrb	r3, [r4, #1]
 80104fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8010500:	d132      	bne.n	8010568 <_vfiprintf_r+0x1ac>
 8010502:	9b03      	ldr	r3, [sp, #12]
 8010504:	1d1a      	adds	r2, r3, #4
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	9203      	str	r2, [sp, #12]
 801050a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801050e:	3402      	adds	r4, #2
 8010510:	9305      	str	r3, [sp, #20]
 8010512:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80105e8 <_vfiprintf_r+0x22c>
 8010516:	7821      	ldrb	r1, [r4, #0]
 8010518:	2203      	movs	r2, #3
 801051a:	4650      	mov	r0, sl
 801051c:	f7ef fe58 	bl	80001d0 <memchr>
 8010520:	b138      	cbz	r0, 8010532 <_vfiprintf_r+0x176>
 8010522:	9b04      	ldr	r3, [sp, #16]
 8010524:	eba0 000a 	sub.w	r0, r0, sl
 8010528:	2240      	movs	r2, #64	@ 0x40
 801052a:	4082      	lsls	r2, r0
 801052c:	4313      	orrs	r3, r2
 801052e:	3401      	adds	r4, #1
 8010530:	9304      	str	r3, [sp, #16]
 8010532:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010536:	4829      	ldr	r0, [pc, #164]	@ (80105dc <_vfiprintf_r+0x220>)
 8010538:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801053c:	2206      	movs	r2, #6
 801053e:	f7ef fe47 	bl	80001d0 <memchr>
 8010542:	2800      	cmp	r0, #0
 8010544:	d03f      	beq.n	80105c6 <_vfiprintf_r+0x20a>
 8010546:	4b26      	ldr	r3, [pc, #152]	@ (80105e0 <_vfiprintf_r+0x224>)
 8010548:	bb1b      	cbnz	r3, 8010592 <_vfiprintf_r+0x1d6>
 801054a:	9b03      	ldr	r3, [sp, #12]
 801054c:	3307      	adds	r3, #7
 801054e:	f023 0307 	bic.w	r3, r3, #7
 8010552:	3308      	adds	r3, #8
 8010554:	9303      	str	r3, [sp, #12]
 8010556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010558:	443b      	add	r3, r7
 801055a:	9309      	str	r3, [sp, #36]	@ 0x24
 801055c:	e76a      	b.n	8010434 <_vfiprintf_r+0x78>
 801055e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010562:	460c      	mov	r4, r1
 8010564:	2001      	movs	r0, #1
 8010566:	e7a8      	b.n	80104ba <_vfiprintf_r+0xfe>
 8010568:	2300      	movs	r3, #0
 801056a:	3401      	adds	r4, #1
 801056c:	9305      	str	r3, [sp, #20]
 801056e:	4619      	mov	r1, r3
 8010570:	f04f 0c0a 	mov.w	ip, #10
 8010574:	4620      	mov	r0, r4
 8010576:	f810 2b01 	ldrb.w	r2, [r0], #1
 801057a:	3a30      	subs	r2, #48	@ 0x30
 801057c:	2a09      	cmp	r2, #9
 801057e:	d903      	bls.n	8010588 <_vfiprintf_r+0x1cc>
 8010580:	2b00      	cmp	r3, #0
 8010582:	d0c6      	beq.n	8010512 <_vfiprintf_r+0x156>
 8010584:	9105      	str	r1, [sp, #20]
 8010586:	e7c4      	b.n	8010512 <_vfiprintf_r+0x156>
 8010588:	fb0c 2101 	mla	r1, ip, r1, r2
 801058c:	4604      	mov	r4, r0
 801058e:	2301      	movs	r3, #1
 8010590:	e7f0      	b.n	8010574 <_vfiprintf_r+0x1b8>
 8010592:	ab03      	add	r3, sp, #12
 8010594:	9300      	str	r3, [sp, #0]
 8010596:	462a      	mov	r2, r5
 8010598:	4b12      	ldr	r3, [pc, #72]	@ (80105e4 <_vfiprintf_r+0x228>)
 801059a:	a904      	add	r1, sp, #16
 801059c:	4630      	mov	r0, r6
 801059e:	f3af 8000 	nop.w
 80105a2:	4607      	mov	r7, r0
 80105a4:	1c78      	adds	r0, r7, #1
 80105a6:	d1d6      	bne.n	8010556 <_vfiprintf_r+0x19a>
 80105a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80105aa:	07d9      	lsls	r1, r3, #31
 80105ac:	d405      	bmi.n	80105ba <_vfiprintf_r+0x1fe>
 80105ae:	89ab      	ldrh	r3, [r5, #12]
 80105b0:	059a      	lsls	r2, r3, #22
 80105b2:	d402      	bmi.n	80105ba <_vfiprintf_r+0x1fe>
 80105b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80105b6:	f7ff fd07 	bl	800ffc8 <__retarget_lock_release_recursive>
 80105ba:	89ab      	ldrh	r3, [r5, #12]
 80105bc:	065b      	lsls	r3, r3, #25
 80105be:	f53f af1f 	bmi.w	8010400 <_vfiprintf_r+0x44>
 80105c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80105c4:	e71e      	b.n	8010404 <_vfiprintf_r+0x48>
 80105c6:	ab03      	add	r3, sp, #12
 80105c8:	9300      	str	r3, [sp, #0]
 80105ca:	462a      	mov	r2, r5
 80105cc:	4b05      	ldr	r3, [pc, #20]	@ (80105e4 <_vfiprintf_r+0x228>)
 80105ce:	a904      	add	r1, sp, #16
 80105d0:	4630      	mov	r0, r6
 80105d2:	f000 f879 	bl	80106c8 <_printf_i>
 80105d6:	e7e4      	b.n	80105a2 <_vfiprintf_r+0x1e6>
 80105d8:	08010e77 	.word	0x08010e77
 80105dc:	08010e81 	.word	0x08010e81
 80105e0:	00000000 	.word	0x00000000
 80105e4:	08010397 	.word	0x08010397
 80105e8:	08010e7d 	.word	0x08010e7d

080105ec <_printf_common>:
 80105ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105f0:	4616      	mov	r6, r2
 80105f2:	4698      	mov	r8, r3
 80105f4:	688a      	ldr	r2, [r1, #8]
 80105f6:	690b      	ldr	r3, [r1, #16]
 80105f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80105fc:	4293      	cmp	r3, r2
 80105fe:	bfb8      	it	lt
 8010600:	4613      	movlt	r3, r2
 8010602:	6033      	str	r3, [r6, #0]
 8010604:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010608:	4607      	mov	r7, r0
 801060a:	460c      	mov	r4, r1
 801060c:	b10a      	cbz	r2, 8010612 <_printf_common+0x26>
 801060e:	3301      	adds	r3, #1
 8010610:	6033      	str	r3, [r6, #0]
 8010612:	6823      	ldr	r3, [r4, #0]
 8010614:	0699      	lsls	r1, r3, #26
 8010616:	bf42      	ittt	mi
 8010618:	6833      	ldrmi	r3, [r6, #0]
 801061a:	3302      	addmi	r3, #2
 801061c:	6033      	strmi	r3, [r6, #0]
 801061e:	6825      	ldr	r5, [r4, #0]
 8010620:	f015 0506 	ands.w	r5, r5, #6
 8010624:	d106      	bne.n	8010634 <_printf_common+0x48>
 8010626:	f104 0a19 	add.w	sl, r4, #25
 801062a:	68e3      	ldr	r3, [r4, #12]
 801062c:	6832      	ldr	r2, [r6, #0]
 801062e:	1a9b      	subs	r3, r3, r2
 8010630:	42ab      	cmp	r3, r5
 8010632:	dc26      	bgt.n	8010682 <_printf_common+0x96>
 8010634:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010638:	6822      	ldr	r2, [r4, #0]
 801063a:	3b00      	subs	r3, #0
 801063c:	bf18      	it	ne
 801063e:	2301      	movne	r3, #1
 8010640:	0692      	lsls	r2, r2, #26
 8010642:	d42b      	bmi.n	801069c <_printf_common+0xb0>
 8010644:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010648:	4641      	mov	r1, r8
 801064a:	4638      	mov	r0, r7
 801064c:	47c8      	blx	r9
 801064e:	3001      	adds	r0, #1
 8010650:	d01e      	beq.n	8010690 <_printf_common+0xa4>
 8010652:	6823      	ldr	r3, [r4, #0]
 8010654:	6922      	ldr	r2, [r4, #16]
 8010656:	f003 0306 	and.w	r3, r3, #6
 801065a:	2b04      	cmp	r3, #4
 801065c:	bf02      	ittt	eq
 801065e:	68e5      	ldreq	r5, [r4, #12]
 8010660:	6833      	ldreq	r3, [r6, #0]
 8010662:	1aed      	subeq	r5, r5, r3
 8010664:	68a3      	ldr	r3, [r4, #8]
 8010666:	bf0c      	ite	eq
 8010668:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801066c:	2500      	movne	r5, #0
 801066e:	4293      	cmp	r3, r2
 8010670:	bfc4      	itt	gt
 8010672:	1a9b      	subgt	r3, r3, r2
 8010674:	18ed      	addgt	r5, r5, r3
 8010676:	2600      	movs	r6, #0
 8010678:	341a      	adds	r4, #26
 801067a:	42b5      	cmp	r5, r6
 801067c:	d11a      	bne.n	80106b4 <_printf_common+0xc8>
 801067e:	2000      	movs	r0, #0
 8010680:	e008      	b.n	8010694 <_printf_common+0xa8>
 8010682:	2301      	movs	r3, #1
 8010684:	4652      	mov	r2, sl
 8010686:	4641      	mov	r1, r8
 8010688:	4638      	mov	r0, r7
 801068a:	47c8      	blx	r9
 801068c:	3001      	adds	r0, #1
 801068e:	d103      	bne.n	8010698 <_printf_common+0xac>
 8010690:	f04f 30ff 	mov.w	r0, #4294967295
 8010694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010698:	3501      	adds	r5, #1
 801069a:	e7c6      	b.n	801062a <_printf_common+0x3e>
 801069c:	18e1      	adds	r1, r4, r3
 801069e:	1c5a      	adds	r2, r3, #1
 80106a0:	2030      	movs	r0, #48	@ 0x30
 80106a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80106a6:	4422      	add	r2, r4
 80106a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80106ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80106b0:	3302      	adds	r3, #2
 80106b2:	e7c7      	b.n	8010644 <_printf_common+0x58>
 80106b4:	2301      	movs	r3, #1
 80106b6:	4622      	mov	r2, r4
 80106b8:	4641      	mov	r1, r8
 80106ba:	4638      	mov	r0, r7
 80106bc:	47c8      	blx	r9
 80106be:	3001      	adds	r0, #1
 80106c0:	d0e6      	beq.n	8010690 <_printf_common+0xa4>
 80106c2:	3601      	adds	r6, #1
 80106c4:	e7d9      	b.n	801067a <_printf_common+0x8e>
	...

080106c8 <_printf_i>:
 80106c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80106cc:	7e0f      	ldrb	r7, [r1, #24]
 80106ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80106d0:	2f78      	cmp	r7, #120	@ 0x78
 80106d2:	4691      	mov	r9, r2
 80106d4:	4680      	mov	r8, r0
 80106d6:	460c      	mov	r4, r1
 80106d8:	469a      	mov	sl, r3
 80106da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80106de:	d807      	bhi.n	80106f0 <_printf_i+0x28>
 80106e0:	2f62      	cmp	r7, #98	@ 0x62
 80106e2:	d80a      	bhi.n	80106fa <_printf_i+0x32>
 80106e4:	2f00      	cmp	r7, #0
 80106e6:	f000 80d2 	beq.w	801088e <_printf_i+0x1c6>
 80106ea:	2f58      	cmp	r7, #88	@ 0x58
 80106ec:	f000 80b9 	beq.w	8010862 <_printf_i+0x19a>
 80106f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80106f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80106f8:	e03a      	b.n	8010770 <_printf_i+0xa8>
 80106fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80106fe:	2b15      	cmp	r3, #21
 8010700:	d8f6      	bhi.n	80106f0 <_printf_i+0x28>
 8010702:	a101      	add	r1, pc, #4	@ (adr r1, 8010708 <_printf_i+0x40>)
 8010704:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010708:	08010761 	.word	0x08010761
 801070c:	08010775 	.word	0x08010775
 8010710:	080106f1 	.word	0x080106f1
 8010714:	080106f1 	.word	0x080106f1
 8010718:	080106f1 	.word	0x080106f1
 801071c:	080106f1 	.word	0x080106f1
 8010720:	08010775 	.word	0x08010775
 8010724:	080106f1 	.word	0x080106f1
 8010728:	080106f1 	.word	0x080106f1
 801072c:	080106f1 	.word	0x080106f1
 8010730:	080106f1 	.word	0x080106f1
 8010734:	08010875 	.word	0x08010875
 8010738:	0801079f 	.word	0x0801079f
 801073c:	0801082f 	.word	0x0801082f
 8010740:	080106f1 	.word	0x080106f1
 8010744:	080106f1 	.word	0x080106f1
 8010748:	08010897 	.word	0x08010897
 801074c:	080106f1 	.word	0x080106f1
 8010750:	0801079f 	.word	0x0801079f
 8010754:	080106f1 	.word	0x080106f1
 8010758:	080106f1 	.word	0x080106f1
 801075c:	08010837 	.word	0x08010837
 8010760:	6833      	ldr	r3, [r6, #0]
 8010762:	1d1a      	adds	r2, r3, #4
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	6032      	str	r2, [r6, #0]
 8010768:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801076c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010770:	2301      	movs	r3, #1
 8010772:	e09d      	b.n	80108b0 <_printf_i+0x1e8>
 8010774:	6833      	ldr	r3, [r6, #0]
 8010776:	6820      	ldr	r0, [r4, #0]
 8010778:	1d19      	adds	r1, r3, #4
 801077a:	6031      	str	r1, [r6, #0]
 801077c:	0606      	lsls	r6, r0, #24
 801077e:	d501      	bpl.n	8010784 <_printf_i+0xbc>
 8010780:	681d      	ldr	r5, [r3, #0]
 8010782:	e003      	b.n	801078c <_printf_i+0xc4>
 8010784:	0645      	lsls	r5, r0, #25
 8010786:	d5fb      	bpl.n	8010780 <_printf_i+0xb8>
 8010788:	f9b3 5000 	ldrsh.w	r5, [r3]
 801078c:	2d00      	cmp	r5, #0
 801078e:	da03      	bge.n	8010798 <_printf_i+0xd0>
 8010790:	232d      	movs	r3, #45	@ 0x2d
 8010792:	426d      	negs	r5, r5
 8010794:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010798:	4859      	ldr	r0, [pc, #356]	@ (8010900 <_printf_i+0x238>)
 801079a:	230a      	movs	r3, #10
 801079c:	e011      	b.n	80107c2 <_printf_i+0xfa>
 801079e:	6821      	ldr	r1, [r4, #0]
 80107a0:	6833      	ldr	r3, [r6, #0]
 80107a2:	0608      	lsls	r0, r1, #24
 80107a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80107a8:	d402      	bmi.n	80107b0 <_printf_i+0xe8>
 80107aa:	0649      	lsls	r1, r1, #25
 80107ac:	bf48      	it	mi
 80107ae:	b2ad      	uxthmi	r5, r5
 80107b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80107b2:	4853      	ldr	r0, [pc, #332]	@ (8010900 <_printf_i+0x238>)
 80107b4:	6033      	str	r3, [r6, #0]
 80107b6:	bf14      	ite	ne
 80107b8:	230a      	movne	r3, #10
 80107ba:	2308      	moveq	r3, #8
 80107bc:	2100      	movs	r1, #0
 80107be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80107c2:	6866      	ldr	r6, [r4, #4]
 80107c4:	60a6      	str	r6, [r4, #8]
 80107c6:	2e00      	cmp	r6, #0
 80107c8:	bfa2      	ittt	ge
 80107ca:	6821      	ldrge	r1, [r4, #0]
 80107cc:	f021 0104 	bicge.w	r1, r1, #4
 80107d0:	6021      	strge	r1, [r4, #0]
 80107d2:	b90d      	cbnz	r5, 80107d8 <_printf_i+0x110>
 80107d4:	2e00      	cmp	r6, #0
 80107d6:	d04b      	beq.n	8010870 <_printf_i+0x1a8>
 80107d8:	4616      	mov	r6, r2
 80107da:	fbb5 f1f3 	udiv	r1, r5, r3
 80107de:	fb03 5711 	mls	r7, r3, r1, r5
 80107e2:	5dc7      	ldrb	r7, [r0, r7]
 80107e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80107e8:	462f      	mov	r7, r5
 80107ea:	42bb      	cmp	r3, r7
 80107ec:	460d      	mov	r5, r1
 80107ee:	d9f4      	bls.n	80107da <_printf_i+0x112>
 80107f0:	2b08      	cmp	r3, #8
 80107f2:	d10b      	bne.n	801080c <_printf_i+0x144>
 80107f4:	6823      	ldr	r3, [r4, #0]
 80107f6:	07df      	lsls	r7, r3, #31
 80107f8:	d508      	bpl.n	801080c <_printf_i+0x144>
 80107fa:	6923      	ldr	r3, [r4, #16]
 80107fc:	6861      	ldr	r1, [r4, #4]
 80107fe:	4299      	cmp	r1, r3
 8010800:	bfde      	ittt	le
 8010802:	2330      	movle	r3, #48	@ 0x30
 8010804:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010808:	f106 36ff 	addle.w	r6, r6, #4294967295
 801080c:	1b92      	subs	r2, r2, r6
 801080e:	6122      	str	r2, [r4, #16]
 8010810:	f8cd a000 	str.w	sl, [sp]
 8010814:	464b      	mov	r3, r9
 8010816:	aa03      	add	r2, sp, #12
 8010818:	4621      	mov	r1, r4
 801081a:	4640      	mov	r0, r8
 801081c:	f7ff fee6 	bl	80105ec <_printf_common>
 8010820:	3001      	adds	r0, #1
 8010822:	d14a      	bne.n	80108ba <_printf_i+0x1f2>
 8010824:	f04f 30ff 	mov.w	r0, #4294967295
 8010828:	b004      	add	sp, #16
 801082a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801082e:	6823      	ldr	r3, [r4, #0]
 8010830:	f043 0320 	orr.w	r3, r3, #32
 8010834:	6023      	str	r3, [r4, #0]
 8010836:	4833      	ldr	r0, [pc, #204]	@ (8010904 <_printf_i+0x23c>)
 8010838:	2778      	movs	r7, #120	@ 0x78
 801083a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801083e:	6823      	ldr	r3, [r4, #0]
 8010840:	6831      	ldr	r1, [r6, #0]
 8010842:	061f      	lsls	r7, r3, #24
 8010844:	f851 5b04 	ldr.w	r5, [r1], #4
 8010848:	d402      	bmi.n	8010850 <_printf_i+0x188>
 801084a:	065f      	lsls	r7, r3, #25
 801084c:	bf48      	it	mi
 801084e:	b2ad      	uxthmi	r5, r5
 8010850:	6031      	str	r1, [r6, #0]
 8010852:	07d9      	lsls	r1, r3, #31
 8010854:	bf44      	itt	mi
 8010856:	f043 0320 	orrmi.w	r3, r3, #32
 801085a:	6023      	strmi	r3, [r4, #0]
 801085c:	b11d      	cbz	r5, 8010866 <_printf_i+0x19e>
 801085e:	2310      	movs	r3, #16
 8010860:	e7ac      	b.n	80107bc <_printf_i+0xf4>
 8010862:	4827      	ldr	r0, [pc, #156]	@ (8010900 <_printf_i+0x238>)
 8010864:	e7e9      	b.n	801083a <_printf_i+0x172>
 8010866:	6823      	ldr	r3, [r4, #0]
 8010868:	f023 0320 	bic.w	r3, r3, #32
 801086c:	6023      	str	r3, [r4, #0]
 801086e:	e7f6      	b.n	801085e <_printf_i+0x196>
 8010870:	4616      	mov	r6, r2
 8010872:	e7bd      	b.n	80107f0 <_printf_i+0x128>
 8010874:	6833      	ldr	r3, [r6, #0]
 8010876:	6825      	ldr	r5, [r4, #0]
 8010878:	6961      	ldr	r1, [r4, #20]
 801087a:	1d18      	adds	r0, r3, #4
 801087c:	6030      	str	r0, [r6, #0]
 801087e:	062e      	lsls	r6, r5, #24
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	d501      	bpl.n	8010888 <_printf_i+0x1c0>
 8010884:	6019      	str	r1, [r3, #0]
 8010886:	e002      	b.n	801088e <_printf_i+0x1c6>
 8010888:	0668      	lsls	r0, r5, #25
 801088a:	d5fb      	bpl.n	8010884 <_printf_i+0x1bc>
 801088c:	8019      	strh	r1, [r3, #0]
 801088e:	2300      	movs	r3, #0
 8010890:	6123      	str	r3, [r4, #16]
 8010892:	4616      	mov	r6, r2
 8010894:	e7bc      	b.n	8010810 <_printf_i+0x148>
 8010896:	6833      	ldr	r3, [r6, #0]
 8010898:	1d1a      	adds	r2, r3, #4
 801089a:	6032      	str	r2, [r6, #0]
 801089c:	681e      	ldr	r6, [r3, #0]
 801089e:	6862      	ldr	r2, [r4, #4]
 80108a0:	2100      	movs	r1, #0
 80108a2:	4630      	mov	r0, r6
 80108a4:	f7ef fc94 	bl	80001d0 <memchr>
 80108a8:	b108      	cbz	r0, 80108ae <_printf_i+0x1e6>
 80108aa:	1b80      	subs	r0, r0, r6
 80108ac:	6060      	str	r0, [r4, #4]
 80108ae:	6863      	ldr	r3, [r4, #4]
 80108b0:	6123      	str	r3, [r4, #16]
 80108b2:	2300      	movs	r3, #0
 80108b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80108b8:	e7aa      	b.n	8010810 <_printf_i+0x148>
 80108ba:	6923      	ldr	r3, [r4, #16]
 80108bc:	4632      	mov	r2, r6
 80108be:	4649      	mov	r1, r9
 80108c0:	4640      	mov	r0, r8
 80108c2:	47d0      	blx	sl
 80108c4:	3001      	adds	r0, #1
 80108c6:	d0ad      	beq.n	8010824 <_printf_i+0x15c>
 80108c8:	6823      	ldr	r3, [r4, #0]
 80108ca:	079b      	lsls	r3, r3, #30
 80108cc:	d413      	bmi.n	80108f6 <_printf_i+0x22e>
 80108ce:	68e0      	ldr	r0, [r4, #12]
 80108d0:	9b03      	ldr	r3, [sp, #12]
 80108d2:	4298      	cmp	r0, r3
 80108d4:	bfb8      	it	lt
 80108d6:	4618      	movlt	r0, r3
 80108d8:	e7a6      	b.n	8010828 <_printf_i+0x160>
 80108da:	2301      	movs	r3, #1
 80108dc:	4632      	mov	r2, r6
 80108de:	4649      	mov	r1, r9
 80108e0:	4640      	mov	r0, r8
 80108e2:	47d0      	blx	sl
 80108e4:	3001      	adds	r0, #1
 80108e6:	d09d      	beq.n	8010824 <_printf_i+0x15c>
 80108e8:	3501      	adds	r5, #1
 80108ea:	68e3      	ldr	r3, [r4, #12]
 80108ec:	9903      	ldr	r1, [sp, #12]
 80108ee:	1a5b      	subs	r3, r3, r1
 80108f0:	42ab      	cmp	r3, r5
 80108f2:	dcf2      	bgt.n	80108da <_printf_i+0x212>
 80108f4:	e7eb      	b.n	80108ce <_printf_i+0x206>
 80108f6:	2500      	movs	r5, #0
 80108f8:	f104 0619 	add.w	r6, r4, #25
 80108fc:	e7f5      	b.n	80108ea <_printf_i+0x222>
 80108fe:	bf00      	nop
 8010900:	08010e88 	.word	0x08010e88
 8010904:	08010e99 	.word	0x08010e99

08010908 <fiprintf>:
 8010908:	b40e      	push	{r1, r2, r3}
 801090a:	b503      	push	{r0, r1, lr}
 801090c:	4601      	mov	r1, r0
 801090e:	ab03      	add	r3, sp, #12
 8010910:	4805      	ldr	r0, [pc, #20]	@ (8010928 <fiprintf+0x20>)
 8010912:	f853 2b04 	ldr.w	r2, [r3], #4
 8010916:	6800      	ldr	r0, [r0, #0]
 8010918:	9301      	str	r3, [sp, #4]
 801091a:	f7ff fd4f 	bl	80103bc <_vfiprintf_r>
 801091e:	b002      	add	sp, #8
 8010920:	f85d eb04 	ldr.w	lr, [sp], #4
 8010924:	b003      	add	sp, #12
 8010926:	4770      	bx	lr
 8010928:	20000034 	.word	0x20000034

0801092c <__swhatbuf_r>:
 801092c:	b570      	push	{r4, r5, r6, lr}
 801092e:	460c      	mov	r4, r1
 8010930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010934:	2900      	cmp	r1, #0
 8010936:	b096      	sub	sp, #88	@ 0x58
 8010938:	4615      	mov	r5, r2
 801093a:	461e      	mov	r6, r3
 801093c:	da0d      	bge.n	801095a <__swhatbuf_r+0x2e>
 801093e:	89a3      	ldrh	r3, [r4, #12]
 8010940:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010944:	f04f 0100 	mov.w	r1, #0
 8010948:	bf14      	ite	ne
 801094a:	2340      	movne	r3, #64	@ 0x40
 801094c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010950:	2000      	movs	r0, #0
 8010952:	6031      	str	r1, [r6, #0]
 8010954:	602b      	str	r3, [r5, #0]
 8010956:	b016      	add	sp, #88	@ 0x58
 8010958:	bd70      	pop	{r4, r5, r6, pc}
 801095a:	466a      	mov	r2, sp
 801095c:	f000 f848 	bl	80109f0 <_fstat_r>
 8010960:	2800      	cmp	r0, #0
 8010962:	dbec      	blt.n	801093e <__swhatbuf_r+0x12>
 8010964:	9901      	ldr	r1, [sp, #4]
 8010966:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801096a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801096e:	4259      	negs	r1, r3
 8010970:	4159      	adcs	r1, r3
 8010972:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010976:	e7eb      	b.n	8010950 <__swhatbuf_r+0x24>

08010978 <__smakebuf_r>:
 8010978:	898b      	ldrh	r3, [r1, #12]
 801097a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801097c:	079d      	lsls	r5, r3, #30
 801097e:	4606      	mov	r6, r0
 8010980:	460c      	mov	r4, r1
 8010982:	d507      	bpl.n	8010994 <__smakebuf_r+0x1c>
 8010984:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010988:	6023      	str	r3, [r4, #0]
 801098a:	6123      	str	r3, [r4, #16]
 801098c:	2301      	movs	r3, #1
 801098e:	6163      	str	r3, [r4, #20]
 8010990:	b003      	add	sp, #12
 8010992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010994:	ab01      	add	r3, sp, #4
 8010996:	466a      	mov	r2, sp
 8010998:	f7ff ffc8 	bl	801092c <__swhatbuf_r>
 801099c:	9f00      	ldr	r7, [sp, #0]
 801099e:	4605      	mov	r5, r0
 80109a0:	4639      	mov	r1, r7
 80109a2:	4630      	mov	r0, r6
 80109a4:	f7fe fed2 	bl	800f74c <_malloc_r>
 80109a8:	b948      	cbnz	r0, 80109be <__smakebuf_r+0x46>
 80109aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80109ae:	059a      	lsls	r2, r3, #22
 80109b0:	d4ee      	bmi.n	8010990 <__smakebuf_r+0x18>
 80109b2:	f023 0303 	bic.w	r3, r3, #3
 80109b6:	f043 0302 	orr.w	r3, r3, #2
 80109ba:	81a3      	strh	r3, [r4, #12]
 80109bc:	e7e2      	b.n	8010984 <__smakebuf_r+0xc>
 80109be:	89a3      	ldrh	r3, [r4, #12]
 80109c0:	6020      	str	r0, [r4, #0]
 80109c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80109c6:	81a3      	strh	r3, [r4, #12]
 80109c8:	9b01      	ldr	r3, [sp, #4]
 80109ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80109ce:	b15b      	cbz	r3, 80109e8 <__smakebuf_r+0x70>
 80109d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80109d4:	4630      	mov	r0, r6
 80109d6:	f000 f81d 	bl	8010a14 <_isatty_r>
 80109da:	b128      	cbz	r0, 80109e8 <__smakebuf_r+0x70>
 80109dc:	89a3      	ldrh	r3, [r4, #12]
 80109de:	f023 0303 	bic.w	r3, r3, #3
 80109e2:	f043 0301 	orr.w	r3, r3, #1
 80109e6:	81a3      	strh	r3, [r4, #12]
 80109e8:	89a3      	ldrh	r3, [r4, #12]
 80109ea:	431d      	orrs	r5, r3
 80109ec:	81a5      	strh	r5, [r4, #12]
 80109ee:	e7cf      	b.n	8010990 <__smakebuf_r+0x18>

080109f0 <_fstat_r>:
 80109f0:	b538      	push	{r3, r4, r5, lr}
 80109f2:	4d07      	ldr	r5, [pc, #28]	@ (8010a10 <_fstat_r+0x20>)
 80109f4:	2300      	movs	r3, #0
 80109f6:	4604      	mov	r4, r0
 80109f8:	4608      	mov	r0, r1
 80109fa:	4611      	mov	r1, r2
 80109fc:	602b      	str	r3, [r5, #0]
 80109fe:	f7f0 fda5 	bl	800154c <_fstat>
 8010a02:	1c43      	adds	r3, r0, #1
 8010a04:	d102      	bne.n	8010a0c <_fstat_r+0x1c>
 8010a06:	682b      	ldr	r3, [r5, #0]
 8010a08:	b103      	cbz	r3, 8010a0c <_fstat_r+0x1c>
 8010a0a:	6023      	str	r3, [r4, #0]
 8010a0c:	bd38      	pop	{r3, r4, r5, pc}
 8010a0e:	bf00      	nop
 8010a10:	200053c0 	.word	0x200053c0

08010a14 <_isatty_r>:
 8010a14:	b538      	push	{r3, r4, r5, lr}
 8010a16:	4d06      	ldr	r5, [pc, #24]	@ (8010a30 <_isatty_r+0x1c>)
 8010a18:	2300      	movs	r3, #0
 8010a1a:	4604      	mov	r4, r0
 8010a1c:	4608      	mov	r0, r1
 8010a1e:	602b      	str	r3, [r5, #0]
 8010a20:	f7f0 fda4 	bl	800156c <_isatty>
 8010a24:	1c43      	adds	r3, r0, #1
 8010a26:	d102      	bne.n	8010a2e <_isatty_r+0x1a>
 8010a28:	682b      	ldr	r3, [r5, #0]
 8010a2a:	b103      	cbz	r3, 8010a2e <_isatty_r+0x1a>
 8010a2c:	6023      	str	r3, [r4, #0]
 8010a2e:	bd38      	pop	{r3, r4, r5, pc}
 8010a30:	200053c0 	.word	0x200053c0

08010a34 <abort>:
 8010a34:	b508      	push	{r3, lr}
 8010a36:	2006      	movs	r0, #6
 8010a38:	f000 f85a 	bl	8010af0 <raise>
 8010a3c:	2001      	movs	r0, #1
 8010a3e:	f7f0 fd35 	bl	80014ac <_exit>

08010a42 <_realloc_r>:
 8010a42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a46:	4680      	mov	r8, r0
 8010a48:	4615      	mov	r5, r2
 8010a4a:	460c      	mov	r4, r1
 8010a4c:	b921      	cbnz	r1, 8010a58 <_realloc_r+0x16>
 8010a4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010a52:	4611      	mov	r1, r2
 8010a54:	f7fe be7a 	b.w	800f74c <_malloc_r>
 8010a58:	b92a      	cbnz	r2, 8010a66 <_realloc_r+0x24>
 8010a5a:	f7ff fae3 	bl	8010024 <_free_r>
 8010a5e:	2400      	movs	r4, #0
 8010a60:	4620      	mov	r0, r4
 8010a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a66:	f000 f85f 	bl	8010b28 <_malloc_usable_size_r>
 8010a6a:	4285      	cmp	r5, r0
 8010a6c:	4606      	mov	r6, r0
 8010a6e:	d802      	bhi.n	8010a76 <_realloc_r+0x34>
 8010a70:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010a74:	d8f4      	bhi.n	8010a60 <_realloc_r+0x1e>
 8010a76:	4629      	mov	r1, r5
 8010a78:	4640      	mov	r0, r8
 8010a7a:	f7fe fe67 	bl	800f74c <_malloc_r>
 8010a7e:	4607      	mov	r7, r0
 8010a80:	2800      	cmp	r0, #0
 8010a82:	d0ec      	beq.n	8010a5e <_realloc_r+0x1c>
 8010a84:	42b5      	cmp	r5, r6
 8010a86:	462a      	mov	r2, r5
 8010a88:	4621      	mov	r1, r4
 8010a8a:	bf28      	it	cs
 8010a8c:	4632      	movcs	r2, r6
 8010a8e:	f7ff fa9c 	bl	800ffca <memcpy>
 8010a92:	4621      	mov	r1, r4
 8010a94:	4640      	mov	r0, r8
 8010a96:	f7ff fac5 	bl	8010024 <_free_r>
 8010a9a:	463c      	mov	r4, r7
 8010a9c:	e7e0      	b.n	8010a60 <_realloc_r+0x1e>

08010a9e <_raise_r>:
 8010a9e:	291f      	cmp	r1, #31
 8010aa0:	b538      	push	{r3, r4, r5, lr}
 8010aa2:	4605      	mov	r5, r0
 8010aa4:	460c      	mov	r4, r1
 8010aa6:	d904      	bls.n	8010ab2 <_raise_r+0x14>
 8010aa8:	2316      	movs	r3, #22
 8010aaa:	6003      	str	r3, [r0, #0]
 8010aac:	f04f 30ff 	mov.w	r0, #4294967295
 8010ab0:	bd38      	pop	{r3, r4, r5, pc}
 8010ab2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010ab4:	b112      	cbz	r2, 8010abc <_raise_r+0x1e>
 8010ab6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010aba:	b94b      	cbnz	r3, 8010ad0 <_raise_r+0x32>
 8010abc:	4628      	mov	r0, r5
 8010abe:	f000 f831 	bl	8010b24 <_getpid_r>
 8010ac2:	4622      	mov	r2, r4
 8010ac4:	4601      	mov	r1, r0
 8010ac6:	4628      	mov	r0, r5
 8010ac8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010acc:	f000 b818 	b.w	8010b00 <_kill_r>
 8010ad0:	2b01      	cmp	r3, #1
 8010ad2:	d00a      	beq.n	8010aea <_raise_r+0x4c>
 8010ad4:	1c59      	adds	r1, r3, #1
 8010ad6:	d103      	bne.n	8010ae0 <_raise_r+0x42>
 8010ad8:	2316      	movs	r3, #22
 8010ada:	6003      	str	r3, [r0, #0]
 8010adc:	2001      	movs	r0, #1
 8010ade:	e7e7      	b.n	8010ab0 <_raise_r+0x12>
 8010ae0:	2100      	movs	r1, #0
 8010ae2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010ae6:	4620      	mov	r0, r4
 8010ae8:	4798      	blx	r3
 8010aea:	2000      	movs	r0, #0
 8010aec:	e7e0      	b.n	8010ab0 <_raise_r+0x12>
	...

08010af0 <raise>:
 8010af0:	4b02      	ldr	r3, [pc, #8]	@ (8010afc <raise+0xc>)
 8010af2:	4601      	mov	r1, r0
 8010af4:	6818      	ldr	r0, [r3, #0]
 8010af6:	f7ff bfd2 	b.w	8010a9e <_raise_r>
 8010afa:	bf00      	nop
 8010afc:	20000034 	.word	0x20000034

08010b00 <_kill_r>:
 8010b00:	b538      	push	{r3, r4, r5, lr}
 8010b02:	4d07      	ldr	r5, [pc, #28]	@ (8010b20 <_kill_r+0x20>)
 8010b04:	2300      	movs	r3, #0
 8010b06:	4604      	mov	r4, r0
 8010b08:	4608      	mov	r0, r1
 8010b0a:	4611      	mov	r1, r2
 8010b0c:	602b      	str	r3, [r5, #0]
 8010b0e:	f7f0 fcbd 	bl	800148c <_kill>
 8010b12:	1c43      	adds	r3, r0, #1
 8010b14:	d102      	bne.n	8010b1c <_kill_r+0x1c>
 8010b16:	682b      	ldr	r3, [r5, #0]
 8010b18:	b103      	cbz	r3, 8010b1c <_kill_r+0x1c>
 8010b1a:	6023      	str	r3, [r4, #0]
 8010b1c:	bd38      	pop	{r3, r4, r5, pc}
 8010b1e:	bf00      	nop
 8010b20:	200053c0 	.word	0x200053c0

08010b24 <_getpid_r>:
 8010b24:	f7f0 bcaa 	b.w	800147c <_getpid>

08010b28 <_malloc_usable_size_r>:
 8010b28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b2c:	1f18      	subs	r0, r3, #4
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	bfbc      	itt	lt
 8010b32:	580b      	ldrlt	r3, [r1, r0]
 8010b34:	18c0      	addlt	r0, r0, r3
 8010b36:	4770      	bx	lr

08010b38 <_init>:
 8010b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b3a:	bf00      	nop
 8010b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b3e:	bc08      	pop	{r3}
 8010b40:	469e      	mov	lr, r3
 8010b42:	4770      	bx	lr

08010b44 <_fini>:
 8010b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b46:	bf00      	nop
 8010b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b4a:	bc08      	pop	{r3}
 8010b4c:	469e      	mov	lr, r3
 8010b4e:	4770      	bx	lr
