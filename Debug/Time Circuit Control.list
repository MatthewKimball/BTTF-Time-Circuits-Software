
Time Circuit Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd60  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000036c  0800cef0  0800cef0  0000def0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d25c  0800d25c  0000f080  2**0
                  CONTENTS
  4 .ARM          00000008  0800d25c  0800d25c  0000e25c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d264  0800d264  0000f080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d264  0800d264  0000e264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d268  0800d268  0000e268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800d26c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f080  2**0
                  CONTENTS
 10 .bss          00000ca4  20000080  20000080  0000f080  2**2
                  ALLOC
 11 ._user_heap_stack 00004004  20000d24  20000d24  0000f080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dfc5  00000000  00000000  0000f0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005156  00000000  00000000  0002d075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001870  00000000  00000000  000321d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012af  00000000  00000000  00033a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028217  00000000  00000000  00034cef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027c4f  00000000  00000000  0005cf06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9802  00000000  00000000  00084b55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015e357  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006d74  00000000  00000000  0015e39c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  00165110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ced8 	.word	0x0800ced8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800ced8 	.word	0x0800ced8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000566:	463b      	mov	r3, r7
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000572:	4b21      	ldr	r3, [pc, #132]	@ (80005f8 <MX_ADC1_Init+0x98>)
 8000574:	4a21      	ldr	r2, [pc, #132]	@ (80005fc <MX_ADC1_Init+0x9c>)
 8000576:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000578:	4b1f      	ldr	r3, [pc, #124]	@ (80005f8 <MX_ADC1_Init+0x98>)
 800057a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800057e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000580:	4b1d      	ldr	r3, [pc, #116]	@ (80005f8 <MX_ADC1_Init+0x98>)
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000586:	4b1c      	ldr	r3, [pc, #112]	@ (80005f8 <MX_ADC1_Init+0x98>)
 8000588:	2200      	movs	r2, #0
 800058a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800058c:	4b1a      	ldr	r3, [pc, #104]	@ (80005f8 <MX_ADC1_Init+0x98>)
 800058e:	2200      	movs	r2, #0
 8000590:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000592:	4b19      	ldr	r3, [pc, #100]	@ (80005f8 <MX_ADC1_Init+0x98>)
 8000594:	2200      	movs	r2, #0
 8000596:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800059a:	4b17      	ldr	r3, [pc, #92]	@ (80005f8 <MX_ADC1_Init+0x98>)
 800059c:	2200      	movs	r2, #0
 800059e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005a0:	4b15      	ldr	r3, [pc, #84]	@ (80005f8 <MX_ADC1_Init+0x98>)
 80005a2:	4a17      	ldr	r2, [pc, #92]	@ (8000600 <MX_ADC1_Init+0xa0>)
 80005a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005a6:	4b14      	ldr	r3, [pc, #80]	@ (80005f8 <MX_ADC1_Init+0x98>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005ac:	4b12      	ldr	r3, [pc, #72]	@ (80005f8 <MX_ADC1_Init+0x98>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005b2:	4b11      	ldr	r3, [pc, #68]	@ (80005f8 <MX_ADC1_Init+0x98>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ba:	4b0f      	ldr	r3, [pc, #60]	@ (80005f8 <MX_ADC1_Init+0x98>)
 80005bc:	2201      	movs	r2, #1
 80005be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005c0:	480d      	ldr	r0, [pc, #52]	@ (80005f8 <MX_ADC1_Init+0x98>)
 80005c2:	f001 f835 	bl	8001630 <HAL_ADC_Init>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005cc:	f000 fcb0 	bl	8000f30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005d4:	2301      	movs	r3, #1
 80005d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005dc:	463b      	mov	r3, r7
 80005de:	4619      	mov	r1, r3
 80005e0:	4805      	ldr	r0, [pc, #20]	@ (80005f8 <MX_ADC1_Init+0x98>)
 80005e2:	f001 f869 	bl	80016b8 <HAL_ADC_ConfigChannel>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005ec:	f000 fca0 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005f0:	bf00      	nop
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	2000009c 	.word	0x2000009c
 80005fc:	40012000 	.word	0x40012000
 8000600:	0f000001 	.word	0x0f000001

08000604 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08a      	sub	sp, #40	@ 0x28
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a17      	ldr	r2, [pc, #92]	@ (8000680 <HAL_ADC_MspInit+0x7c>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d127      	bne.n	8000676 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	613b      	str	r3, [r7, #16]
 800062a:	4b16      	ldr	r3, [pc, #88]	@ (8000684 <HAL_ADC_MspInit+0x80>)
 800062c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800062e:	4a15      	ldr	r2, [pc, #84]	@ (8000684 <HAL_ADC_MspInit+0x80>)
 8000630:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000634:	6453      	str	r3, [r2, #68]	@ 0x44
 8000636:	4b13      	ldr	r3, [pc, #76]	@ (8000684 <HAL_ADC_MspInit+0x80>)
 8000638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800063a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800063e:	613b      	str	r3, [r7, #16]
 8000640:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	4b0f      	ldr	r3, [pc, #60]	@ (8000684 <HAL_ADC_MspInit+0x80>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	4a0e      	ldr	r2, [pc, #56]	@ (8000684 <HAL_ADC_MspInit+0x80>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6313      	str	r3, [r2, #48]	@ 0x30
 8000652:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <HAL_ADC_MspInit+0x80>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = CAN_ID_SWITCH_4_Pin;
 800065e:	2301      	movs	r3, #1
 8000660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000662:	2303      	movs	r3, #3
 8000664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CAN_ID_SWITCH_4_GPIO_Port, &GPIO_InitStruct);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4619      	mov	r1, r3
 8000670:	4805      	ldr	r0, [pc, #20]	@ (8000688 <HAL_ADC_MspInit+0x84>)
 8000672:	f002 f82d 	bl	80026d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000676:	bf00      	nop
 8000678:	3728      	adds	r7, #40	@ 0x28
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40012000 	.word	0x40012000
 8000684:	40023800 	.word	0x40023800
 8000688:	40020000 	.word	0x40020000

0800068c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000690:	4b16      	ldr	r3, [pc, #88]	@ (80006ec <MX_CAN1_Init+0x60>)
 8000692:	4a17      	ldr	r2, [pc, #92]	@ (80006f0 <MX_CAN1_Init+0x64>)
 8000694:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000696:	4b15      	ldr	r3, [pc, #84]	@ (80006ec <MX_CAN1_Init+0x60>)
 8000698:	2210      	movs	r2, #16
 800069a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800069c:	4b13      	ldr	r3, [pc, #76]	@ (80006ec <MX_CAN1_Init+0x60>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006a2:	4b12      	ldr	r3, [pc, #72]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80006a8:	4b10      	ldr	r3, [pc, #64]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80006ae:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006b4:	4b0d      	ldr	r3, [pc, #52]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006ba:	4b0c      	ldr	r3, [pc, #48]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006bc:	2200      	movs	r2, #0
 80006be:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006c0:	4b0a      	ldr	r3, [pc, #40]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006c6:	4b09      	ldr	r3, [pc, #36]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006cc:	4b07      	ldr	r3, [pc, #28]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006d2:	4b06      	ldr	r3, [pc, #24]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006d8:	4804      	ldr	r0, [pc, #16]	@ (80006ec <MX_CAN1_Init+0x60>)
 80006da:	f001 fa0b 	bl	8001af4 <HAL_CAN_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80006e4:	f000 fc24 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	200000e4 	.word	0x200000e4
 80006f0:	40006400 	.word	0x40006400

080006f4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08a      	sub	sp, #40	@ 0x28
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a19      	ldr	r2, [pc, #100]	@ (8000778 <HAL_CAN_MspInit+0x84>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d12c      	bne.n	8000770 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
 800071a:	4b18      	ldr	r3, [pc, #96]	@ (800077c <HAL_CAN_MspInit+0x88>)
 800071c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800071e:	4a17      	ldr	r2, [pc, #92]	@ (800077c <HAL_CAN_MspInit+0x88>)
 8000720:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000724:	6413      	str	r3, [r2, #64]	@ 0x40
 8000726:	4b15      	ldr	r3, [pc, #84]	@ (800077c <HAL_CAN_MspInit+0x88>)
 8000728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800072a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	4b11      	ldr	r3, [pc, #68]	@ (800077c <HAL_CAN_MspInit+0x88>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a10      	ldr	r2, [pc, #64]	@ (800077c <HAL_CAN_MspInit+0x88>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <HAL_CAN_MspInit+0x88>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800074e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000754:	2302      	movs	r3, #2
 8000756:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075c:	2303      	movs	r3, #3
 800075e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000760:	2309      	movs	r3, #9
 8000762:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4619      	mov	r1, r3
 800076a:	4805      	ldr	r0, [pc, #20]	@ (8000780 <HAL_CAN_MspInit+0x8c>)
 800076c:	f001 ffb0 	bl	80026d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000770:	bf00      	nop
 8000772:	3728      	adds	r7, #40	@ 0x28
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40006400 	.word	0x40006400
 800077c:	40023800 	.word	0x40023800
 8000780:	40020000 	.word	0x40020000

08000784 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <MX_DMA_Init+0x3c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a0b      	ldr	r2, [pc, #44]	@ (80007c0 <MX_DMA_Init+0x3c>)
 8000794:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <MX_DMA_Init+0x3c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2100      	movs	r1, #0
 80007aa:	200f      	movs	r0, #15
 80007ac:	f001 fb79 	bl	8001ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80007b0:	200f      	movs	r0, #15
 80007b2:	f001 fb92 	bl	8001eda <HAL_NVIC_EnableIRQ>

}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800

080007c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	@ 0x28
 80007c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	4b6e      	ldr	r3, [pc, #440]	@ (8000998 <MX_GPIO_Init+0x1d4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a6d      	ldr	r2, [pc, #436]	@ (8000998 <MX_GPIO_Init+0x1d4>)
 80007e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b6b      	ldr	r3, [pc, #428]	@ (8000998 <MX_GPIO_Init+0x1d4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	4b67      	ldr	r3, [pc, #412]	@ (8000998 <MX_GPIO_Init+0x1d4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a66      	ldr	r2, [pc, #408]	@ (8000998 <MX_GPIO_Init+0x1d4>)
 8000800:	f043 0304 	orr.w	r3, r3, #4
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b64      	ldr	r3, [pc, #400]	@ (8000998 <MX_GPIO_Init+0x1d4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0304 	and.w	r3, r3, #4
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	4b60      	ldr	r3, [pc, #384]	@ (8000998 <MX_GPIO_Init+0x1d4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	4a5f      	ldr	r2, [pc, #380]	@ (8000998 <MX_GPIO_Init+0x1d4>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6313      	str	r3, [r2, #48]	@ 0x30
 8000822:	4b5d      	ldr	r3, [pc, #372]	@ (8000998 <MX_GPIO_Init+0x1d4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b59      	ldr	r3, [pc, #356]	@ (8000998 <MX_GPIO_Init+0x1d4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	4a58      	ldr	r2, [pc, #352]	@ (8000998 <MX_GPIO_Init+0x1d4>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	6313      	str	r3, [r2, #48]	@ 0x30
 800083e:	4b56      	ldr	r3, [pc, #344]	@ (8000998 <MX_GPIO_Init+0x1d4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	603b      	str	r3, [r7, #0]
 800084e:	4b52      	ldr	r3, [pc, #328]	@ (8000998 <MX_GPIO_Init+0x1d4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a51      	ldr	r2, [pc, #324]	@ (8000998 <MX_GPIO_Init+0x1d4>)
 8000854:	f043 0308 	orr.w	r3, r3, #8
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b4f      	ldr	r3, [pc, #316]	@ (8000998 <MX_GPIO_Init+0x1d4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0308 	and.w	r3, r3, #8
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, KEYPAD_COL_2_Pin|KEYPAD_COL_1_Pin|DIAGNOSTIC_RGB_LED_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	f241 0105 	movw	r1, #4101	@ 0x1005
 800086c:	484b      	ldr	r0, [pc, #300]	@ (800099c <MX_GPIO_Init+0x1d8>)
 800086e:	f002 f8e3 	bl	8002a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WHITE_LED_Pin|KEYPAD_COL_3_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2118      	movs	r1, #24
 8000876:	484a      	ldr	r0, [pc, #296]	@ (80009a0 <MX_GPIO_Init+0x1dc>)
 8000878:	f002 f8de 	bl	8002a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800087c:	2201      	movs	r2, #1
 800087e:	2120      	movs	r1, #32
 8000880:	4846      	ldr	r0, [pc, #280]	@ (800099c <MX_GPIO_Init+0x1d8>)
 8000882:	f002 f8d9 	bl	8002a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_MODE_GPIO_Port, SD_MODE_Pin, GPIO_PIN_SET);
 8000886:	2201      	movs	r2, #1
 8000888:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800088c:	4845      	ldr	r0, [pc, #276]	@ (80009a4 <MX_GPIO_Init+0x1e0>)
 800088e:	f002 f8d3 	bl	8002a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = KEYPAD_COL_2_Pin|KEYPAD_COL_1_Pin|SD_CS_Pin|DIAGNOSTIC_RGB_LED_Pin;
 8000892:	f241 0325 	movw	r3, #4133	@ 0x1025
 8000896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000898:	2301      	movs	r3, #1
 800089a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4619      	mov	r1, r3
 80008aa:	483c      	ldr	r0, [pc, #240]	@ (800099c <MX_GPIO_Init+0x1d8>)
 80008ac:	f001 ff10 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = KEYPAD_ROW_1_Pin|KEYPAD_ROW_4_Pin|KEYPAD_ROW_3_Pin;
 80008b0:	231a      	movs	r3, #26
 80008b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008b8:	2302      	movs	r3, #2
 80008ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	4619      	mov	r1, r3
 80008c2:	4836      	ldr	r0, [pc, #216]	@ (800099c <MX_GPIO_Init+0x1d8>)
 80008c4:	f001 ff04 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEYPAD_ROW_2_Pin;
 80008c8:	2302      	movs	r3, #2
 80008ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008d0:	2302      	movs	r3, #2
 80008d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEYPAD_ROW_2_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4619      	mov	r1, r3
 80008da:	4831      	ldr	r0, [pc, #196]	@ (80009a0 <MX_GPIO_Init+0x1dc>)
 80008dc:	f001 fef8 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = WHITE_LED_Pin|KEYPAD_COL_3_Pin;
 80008e0:	2318      	movs	r3, #24
 80008e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e4:	2301      	movs	r3, #1
 80008e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	4619      	mov	r1, r3
 80008f6:	482a      	ldr	r0, [pc, #168]	@ (80009a0 <MX_GPIO_Init+0x1dc>)
 80008f8:	f001 feea 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SD_CD_Pin|KEYPAD_ENTER_Pin|GLITCH_SWITCH_Pin;
 80008fc:	2323      	movs	r3, #35	@ 0x23
 80008fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000900:	2300      	movs	r3, #0
 8000902:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	4619      	mov	r1, r3
 800090e:	4825      	ldr	r0, [pc, #148]	@ (80009a4 <MX_GPIO_Init+0x1e0>)
 8000910:	f001 fede 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_MODE_Pin;
 8000914:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800091a:	2311      	movs	r3, #17
 800091c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_MODE_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	4619      	mov	r1, r3
 800092c:	481d      	ldr	r0, [pc, #116]	@ (80009a4 <MX_GPIO_Init+0x1e0>)
 800092e:	f001 fecf 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CAN_ID_SWITCH_1_Pin|CAN_ID_SWITCH_2_Pin|CAN_ID_SWITCH_3_Pin|MUTE_SWITCH_Pin;
 8000932:	f44f 63b8 	mov.w	r3, #1472	@ 0x5c0
 8000936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000938:	2300      	movs	r3, #0
 800093a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	4619      	mov	r1, r3
 8000946:	4815      	ldr	r0, [pc, #84]	@ (800099c <MX_GPIO_Init+0x1d8>)
 8000948:	f001 fec2 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TIME_TRAVEL_SIM_Pin;
 800094c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000952:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000956:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TIME_TRAVEL_SIM_GPIO_Port, &GPIO_InitStruct);
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4619      	mov	r1, r3
 8000962:	480e      	ldr	r0, [pc, #56]	@ (800099c <MX_GPIO_Init+0x1d8>)
 8000964:	f001 feb4 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INTERRUPT_Pin;
 8000968:	2304      	movs	r3, #4
 800096a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096c:	2300      	movs	r3, #0
 800096e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4619      	mov	r1, r3
 800097a:	480b      	ldr	r0, [pc, #44]	@ (80009a8 <MX_GPIO_Init+0x1e4>)
 800097c:	f001 fea8 	bl	80026d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000980:	2200      	movs	r2, #0
 8000982:	2100      	movs	r1, #0
 8000984:	2028      	movs	r0, #40	@ 0x28
 8000986:	f001 fa8c 	bl	8001ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800098a:	2028      	movs	r0, #40	@ 0x28
 800098c:	f001 faa5 	bl	8001eda <HAL_NVIC_EnableIRQ>

}
 8000990:	bf00      	nop
 8000992:	3728      	adds	r7, #40	@ 0x28
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40023800 	.word	0x40023800
 800099c:	40020800 	.word	0x40020800
 80009a0:	40020000 	.word	0x40020000
 80009a4:	40020400 	.word	0x40020400
 80009a8:	40020c00 	.word	0x40020c00

080009ac <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009b0:	4b12      	ldr	r3, [pc, #72]	@ (80009fc <MX_I2C1_Init+0x50>)
 80009b2:	4a13      	ldr	r2, [pc, #76]	@ (8000a00 <MX_I2C1_Init+0x54>)
 80009b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009b6:	4b11      	ldr	r3, [pc, #68]	@ (80009fc <MX_I2C1_Init+0x50>)
 80009b8:	4a12      	ldr	r2, [pc, #72]	@ (8000a04 <MX_I2C1_Init+0x58>)
 80009ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	@ (80009fc <MX_I2C1_Init+0x50>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	@ (80009fc <MX_I2C1_Init+0x50>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	@ (80009fc <MX_I2C1_Init+0x50>)
 80009ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009d0:	4b0a      	ldr	r3, [pc, #40]	@ (80009fc <MX_I2C1_Init+0x50>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009d6:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <MX_I2C1_Init+0x50>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009dc:	4b07      	ldr	r3, [pc, #28]	@ (80009fc <MX_I2C1_Init+0x50>)
 80009de:	2200      	movs	r2, #0
 80009e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009e2:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <MX_I2C1_Init+0x50>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009e8:	4804      	ldr	r0, [pc, #16]	@ (80009fc <MX_I2C1_Init+0x50>)
 80009ea:	f002 f863 	bl	8002ab4 <HAL_I2C_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009f4:	f000 fa9c 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	2000010c 	.word	0x2000010c
 8000a00:	40005400 	.word	0x40005400
 8000a04:	000186a0 	.word	0x000186a0

08000a08 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a0c:	4b12      	ldr	r3, [pc, #72]	@ (8000a58 <MX_I2C2_Init+0x50>)
 8000a0e:	4a13      	ldr	r2, [pc, #76]	@ (8000a5c <MX_I2C2_Init+0x54>)
 8000a10:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a12:	4b11      	ldr	r3, [pc, #68]	@ (8000a58 <MX_I2C2_Init+0x50>)
 8000a14:	4a12      	ldr	r2, [pc, #72]	@ (8000a60 <MX_I2C2_Init+0x58>)
 8000a16:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	@ (8000a58 <MX_I2C2_Init+0x50>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a58 <MX_I2C2_Init+0x50>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <MX_I2C2_Init+0x50>)
 8000a26:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a2a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a58 <MX_I2C2_Init+0x50>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a32:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <MX_I2C2_Init+0x50>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a38:	4b07      	ldr	r3, [pc, #28]	@ (8000a58 <MX_I2C2_Init+0x50>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a3e:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <MX_I2C2_Init+0x50>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a44:	4804      	ldr	r0, [pc, #16]	@ (8000a58 <MX_I2C2_Init+0x50>)
 8000a46:	f002 f835 	bl	8002ab4 <HAL_I2C_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a50:	f000 fa6e 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000160 	.word	0x20000160
 8000a5c:	40005800 	.word	0x40005800
 8000a60:	000186a0 	.word	0x000186a0

08000a64 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a68:	4b12      	ldr	r3, [pc, #72]	@ (8000ab4 <MX_I2C3_Init+0x50>)
 8000a6a:	4a13      	ldr	r2, [pc, #76]	@ (8000ab8 <MX_I2C3_Init+0x54>)
 8000a6c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000a6e:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <MX_I2C3_Init+0x50>)
 8000a70:	4a12      	ldr	r2, [pc, #72]	@ (8000abc <MX_I2C3_Init+0x58>)
 8000a72:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab4 <MX_I2C3_Init+0x50>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab4 <MX_I2C3_Init+0x50>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab4 <MX_I2C3_Init+0x50>)
 8000a82:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a86:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a88:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab4 <MX_I2C3_Init+0x50>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000a8e:	4b09      	ldr	r3, [pc, #36]	@ (8000ab4 <MX_I2C3_Init+0x50>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a94:	4b07      	ldr	r3, [pc, #28]	@ (8000ab4 <MX_I2C3_Init+0x50>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a9a:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <MX_I2C3_Init+0x50>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000aa0:	4804      	ldr	r0, [pc, #16]	@ (8000ab4 <MX_I2C3_Init+0x50>)
 8000aa2:	f002 f807 	bl	8002ab4 <HAL_I2C_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000aac:	f000 fa40 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	200001b4 	.word	0x200001b4
 8000ab8:	40005c00 	.word	0x40005c00
 8000abc:	000186a0 	.word	0x000186a0

08000ac0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08e      	sub	sp, #56	@ 0x38
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a5b      	ldr	r2, [pc, #364]	@ (8000c4c <HAL_I2C_MspInit+0x18c>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d12c      	bne.n	8000b3c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	623b      	str	r3, [r7, #32]
 8000ae6:	4b5a      	ldr	r3, [pc, #360]	@ (8000c50 <HAL_I2C_MspInit+0x190>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	4a59      	ldr	r2, [pc, #356]	@ (8000c50 <HAL_I2C_MspInit+0x190>)
 8000aec:	f043 0302 	orr.w	r3, r3, #2
 8000af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af2:	4b57      	ldr	r3, [pc, #348]	@ (8000c50 <HAL_I2C_MspInit+0x190>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	f003 0302 	and.w	r3, r3, #2
 8000afa:	623b      	str	r3, [r7, #32]
 8000afc:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 8000afe:	23c0      	movs	r3, #192	@ 0xc0
 8000b00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b02:	2312      	movs	r3, #18
 8000b04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b0e:	2304      	movs	r3, #4
 8000b10:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b16:	4619      	mov	r1, r3
 8000b18:	484e      	ldr	r0, [pc, #312]	@ (8000c54 <HAL_I2C_MspInit+0x194>)
 8000b1a:	f001 fdd9 	bl	80026d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
 8000b22:	4b4b      	ldr	r3, [pc, #300]	@ (8000c50 <HAL_I2C_MspInit+0x190>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b26:	4a4a      	ldr	r2, [pc, #296]	@ (8000c50 <HAL_I2C_MspInit+0x190>)
 8000b28:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b2e:	4b48      	ldr	r3, [pc, #288]	@ (8000c50 <HAL_I2C_MspInit+0x190>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b36:	61fb      	str	r3, [r7, #28]
 8000b38:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000b3a:	e083      	b.n	8000c44 <HAL_I2C_MspInit+0x184>
  else if(i2cHandle->Instance==I2C2)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a45      	ldr	r2, [pc, #276]	@ (8000c58 <HAL_I2C_MspInit+0x198>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d12d      	bne.n	8000ba2 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	61bb      	str	r3, [r7, #24]
 8000b4a:	4b41      	ldr	r3, [pc, #260]	@ (8000c50 <HAL_I2C_MspInit+0x190>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	4a40      	ldr	r2, [pc, #256]	@ (8000c50 <HAL_I2C_MspInit+0x190>)
 8000b50:	f043 0302 	orr.w	r3, r3, #2
 8000b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b56:	4b3e      	ldr	r3, [pc, #248]	@ (8000c50 <HAL_I2C_MspInit+0x190>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	f003 0302 	and.w	r3, r3, #2
 8000b5e:	61bb      	str	r3, [r7, #24]
 8000b60:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b62:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000b66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b68:	2312      	movs	r3, #18
 8000b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b70:	2303      	movs	r3, #3
 8000b72:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b74:	2304      	movs	r3, #4
 8000b76:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4835      	ldr	r0, [pc, #212]	@ (8000c54 <HAL_I2C_MspInit+0x194>)
 8000b80:	f001 fda6 	bl	80026d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	4b31      	ldr	r3, [pc, #196]	@ (8000c50 <HAL_I2C_MspInit+0x190>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8c:	4a30      	ldr	r2, [pc, #192]	@ (8000c50 <HAL_I2C_MspInit+0x190>)
 8000b8e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b94:	4b2e      	ldr	r3, [pc, #184]	@ (8000c50 <HAL_I2C_MspInit+0x190>)
 8000b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b9c:	617b      	str	r3, [r7, #20]
 8000b9e:	697b      	ldr	r3, [r7, #20]
}
 8000ba0:	e050      	b.n	8000c44 <HAL_I2C_MspInit+0x184>
  else if(i2cHandle->Instance==I2C3)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a2d      	ldr	r2, [pc, #180]	@ (8000c5c <HAL_I2C_MspInit+0x19c>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d14b      	bne.n	8000c44 <HAL_I2C_MspInit+0x184>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bac:	2300      	movs	r3, #0
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	4b27      	ldr	r3, [pc, #156]	@ (8000c50 <HAL_I2C_MspInit+0x190>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb4:	4a26      	ldr	r2, [pc, #152]	@ (8000c50 <HAL_I2C_MspInit+0x190>)
 8000bb6:	f043 0304 	orr.w	r3, r3, #4
 8000bba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bbc:	4b24      	ldr	r3, [pc, #144]	@ (8000c50 <HAL_I2C_MspInit+0x190>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc0:	f003 0304 	and.w	r3, r3, #4
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	4b20      	ldr	r3, [pc, #128]	@ (8000c50 <HAL_I2C_MspInit+0x190>)
 8000bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd0:	4a1f      	ldr	r2, [pc, #124]	@ (8000c50 <HAL_I2C_MspInit+0x190>)
 8000bd2:	f043 0301 	orr.w	r3, r3, #1
 8000bd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c50 <HAL_I2C_MspInit+0x190>)
 8000bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bdc:	f003 0301 	and.w	r3, r3, #1
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TC_DISPLAY_SDA_Pin;
 8000be4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000be8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bea:	2312      	movs	r3, #18
 8000bec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bf6:	2304      	movs	r3, #4
 8000bf8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(TC_DISPLAY_SDA_GPIO_Port, &GPIO_InitStruct);
 8000bfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4817      	ldr	r0, [pc, #92]	@ (8000c60 <HAL_I2C_MspInit+0x1a0>)
 8000c02:	f001 fd65 	bl	80026d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TC_DISPLAY_SCL_Pin;
 8000c06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c0c:	2312      	movs	r3, #18
 8000c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c14:	2303      	movs	r3, #3
 8000c16:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c18:	2304      	movs	r3, #4
 8000c1a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(TC_DISPLAY_SCL_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c20:	4619      	mov	r1, r3
 8000c22:	4810      	ldr	r0, [pc, #64]	@ (8000c64 <HAL_I2C_MspInit+0x1a4>)
 8000c24:	f001 fd54 	bl	80026d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	4b08      	ldr	r3, [pc, #32]	@ (8000c50 <HAL_I2C_MspInit+0x190>)
 8000c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c30:	4a07      	ldr	r2, [pc, #28]	@ (8000c50 <HAL_I2C_MspInit+0x190>)
 8000c32:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000c36:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c38:	4b05      	ldr	r3, [pc, #20]	@ (8000c50 <HAL_I2C_MspInit+0x190>)
 8000c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	68bb      	ldr	r3, [r7, #8]
}
 8000c44:	bf00      	nop
 8000c46:	3738      	adds	r7, #56	@ 0x38
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40005400 	.word	0x40005400
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40020400 	.word	0x40020400
 8000c58:	40005800 	.word	0x40005800
 8000c5c:	40005c00 	.word	0x40005c00
 8000c60:	40020800 	.word	0x40020800
 8000c64:	40020000 	.word	0x40020000

08000c68 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000c6c:	4b13      	ldr	r3, [pc, #76]	@ (8000cbc <MX_I2S2_Init+0x54>)
 8000c6e:	4a14      	ldr	r2, [pc, #80]	@ (8000cc0 <MX_I2S2_Init+0x58>)
 8000c70:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000c72:	4b12      	ldr	r3, [pc, #72]	@ (8000cbc <MX_I2S2_Init+0x54>)
 8000c74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c78:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000c7a:	4b10      	ldr	r3, [pc, #64]	@ (8000cbc <MX_I2S2_Init+0x54>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000c80:	4b0e      	ldr	r3, [pc, #56]	@ (8000cbc <MX_I2S2_Init+0x54>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000c86:	4b0d      	ldr	r3, [pc, #52]	@ (8000cbc <MX_I2S2_Init+0x54>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000cbc <MX_I2S2_Init+0x54>)
 8000c8e:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000c92:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000c94:	4b09      	ldr	r3, [pc, #36]	@ (8000cbc <MX_I2S2_Init+0x54>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000c9a:	4b08      	ldr	r3, [pc, #32]	@ (8000cbc <MX_I2S2_Init+0x54>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <MX_I2S2_Init+0x54>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000ca6:	4805      	ldr	r0, [pc, #20]	@ (8000cbc <MX_I2S2_Init+0x54>)
 8000ca8:	f002 fefe 	bl	8003aa8 <HAL_I2S_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000cb2:	f000 f93d 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000208 	.word	0x20000208
 8000cc0:	40003800 	.word	0x40003800

08000cc4 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08e      	sub	sp, #56	@ 0x38
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI2)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a3e      	ldr	r2, [pc, #248]	@ (8000de8 <HAL_I2S_MspInit+0x124>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d175      	bne.n	8000de0 <HAL_I2S_MspInit+0x11c>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 96;
 8000cf8:	2360      	movs	r3, #96	@ 0x60
 8000cfa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	4618      	mov	r0, r3
 8000d06:	f004 fb09 	bl	800531c <HAL_RCCEx_PeriphCLKConfig>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000d10:	f000 f90e 	bl	8000f30 <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d14:	2300      	movs	r3, #0
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	4b34      	ldr	r3, [pc, #208]	@ (8000dec <HAL_I2S_MspInit+0x128>)
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1c:	4a33      	ldr	r2, [pc, #204]	@ (8000dec <HAL_I2S_MspInit+0x128>)
 8000d1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d22:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d24:	4b31      	ldr	r3, [pc, #196]	@ (8000dec <HAL_I2S_MspInit+0x128>)
 8000d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d30:	2300      	movs	r3, #0
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	4b2d      	ldr	r3, [pc, #180]	@ (8000dec <HAL_I2S_MspInit+0x128>)
 8000d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d38:	4a2c      	ldr	r2, [pc, #176]	@ (8000dec <HAL_I2S_MspInit+0x128>)
 8000d3a:	f043 0302 	orr.w	r3, r3, #2
 8000d3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d40:	4b2a      	ldr	r3, [pc, #168]	@ (8000dec <HAL_I2S_MspInit+0x128>)
 8000d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d44:	f003 0302 	and.w	r3, r3, #2
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000d4c:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8000d50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d5e:	2305      	movs	r3, #5
 8000d60:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d66:	4619      	mov	r1, r3
 8000d68:	4821      	ldr	r0, [pc, #132]	@ (8000df0 <HAL_I2S_MspInit+0x12c>)
 8000d6a:	f001 fcb1 	bl	80026d0 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000d6e:	4b21      	ldr	r3, [pc, #132]	@ (8000df4 <HAL_I2S_MspInit+0x130>)
 8000d70:	4a21      	ldr	r2, [pc, #132]	@ (8000df8 <HAL_I2S_MspInit+0x134>)
 8000d72:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000d74:	4b1f      	ldr	r3, [pc, #124]	@ (8000df4 <HAL_I2S_MspInit+0x130>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000df4 <HAL_I2S_MspInit+0x130>)
 8000d7c:	2240      	movs	r2, #64	@ 0x40
 8000d7e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d80:	4b1c      	ldr	r3, [pc, #112]	@ (8000df4 <HAL_I2S_MspInit+0x130>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d86:	4b1b      	ldr	r3, [pc, #108]	@ (8000df4 <HAL_I2S_MspInit+0x130>)
 8000d88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d8c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d8e:	4b19      	ldr	r3, [pc, #100]	@ (8000df4 <HAL_I2S_MspInit+0x130>)
 8000d90:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d94:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d96:	4b17      	ldr	r3, [pc, #92]	@ (8000df4 <HAL_I2S_MspInit+0x130>)
 8000d98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d9c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000d9e:	4b15      	ldr	r3, [pc, #84]	@ (8000df4 <HAL_I2S_MspInit+0x130>)
 8000da0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000da4:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000da6:	4b13      	ldr	r3, [pc, #76]	@ (8000df4 <HAL_I2S_MspInit+0x130>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000dac:	4b11      	ldr	r3, [pc, #68]	@ (8000df4 <HAL_I2S_MspInit+0x130>)
 8000dae:	2204      	movs	r2, #4
 8000db0:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000db2:	4b10      	ldr	r3, [pc, #64]	@ (8000df4 <HAL_I2S_MspInit+0x130>)
 8000db4:	2203      	movs	r2, #3
 8000db6:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000db8:	4b0e      	ldr	r3, [pc, #56]	@ (8000df4 <HAL_I2S_MspInit+0x130>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000df4 <HAL_I2S_MspInit+0x130>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000dc4:	480b      	ldr	r0, [pc, #44]	@ (8000df4 <HAL_I2S_MspInit+0x130>)
 8000dc6:	f001 f8a3 	bl	8001f10 <HAL_DMA_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <HAL_I2S_MspInit+0x110>
    {
      Error_Handler();
 8000dd0:	f000 f8ae 	bl	8000f30 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4a07      	ldr	r2, [pc, #28]	@ (8000df4 <HAL_I2S_MspInit+0x130>)
 8000dd8:	639a      	str	r2, [r3, #56]	@ 0x38
 8000dda:	4a06      	ldr	r2, [pc, #24]	@ (8000df4 <HAL_I2S_MspInit+0x130>)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000de0:	bf00      	nop
 8000de2:	3738      	adds	r7, #56	@ 0x38
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40003800 	.word	0x40003800
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40020400 	.word	0x40020400
 8000df4:	20000250 	.word	0x20000250
 8000df8:	40026070 	.word	0x40026070

08000dfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  HAL_Init();
 8000e02:	f000 fb7f 	bl	8001504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e06:	f000 f82b 	bl	8000e60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e0a:	f7ff fcdb 	bl	80007c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e0e:	f7ff fcb9 	bl	8000784 <MX_DMA_Init>
  MX_CAN1_Init();
 8000e12:	f7ff fc3b 	bl	800068c <MX_CAN1_Init>
  MX_I2C1_Init();
 8000e16:	f7ff fdc9 	bl	80009ac <MX_I2C1_Init>
  MX_I2C2_Init();
 8000e1a:	f7ff fdf5 	bl	8000a08 <MX_I2C2_Init>
  MX_I2S2_Init();
 8000e1e:	f7ff ff23 	bl	8000c68 <MX_I2S2_Init>
  MX_I2C3_Init();
 8000e22:	f7ff fe1f 	bl	8000a64 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8000e26:	f000 fad1 	bl	80013cc <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000e2a:	f7ff fb99 	bl	8000560 <MX_ADC1_Init>
  MX_FATFS_Init();
 8000e2e:	f005 fdd9 	bl	80069e4 <MX_FATFS_Init>
  MX_RTC_Init();
 8000e32:	f000 f883 	bl	8000f3c <MX_RTC_Init>
  MX_SPI1_Init();
 8000e36:	f000 f909 	bl	800104c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */


  TimeCircuit_Control_Config_t* ptimeCircuitControl  = timeCircuit_control_init(&hi2c3, &hrtc, &hspi1, &hi2s2);
 8000e3a:	4b05      	ldr	r3, [pc, #20]	@ (8000e50 <main+0x54>)
 8000e3c:	4a05      	ldr	r2, [pc, #20]	@ (8000e54 <main+0x58>)
 8000e3e:	4906      	ldr	r1, [pc, #24]	@ (8000e58 <main+0x5c>)
 8000e40:	4806      	ldr	r0, [pc, #24]	@ (8000e5c <main+0x60>)
 8000e42:	f007 fbe7 	bl	8008614 <timeCircuit_control_init>
 8000e46:	6078      	str	r0, [r7, #4]


  while (1)
  {

    timeCircuit_control_update(ptimeCircuitControl);
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f008 f9d3 	bl	80091f4 <timeCircuit_control_update>
 8000e4e:	e7fb      	b.n	8000e48 <main+0x4c>
 8000e50:	20000208 	.word	0x20000208
 8000e54:	200002d0 	.word	0x200002d0
 8000e58:	200002b0 	.word	0x200002b0
 8000e5c:	200001b4 	.word	0x200001b4

08000e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b094      	sub	sp, #80	@ 0x50
 8000e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e66:	f107 0320 	add.w	r3, r7, #32
 8000e6a:	2230      	movs	r2, #48	@ 0x30
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f00b f897 	bl	800bfa2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e74:	f107 030c 	add.w	r3, r7, #12
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e84:	2300      	movs	r3, #0
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	4b27      	ldr	r3, [pc, #156]	@ (8000f28 <SystemClock_Config+0xc8>)
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8c:	4a26      	ldr	r2, [pc, #152]	@ (8000f28 <SystemClock_Config+0xc8>)
 8000e8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e94:	4b24      	ldr	r3, [pc, #144]	@ (8000f28 <SystemClock_Config+0xc8>)
 8000e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	4b21      	ldr	r3, [pc, #132]	@ (8000f2c <SystemClock_Config+0xcc>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a20      	ldr	r2, [pc, #128]	@ (8000f2c <SystemClock_Config+0xcc>)
 8000eaa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eae:	6013      	str	r3, [r2, #0]
 8000eb0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f2c <SystemClock_Config+0xcc>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ec0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ec4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ed0:	2304      	movs	r3, #4
 8000ed2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000ed4:	2354      	movs	r3, #84	@ 0x54
 8000ed6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000edc:	2304      	movs	r3, #4
 8000ede:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee0:	f107 0320 	add.w	r3, r7, #32
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f003 fd81 	bl	80049ec <HAL_RCC_OscConfig>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ef0:	f000 f81e 	bl	8000f30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef4:	230f      	movs	r3, #15
 8000ef6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f0a:	f107 030c 	add.w	r3, r7, #12
 8000f0e:	2102      	movs	r1, #2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f003 ffe3 	bl	8004edc <HAL_RCC_ClockConfig>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f1c:	f000 f808 	bl	8000f30 <Error_Handler>
  }
}
 8000f20:	bf00      	nop
 8000f22:	3750      	adds	r7, #80	@ 0x50
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40007000 	.word	0x40007000

08000f30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f34:	b672      	cpsid	i
}
 8000f36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <Error_Handler+0x8>

08000f3c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000f50:	2300      	movs	r3, #0
 8000f52:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f54:	4b25      	ldr	r3, [pc, #148]	@ (8000fec <MX_RTC_Init+0xb0>)
 8000f56:	4a26      	ldr	r2, [pc, #152]	@ (8000ff0 <MX_RTC_Init+0xb4>)
 8000f58:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000f5a:	4b24      	ldr	r3, [pc, #144]	@ (8000fec <MX_RTC_Init+0xb0>)
 8000f5c:	2240      	movs	r2, #64	@ 0x40
 8000f5e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 124;
 8000f60:	4b22      	ldr	r3, [pc, #136]	@ (8000fec <MX_RTC_Init+0xb0>)
 8000f62:	227c      	movs	r2, #124	@ 0x7c
 8000f64:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 7999;
 8000f66:	4b21      	ldr	r3, [pc, #132]	@ (8000fec <MX_RTC_Init+0xb0>)
 8000f68:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000f6c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000fec <MX_RTC_Init+0xb0>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f74:	4b1d      	ldr	r3, [pc, #116]	@ (8000fec <MX_RTC_Init+0xb0>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fec <MX_RTC_Init+0xb0>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f80:	481a      	ldr	r0, [pc, #104]	@ (8000fec <MX_RTC_Init+0xb0>)
 8000f82:	f004 fb0d 	bl	80055a0 <HAL_RTC_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000f8c:	f7ff ffd0 	bl	8000f30 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8000f90:	2301      	movs	r3, #1
 8000f92:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	71bb      	strb	r3, [r7, #6]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	71fb      	strb	r3, [r7, #7]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000fa8:	1d3b      	adds	r3, r7, #4
 8000faa:	2201      	movs	r2, #1
 8000fac:	4619      	mov	r1, r3
 8000fae:	480f      	ldr	r0, [pc, #60]	@ (8000fec <MX_RTC_Init+0xb0>)
 8000fb0:	f004 fb79 	bl	80056a6 <HAL_RTC_SetTime>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000fba:	f7ff ffb9 	bl	8000f30 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000fce:	463b      	mov	r3, r7
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4805      	ldr	r0, [pc, #20]	@ (8000fec <MX_RTC_Init+0xb0>)
 8000fd6:	f004 fc5e 	bl	8005896 <HAL_RTC_SetDate>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000fe0:	f7ff ffa6 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000fe4:	bf00      	nop
 8000fe6:	3718      	adds	r7, #24
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	200002b0 	.word	0x200002b0
 8000ff0:	40002800 	.word	0x40002800

08000ff4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ffc:	f107 0308 	add.w	r3, r7, #8
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a0c      	ldr	r2, [pc, #48]	@ (8001040 <HAL_RTC_MspInit+0x4c>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d110      	bne.n	8001036 <HAL_RTC_MspInit+0x42>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001014:	2302      	movs	r3, #2
 8001016:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV8;
 8001018:	4b0a      	ldr	r3, [pc, #40]	@ (8001044 <HAL_RTC_MspInit+0x50>)
 800101a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800101c:	f107 0308 	add.w	r3, r7, #8
 8001020:	4618      	mov	r0, r3
 8001022:	f004 f97b 	bl	800531c <HAL_RCCEx_PeriphCLKConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <HAL_RTC_MspInit+0x3c>
    {
      Error_Handler();
 800102c:	f7ff ff80 	bl	8000f30 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001030:	4b05      	ldr	r3, [pc, #20]	@ (8001048 <HAL_RTC_MspInit+0x54>)
 8001032:	2201      	movs	r2, #1
 8001034:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001036:	bf00      	nop
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40002800 	.word	0x40002800
 8001044:	00080300 	.word	0x00080300
 8001048:	42470e3c 	.word	0x42470e3c

0800104c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001050:	4b17      	ldr	r3, [pc, #92]	@ (80010b0 <MX_SPI1_Init+0x64>)
 8001052:	4a18      	ldr	r2, [pc, #96]	@ (80010b4 <MX_SPI1_Init+0x68>)
 8001054:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001056:	4b16      	ldr	r3, [pc, #88]	@ (80010b0 <MX_SPI1_Init+0x64>)
 8001058:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800105c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800105e:	4b14      	ldr	r3, [pc, #80]	@ (80010b0 <MX_SPI1_Init+0x64>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001064:	4b12      	ldr	r3, [pc, #72]	@ (80010b0 <MX_SPI1_Init+0x64>)
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800106a:	4b11      	ldr	r3, [pc, #68]	@ (80010b0 <MX_SPI1_Init+0x64>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001070:	4b0f      	ldr	r3, [pc, #60]	@ (80010b0 <MX_SPI1_Init+0x64>)
 8001072:	2200      	movs	r2, #0
 8001074:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001076:	4b0e      	ldr	r3, [pc, #56]	@ (80010b0 <MX_SPI1_Init+0x64>)
 8001078:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800107c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800107e:	4b0c      	ldr	r3, [pc, #48]	@ (80010b0 <MX_SPI1_Init+0x64>)
 8001080:	2200      	movs	r2, #0
 8001082:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001084:	4b0a      	ldr	r3, [pc, #40]	@ (80010b0 <MX_SPI1_Init+0x64>)
 8001086:	2200      	movs	r2, #0
 8001088:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800108a:	4b09      	ldr	r3, [pc, #36]	@ (80010b0 <MX_SPI1_Init+0x64>)
 800108c:	2200      	movs	r2, #0
 800108e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001090:	4b07      	ldr	r3, [pc, #28]	@ (80010b0 <MX_SPI1_Init+0x64>)
 8001092:	2200      	movs	r2, #0
 8001094:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001096:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <MX_SPI1_Init+0x64>)
 8001098:	220a      	movs	r2, #10
 800109a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800109c:	4804      	ldr	r0, [pc, #16]	@ (80010b0 <MX_SPI1_Init+0x64>)
 800109e:	f004 fd8b 	bl	8005bb8 <HAL_SPI_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010a8:	f7ff ff42 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	200002d0 	.word	0x200002d0
 80010b4:	40013000 	.word	0x40013000

080010b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08a      	sub	sp, #40	@ 0x28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a19      	ldr	r2, [pc, #100]	@ (800113c <HAL_SPI_MspInit+0x84>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d12b      	bne.n	8001132 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
 80010de:	4b18      	ldr	r3, [pc, #96]	@ (8001140 <HAL_SPI_MspInit+0x88>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e2:	4a17      	ldr	r2, [pc, #92]	@ (8001140 <HAL_SPI_MspInit+0x88>)
 80010e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ea:	4b15      	ldr	r3, [pc, #84]	@ (8001140 <HAL_SPI_MspInit+0x88>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	4b11      	ldr	r3, [pc, #68]	@ (8001140 <HAL_SPI_MspInit+0x88>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	4a10      	ldr	r2, [pc, #64]	@ (8001140 <HAL_SPI_MspInit+0x88>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	6313      	str	r3, [r2, #48]	@ 0x30
 8001106:	4b0e      	ldr	r3, [pc, #56]	@ (8001140 <HAL_SPI_MspInit+0x88>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001112:	23e0      	movs	r3, #224	@ 0xe0
 8001114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111e:	2303      	movs	r3, #3
 8001120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001122:	2305      	movs	r3, #5
 8001124:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	4619      	mov	r1, r3
 800112c:	4805      	ldr	r0, [pc, #20]	@ (8001144 <HAL_SPI_MspInit+0x8c>)
 800112e:	f001 facf 	bl	80026d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001132:	bf00      	nop
 8001134:	3728      	adds	r7, #40	@ 0x28
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40013000 	.word	0x40013000
 8001140:	40023800 	.word	0x40023800
 8001144:	40020000 	.word	0x40020000

08001148 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	4b10      	ldr	r3, [pc, #64]	@ (8001194 <HAL_MspInit+0x4c>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001156:	4a0f      	ldr	r2, [pc, #60]	@ (8001194 <HAL_MspInit+0x4c>)
 8001158:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800115c:	6453      	str	r3, [r2, #68]	@ 0x44
 800115e:	4b0d      	ldr	r3, [pc, #52]	@ (8001194 <HAL_MspInit+0x4c>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001162:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	603b      	str	r3, [r7, #0]
 800116e:	4b09      	ldr	r3, [pc, #36]	@ (8001194 <HAL_MspInit+0x4c>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001172:	4a08      	ldr	r2, [pc, #32]	@ (8001194 <HAL_MspInit+0x4c>)
 8001174:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001178:	6413      	str	r3, [r2, #64]	@ 0x40
 800117a:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <HAL_MspInit+0x4c>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40023800 	.word	0x40023800

08001198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <NMI_Handler+0x4>

080011a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a4:	bf00      	nop
 80011a6:	e7fd      	b.n	80011a4 <HardFault_Handler+0x4>

080011a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011ac:	bf00      	nop
 80011ae:	e7fd      	b.n	80011ac <MemManage_Handler+0x4>

080011b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011b4:	bf00      	nop
 80011b6:	e7fd      	b.n	80011b4 <BusFault_Handler+0x4>

080011b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011bc:	bf00      	nop
 80011be:	e7fd      	b.n	80011bc <UsageFault_Handler+0x4>

080011c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ee:	f000 f9db 	bl	80015a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80011fc:	4802      	ldr	r0, [pc, #8]	@ (8001208 <DMA1_Stream4_IRQHandler+0x10>)
 80011fe:	f000 fffd 	bl	80021fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000250 	.word	0x20000250

0800120c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TIME_TRAVEL_SIM_Pin);
 8001210:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001214:	f001 fc2a 	bl	8002a6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}

0800121c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
	return 1;
 8001220:	2301      	movs	r3, #1
}
 8001222:	4618      	mov	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <_kill>:

int _kill(int pid, int sig)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001236:	f00a ff13 	bl	800c060 <__errno>
 800123a:	4603      	mov	r3, r0
 800123c:	2216      	movs	r2, #22
 800123e:	601a      	str	r2, [r3, #0]
	return -1;
 8001240:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001244:	4618      	mov	r0, r3
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <_exit>:

void _exit (int status)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001254:	f04f 31ff 	mov.w	r1, #4294967295
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff ffe7 	bl	800122c <_kill>
	while (1) {}		/* Make sure we hang here */
 800125e:	bf00      	nop
 8001260:	e7fd      	b.n	800125e <_exit+0x12>

08001262 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b086      	sub	sp, #24
 8001266:	af00      	add	r7, sp, #0
 8001268:	60f8      	str	r0, [r7, #12]
 800126a:	60b9      	str	r1, [r7, #8]
 800126c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	e00a      	b.n	800128a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001274:	f3af 8000 	nop.w
 8001278:	4601      	mov	r1, r0
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	1c5a      	adds	r2, r3, #1
 800127e:	60ba      	str	r2, [r7, #8]
 8001280:	b2ca      	uxtb	r2, r1
 8001282:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	3301      	adds	r3, #1
 8001288:	617b      	str	r3, [r7, #20]
 800128a:	697a      	ldr	r2, [r7, #20]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	429a      	cmp	r2, r3
 8001290:	dbf0      	blt.n	8001274 <_read+0x12>
	}

return len;
 8001292:	687b      	ldr	r3, [r7, #4]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
 80012ac:	e009      	b.n	80012c2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	1c5a      	adds	r2, r3, #1
 80012b2:	60ba      	str	r2, [r7, #8]
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	3301      	adds	r3, #1
 80012c0:	617b      	str	r3, [r7, #20]
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	dbf1      	blt.n	80012ae <_write+0x12>
	}
	return len;
 80012ca:	687b      	ldr	r3, [r7, #4]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <_close>:

int _close(int file)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	return -1;
 80012dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012fc:	605a      	str	r2, [r3, #4]
	return 0;
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <_isatty>:

int _isatty(int file)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	return 1;
 8001314:	2301      	movs	r3, #1
}
 8001316:	4618      	mov	r0, r3
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001322:	b480      	push	{r7}
 8001324:	b085      	sub	sp, #20
 8001326:	af00      	add	r7, sp, #0
 8001328:	60f8      	str	r0, [r7, #12]
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
	return 0;
 800132e:	2300      	movs	r3, #0
}
 8001330:	4618      	mov	r0, r3
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001344:	4a14      	ldr	r2, [pc, #80]	@ (8001398 <_sbrk+0x5c>)
 8001346:	4b15      	ldr	r3, [pc, #84]	@ (800139c <_sbrk+0x60>)
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001350:	4b13      	ldr	r3, [pc, #76]	@ (80013a0 <_sbrk+0x64>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d102      	bne.n	800135e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001358:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <_sbrk+0x64>)
 800135a:	4a12      	ldr	r2, [pc, #72]	@ (80013a4 <_sbrk+0x68>)
 800135c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800135e:	4b10      	ldr	r3, [pc, #64]	@ (80013a0 <_sbrk+0x64>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	429a      	cmp	r2, r3
 800136a:	d207      	bcs.n	800137c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800136c:	f00a fe78 	bl	800c060 <__errno>
 8001370:	4603      	mov	r3, r0
 8001372:	220c      	movs	r2, #12
 8001374:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001376:	f04f 33ff 	mov.w	r3, #4294967295
 800137a:	e009      	b.n	8001390 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800137c:	4b08      	ldr	r3, [pc, #32]	@ (80013a0 <_sbrk+0x64>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001382:	4b07      	ldr	r3, [pc, #28]	@ (80013a0 <_sbrk+0x64>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	4a05      	ldr	r2, [pc, #20]	@ (80013a0 <_sbrk+0x64>)
 800138c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800138e:	68fb      	ldr	r3, [r7, #12]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20020000 	.word	0x20020000
 800139c:	00002000 	.word	0x00002000
 80013a0:	20000328 	.word	0x20000328
 80013a4:	20000d28 	.word	0x20000d28

080013a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013ac:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <SystemInit+0x20>)
 80013ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013b2:	4a05      	ldr	r2, [pc, #20]	@ (80013c8 <SystemInit+0x20>)
 80013b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013d0:	4b11      	ldr	r3, [pc, #68]	@ (8001418 <MX_USART1_UART_Init+0x4c>)
 80013d2:	4a12      	ldr	r2, [pc, #72]	@ (800141c <MX_USART1_UART_Init+0x50>)
 80013d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013d6:	4b10      	ldr	r3, [pc, #64]	@ (8001418 <MX_USART1_UART_Init+0x4c>)
 80013d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013de:	4b0e      	ldr	r3, [pc, #56]	@ (8001418 <MX_USART1_UART_Init+0x4c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <MX_USART1_UART_Init+0x4c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001418 <MX_USART1_UART_Init+0x4c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013f0:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <MX_USART1_UART_Init+0x4c>)
 80013f2:	220c      	movs	r2, #12
 80013f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f6:	4b08      	ldr	r3, [pc, #32]	@ (8001418 <MX_USART1_UART_Init+0x4c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013fc:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <MX_USART1_UART_Init+0x4c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001402:	4805      	ldr	r0, [pc, #20]	@ (8001418 <MX_USART1_UART_Init+0x4c>)
 8001404:	f005 f82a 	bl	800645c <HAL_UART_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800140e:	f7ff fd8f 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	2000032c 	.word	0x2000032c
 800141c:	40011000 	.word	0x40011000

08001420 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	@ 0x28
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a19      	ldr	r2, [pc, #100]	@ (80014a4 <HAL_UART_MspInit+0x84>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d12c      	bne.n	800149c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	4b18      	ldr	r3, [pc, #96]	@ (80014a8 <HAL_UART_MspInit+0x88>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144a:	4a17      	ldr	r2, [pc, #92]	@ (80014a8 <HAL_UART_MspInit+0x88>)
 800144c:	f043 0310 	orr.w	r3, r3, #16
 8001450:	6453      	str	r3, [r2, #68]	@ 0x44
 8001452:	4b15      	ldr	r3, [pc, #84]	@ (80014a8 <HAL_UART_MspInit+0x88>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001456:	f003 0310 	and.w	r3, r3, #16
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	4b11      	ldr	r3, [pc, #68]	@ (80014a8 <HAL_UART_MspInit+0x88>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	4a10      	ldr	r2, [pc, #64]	@ (80014a8 <HAL_UART_MspInit+0x88>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6313      	str	r3, [r2, #48]	@ 0x30
 800146e:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <HAL_UART_MspInit+0x88>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800147a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800147e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001488:	2303      	movs	r3, #3
 800148a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800148c:	2307      	movs	r3, #7
 800148e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	4619      	mov	r1, r3
 8001496:	4805      	ldr	r0, [pc, #20]	@ (80014ac <HAL_UART_MspInit+0x8c>)
 8001498:	f001 f91a 	bl	80026d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800149c:	bf00      	nop
 800149e:	3728      	adds	r7, #40	@ 0x28
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40011000 	.word	0x40011000
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40020000 	.word	0x40020000

080014b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014b4:	480d      	ldr	r0, [pc, #52]	@ (80014ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014b6:	490e      	ldr	r1, [pc, #56]	@ (80014f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014b8:	4a0e      	ldr	r2, [pc, #56]	@ (80014f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014bc:	e002      	b.n	80014c4 <LoopCopyDataInit>

080014be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014c2:	3304      	adds	r3, #4

080014c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c8:	d3f9      	bcc.n	80014be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ca:	4a0b      	ldr	r2, [pc, #44]	@ (80014f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014cc:	4c0b      	ldr	r4, [pc, #44]	@ (80014fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80014ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d0:	e001      	b.n	80014d6 <LoopFillZerobss>

080014d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d4:	3204      	adds	r2, #4

080014d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d8:	d3fb      	bcc.n	80014d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014da:	f7ff ff65 	bl	80013a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014de:	f00a fdc5 	bl	800c06c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014e2:	f7ff fc8b 	bl	8000dfc <main>
  bx  lr    
 80014e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80014f4:	0800d26c 	.word	0x0800d26c
  ldr r2, =_sbss
 80014f8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80014fc:	20000d24 	.word	0x20000d24

08001500 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001500:	e7fe      	b.n	8001500 <ADC_IRQHandler>
	...

08001504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001508:	4b0e      	ldr	r3, [pc, #56]	@ (8001544 <HAL_Init+0x40>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a0d      	ldr	r2, [pc, #52]	@ (8001544 <HAL_Init+0x40>)
 800150e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001514:	4b0b      	ldr	r3, [pc, #44]	@ (8001544 <HAL_Init+0x40>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0a      	ldr	r2, [pc, #40]	@ (8001544 <HAL_Init+0x40>)
 800151a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800151e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001520:	4b08      	ldr	r3, [pc, #32]	@ (8001544 <HAL_Init+0x40>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a07      	ldr	r2, [pc, #28]	@ (8001544 <HAL_Init+0x40>)
 8001526:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800152a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800152c:	2003      	movs	r0, #3
 800152e:	f000 fcad 	bl	8001e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001532:	200f      	movs	r0, #15
 8001534:	f000 f808 	bl	8001548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001538:	f7ff fe06 	bl	8001148 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40023c00 	.word	0x40023c00

08001548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001550:	4b12      	ldr	r3, [pc, #72]	@ (800159c <HAL_InitTick+0x54>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b12      	ldr	r3, [pc, #72]	@ (80015a0 <HAL_InitTick+0x58>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	4619      	mov	r1, r3
 800155a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800155e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001562:	fbb2 f3f3 	udiv	r3, r2, r3
 8001566:	4618      	mov	r0, r3
 8001568:	f000 fcc5 	bl	8001ef6 <HAL_SYSTICK_Config>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e00e      	b.n	8001594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b0f      	cmp	r3, #15
 800157a:	d80a      	bhi.n	8001592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800157c:	2200      	movs	r2, #0
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	f04f 30ff 	mov.w	r0, #4294967295
 8001584:	f000 fc8d 	bl	8001ea2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001588:	4a06      	ldr	r2, [pc, #24]	@ (80015a4 <HAL_InitTick+0x5c>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800158e:	2300      	movs	r3, #0
 8001590:	e000      	b.n	8001594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
}
 8001594:	4618      	mov	r0, r3
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000000 	.word	0x20000000
 80015a0:	20000008 	.word	0x20000008
 80015a4:	20000004 	.word	0x20000004

080015a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015ac:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <HAL_IncTick+0x20>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <HAL_IncTick+0x24>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4413      	add	r3, r2
 80015b8:	4a04      	ldr	r2, [pc, #16]	@ (80015cc <HAL_IncTick+0x24>)
 80015ba:	6013      	str	r3, [r2, #0]
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	20000008 	.word	0x20000008
 80015cc:	20000374 	.word	0x20000374

080015d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return uwTick;
 80015d4:	4b03      	ldr	r3, [pc, #12]	@ (80015e4 <HAL_GetTick+0x14>)
 80015d6:	681b      	ldr	r3, [r3, #0]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	20000374 	.word	0x20000374

080015e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f0:	f7ff ffee 	bl	80015d0 <HAL_GetTick>
 80015f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001600:	d005      	beq.n	800160e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001602:	4b0a      	ldr	r3, [pc, #40]	@ (800162c <HAL_Delay+0x44>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	461a      	mov	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4413      	add	r3, r2
 800160c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800160e:	bf00      	nop
 8001610:	f7ff ffde 	bl	80015d0 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	429a      	cmp	r2, r3
 800161e:	d8f7      	bhi.n	8001610 <HAL_Delay+0x28>
  {
  }
}
 8001620:	bf00      	nop
 8001622:	bf00      	nop
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000008 	.word	0x20000008

08001630 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001638:	2300      	movs	r3, #0
 800163a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e033      	b.n	80016ae <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164a:	2b00      	cmp	r3, #0
 800164c:	d109      	bne.n	8001662 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7fe ffd8 	bl	8000604 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001666:	f003 0310 	and.w	r3, r3, #16
 800166a:	2b00      	cmp	r3, #0
 800166c:	d118      	bne.n	80016a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001672:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001676:	f023 0302 	bic.w	r3, r3, #2
 800167a:	f043 0202 	orr.w	r2, r3, #2
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f000 f93a 	bl	80018fc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001692:	f023 0303 	bic.w	r3, r3, #3
 8001696:	f043 0201 	orr.w	r2, r3, #1
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	641a      	str	r2, [r3, #64]	@ 0x40
 800169e:	e001      	b.n	80016a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d101      	bne.n	80016d4 <HAL_ADC_ConfigChannel+0x1c>
 80016d0:	2302      	movs	r3, #2
 80016d2:	e105      	b.n	80018e0 <HAL_ADC_ConfigChannel+0x228>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2201      	movs	r2, #1
 80016d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b09      	cmp	r3, #9
 80016e2:	d925      	bls.n	8001730 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68d9      	ldr	r1, [r3, #12]
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	461a      	mov	r2, r3
 80016f2:	4613      	mov	r3, r2
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	4413      	add	r3, r2
 80016f8:	3b1e      	subs	r3, #30
 80016fa:	2207      	movs	r2, #7
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43da      	mvns	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	400a      	ands	r2, r1
 8001708:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	68d9      	ldr	r1, [r3, #12]
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	b29b      	uxth	r3, r3
 800171a:	4618      	mov	r0, r3
 800171c:	4603      	mov	r3, r0
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	4403      	add	r3, r0
 8001722:	3b1e      	subs	r3, #30
 8001724:	409a      	lsls	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	430a      	orrs	r2, r1
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	e022      	b.n	8001776 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6919      	ldr	r1, [r3, #16]
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	b29b      	uxth	r3, r3
 800173c:	461a      	mov	r2, r3
 800173e:	4613      	mov	r3, r2
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	4413      	add	r3, r2
 8001744:	2207      	movs	r2, #7
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43da      	mvns	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	400a      	ands	r2, r1
 8001752:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6919      	ldr	r1, [r3, #16]
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	689a      	ldr	r2, [r3, #8]
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	b29b      	uxth	r3, r3
 8001764:	4618      	mov	r0, r3
 8001766:	4603      	mov	r3, r0
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	4403      	add	r3, r0
 800176c:	409a      	lsls	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b06      	cmp	r3, #6
 800177c:	d824      	bhi.n	80017c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	4613      	mov	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	3b05      	subs	r3, #5
 8001790:	221f      	movs	r2, #31
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43da      	mvns	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	400a      	ands	r2, r1
 800179e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	4618      	mov	r0, r3
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	4613      	mov	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	3b05      	subs	r3, #5
 80017ba:	fa00 f203 	lsl.w	r2, r0, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80017c6:	e04c      	b.n	8001862 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b0c      	cmp	r3, #12
 80017ce:	d824      	bhi.n	800181a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	3b23      	subs	r3, #35	@ 0x23
 80017e2:	221f      	movs	r2, #31
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43da      	mvns	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	400a      	ands	r2, r1
 80017f0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	4618      	mov	r0, r3
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	4613      	mov	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	3b23      	subs	r3, #35	@ 0x23
 800180c:	fa00 f203 	lsl.w	r2, r0, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	430a      	orrs	r2, r1
 8001816:	631a      	str	r2, [r3, #48]	@ 0x30
 8001818:	e023      	b.n	8001862 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	4613      	mov	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	3b41      	subs	r3, #65	@ 0x41
 800182c:	221f      	movs	r2, #31
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43da      	mvns	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	400a      	ands	r2, r1
 800183a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	b29b      	uxth	r3, r3
 8001848:	4618      	mov	r0, r3
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685a      	ldr	r2, [r3, #4]
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	3b41      	subs	r3, #65	@ 0x41
 8001856:	fa00 f203 	lsl.w	r2, r0, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	430a      	orrs	r2, r1
 8001860:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001862:	4b22      	ldr	r3, [pc, #136]	@ (80018ec <HAL_ADC_ConfigChannel+0x234>)
 8001864:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a21      	ldr	r2, [pc, #132]	@ (80018f0 <HAL_ADC_ConfigChannel+0x238>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d109      	bne.n	8001884 <HAL_ADC_ConfigChannel+0x1cc>
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b12      	cmp	r3, #18
 8001876:	d105      	bne.n	8001884 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a19      	ldr	r2, [pc, #100]	@ (80018f0 <HAL_ADC_ConfigChannel+0x238>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d123      	bne.n	80018d6 <HAL_ADC_ConfigChannel+0x21e>
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2b10      	cmp	r3, #16
 8001894:	d003      	beq.n	800189e <HAL_ADC_ConfigChannel+0x1e6>
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2b11      	cmp	r3, #17
 800189c:	d11b      	bne.n	80018d6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2b10      	cmp	r3, #16
 80018b0:	d111      	bne.n	80018d6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018b2:	4b10      	ldr	r3, [pc, #64]	@ (80018f4 <HAL_ADC_ConfigChannel+0x23c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a10      	ldr	r2, [pc, #64]	@ (80018f8 <HAL_ADC_ConfigChannel+0x240>)
 80018b8:	fba2 2303 	umull	r2, r3, r2, r3
 80018bc:	0c9a      	lsrs	r2, r3, #18
 80018be:	4613      	mov	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80018c8:	e002      	b.n	80018d0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	3b01      	subs	r3, #1
 80018ce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1f9      	bne.n	80018ca <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	40012300 	.word	0x40012300
 80018f0:	40012000 	.word	0x40012000
 80018f4:	20000000 	.word	0x20000000
 80018f8:	431bde83 	.word	0x431bde83

080018fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001904:	4b79      	ldr	r3, [pc, #484]	@ (8001aec <ADC_Init+0x1f0>)
 8001906:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	431a      	orrs	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001930:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6859      	ldr	r1, [r3, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	021a      	lsls	r2, r3, #8
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	430a      	orrs	r2, r1
 8001944:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001954:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6859      	ldr	r1, [r3, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	430a      	orrs	r2, r1
 8001966:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	689a      	ldr	r2, [r3, #8]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001976:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6899      	ldr	r1, [r3, #8]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68da      	ldr	r2, [r3, #12]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	430a      	orrs	r2, r1
 8001988:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800198e:	4a58      	ldr	r2, [pc, #352]	@ (8001af0 <ADC_Init+0x1f4>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d022      	beq.n	80019da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	689a      	ldr	r2, [r3, #8]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80019a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6899      	ldr	r1, [r3, #8]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	430a      	orrs	r2, r1
 80019b4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80019c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6899      	ldr	r1, [r3, #8]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	e00f      	b.n	80019fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80019e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80019f8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 0202 	bic.w	r2, r2, #2
 8001a08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6899      	ldr	r1, [r3, #8]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	7e1b      	ldrb	r3, [r3, #24]
 8001a14:	005a      	lsls	r2, r3, #1
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d01b      	beq.n	8001a60 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a36:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001a46:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6859      	ldr	r1, [r3, #4]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a52:	3b01      	subs	r3, #1
 8001a54:	035a      	lsls	r2, r3, #13
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	e007      	b.n	8001a70 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a6e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001a7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	051a      	lsls	r2, r3, #20
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	430a      	orrs	r2, r1
 8001a94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001aa4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6899      	ldr	r1, [r3, #8]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001ab2:	025a      	lsls	r2, r3, #9
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001aca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6899      	ldr	r1, [r3, #8]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	029a      	lsls	r2, r3, #10
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	430a      	orrs	r2, r1
 8001ade:	609a      	str	r2, [r3, #8]
}
 8001ae0:	bf00      	nop
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	40012300 	.word	0x40012300
 8001af0:	0f000001 	.word	0x0f000001

08001af4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e0ed      	b.n	8001ce2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d102      	bne.n	8001b18 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7fe fdee 	bl	80006f4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f042 0201 	orr.w	r2, r2, #1
 8001b26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b28:	f7ff fd52 	bl	80015d0 <HAL_GetTick>
 8001b2c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b2e:	e012      	b.n	8001b56 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b30:	f7ff fd4e 	bl	80015d0 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b0a      	cmp	r3, #10
 8001b3c:	d90b      	bls.n	8001b56 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b42:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2205      	movs	r2, #5
 8001b4e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e0c5      	b.n	8001ce2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0e5      	beq.n	8001b30 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 0202 	bic.w	r2, r2, #2
 8001b72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b74:	f7ff fd2c 	bl	80015d0 <HAL_GetTick>
 8001b78:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b7a:	e012      	b.n	8001ba2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b7c:	f7ff fd28 	bl	80015d0 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b0a      	cmp	r3, #10
 8001b88:	d90b      	bls.n	8001ba2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b8e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2205      	movs	r2, #5
 8001b9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e09f      	b.n	8001ce2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1e5      	bne.n	8001b7c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	7e1b      	ldrb	r3, [r3, #24]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d108      	bne.n	8001bca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	e007      	b.n	8001bda <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001bd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	7e5b      	ldrb	r3, [r3, #25]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d108      	bne.n	8001bf4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	e007      	b.n	8001c04 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c02:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	7e9b      	ldrb	r3, [r3, #26]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d108      	bne.n	8001c1e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0220 	orr.w	r2, r2, #32
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	e007      	b.n	8001c2e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f022 0220 	bic.w	r2, r2, #32
 8001c2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	7edb      	ldrb	r3, [r3, #27]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d108      	bne.n	8001c48 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 0210 	bic.w	r2, r2, #16
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	e007      	b.n	8001c58 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 0210 	orr.w	r2, r2, #16
 8001c56:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	7f1b      	ldrb	r3, [r3, #28]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d108      	bne.n	8001c72 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f042 0208 	orr.w	r2, r2, #8
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	e007      	b.n	8001c82 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 0208 	bic.w	r2, r2, #8
 8001c80:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	7f5b      	ldrb	r3, [r3, #29]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d108      	bne.n	8001c9c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f042 0204 	orr.w	r2, r2, #4
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	e007      	b.n	8001cac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0204 	bic.w	r2, r2, #4
 8001caa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	ea42 0103 	orr.w	r1, r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	1e5a      	subs	r2, r3, #1
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
	...

08001cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d30 <__NVIC_SetPriorityGrouping+0x44>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d08:	4013      	ands	r3, r2
 8001d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d1e:	4a04      	ldr	r2, [pc, #16]	@ (8001d30 <__NVIC_SetPriorityGrouping+0x44>)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	60d3      	str	r3, [r2, #12]
}
 8001d24:	bf00      	nop
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d38:	4b04      	ldr	r3, [pc, #16]	@ (8001d4c <__NVIC_GetPriorityGrouping+0x18>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	0a1b      	lsrs	r3, r3, #8
 8001d3e:	f003 0307 	and.w	r3, r3, #7
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	db0b      	blt.n	8001d7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	f003 021f 	and.w	r2, r3, #31
 8001d68:	4907      	ldr	r1, [pc, #28]	@ (8001d88 <__NVIC_EnableIRQ+0x38>)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	095b      	lsrs	r3, r3, #5
 8001d70:	2001      	movs	r0, #1
 8001d72:	fa00 f202 	lsl.w	r2, r0, r2
 8001d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	e000e100 	.word	0xe000e100

08001d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	6039      	str	r1, [r7, #0]
 8001d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	db0a      	blt.n	8001db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	490c      	ldr	r1, [pc, #48]	@ (8001dd8 <__NVIC_SetPriority+0x4c>)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	0112      	lsls	r2, r2, #4
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	440b      	add	r3, r1
 8001db0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db4:	e00a      	b.n	8001dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	4908      	ldr	r1, [pc, #32]	@ (8001ddc <__NVIC_SetPriority+0x50>)
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	3b04      	subs	r3, #4
 8001dc4:	0112      	lsls	r2, r2, #4
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	440b      	add	r3, r1
 8001dca:	761a      	strb	r2, [r3, #24]
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000e100 	.word	0xe000e100
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	@ 0x24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f1c3 0307 	rsb	r3, r3, #7
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	bf28      	it	cs
 8001dfe:	2304      	movcs	r3, #4
 8001e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3304      	adds	r3, #4
 8001e06:	2b06      	cmp	r3, #6
 8001e08:	d902      	bls.n	8001e10 <NVIC_EncodePriority+0x30>
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3b03      	subs	r3, #3
 8001e0e:	e000      	b.n	8001e12 <NVIC_EncodePriority+0x32>
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e14:	f04f 32ff 	mov.w	r2, #4294967295
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43da      	mvns	r2, r3
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	401a      	ands	r2, r3
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e28:	f04f 31ff 	mov.w	r1, #4294967295
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e32:	43d9      	mvns	r1, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e38:	4313      	orrs	r3, r2
         );
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3724      	adds	r7, #36	@ 0x24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e58:	d301      	bcc.n	8001e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e00f      	b.n	8001e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e88 <SysTick_Config+0x40>)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e66:	210f      	movs	r1, #15
 8001e68:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6c:	f7ff ff8e 	bl	8001d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e70:	4b05      	ldr	r3, [pc, #20]	@ (8001e88 <SysTick_Config+0x40>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e76:	4b04      	ldr	r3, [pc, #16]	@ (8001e88 <SysTick_Config+0x40>)
 8001e78:	2207      	movs	r2, #7
 8001e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	e000e010 	.word	0xe000e010

08001e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f7ff ff29 	bl	8001cec <__NVIC_SetPriorityGrouping>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb4:	f7ff ff3e 	bl	8001d34 <__NVIC_GetPriorityGrouping>
 8001eb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	68b9      	ldr	r1, [r7, #8]
 8001ebe:	6978      	ldr	r0, [r7, #20]
 8001ec0:	f7ff ff8e 	bl	8001de0 <NVIC_EncodePriority>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eca:	4611      	mov	r1, r2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff5d 	bl	8001d8c <__NVIC_SetPriority>
}
 8001ed2:	bf00      	nop
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ff31 	bl	8001d50 <__NVIC_EnableIRQ>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff ffa2 	bl	8001e48 <SysTick_Config>
 8001f04:	4603      	mov	r3, r0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f1c:	f7ff fb58 	bl	80015d0 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e099      	b.n	8002060 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2202      	movs	r2, #2
 8001f30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0201 	bic.w	r2, r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f4c:	e00f      	b.n	8001f6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f4e:	f7ff fb3f 	bl	80015d0 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b05      	cmp	r3, #5
 8001f5a:	d908      	bls.n	8001f6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2220      	movs	r2, #32
 8001f60:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2203      	movs	r2, #3
 8001f66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e078      	b.n	8002060 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1e8      	bne.n	8001f4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	4b38      	ldr	r3, [pc, #224]	@ (8002068 <HAL_DMA_Init+0x158>)
 8001f88:	4013      	ands	r3, r2
 8001f8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d107      	bne.n	8001fd8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	f023 0307 	bic.w	r3, r3, #7
 8001fee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	d117      	bne.n	8002032 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	4313      	orrs	r3, r2
 800200a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00e      	beq.n	8002032 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 fadf 	bl	80025d8 <DMA_CheckFifoParam>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d008      	beq.n	8002032 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2240      	movs	r2, #64	@ 0x40
 8002024:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800202e:	2301      	movs	r3, #1
 8002030:	e016      	b.n	8002060 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 fa96 	bl	800256c <DMA_CalcBaseAndBitshift>
 8002040:	4603      	mov	r3, r0
 8002042:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002048:	223f      	movs	r2, #63	@ 0x3f
 800204a:	409a      	lsls	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	f010803f 	.word	0xf010803f

0800206c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
 8002078:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800207a:	2300      	movs	r3, #0
 800207c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002082:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800208a:	2b01      	cmp	r3, #1
 800208c:	d101      	bne.n	8002092 <HAL_DMA_Start_IT+0x26>
 800208e:	2302      	movs	r3, #2
 8002090:	e040      	b.n	8002114 <HAL_DMA_Start_IT+0xa8>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d12f      	bne.n	8002106 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2202      	movs	r2, #2
 80020aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2200      	movs	r2, #0
 80020b2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	68b9      	ldr	r1, [r7, #8]
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 fa28 	bl	8002510 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c4:	223f      	movs	r2, #63	@ 0x3f
 80020c6:	409a      	lsls	r2, r3
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 0216 	orr.w	r2, r2, #22
 80020da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d007      	beq.n	80020f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0208 	orr.w	r2, r2, #8
 80020f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f042 0201 	orr.w	r2, r2, #1
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	e005      	b.n	8002112 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800210e:	2302      	movs	r3, #2
 8002110:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002112:	7dfb      	ldrb	r3, [r7, #23]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002128:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800212a:	f7ff fa51 	bl	80015d0 <HAL_GetTick>
 800212e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d008      	beq.n	800214e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2280      	movs	r2, #128	@ 0x80
 8002140:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e052      	b.n	80021f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0216 	bic.w	r2, r2, #22
 800215c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	695a      	ldr	r2, [r3, #20]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800216c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002172:	2b00      	cmp	r3, #0
 8002174:	d103      	bne.n	800217e <HAL_DMA_Abort+0x62>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800217a:	2b00      	cmp	r3, #0
 800217c:	d007      	beq.n	800218e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 0208 	bic.w	r2, r2, #8
 800218c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0201 	bic.w	r2, r2, #1
 800219c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800219e:	e013      	b.n	80021c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021a0:	f7ff fa16 	bl	80015d0 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b05      	cmp	r3, #5
 80021ac:	d90c      	bls.n	80021c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2220      	movs	r2, #32
 80021b2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2203      	movs	r2, #3
 80021b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e015      	b.n	80021f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1e4      	bne.n	80021a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021da:	223f      	movs	r2, #63	@ 0x3f
 80021dc:	409a      	lsls	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002204:	2300      	movs	r3, #0
 8002206:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002208:	4b8e      	ldr	r3, [pc, #568]	@ (8002444 <HAL_DMA_IRQHandler+0x248>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a8e      	ldr	r2, [pc, #568]	@ (8002448 <HAL_DMA_IRQHandler+0x24c>)
 800220e:	fba2 2303 	umull	r2, r3, r2, r3
 8002212:	0a9b      	lsrs	r3, r3, #10
 8002214:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800221a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002226:	2208      	movs	r2, #8
 8002228:	409a      	lsls	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	4013      	ands	r3, r2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d01a      	beq.n	8002268 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	d013      	beq.n	8002268 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 0204 	bic.w	r2, r2, #4
 800224e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002254:	2208      	movs	r2, #8
 8002256:	409a      	lsls	r2, r3
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002260:	f043 0201 	orr.w	r2, r3, #1
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800226c:	2201      	movs	r2, #1
 800226e:	409a      	lsls	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4013      	ands	r3, r2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d012      	beq.n	800229e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00b      	beq.n	800229e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800228a:	2201      	movs	r2, #1
 800228c:	409a      	lsls	r2, r3
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002296:	f043 0202 	orr.w	r2, r3, #2
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022a2:	2204      	movs	r2, #4
 80022a4:	409a      	lsls	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	4013      	ands	r3, r2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d012      	beq.n	80022d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00b      	beq.n	80022d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022c0:	2204      	movs	r2, #4
 80022c2:	409a      	lsls	r2, r3
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022cc:	f043 0204 	orr.w	r2, r3, #4
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022d8:	2210      	movs	r2, #16
 80022da:	409a      	lsls	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4013      	ands	r3, r2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d043      	beq.n	800236c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0308 	and.w	r3, r3, #8
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d03c      	beq.n	800236c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f6:	2210      	movs	r2, #16
 80022f8:	409a      	lsls	r2, r3
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d018      	beq.n	800233e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d108      	bne.n	800232c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231e:	2b00      	cmp	r3, #0
 8002320:	d024      	beq.n	800236c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	4798      	blx	r3
 800232a:	e01f      	b.n	800236c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002330:	2b00      	cmp	r3, #0
 8002332:	d01b      	beq.n	800236c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	4798      	blx	r3
 800233c:	e016      	b.n	800236c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002348:	2b00      	cmp	r3, #0
 800234a:	d107      	bne.n	800235c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 0208 	bic.w	r2, r2, #8
 800235a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002370:	2220      	movs	r2, #32
 8002372:	409a      	lsls	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	4013      	ands	r3, r2
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 808f 	beq.w	800249c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0310 	and.w	r3, r3, #16
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 8087 	beq.w	800249c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002392:	2220      	movs	r2, #32
 8002394:	409a      	lsls	r2, r3
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b05      	cmp	r3, #5
 80023a4:	d136      	bne.n	8002414 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0216 	bic.w	r2, r2, #22
 80023b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	695a      	ldr	r2, [r3, #20]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d103      	bne.n	80023d6 <HAL_DMA_IRQHandler+0x1da>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d007      	beq.n	80023e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 0208 	bic.w	r2, r2, #8
 80023e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ea:	223f      	movs	r2, #63	@ 0x3f
 80023ec:	409a      	lsls	r2, r3
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002406:	2b00      	cmp	r3, #0
 8002408:	d07e      	beq.n	8002508 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	4798      	blx	r3
        }
        return;
 8002412:	e079      	b.n	8002508 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d01d      	beq.n	800245e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10d      	bne.n	800244c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002434:	2b00      	cmp	r3, #0
 8002436:	d031      	beq.n	800249c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	4798      	blx	r3
 8002440:	e02c      	b.n	800249c <HAL_DMA_IRQHandler+0x2a0>
 8002442:	bf00      	nop
 8002444:	20000000 	.word	0x20000000
 8002448:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002450:	2b00      	cmp	r3, #0
 8002452:	d023      	beq.n	800249c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	4798      	blx	r3
 800245c:	e01e      	b.n	800249c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10f      	bne.n	800248c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0210 	bic.w	r2, r2, #16
 800247a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002490:	2b00      	cmp	r3, #0
 8002492:	d003      	beq.n	800249c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d032      	beq.n	800250a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d022      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2205      	movs	r2, #5
 80024b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 0201 	bic.w	r2, r2, #1
 80024c6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	3301      	adds	r3, #1
 80024cc:	60bb      	str	r3, [r7, #8]
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d307      	bcc.n	80024e4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f2      	bne.n	80024c8 <HAL_DMA_IRQHandler+0x2cc>
 80024e2:	e000      	b.n	80024e6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80024e4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d005      	beq.n	800250a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	4798      	blx	r3
 8002506:	e000      	b.n	800250a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002508:	bf00      	nop
    }
  }
}
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
 800251c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800252c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	2b40      	cmp	r3, #64	@ 0x40
 800253c:	d108      	bne.n	8002550 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800254e:	e007      	b.n	8002560 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	60da      	str	r2, [r3, #12]
}
 8002560:	bf00      	nop
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	3b10      	subs	r3, #16
 800257c:	4a14      	ldr	r2, [pc, #80]	@ (80025d0 <DMA_CalcBaseAndBitshift+0x64>)
 800257e:	fba2 2303 	umull	r2, r3, r2, r3
 8002582:	091b      	lsrs	r3, r3, #4
 8002584:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002586:	4a13      	ldr	r2, [pc, #76]	@ (80025d4 <DMA_CalcBaseAndBitshift+0x68>)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4413      	add	r3, r2
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	461a      	mov	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2b03      	cmp	r3, #3
 8002598:	d909      	bls.n	80025ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80025a2:	f023 0303 	bic.w	r3, r3, #3
 80025a6:	1d1a      	adds	r2, r3, #4
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	659a      	str	r2, [r3, #88]	@ 0x58
 80025ac:	e007      	b.n	80025be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80025b6:	f023 0303 	bic.w	r3, r3, #3
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	aaaaaaab 	.word	0xaaaaaaab
 80025d4:	0800cfe4 	.word	0x0800cfe4

080025d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025e0:	2300      	movs	r3, #0
 80025e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d11f      	bne.n	8002632 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	2b03      	cmp	r3, #3
 80025f6:	d856      	bhi.n	80026a6 <DMA_CheckFifoParam+0xce>
 80025f8:	a201      	add	r2, pc, #4	@ (adr r2, 8002600 <DMA_CheckFifoParam+0x28>)
 80025fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025fe:	bf00      	nop
 8002600:	08002611 	.word	0x08002611
 8002604:	08002623 	.word	0x08002623
 8002608:	08002611 	.word	0x08002611
 800260c:	080026a7 	.word	0x080026a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002614:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d046      	beq.n	80026aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002620:	e043      	b.n	80026aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002626:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800262a:	d140      	bne.n	80026ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002630:	e03d      	b.n	80026ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800263a:	d121      	bne.n	8002680 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	2b03      	cmp	r3, #3
 8002640:	d837      	bhi.n	80026b2 <DMA_CheckFifoParam+0xda>
 8002642:	a201      	add	r2, pc, #4	@ (adr r2, 8002648 <DMA_CheckFifoParam+0x70>)
 8002644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002648:	08002659 	.word	0x08002659
 800264c:	0800265f 	.word	0x0800265f
 8002650:	08002659 	.word	0x08002659
 8002654:	08002671 	.word	0x08002671
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	73fb      	strb	r3, [r7, #15]
      break;
 800265c:	e030      	b.n	80026c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002662:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d025      	beq.n	80026b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800266e:	e022      	b.n	80026b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002674:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002678:	d11f      	bne.n	80026ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800267e:	e01c      	b.n	80026ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	2b02      	cmp	r3, #2
 8002684:	d903      	bls.n	800268e <DMA_CheckFifoParam+0xb6>
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	2b03      	cmp	r3, #3
 800268a:	d003      	beq.n	8002694 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800268c:	e018      	b.n	80026c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	73fb      	strb	r3, [r7, #15]
      break;
 8002692:	e015      	b.n	80026c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002698:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00e      	beq.n	80026be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	73fb      	strb	r3, [r7, #15]
      break;
 80026a4:	e00b      	b.n	80026be <DMA_CheckFifoParam+0xe6>
      break;
 80026a6:	bf00      	nop
 80026a8:	e00a      	b.n	80026c0 <DMA_CheckFifoParam+0xe8>
      break;
 80026aa:	bf00      	nop
 80026ac:	e008      	b.n	80026c0 <DMA_CheckFifoParam+0xe8>
      break;
 80026ae:	bf00      	nop
 80026b0:	e006      	b.n	80026c0 <DMA_CheckFifoParam+0xe8>
      break;
 80026b2:	bf00      	nop
 80026b4:	e004      	b.n	80026c0 <DMA_CheckFifoParam+0xe8>
      break;
 80026b6:	bf00      	nop
 80026b8:	e002      	b.n	80026c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80026ba:	bf00      	nop
 80026bc:	e000      	b.n	80026c0 <DMA_CheckFifoParam+0xe8>
      break;
 80026be:	bf00      	nop
    }
  } 
  
  return status; 
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3714      	adds	r7, #20
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop

080026d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b089      	sub	sp, #36	@ 0x24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026da:	2300      	movs	r3, #0
 80026dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026de:	2300      	movs	r3, #0
 80026e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
 80026ea:	e16b      	b.n	80029c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026ec:	2201      	movs	r2, #1
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	4013      	ands	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	429a      	cmp	r2, r3
 8002706:	f040 815a 	bne.w	80029be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f003 0303 	and.w	r3, r3, #3
 8002712:	2b01      	cmp	r3, #1
 8002714:	d005      	beq.n	8002722 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800271e:	2b02      	cmp	r3, #2
 8002720:	d130      	bne.n	8002784 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	2203      	movs	r2, #3
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43db      	mvns	r3, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4013      	ands	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	68da      	ldr	r2, [r3, #12]
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002758:	2201      	movs	r2, #1
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	43db      	mvns	r3, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4013      	ands	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	091b      	lsrs	r3, r3, #4
 800276e:	f003 0201 	and.w	r2, r3, #1
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4313      	orrs	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	2b03      	cmp	r3, #3
 800278e:	d017      	beq.n	80027c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	2203      	movs	r2, #3
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	43db      	mvns	r3, r3
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4013      	ands	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 0303 	and.w	r3, r3, #3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d123      	bne.n	8002814 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	08da      	lsrs	r2, r3, #3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3208      	adds	r2, #8
 80027d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	220f      	movs	r2, #15
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4013      	ands	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	691a      	ldr	r2, [r3, #16]
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	08da      	lsrs	r2, r3, #3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	3208      	adds	r2, #8
 800280e:	69b9      	ldr	r1, [r7, #24]
 8002810:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	2203      	movs	r2, #3
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 0203 	and.w	r2, r3, #3
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4313      	orrs	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 80b4 	beq.w	80029be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	4b60      	ldr	r3, [pc, #384]	@ (80029dc <HAL_GPIO_Init+0x30c>)
 800285c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285e:	4a5f      	ldr	r2, [pc, #380]	@ (80029dc <HAL_GPIO_Init+0x30c>)
 8002860:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002864:	6453      	str	r3, [r2, #68]	@ 0x44
 8002866:	4b5d      	ldr	r3, [pc, #372]	@ (80029dc <HAL_GPIO_Init+0x30c>)
 8002868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002872:	4a5b      	ldr	r2, [pc, #364]	@ (80029e0 <HAL_GPIO_Init+0x310>)
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	089b      	lsrs	r3, r3, #2
 8002878:	3302      	adds	r3, #2
 800287a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800287e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	220f      	movs	r2, #15
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4013      	ands	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a52      	ldr	r2, [pc, #328]	@ (80029e4 <HAL_GPIO_Init+0x314>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d02b      	beq.n	80028f6 <HAL_GPIO_Init+0x226>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a51      	ldr	r2, [pc, #324]	@ (80029e8 <HAL_GPIO_Init+0x318>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d025      	beq.n	80028f2 <HAL_GPIO_Init+0x222>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a50      	ldr	r2, [pc, #320]	@ (80029ec <HAL_GPIO_Init+0x31c>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d01f      	beq.n	80028ee <HAL_GPIO_Init+0x21e>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a4f      	ldr	r2, [pc, #316]	@ (80029f0 <HAL_GPIO_Init+0x320>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d019      	beq.n	80028ea <HAL_GPIO_Init+0x21a>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a4e      	ldr	r2, [pc, #312]	@ (80029f4 <HAL_GPIO_Init+0x324>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d013      	beq.n	80028e6 <HAL_GPIO_Init+0x216>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a4d      	ldr	r2, [pc, #308]	@ (80029f8 <HAL_GPIO_Init+0x328>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d00d      	beq.n	80028e2 <HAL_GPIO_Init+0x212>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a4c      	ldr	r2, [pc, #304]	@ (80029fc <HAL_GPIO_Init+0x32c>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d007      	beq.n	80028de <HAL_GPIO_Init+0x20e>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a4b      	ldr	r2, [pc, #300]	@ (8002a00 <HAL_GPIO_Init+0x330>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d101      	bne.n	80028da <HAL_GPIO_Init+0x20a>
 80028d6:	2307      	movs	r3, #7
 80028d8:	e00e      	b.n	80028f8 <HAL_GPIO_Init+0x228>
 80028da:	2308      	movs	r3, #8
 80028dc:	e00c      	b.n	80028f8 <HAL_GPIO_Init+0x228>
 80028de:	2306      	movs	r3, #6
 80028e0:	e00a      	b.n	80028f8 <HAL_GPIO_Init+0x228>
 80028e2:	2305      	movs	r3, #5
 80028e4:	e008      	b.n	80028f8 <HAL_GPIO_Init+0x228>
 80028e6:	2304      	movs	r3, #4
 80028e8:	e006      	b.n	80028f8 <HAL_GPIO_Init+0x228>
 80028ea:	2303      	movs	r3, #3
 80028ec:	e004      	b.n	80028f8 <HAL_GPIO_Init+0x228>
 80028ee:	2302      	movs	r3, #2
 80028f0:	e002      	b.n	80028f8 <HAL_GPIO_Init+0x228>
 80028f2:	2301      	movs	r3, #1
 80028f4:	e000      	b.n	80028f8 <HAL_GPIO_Init+0x228>
 80028f6:	2300      	movs	r3, #0
 80028f8:	69fa      	ldr	r2, [r7, #28]
 80028fa:	f002 0203 	and.w	r2, r2, #3
 80028fe:	0092      	lsls	r2, r2, #2
 8002900:	4093      	lsls	r3, r2
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4313      	orrs	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002908:	4935      	ldr	r1, [pc, #212]	@ (80029e0 <HAL_GPIO_Init+0x310>)
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	089b      	lsrs	r3, r3, #2
 800290e:	3302      	adds	r3, #2
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002916:	4b3b      	ldr	r3, [pc, #236]	@ (8002a04 <HAL_GPIO_Init+0x334>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	43db      	mvns	r3, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4013      	ands	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d003      	beq.n	800293a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	4313      	orrs	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800293a:	4a32      	ldr	r2, [pc, #200]	@ (8002a04 <HAL_GPIO_Init+0x334>)
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002940:	4b30      	ldr	r3, [pc, #192]	@ (8002a04 <HAL_GPIO_Init+0x334>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	43db      	mvns	r3, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4013      	ands	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d003      	beq.n	8002964 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	4313      	orrs	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002964:	4a27      	ldr	r2, [pc, #156]	@ (8002a04 <HAL_GPIO_Init+0x334>)
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800296a:	4b26      	ldr	r3, [pc, #152]	@ (8002a04 <HAL_GPIO_Init+0x334>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	43db      	mvns	r3, r3
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	4013      	ands	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d003      	beq.n	800298e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	4313      	orrs	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800298e:	4a1d      	ldr	r2, [pc, #116]	@ (8002a04 <HAL_GPIO_Init+0x334>)
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002994:	4b1b      	ldr	r3, [pc, #108]	@ (8002a04 <HAL_GPIO_Init+0x334>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	43db      	mvns	r3, r3
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4013      	ands	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029b8:	4a12      	ldr	r2, [pc, #72]	@ (8002a04 <HAL_GPIO_Init+0x334>)
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	3301      	adds	r3, #1
 80029c2:	61fb      	str	r3, [r7, #28]
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	2b0f      	cmp	r3, #15
 80029c8:	f67f ae90 	bls.w	80026ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029cc:	bf00      	nop
 80029ce:	bf00      	nop
 80029d0:	3724      	adds	r7, #36	@ 0x24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	40023800 	.word	0x40023800
 80029e0:	40013800 	.word	0x40013800
 80029e4:	40020000 	.word	0x40020000
 80029e8:	40020400 	.word	0x40020400
 80029ec:	40020800 	.word	0x40020800
 80029f0:	40020c00 	.word	0x40020c00
 80029f4:	40021000 	.word	0x40021000
 80029f8:	40021400 	.word	0x40021400
 80029fc:	40021800 	.word	0x40021800
 8002a00:	40021c00 	.word	0x40021c00
 8002a04:	40013c00 	.word	0x40013c00

08002a08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	460b      	mov	r3, r1
 8002a12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	887b      	ldrh	r3, [r7, #2]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d002      	beq.n	8002a26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a20:	2301      	movs	r3, #1
 8002a22:	73fb      	strb	r3, [r7, #15]
 8002a24:	e001      	b.n	8002a2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a26:	2300      	movs	r3, #0
 8002a28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3714      	adds	r7, #20
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	460b      	mov	r3, r1
 8002a42:	807b      	strh	r3, [r7, #2]
 8002a44:	4613      	mov	r3, r2
 8002a46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a48:	787b      	ldrb	r3, [r7, #1]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a4e:	887a      	ldrh	r2, [r7, #2]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a54:	e003      	b.n	8002a5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a56:	887b      	ldrh	r3, [r7, #2]
 8002a58:	041a      	lsls	r2, r3, #16
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	619a      	str	r2, [r3, #24]
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
	...

08002a6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	4603      	mov	r3, r0
 8002a74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a76:	4b08      	ldr	r3, [pc, #32]	@ (8002a98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a78:	695a      	ldr	r2, [r3, #20]
 8002a7a:	88fb      	ldrh	r3, [r7, #6]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d006      	beq.n	8002a90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a82:	4a05      	ldr	r2, [pc, #20]	@ (8002a98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a84:	88fb      	ldrh	r3, [r7, #6]
 8002a86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a88:	88fb      	ldrh	r3, [r7, #6]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 f806 	bl	8002a9c <HAL_GPIO_EXTI_Callback>
  }
}
 8002a90:	bf00      	nop
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40013c00 	.word	0x40013c00

08002a9c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
	...

08002ab4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e12b      	b.n	8002d1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d106      	bne.n	8002ae0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7fd fff0 	bl	8000ac0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2224      	movs	r2, #36	@ 0x24
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0201 	bic.w	r2, r2, #1
 8002af6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b18:	f002 fbd8 	bl	80052cc <HAL_RCC_GetPCLK1Freq>
 8002b1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	4a81      	ldr	r2, [pc, #516]	@ (8002d28 <HAL_I2C_Init+0x274>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d807      	bhi.n	8002b38 <HAL_I2C_Init+0x84>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4a80      	ldr	r2, [pc, #512]	@ (8002d2c <HAL_I2C_Init+0x278>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	bf94      	ite	ls
 8002b30:	2301      	movls	r3, #1
 8002b32:	2300      	movhi	r3, #0
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	e006      	b.n	8002b46 <HAL_I2C_Init+0x92>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4a7d      	ldr	r2, [pc, #500]	@ (8002d30 <HAL_I2C_Init+0x27c>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	bf94      	ite	ls
 8002b40:	2301      	movls	r3, #1
 8002b42:	2300      	movhi	r3, #0
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e0e7      	b.n	8002d1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4a78      	ldr	r2, [pc, #480]	@ (8002d34 <HAL_I2C_Init+0x280>)
 8002b52:	fba2 2303 	umull	r2, r3, r2, r3
 8002b56:	0c9b      	lsrs	r3, r3, #18
 8002b58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	4a6a      	ldr	r2, [pc, #424]	@ (8002d28 <HAL_I2C_Init+0x274>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d802      	bhi.n	8002b88 <HAL_I2C_Init+0xd4>
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	3301      	adds	r3, #1
 8002b86:	e009      	b.n	8002b9c <HAL_I2C_Init+0xe8>
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002b8e:	fb02 f303 	mul.w	r3, r2, r3
 8002b92:	4a69      	ldr	r2, [pc, #420]	@ (8002d38 <HAL_I2C_Init+0x284>)
 8002b94:	fba2 2303 	umull	r2, r3, r2, r3
 8002b98:	099b      	lsrs	r3, r3, #6
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6812      	ldr	r2, [r2, #0]
 8002ba0:	430b      	orrs	r3, r1
 8002ba2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002bae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	495c      	ldr	r1, [pc, #368]	@ (8002d28 <HAL_I2C_Init+0x274>)
 8002bb8:	428b      	cmp	r3, r1
 8002bba:	d819      	bhi.n	8002bf0 <HAL_I2C_Init+0x13c>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	1e59      	subs	r1, r3, #1
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bca:	1c59      	adds	r1, r3, #1
 8002bcc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002bd0:	400b      	ands	r3, r1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00a      	beq.n	8002bec <HAL_I2C_Init+0x138>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	1e59      	subs	r1, r3, #1
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002be4:	3301      	adds	r3, #1
 8002be6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bea:	e051      	b.n	8002c90 <HAL_I2C_Init+0x1dc>
 8002bec:	2304      	movs	r3, #4
 8002bee:	e04f      	b.n	8002c90 <HAL_I2C_Init+0x1dc>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d111      	bne.n	8002c1c <HAL_I2C_Init+0x168>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	1e58      	subs	r0, r3, #1
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6859      	ldr	r1, [r3, #4]
 8002c00:	460b      	mov	r3, r1
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	440b      	add	r3, r1
 8002c06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	bf0c      	ite	eq
 8002c14:	2301      	moveq	r3, #1
 8002c16:	2300      	movne	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	e012      	b.n	8002c42 <HAL_I2C_Init+0x18e>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	1e58      	subs	r0, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6859      	ldr	r1, [r3, #4]
 8002c24:	460b      	mov	r3, r1
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	0099      	lsls	r1, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c32:	3301      	adds	r3, #1
 8002c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	bf0c      	ite	eq
 8002c3c:	2301      	moveq	r3, #1
 8002c3e:	2300      	movne	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <HAL_I2C_Init+0x196>
 8002c46:	2301      	movs	r3, #1
 8002c48:	e022      	b.n	8002c90 <HAL_I2C_Init+0x1dc>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10e      	bne.n	8002c70 <HAL_I2C_Init+0x1bc>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	1e58      	subs	r0, r3, #1
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6859      	ldr	r1, [r3, #4]
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	440b      	add	r3, r1
 8002c60:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c64:	3301      	adds	r3, #1
 8002c66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c6e:	e00f      	b.n	8002c90 <HAL_I2C_Init+0x1dc>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	1e58      	subs	r0, r3, #1
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6859      	ldr	r1, [r3, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	0099      	lsls	r1, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c86:	3301      	adds	r3, #1
 8002c88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	6809      	ldr	r1, [r1, #0]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69da      	ldr	r2, [r3, #28]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	431a      	orrs	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002cbe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6911      	ldr	r1, [r2, #16]
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	68d2      	ldr	r2, [r2, #12]
 8002cca:	4311      	orrs	r1, r2
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6812      	ldr	r2, [r2, #0]
 8002cd0:	430b      	orrs	r3, r1
 8002cd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	695a      	ldr	r2, [r3, #20]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f042 0201 	orr.w	r2, r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2220      	movs	r2, #32
 8002d0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	000186a0 	.word	0x000186a0
 8002d2c:	001e847f 	.word	0x001e847f
 8002d30:	003d08ff 	.word	0x003d08ff
 8002d34:	431bde83 	.word	0x431bde83
 8002d38:	10624dd3 	.word	0x10624dd3

08002d3c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b088      	sub	sp, #32
 8002d40:	af02      	add	r7, sp, #8
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	607a      	str	r2, [r7, #4]
 8002d46:	461a      	mov	r2, r3
 8002d48:	460b      	mov	r3, r1
 8002d4a:	817b      	strh	r3, [r7, #10]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d50:	f7fe fc3e 	bl	80015d0 <HAL_GetTick>
 8002d54:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b20      	cmp	r3, #32
 8002d60:	f040 80e0 	bne.w	8002f24 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	2319      	movs	r3, #25
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	4970      	ldr	r1, [pc, #448]	@ (8002f30 <HAL_I2C_Master_Transmit+0x1f4>)
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 fc64 	bl	800363c <I2C_WaitOnFlagUntilTimeout>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	e0d3      	b.n	8002f26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d101      	bne.n	8002d8c <HAL_I2C_Master_Transmit+0x50>
 8002d88:	2302      	movs	r3, #2
 8002d8a:	e0cc      	b.n	8002f26 <HAL_I2C_Master_Transmit+0x1ea>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d007      	beq.n	8002db2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f042 0201 	orr.w	r2, r2, #1
 8002db0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002dc0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2221      	movs	r2, #33	@ 0x21
 8002dc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2210      	movs	r2, #16
 8002dce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	893a      	ldrh	r2, [r7, #8]
 8002de2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	4a50      	ldr	r2, [pc, #320]	@ (8002f34 <HAL_I2C_Master_Transmit+0x1f8>)
 8002df2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002df4:	8979      	ldrh	r1, [r7, #10]
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	6a3a      	ldr	r2, [r7, #32]
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 face 	bl	800339c <I2C_MasterRequestWrite>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e08d      	b.n	8002f26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	613b      	str	r3, [r7, #16]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	613b      	str	r3, [r7, #16]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	613b      	str	r3, [r7, #16]
 8002e1e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e20:	e066      	b.n	8002ef0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	6a39      	ldr	r1, [r7, #32]
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 fd22 	bl	8003870 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00d      	beq.n	8002e4e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	d107      	bne.n	8002e4a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e06b      	b.n	8002f26 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e52:	781a      	ldrb	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5e:	1c5a      	adds	r2, r3, #1
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e76:	3b01      	subs	r3, #1
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b04      	cmp	r3, #4
 8002e8a:	d11b      	bne.n	8002ec4 <HAL_I2C_Master_Transmit+0x188>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d017      	beq.n	8002ec4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e98:	781a      	ldrb	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea4:	1c5a      	adds	r2, r3, #1
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	6a39      	ldr	r1, [r7, #32]
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 fd19 	bl	8003900 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00d      	beq.n	8002ef0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d107      	bne.n	8002eec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e01a      	b.n	8002f26 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d194      	bne.n	8002e22 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f20:	2300      	movs	r3, #0
 8002f22:	e000      	b.n	8002f26 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f24:	2302      	movs	r3, #2
  }
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	00100002 	.word	0x00100002
 8002f34:	ffff0000 	.word	0xffff0000

08002f38 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08c      	sub	sp, #48	@ 0x30
 8002f3c:	af02      	add	r7, sp, #8
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	607a      	str	r2, [r7, #4]
 8002f42:	461a      	mov	r2, r3
 8002f44:	460b      	mov	r3, r1
 8002f46:	817b      	strh	r3, [r7, #10]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f4c:	f7fe fb40 	bl	80015d0 <HAL_GetTick>
 8002f50:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b20      	cmp	r3, #32
 8002f5c:	f040 8217 	bne.w	800338e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	2319      	movs	r3, #25
 8002f66:	2201      	movs	r2, #1
 8002f68:	497c      	ldr	r1, [pc, #496]	@ (800315c <HAL_I2C_Master_Receive+0x224>)
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 fb66 	bl	800363c <I2C_WaitOnFlagUntilTimeout>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002f76:	2302      	movs	r3, #2
 8002f78:	e20a      	b.n	8003390 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d101      	bne.n	8002f88 <HAL_I2C_Master_Receive+0x50>
 8002f84:	2302      	movs	r3, #2
 8002f86:	e203      	b.n	8003390 <HAL_I2C_Master_Receive+0x458>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d007      	beq.n	8002fae <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f042 0201 	orr.w	r2, r2, #1
 8002fac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fbc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2222      	movs	r2, #34	@ 0x22
 8002fc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2210      	movs	r2, #16
 8002fca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	893a      	ldrh	r2, [r7, #8]
 8002fde:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	4a5c      	ldr	r2, [pc, #368]	@ (8003160 <HAL_I2C_Master_Receive+0x228>)
 8002fee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ff0:	8979      	ldrh	r1, [r7, #10]
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 fa52 	bl	80034a0 <I2C_MasterRequestRead>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e1c4      	b.n	8003390 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800300a:	2b00      	cmp	r3, #0
 800300c:	d113      	bne.n	8003036 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800300e:	2300      	movs	r3, #0
 8003010:	623b      	str	r3, [r7, #32]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	623b      	str	r3, [r7, #32]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	623b      	str	r3, [r7, #32]
 8003022:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	e198      	b.n	8003368 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800303a:	2b01      	cmp	r3, #1
 800303c:	d11b      	bne.n	8003076 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800304c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800304e:	2300      	movs	r3, #0
 8003050:	61fb      	str	r3, [r7, #28]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	61fb      	str	r3, [r7, #28]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	61fb      	str	r3, [r7, #28]
 8003062:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	e178      	b.n	8003368 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800307a:	2b02      	cmp	r3, #2
 800307c:	d11b      	bne.n	80030b6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800308c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800309c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800309e:	2300      	movs	r3, #0
 80030a0:	61bb      	str	r3, [r7, #24]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	61bb      	str	r3, [r7, #24]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	61bb      	str	r3, [r7, #24]
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	e158      	b.n	8003368 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80030c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030c6:	2300      	movs	r3, #0
 80030c8:	617b      	str	r3, [r7, #20]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	617b      	str	r3, [r7, #20]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	617b      	str	r3, [r7, #20]
 80030da:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80030dc:	e144      	b.n	8003368 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e2:	2b03      	cmp	r3, #3
 80030e4:	f200 80f1 	bhi.w	80032ca <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d123      	bne.n	8003138 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030f2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 fc4b 	bl	8003990 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e145      	b.n	8003390 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	691a      	ldr	r2, [r3, #16]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310e:	b2d2      	uxtb	r2, r2
 8003110:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003116:	1c5a      	adds	r2, r3, #1
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003120:	3b01      	subs	r3, #1
 8003122:	b29a      	uxth	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800312c:	b29b      	uxth	r3, r3
 800312e:	3b01      	subs	r3, #1
 8003130:	b29a      	uxth	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003136:	e117      	b.n	8003368 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800313c:	2b02      	cmp	r3, #2
 800313e:	d14e      	bne.n	80031de <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003146:	2200      	movs	r2, #0
 8003148:	4906      	ldr	r1, [pc, #24]	@ (8003164 <HAL_I2C_Master_Receive+0x22c>)
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 fa76 	bl	800363c <I2C_WaitOnFlagUntilTimeout>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d008      	beq.n	8003168 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e11a      	b.n	8003390 <HAL_I2C_Master_Receive+0x458>
 800315a:	bf00      	nop
 800315c:	00100002 	.word	0x00100002
 8003160:	ffff0000 	.word	0xffff0000
 8003164:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003176:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	691a      	ldr	r2, [r3, #16]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003182:	b2d2      	uxtb	r2, r2
 8003184:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318a:	1c5a      	adds	r2, r3, #1
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003194:	3b01      	subs	r3, #1
 8003196:	b29a      	uxth	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	3b01      	subs	r3, #1
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	691a      	ldr	r2, [r3, #16]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b4:	b2d2      	uxtb	r2, r2
 80031b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031bc:	1c5a      	adds	r2, r3, #1
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031c6:	3b01      	subs	r3, #1
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80031dc:	e0c4      	b.n	8003368 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031e4:	2200      	movs	r2, #0
 80031e6:	496c      	ldr	r1, [pc, #432]	@ (8003398 <HAL_I2C_Master_Receive+0x460>)
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 fa27 	bl	800363c <I2C_WaitOnFlagUntilTimeout>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e0cb      	b.n	8003390 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003206:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	691a      	ldr	r2, [r3, #16]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321a:	1c5a      	adds	r2, r3, #1
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003224:	3b01      	subs	r3, #1
 8003226:	b29a      	uxth	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003230:	b29b      	uxth	r3, r3
 8003232:	3b01      	subs	r3, #1
 8003234:	b29a      	uxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800323a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003240:	2200      	movs	r2, #0
 8003242:	4955      	ldr	r1, [pc, #340]	@ (8003398 <HAL_I2C_Master_Receive+0x460>)
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f000 f9f9 	bl	800363c <I2C_WaitOnFlagUntilTimeout>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e09d      	b.n	8003390 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003262:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	691a      	ldr	r2, [r3, #16]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326e:	b2d2      	uxtb	r2, r2
 8003270:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003276:	1c5a      	adds	r2, r3, #1
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003280:	3b01      	subs	r3, #1
 8003282:	b29a      	uxth	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800328c:	b29b      	uxth	r3, r3
 800328e:	3b01      	subs	r3, #1
 8003290:	b29a      	uxth	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	691a      	ldr	r2, [r3, #16]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a8:	1c5a      	adds	r2, r3, #1
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032b2:	3b01      	subs	r3, #1
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032be:	b29b      	uxth	r3, r3
 80032c0:	3b01      	subs	r3, #1
 80032c2:	b29a      	uxth	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80032c8:	e04e      	b.n	8003368 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 fb5e 	bl	8003990 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e058      	b.n	8003390 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	691a      	ldr	r2, [r3, #16]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e8:	b2d2      	uxtb	r2, r2
 80032ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f0:	1c5a      	adds	r2, r3, #1
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032fa:	3b01      	subs	r3, #1
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003306:	b29b      	uxth	r3, r3
 8003308:	3b01      	subs	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	f003 0304 	and.w	r3, r3, #4
 800331a:	2b04      	cmp	r3, #4
 800331c:	d124      	bne.n	8003368 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003322:	2b03      	cmp	r3, #3
 8003324:	d107      	bne.n	8003336 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003334:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	691a      	ldr	r2, [r3, #16]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003340:	b2d2      	uxtb	r2, r2
 8003342:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003348:	1c5a      	adds	r2, r3, #1
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003352:	3b01      	subs	r3, #1
 8003354:	b29a      	uxth	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800335e:	b29b      	uxth	r3, r3
 8003360:	3b01      	subs	r3, #1
 8003362:	b29a      	uxth	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800336c:	2b00      	cmp	r3, #0
 800336e:	f47f aeb6 	bne.w	80030de <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2220      	movs	r2, #32
 8003376:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800338a:	2300      	movs	r3, #0
 800338c:	e000      	b.n	8003390 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800338e:	2302      	movs	r3, #2
  }
}
 8003390:	4618      	mov	r0, r3
 8003392:	3728      	adds	r7, #40	@ 0x28
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	00010004 	.word	0x00010004

0800339c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b088      	sub	sp, #32
 80033a0:	af02      	add	r7, sp, #8
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	607a      	str	r2, [r7, #4]
 80033a6:	603b      	str	r3, [r7, #0]
 80033a8:	460b      	mov	r3, r1
 80033aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	2b08      	cmp	r3, #8
 80033b6:	d006      	beq.n	80033c6 <I2C_MasterRequestWrite+0x2a>
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d003      	beq.n	80033c6 <I2C_MasterRequestWrite+0x2a>
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80033c4:	d108      	bne.n	80033d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	e00b      	b.n	80033f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033dc:	2b12      	cmp	r3, #18
 80033de:	d107      	bne.n	80033f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f000 f91d 	bl	800363c <I2C_WaitOnFlagUntilTimeout>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00d      	beq.n	8003424 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003412:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003416:	d103      	bne.n	8003420 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800341e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e035      	b.n	8003490 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800342c:	d108      	bne.n	8003440 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800342e:	897b      	ldrh	r3, [r7, #10]
 8003430:	b2db      	uxtb	r3, r3
 8003432:	461a      	mov	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800343c:	611a      	str	r2, [r3, #16]
 800343e:	e01b      	b.n	8003478 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003440:	897b      	ldrh	r3, [r7, #10]
 8003442:	11db      	asrs	r3, r3, #7
 8003444:	b2db      	uxtb	r3, r3
 8003446:	f003 0306 	and.w	r3, r3, #6
 800344a:	b2db      	uxtb	r3, r3
 800344c:	f063 030f 	orn	r3, r3, #15
 8003450:	b2da      	uxtb	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	490e      	ldr	r1, [pc, #56]	@ (8003498 <I2C_MasterRequestWrite+0xfc>)
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 f966 	bl	8003730 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e010      	b.n	8003490 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800346e:	897b      	ldrh	r3, [r7, #10]
 8003470:	b2da      	uxtb	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	4907      	ldr	r1, [pc, #28]	@ (800349c <I2C_MasterRequestWrite+0x100>)
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f000 f956 	bl	8003730 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e000      	b.n	8003490 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3718      	adds	r7, #24
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	00010008 	.word	0x00010008
 800349c:	00010002 	.word	0x00010002

080034a0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af02      	add	r7, sp, #8
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	607a      	str	r2, [r7, #4]
 80034aa:	603b      	str	r3, [r7, #0]
 80034ac:	460b      	mov	r3, r1
 80034ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80034c4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d006      	beq.n	80034da <I2C_MasterRequestRead+0x3a>
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d003      	beq.n	80034da <I2C_MasterRequestRead+0x3a>
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80034d8:	d108      	bne.n	80034ec <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	e00b      	b.n	8003504 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f0:	2b11      	cmp	r3, #17
 80034f2:	d107      	bne.n	8003504 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003502:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 f893 	bl	800363c <I2C_WaitOnFlagUntilTimeout>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00d      	beq.n	8003538 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003526:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800352a:	d103      	bne.n	8003534 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003532:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e079      	b.n	800362c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003540:	d108      	bne.n	8003554 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003542:	897b      	ldrh	r3, [r7, #10]
 8003544:	b2db      	uxtb	r3, r3
 8003546:	f043 0301 	orr.w	r3, r3, #1
 800354a:	b2da      	uxtb	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	611a      	str	r2, [r3, #16]
 8003552:	e05f      	b.n	8003614 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003554:	897b      	ldrh	r3, [r7, #10]
 8003556:	11db      	asrs	r3, r3, #7
 8003558:	b2db      	uxtb	r3, r3
 800355a:	f003 0306 	and.w	r3, r3, #6
 800355e:	b2db      	uxtb	r3, r3
 8003560:	f063 030f 	orn	r3, r3, #15
 8003564:	b2da      	uxtb	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	4930      	ldr	r1, [pc, #192]	@ (8003634 <I2C_MasterRequestRead+0x194>)
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 f8dc 	bl	8003730 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e054      	b.n	800362c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003582:	897b      	ldrh	r3, [r7, #10]
 8003584:	b2da      	uxtb	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	4929      	ldr	r1, [pc, #164]	@ (8003638 <I2C_MasterRequestRead+0x198>)
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 f8cc 	bl	8003730 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e044      	b.n	800362c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a2:	2300      	movs	r3, #0
 80035a4:	613b      	str	r3, [r7, #16]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	613b      	str	r3, [r7, #16]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035c6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f000 f831 	bl	800363c <I2C_WaitOnFlagUntilTimeout>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00d      	beq.n	80035fc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035ee:	d103      	bne.n	80035f8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035f6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e017      	b.n	800362c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80035fc:	897b      	ldrh	r3, [r7, #10]
 80035fe:	11db      	asrs	r3, r3, #7
 8003600:	b2db      	uxtb	r3, r3
 8003602:	f003 0306 	and.w	r3, r3, #6
 8003606:	b2db      	uxtb	r3, r3
 8003608:	f063 030e 	orn	r3, r3, #14
 800360c:	b2da      	uxtb	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	4907      	ldr	r1, [pc, #28]	@ (8003638 <I2C_MasterRequestRead+0x198>)
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 f888 	bl	8003730 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	00010008 	.word	0x00010008
 8003638:	00010002 	.word	0x00010002

0800363c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	603b      	str	r3, [r7, #0]
 8003648:	4613      	mov	r3, r2
 800364a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800364c:	e048      	b.n	80036e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003654:	d044      	beq.n	80036e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003656:	f7fd ffbb 	bl	80015d0 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	d302      	bcc.n	800366c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d139      	bne.n	80036e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	0c1b      	lsrs	r3, r3, #16
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b01      	cmp	r3, #1
 8003674:	d10d      	bne.n	8003692 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	43da      	mvns	r2, r3
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	4013      	ands	r3, r2
 8003682:	b29b      	uxth	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	bf0c      	ite	eq
 8003688:	2301      	moveq	r3, #1
 800368a:	2300      	movne	r3, #0
 800368c:	b2db      	uxtb	r3, r3
 800368e:	461a      	mov	r2, r3
 8003690:	e00c      	b.n	80036ac <I2C_WaitOnFlagUntilTimeout+0x70>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	43da      	mvns	r2, r3
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	4013      	ands	r3, r2
 800369e:	b29b      	uxth	r3, r3
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	bf0c      	ite	eq
 80036a4:	2301      	moveq	r3, #1
 80036a6:	2300      	movne	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	461a      	mov	r2, r3
 80036ac:	79fb      	ldrb	r3, [r7, #7]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d116      	bne.n	80036e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2220      	movs	r2, #32
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036cc:	f043 0220 	orr.w	r2, r3, #32
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e023      	b.n	8003728 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	0c1b      	lsrs	r3, r3, #16
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d10d      	bne.n	8003706 <I2C_WaitOnFlagUntilTimeout+0xca>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	43da      	mvns	r2, r3
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	4013      	ands	r3, r2
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	bf0c      	ite	eq
 80036fc:	2301      	moveq	r3, #1
 80036fe:	2300      	movne	r3, #0
 8003700:	b2db      	uxtb	r3, r3
 8003702:	461a      	mov	r2, r3
 8003704:	e00c      	b.n	8003720 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	43da      	mvns	r2, r3
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	4013      	ands	r3, r2
 8003712:	b29b      	uxth	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	bf0c      	ite	eq
 8003718:	2301      	moveq	r3, #1
 800371a:	2300      	movne	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	461a      	mov	r2, r3
 8003720:	79fb      	ldrb	r3, [r7, #7]
 8003722:	429a      	cmp	r2, r3
 8003724:	d093      	beq.n	800364e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
 800373c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800373e:	e071      	b.n	8003824 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800374a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800374e:	d123      	bne.n	8003798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800375e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003768:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003784:	f043 0204 	orr.w	r2, r3, #4
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e067      	b.n	8003868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379e:	d041      	beq.n	8003824 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037a0:	f7fd ff16 	bl	80015d0 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d302      	bcc.n	80037b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d136      	bne.n	8003824 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	0c1b      	lsrs	r3, r3, #16
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d10c      	bne.n	80037da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	43da      	mvns	r2, r3
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	4013      	ands	r3, r2
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	bf14      	ite	ne
 80037d2:	2301      	movne	r3, #1
 80037d4:	2300      	moveq	r3, #0
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	e00b      	b.n	80037f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	43da      	mvns	r2, r3
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	4013      	ands	r3, r2
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	bf14      	ite	ne
 80037ec:	2301      	movne	r3, #1
 80037ee:	2300      	moveq	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d016      	beq.n	8003824 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2220      	movs	r2, #32
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003810:	f043 0220 	orr.w	r2, r3, #32
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e021      	b.n	8003868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	0c1b      	lsrs	r3, r3, #16
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b01      	cmp	r3, #1
 800382c:	d10c      	bne.n	8003848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	43da      	mvns	r2, r3
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	4013      	ands	r3, r2
 800383a:	b29b      	uxth	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	bf14      	ite	ne
 8003840:	2301      	movne	r3, #1
 8003842:	2300      	moveq	r3, #0
 8003844:	b2db      	uxtb	r3, r3
 8003846:	e00b      	b.n	8003860 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	43da      	mvns	r2, r3
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	4013      	ands	r3, r2
 8003854:	b29b      	uxth	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	bf14      	ite	ne
 800385a:	2301      	movne	r3, #1
 800385c:	2300      	moveq	r3, #0
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	f47f af6d 	bne.w	8003740 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800387c:	e034      	b.n	80038e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 f8e3 	bl	8003a4a <I2C_IsAcknowledgeFailed>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e034      	b.n	80038f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003894:	d028      	beq.n	80038e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003896:	f7fd fe9b 	bl	80015d0 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d302      	bcc.n	80038ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d11d      	bne.n	80038e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038b6:	2b80      	cmp	r3, #128	@ 0x80
 80038b8:	d016      	beq.n	80038e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d4:	f043 0220 	orr.w	r2, r3, #32
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e007      	b.n	80038f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038f2:	2b80      	cmp	r3, #128	@ 0x80
 80038f4:	d1c3      	bne.n	800387e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800390c:	e034      	b.n	8003978 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f000 f89b 	bl	8003a4a <I2C_IsAcknowledgeFailed>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e034      	b.n	8003988 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003924:	d028      	beq.n	8003978 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003926:	f7fd fe53 	bl	80015d0 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	429a      	cmp	r2, r3
 8003934:	d302      	bcc.n	800393c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d11d      	bne.n	8003978 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	f003 0304 	and.w	r3, r3, #4
 8003946:	2b04      	cmp	r3, #4
 8003948:	d016      	beq.n	8003978 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2220      	movs	r2, #32
 8003954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003964:	f043 0220 	orr.w	r2, r3, #32
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e007      	b.n	8003988 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	f003 0304 	and.w	r3, r3, #4
 8003982:	2b04      	cmp	r3, #4
 8003984:	d1c3      	bne.n	800390e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800399c:	e049      	b.n	8003a32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	f003 0310 	and.w	r3, r3, #16
 80039a8:	2b10      	cmp	r3, #16
 80039aa:	d119      	bne.n	80039e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f06f 0210 	mvn.w	r2, #16
 80039b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2220      	movs	r2, #32
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e030      	b.n	8003a42 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039e0:	f7fd fdf6 	bl	80015d0 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d302      	bcc.n	80039f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d11d      	bne.n	8003a32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a00:	2b40      	cmp	r3, #64	@ 0x40
 8003a02:	d016      	beq.n	8003a32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1e:	f043 0220 	orr.w	r2, r3, #32
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e007      	b.n	8003a42 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a3c:	2b40      	cmp	r3, #64	@ 0x40
 8003a3e:	d1ae      	bne.n	800399e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a60:	d11b      	bne.n	8003a9a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a6a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2220      	movs	r2, #32
 8003a76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a86:	f043 0204 	orr.w	r2, r3, #4
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e000      	b.n	8003a9c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b088      	sub	sp, #32
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e128      	b.n	8003d0c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d109      	bne.n	8003ada <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a90      	ldr	r2, [pc, #576]	@ (8003d14 <HAL_I2S_Init+0x26c>)
 8003ad2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7fd f8f5 	bl	8000cc4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2202      	movs	r2, #2
 8003ade:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	69db      	ldr	r3, [r3, #28]
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6812      	ldr	r2, [r2, #0]
 8003aec:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003af0:	f023 030f 	bic.w	r3, r3, #15
 8003af4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2202      	movs	r2, #2
 8003afc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d060      	beq.n	8003bc8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d102      	bne.n	8003b14 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003b0e:	2310      	movs	r3, #16
 8003b10:	617b      	str	r3, [r7, #20]
 8003b12:	e001      	b.n	8003b18 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003b14:	2320      	movs	r3, #32
 8003b16:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	2b20      	cmp	r3, #32
 8003b1e:	d802      	bhi.n	8003b26 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003b26:	2001      	movs	r0, #1
 8003b28:	f001 fcda 	bl	80054e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003b2c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b36:	d125      	bne.n	8003b84 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d010      	beq.n	8003b62 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4413      	add	r3, r2
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	461a      	mov	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b5c:	3305      	adds	r3, #5
 8003b5e:	613b      	str	r3, [r7, #16]
 8003b60:	e01f      	b.n	8003ba2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	461a      	mov	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7e:	3305      	adds	r3, #5
 8003b80:	613b      	str	r3, [r7, #16]
 8003b82:	e00e      	b.n	8003ba2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4413      	add	r3, r2
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	461a      	mov	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9e:	3305      	adds	r3, #5
 8003ba0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	4a5c      	ldr	r2, [pc, #368]	@ (8003d18 <HAL_I2S_Init+0x270>)
 8003ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8003baa:	08db      	lsrs	r3, r3, #3
 8003bac:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	085b      	lsrs	r3, r3, #1
 8003bbe:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	021b      	lsls	r3, r3, #8
 8003bc4:	61bb      	str	r3, [r7, #24]
 8003bc6:	e003      	b.n	8003bd0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003bc8:	2302      	movs	r3, #2
 8003bca:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d902      	bls.n	8003bdc <HAL_I2S_Init+0x134>
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	2bff      	cmp	r3, #255	@ 0xff
 8003bda:	d907      	bls.n	8003bec <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be0:	f043 0210 	orr.w	r2, r3, #16
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e08f      	b.n	8003d0c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	691a      	ldr	r2, [r3, #16]
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	ea42 0103 	orr.w	r1, r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	69fa      	ldr	r2, [r7, #28]
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003c0a:	f023 030f 	bic.w	r3, r3, #15
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6851      	ldr	r1, [r2, #4]
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	6892      	ldr	r2, [r2, #8]
 8003c16:	4311      	orrs	r1, r2
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	68d2      	ldr	r2, [r2, #12]
 8003c1c:	4311      	orrs	r1, r2
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6992      	ldr	r2, [r2, #24]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	431a      	orrs	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c2e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d161      	bne.n	8003cfc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a38      	ldr	r2, [pc, #224]	@ (8003d1c <HAL_I2S_Init+0x274>)
 8003c3c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a37      	ldr	r2, [pc, #220]	@ (8003d20 <HAL_I2S_Init+0x278>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d101      	bne.n	8003c4c <HAL_I2S_Init+0x1a4>
 8003c48:	4b36      	ldr	r3, [pc, #216]	@ (8003d24 <HAL_I2S_Init+0x27c>)
 8003c4a:	e001      	b.n	8003c50 <HAL_I2S_Init+0x1a8>
 8003c4c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6812      	ldr	r2, [r2, #0]
 8003c56:	4932      	ldr	r1, [pc, #200]	@ (8003d20 <HAL_I2S_Init+0x278>)
 8003c58:	428a      	cmp	r2, r1
 8003c5a:	d101      	bne.n	8003c60 <HAL_I2S_Init+0x1b8>
 8003c5c:	4a31      	ldr	r2, [pc, #196]	@ (8003d24 <HAL_I2S_Init+0x27c>)
 8003c5e:	e001      	b.n	8003c64 <HAL_I2S_Init+0x1bc>
 8003c60:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003c64:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003c68:	f023 030f 	bic.w	r3, r3, #15
 8003c6c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a2b      	ldr	r2, [pc, #172]	@ (8003d20 <HAL_I2S_Init+0x278>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d101      	bne.n	8003c7c <HAL_I2S_Init+0x1d4>
 8003c78:	4b2a      	ldr	r3, [pc, #168]	@ (8003d24 <HAL_I2S_Init+0x27c>)
 8003c7a:	e001      	b.n	8003c80 <HAL_I2S_Init+0x1d8>
 8003c7c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c80:	2202      	movs	r2, #2
 8003c82:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a25      	ldr	r2, [pc, #148]	@ (8003d20 <HAL_I2S_Init+0x278>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d101      	bne.n	8003c92 <HAL_I2S_Init+0x1ea>
 8003c8e:	4b25      	ldr	r3, [pc, #148]	@ (8003d24 <HAL_I2S_Init+0x27c>)
 8003c90:	e001      	b.n	8003c96 <HAL_I2S_Init+0x1ee>
 8003c92:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c96:	69db      	ldr	r3, [r3, #28]
 8003c98:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ca2:	d003      	beq.n	8003cac <HAL_I2S_Init+0x204>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d103      	bne.n	8003cb4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003cac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003cb0:	613b      	str	r3, [r7, #16]
 8003cb2:	e001      	b.n	8003cb8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	897b      	ldrh	r3, [r7, #10]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003ce4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a0d      	ldr	r2, [pc, #52]	@ (8003d20 <HAL_I2S_Init+0x278>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d101      	bne.n	8003cf4 <HAL_I2S_Init+0x24c>
 8003cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8003d24 <HAL_I2S_Init+0x27c>)
 8003cf2:	e001      	b.n	8003cf8 <HAL_I2S_Init+0x250>
 8003cf4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003cf8:	897a      	ldrh	r2, [r7, #10]
 8003cfa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3720      	adds	r7, #32
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	080043b1 	.word	0x080043b1
 8003d18:	cccccccd 	.word	0xcccccccd
 8003d1c:	08004539 	.word	0x08004539
 8003d20:	40003800 	.word	0x40003800
 8003d24:	40003400 	.word	0x40003400

08003d28 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	4613      	mov	r3, r2
 8003d34:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d002      	beq.n	8003d42 <HAL_I2S_Transmit_DMA+0x1a>
 8003d3c:	88fb      	ldrh	r3, [r7, #6]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e08a      	b.n	8003e5c <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d001      	beq.n	8003d56 <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8003d52:	2302      	movs	r3, #2
 8003d54:	e082      	b.n	8003e5c <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d101      	bne.n	8003d66 <HAL_I2S_Transmit_DMA+0x3e>
 8003d62:	2302      	movs	r3, #2
 8003d64:	e07a      	b.n	8003e5c <HAL_I2S_Transmit_DMA+0x134>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2203      	movs	r2, #3
 8003d72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	f003 0307 	and.w	r3, r3, #7
 8003d8c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	2b03      	cmp	r3, #3
 8003d92:	d002      	beq.n	8003d9a <HAL_I2S_Transmit_DMA+0x72>
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	2b05      	cmp	r3, #5
 8003d98:	d10a      	bne.n	8003db0 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 8003d9a:	88fb      	ldrh	r3, [r7, #6]
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003da4:	88fb      	ldrh	r3, [r7, #6]
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003dae:	e005      	b.n	8003dbc <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	88fa      	ldrh	r2, [r7, #6]
 8003db4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	88fa      	ldrh	r2, [r7, #6]
 8003dba:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc0:	4a28      	ldr	r2, [pc, #160]	@ (8003e64 <HAL_I2S_Transmit_DMA+0x13c>)
 8003dc2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc8:	4a27      	ldr	r2, [pc, #156]	@ (8003e68 <HAL_I2S_Transmit_DMA+0x140>)
 8003dca:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd0:	4a26      	ldr	r2, [pc, #152]	@ (8003e6c <HAL_I2S_Transmit_DMA+0x144>)
 8003dd2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003ddc:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003de4:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003dec:	f7fe f93e 	bl	800206c <HAL_DMA_Start_IT>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00f      	beq.n	8003e16 <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dfa:	f043 0208 	orr.w	r2, r3, #8
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e022      	b.n	8003e5c <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d107      	bne.n	8003e3c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685a      	ldr	r2, [r3, #4]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f042 0202 	orr.w	r2, r2, #2
 8003e3a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d107      	bne.n	8003e5a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	69da      	ldr	r2, [r3, #28]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e58:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3718      	adds	r7, #24
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	0800428f 	.word	0x0800428f
 8003e68:	0800424d 	.word	0x0800424d
 8003e6c:	080042ab 	.word	0x080042ab

08003e70 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b088      	sub	sp, #32
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e84:	d004      	beq.n	8003e90 <HAL_I2S_DMAStop+0x20>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f040 80d1 	bne.w	8004032 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00f      	beq.n	8003eb8 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7fe f93d 	bl	800211c <HAL_DMA_Abort>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d007      	beq.n	8003eb8 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eac:	f043 0208 	orr.w	r2, r3, #8
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8003eb8:	2364      	movs	r3, #100	@ 0x64
 8003eba:	2201      	movs	r2, #1
 8003ebc:	2102      	movs	r1, #2
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 fb00 	bl	80044c4 <I2S_WaitFlagStateUntilTimeout>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00b      	beq.n	8003ee2 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ece:	f043 0201 	orr.w	r2, r3, #1
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8003ee2:	2364      	movs	r3, #100	@ 0x64
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	2180      	movs	r1, #128	@ 0x80
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 faeb 	bl	80044c4 <I2S_WaitFlagStateUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00b      	beq.n	8003f0c <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef8:	f043 0201 	orr.w	r2, r3, #1
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	69da      	ldr	r2, [r3, #28]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f1a:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	617b      	str	r3, [r7, #20]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	617b      	str	r3, [r7, #20]
 8003f28:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685a      	ldr	r2, [r3, #4]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0202 	bic.w	r2, r2, #2
 8003f38:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b05      	cmp	r3, #5
 8003f44:	f040 8165 	bne.w	8004212 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00f      	beq.n	8003f70 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7fe f8e1 	bl	800211c <HAL_DMA_Abort>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d007      	beq.n	8003f70 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f64:	f043 0208 	orr.w	r2, r3, #8
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a8a      	ldr	r2, [pc, #552]	@ (80041a0 <HAL_I2S_DMAStop+0x330>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d101      	bne.n	8003f7e <HAL_I2S_DMAStop+0x10e>
 8003f7a:	4b8a      	ldr	r3, [pc, #552]	@ (80041a4 <HAL_I2S_DMAStop+0x334>)
 8003f7c:	e001      	b.n	8003f82 <HAL_I2S_DMAStop+0x112>
 8003f7e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f82:	69da      	ldr	r2, [r3, #28]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4985      	ldr	r1, [pc, #532]	@ (80041a0 <HAL_I2S_DMAStop+0x330>)
 8003f8a:	428b      	cmp	r3, r1
 8003f8c:	d101      	bne.n	8003f92 <HAL_I2S_DMAStop+0x122>
 8003f8e:	4b85      	ldr	r3, [pc, #532]	@ (80041a4 <HAL_I2S_DMAStop+0x334>)
 8003f90:	e001      	b.n	8003f96 <HAL_I2S_DMAStop+0x126>
 8003f92:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f9a:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	613b      	str	r3, [r7, #16]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a7e      	ldr	r2, [pc, #504]	@ (80041a0 <HAL_I2S_DMAStop+0x330>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d101      	bne.n	8003fae <HAL_I2S_DMAStop+0x13e>
 8003faa:	4b7e      	ldr	r3, [pc, #504]	@ (80041a4 <HAL_I2S_DMAStop+0x334>)
 8003fac:	e001      	b.n	8003fb2 <HAL_I2S_DMAStop+0x142>
 8003fae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	613b      	str	r3, [r7, #16]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a79      	ldr	r2, [pc, #484]	@ (80041a0 <HAL_I2S_DMAStop+0x330>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d101      	bne.n	8003fc4 <HAL_I2S_DMAStop+0x154>
 8003fc0:	4b78      	ldr	r3, [pc, #480]	@ (80041a4 <HAL_I2S_DMAStop+0x334>)
 8003fc2:	e001      	b.n	8003fc8 <HAL_I2S_DMAStop+0x158>
 8003fc4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	613b      	str	r3, [r7, #16]
 8003fcc:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a73      	ldr	r2, [pc, #460]	@ (80041a0 <HAL_I2S_DMAStop+0x330>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d101      	bne.n	8003fdc <HAL_I2S_DMAStop+0x16c>
 8003fd8:	4b72      	ldr	r3, [pc, #456]	@ (80041a4 <HAL_I2S_DMAStop+0x334>)
 8003fda:	e001      	b.n	8003fe0 <HAL_I2S_DMAStop+0x170>
 8003fdc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	496e      	ldr	r1, [pc, #440]	@ (80041a0 <HAL_I2S_DMAStop+0x330>)
 8003fe8:	428b      	cmp	r3, r1
 8003fea:	d101      	bne.n	8003ff0 <HAL_I2S_DMAStop+0x180>
 8003fec:	4b6d      	ldr	r3, [pc, #436]	@ (80041a4 <HAL_I2S_DMAStop+0x334>)
 8003fee:	e001      	b.n	8003ff4 <HAL_I2S_DMAStop+0x184>
 8003ff0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ff4:	f022 0201 	bic.w	r2, r2, #1
 8003ff8:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10c      	bne.n	800401c <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004006:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        errorcode = HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800401a:	e0fa      	b.n	8004212 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a5f      	ldr	r2, [pc, #380]	@ (80041a0 <HAL_I2S_DMAStop+0x330>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d101      	bne.n	800402a <HAL_I2S_DMAStop+0x1ba>
 8004026:	4b5f      	ldr	r3, [pc, #380]	@ (80041a4 <HAL_I2S_DMAStop+0x334>)
 8004028:	e001      	b.n	800402e <HAL_I2S_DMAStop+0x1be>
 800402a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800402e:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8004030:	e0ef      	b.n	8004212 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800403a:	d005      	beq.n	8004048 <HAL_I2S_DMAStop+0x1d8>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004044:	f040 80e5 	bne.w	8004212 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00f      	beq.n	8004070 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004054:	4618      	mov	r0, r3
 8004056:	f7fe f861 	bl	800211c <HAL_DMA_Abort>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d007      	beq.n	8004070 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004064:	f043 0208 	orr.w	r2, r3, #8
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b05      	cmp	r3, #5
 800407a:	f040 809a 	bne.w	80041b2 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00f      	beq.n	80040a6 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800408a:	4618      	mov	r0, r3
 800408c:	f7fe f846 	bl	800211c <HAL_DMA_Abort>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d007      	beq.n	80040a6 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800409a:	f043 0208 	orr.w	r2, r3, #8
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 80040a6:	f7fd fa93 	bl	80015d0 <HAL_GetTick>
 80040aa:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80040ac:	e012      	b.n	80040d4 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80040ae:	f7fd fa8f 	bl	80015d0 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b64      	cmp	r3, #100	@ 0x64
 80040ba:	d90b      	bls.n	80040d4 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c0:	f043 0201 	orr.w	r2, r3, #1
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a31      	ldr	r2, [pc, #196]	@ (80041a0 <HAL_I2S_DMAStop+0x330>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d101      	bne.n	80040e2 <HAL_I2S_DMAStop+0x272>
 80040de:	4b31      	ldr	r3, [pc, #196]	@ (80041a4 <HAL_I2S_DMAStop+0x334>)
 80040e0:	e001      	b.n	80040e6 <HAL_I2S_DMAStop+0x276>
 80040e2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d1de      	bne.n	80040ae <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80040f0:	e012      	b.n	8004118 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80040f2:	f7fd fa6d 	bl	80015d0 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b64      	cmp	r3, #100	@ 0x64
 80040fe:	d90b      	bls.n	8004118 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004104:	f043 0201 	orr.w	r2, r3, #1
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a20      	ldr	r2, [pc, #128]	@ (80041a0 <HAL_I2S_DMAStop+0x330>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d101      	bne.n	8004126 <HAL_I2S_DMAStop+0x2b6>
 8004122:	4b20      	ldr	r3, [pc, #128]	@ (80041a4 <HAL_I2S_DMAStop+0x334>)
 8004124:	e001      	b.n	800412a <HAL_I2S_DMAStop+0x2ba>
 8004126:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004130:	2b80      	cmp	r3, #128	@ 0x80
 8004132:	d0de      	beq.n	80040f2 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a19      	ldr	r2, [pc, #100]	@ (80041a0 <HAL_I2S_DMAStop+0x330>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d101      	bne.n	8004142 <HAL_I2S_DMAStop+0x2d2>
 800413e:	4b19      	ldr	r3, [pc, #100]	@ (80041a4 <HAL_I2S_DMAStop+0x334>)
 8004140:	e001      	b.n	8004146 <HAL_I2S_DMAStop+0x2d6>
 8004142:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004146:	69da      	ldr	r2, [r3, #28]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4914      	ldr	r1, [pc, #80]	@ (80041a0 <HAL_I2S_DMAStop+0x330>)
 800414e:	428b      	cmp	r3, r1
 8004150:	d101      	bne.n	8004156 <HAL_I2S_DMAStop+0x2e6>
 8004152:	4b14      	ldr	r3, [pc, #80]	@ (80041a4 <HAL_I2S_DMAStop+0x334>)
 8004154:	e001      	b.n	800415a <HAL_I2S_DMAStop+0x2ea>
 8004156:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800415a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800415e:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8004160:	2300      	movs	r3, #0
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a0d      	ldr	r2, [pc, #52]	@ (80041a0 <HAL_I2S_DMAStop+0x330>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d101      	bne.n	8004172 <HAL_I2S_DMAStop+0x302>
 800416e:	4b0d      	ldr	r3, [pc, #52]	@ (80041a4 <HAL_I2S_DMAStop+0x334>)
 8004170:	e001      	b.n	8004176 <HAL_I2S_DMAStop+0x306>
 8004172:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	60fb      	str	r3, [r7, #12]
 800417a:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a07      	ldr	r2, [pc, #28]	@ (80041a0 <HAL_I2S_DMAStop+0x330>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d101      	bne.n	800418a <HAL_I2S_DMAStop+0x31a>
 8004186:	4b07      	ldr	r3, [pc, #28]	@ (80041a4 <HAL_I2S_DMAStop+0x334>)
 8004188:	e001      	b.n	800418e <HAL_I2S_DMAStop+0x31e>
 800418a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4902      	ldr	r1, [pc, #8]	@ (80041a0 <HAL_I2S_DMAStop+0x330>)
 8004196:	428b      	cmp	r3, r1
 8004198:	d106      	bne.n	80041a8 <HAL_I2S_DMAStop+0x338>
 800419a:	4b02      	ldr	r3, [pc, #8]	@ (80041a4 <HAL_I2S_DMAStop+0x334>)
 800419c:	e006      	b.n	80041ac <HAL_I2S_DMAStop+0x33c>
 800419e:	bf00      	nop
 80041a0:	40003800 	.word	0x40003800
 80041a4:	40003400 	.word	0x40003400
 80041a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041ac:	f022 0202 	bic.w	r2, r2, #2
 80041b0:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	69da      	ldr	r2, [r3, #28]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041c0:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80041c2:	2300      	movs	r3, #0
 80041c4:	60bb      	str	r3, [r7, #8]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	60bb      	str	r3, [r7, #8]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	60bb      	str	r3, [r7, #8]
 80041d6:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f022 0201 	bic.w	r2, r2, #1
 80041e6:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041f0:	d10c      	bne.n	800420c <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode = HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	77fb      	strb	r3, [r7, #31]
 800420a:	e002      	b.n	8004212 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return errorcode;
 800421a:	7ffb      	ldrb	r3, [r7, #31]
}
 800421c:	4618      	mov	r0, r3
 800421e:	3720      	adds	r7, #32
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004258:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	69db      	ldr	r3, [r3, #28]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10e      	bne.n	8004280 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 0202 	bic.w	r2, r2, #2
 8004270:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f004 f8bf 	bl	8008404 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004286:	bf00      	nop
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b084      	sub	sp, #16
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800429a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f004 f8a1 	bl	80083e4 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80042a2:	bf00      	nop
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b084      	sub	sp, #16
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0203 	bic.w	r2, r2, #3
 80042c6:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e0:	f043 0208 	orr.w	r2, r3, #8
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f7ff ffa5 	bl	8004238 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80042ee:	bf00      	nop
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b082      	sub	sp, #8
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004302:	881a      	ldrh	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430e:	1c9a      	adds	r2, r3, #2
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004318:	b29b      	uxth	r3, r3
 800431a:	3b01      	subs	r3, #1
 800431c:	b29a      	uxth	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004326:	b29b      	uxth	r3, r3
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10e      	bne.n	800434a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800433a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f004 f85d 	bl	8008404 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800434a:	bf00      	nop
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b082      	sub	sp, #8
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68da      	ldr	r2, [r3, #12]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004364:	b292      	uxth	r2, r2
 8004366:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800436c:	1c9a      	adds	r2, r3, #2
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004376:	b29b      	uxth	r3, r3
 8004378:	3b01      	subs	r3, #1
 800437a:	b29a      	uxth	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004384:	b29b      	uxth	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10e      	bne.n	80043a8 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004398:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7ff ff3e 	bl	8004224 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80043a8:	bf00      	nop
 80043aa:	3708      	adds	r7, #8
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2b04      	cmp	r3, #4
 80043ca:	d13a      	bne.n	8004442 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d109      	bne.n	80043ea <I2S_IRQHandler+0x3a>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043e0:	2b40      	cmp	r3, #64	@ 0x40
 80043e2:	d102      	bne.n	80043ea <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f7ff ffb4 	bl	8004352 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043f0:	2b40      	cmp	r3, #64	@ 0x40
 80043f2:	d126      	bne.n	8004442 <I2S_IRQHandler+0x92>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f003 0320 	and.w	r3, r3, #32
 80043fe:	2b20      	cmp	r3, #32
 8004400:	d11f      	bne.n	8004442 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004410:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004412:	2300      	movs	r3, #0
 8004414:	613b      	str	r3, [r7, #16]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	613b      	str	r3, [r7, #16]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	613b      	str	r3, [r7, #16]
 8004426:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004434:	f043 0202 	orr.w	r2, r3, #2
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f7ff fefb 	bl	8004238 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b03      	cmp	r3, #3
 800444c:	d136      	bne.n	80044bc <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b02      	cmp	r3, #2
 8004456:	d109      	bne.n	800446c <I2S_IRQHandler+0xbc>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004462:	2b80      	cmp	r3, #128	@ 0x80
 8004464:	d102      	bne.n	800446c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7ff ff45 	bl	80042f6 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	f003 0308 	and.w	r3, r3, #8
 8004472:	2b08      	cmp	r3, #8
 8004474:	d122      	bne.n	80044bc <I2S_IRQHandler+0x10c>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f003 0320 	and.w	r3, r3, #32
 8004480:	2b20      	cmp	r3, #32
 8004482:	d11b      	bne.n	80044bc <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685a      	ldr	r2, [r3, #4]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004492:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004494:	2300      	movs	r3, #0
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	60fb      	str	r3, [r7, #12]
 80044a0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ae:	f043 0204 	orr.w	r2, r3, #4
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7ff febe 	bl	8004238 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044bc:	bf00      	nop
 80044be:	3718      	adds	r7, #24
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	603b      	str	r3, [r7, #0]
 80044d0:	4613      	mov	r3, r2
 80044d2:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80044d4:	f7fd f87c 	bl	80015d0 <HAL_GetTick>
 80044d8:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80044da:	e018      	b.n	800450e <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e2:	d014      	beq.n	800450e <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80044e4:	f7fd f874 	bl	80015d0 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d902      	bls.n	80044fa <I2S_WaitFlagStateUntilTimeout+0x36>
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d109      	bne.n	800450e <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e00f      	b.n	800452e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	4013      	ands	r3, r2
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	429a      	cmp	r2, r3
 800451c:	bf0c      	ite	eq
 800451e:	2301      	moveq	r3, #1
 8004520:	2300      	movne	r3, #0
 8004522:	b2db      	uxtb	r3, r3
 8004524:	461a      	mov	r2, r3
 8004526:	79fb      	ldrb	r3, [r7, #7]
 8004528:	429a      	cmp	r2, r3
 800452a:	d1d7      	bne.n	80044dc <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3718      	adds	r7, #24
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
	...

08004538 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b088      	sub	sp, #32
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a92      	ldr	r2, [pc, #584]	@ (8004798 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d101      	bne.n	8004556 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004552:	4b92      	ldr	r3, [pc, #584]	@ (800479c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004554:	e001      	b.n	800455a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004556:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a8b      	ldr	r2, [pc, #556]	@ (8004798 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d101      	bne.n	8004574 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004570:	4b8a      	ldr	r3, [pc, #552]	@ (800479c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004572:	e001      	b.n	8004578 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004574:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004584:	d004      	beq.n	8004590 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	f040 8099 	bne.w	80046c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b02      	cmp	r3, #2
 8004598:	d107      	bne.n	80045aa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d002      	beq.n	80045aa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 f925 	bl	80047f4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d107      	bne.n	80045c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d002      	beq.n	80045c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f9c8 	bl	8004954 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ca:	2b40      	cmp	r3, #64	@ 0x40
 80045cc:	d13a      	bne.n	8004644 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	f003 0320 	and.w	r3, r3, #32
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d035      	beq.n	8004644 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a6e      	ldr	r2, [pc, #440]	@ (8004798 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d101      	bne.n	80045e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80045e2:	4b6e      	ldr	r3, [pc, #440]	@ (800479c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045e4:	e001      	b.n	80045ea <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80045e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4969      	ldr	r1, [pc, #420]	@ (8004798 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045f2:	428b      	cmp	r3, r1
 80045f4:	d101      	bne.n	80045fa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80045f6:	4b69      	ldr	r3, [pc, #420]	@ (800479c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045f8:	e001      	b.n	80045fe <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80045fa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045fe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004602:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004612:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004614:	2300      	movs	r3, #0
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004636:	f043 0202 	orr.w	r2, r3, #2
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7ff fdfa 	bl	8004238 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	f003 0308 	and.w	r3, r3, #8
 800464a:	2b08      	cmp	r3, #8
 800464c:	f040 80c3 	bne.w	80047d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f003 0320 	and.w	r3, r3, #32
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 80bd 	beq.w	80047d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800466a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a49      	ldr	r2, [pc, #292]	@ (8004798 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d101      	bne.n	800467a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004676:	4b49      	ldr	r3, [pc, #292]	@ (800479c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004678:	e001      	b.n	800467e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800467a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4944      	ldr	r1, [pc, #272]	@ (8004798 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004686:	428b      	cmp	r3, r1
 8004688:	d101      	bne.n	800468e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800468a:	4b44      	ldr	r3, [pc, #272]	@ (800479c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800468c:	e001      	b.n	8004692 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800468e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004692:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004696:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004698:	2300      	movs	r3, #0
 800469a:	60bb      	str	r3, [r7, #8]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	60bb      	str	r3, [r7, #8]
 80046a4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046b2:	f043 0204 	orr.w	r2, r3, #4
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7ff fdbc 	bl	8004238 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80046c0:	e089      	b.n	80047d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d107      	bne.n	80046dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d002      	beq.n	80046dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f8be 	bl	8004858 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d107      	bne.n	80046f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d002      	beq.n	80046f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 f8fd 	bl	80048f0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046fc:	2b40      	cmp	r3, #64	@ 0x40
 80046fe:	d12f      	bne.n	8004760 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	f003 0320 	and.w	r3, r3, #32
 8004706:	2b00      	cmp	r3, #0
 8004708:	d02a      	beq.n	8004760 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004718:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a1e      	ldr	r2, [pc, #120]	@ (8004798 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d101      	bne.n	8004728 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004724:	4b1d      	ldr	r3, [pc, #116]	@ (800479c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004726:	e001      	b.n	800472c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004728:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4919      	ldr	r1, [pc, #100]	@ (8004798 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004734:	428b      	cmp	r3, r1
 8004736:	d101      	bne.n	800473c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004738:	4b18      	ldr	r3, [pc, #96]	@ (800479c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800473a:	e001      	b.n	8004740 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800473c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004740:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004744:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004752:	f043 0202 	orr.w	r2, r3, #2
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7ff fd6c 	bl	8004238 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	f003 0308 	and.w	r3, r3, #8
 8004766:	2b08      	cmp	r3, #8
 8004768:	d136      	bne.n	80047d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	f003 0320 	and.w	r3, r3, #32
 8004770:	2b00      	cmp	r3, #0
 8004772:	d031      	beq.n	80047d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a07      	ldr	r2, [pc, #28]	@ (8004798 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d101      	bne.n	8004782 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800477e:	4b07      	ldr	r3, [pc, #28]	@ (800479c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004780:	e001      	b.n	8004786 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004782:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4902      	ldr	r1, [pc, #8]	@ (8004798 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800478e:	428b      	cmp	r3, r1
 8004790:	d106      	bne.n	80047a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004792:	4b02      	ldr	r3, [pc, #8]	@ (800479c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004794:	e006      	b.n	80047a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004796:	bf00      	nop
 8004798:	40003800 	.word	0x40003800
 800479c:	40003400 	.word	0x40003400
 80047a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047a4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80047a8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80047b8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047c6:	f043 0204 	orr.w	r2, r3, #4
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7ff fd32 	bl	8004238 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80047d4:	e000      	b.n	80047d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80047d6:	bf00      	nop
}
 80047d8:	bf00      	nop
 80047da:	3720      	adds	r7, #32
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004800:	1c99      	adds	r1, r3, #2
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	6251      	str	r1, [r2, #36]	@ 0x24
 8004806:	881a      	ldrh	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004812:	b29b      	uxth	r3, r3
 8004814:	3b01      	subs	r3, #1
 8004816:	b29a      	uxth	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004820:	b29b      	uxth	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d113      	bne.n	800484e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004834:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800483a:	b29b      	uxth	r3, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	d106      	bne.n	800484e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f7ff ffc9 	bl	80047e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800484e:	bf00      	nop
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004864:	1c99      	adds	r1, r3, #2
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	6251      	str	r1, [r2, #36]	@ 0x24
 800486a:	8819      	ldrh	r1, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a1d      	ldr	r2, [pc, #116]	@ (80048e8 <I2SEx_TxISR_I2SExt+0x90>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d101      	bne.n	800487a <I2SEx_TxISR_I2SExt+0x22>
 8004876:	4b1d      	ldr	r3, [pc, #116]	@ (80048ec <I2SEx_TxISR_I2SExt+0x94>)
 8004878:	e001      	b.n	800487e <I2SEx_TxISR_I2SExt+0x26>
 800487a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800487e:	460a      	mov	r2, r1
 8004880:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004886:	b29b      	uxth	r3, r3
 8004888:	3b01      	subs	r3, #1
 800488a:	b29a      	uxth	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004894:	b29b      	uxth	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d121      	bne.n	80048de <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a12      	ldr	r2, [pc, #72]	@ (80048e8 <I2SEx_TxISR_I2SExt+0x90>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d101      	bne.n	80048a8 <I2SEx_TxISR_I2SExt+0x50>
 80048a4:	4b11      	ldr	r3, [pc, #68]	@ (80048ec <I2SEx_TxISR_I2SExt+0x94>)
 80048a6:	e001      	b.n	80048ac <I2SEx_TxISR_I2SExt+0x54>
 80048a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	490d      	ldr	r1, [pc, #52]	@ (80048e8 <I2SEx_TxISR_I2SExt+0x90>)
 80048b4:	428b      	cmp	r3, r1
 80048b6:	d101      	bne.n	80048bc <I2SEx_TxISR_I2SExt+0x64>
 80048b8:	4b0c      	ldr	r3, [pc, #48]	@ (80048ec <I2SEx_TxISR_I2SExt+0x94>)
 80048ba:	e001      	b.n	80048c0 <I2SEx_TxISR_I2SExt+0x68>
 80048bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80048c0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80048c4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d106      	bne.n	80048de <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f7ff ff81 	bl	80047e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80048de:	bf00      	nop
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	40003800 	.word	0x40003800
 80048ec:	40003400 	.word	0x40003400

080048f0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68d8      	ldr	r0, [r3, #12]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004902:	1c99      	adds	r1, r3, #2
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004908:	b282      	uxth	r2, r0
 800490a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004910:	b29b      	uxth	r3, r3
 8004912:	3b01      	subs	r3, #1
 8004914:	b29a      	uxth	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800491e:	b29b      	uxth	r3, r3
 8004920:	2b00      	cmp	r3, #0
 8004922:	d113      	bne.n	800494c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	685a      	ldr	r2, [r3, #4]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004932:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004938:	b29b      	uxth	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d106      	bne.n	800494c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7ff ff4a 	bl	80047e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800494c:	bf00      	nop
 800494e:	3708      	adds	r7, #8
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a20      	ldr	r2, [pc, #128]	@ (80049e4 <I2SEx_RxISR_I2SExt+0x90>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d101      	bne.n	800496a <I2SEx_RxISR_I2SExt+0x16>
 8004966:	4b20      	ldr	r3, [pc, #128]	@ (80049e8 <I2SEx_RxISR_I2SExt+0x94>)
 8004968:	e001      	b.n	800496e <I2SEx_RxISR_I2SExt+0x1a>
 800496a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800496e:	68d8      	ldr	r0, [r3, #12]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004974:	1c99      	adds	r1, r3, #2
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800497a:	b282      	uxth	r2, r0
 800497c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004982:	b29b      	uxth	r3, r3
 8004984:	3b01      	subs	r3, #1
 8004986:	b29a      	uxth	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004990:	b29b      	uxth	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d121      	bne.n	80049da <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a12      	ldr	r2, [pc, #72]	@ (80049e4 <I2SEx_RxISR_I2SExt+0x90>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d101      	bne.n	80049a4 <I2SEx_RxISR_I2SExt+0x50>
 80049a0:	4b11      	ldr	r3, [pc, #68]	@ (80049e8 <I2SEx_RxISR_I2SExt+0x94>)
 80049a2:	e001      	b.n	80049a8 <I2SEx_RxISR_I2SExt+0x54>
 80049a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	490d      	ldr	r1, [pc, #52]	@ (80049e4 <I2SEx_RxISR_I2SExt+0x90>)
 80049b0:	428b      	cmp	r3, r1
 80049b2:	d101      	bne.n	80049b8 <I2SEx_RxISR_I2SExt+0x64>
 80049b4:	4b0c      	ldr	r3, [pc, #48]	@ (80049e8 <I2SEx_RxISR_I2SExt+0x94>)
 80049b6:	e001      	b.n	80049bc <I2SEx_RxISR_I2SExt+0x68>
 80049b8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80049bc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80049c0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d106      	bne.n	80049da <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f7ff ff03 	bl	80047e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80049da:	bf00      	nop
 80049dc:	3708      	adds	r7, #8
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	40003800 	.word	0x40003800
 80049e8:	40003400 	.word	0x40003400

080049ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e267      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d075      	beq.n	8004af6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a0a:	4b88      	ldr	r3, [pc, #544]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 030c 	and.w	r3, r3, #12
 8004a12:	2b04      	cmp	r3, #4
 8004a14:	d00c      	beq.n	8004a30 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a16:	4b85      	ldr	r3, [pc, #532]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a1e:	2b08      	cmp	r3, #8
 8004a20:	d112      	bne.n	8004a48 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a22:	4b82      	ldr	r3, [pc, #520]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a2e:	d10b      	bne.n	8004a48 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a30:	4b7e      	ldr	r3, [pc, #504]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d05b      	beq.n	8004af4 <HAL_RCC_OscConfig+0x108>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d157      	bne.n	8004af4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e242      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a50:	d106      	bne.n	8004a60 <HAL_RCC_OscConfig+0x74>
 8004a52:	4b76      	ldr	r3, [pc, #472]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a75      	ldr	r2, [pc, #468]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004a58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a5c:	6013      	str	r3, [r2, #0]
 8004a5e:	e01d      	b.n	8004a9c <HAL_RCC_OscConfig+0xb0>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a68:	d10c      	bne.n	8004a84 <HAL_RCC_OscConfig+0x98>
 8004a6a:	4b70      	ldr	r3, [pc, #448]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a6f      	ldr	r2, [pc, #444]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004a70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	4b6d      	ldr	r3, [pc, #436]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a6c      	ldr	r2, [pc, #432]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004a7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a80:	6013      	str	r3, [r2, #0]
 8004a82:	e00b      	b.n	8004a9c <HAL_RCC_OscConfig+0xb0>
 8004a84:	4b69      	ldr	r3, [pc, #420]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a68      	ldr	r2, [pc, #416]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004a8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a8e:	6013      	str	r3, [r2, #0]
 8004a90:	4b66      	ldr	r3, [pc, #408]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a65      	ldr	r2, [pc, #404]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004a96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d013      	beq.n	8004acc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa4:	f7fc fd94 	bl	80015d0 <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004aac:	f7fc fd90 	bl	80015d0 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b64      	cmp	r3, #100	@ 0x64
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e207      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004abe:	4b5b      	ldr	r3, [pc, #364]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d0f0      	beq.n	8004aac <HAL_RCC_OscConfig+0xc0>
 8004aca:	e014      	b.n	8004af6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004acc:	f7fc fd80 	bl	80015d0 <HAL_GetTick>
 8004ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ad4:	f7fc fd7c 	bl	80015d0 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b64      	cmp	r3, #100	@ 0x64
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e1f3      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ae6:	4b51      	ldr	r3, [pc, #324]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1f0      	bne.n	8004ad4 <HAL_RCC_OscConfig+0xe8>
 8004af2:	e000      	b.n	8004af6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d063      	beq.n	8004bca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b02:	4b4a      	ldr	r3, [pc, #296]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 030c 	and.w	r3, r3, #12
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00b      	beq.n	8004b26 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b0e:	4b47      	ldr	r3, [pc, #284]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b16:	2b08      	cmp	r3, #8
 8004b18:	d11c      	bne.n	8004b54 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b1a:	4b44      	ldr	r3, [pc, #272]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d116      	bne.n	8004b54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b26:	4b41      	ldr	r3, [pc, #260]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d005      	beq.n	8004b3e <HAL_RCC_OscConfig+0x152>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d001      	beq.n	8004b3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e1c7      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b3e:	4b3b      	ldr	r3, [pc, #236]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	4937      	ldr	r1, [pc, #220]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b52:	e03a      	b.n	8004bca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d020      	beq.n	8004b9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b5c:	4b34      	ldr	r3, [pc, #208]	@ (8004c30 <HAL_RCC_OscConfig+0x244>)
 8004b5e:	2201      	movs	r2, #1
 8004b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b62:	f7fc fd35 	bl	80015d0 <HAL_GetTick>
 8004b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b68:	e008      	b.n	8004b7c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b6a:	f7fc fd31 	bl	80015d0 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e1a8      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0f0      	beq.n	8004b6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b88:	4b28      	ldr	r3, [pc, #160]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	00db      	lsls	r3, r3, #3
 8004b96:	4925      	ldr	r1, [pc, #148]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	600b      	str	r3, [r1, #0]
 8004b9c:	e015      	b.n	8004bca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b9e:	4b24      	ldr	r3, [pc, #144]	@ (8004c30 <HAL_RCC_OscConfig+0x244>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba4:	f7fc fd14 	bl	80015d0 <HAL_GetTick>
 8004ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004baa:	e008      	b.n	8004bbe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bac:	f7fc fd10 	bl	80015d0 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e187      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1f0      	bne.n	8004bac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0308 	and.w	r3, r3, #8
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d036      	beq.n	8004c44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d016      	beq.n	8004c0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bde:	4b15      	ldr	r3, [pc, #84]	@ (8004c34 <HAL_RCC_OscConfig+0x248>)
 8004be0:	2201      	movs	r2, #1
 8004be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be4:	f7fc fcf4 	bl	80015d0 <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bec:	f7fc fcf0 	bl	80015d0 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e167      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004c00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d0f0      	beq.n	8004bec <HAL_RCC_OscConfig+0x200>
 8004c0a:	e01b      	b.n	8004c44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c0c:	4b09      	ldr	r3, [pc, #36]	@ (8004c34 <HAL_RCC_OscConfig+0x248>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c12:	f7fc fcdd 	bl	80015d0 <HAL_GetTick>
 8004c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c18:	e00e      	b.n	8004c38 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c1a:	f7fc fcd9 	bl	80015d0 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d907      	bls.n	8004c38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e150      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
 8004c2c:	40023800 	.word	0x40023800
 8004c30:	42470000 	.word	0x42470000
 8004c34:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c38:	4b88      	ldr	r3, [pc, #544]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004c3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1ea      	bne.n	8004c1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 8097 	beq.w	8004d80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c52:	2300      	movs	r3, #0
 8004c54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c56:	4b81      	ldr	r3, [pc, #516]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10f      	bne.n	8004c82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c62:	2300      	movs	r3, #0
 8004c64:	60bb      	str	r3, [r7, #8]
 8004c66:	4b7d      	ldr	r3, [pc, #500]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6a:	4a7c      	ldr	r2, [pc, #496]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004c6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c70:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c72:	4b7a      	ldr	r3, [pc, #488]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c7a:	60bb      	str	r3, [r7, #8]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c82:	4b77      	ldr	r3, [pc, #476]	@ (8004e60 <HAL_RCC_OscConfig+0x474>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d118      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c8e:	4b74      	ldr	r3, [pc, #464]	@ (8004e60 <HAL_RCC_OscConfig+0x474>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a73      	ldr	r2, [pc, #460]	@ (8004e60 <HAL_RCC_OscConfig+0x474>)
 8004c94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c9a:	f7fc fc99 	bl	80015d0 <HAL_GetTick>
 8004c9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca0:	e008      	b.n	8004cb4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ca2:	f7fc fc95 	bl	80015d0 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e10c      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb4:	4b6a      	ldr	r3, [pc, #424]	@ (8004e60 <HAL_RCC_OscConfig+0x474>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d0f0      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d106      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x2ea>
 8004cc8:	4b64      	ldr	r3, [pc, #400]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ccc:	4a63      	ldr	r2, [pc, #396]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004cce:	f043 0301 	orr.w	r3, r3, #1
 8004cd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cd4:	e01c      	b.n	8004d10 <HAL_RCC_OscConfig+0x324>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	2b05      	cmp	r3, #5
 8004cdc:	d10c      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x30c>
 8004cde:	4b5f      	ldr	r3, [pc, #380]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ce2:	4a5e      	ldr	r2, [pc, #376]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004ce4:	f043 0304 	orr.w	r3, r3, #4
 8004ce8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cea:	4b5c      	ldr	r3, [pc, #368]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cee:	4a5b      	ldr	r2, [pc, #364]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004cf0:	f043 0301 	orr.w	r3, r3, #1
 8004cf4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cf6:	e00b      	b.n	8004d10 <HAL_RCC_OscConfig+0x324>
 8004cf8:	4b58      	ldr	r3, [pc, #352]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004cfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cfc:	4a57      	ldr	r2, [pc, #348]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004cfe:	f023 0301 	bic.w	r3, r3, #1
 8004d02:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d04:	4b55      	ldr	r3, [pc, #340]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d08:	4a54      	ldr	r2, [pc, #336]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004d0a:	f023 0304 	bic.w	r3, r3, #4
 8004d0e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d015      	beq.n	8004d44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d18:	f7fc fc5a 	bl	80015d0 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d1e:	e00a      	b.n	8004d36 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d20:	f7fc fc56 	bl	80015d0 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e0cb      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d36:	4b49      	ldr	r3, [pc, #292]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d0ee      	beq.n	8004d20 <HAL_RCC_OscConfig+0x334>
 8004d42:	e014      	b.n	8004d6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d44:	f7fc fc44 	bl	80015d0 <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d4a:	e00a      	b.n	8004d62 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d4c:	f7fc fc40 	bl	80015d0 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e0b5      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d62:	4b3e      	ldr	r3, [pc, #248]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1ee      	bne.n	8004d4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d6e:	7dfb      	ldrb	r3, [r7, #23]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d105      	bne.n	8004d80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d74:	4b39      	ldr	r3, [pc, #228]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d78:	4a38      	ldr	r2, [pc, #224]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004d7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d7e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f000 80a1 	beq.w	8004ecc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d8a:	4b34      	ldr	r3, [pc, #208]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f003 030c 	and.w	r3, r3, #12
 8004d92:	2b08      	cmp	r3, #8
 8004d94:	d05c      	beq.n	8004e50 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d141      	bne.n	8004e22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d9e:	4b31      	ldr	r3, [pc, #196]	@ (8004e64 <HAL_RCC_OscConfig+0x478>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004da4:	f7fc fc14 	bl	80015d0 <HAL_GetTick>
 8004da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004daa:	e008      	b.n	8004dbe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dac:	f7fc fc10 	bl	80015d0 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e087      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dbe:	4b27      	ldr	r3, [pc, #156]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1f0      	bne.n	8004dac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	69da      	ldr	r2, [r3, #28]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd8:	019b      	lsls	r3, r3, #6
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de0:	085b      	lsrs	r3, r3, #1
 8004de2:	3b01      	subs	r3, #1
 8004de4:	041b      	lsls	r3, r3, #16
 8004de6:	431a      	orrs	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dec:	061b      	lsls	r3, r3, #24
 8004dee:	491b      	ldr	r1, [pc, #108]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004df4:	4b1b      	ldr	r3, [pc, #108]	@ (8004e64 <HAL_RCC_OscConfig+0x478>)
 8004df6:	2201      	movs	r2, #1
 8004df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dfa:	f7fc fbe9 	bl	80015d0 <HAL_GetTick>
 8004dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e00:	e008      	b.n	8004e14 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e02:	f7fc fbe5 	bl	80015d0 <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d901      	bls.n	8004e14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e05c      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e14:	4b11      	ldr	r3, [pc, #68]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d0f0      	beq.n	8004e02 <HAL_RCC_OscConfig+0x416>
 8004e20:	e054      	b.n	8004ecc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e22:	4b10      	ldr	r3, [pc, #64]	@ (8004e64 <HAL_RCC_OscConfig+0x478>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e28:	f7fc fbd2 	bl	80015d0 <HAL_GetTick>
 8004e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e2e:	e008      	b.n	8004e42 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e30:	f7fc fbce 	bl	80015d0 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e045      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e42:	4b06      	ldr	r3, [pc, #24]	@ (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1f0      	bne.n	8004e30 <HAL_RCC_OscConfig+0x444>
 8004e4e:	e03d      	b.n	8004ecc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d107      	bne.n	8004e68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e038      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
 8004e5c:	40023800 	.word	0x40023800
 8004e60:	40007000 	.word	0x40007000
 8004e64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e68:	4b1b      	ldr	r3, [pc, #108]	@ (8004ed8 <HAL_RCC_OscConfig+0x4ec>)
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d028      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d121      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d11a      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004e98:	4013      	ands	r3, r2
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d111      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eae:	085b      	lsrs	r3, r3, #1
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d107      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d001      	beq.n	8004ecc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e000      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3718      	adds	r7, #24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	40023800 	.word	0x40023800

08004edc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d101      	bne.n	8004ef0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e0cc      	b.n	800508a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ef0:	4b68      	ldr	r3, [pc, #416]	@ (8005094 <HAL_RCC_ClockConfig+0x1b8>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0307 	and.w	r3, r3, #7
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d90c      	bls.n	8004f18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004efe:	4b65      	ldr	r3, [pc, #404]	@ (8005094 <HAL_RCC_ClockConfig+0x1b8>)
 8004f00:	683a      	ldr	r2, [r7, #0]
 8004f02:	b2d2      	uxtb	r2, r2
 8004f04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f06:	4b63      	ldr	r3, [pc, #396]	@ (8005094 <HAL_RCC_ClockConfig+0x1b8>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0307 	and.w	r3, r3, #7
 8004f0e:	683a      	ldr	r2, [r7, #0]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d001      	beq.n	8004f18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e0b8      	b.n	800508a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d020      	beq.n	8004f66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d005      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f30:	4b59      	ldr	r3, [pc, #356]	@ (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	4a58      	ldr	r2, [pc, #352]	@ (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004f36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004f3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0308 	and.w	r3, r3, #8
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d005      	beq.n	8004f54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f48:	4b53      	ldr	r3, [pc, #332]	@ (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	4a52      	ldr	r2, [pc, #328]	@ (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004f52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f54:	4b50      	ldr	r3, [pc, #320]	@ (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	494d      	ldr	r1, [pc, #308]	@ (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d044      	beq.n	8004ffc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d107      	bne.n	8004f8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f7a:	4b47      	ldr	r3, [pc, #284]	@ (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d119      	bne.n	8004fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e07f      	b.n	800508a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d003      	beq.n	8004f9a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f96:	2b03      	cmp	r3, #3
 8004f98:	d107      	bne.n	8004faa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f9a:	4b3f      	ldr	r3, [pc, #252]	@ (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d109      	bne.n	8004fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e06f      	b.n	800508a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004faa:	4b3b      	ldr	r3, [pc, #236]	@ (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d101      	bne.n	8004fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e067      	b.n	800508a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fba:	4b37      	ldr	r3, [pc, #220]	@ (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f023 0203 	bic.w	r2, r3, #3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	4934      	ldr	r1, [pc, #208]	@ (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fcc:	f7fc fb00 	bl	80015d0 <HAL_GetTick>
 8004fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fd2:	e00a      	b.n	8004fea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fd4:	f7fc fafc 	bl	80015d0 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e04f      	b.n	800508a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fea:	4b2b      	ldr	r3, [pc, #172]	@ (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f003 020c 	and.w	r2, r3, #12
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d1eb      	bne.n	8004fd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ffc:	4b25      	ldr	r3, [pc, #148]	@ (8005094 <HAL_RCC_ClockConfig+0x1b8>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0307 	and.w	r3, r3, #7
 8005004:	683a      	ldr	r2, [r7, #0]
 8005006:	429a      	cmp	r2, r3
 8005008:	d20c      	bcs.n	8005024 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800500a:	4b22      	ldr	r3, [pc, #136]	@ (8005094 <HAL_RCC_ClockConfig+0x1b8>)
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	b2d2      	uxtb	r2, r2
 8005010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005012:	4b20      	ldr	r3, [pc, #128]	@ (8005094 <HAL_RCC_ClockConfig+0x1b8>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0307 	and.w	r3, r3, #7
 800501a:	683a      	ldr	r2, [r7, #0]
 800501c:	429a      	cmp	r2, r3
 800501e:	d001      	beq.n	8005024 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e032      	b.n	800508a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b00      	cmp	r3, #0
 800502e:	d008      	beq.n	8005042 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005030:	4b19      	ldr	r3, [pc, #100]	@ (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	4916      	ldr	r1, [pc, #88]	@ (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 800503e:	4313      	orrs	r3, r2
 8005040:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0308 	and.w	r3, r3, #8
 800504a:	2b00      	cmp	r3, #0
 800504c:	d009      	beq.n	8005062 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800504e:	4b12      	ldr	r3, [pc, #72]	@ (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	00db      	lsls	r3, r3, #3
 800505c:	490e      	ldr	r1, [pc, #56]	@ (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 800505e:	4313      	orrs	r3, r2
 8005060:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005062:	f000 f821 	bl	80050a8 <HAL_RCC_GetSysClockFreq>
 8005066:	4602      	mov	r2, r0
 8005068:	4b0b      	ldr	r3, [pc, #44]	@ (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	091b      	lsrs	r3, r3, #4
 800506e:	f003 030f 	and.w	r3, r3, #15
 8005072:	490a      	ldr	r1, [pc, #40]	@ (800509c <HAL_RCC_ClockConfig+0x1c0>)
 8005074:	5ccb      	ldrb	r3, [r1, r3]
 8005076:	fa22 f303 	lsr.w	r3, r2, r3
 800507a:	4a09      	ldr	r2, [pc, #36]	@ (80050a0 <HAL_RCC_ClockConfig+0x1c4>)
 800507c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800507e:	4b09      	ldr	r3, [pc, #36]	@ (80050a4 <HAL_RCC_ClockConfig+0x1c8>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4618      	mov	r0, r3
 8005084:	f7fc fa60 	bl	8001548 <HAL_InitTick>

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	40023c00 	.word	0x40023c00
 8005098:	40023800 	.word	0x40023800
 800509c:	0800cfcc 	.word	0x0800cfcc
 80050a0:	20000000 	.word	0x20000000
 80050a4:	20000004 	.word	0x20000004

080050a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050ac:	b094      	sub	sp, #80	@ 0x50
 80050ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80050b4:	2300      	movs	r3, #0
 80050b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80050b8:	2300      	movs	r3, #0
 80050ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80050bc:	2300      	movs	r3, #0
 80050be:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050c0:	4b79      	ldr	r3, [pc, #484]	@ (80052a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f003 030c 	and.w	r3, r3, #12
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	d00d      	beq.n	80050e8 <HAL_RCC_GetSysClockFreq+0x40>
 80050cc:	2b08      	cmp	r3, #8
 80050ce:	f200 80e1 	bhi.w	8005294 <HAL_RCC_GetSysClockFreq+0x1ec>
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d002      	beq.n	80050dc <HAL_RCC_GetSysClockFreq+0x34>
 80050d6:	2b04      	cmp	r3, #4
 80050d8:	d003      	beq.n	80050e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80050da:	e0db      	b.n	8005294 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050dc:	4b73      	ldr	r3, [pc, #460]	@ (80052ac <HAL_RCC_GetSysClockFreq+0x204>)
 80050de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80050e0:	e0db      	b.n	800529a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050e2:	4b73      	ldr	r3, [pc, #460]	@ (80052b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80050e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80050e6:	e0d8      	b.n	800529a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050e8:	4b6f      	ldr	r3, [pc, #444]	@ (80052a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050f0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050f2:	4b6d      	ldr	r3, [pc, #436]	@ (80052a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d063      	beq.n	80051c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050fe:	4b6a      	ldr	r3, [pc, #424]	@ (80052a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	099b      	lsrs	r3, r3, #6
 8005104:	2200      	movs	r2, #0
 8005106:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005108:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800510a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800510c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005110:	633b      	str	r3, [r7, #48]	@ 0x30
 8005112:	2300      	movs	r3, #0
 8005114:	637b      	str	r3, [r7, #52]	@ 0x34
 8005116:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800511a:	4622      	mov	r2, r4
 800511c:	462b      	mov	r3, r5
 800511e:	f04f 0000 	mov.w	r0, #0
 8005122:	f04f 0100 	mov.w	r1, #0
 8005126:	0159      	lsls	r1, r3, #5
 8005128:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800512c:	0150      	lsls	r0, r2, #5
 800512e:	4602      	mov	r2, r0
 8005130:	460b      	mov	r3, r1
 8005132:	4621      	mov	r1, r4
 8005134:	1a51      	subs	r1, r2, r1
 8005136:	6139      	str	r1, [r7, #16]
 8005138:	4629      	mov	r1, r5
 800513a:	eb63 0301 	sbc.w	r3, r3, r1
 800513e:	617b      	str	r3, [r7, #20]
 8005140:	f04f 0200 	mov.w	r2, #0
 8005144:	f04f 0300 	mov.w	r3, #0
 8005148:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800514c:	4659      	mov	r1, fp
 800514e:	018b      	lsls	r3, r1, #6
 8005150:	4651      	mov	r1, sl
 8005152:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005156:	4651      	mov	r1, sl
 8005158:	018a      	lsls	r2, r1, #6
 800515a:	4651      	mov	r1, sl
 800515c:	ebb2 0801 	subs.w	r8, r2, r1
 8005160:	4659      	mov	r1, fp
 8005162:	eb63 0901 	sbc.w	r9, r3, r1
 8005166:	f04f 0200 	mov.w	r2, #0
 800516a:	f04f 0300 	mov.w	r3, #0
 800516e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005172:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005176:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800517a:	4690      	mov	r8, r2
 800517c:	4699      	mov	r9, r3
 800517e:	4623      	mov	r3, r4
 8005180:	eb18 0303 	adds.w	r3, r8, r3
 8005184:	60bb      	str	r3, [r7, #8]
 8005186:	462b      	mov	r3, r5
 8005188:	eb49 0303 	adc.w	r3, r9, r3
 800518c:	60fb      	str	r3, [r7, #12]
 800518e:	f04f 0200 	mov.w	r2, #0
 8005192:	f04f 0300 	mov.w	r3, #0
 8005196:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800519a:	4629      	mov	r1, r5
 800519c:	024b      	lsls	r3, r1, #9
 800519e:	4621      	mov	r1, r4
 80051a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80051a4:	4621      	mov	r1, r4
 80051a6:	024a      	lsls	r2, r1, #9
 80051a8:	4610      	mov	r0, r2
 80051aa:	4619      	mov	r1, r3
 80051ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051ae:	2200      	movs	r2, #0
 80051b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80051b8:	f7fb f85a 	bl	8000270 <__aeabi_uldivmod>
 80051bc:	4602      	mov	r2, r0
 80051be:	460b      	mov	r3, r1
 80051c0:	4613      	mov	r3, r2
 80051c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051c4:	e058      	b.n	8005278 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051c6:	4b38      	ldr	r3, [pc, #224]	@ (80052a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	099b      	lsrs	r3, r3, #6
 80051cc:	2200      	movs	r2, #0
 80051ce:	4618      	mov	r0, r3
 80051d0:	4611      	mov	r1, r2
 80051d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80051d6:	623b      	str	r3, [r7, #32]
 80051d8:	2300      	movs	r3, #0
 80051da:	627b      	str	r3, [r7, #36]	@ 0x24
 80051dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80051e0:	4642      	mov	r2, r8
 80051e2:	464b      	mov	r3, r9
 80051e4:	f04f 0000 	mov.w	r0, #0
 80051e8:	f04f 0100 	mov.w	r1, #0
 80051ec:	0159      	lsls	r1, r3, #5
 80051ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051f2:	0150      	lsls	r0, r2, #5
 80051f4:	4602      	mov	r2, r0
 80051f6:	460b      	mov	r3, r1
 80051f8:	4641      	mov	r1, r8
 80051fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80051fe:	4649      	mov	r1, r9
 8005200:	eb63 0b01 	sbc.w	fp, r3, r1
 8005204:	f04f 0200 	mov.w	r2, #0
 8005208:	f04f 0300 	mov.w	r3, #0
 800520c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005210:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005214:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005218:	ebb2 040a 	subs.w	r4, r2, sl
 800521c:	eb63 050b 	sbc.w	r5, r3, fp
 8005220:	f04f 0200 	mov.w	r2, #0
 8005224:	f04f 0300 	mov.w	r3, #0
 8005228:	00eb      	lsls	r3, r5, #3
 800522a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800522e:	00e2      	lsls	r2, r4, #3
 8005230:	4614      	mov	r4, r2
 8005232:	461d      	mov	r5, r3
 8005234:	4643      	mov	r3, r8
 8005236:	18e3      	adds	r3, r4, r3
 8005238:	603b      	str	r3, [r7, #0]
 800523a:	464b      	mov	r3, r9
 800523c:	eb45 0303 	adc.w	r3, r5, r3
 8005240:	607b      	str	r3, [r7, #4]
 8005242:	f04f 0200 	mov.w	r2, #0
 8005246:	f04f 0300 	mov.w	r3, #0
 800524a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800524e:	4629      	mov	r1, r5
 8005250:	028b      	lsls	r3, r1, #10
 8005252:	4621      	mov	r1, r4
 8005254:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005258:	4621      	mov	r1, r4
 800525a:	028a      	lsls	r2, r1, #10
 800525c:	4610      	mov	r0, r2
 800525e:	4619      	mov	r1, r3
 8005260:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005262:	2200      	movs	r2, #0
 8005264:	61bb      	str	r3, [r7, #24]
 8005266:	61fa      	str	r2, [r7, #28]
 8005268:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800526c:	f7fb f800 	bl	8000270 <__aeabi_uldivmod>
 8005270:	4602      	mov	r2, r0
 8005272:	460b      	mov	r3, r1
 8005274:	4613      	mov	r3, r2
 8005276:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005278:	4b0b      	ldr	r3, [pc, #44]	@ (80052a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	0c1b      	lsrs	r3, r3, #16
 800527e:	f003 0303 	and.w	r3, r3, #3
 8005282:	3301      	adds	r3, #1
 8005284:	005b      	lsls	r3, r3, #1
 8005286:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005288:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800528a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800528c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005290:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005292:	e002      	b.n	800529a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005294:	4b05      	ldr	r3, [pc, #20]	@ (80052ac <HAL_RCC_GetSysClockFreq+0x204>)
 8005296:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005298:	bf00      	nop
    }
  }
  return sysclockfreq;
 800529a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800529c:	4618      	mov	r0, r3
 800529e:	3750      	adds	r7, #80	@ 0x50
 80052a0:	46bd      	mov	sp, r7
 80052a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052a6:	bf00      	nop
 80052a8:	40023800 	.word	0x40023800
 80052ac:	00f42400 	.word	0x00f42400
 80052b0:	007a1200 	.word	0x007a1200

080052b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052b4:	b480      	push	{r7}
 80052b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052b8:	4b03      	ldr	r3, [pc, #12]	@ (80052c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80052ba:	681b      	ldr	r3, [r3, #0]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	20000000 	.word	0x20000000

080052cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052d0:	f7ff fff0 	bl	80052b4 <HAL_RCC_GetHCLKFreq>
 80052d4:	4602      	mov	r2, r0
 80052d6:	4b05      	ldr	r3, [pc, #20]	@ (80052ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	0a9b      	lsrs	r3, r3, #10
 80052dc:	f003 0307 	and.w	r3, r3, #7
 80052e0:	4903      	ldr	r1, [pc, #12]	@ (80052f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052e2:	5ccb      	ldrb	r3, [r1, r3]
 80052e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	40023800 	.word	0x40023800
 80052f0:	0800cfdc 	.word	0x0800cfdc

080052f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80052f8:	f7ff ffdc 	bl	80052b4 <HAL_RCC_GetHCLKFreq>
 80052fc:	4602      	mov	r2, r0
 80052fe:	4b05      	ldr	r3, [pc, #20]	@ (8005314 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	0b5b      	lsrs	r3, r3, #13
 8005304:	f003 0307 	and.w	r3, r3, #7
 8005308:	4903      	ldr	r1, [pc, #12]	@ (8005318 <HAL_RCC_GetPCLK2Freq+0x24>)
 800530a:	5ccb      	ldrb	r3, [r1, r3]
 800530c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005310:	4618      	mov	r0, r3
 8005312:	bd80      	pop	{r7, pc}
 8005314:	40023800 	.word	0x40023800
 8005318:	0800cfdc 	.word	0x0800cfdc

0800531c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005324:	2300      	movs	r3, #0
 8005326:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005328:	2300      	movs	r3, #0
 800532a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0301 	and.w	r3, r3, #1
 8005334:	2b00      	cmp	r3, #0
 8005336:	d105      	bne.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005340:	2b00      	cmp	r3, #0
 8005342:	d035      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005344:	4b62      	ldr	r3, [pc, #392]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005346:	2200      	movs	r2, #0
 8005348:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800534a:	f7fc f941 	bl	80015d0 <HAL_GetTick>
 800534e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005350:	e008      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005352:	f7fc f93d 	bl	80015d0 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	2b02      	cmp	r3, #2
 800535e:	d901      	bls.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e0b0      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005364:	4b5b      	ldr	r3, [pc, #364]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1f0      	bne.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	019a      	lsls	r2, r3, #6
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	071b      	lsls	r3, r3, #28
 800537c:	4955      	ldr	r1, [pc, #340]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800537e:	4313      	orrs	r3, r2
 8005380:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005384:	4b52      	ldr	r3, [pc, #328]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005386:	2201      	movs	r2, #1
 8005388:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800538a:	f7fc f921 	bl	80015d0 <HAL_GetTick>
 800538e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005390:	e008      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005392:	f7fc f91d 	bl	80015d0 <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	2b02      	cmp	r3, #2
 800539e:	d901      	bls.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e090      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053a4:	4b4b      	ldr	r3, [pc, #300]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d0f0      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0302 	and.w	r3, r3, #2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f000 8083 	beq.w	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80053be:	2300      	movs	r3, #0
 80053c0:	60fb      	str	r3, [r7, #12]
 80053c2:	4b44      	ldr	r3, [pc, #272]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c6:	4a43      	ldr	r2, [pc, #268]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80053ce:	4b41      	ldr	r3, [pc, #260]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053d6:	60fb      	str	r3, [r7, #12]
 80053d8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80053da:	4b3f      	ldr	r3, [pc, #252]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a3e      	ldr	r2, [pc, #248]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80053e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053e4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80053e6:	f7fc f8f3 	bl	80015d0 <HAL_GetTick>
 80053ea:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80053ec:	e008      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053ee:	f7fc f8ef 	bl	80015d0 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d901      	bls.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e062      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005400:	4b35      	ldr	r3, [pc, #212]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005408:	2b00      	cmp	r3, #0
 800540a:	d0f0      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800540c:	4b31      	ldr	r3, [pc, #196]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800540e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005410:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005414:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d02f      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	429a      	cmp	r2, r3
 8005428:	d028      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800542a:	4b2a      	ldr	r3, [pc, #168]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800542c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800542e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005432:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005434:	4b29      	ldr	r3, [pc, #164]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005436:	2201      	movs	r2, #1
 8005438:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800543a:	4b28      	ldr	r3, [pc, #160]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800543c:	2200      	movs	r2, #0
 800543e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005440:	4a24      	ldr	r2, [pc, #144]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005446:	4b23      	ldr	r3, [pc, #140]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b01      	cmp	r3, #1
 8005450:	d114      	bne.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005452:	f7fc f8bd 	bl	80015d0 <HAL_GetTick>
 8005456:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005458:	e00a      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800545a:	f7fc f8b9 	bl	80015d0 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005468:	4293      	cmp	r3, r2
 800546a:	d901      	bls.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e02a      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005470:	4b18      	ldr	r3, [pc, #96]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005474:	f003 0302 	and.w	r3, r3, #2
 8005478:	2b00      	cmp	r3, #0
 800547a:	d0ee      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005484:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005488:	d10d      	bne.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800548a:	4b12      	ldr	r3, [pc, #72]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800549a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800549e:	490d      	ldr	r1, [pc, #52]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	608b      	str	r3, [r1, #8]
 80054a4:	e005      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80054a6:	4b0b      	ldr	r3, [pc, #44]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	4a0a      	ldr	r2, [pc, #40]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054ac:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80054b0:	6093      	str	r3, [r2, #8]
 80054b2:	4b08      	ldr	r3, [pc, #32]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054b4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054be:	4905      	ldr	r1, [pc, #20]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3718      	adds	r7, #24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	42470068 	.word	0x42470068
 80054d4:	40023800 	.word	0x40023800
 80054d8:	40007000 	.word	0x40007000
 80054dc:	42470e40 	.word	0x42470e40

080054e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80054e8:	2300      	movs	r3, #0
 80054ea:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80054ec:	2300      	movs	r3, #0
 80054ee:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80054f0:	2300      	movs	r3, #0
 80054f2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80054f4:	2300      	movs	r3, #0
 80054f6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d13f      	bne.n	800557e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80054fe:	4b24      	ldr	r3, [pc, #144]	@ (8005590 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005506:	60fb      	str	r3, [r7, #12]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d006      	beq.n	800551c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005514:	d12f      	bne.n	8005576 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005516:	4b1f      	ldr	r3, [pc, #124]	@ (8005594 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005518:	617b      	str	r3, [r7, #20]
          break;
 800551a:	e02f      	b.n	800557c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800551c:	4b1c      	ldr	r3, [pc, #112]	@ (8005590 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005524:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005528:	d108      	bne.n	800553c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800552a:	4b19      	ldr	r3, [pc, #100]	@ (8005590 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005532:	4a19      	ldr	r2, [pc, #100]	@ (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005534:	fbb2 f3f3 	udiv	r3, r2, r3
 8005538:	613b      	str	r3, [r7, #16]
 800553a:	e007      	b.n	800554c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800553c:	4b14      	ldr	r3, [pc, #80]	@ (8005590 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005544:	4a15      	ldr	r2, [pc, #84]	@ (800559c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005546:	fbb2 f3f3 	udiv	r3, r2, r3
 800554a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800554c:	4b10      	ldr	r3, [pc, #64]	@ (8005590 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800554e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005552:	099b      	lsrs	r3, r3, #6
 8005554:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	fb02 f303 	mul.w	r3, r2, r3
 800555e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005560:	4b0b      	ldr	r3, [pc, #44]	@ (8005590 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005562:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005566:	0f1b      	lsrs	r3, r3, #28
 8005568:	f003 0307 	and.w	r3, r3, #7
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005572:	617b      	str	r3, [r7, #20]
          break;
 8005574:	e002      	b.n	800557c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005576:	2300      	movs	r3, #0
 8005578:	617b      	str	r3, [r7, #20]
          break;
 800557a:	bf00      	nop
        }
      }
      break;
 800557c:	e000      	b.n	8005580 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800557e:	bf00      	nop
    }
  }
  return frequency;
 8005580:	697b      	ldr	r3, [r7, #20]
}
 8005582:	4618      	mov	r0, r3
 8005584:	371c      	adds	r7, #28
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	40023800 	.word	0x40023800
 8005594:	00bb8000 	.word	0x00bb8000
 8005598:	007a1200 	.word	0x007a1200
 800559c:	00f42400 	.word	0x00f42400

080055a0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d101      	bne.n	80055b6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e073      	b.n	800569e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	7f5b      	ldrb	r3, [r3, #29]
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d105      	bne.n	80055cc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7fb fd14 	bl	8000ff4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2202      	movs	r2, #2
 80055d0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f003 0310 	and.w	r3, r3, #16
 80055dc:	2b10      	cmp	r3, #16
 80055de:	d055      	beq.n	800568c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	22ca      	movs	r2, #202	@ 0xca
 80055e6:	625a      	str	r2, [r3, #36]	@ 0x24
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2253      	movs	r2, #83	@ 0x53
 80055ee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 fa49 	bl	8005a88 <RTC_EnterInitMode>
 80055f6:	4603      	mov	r3, r0
 80055f8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80055fa:	7bfb      	ldrb	r3, [r7, #15]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d12c      	bne.n	800565a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	6812      	ldr	r2, [r2, #0]
 800560a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800560e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005612:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6899      	ldr	r1, [r3, #8]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685a      	ldr	r2, [r3, #4]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	431a      	orrs	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	695b      	ldr	r3, [r3, #20]
 8005628:	431a      	orrs	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	430a      	orrs	r2, r1
 8005630:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	68d2      	ldr	r2, [r2, #12]
 800563a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6919      	ldr	r1, [r3, #16]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	041a      	lsls	r2, r3, #16
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	430a      	orrs	r2, r1
 800564e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 fa50 	bl	8005af6 <RTC_ExitInitMode>
 8005656:	4603      	mov	r3, r0
 8005658:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800565a:	7bfb      	ldrb	r3, [r7, #15]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d110      	bne.n	8005682 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800566e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	699a      	ldr	r2, [r3, #24]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	22ff      	movs	r2, #255	@ 0xff
 8005688:	625a      	str	r2, [r3, #36]	@ 0x24
 800568a:	e001      	b.n	8005690 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800568c:	2300      	movs	r3, #0
 800568e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005690:	7bfb      	ldrb	r3, [r7, #15]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d102      	bne.n	800569c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800569c:	7bfb      	ldrb	r3, [r7, #15]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80056a6:	b590      	push	{r4, r7, lr}
 80056a8:	b087      	sub	sp, #28
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	60f8      	str	r0, [r7, #12]
 80056ae:	60b9      	str	r1, [r7, #8]
 80056b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80056b2:	2300      	movs	r3, #0
 80056b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	7f1b      	ldrb	r3, [r3, #28]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d101      	bne.n	80056c2 <HAL_RTC_SetTime+0x1c>
 80056be:	2302      	movs	r3, #2
 80056c0:	e087      	b.n	80057d2 <HAL_RTC_SetTime+0x12c>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2201      	movs	r2, #1
 80056c6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2202      	movs	r2, #2
 80056cc:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d126      	bne.n	8005722 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d102      	bne.n	80056e8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	2200      	movs	r2, #0
 80056e6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	4618      	mov	r0, r3
 80056ee:	f000 fa27 	bl	8005b40 <RTC_ByteToBcd2>
 80056f2:	4603      	mov	r3, r0
 80056f4:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	785b      	ldrb	r3, [r3, #1]
 80056fa:	4618      	mov	r0, r3
 80056fc:	f000 fa20 	bl	8005b40 <RTC_ByteToBcd2>
 8005700:	4603      	mov	r3, r0
 8005702:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005704:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	789b      	ldrb	r3, [r3, #2]
 800570a:	4618      	mov	r0, r3
 800570c:	f000 fa18 	bl	8005b40 <RTC_ByteToBcd2>
 8005710:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005712:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	78db      	ldrb	r3, [r3, #3]
 800571a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800571c:	4313      	orrs	r3, r2
 800571e:	617b      	str	r3, [r7, #20]
 8005720:	e018      	b.n	8005754 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800572c:	2b00      	cmp	r3, #0
 800572e:	d102      	bne.n	8005736 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	2200      	movs	r2, #0
 8005734:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	785b      	ldrb	r3, [r3, #1]
 8005740:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005742:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005748:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	78db      	ldrb	r3, [r3, #3]
 800574e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005750:	4313      	orrs	r3, r2
 8005752:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	22ca      	movs	r2, #202	@ 0xca
 800575a:	625a      	str	r2, [r3, #36]	@ 0x24
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2253      	movs	r2, #83	@ 0x53
 8005762:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f000 f98f 	bl	8005a88 <RTC_EnterInitMode>
 800576a:	4603      	mov	r3, r0
 800576c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800576e:	7cfb      	ldrb	r3, [r7, #19]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d120      	bne.n	80057b6 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800577e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005782:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	689a      	ldr	r2, [r3, #8]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005792:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6899      	ldr	r1, [r3, #8]
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	68da      	ldr	r2, [r3, #12]
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	431a      	orrs	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	430a      	orrs	r2, r1
 80057aa:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f000 f9a2 	bl	8005af6 <RTC_ExitInitMode>
 80057b2:	4603      	mov	r3, r0
 80057b4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80057b6:	7cfb      	ldrb	r3, [r7, #19]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d102      	bne.n	80057c2 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2201      	movs	r2, #1
 80057c0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	22ff      	movs	r2, #255	@ 0xff
 80057c8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	771a      	strb	r2, [r3, #28]

  return status;
 80057d0:	7cfb      	ldrb	r3, [r7, #19]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	371c      	adds	r7, #28
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd90      	pop	{r4, r7, pc}

080057da <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b086      	sub	sp, #24
 80057de:	af00      	add	r7, sp, #0
 80057e0:	60f8      	str	r0, [r7, #12]
 80057e2:	60b9      	str	r1, [r7, #8]
 80057e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80057e6:	2300      	movs	r3, #0
 80057e8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800580c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005810:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	0c1b      	lsrs	r3, r3, #16
 8005816:	b2db      	uxtb	r3, r3
 8005818:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800581c:	b2da      	uxtb	r2, r3
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	0a1b      	lsrs	r3, r3, #8
 8005826:	b2db      	uxtb	r3, r3
 8005828:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800582c:	b2da      	uxtb	r2, r3
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	b2db      	uxtb	r3, r3
 8005836:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800583a:	b2da      	uxtb	r2, r3
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	0d9b      	lsrs	r3, r3, #22
 8005844:	b2db      	uxtb	r3, r3
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	b2da      	uxtb	r2, r3
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d11a      	bne.n	800588c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	4618      	mov	r0, r3
 800585c:	f000 f98e 	bl	8005b7c <RTC_Bcd2ToByte>
 8005860:	4603      	mov	r3, r0
 8005862:	461a      	mov	r2, r3
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	785b      	ldrb	r3, [r3, #1]
 800586c:	4618      	mov	r0, r3
 800586e:	f000 f985 	bl	8005b7c <RTC_Bcd2ToByte>
 8005872:	4603      	mov	r3, r0
 8005874:	461a      	mov	r2, r3
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	789b      	ldrb	r3, [r3, #2]
 800587e:	4618      	mov	r0, r3
 8005880:	f000 f97c 	bl	8005b7c <RTC_Bcd2ToByte>
 8005884:	4603      	mov	r3, r0
 8005886:	461a      	mov	r2, r3
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3718      	adds	r7, #24
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005896:	b590      	push	{r4, r7, lr}
 8005898:	b087      	sub	sp, #28
 800589a:	af00      	add	r7, sp, #0
 800589c:	60f8      	str	r0, [r7, #12]
 800589e:	60b9      	str	r1, [r7, #8]
 80058a0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80058a2:	2300      	movs	r3, #0
 80058a4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	7f1b      	ldrb	r3, [r3, #28]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d101      	bne.n	80058b2 <HAL_RTC_SetDate+0x1c>
 80058ae:	2302      	movs	r3, #2
 80058b0:	e071      	b.n	8005996 <HAL_RTC_SetDate+0x100>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2201      	movs	r2, #1
 80058b6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2202      	movs	r2, #2
 80058bc:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10e      	bne.n	80058e2 <HAL_RTC_SetDate+0x4c>
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	785b      	ldrb	r3, [r3, #1]
 80058c8:	f003 0310 	and.w	r3, r3, #16
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d008      	beq.n	80058e2 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	785b      	ldrb	r3, [r3, #1]
 80058d4:	f023 0310 	bic.w	r3, r3, #16
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	330a      	adds	r3, #10
 80058dc:	b2da      	uxtb	r2, r3
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d11c      	bne.n	8005922 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	78db      	ldrb	r3, [r3, #3]
 80058ec:	4618      	mov	r0, r3
 80058ee:	f000 f927 	bl	8005b40 <RTC_ByteToBcd2>
 80058f2:	4603      	mov	r3, r0
 80058f4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	785b      	ldrb	r3, [r3, #1]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 f920 	bl	8005b40 <RTC_ByteToBcd2>
 8005900:	4603      	mov	r3, r0
 8005902:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005904:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	789b      	ldrb	r3, [r3, #2]
 800590a:	4618      	mov	r0, r3
 800590c:	f000 f918 	bl	8005b40 <RTC_ByteToBcd2>
 8005910:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005912:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800591c:	4313      	orrs	r3, r2
 800591e:	617b      	str	r3, [r7, #20]
 8005920:	e00e      	b.n	8005940 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	78db      	ldrb	r3, [r3, #3]
 8005926:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	785b      	ldrb	r3, [r3, #1]
 800592c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800592e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005934:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800593c:	4313      	orrs	r3, r2
 800593e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	22ca      	movs	r2, #202	@ 0xca
 8005946:	625a      	str	r2, [r3, #36]	@ 0x24
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2253      	movs	r2, #83	@ 0x53
 800594e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	f000 f899 	bl	8005a88 <RTC_EnterInitMode>
 8005956:	4603      	mov	r3, r0
 8005958:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800595a:	7cfb      	ldrb	r3, [r7, #19]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10c      	bne.n	800597a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800596a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800596e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f000 f8c0 	bl	8005af6 <RTC_ExitInitMode>
 8005976:	4603      	mov	r3, r0
 8005978:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800597a:	7cfb      	ldrb	r3, [r7, #19]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d102      	bne.n	8005986 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2201      	movs	r2, #1
 8005984:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	22ff      	movs	r2, #255	@ 0xff
 800598c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	771a      	strb	r2, [r3, #28]

  return status;
 8005994:	7cfb      	ldrb	r3, [r7, #19]
}
 8005996:	4618      	mov	r0, r3
 8005998:	371c      	adds	r7, #28
 800599a:	46bd      	mov	sp, r7
 800599c:	bd90      	pop	{r4, r7, pc}

0800599e <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b086      	sub	sp, #24
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	60f8      	str	r0, [r7, #12]
 80059a6:	60b9      	str	r1, [r7, #8]
 80059a8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80059aa:	2300      	movs	r3, #0
 80059ac:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80059b8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80059bc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	0c1b      	lsrs	r3, r3, #16
 80059c2:	b2da      	uxtb	r2, r3
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	0a1b      	lsrs	r3, r3, #8
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	f003 031f 	and.w	r3, r3, #31
 80059d2:	b2da      	uxtb	r2, r3
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	0b5b      	lsrs	r3, r3, #13
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	f003 0307 	and.w	r3, r3, #7
 80059f0:	b2da      	uxtb	r2, r3
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d11a      	bne.n	8005a32 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	78db      	ldrb	r3, [r3, #3]
 8005a00:	4618      	mov	r0, r3
 8005a02:	f000 f8bb 	bl	8005b7c <RTC_Bcd2ToByte>
 8005a06:	4603      	mov	r3, r0
 8005a08:	461a      	mov	r2, r3
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	785b      	ldrb	r3, [r3, #1]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f000 f8b2 	bl	8005b7c <RTC_Bcd2ToByte>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	789b      	ldrb	r3, [r3, #2]
 8005a24:	4618      	mov	r0, r3
 8005a26:	f000 f8a9 	bl	8005b7c <RTC_Bcd2ToByte>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3718      	adds	r7, #24
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a44:	2300      	movs	r3, #0
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8005a84 <HAL_RTC_WaitForSynchro+0x48>)
 8005a4e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a50:	f7fb fdbe 	bl	80015d0 <HAL_GetTick>
 8005a54:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005a56:	e009      	b.n	8005a6c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005a58:	f7fb fdba 	bl	80015d0 <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005a66:	d901      	bls.n	8005a6c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e007      	b.n	8005a7c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	f003 0320 	and.w	r3, r3, #32
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d0ee      	beq.n	8005a58 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	00017f5f 	.word	0x00017f5f

08005a88 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a90:	2300      	movs	r3, #0
 8005a92:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005a94:	2300      	movs	r3, #0
 8005a96:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d122      	bne.n	8005aec <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68da      	ldr	r2, [r3, #12]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005ab4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ab6:	f7fb fd8b 	bl	80015d0 <HAL_GetTick>
 8005aba:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005abc:	e00c      	b.n	8005ad8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005abe:	f7fb fd87 	bl	80015d0 <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005acc:	d904      	bls.n	8005ad8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2204      	movs	r2, #4
 8005ad2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d102      	bne.n	8005aec <RTC_EnterInitMode+0x64>
 8005ae6:	7bfb      	ldrb	r3, [r7, #15]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d1e8      	bne.n	8005abe <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b084      	sub	sp, #16
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005afe:	2300      	movs	r3, #0
 8005b00:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68da      	ldr	r2, [r3, #12]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b10:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f003 0320 	and.w	r3, r3, #32
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10a      	bne.n	8005b36 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f7ff ff8b 	bl	8005a3c <HAL_RTC_WaitForSynchro>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d004      	beq.n	8005b36 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2204      	movs	r2, #4
 8005b30:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3710      	adds	r7, #16
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	4603      	mov	r3, r0
 8005b48:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005b4e:	e005      	b.n	8005b5c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	3301      	adds	r3, #1
 8005b54:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8005b56:	79fb      	ldrb	r3, [r7, #7]
 8005b58:	3b0a      	subs	r3, #10
 8005b5a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005b5c:	79fb      	ldrb	r3, [r7, #7]
 8005b5e:	2b09      	cmp	r3, #9
 8005b60:	d8f6      	bhi.n	8005b50 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	011b      	lsls	r3, r3, #4
 8005b68:	b2da      	uxtb	r2, r3
 8005b6a:	79fb      	ldrb	r3, [r7, #7]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	b2db      	uxtb	r3, r3
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3714      	adds	r7, #20
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	4603      	mov	r3, r0
 8005b84:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8005b86:	2300      	movs	r3, #0
 8005b88:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8005b8a:	79fb      	ldrb	r3, [r7, #7]
 8005b8c:	091b      	lsrs	r3, r3, #4
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	461a      	mov	r2, r3
 8005b92:	4613      	mov	r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	4413      	add	r3, r2
 8005b98:	005b      	lsls	r3, r3, #1
 8005b9a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	b2da      	uxtb	r2, r3
 8005ba0:	79fb      	ldrb	r3, [r7, #7]
 8005ba2:	f003 030f 	and.w	r3, r3, #15
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	4413      	add	r3, r2
 8005baa:	b2db      	uxtb	r3, r3
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3714      	adds	r7, #20
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d101      	bne.n	8005bca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e07b      	b.n	8005cc2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d108      	bne.n	8005be4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bda:	d009      	beq.n	8005bf0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	61da      	str	r2, [r3, #28]
 8005be2:	e005      	b.n	8005bf0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d106      	bne.n	8005c10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7fb fa54 	bl	80010b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2202      	movs	r2, #2
 8005c14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005c38:	431a      	orrs	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c42:	431a      	orrs	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	f003 0302 	and.w	r3, r3, #2
 8005c4c:	431a      	orrs	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	f003 0301 	and.w	r3, r3, #1
 8005c56:	431a      	orrs	r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c60:	431a      	orrs	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	69db      	ldr	r3, [r3, #28]
 8005c66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c6a:	431a      	orrs	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a1b      	ldr	r3, [r3, #32]
 8005c70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c74:	ea42 0103 	orr.w	r1, r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c7c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	430a      	orrs	r2, r1
 8005c86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	0c1b      	lsrs	r3, r3, #16
 8005c8e:	f003 0104 	and.w	r1, r3, #4
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c96:	f003 0210 	and.w	r2, r3, #16
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	430a      	orrs	r2, r1
 8005ca0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	69da      	ldr	r2, [r3, #28]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005cb0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3708      	adds	r7, #8
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b088      	sub	sp, #32
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	60f8      	str	r0, [r7, #12]
 8005cd2:	60b9      	str	r1, [r7, #8]
 8005cd4:	603b      	str	r3, [r7, #0]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cda:	f7fb fc79 	bl	80015d0 <HAL_GetTick>
 8005cde:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005ce0:	88fb      	ldrh	r3, [r7, #6]
 8005ce2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d001      	beq.n	8005cf4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	e12a      	b.n	8005f4a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d002      	beq.n	8005d00 <HAL_SPI_Transmit+0x36>
 8005cfa:	88fb      	ldrh	r3, [r7, #6]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d101      	bne.n	8005d04 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e122      	b.n	8005f4a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d101      	bne.n	8005d12 <HAL_SPI_Transmit+0x48>
 8005d0e:	2302      	movs	r3, #2
 8005d10:	e11b      	b.n	8005f4a <HAL_SPI_Transmit+0x280>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2201      	movs	r2, #1
 8005d16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2203      	movs	r2, #3
 8005d1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	68ba      	ldr	r2, [r7, #8]
 8005d2c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	88fa      	ldrh	r2, [r7, #6]
 8005d32:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	88fa      	ldrh	r2, [r7, #6]
 8005d38:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2200      	movs	r2, #0
 8005d44:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d60:	d10f      	bne.n	8005d82 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d80:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d8c:	2b40      	cmp	r3, #64	@ 0x40
 8005d8e:	d007      	beq.n	8005da0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005da8:	d152      	bne.n	8005e50 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d002      	beq.n	8005db8 <HAL_SPI_Transmit+0xee>
 8005db2:	8b7b      	ldrh	r3, [r7, #26]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d145      	bne.n	8005e44 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dbc:	881a      	ldrh	r2, [r3, #0]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dc8:	1c9a      	adds	r2, r3, #2
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ddc:	e032      	b.n	8005e44 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	f003 0302 	and.w	r3, r3, #2
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d112      	bne.n	8005e12 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005df0:	881a      	ldrh	r2, [r3, #0]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dfc:	1c9a      	adds	r2, r3, #2
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005e10:	e018      	b.n	8005e44 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e12:	f7fb fbdd 	bl	80015d0 <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	683a      	ldr	r2, [r7, #0]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d803      	bhi.n	8005e2a <HAL_SPI_Transmit+0x160>
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e28:	d102      	bne.n	8005e30 <HAL_SPI_Transmit+0x166>
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d109      	bne.n	8005e44 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e082      	b.n	8005f4a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1c7      	bne.n	8005dde <HAL_SPI_Transmit+0x114>
 8005e4e:	e053      	b.n	8005ef8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d002      	beq.n	8005e5e <HAL_SPI_Transmit+0x194>
 8005e58:	8b7b      	ldrh	r3, [r7, #26]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d147      	bne.n	8005eee <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	330c      	adds	r3, #12
 8005e68:	7812      	ldrb	r2, [r2, #0]
 8005e6a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e70:	1c5a      	adds	r2, r3, #1
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005e84:	e033      	b.n	8005eee <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f003 0302 	and.w	r3, r3, #2
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d113      	bne.n	8005ebc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	330c      	adds	r3, #12
 8005e9e:	7812      	ldrb	r2, [r2, #0]
 8005ea0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ea6:	1c5a      	adds	r2, r3, #1
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005eba:	e018      	b.n	8005eee <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ebc:	f7fb fb88 	bl	80015d0 <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	683a      	ldr	r2, [r7, #0]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d803      	bhi.n	8005ed4 <HAL_SPI_Transmit+0x20a>
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed2:	d102      	bne.n	8005eda <HAL_SPI_Transmit+0x210>
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d109      	bne.n	8005eee <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e02d      	b.n	8005f4a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1c6      	bne.n	8005e86 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ef8:	69fa      	ldr	r2, [r7, #28]
 8005efa:	6839      	ldr	r1, [r7, #0]
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f000 fa59 	bl	80063b4 <SPI_EndRxTxTransaction>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d002      	beq.n	8005f0e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2220      	movs	r2, #32
 8005f0c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d10a      	bne.n	8005f2c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f16:	2300      	movs	r3, #0
 8005f18:	617b      	str	r3, [r7, #20]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	617b      	str	r3, [r7, #20]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	617b      	str	r3, [r7, #20]
 8005f2a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d001      	beq.n	8005f48 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e000      	b.n	8005f4a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005f48:	2300      	movs	r3, #0
  }
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3720      	adds	r7, #32
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b08a      	sub	sp, #40	@ 0x28
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	60f8      	str	r0, [r7, #12]
 8005f5a:	60b9      	str	r1, [r7, #8]
 8005f5c:	607a      	str	r2, [r7, #4]
 8005f5e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005f60:	2301      	movs	r3, #1
 8005f62:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f64:	f7fb fb34 	bl	80015d0 <HAL_GetTick>
 8005f68:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f70:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005f78:	887b      	ldrh	r3, [r7, #2]
 8005f7a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005f7c:	7ffb      	ldrb	r3, [r7, #31]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d00c      	beq.n	8005f9c <HAL_SPI_TransmitReceive+0x4a>
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f88:	d106      	bne.n	8005f98 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d102      	bne.n	8005f98 <HAL_SPI_TransmitReceive+0x46>
 8005f92:	7ffb      	ldrb	r3, [r7, #31]
 8005f94:	2b04      	cmp	r3, #4
 8005f96:	d001      	beq.n	8005f9c <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005f98:	2302      	movs	r3, #2
 8005f9a:	e17f      	b.n	800629c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d005      	beq.n	8005fae <HAL_SPI_TransmitReceive+0x5c>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d002      	beq.n	8005fae <HAL_SPI_TransmitReceive+0x5c>
 8005fa8:	887b      	ldrh	r3, [r7, #2]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d101      	bne.n	8005fb2 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e174      	b.n	800629c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d101      	bne.n	8005fc0 <HAL_SPI_TransmitReceive+0x6e>
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	e16d      	b.n	800629c <HAL_SPI_TransmitReceive+0x34a>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	2b04      	cmp	r3, #4
 8005fd2:	d003      	beq.n	8005fdc <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2205      	movs	r2, #5
 8005fd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	887a      	ldrh	r2, [r7, #2]
 8005fec:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	887a      	ldrh	r2, [r7, #2]
 8005ff2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	887a      	ldrh	r2, [r7, #2]
 8005ffe:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	887a      	ldrh	r2, [r7, #2]
 8006004:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800601c:	2b40      	cmp	r3, #64	@ 0x40
 800601e:	d007      	beq.n	8006030 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800602e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006038:	d17e      	bne.n	8006138 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d002      	beq.n	8006048 <HAL_SPI_TransmitReceive+0xf6>
 8006042:	8afb      	ldrh	r3, [r7, #22]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d16c      	bne.n	8006122 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800604c:	881a      	ldrh	r2, [r3, #0]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006058:	1c9a      	adds	r2, r3, #2
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006062:	b29b      	uxth	r3, r3
 8006064:	3b01      	subs	r3, #1
 8006066:	b29a      	uxth	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800606c:	e059      	b.n	8006122 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	2b02      	cmp	r3, #2
 800607a:	d11b      	bne.n	80060b4 <HAL_SPI_TransmitReceive+0x162>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006080:	b29b      	uxth	r3, r3
 8006082:	2b00      	cmp	r3, #0
 8006084:	d016      	beq.n	80060b4 <HAL_SPI_TransmitReceive+0x162>
 8006086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006088:	2b01      	cmp	r3, #1
 800608a:	d113      	bne.n	80060b4 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006090:	881a      	ldrh	r2, [r3, #0]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800609c:	1c9a      	adds	r2, r3, #2
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	3b01      	subs	r3, #1
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060b0:	2300      	movs	r3, #0
 80060b2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d119      	bne.n	80060f6 <HAL_SPI_TransmitReceive+0x1a4>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d014      	beq.n	80060f6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68da      	ldr	r2, [r3, #12]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060d6:	b292      	uxth	r2, r2
 80060d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060de:	1c9a      	adds	r2, r3, #2
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	3b01      	subs	r3, #1
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80060f2:	2301      	movs	r3, #1
 80060f4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80060f6:	f7fb fa6b 	bl	80015d0 <HAL_GetTick>
 80060fa:	4602      	mov	r2, r0
 80060fc:	6a3b      	ldr	r3, [r7, #32]
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006102:	429a      	cmp	r2, r3
 8006104:	d80d      	bhi.n	8006122 <HAL_SPI_TransmitReceive+0x1d0>
 8006106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800610c:	d009      	beq.n	8006122 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e0bc      	b.n	800629c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006126:	b29b      	uxth	r3, r3
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1a0      	bne.n	800606e <HAL_SPI_TransmitReceive+0x11c>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006130:	b29b      	uxth	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d19b      	bne.n	800606e <HAL_SPI_TransmitReceive+0x11c>
 8006136:	e082      	b.n	800623e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d002      	beq.n	8006146 <HAL_SPI_TransmitReceive+0x1f4>
 8006140:	8afb      	ldrh	r3, [r7, #22]
 8006142:	2b01      	cmp	r3, #1
 8006144:	d171      	bne.n	800622a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	330c      	adds	r3, #12
 8006150:	7812      	ldrb	r2, [r2, #0]
 8006152:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006158:	1c5a      	adds	r2, r3, #1
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006162:	b29b      	uxth	r3, r3
 8006164:	3b01      	subs	r3, #1
 8006166:	b29a      	uxth	r2, r3
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800616c:	e05d      	b.n	800622a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f003 0302 	and.w	r3, r3, #2
 8006178:	2b02      	cmp	r3, #2
 800617a:	d11c      	bne.n	80061b6 <HAL_SPI_TransmitReceive+0x264>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006180:	b29b      	uxth	r3, r3
 8006182:	2b00      	cmp	r3, #0
 8006184:	d017      	beq.n	80061b6 <HAL_SPI_TransmitReceive+0x264>
 8006186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006188:	2b01      	cmp	r3, #1
 800618a:	d114      	bne.n	80061b6 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	330c      	adds	r3, #12
 8006196:	7812      	ldrb	r2, [r2, #0]
 8006198:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800619e:	1c5a      	adds	r2, r3, #1
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	3b01      	subs	r3, #1
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061b2:	2300      	movs	r3, #0
 80061b4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f003 0301 	and.w	r3, r3, #1
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d119      	bne.n	80061f8 <HAL_SPI_TransmitReceive+0x2a6>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d014      	beq.n	80061f8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68da      	ldr	r2, [r3, #12]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d8:	b2d2      	uxtb	r2, r2
 80061da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061e0:	1c5a      	adds	r2, r3, #1
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	3b01      	subs	r3, #1
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061f4:	2301      	movs	r3, #1
 80061f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80061f8:	f7fb f9ea 	bl	80015d0 <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	6a3b      	ldr	r3, [r7, #32]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006204:	429a      	cmp	r2, r3
 8006206:	d803      	bhi.n	8006210 <HAL_SPI_TransmitReceive+0x2be>
 8006208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800620e:	d102      	bne.n	8006216 <HAL_SPI_TransmitReceive+0x2c4>
 8006210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006212:	2b00      	cmp	r3, #0
 8006214:	d109      	bne.n	800622a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e038      	b.n	800629c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800622e:	b29b      	uxth	r3, r3
 8006230:	2b00      	cmp	r3, #0
 8006232:	d19c      	bne.n	800616e <HAL_SPI_TransmitReceive+0x21c>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006238:	b29b      	uxth	r3, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d197      	bne.n	800616e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800623e:	6a3a      	ldr	r2, [r7, #32]
 8006240:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f000 f8b6 	bl	80063b4 <SPI_EndRxTxTransaction>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d008      	beq.n	8006260 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2220      	movs	r2, #32
 8006252:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e01d      	b.n	800629c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d10a      	bne.n	800627e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006268:	2300      	movs	r3, #0
 800626a:	613b      	str	r3, [r7, #16]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	613b      	str	r3, [r7, #16]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	613b      	str	r3, [r7, #16]
 800627c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006292:	2b00      	cmp	r3, #0
 8006294:	d001      	beq.n	800629a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e000      	b.n	800629c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800629a:	2300      	movs	r3, #0
  }
}
 800629c:	4618      	mov	r0, r3
 800629e:	3728      	adds	r7, #40	@ 0x28
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b088      	sub	sp, #32
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	603b      	str	r3, [r7, #0]
 80062b0:	4613      	mov	r3, r2
 80062b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80062b4:	f7fb f98c 	bl	80015d0 <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062bc:	1a9b      	subs	r3, r3, r2
 80062be:	683a      	ldr	r2, [r7, #0]
 80062c0:	4413      	add	r3, r2
 80062c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80062c4:	f7fb f984 	bl	80015d0 <HAL_GetTick>
 80062c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80062ca:	4b39      	ldr	r3, [pc, #228]	@ (80063b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	015b      	lsls	r3, r3, #5
 80062d0:	0d1b      	lsrs	r3, r3, #20
 80062d2:	69fa      	ldr	r2, [r7, #28]
 80062d4:	fb02 f303 	mul.w	r3, r2, r3
 80062d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062da:	e054      	b.n	8006386 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e2:	d050      	beq.n	8006386 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80062e4:	f7fb f974 	bl	80015d0 <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	69fa      	ldr	r2, [r7, #28]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d902      	bls.n	80062fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d13d      	bne.n	8006376 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006308:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006312:	d111      	bne.n	8006338 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800631c:	d004      	beq.n	8006328 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006326:	d107      	bne.n	8006338 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006336:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800633c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006340:	d10f      	bne.n	8006362 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006350:	601a      	str	r2, [r3, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006360:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e017      	b.n	80063a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d101      	bne.n	8006380 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800637c:	2300      	movs	r3, #0
 800637e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	3b01      	subs	r3, #1
 8006384:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	689a      	ldr	r2, [r3, #8]
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	4013      	ands	r3, r2
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	429a      	cmp	r2, r3
 8006394:	bf0c      	ite	eq
 8006396:	2301      	moveq	r3, #1
 8006398:	2300      	movne	r3, #0
 800639a:	b2db      	uxtb	r3, r3
 800639c:	461a      	mov	r2, r3
 800639e:	79fb      	ldrb	r3, [r7, #7]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d19b      	bne.n	80062dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3720      	adds	r7, #32
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	20000000 	.word	0x20000000

080063b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b088      	sub	sp, #32
 80063b8:	af02      	add	r7, sp, #8
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	9300      	str	r3, [sp, #0]
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	2201      	movs	r2, #1
 80063c8:	2102      	movs	r1, #2
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	f7ff ff6a 	bl	80062a4 <SPI_WaitFlagStateUntilTimeout>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d007      	beq.n	80063e6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063da:	f043 0220 	orr.w	r2, r3, #32
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e032      	b.n	800644c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80063e6:	4b1b      	ldr	r3, [pc, #108]	@ (8006454 <SPI_EndRxTxTransaction+0xa0>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a1b      	ldr	r2, [pc, #108]	@ (8006458 <SPI_EndRxTxTransaction+0xa4>)
 80063ec:	fba2 2303 	umull	r2, r3, r2, r3
 80063f0:	0d5b      	lsrs	r3, r3, #21
 80063f2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80063f6:	fb02 f303 	mul.w	r3, r2, r3
 80063fa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006404:	d112      	bne.n	800642c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	9300      	str	r3, [sp, #0]
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	2200      	movs	r2, #0
 800640e:	2180      	movs	r1, #128	@ 0x80
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f7ff ff47 	bl	80062a4 <SPI_WaitFlagStateUntilTimeout>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d016      	beq.n	800644a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006420:	f043 0220 	orr.w	r2, r3, #32
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	e00f      	b.n	800644c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00a      	beq.n	8006448 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	3b01      	subs	r3, #1
 8006436:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006442:	2b80      	cmp	r3, #128	@ 0x80
 8006444:	d0f2      	beq.n	800642c <SPI_EndRxTxTransaction+0x78>
 8006446:	e000      	b.n	800644a <SPI_EndRxTxTransaction+0x96>
        break;
 8006448:	bf00      	nop
  }

  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3718      	adds	r7, #24
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	20000000 	.word	0x20000000
 8006458:	165e9f81 	.word	0x165e9f81

0800645c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e042      	b.n	80064f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d106      	bne.n	8006488 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f7fa ffcc 	bl	8001420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2224      	movs	r2, #36	@ 0x24
 800648c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68da      	ldr	r2, [r3, #12]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800649e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 f82b 	bl	80064fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	691a      	ldr	r2, [r3, #16]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80064b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	695a      	ldr	r2, [r3, #20]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80064c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68da      	ldr	r2, [r3, #12]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80064d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2220      	movs	r2, #32
 80064e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2220      	movs	r2, #32
 80064e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3708      	adds	r7, #8
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006500:	b0c0      	sub	sp, #256	@ 0x100
 8006502:	af00      	add	r7, sp, #0
 8006504:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006518:	68d9      	ldr	r1, [r3, #12]
 800651a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	ea40 0301 	orr.w	r3, r0, r1
 8006524:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800652a:	689a      	ldr	r2, [r3, #8]
 800652c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	431a      	orrs	r2, r3
 8006534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006538:	695b      	ldr	r3, [r3, #20]
 800653a:	431a      	orrs	r2, r3
 800653c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006540:	69db      	ldr	r3, [r3, #28]
 8006542:	4313      	orrs	r3, r2
 8006544:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006554:	f021 010c 	bic.w	r1, r1, #12
 8006558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006562:	430b      	orrs	r3, r1
 8006564:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006576:	6999      	ldr	r1, [r3, #24]
 8006578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	ea40 0301 	orr.w	r3, r0, r1
 8006582:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	4b8f      	ldr	r3, [pc, #572]	@ (80067c8 <UART_SetConfig+0x2cc>)
 800658c:	429a      	cmp	r2, r3
 800658e:	d005      	beq.n	800659c <UART_SetConfig+0xa0>
 8006590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	4b8d      	ldr	r3, [pc, #564]	@ (80067cc <UART_SetConfig+0x2d0>)
 8006598:	429a      	cmp	r2, r3
 800659a:	d104      	bne.n	80065a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800659c:	f7fe feaa 	bl	80052f4 <HAL_RCC_GetPCLK2Freq>
 80065a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80065a4:	e003      	b.n	80065ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80065a6:	f7fe fe91 	bl	80052cc <HAL_RCC_GetPCLK1Freq>
 80065aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065b2:	69db      	ldr	r3, [r3, #28]
 80065b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065b8:	f040 810c 	bne.w	80067d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065c0:	2200      	movs	r2, #0
 80065c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80065c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80065ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80065ce:	4622      	mov	r2, r4
 80065d0:	462b      	mov	r3, r5
 80065d2:	1891      	adds	r1, r2, r2
 80065d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80065d6:	415b      	adcs	r3, r3
 80065d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80065de:	4621      	mov	r1, r4
 80065e0:	eb12 0801 	adds.w	r8, r2, r1
 80065e4:	4629      	mov	r1, r5
 80065e6:	eb43 0901 	adc.w	r9, r3, r1
 80065ea:	f04f 0200 	mov.w	r2, #0
 80065ee:	f04f 0300 	mov.w	r3, #0
 80065f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065fe:	4690      	mov	r8, r2
 8006600:	4699      	mov	r9, r3
 8006602:	4623      	mov	r3, r4
 8006604:	eb18 0303 	adds.w	r3, r8, r3
 8006608:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800660c:	462b      	mov	r3, r5
 800660e:	eb49 0303 	adc.w	r3, r9, r3
 8006612:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006622:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006626:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800662a:	460b      	mov	r3, r1
 800662c:	18db      	adds	r3, r3, r3
 800662e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006630:	4613      	mov	r3, r2
 8006632:	eb42 0303 	adc.w	r3, r2, r3
 8006636:	657b      	str	r3, [r7, #84]	@ 0x54
 8006638:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800663c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006640:	f7f9 fe16 	bl	8000270 <__aeabi_uldivmod>
 8006644:	4602      	mov	r2, r0
 8006646:	460b      	mov	r3, r1
 8006648:	4b61      	ldr	r3, [pc, #388]	@ (80067d0 <UART_SetConfig+0x2d4>)
 800664a:	fba3 2302 	umull	r2, r3, r3, r2
 800664e:	095b      	lsrs	r3, r3, #5
 8006650:	011c      	lsls	r4, r3, #4
 8006652:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006656:	2200      	movs	r2, #0
 8006658:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800665c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006660:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006664:	4642      	mov	r2, r8
 8006666:	464b      	mov	r3, r9
 8006668:	1891      	adds	r1, r2, r2
 800666a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800666c:	415b      	adcs	r3, r3
 800666e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006670:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006674:	4641      	mov	r1, r8
 8006676:	eb12 0a01 	adds.w	sl, r2, r1
 800667a:	4649      	mov	r1, r9
 800667c:	eb43 0b01 	adc.w	fp, r3, r1
 8006680:	f04f 0200 	mov.w	r2, #0
 8006684:	f04f 0300 	mov.w	r3, #0
 8006688:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800668c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006690:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006694:	4692      	mov	sl, r2
 8006696:	469b      	mov	fp, r3
 8006698:	4643      	mov	r3, r8
 800669a:	eb1a 0303 	adds.w	r3, sl, r3
 800669e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066a2:	464b      	mov	r3, r9
 80066a4:	eb4b 0303 	adc.w	r3, fp, r3
 80066a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80066ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80066b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80066bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80066c0:	460b      	mov	r3, r1
 80066c2:	18db      	adds	r3, r3, r3
 80066c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80066c6:	4613      	mov	r3, r2
 80066c8:	eb42 0303 	adc.w	r3, r2, r3
 80066cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80066ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80066d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80066d6:	f7f9 fdcb 	bl	8000270 <__aeabi_uldivmod>
 80066da:	4602      	mov	r2, r0
 80066dc:	460b      	mov	r3, r1
 80066de:	4611      	mov	r1, r2
 80066e0:	4b3b      	ldr	r3, [pc, #236]	@ (80067d0 <UART_SetConfig+0x2d4>)
 80066e2:	fba3 2301 	umull	r2, r3, r3, r1
 80066e6:	095b      	lsrs	r3, r3, #5
 80066e8:	2264      	movs	r2, #100	@ 0x64
 80066ea:	fb02 f303 	mul.w	r3, r2, r3
 80066ee:	1acb      	subs	r3, r1, r3
 80066f0:	00db      	lsls	r3, r3, #3
 80066f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80066f6:	4b36      	ldr	r3, [pc, #216]	@ (80067d0 <UART_SetConfig+0x2d4>)
 80066f8:	fba3 2302 	umull	r2, r3, r3, r2
 80066fc:	095b      	lsrs	r3, r3, #5
 80066fe:	005b      	lsls	r3, r3, #1
 8006700:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006704:	441c      	add	r4, r3
 8006706:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800670a:	2200      	movs	r2, #0
 800670c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006710:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006714:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006718:	4642      	mov	r2, r8
 800671a:	464b      	mov	r3, r9
 800671c:	1891      	adds	r1, r2, r2
 800671e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006720:	415b      	adcs	r3, r3
 8006722:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006724:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006728:	4641      	mov	r1, r8
 800672a:	1851      	adds	r1, r2, r1
 800672c:	6339      	str	r1, [r7, #48]	@ 0x30
 800672e:	4649      	mov	r1, r9
 8006730:	414b      	adcs	r3, r1
 8006732:	637b      	str	r3, [r7, #52]	@ 0x34
 8006734:	f04f 0200 	mov.w	r2, #0
 8006738:	f04f 0300 	mov.w	r3, #0
 800673c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006740:	4659      	mov	r1, fp
 8006742:	00cb      	lsls	r3, r1, #3
 8006744:	4651      	mov	r1, sl
 8006746:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800674a:	4651      	mov	r1, sl
 800674c:	00ca      	lsls	r2, r1, #3
 800674e:	4610      	mov	r0, r2
 8006750:	4619      	mov	r1, r3
 8006752:	4603      	mov	r3, r0
 8006754:	4642      	mov	r2, r8
 8006756:	189b      	adds	r3, r3, r2
 8006758:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800675c:	464b      	mov	r3, r9
 800675e:	460a      	mov	r2, r1
 8006760:	eb42 0303 	adc.w	r3, r2, r3
 8006764:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006774:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006778:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800677c:	460b      	mov	r3, r1
 800677e:	18db      	adds	r3, r3, r3
 8006780:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006782:	4613      	mov	r3, r2
 8006784:	eb42 0303 	adc.w	r3, r2, r3
 8006788:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800678a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800678e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006792:	f7f9 fd6d 	bl	8000270 <__aeabi_uldivmod>
 8006796:	4602      	mov	r2, r0
 8006798:	460b      	mov	r3, r1
 800679a:	4b0d      	ldr	r3, [pc, #52]	@ (80067d0 <UART_SetConfig+0x2d4>)
 800679c:	fba3 1302 	umull	r1, r3, r3, r2
 80067a0:	095b      	lsrs	r3, r3, #5
 80067a2:	2164      	movs	r1, #100	@ 0x64
 80067a4:	fb01 f303 	mul.w	r3, r1, r3
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	00db      	lsls	r3, r3, #3
 80067ac:	3332      	adds	r3, #50	@ 0x32
 80067ae:	4a08      	ldr	r2, [pc, #32]	@ (80067d0 <UART_SetConfig+0x2d4>)
 80067b0:	fba2 2303 	umull	r2, r3, r2, r3
 80067b4:	095b      	lsrs	r3, r3, #5
 80067b6:	f003 0207 	and.w	r2, r3, #7
 80067ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4422      	add	r2, r4
 80067c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80067c4:	e106      	b.n	80069d4 <UART_SetConfig+0x4d8>
 80067c6:	bf00      	nop
 80067c8:	40011000 	.word	0x40011000
 80067cc:	40011400 	.word	0x40011400
 80067d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067d8:	2200      	movs	r2, #0
 80067da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80067de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80067e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80067e6:	4642      	mov	r2, r8
 80067e8:	464b      	mov	r3, r9
 80067ea:	1891      	adds	r1, r2, r2
 80067ec:	6239      	str	r1, [r7, #32]
 80067ee:	415b      	adcs	r3, r3
 80067f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80067f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067f6:	4641      	mov	r1, r8
 80067f8:	1854      	adds	r4, r2, r1
 80067fa:	4649      	mov	r1, r9
 80067fc:	eb43 0501 	adc.w	r5, r3, r1
 8006800:	f04f 0200 	mov.w	r2, #0
 8006804:	f04f 0300 	mov.w	r3, #0
 8006808:	00eb      	lsls	r3, r5, #3
 800680a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800680e:	00e2      	lsls	r2, r4, #3
 8006810:	4614      	mov	r4, r2
 8006812:	461d      	mov	r5, r3
 8006814:	4643      	mov	r3, r8
 8006816:	18e3      	adds	r3, r4, r3
 8006818:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800681c:	464b      	mov	r3, r9
 800681e:	eb45 0303 	adc.w	r3, r5, r3
 8006822:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006832:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006836:	f04f 0200 	mov.w	r2, #0
 800683a:	f04f 0300 	mov.w	r3, #0
 800683e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006842:	4629      	mov	r1, r5
 8006844:	008b      	lsls	r3, r1, #2
 8006846:	4621      	mov	r1, r4
 8006848:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800684c:	4621      	mov	r1, r4
 800684e:	008a      	lsls	r2, r1, #2
 8006850:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006854:	f7f9 fd0c 	bl	8000270 <__aeabi_uldivmod>
 8006858:	4602      	mov	r2, r0
 800685a:	460b      	mov	r3, r1
 800685c:	4b60      	ldr	r3, [pc, #384]	@ (80069e0 <UART_SetConfig+0x4e4>)
 800685e:	fba3 2302 	umull	r2, r3, r3, r2
 8006862:	095b      	lsrs	r3, r3, #5
 8006864:	011c      	lsls	r4, r3, #4
 8006866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800686a:	2200      	movs	r2, #0
 800686c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006870:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006874:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006878:	4642      	mov	r2, r8
 800687a:	464b      	mov	r3, r9
 800687c:	1891      	adds	r1, r2, r2
 800687e:	61b9      	str	r1, [r7, #24]
 8006880:	415b      	adcs	r3, r3
 8006882:	61fb      	str	r3, [r7, #28]
 8006884:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006888:	4641      	mov	r1, r8
 800688a:	1851      	adds	r1, r2, r1
 800688c:	6139      	str	r1, [r7, #16]
 800688e:	4649      	mov	r1, r9
 8006890:	414b      	adcs	r3, r1
 8006892:	617b      	str	r3, [r7, #20]
 8006894:	f04f 0200 	mov.w	r2, #0
 8006898:	f04f 0300 	mov.w	r3, #0
 800689c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80068a0:	4659      	mov	r1, fp
 80068a2:	00cb      	lsls	r3, r1, #3
 80068a4:	4651      	mov	r1, sl
 80068a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068aa:	4651      	mov	r1, sl
 80068ac:	00ca      	lsls	r2, r1, #3
 80068ae:	4610      	mov	r0, r2
 80068b0:	4619      	mov	r1, r3
 80068b2:	4603      	mov	r3, r0
 80068b4:	4642      	mov	r2, r8
 80068b6:	189b      	adds	r3, r3, r2
 80068b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80068bc:	464b      	mov	r3, r9
 80068be:	460a      	mov	r2, r1
 80068c0:	eb42 0303 	adc.w	r3, r2, r3
 80068c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80068c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80068d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80068d4:	f04f 0200 	mov.w	r2, #0
 80068d8:	f04f 0300 	mov.w	r3, #0
 80068dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80068e0:	4649      	mov	r1, r9
 80068e2:	008b      	lsls	r3, r1, #2
 80068e4:	4641      	mov	r1, r8
 80068e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068ea:	4641      	mov	r1, r8
 80068ec:	008a      	lsls	r2, r1, #2
 80068ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80068f2:	f7f9 fcbd 	bl	8000270 <__aeabi_uldivmod>
 80068f6:	4602      	mov	r2, r0
 80068f8:	460b      	mov	r3, r1
 80068fa:	4611      	mov	r1, r2
 80068fc:	4b38      	ldr	r3, [pc, #224]	@ (80069e0 <UART_SetConfig+0x4e4>)
 80068fe:	fba3 2301 	umull	r2, r3, r3, r1
 8006902:	095b      	lsrs	r3, r3, #5
 8006904:	2264      	movs	r2, #100	@ 0x64
 8006906:	fb02 f303 	mul.w	r3, r2, r3
 800690a:	1acb      	subs	r3, r1, r3
 800690c:	011b      	lsls	r3, r3, #4
 800690e:	3332      	adds	r3, #50	@ 0x32
 8006910:	4a33      	ldr	r2, [pc, #204]	@ (80069e0 <UART_SetConfig+0x4e4>)
 8006912:	fba2 2303 	umull	r2, r3, r2, r3
 8006916:	095b      	lsrs	r3, r3, #5
 8006918:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800691c:	441c      	add	r4, r3
 800691e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006922:	2200      	movs	r2, #0
 8006924:	673b      	str	r3, [r7, #112]	@ 0x70
 8006926:	677a      	str	r2, [r7, #116]	@ 0x74
 8006928:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800692c:	4642      	mov	r2, r8
 800692e:	464b      	mov	r3, r9
 8006930:	1891      	adds	r1, r2, r2
 8006932:	60b9      	str	r1, [r7, #8]
 8006934:	415b      	adcs	r3, r3
 8006936:	60fb      	str	r3, [r7, #12]
 8006938:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800693c:	4641      	mov	r1, r8
 800693e:	1851      	adds	r1, r2, r1
 8006940:	6039      	str	r1, [r7, #0]
 8006942:	4649      	mov	r1, r9
 8006944:	414b      	adcs	r3, r1
 8006946:	607b      	str	r3, [r7, #4]
 8006948:	f04f 0200 	mov.w	r2, #0
 800694c:	f04f 0300 	mov.w	r3, #0
 8006950:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006954:	4659      	mov	r1, fp
 8006956:	00cb      	lsls	r3, r1, #3
 8006958:	4651      	mov	r1, sl
 800695a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800695e:	4651      	mov	r1, sl
 8006960:	00ca      	lsls	r2, r1, #3
 8006962:	4610      	mov	r0, r2
 8006964:	4619      	mov	r1, r3
 8006966:	4603      	mov	r3, r0
 8006968:	4642      	mov	r2, r8
 800696a:	189b      	adds	r3, r3, r2
 800696c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800696e:	464b      	mov	r3, r9
 8006970:	460a      	mov	r2, r1
 8006972:	eb42 0303 	adc.w	r3, r2, r3
 8006976:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	663b      	str	r3, [r7, #96]	@ 0x60
 8006982:	667a      	str	r2, [r7, #100]	@ 0x64
 8006984:	f04f 0200 	mov.w	r2, #0
 8006988:	f04f 0300 	mov.w	r3, #0
 800698c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006990:	4649      	mov	r1, r9
 8006992:	008b      	lsls	r3, r1, #2
 8006994:	4641      	mov	r1, r8
 8006996:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800699a:	4641      	mov	r1, r8
 800699c:	008a      	lsls	r2, r1, #2
 800699e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80069a2:	f7f9 fc65 	bl	8000270 <__aeabi_uldivmod>
 80069a6:	4602      	mov	r2, r0
 80069a8:	460b      	mov	r3, r1
 80069aa:	4b0d      	ldr	r3, [pc, #52]	@ (80069e0 <UART_SetConfig+0x4e4>)
 80069ac:	fba3 1302 	umull	r1, r3, r3, r2
 80069b0:	095b      	lsrs	r3, r3, #5
 80069b2:	2164      	movs	r1, #100	@ 0x64
 80069b4:	fb01 f303 	mul.w	r3, r1, r3
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	011b      	lsls	r3, r3, #4
 80069bc:	3332      	adds	r3, #50	@ 0x32
 80069be:	4a08      	ldr	r2, [pc, #32]	@ (80069e0 <UART_SetConfig+0x4e4>)
 80069c0:	fba2 2303 	umull	r2, r3, r2, r3
 80069c4:	095b      	lsrs	r3, r3, #5
 80069c6:	f003 020f 	and.w	r2, r3, #15
 80069ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4422      	add	r2, r4
 80069d2:	609a      	str	r2, [r3, #8]
}
 80069d4:	bf00      	nop
 80069d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80069da:	46bd      	mov	sp, r7
 80069dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069e0:	51eb851f 	.word	0x51eb851f

080069e4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80069e8:	4904      	ldr	r1, [pc, #16]	@ (80069fc <MX_FATFS_Init+0x18>)
 80069ea:	4805      	ldr	r0, [pc, #20]	@ (8006a00 <MX_FATFS_Init+0x1c>)
 80069ec:	f005 f894 	bl	800bb18 <FATFS_LinkDriver>
 80069f0:	4603      	mov	r3, r0
 80069f2:	461a      	mov	r2, r3
 80069f4:	4b03      	ldr	r3, [pc, #12]	@ (8006a04 <MX_FATFS_Init+0x20>)
 80069f6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80069f8:	bf00      	nop
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	2000037c 	.word	0x2000037c
 8006a00:	2000000c 	.word	0x2000000c
 8006a04:	20000378 	.word	0x20000378

08006a08 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006a0c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	4603      	mov	r3, r0
 8006a20:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 8006a22:	79fb      	ldrb	r3, [r7, #7]
 8006a24:	4618      	mov	r0, r3
 8006a26:	f000 f9d3 	bl	8006dd0 <USER_SPI_initialize>
 8006a2a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3708      	adds	r7, #8
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
  return USER_SPI_status(pdrv);
 8006a3e:	79fb      	ldrb	r3, [r7, #7]
 8006a40:	4618      	mov	r0, r3
 8006a42:	f000 fab1 	bl	8006fa8 <USER_SPI_status>
 8006a46:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3708      	adds	r7, #8
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60b9      	str	r1, [r7, #8]
 8006a58:	607a      	str	r2, [r7, #4]
 8006a5a:	603b      	str	r3, [r7, #0]
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
  return USER_SPI_read(pdrv, buff, sector, count);
 8006a60:	7bf8      	ldrb	r0, [r7, #15]
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	68b9      	ldr	r1, [r7, #8]
 8006a68:	f000 fab4 	bl	8006fd4 <USER_SPI_read>
 8006a6c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b084      	sub	sp, #16
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	607a      	str	r2, [r7, #4]
 8006a80:	603b      	str	r3, [r7, #0]
 8006a82:	4603      	mov	r3, r0
 8006a84:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 8006a86:	7bf8      	ldrb	r0, [r7, #15]
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	68b9      	ldr	r1, [r7, #8]
 8006a8e:	f000 fb07 	bl	80070a0 <USER_SPI_write>
 8006a92:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	603a      	str	r2, [r7, #0]
 8006aa6:	71fb      	strb	r3, [r7, #7]
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
  return USER_SPI_ioctl(pdrv, cmd, buff);
 8006aac:	79b9      	ldrb	r1, [r7, #6]
 8006aae:	79fb      	ldrb	r3, [r7, #7]
 8006ab0:	683a      	ldr	r2, [r7, #0]
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f000 fb70 	bl	8007198 <USER_SPI_ioctl>
 8006ab8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3708      	adds	r7, #8
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
	...

08006ac4 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8006acc:	f7fa fd80 	bl	80015d0 <HAL_GetTick>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	4a04      	ldr	r2, [pc, #16]	@ (8006ae4 <SPI_Timer_On+0x20>)
 8006ad4:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8006ad6:	4a04      	ldr	r2, [pc, #16]	@ (8006ae8 <SPI_Timer_On+0x24>)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6013      	str	r3, [r2, #0]
}
 8006adc:	bf00      	nop
 8006ade:	3708      	adds	r7, #8
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	20000384 	.word	0x20000384
 8006ae8:	20000388 	.word	0x20000388

08006aec <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8006aec:	b580      	push	{r7, lr}
 8006aee:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8006af0:	f7fa fd6e 	bl	80015d0 <HAL_GetTick>
 8006af4:	4602      	mov	r2, r0
 8006af6:	4b06      	ldr	r3, [pc, #24]	@ (8006b10 <SPI_Timer_Status+0x24>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	1ad2      	subs	r2, r2, r3
 8006afc:	4b05      	ldr	r3, [pc, #20]	@ (8006b14 <SPI_Timer_Status+0x28>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	bf34      	ite	cc
 8006b04:	2301      	movcc	r3, #1
 8006b06:	2300      	movcs	r3, #0
 8006b08:	b2db      	uxtb	r3, r3
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	20000384 	.word	0x20000384
 8006b14:	20000388 	.word	0x20000388

08006b18 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b086      	sub	sp, #24
 8006b1c:	af02      	add	r7, sp, #8
 8006b1e:	4603      	mov	r3, r0
 8006b20:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006b22:	f107 020f 	add.w	r2, r7, #15
 8006b26:	1df9      	adds	r1, r7, #7
 8006b28:	2332      	movs	r3, #50	@ 0x32
 8006b2a:	9300      	str	r3, [sp, #0]
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	4804      	ldr	r0, [pc, #16]	@ (8006b40 <xchg_spi+0x28>)
 8006b30:	f7ff fa0f 	bl	8005f52 <HAL_SPI_TransmitReceive>
    return rxDat;
 8006b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	200002d0 	.word	0x200002d0

08006b44 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8006b44:	b590      	push	{r4, r7, lr}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8006b4e:	2300      	movs	r3, #0
 8006b50:	60fb      	str	r3, [r7, #12]
 8006b52:	e00a      	b.n	8006b6a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	18d4      	adds	r4, r2, r3
 8006b5a:	20ff      	movs	r0, #255	@ 0xff
 8006b5c:	f7ff ffdc 	bl	8006b18 <xchg_spi>
 8006b60:	4603      	mov	r3, r0
 8006b62:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	3301      	adds	r3, #1
 8006b68:	60fb      	str	r3, [r7, #12]
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d3f0      	bcc.n	8006b54 <rcvr_spi_multi+0x10>
	}
}
 8006b72:	bf00      	nop
 8006b74:	bf00      	nop
 8006b76:	3714      	adds	r7, #20
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd90      	pop	{r4, r7, pc}

08006b7c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	b29a      	uxth	r2, r3
 8006b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b8e:	6879      	ldr	r1, [r7, #4]
 8006b90:	4803      	ldr	r0, [pc, #12]	@ (8006ba0 <xmit_spi_multi+0x24>)
 8006b92:	f7ff f89a 	bl	8005cca <HAL_SPI_Transmit>
}
 8006b96:	bf00      	nop
 8006b98:	3708      	adds	r7, #8
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	200002d0 	.word	0x200002d0

08006ba4 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b086      	sub	sp, #24
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8006bac:	f7fa fd10 	bl	80015d0 <HAL_GetTick>
 8006bb0:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8006bb6:	20ff      	movs	r0, #255	@ 0xff
 8006bb8:	f7ff ffae 	bl	8006b18 <xchg_spi>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8006bc0:	7bfb      	ldrb	r3, [r7, #15]
 8006bc2:	2bff      	cmp	r3, #255	@ 0xff
 8006bc4:	d007      	beq.n	8006bd6 <wait_ready+0x32>
 8006bc6:	f7fa fd03 	bl	80015d0 <HAL_GetTick>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	693a      	ldr	r2, [r7, #16]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d8ef      	bhi.n	8006bb6 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8006bd6:	7bfb      	ldrb	r3, [r7, #15]
 8006bd8:	2bff      	cmp	r3, #255	@ 0xff
 8006bda:	bf0c      	ite	eq
 8006bdc:	2301      	moveq	r3, #1
 8006bde:	2300      	movne	r3, #0
 8006be0:	b2db      	uxtb	r3, r3
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3718      	adds	r7, #24
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
	...

08006bec <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	2120      	movs	r1, #32
 8006bf4:	4803      	ldr	r0, [pc, #12]	@ (8006c04 <despiselect+0x18>)
 8006bf6:	f7fb ff1f 	bl	8002a38 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8006bfa:	20ff      	movs	r0, #255	@ 0xff
 8006bfc:	f7ff ff8c 	bl	8006b18 <xchg_spi>

}
 8006c00:	bf00      	nop
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	40020800 	.word	0x40020800

08006c08 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	2120      	movs	r1, #32
 8006c10:	4809      	ldr	r0, [pc, #36]	@ (8006c38 <spiselect+0x30>)
 8006c12:	f7fb ff11 	bl	8002a38 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8006c16:	20ff      	movs	r0, #255	@ 0xff
 8006c18:	f7ff ff7e 	bl	8006b18 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8006c1c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8006c20:	f7ff ffc0 	bl	8006ba4 <wait_ready>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d001      	beq.n	8006c2e <spiselect+0x26>
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e002      	b.n	8006c34 <spiselect+0x2c>

	despiselect();
 8006c2e:	f7ff ffdd 	bl	8006bec <despiselect>
	return 0;	/* Timeout */
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	40020800 	.word	0x40020800

08006c3c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8006c46:	20c8      	movs	r0, #200	@ 0xc8
 8006c48:	f7ff ff3c 	bl	8006ac4 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8006c4c:	20ff      	movs	r0, #255	@ 0xff
 8006c4e:	f7ff ff63 	bl	8006b18 <xchg_spi>
 8006c52:	4603      	mov	r3, r0
 8006c54:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8006c56:	7bfb      	ldrb	r3, [r7, #15]
 8006c58:	2bff      	cmp	r3, #255	@ 0xff
 8006c5a:	d104      	bne.n	8006c66 <rcvr_datablock+0x2a>
 8006c5c:	f7ff ff46 	bl	8006aec <SPI_Timer_Status>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1f2      	bne.n	8006c4c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8006c66:	7bfb      	ldrb	r3, [r7, #15]
 8006c68:	2bfe      	cmp	r3, #254	@ 0xfe
 8006c6a:	d001      	beq.n	8006c70 <rcvr_datablock+0x34>
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	e00a      	b.n	8006c86 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8006c70:	6839      	ldr	r1, [r7, #0]
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7ff ff66 	bl	8006b44 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8006c78:	20ff      	movs	r0, #255	@ 0xff
 8006c7a:	f7ff ff4d 	bl	8006b18 <xchg_spi>
 8006c7e:	20ff      	movs	r0, #255	@ 0xff
 8006c80:	f7ff ff4a 	bl	8006b18 <xchg_spi>

	return 1;						/* Function succeeded */
 8006c84:	2301      	movs	r3, #1
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3710      	adds	r7, #16
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b084      	sub	sp, #16
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
 8006c96:	460b      	mov	r3, r1
 8006c98:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8006c9a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8006c9e:	f7ff ff81 	bl	8006ba4 <wait_ready>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d101      	bne.n	8006cac <xmit_datablock+0x1e>
 8006ca8:	2300      	movs	r3, #0
 8006caa:	e01e      	b.n	8006cea <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8006cac:	78fb      	ldrb	r3, [r7, #3]
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7ff ff32 	bl	8006b18 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8006cb4:	78fb      	ldrb	r3, [r7, #3]
 8006cb6:	2bfd      	cmp	r3, #253	@ 0xfd
 8006cb8:	d016      	beq.n	8006ce8 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8006cba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7ff ff5c 	bl	8006b7c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8006cc4:	20ff      	movs	r0, #255	@ 0xff
 8006cc6:	f7ff ff27 	bl	8006b18 <xchg_spi>
 8006cca:	20ff      	movs	r0, #255	@ 0xff
 8006ccc:	f7ff ff24 	bl	8006b18 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8006cd0:	20ff      	movs	r0, #255	@ 0xff
 8006cd2:	f7ff ff21 	bl	8006b18 <xchg_spi>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8006cda:	7bfb      	ldrb	r3, [r7, #15]
 8006cdc:	f003 031f 	and.w	r3, r3, #31
 8006ce0:	2b05      	cmp	r3, #5
 8006ce2:	d001      	beq.n	8006ce8 <xmit_datablock+0x5a>
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	e000      	b.n	8006cea <xmit_datablock+0x5c>
	}
	return 1;
 8006ce8:	2301      	movs	r3, #1
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b084      	sub	sp, #16
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	6039      	str	r1, [r7, #0]
 8006cfc:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8006cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	da0e      	bge.n	8006d24 <send_cmd+0x32>
		cmd &= 0x7F;
 8006d06:	79fb      	ldrb	r3, [r7, #7]
 8006d08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d0c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8006d0e:	2100      	movs	r1, #0
 8006d10:	2037      	movs	r0, #55	@ 0x37
 8006d12:	f7ff ffee 	bl	8006cf2 <send_cmd>
 8006d16:	4603      	mov	r3, r0
 8006d18:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8006d1a:	7bbb      	ldrb	r3, [r7, #14]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d901      	bls.n	8006d24 <send_cmd+0x32>
 8006d20:	7bbb      	ldrb	r3, [r7, #14]
 8006d22:	e051      	b.n	8006dc8 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8006d24:	79fb      	ldrb	r3, [r7, #7]
 8006d26:	2b0c      	cmp	r3, #12
 8006d28:	d008      	beq.n	8006d3c <send_cmd+0x4a>
		despiselect();
 8006d2a:	f7ff ff5f 	bl	8006bec <despiselect>
		if (!spiselect()) return 0xFF;
 8006d2e:	f7ff ff6b 	bl	8006c08 <spiselect>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d101      	bne.n	8006d3c <send_cmd+0x4a>
 8006d38:	23ff      	movs	r3, #255	@ 0xff
 8006d3a:	e045      	b.n	8006dc8 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8006d3c:	79fb      	ldrb	r3, [r7, #7]
 8006d3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7ff fee7 	bl	8006b18 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	0e1b      	lsrs	r3, r3, #24
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	4618      	mov	r0, r3
 8006d52:	f7ff fee1 	bl	8006b18 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	0c1b      	lsrs	r3, r3, #16
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7ff fedb 	bl	8006b18 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	0a1b      	lsrs	r3, r3, #8
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7ff fed5 	bl	8006b18 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7ff fed0 	bl	8006b18 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8006d78:	2301      	movs	r3, #1
 8006d7a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8006d7c:	79fb      	ldrb	r3, [r7, #7]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d101      	bne.n	8006d86 <send_cmd+0x94>
 8006d82:	2395      	movs	r3, #149	@ 0x95
 8006d84:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8006d86:	79fb      	ldrb	r3, [r7, #7]
 8006d88:	2b08      	cmp	r3, #8
 8006d8a:	d101      	bne.n	8006d90 <send_cmd+0x9e>
 8006d8c:	2387      	movs	r3, #135	@ 0x87
 8006d8e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8006d90:	7bfb      	ldrb	r3, [r7, #15]
 8006d92:	4618      	mov	r0, r3
 8006d94:	f7ff fec0 	bl	8006b18 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8006d98:	79fb      	ldrb	r3, [r7, #7]
 8006d9a:	2b0c      	cmp	r3, #12
 8006d9c:	d102      	bne.n	8006da4 <send_cmd+0xb2>
 8006d9e:	20ff      	movs	r0, #255	@ 0xff
 8006da0:	f7ff feba 	bl	8006b18 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8006da4:	230a      	movs	r3, #10
 8006da6:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8006da8:	20ff      	movs	r0, #255	@ 0xff
 8006daa:	f7ff feb5 	bl	8006b18 <xchg_spi>
 8006dae:	4603      	mov	r3, r0
 8006db0:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8006db2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	da05      	bge.n	8006dc6 <send_cmd+0xd4>
 8006dba:	7bfb      	ldrb	r3, [r7, #15]
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	73fb      	strb	r3, [r7, #15]
 8006dc0:	7bfb      	ldrb	r3, [r7, #15]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1f0      	bne.n	8006da8 <send_cmd+0xb6>

	return res;							/* Return received response */
 8006dc6:	7bbb      	ldrb	r3, [r7, #14]
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3710      	adds	r7, #16
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006dd0:	b590      	push	{r4, r7, lr}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8006dda:	79fb      	ldrb	r3, [r7, #7]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d001      	beq.n	8006de4 <USER_SPI_initialize+0x14>
 8006de0:	2301      	movs	r3, #1
 8006de2:	e0d6      	b.n	8006f92 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8006de4:	4b6d      	ldr	r3, [pc, #436]	@ (8006f9c <USER_SPI_initialize+0x1cc>)
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	f003 0302 	and.w	r3, r3, #2
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d003      	beq.n	8006dfa <USER_SPI_initialize+0x2a>
 8006df2:	4b6a      	ldr	r3, [pc, #424]	@ (8006f9c <USER_SPI_initialize+0x1cc>)
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	e0cb      	b.n	8006f92 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8006dfa:	4b69      	ldr	r3, [pc, #420]	@ (8006fa0 <USER_SPI_initialize+0x1d0>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8006e04:	4b66      	ldr	r3, [pc, #408]	@ (8006fa0 <USER_SPI_initialize+0x1d0>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8006e0c:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8006e0e:	230a      	movs	r3, #10
 8006e10:	73fb      	strb	r3, [r7, #15]
 8006e12:	e005      	b.n	8006e20 <USER_SPI_initialize+0x50>
 8006e14:	20ff      	movs	r0, #255	@ 0xff
 8006e16:	f7ff fe7f 	bl	8006b18 <xchg_spi>
 8006e1a:	7bfb      	ldrb	r3, [r7, #15]
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	73fb      	strb	r3, [r7, #15]
 8006e20:	7bfb      	ldrb	r3, [r7, #15]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1f6      	bne.n	8006e14 <USER_SPI_initialize+0x44>

	ty = 0;
 8006e26:	2300      	movs	r3, #0
 8006e28:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	2000      	movs	r0, #0
 8006e2e:	f7ff ff60 	bl	8006cf2 <send_cmd>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	f040 808b 	bne.w	8006f50 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8006e3a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006e3e:	f7ff fe41 	bl	8006ac4 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8006e42:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8006e46:	2008      	movs	r0, #8
 8006e48:	f7ff ff53 	bl	8006cf2 <send_cmd>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d151      	bne.n	8006ef6 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8006e52:	2300      	movs	r3, #0
 8006e54:	73fb      	strb	r3, [r7, #15]
 8006e56:	e00d      	b.n	8006e74 <USER_SPI_initialize+0xa4>
 8006e58:	7bfc      	ldrb	r4, [r7, #15]
 8006e5a:	20ff      	movs	r0, #255	@ 0xff
 8006e5c:	f7ff fe5c 	bl	8006b18 <xchg_spi>
 8006e60:	4603      	mov	r3, r0
 8006e62:	461a      	mov	r2, r3
 8006e64:	f104 0310 	add.w	r3, r4, #16
 8006e68:	443b      	add	r3, r7
 8006e6a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006e6e:	7bfb      	ldrb	r3, [r7, #15]
 8006e70:	3301      	adds	r3, #1
 8006e72:	73fb      	strb	r3, [r7, #15]
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
 8006e76:	2b03      	cmp	r3, #3
 8006e78:	d9ee      	bls.n	8006e58 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8006e7a:	7abb      	ldrb	r3, [r7, #10]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d167      	bne.n	8006f50 <USER_SPI_initialize+0x180>
 8006e80:	7afb      	ldrb	r3, [r7, #11]
 8006e82:	2baa      	cmp	r3, #170	@ 0xaa
 8006e84:	d164      	bne.n	8006f50 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8006e86:	bf00      	nop
 8006e88:	f7ff fe30 	bl	8006aec <SPI_Timer_Status>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d007      	beq.n	8006ea2 <USER_SPI_initialize+0xd2>
 8006e92:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8006e96:	20a9      	movs	r0, #169	@ 0xa9
 8006e98:	f7ff ff2b 	bl	8006cf2 <send_cmd>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1f2      	bne.n	8006e88 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8006ea2:	f7ff fe23 	bl	8006aec <SPI_Timer_Status>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d051      	beq.n	8006f50 <USER_SPI_initialize+0x180>
 8006eac:	2100      	movs	r1, #0
 8006eae:	203a      	movs	r0, #58	@ 0x3a
 8006eb0:	f7ff ff1f 	bl	8006cf2 <send_cmd>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d14a      	bne.n	8006f50 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8006eba:	2300      	movs	r3, #0
 8006ebc:	73fb      	strb	r3, [r7, #15]
 8006ebe:	e00d      	b.n	8006edc <USER_SPI_initialize+0x10c>
 8006ec0:	7bfc      	ldrb	r4, [r7, #15]
 8006ec2:	20ff      	movs	r0, #255	@ 0xff
 8006ec4:	f7ff fe28 	bl	8006b18 <xchg_spi>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	461a      	mov	r2, r3
 8006ecc:	f104 0310 	add.w	r3, r4, #16
 8006ed0:	443b      	add	r3, r7
 8006ed2:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006ed6:	7bfb      	ldrb	r3, [r7, #15]
 8006ed8:	3301      	adds	r3, #1
 8006eda:	73fb      	strb	r3, [r7, #15]
 8006edc:	7bfb      	ldrb	r3, [r7, #15]
 8006ede:	2b03      	cmp	r3, #3
 8006ee0:	d9ee      	bls.n	8006ec0 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8006ee2:	7a3b      	ldrb	r3, [r7, #8]
 8006ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d001      	beq.n	8006ef0 <USER_SPI_initialize+0x120>
 8006eec:	230c      	movs	r3, #12
 8006eee:	e000      	b.n	8006ef2 <USER_SPI_initialize+0x122>
 8006ef0:	2304      	movs	r3, #4
 8006ef2:	737b      	strb	r3, [r7, #13]
 8006ef4:	e02c      	b.n	8006f50 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	20a9      	movs	r0, #169	@ 0xa9
 8006efa:	f7ff fefa 	bl	8006cf2 <send_cmd>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d804      	bhi.n	8006f0e <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8006f04:	2302      	movs	r3, #2
 8006f06:	737b      	strb	r3, [r7, #13]
 8006f08:	23a9      	movs	r3, #169	@ 0xa9
 8006f0a:	73bb      	strb	r3, [r7, #14]
 8006f0c:	e003      	b.n	8006f16 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8006f0e:	2301      	movs	r3, #1
 8006f10:	737b      	strb	r3, [r7, #13]
 8006f12:	2301      	movs	r3, #1
 8006f14:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8006f16:	bf00      	nop
 8006f18:	f7ff fde8 	bl	8006aec <SPI_Timer_Status>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d007      	beq.n	8006f32 <USER_SPI_initialize+0x162>
 8006f22:	7bbb      	ldrb	r3, [r7, #14]
 8006f24:	2100      	movs	r1, #0
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7ff fee3 	bl	8006cf2 <send_cmd>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1f2      	bne.n	8006f18 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8006f32:	f7ff fddb 	bl	8006aec <SPI_Timer_Status>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d007      	beq.n	8006f4c <USER_SPI_initialize+0x17c>
 8006f3c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006f40:	2010      	movs	r0, #16
 8006f42:	f7ff fed6 	bl	8006cf2 <send_cmd>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d001      	beq.n	8006f50 <USER_SPI_initialize+0x180>
				ty = 0;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8006f50:	4a14      	ldr	r2, [pc, #80]	@ (8006fa4 <USER_SPI_initialize+0x1d4>)
 8006f52:	7b7b      	ldrb	r3, [r7, #13]
 8006f54:	7013      	strb	r3, [r2, #0]
	despiselect();
 8006f56:	f7ff fe49 	bl	8006bec <despiselect>

	if (ty) {			/* OK */
 8006f5a:	7b7b      	ldrb	r3, [r7, #13]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d012      	beq.n	8006f86 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8006f60:	4b0f      	ldr	r3, [pc, #60]	@ (8006fa0 <USER_SPI_initialize+0x1d0>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8006f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006fa0 <USER_SPI_initialize+0x1d0>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f042 0210 	orr.w	r2, r2, #16
 8006f72:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8006f74:	4b09      	ldr	r3, [pc, #36]	@ (8006f9c <USER_SPI_initialize+0x1cc>)
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	f023 0301 	bic.w	r3, r3, #1
 8006f7e:	b2da      	uxtb	r2, r3
 8006f80:	4b06      	ldr	r3, [pc, #24]	@ (8006f9c <USER_SPI_initialize+0x1cc>)
 8006f82:	701a      	strb	r2, [r3, #0]
 8006f84:	e002      	b.n	8006f8c <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8006f86:	4b05      	ldr	r3, [pc, #20]	@ (8006f9c <USER_SPI_initialize+0x1cc>)
 8006f88:	2201      	movs	r2, #1
 8006f8a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8006f8c:	4b03      	ldr	r3, [pc, #12]	@ (8006f9c <USER_SPI_initialize+0x1cc>)
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	b2db      	uxtb	r3, r3
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3714      	adds	r7, #20
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd90      	pop	{r4, r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	20000020 	.word	0x20000020
 8006fa0:	200002d0 	.word	0x200002d0
 8006fa4:	20000380 	.word	0x20000380

08006fa8 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	4603      	mov	r3, r0
 8006fb0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8006fb2:	79fb      	ldrb	r3, [r7, #7]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d001      	beq.n	8006fbc <USER_SPI_status+0x14>
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e002      	b.n	8006fc2 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8006fbc:	4b04      	ldr	r3, [pc, #16]	@ (8006fd0 <USER_SPI_status+0x28>)
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	b2db      	uxtb	r3, r3
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	370c      	adds	r7, #12
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	20000020 	.word	0x20000020

08006fd4 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60b9      	str	r1, [r7, #8]
 8006fdc:	607a      	str	r2, [r7, #4]
 8006fde:	603b      	str	r3, [r7, #0]
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006fe4:	7bfb      	ldrb	r3, [r7, #15]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d102      	bne.n	8006ff0 <USER_SPI_read+0x1c>
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d101      	bne.n	8006ff4 <USER_SPI_read+0x20>
 8006ff0:	2304      	movs	r3, #4
 8006ff2:	e04d      	b.n	8007090 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006ff4:	4b28      	ldr	r3, [pc, #160]	@ (8007098 <USER_SPI_read+0xc4>)
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	f003 0301 	and.w	r3, r3, #1
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d001      	beq.n	8007006 <USER_SPI_read+0x32>
 8007002:	2303      	movs	r3, #3
 8007004:	e044      	b.n	8007090 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8007006:	4b25      	ldr	r3, [pc, #148]	@ (800709c <USER_SPI_read+0xc8>)
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	f003 0308 	and.w	r3, r3, #8
 800700e:	2b00      	cmp	r3, #0
 8007010:	d102      	bne.n	8007018 <USER_SPI_read+0x44>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	025b      	lsls	r3, r3, #9
 8007016:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	2b01      	cmp	r3, #1
 800701c:	d111      	bne.n	8007042 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800701e:	6879      	ldr	r1, [r7, #4]
 8007020:	2011      	movs	r0, #17
 8007022:	f7ff fe66 	bl	8006cf2 <send_cmd>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d129      	bne.n	8007080 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800702c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007030:	68b8      	ldr	r0, [r7, #8]
 8007032:	f7ff fe03 	bl	8006c3c <rcvr_datablock>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d021      	beq.n	8007080 <USER_SPI_read+0xac>
			count = 0;
 800703c:	2300      	movs	r3, #0
 800703e:	603b      	str	r3, [r7, #0]
 8007040:	e01e      	b.n	8007080 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8007042:	6879      	ldr	r1, [r7, #4]
 8007044:	2012      	movs	r0, #18
 8007046:	f7ff fe54 	bl	8006cf2 <send_cmd>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d117      	bne.n	8007080 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8007050:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007054:	68b8      	ldr	r0, [r7, #8]
 8007056:	f7ff fdf1 	bl	8006c3c <rcvr_datablock>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00a      	beq.n	8007076 <USER_SPI_read+0xa2>
				buff += 512;
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8007066:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	3b01      	subs	r3, #1
 800706c:	603b      	str	r3, [r7, #0]
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d1ed      	bne.n	8007050 <USER_SPI_read+0x7c>
 8007074:	e000      	b.n	8007078 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8007076:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8007078:	2100      	movs	r1, #0
 800707a:	200c      	movs	r0, #12
 800707c:	f7ff fe39 	bl	8006cf2 <send_cmd>
		}
	}
	despiselect();
 8007080:	f7ff fdb4 	bl	8006bec <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	bf14      	ite	ne
 800708a:	2301      	movne	r3, #1
 800708c:	2300      	moveq	r3, #0
 800708e:	b2db      	uxtb	r3, r3
}
 8007090:	4618      	mov	r0, r3
 8007092:	3710      	adds	r7, #16
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	20000020 	.word	0x20000020
 800709c:	20000380 	.word	0x20000380

080070a0 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60b9      	str	r1, [r7, #8]
 80070a8:	607a      	str	r2, [r7, #4]
 80070aa:	603b      	str	r3, [r7, #0]
 80070ac:	4603      	mov	r3, r0
 80070ae:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80070b0:	7bfb      	ldrb	r3, [r7, #15]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d102      	bne.n	80070bc <USER_SPI_write+0x1c>
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d101      	bne.n	80070c0 <USER_SPI_write+0x20>
 80070bc:	2304      	movs	r3, #4
 80070be:	e063      	b.n	8007188 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80070c0:	4b33      	ldr	r3, [pc, #204]	@ (8007190 <USER_SPI_write+0xf0>)
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	f003 0301 	and.w	r3, r3, #1
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d001      	beq.n	80070d2 <USER_SPI_write+0x32>
 80070ce:	2303      	movs	r3, #3
 80070d0:	e05a      	b.n	8007188 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80070d2:	4b2f      	ldr	r3, [pc, #188]	@ (8007190 <USER_SPI_write+0xf0>)
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	f003 0304 	and.w	r3, r3, #4
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d001      	beq.n	80070e4 <USER_SPI_write+0x44>
 80070e0:	2302      	movs	r3, #2
 80070e2:	e051      	b.n	8007188 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80070e4:	4b2b      	ldr	r3, [pc, #172]	@ (8007194 <USER_SPI_write+0xf4>)
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	f003 0308 	and.w	r3, r3, #8
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d102      	bne.n	80070f6 <USER_SPI_write+0x56>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	025b      	lsls	r3, r3, #9
 80070f4:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d110      	bne.n	800711e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80070fc:	6879      	ldr	r1, [r7, #4]
 80070fe:	2018      	movs	r0, #24
 8007100:	f7ff fdf7 	bl	8006cf2 <send_cmd>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d136      	bne.n	8007178 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800710a:	21fe      	movs	r1, #254	@ 0xfe
 800710c:	68b8      	ldr	r0, [r7, #8]
 800710e:	f7ff fdbe 	bl	8006c8e <xmit_datablock>
 8007112:	4603      	mov	r3, r0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d02f      	beq.n	8007178 <USER_SPI_write+0xd8>
			count = 0;
 8007118:	2300      	movs	r3, #0
 800711a:	603b      	str	r3, [r7, #0]
 800711c:	e02c      	b.n	8007178 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800711e:	4b1d      	ldr	r3, [pc, #116]	@ (8007194 <USER_SPI_write+0xf4>)
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	f003 0306 	and.w	r3, r3, #6
 8007126:	2b00      	cmp	r3, #0
 8007128:	d003      	beq.n	8007132 <USER_SPI_write+0x92>
 800712a:	6839      	ldr	r1, [r7, #0]
 800712c:	2097      	movs	r0, #151	@ 0x97
 800712e:	f7ff fde0 	bl	8006cf2 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8007132:	6879      	ldr	r1, [r7, #4]
 8007134:	2019      	movs	r0, #25
 8007136:	f7ff fddc 	bl	8006cf2 <send_cmd>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d11b      	bne.n	8007178 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8007140:	21fc      	movs	r1, #252	@ 0xfc
 8007142:	68b8      	ldr	r0, [r7, #8]
 8007144:	f7ff fda3 	bl	8006c8e <xmit_datablock>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d00a      	beq.n	8007164 <USER_SPI_write+0xc4>
				buff += 512;
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8007154:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	3b01      	subs	r3, #1
 800715a:	603b      	str	r3, [r7, #0]
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1ee      	bne.n	8007140 <USER_SPI_write+0xa0>
 8007162:	e000      	b.n	8007166 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8007164:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8007166:	21fd      	movs	r1, #253	@ 0xfd
 8007168:	2000      	movs	r0, #0
 800716a:	f7ff fd90 	bl	8006c8e <xmit_datablock>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d101      	bne.n	8007178 <USER_SPI_write+0xd8>
 8007174:	2301      	movs	r3, #1
 8007176:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8007178:	f7ff fd38 	bl	8006bec <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	bf14      	ite	ne
 8007182:	2301      	movne	r3, #1
 8007184:	2300      	moveq	r3, #0
 8007186:	b2db      	uxtb	r3, r3
}
 8007188:	4618      	mov	r0, r3
 800718a:	3710      	adds	r7, #16
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}
 8007190:	20000020 	.word	0x20000020
 8007194:	20000380 	.word	0x20000380

08007198 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b08c      	sub	sp, #48	@ 0x30
 800719c:	af00      	add	r7, sp, #0
 800719e:	4603      	mov	r3, r0
 80071a0:	603a      	str	r2, [r7, #0]
 80071a2:	71fb      	strb	r3, [r7, #7]
 80071a4:	460b      	mov	r3, r1
 80071a6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80071a8:	79fb      	ldrb	r3, [r7, #7]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d001      	beq.n	80071b2 <USER_SPI_ioctl+0x1a>
 80071ae:	2304      	movs	r3, #4
 80071b0:	e15a      	b.n	8007468 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80071b2:	4baf      	ldr	r3, [pc, #700]	@ (8007470 <USER_SPI_ioctl+0x2d8>)
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	f003 0301 	and.w	r3, r3, #1
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d001      	beq.n	80071c4 <USER_SPI_ioctl+0x2c>
 80071c0:	2303      	movs	r3, #3
 80071c2:	e151      	b.n	8007468 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 80071ca:	79bb      	ldrb	r3, [r7, #6]
 80071cc:	2b04      	cmp	r3, #4
 80071ce:	f200 8136 	bhi.w	800743e <USER_SPI_ioctl+0x2a6>
 80071d2:	a201      	add	r2, pc, #4	@ (adr r2, 80071d8 <USER_SPI_ioctl+0x40>)
 80071d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d8:	080071ed 	.word	0x080071ed
 80071dc:	08007201 	.word	0x08007201
 80071e0:	0800743f 	.word	0x0800743f
 80071e4:	080072ad 	.word	0x080072ad
 80071e8:	080073a3 	.word	0x080073a3
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80071ec:	f7ff fd0c 	bl	8006c08 <spiselect>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f000 8127 	beq.w	8007446 <USER_SPI_ioctl+0x2ae>
 80071f8:	2300      	movs	r3, #0
 80071fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80071fe:	e122      	b.n	8007446 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8007200:	2100      	movs	r1, #0
 8007202:	2009      	movs	r0, #9
 8007204:	f7ff fd75 	bl	8006cf2 <send_cmd>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	f040 811d 	bne.w	800744a <USER_SPI_ioctl+0x2b2>
 8007210:	f107 030c 	add.w	r3, r7, #12
 8007214:	2110      	movs	r1, #16
 8007216:	4618      	mov	r0, r3
 8007218:	f7ff fd10 	bl	8006c3c <rcvr_datablock>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	f000 8113 	beq.w	800744a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8007224:	7b3b      	ldrb	r3, [r7, #12]
 8007226:	099b      	lsrs	r3, r3, #6
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b01      	cmp	r3, #1
 800722c:	d111      	bne.n	8007252 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800722e:	7d7b      	ldrb	r3, [r7, #21]
 8007230:	461a      	mov	r2, r3
 8007232:	7d3b      	ldrb	r3, [r7, #20]
 8007234:	021b      	lsls	r3, r3, #8
 8007236:	4413      	add	r3, r2
 8007238:	461a      	mov	r2, r3
 800723a:	7cfb      	ldrb	r3, [r7, #19]
 800723c:	041b      	lsls	r3, r3, #16
 800723e:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8007242:	4413      	add	r3, r2
 8007244:	3301      	adds	r3, #1
 8007246:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	029a      	lsls	r2, r3, #10
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	601a      	str	r2, [r3, #0]
 8007250:	e028      	b.n	80072a4 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8007252:	7c7b      	ldrb	r3, [r7, #17]
 8007254:	f003 030f 	and.w	r3, r3, #15
 8007258:	b2da      	uxtb	r2, r3
 800725a:	7dbb      	ldrb	r3, [r7, #22]
 800725c:	09db      	lsrs	r3, r3, #7
 800725e:	b2db      	uxtb	r3, r3
 8007260:	4413      	add	r3, r2
 8007262:	b2da      	uxtb	r2, r3
 8007264:	7d7b      	ldrb	r3, [r7, #21]
 8007266:	005b      	lsls	r3, r3, #1
 8007268:	b2db      	uxtb	r3, r3
 800726a:	f003 0306 	and.w	r3, r3, #6
 800726e:	b2db      	uxtb	r3, r3
 8007270:	4413      	add	r3, r2
 8007272:	b2db      	uxtb	r3, r3
 8007274:	3302      	adds	r3, #2
 8007276:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800727a:	7d3b      	ldrb	r3, [r7, #20]
 800727c:	099b      	lsrs	r3, r3, #6
 800727e:	b2db      	uxtb	r3, r3
 8007280:	461a      	mov	r2, r3
 8007282:	7cfb      	ldrb	r3, [r7, #19]
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	441a      	add	r2, r3
 8007288:	7cbb      	ldrb	r3, [r7, #18]
 800728a:	029b      	lsls	r3, r3, #10
 800728c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007290:	4413      	add	r3, r2
 8007292:	3301      	adds	r3, #1
 8007294:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8007296:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800729a:	3b09      	subs	r3, #9
 800729c:	69fa      	ldr	r2, [r7, #28]
 800729e:	409a      	lsls	r2, r3
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80072a4:	2300      	movs	r3, #0
 80072a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80072aa:	e0ce      	b.n	800744a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80072ac:	4b71      	ldr	r3, [pc, #452]	@ (8007474 <USER_SPI_ioctl+0x2dc>)
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	f003 0304 	and.w	r3, r3, #4
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d031      	beq.n	800731c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80072b8:	2100      	movs	r1, #0
 80072ba:	208d      	movs	r0, #141	@ 0x8d
 80072bc:	f7ff fd19 	bl	8006cf2 <send_cmd>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	f040 80c3 	bne.w	800744e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80072c8:	20ff      	movs	r0, #255	@ 0xff
 80072ca:	f7ff fc25 	bl	8006b18 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80072ce:	f107 030c 	add.w	r3, r7, #12
 80072d2:	2110      	movs	r1, #16
 80072d4:	4618      	mov	r0, r3
 80072d6:	f7ff fcb1 	bl	8006c3c <rcvr_datablock>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	f000 80b6 	beq.w	800744e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80072e2:	2330      	movs	r3, #48	@ 0x30
 80072e4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80072e8:	e007      	b.n	80072fa <USER_SPI_ioctl+0x162>
 80072ea:	20ff      	movs	r0, #255	@ 0xff
 80072ec:	f7ff fc14 	bl	8006b18 <xchg_spi>
 80072f0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80072f4:	3b01      	subs	r3, #1
 80072f6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80072fa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d1f3      	bne.n	80072ea <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8007302:	7dbb      	ldrb	r3, [r7, #22]
 8007304:	091b      	lsrs	r3, r3, #4
 8007306:	b2db      	uxtb	r3, r3
 8007308:	461a      	mov	r2, r3
 800730a:	2310      	movs	r3, #16
 800730c:	fa03 f202 	lsl.w	r2, r3, r2
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8007314:	2300      	movs	r3, #0
 8007316:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800731a:	e098      	b.n	800744e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800731c:	2100      	movs	r1, #0
 800731e:	2009      	movs	r0, #9
 8007320:	f7ff fce7 	bl	8006cf2 <send_cmd>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	f040 8091 	bne.w	800744e <USER_SPI_ioctl+0x2b6>
 800732c:	f107 030c 	add.w	r3, r7, #12
 8007330:	2110      	movs	r1, #16
 8007332:	4618      	mov	r0, r3
 8007334:	f7ff fc82 	bl	8006c3c <rcvr_datablock>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	f000 8087 	beq.w	800744e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8007340:	4b4c      	ldr	r3, [pc, #304]	@ (8007474 <USER_SPI_ioctl+0x2dc>)
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	f003 0302 	and.w	r3, r3, #2
 8007348:	2b00      	cmp	r3, #0
 800734a:	d012      	beq.n	8007372 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800734c:	7dbb      	ldrb	r3, [r7, #22]
 800734e:	005b      	lsls	r3, r3, #1
 8007350:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8007354:	7dfa      	ldrb	r2, [r7, #23]
 8007356:	09d2      	lsrs	r2, r2, #7
 8007358:	b2d2      	uxtb	r2, r2
 800735a:	4413      	add	r3, r2
 800735c:	1c5a      	adds	r2, r3, #1
 800735e:	7e7b      	ldrb	r3, [r7, #25]
 8007360:	099b      	lsrs	r3, r3, #6
 8007362:	b2db      	uxtb	r3, r3
 8007364:	3b01      	subs	r3, #1
 8007366:	fa02 f303 	lsl.w	r3, r2, r3
 800736a:	461a      	mov	r2, r3
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	601a      	str	r2, [r3, #0]
 8007370:	e013      	b.n	800739a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8007372:	7dbb      	ldrb	r3, [r7, #22]
 8007374:	109b      	asrs	r3, r3, #2
 8007376:	b29b      	uxth	r3, r3
 8007378:	f003 031f 	and.w	r3, r3, #31
 800737c:	3301      	adds	r3, #1
 800737e:	7dfa      	ldrb	r2, [r7, #23]
 8007380:	00d2      	lsls	r2, r2, #3
 8007382:	f002 0218 	and.w	r2, r2, #24
 8007386:	7df9      	ldrb	r1, [r7, #23]
 8007388:	0949      	lsrs	r1, r1, #5
 800738a:	b2c9      	uxtb	r1, r1
 800738c:	440a      	add	r2, r1
 800738e:	3201      	adds	r2, #1
 8007390:	fb02 f303 	mul.w	r3, r2, r3
 8007394:	461a      	mov	r2, r3
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800739a:	2300      	movs	r3, #0
 800739c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80073a0:	e055      	b.n	800744e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80073a2:	4b34      	ldr	r3, [pc, #208]	@ (8007474 <USER_SPI_ioctl+0x2dc>)
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	f003 0306 	and.w	r3, r3, #6
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d051      	beq.n	8007452 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80073ae:	f107 020c 	add.w	r2, r7, #12
 80073b2:	79fb      	ldrb	r3, [r7, #7]
 80073b4:	210b      	movs	r1, #11
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7ff feee 	bl	8007198 <USER_SPI_ioctl>
 80073bc:	4603      	mov	r3, r0
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d149      	bne.n	8007456 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80073c2:	7b3b      	ldrb	r3, [r7, #12]
 80073c4:	099b      	lsrs	r3, r3, #6
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d104      	bne.n	80073d6 <USER_SPI_ioctl+0x23e>
 80073cc:	7dbb      	ldrb	r3, [r7, #22]
 80073ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d041      	beq.n	800745a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	623b      	str	r3, [r7, #32]
 80073da:	6a3b      	ldr	r3, [r7, #32]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073e0:	6a3b      	ldr	r3, [r7, #32]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 80073e6:	4b23      	ldr	r3, [pc, #140]	@ (8007474 <USER_SPI_ioctl+0x2dc>)
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	f003 0308 	and.w	r3, r3, #8
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d105      	bne.n	80073fe <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80073f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f4:	025b      	lsls	r3, r3, #9
 80073f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073fa:	025b      	lsls	r3, r3, #9
 80073fc:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80073fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007400:	2020      	movs	r0, #32
 8007402:	f7ff fc76 	bl	8006cf2 <send_cmd>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d128      	bne.n	800745e <USER_SPI_ioctl+0x2c6>
 800740c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800740e:	2021      	movs	r0, #33	@ 0x21
 8007410:	f7ff fc6f 	bl	8006cf2 <send_cmd>
 8007414:	4603      	mov	r3, r0
 8007416:	2b00      	cmp	r3, #0
 8007418:	d121      	bne.n	800745e <USER_SPI_ioctl+0x2c6>
 800741a:	2100      	movs	r1, #0
 800741c:	2026      	movs	r0, #38	@ 0x26
 800741e:	f7ff fc68 	bl	8006cf2 <send_cmd>
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d11a      	bne.n	800745e <USER_SPI_ioctl+0x2c6>
 8007428:	f247 5030 	movw	r0, #30000	@ 0x7530
 800742c:	f7ff fbba 	bl	8006ba4 <wait_ready>
 8007430:	4603      	mov	r3, r0
 8007432:	2b00      	cmp	r3, #0
 8007434:	d013      	beq.n	800745e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8007436:	2300      	movs	r3, #0
 8007438:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800743c:	e00f      	b.n	800745e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800743e:	2304      	movs	r3, #4
 8007440:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007444:	e00c      	b.n	8007460 <USER_SPI_ioctl+0x2c8>
		break;
 8007446:	bf00      	nop
 8007448:	e00a      	b.n	8007460 <USER_SPI_ioctl+0x2c8>
		break;
 800744a:	bf00      	nop
 800744c:	e008      	b.n	8007460 <USER_SPI_ioctl+0x2c8>
		break;
 800744e:	bf00      	nop
 8007450:	e006      	b.n	8007460 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007452:	bf00      	nop
 8007454:	e004      	b.n	8007460 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007456:	bf00      	nop
 8007458:	e002      	b.n	8007460 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800745a:	bf00      	nop
 800745c:	e000      	b.n	8007460 <USER_SPI_ioctl+0x2c8>
		break;
 800745e:	bf00      	nop
	}

	despiselect();
 8007460:	f7ff fbc4 	bl	8006bec <despiselect>

	return res;
 8007464:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007468:	4618      	mov	r0, r3
 800746a:	3730      	adds	r7, #48	@ 0x30
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}
 8007470:	20000020 	.word	0x20000020
 8007474:	20000380 	.word	0x20000380

08007478 <ht16k33_init>:

} Ht16k33_Config;


Ht16k33_Config_t* ht16k33_init(I2C_HandleTypeDef* const hi2c, const uint8_t addrs)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	460b      	mov	r3, r1
 8007482:	70fb      	strb	r3, [r7, #3]
  Ht16k33_Config_t* pConfig = malloc(sizeof(Ht16k33_Config_t));
 8007484:	200c      	movs	r0, #12
 8007486:	f004 fb57 	bl	800bb38 <malloc>
 800748a:	4603      	mov	r3, r0
 800748c:	60fb      	str	r3, [r7, #12]
  pConfig->i2cAddrs = addrs << 1;
 800748e:	78fb      	ldrb	r3, [r7, #3]
 8007490:	005b      	lsls	r3, r3, #1
 8007492:	b2da      	uxtb	r2, r3
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	711a      	strb	r2, [r3, #4]
  pConfig->hi2c = hi2c;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	601a      	str	r2, [r3, #0]

  pConfig->hSysSetupReg.regAddrs        = SYSTEM_SETUP_REG_ADDRESS;
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	7953      	ldrb	r3, [r2, #5]
 80074a2:	2102      	movs	r1, #2
 80074a4:	f361 1307 	bfi	r3, r1, #4, #4
 80074a8:	7153      	strb	r3, [r2, #5]
  pConfig->hDisplayReg.regAddrs         = DISPLAY_SETUP_REG_ADDRESS;
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	7993      	ldrb	r3, [r2, #6]
 80074ae:	2108      	movs	r1, #8
 80074b0:	f361 1307 	bfi	r3, r1, #4, #4
 80074b4:	7193      	strb	r3, [r2, #6]
  pConfig->hDimmingSetReg.regAddrs      = DIMMING_SET_REG_ADDRESS;
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	79d3      	ldrb	r3, [r2, #7]
 80074ba:	210e      	movs	r1, #14
 80074bc:	f361 1307 	bfi	r3, r1, #4, #4
 80074c0:	71d3      	strb	r3, [r2, #7]
  pConfig->hDisplayAddrsPtrReg.regAddrs = DISPLAY_DATA_REG_ADDRESS;
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	7a13      	ldrb	r3, [r2, #8]
 80074c6:	f36f 1307 	bfc	r3, #4, #4
 80074ca:	7213      	strb	r3, [r2, #8]
  return pConfig;
 80074cc:	68fb      	ldr	r3, [r7, #12]
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <ht16k33_setSystemSetup>:

Ht16k33_Status_t ht16k33_setSystemSetup(Ht16k33_Config_t* const pConfig, const Ht16k33_DisplayStatus_e displayStatus)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b086      	sub	sp, #24
 80074da:	af02      	add	r7, sp, #8
 80074dc:	6078      	str	r0, [r7, #4]
 80074de:	460b      	mov	r3, r1
 80074e0:	70fb      	strb	r3, [r7, #3]
  pConfig->hSysSetupReg.s = displayStatus;
 80074e2:	78fb      	ldrb	r3, [r7, #3]
 80074e4:	f003 0301 	and.w	r3, r3, #1
 80074e8:	b2d9      	uxtb	r1, r3
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	7953      	ldrb	r3, [r2, #5]
 80074ee:	f361 0300 	bfi	r3, r1, #0, #1
 80074f2:	7153      	strb	r3, [r2, #5]

  uint8_t sysSetupReg = 0;
 80074f4:	2300      	movs	r3, #0
 80074f6:	73fb      	strb	r3, [r7, #15]
  sysSetupReg |= (pConfig->hSysSetupReg.s & 0x01) << 0;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	795b      	ldrb	r3, [r3, #5]
 80074fc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007500:	b2db      	uxtb	r3, r3
 8007502:	b25b      	sxtb	r3, r3
 8007504:	f003 0301 	and.w	r3, r3, #1
 8007508:	b25a      	sxtb	r2, r3
 800750a:	7bfb      	ldrb	r3, [r7, #15]
 800750c:	b25b      	sxtb	r3, r3
 800750e:	4313      	orrs	r3, r2
 8007510:	b25b      	sxtb	r3, r3
 8007512:	b2db      	uxtb	r3, r3
 8007514:	73fb      	strb	r3, [r7, #15]
  sysSetupReg |= (pConfig->hSysSetupReg.regAddrs & 0x0F) << 4;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	795b      	ldrb	r3, [r3, #5]
 800751a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800751e:	b2db      	uxtb	r3, r3
 8007520:	011b      	lsls	r3, r3, #4
 8007522:	b25a      	sxtb	r2, r3
 8007524:	7bfb      	ldrb	r3, [r7, #15]
 8007526:	b25b      	sxtb	r3, r3
 8007528:	4313      	orrs	r3, r2
 800752a:	b25b      	sxtb	r3, r3
 800752c:	b2db      	uxtb	r3, r3
 800752e:	73fb      	strb	r3, [r7, #15]

  return
      HAL_I2C_Master_Transmit(pConfig->hi2c, pConfig->i2cAddrs, &sysSetupReg, sizeof(sysSetupReg),HAL_MAX_DELAY);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6818      	ldr	r0, [r3, #0]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	791b      	ldrb	r3, [r3, #4]
 8007538:	4619      	mov	r1, r3
 800753a:	f107 020f 	add.w	r2, r7, #15
 800753e:	f04f 33ff 	mov.w	r3, #4294967295
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	2301      	movs	r3, #1
 8007546:	f7fb fbf9 	bl	8002d3c <HAL_I2C_Master_Transmit>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	bf14      	ite	ne
 8007550:	2301      	movne	r3, #1
 8007552:	2300      	moveq	r3, #0
 8007554:	b2db      	uxtb	r3, r3
}
 8007556:	4618      	mov	r0, r3
 8007558:	3710      	adds	r7, #16
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}

0800755e <ht16k33_setDisplaySetup>:

Ht16k33_Status_t ht16k33_setDisplaySetup(Ht16k33_Config_t* const pConfig, const Ht16k33_DisplayStatus_e dispStatus,
    const Ht16k33_BlinkingFreq_e frequency)
{
 800755e:	b580      	push	{r7, lr}
 8007560:	b086      	sub	sp, #24
 8007562:	af02      	add	r7, sp, #8
 8007564:	6078      	str	r0, [r7, #4]
 8007566:	460b      	mov	r3, r1
 8007568:	70fb      	strb	r3, [r7, #3]
 800756a:	4613      	mov	r3, r2
 800756c:	70bb      	strb	r3, [r7, #2]
  pConfig->hDisplayReg.d = dispStatus;
 800756e:	78fb      	ldrb	r3, [r7, #3]
 8007570:	f003 0301 	and.w	r3, r3, #1
 8007574:	b2d9      	uxtb	r1, r3
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	7993      	ldrb	r3, [r2, #6]
 800757a:	f361 0300 	bfi	r3, r1, #0, #1
 800757e:	7193      	strb	r3, [r2, #6]
  pConfig->hDisplayReg.b = frequency;
 8007580:	78bb      	ldrb	r3, [r7, #2]
 8007582:	f003 0303 	and.w	r3, r3, #3
 8007586:	b2d9      	uxtb	r1, r3
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	7993      	ldrb	r3, [r2, #6]
 800758c:	f361 0342 	bfi	r3, r1, #1, #2
 8007590:	7193      	strb	r3, [r2, #6]

  uint8_t dispSetupReg = 0;
 8007592:	2300      	movs	r3, #0
 8007594:	73fb      	strb	r3, [r7, #15]

  dispSetupReg |= (pConfig->hDisplayReg.d & 0x01) << 0;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	799b      	ldrb	r3, [r3, #6]
 800759a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	b25b      	sxtb	r3, r3
 80075a2:	f003 0301 	and.w	r3, r3, #1
 80075a6:	b25a      	sxtb	r2, r3
 80075a8:	7bfb      	ldrb	r3, [r7, #15]
 80075aa:	b25b      	sxtb	r3, r3
 80075ac:	4313      	orrs	r3, r2
 80075ae:	b25b      	sxtb	r3, r3
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	73fb      	strb	r3, [r7, #15]
  dispSetupReg |= (pConfig->hDisplayReg.b & 0x03) << 1;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	799b      	ldrb	r3, [r3, #6]
 80075b8:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	005b      	lsls	r3, r3, #1
 80075c0:	b25b      	sxtb	r3, r3
 80075c2:	f003 0306 	and.w	r3, r3, #6
 80075c6:	b25a      	sxtb	r2, r3
 80075c8:	7bfb      	ldrb	r3, [r7, #15]
 80075ca:	b25b      	sxtb	r3, r3
 80075cc:	4313      	orrs	r3, r2
 80075ce:	b25b      	sxtb	r3, r3
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	73fb      	strb	r3, [r7, #15]
  dispSetupReg |= (pConfig->hDisplayReg.regAddrs & 0x0F) << 4;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	799b      	ldrb	r3, [r3, #6]
 80075d8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	011b      	lsls	r3, r3, #4
 80075e0:	b25a      	sxtb	r2, r3
 80075e2:	7bfb      	ldrb	r3, [r7, #15]
 80075e4:	b25b      	sxtb	r3, r3
 80075e6:	4313      	orrs	r3, r2
 80075e8:	b25b      	sxtb	r3, r3
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	73fb      	strb	r3, [r7, #15]

  return
      HAL_I2C_Master_Transmit(pConfig->hi2c, pConfig->i2cAddrs, &dispSetupReg, sizeof(dispSetupReg),HAL_MAX_DELAY);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6818      	ldr	r0, [r3, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	791b      	ldrb	r3, [r3, #4]
 80075f6:	4619      	mov	r1, r3
 80075f8:	f107 020f 	add.w	r2, r7, #15
 80075fc:	f04f 33ff 	mov.w	r3, #4294967295
 8007600:	9300      	str	r3, [sp, #0]
 8007602:	2301      	movs	r3, #1
 8007604:	f7fb fb9a 	bl	8002d3c <HAL_I2C_Master_Transmit>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	bf14      	ite	ne
 800760e:	2301      	movne	r3, #1
 8007610:	2300      	moveq	r3, #0
 8007612:	b2db      	uxtb	r3, r3
}
 8007614:	4618      	mov	r0, r3
 8007616:	3710      	adds	r7, #16
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <ht16k33_updateDisplayData>:
      HAL_I2C_Master_Transmit(pConfig->hi2c, pConfig->i2cAddrs, &dimmingSetReg, sizeof(dimmingSetReg),HAL_MAX_DELAY);
}

Ht16k33_Status_t ht16k33_updateDisplayData (Ht16k33_Config_t* const pConfig, const uint8_t ramAddrs,
    uint8_t* const dispDataBuffer, const uint8_t dispDataBufferSize)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b088      	sub	sp, #32
 8007620:	af02      	add	r7, sp, #8
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	607a      	str	r2, [r7, #4]
 8007626:	461a      	mov	r2, r3
 8007628:	460b      	mov	r3, r1
 800762a:	72fb      	strb	r3, [r7, #11]
 800762c:	4613      	mov	r3, r2
 800762e:	72bb      	strb	r3, [r7, #10]
  uint8_t* transmitBuffer     = malloc (dispDataBufferSize + 1);
 8007630:	7abb      	ldrb	r3, [r7, #10]
 8007632:	3301      	adds	r3, #1
 8007634:	4618      	mov	r0, r3
 8007636:	f004 fa7f 	bl	800bb38 <malloc>
 800763a:	4603      	mov	r3, r0
 800763c:	617b      	str	r3, [r7, #20]
  Ht16k33_Status_t isSuccess   = 0;
 800763e:	2300      	movs	r3, #0
 8007640:	74fb      	strb	r3, [r7, #19]
  uint8_t dispDataAddrsPtrReg = 0;
 8007642:	2300      	movs	r3, #0
 8007644:	74bb      	strb	r3, [r7, #18]

  pConfig->hDisplayAddrsPtrReg.a = ramAddrs;
 8007646:	7afb      	ldrb	r3, [r7, #11]
 8007648:	f003 030f 	and.w	r3, r3, #15
 800764c:	b2d9      	uxtb	r1, r3
 800764e:	68fa      	ldr	r2, [r7, #12]
 8007650:	7a13      	ldrb	r3, [r2, #8]
 8007652:	f361 0303 	bfi	r3, r1, #0, #4
 8007656:	7213      	strb	r3, [r2, #8]

  dispDataAddrsPtrReg |= (pConfig->hDisplayAddrsPtrReg.a & 0x0F) << 0;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	7a1b      	ldrb	r3, [r3, #8]
 800765c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007660:	b2db      	uxtb	r3, r3
 8007662:	b25b      	sxtb	r3, r3
 8007664:	f003 030f 	and.w	r3, r3, #15
 8007668:	b25a      	sxtb	r2, r3
 800766a:	7cbb      	ldrb	r3, [r7, #18]
 800766c:	b25b      	sxtb	r3, r3
 800766e:	4313      	orrs	r3, r2
 8007670:	b25b      	sxtb	r3, r3
 8007672:	b2db      	uxtb	r3, r3
 8007674:	74bb      	strb	r3, [r7, #18]
  dispDataAddrsPtrReg |= (pConfig->hDisplayAddrsPtrReg.regAddrs & 0x0F) << 4;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	7a1b      	ldrb	r3, [r3, #8]
 800767a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800767e:	b2db      	uxtb	r3, r3
 8007680:	011b      	lsls	r3, r3, #4
 8007682:	b25a      	sxtb	r2, r3
 8007684:	7cbb      	ldrb	r3, [r7, #18]
 8007686:	b25b      	sxtb	r3, r3
 8007688:	4313      	orrs	r3, r2
 800768a:	b25b      	sxtb	r3, r3
 800768c:	b2db      	uxtb	r3, r3
 800768e:	74bb      	strb	r3, [r7, #18]

  memcpy(transmitBuffer, &dispDataAddrsPtrReg, sizeof(dispDataAddrsPtrReg));
 8007690:	7cba      	ldrb	r2, [r7, #18]
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	701a      	strb	r2, [r3, #0]
  memcpy(transmitBuffer + 1, dispDataBuffer, dispDataBufferSize);
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	3301      	adds	r3, #1
 800769a:	7aba      	ldrb	r2, [r7, #10]
 800769c:	6879      	ldr	r1, [r7, #4]
 800769e:	4618      	mov	r0, r3
 80076a0:	f004 fd0b 	bl	800c0ba <memcpy>

  isSuccess = HAL_I2C_Master_Transmit(pConfig->hi2c, pConfig->i2cAddrs, transmitBuffer, (dispDataBufferSize + 1),
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6818      	ldr	r0, [r3, #0]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	791b      	ldrb	r3, [r3, #4]
 80076ac:	4619      	mov	r1, r3
 80076ae:	7abb      	ldrb	r3, [r7, #10]
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	3301      	adds	r3, #1
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	f04f 32ff 	mov.w	r2, #4294967295
 80076ba:	9200      	str	r2, [sp, #0]
 80076bc:	697a      	ldr	r2, [r7, #20]
 80076be:	f7fb fb3d 	bl	8002d3c <HAL_I2C_Master_Transmit>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	bf14      	ite	ne
 80076c8:	2301      	movne	r3, #1
 80076ca:	2300      	moveq	r3, #0
 80076cc:	74fb      	strb	r3, [r7, #19]
      HAL_MAX_DELAY);

  free(transmitBuffer);
 80076ce:	6978      	ldr	r0, [r7, #20]
 80076d0:	f004 fa3a 	bl	800bb48 <free>

  return isSuccess;
 80076d4:	7cfb      	ldrb	r3, [r7, #19]
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3718      	adds	r7, #24
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <keypad3x4w_init>:

} Keypad3x4w_Config;


Keypad3x4w_Config_t * keypad3x4w_init(const Keypad3x4w_PinConfig_t * const pPinConfig)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b084      	sub	sp, #16
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
  Keypad3x4w_Config_t * pConfig = malloc(sizeof(Keypad3x4w_Config_t));
 80076e6:	2008      	movs	r0, #8
 80076e8:	f004 fa26 	bl	800bb38 <malloc>
 80076ec:	4603      	mov	r3, r0
 80076ee:	60fb      	str	r3, [r7, #12]

  pConfig->pkeypadPinConfig = pPinConfig;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	601a      	str	r2, [r3, #0]

  return pConfig;
 80076f6:	68fb      	ldr	r3, [r7, #12]
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3710      	adds	r7, #16
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <keypad3x4w_setColumnGpio>:

Keypad3x4w_Status_t keypad3x4w_setColumnGpio(Keypad3x4w_Config_t * pConfig, keypad3x4w_ColumnScanType_e columnScanType)
{
 8007700:	b5b0      	push	{r4, r5, r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	460b      	mov	r3, r1
 800770a:	70fb      	strb	r3, [r7, #3]

  for (uint8_t columnCount = 0; columnCount < KEYPAD_COLUMN_NUMBER; columnCount++)
 800770c:	2300      	movs	r3, #0
 800770e:	73fb      	strb	r3, [r7, #15]
 8007710:	e01b      	b.n	800774a <keypad3x4w_setColumnGpio+0x4a>
  {
    HAL_GPIO_WritePin(pConfig->pkeypadPinConfig->Column_Port[columnCount],
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	7bfa      	ldrb	r2, [r7, #15]
 8007718:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
        pConfig->pkeypadPinConfig->Column_Pin[columnCount], columnScanConfig[columnScanType][columnCount]);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681a      	ldr	r2, [r3, #0]
    HAL_GPIO_WritePin(pConfig->pkeypadPinConfig->Column_Port[columnCount],
 8007720:	7bfb      	ldrb	r3, [r7, #15]
        pConfig->pkeypadPinConfig->Column_Pin[columnCount], columnScanConfig[columnScanType][columnCount]);
 8007722:	3304      	adds	r3, #4
 8007724:	005b      	lsls	r3, r3, #1
 8007726:	4413      	add	r3, r2
 8007728:	889c      	ldrh	r4, [r3, #4]
 800772a:	78fa      	ldrb	r2, [r7, #3]
 800772c:	7bf9      	ldrb	r1, [r7, #15]
 800772e:	4d0b      	ldr	r5, [pc, #44]	@ (800775c <keypad3x4w_setColumnGpio+0x5c>)
 8007730:	4613      	mov	r3, r2
 8007732:	005b      	lsls	r3, r3, #1
 8007734:	4413      	add	r3, r2
 8007736:	442b      	add	r3, r5
 8007738:	440b      	add	r3, r1
 800773a:	781b      	ldrb	r3, [r3, #0]
    HAL_GPIO_WritePin(pConfig->pkeypadPinConfig->Column_Port[columnCount],
 800773c:	461a      	mov	r2, r3
 800773e:	4621      	mov	r1, r4
 8007740:	f7fb f97a 	bl	8002a38 <HAL_GPIO_WritePin>
  for (uint8_t columnCount = 0; columnCount < KEYPAD_COLUMN_NUMBER; columnCount++)
 8007744:	7bfb      	ldrb	r3, [r7, #15]
 8007746:	3301      	adds	r3, #1
 8007748:	73fb      	strb	r3, [r7, #15]
 800774a:	7bfb      	ldrb	r3, [r7, #15]
 800774c:	2b02      	cmp	r3, #2
 800774e:	d9e0      	bls.n	8007712 <keypad3x4w_setColumnGpio+0x12>
  }
  return 0;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bdb0      	pop	{r4, r5, r7, pc}
 800775a:	bf00      	nop
 800775c:	0800cfec 	.word	0x0800cfec

08007760 <keypad3x4w_readKeypad>:


Keypad3x4w_Status_t keypad3x4w_readKeypad(Keypad3x4w_Config_t * pConfig, uint8_t* pKey)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  Keypad3x4w_Status_t isPressed = false;
 800776a:	2300      	movs	r3, #0
 800776c:	73fb      	strb	r3, [r7, #15]

  //Turn on column GPIO outputs
  keypad3x4w_setColumnGpio(pConfig, keypad3x4w_ColumnScanType_Full);
 800776e:	2100      	movs	r1, #0
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f7ff ffc5 	bl	8007700 <keypad3x4w_setColumnGpio>

  //Check if a row has been activated
  for (uint8_t rowCount = 0; rowCount < KEYPAD_ROW_NUMBER; rowCount++)
 8007776:	2300      	movs	r3, #0
 8007778:	73bb      	strb	r3, [r7, #14]
 800777a:	e050      	b.n	800781e <keypad3x4w_readKeypad+0xbe>
  {
    if (HAL_GPIO_ReadPin (pConfig->pkeypadPinConfig->Row_Port[rowCount], pConfig->pkeypadPinConfig->Row_Pin[rowCount]))
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	7bbb      	ldrb	r3, [r7, #14]
 8007782:	3304      	adds	r3, #4
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	4413      	add	r3, r2
 8007788:	6858      	ldr	r0, [r3, #4]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	7bbb      	ldrb	r3, [r7, #14]
 8007790:	3310      	adds	r3, #16
 8007792:	005b      	lsls	r3, r3, #1
 8007794:	4413      	add	r3, r2
 8007796:	889b      	ldrh	r3, [r3, #4]
 8007798:	4619      	mov	r1, r3
 800779a:	f7fb f935 	bl	8002a08 <HAL_GPIO_ReadPin>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d039      	beq.n	8007818 <keypad3x4w_readKeypad+0xb8>
    {
      //Determine Column Pressed
      for (uint8_t columnCount = 0; columnCount < KEYPAD_COLUMN_NUMBER; columnCount++)
 80077a4:	2300      	movs	r3, #0
 80077a6:	737b      	strb	r3, [r7, #13]
 80077a8:	e033      	b.n	8007812 <keypad3x4w_readKeypad+0xb2>
      {
        keypad3x4w_setColumnGpio(pConfig, keypad3x4w_ColumnScanType_Col1 + columnCount);
 80077aa:	7b7b      	ldrb	r3, [r7, #13]
 80077ac:	3301      	adds	r3, #1
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	4619      	mov	r1, r3
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f7ff ffa4 	bl	8007700 <keypad3x4w_setColumnGpio>

        for (uint8_t rowCount = 0; rowCount < KEYPAD_ROW_NUMBER; rowCount++)
 80077b8:	2300      	movs	r3, #0
 80077ba:	733b      	strb	r3, [r7, #12]
 80077bc:	e023      	b.n	8007806 <keypad3x4w_readKeypad+0xa6>
        {
          if (HAL_GPIO_ReadPin (pConfig->pkeypadPinConfig->Row_Port[rowCount], pConfig->pkeypadPinConfig->Row_Pin[rowCount]))
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	7b3b      	ldrb	r3, [r7, #12]
 80077c4:	3304      	adds	r3, #4
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	4413      	add	r3, r2
 80077ca:	6858      	ldr	r0, [r3, #4]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	7b3b      	ldrb	r3, [r7, #12]
 80077d2:	3310      	adds	r3, #16
 80077d4:	005b      	lsls	r3, r3, #1
 80077d6:	4413      	add	r3, r2
 80077d8:	889b      	ldrh	r3, [r3, #4]
 80077da:	4619      	mov	r1, r3
 80077dc:	f7fb f914 	bl	8002a08 <HAL_GPIO_ReadPin>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00c      	beq.n	8007800 <keypad3x4w_readKeypad+0xa0>
          {
            isPressed = true;
 80077e6:	2301      	movs	r3, #1
 80077e8:	73fb      	strb	r3, [r7, #15]
            *pKey = keypadNumberOrder[rowCount][columnCount];
 80077ea:	7b3a      	ldrb	r2, [r7, #12]
 80077ec:	7b79      	ldrb	r1, [r7, #13]
 80077ee:	4810      	ldr	r0, [pc, #64]	@ (8007830 <keypad3x4w_readKeypad+0xd0>)
 80077f0:	4613      	mov	r3, r2
 80077f2:	005b      	lsls	r3, r3, #1
 80077f4:	4413      	add	r3, r2
 80077f6:	4403      	add	r3, r0
 80077f8:	440b      	add	r3, r1
 80077fa:	781a      	ldrb	r2, [r3, #0]
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	701a      	strb	r2, [r3, #0]
        for (uint8_t rowCount = 0; rowCount < KEYPAD_ROW_NUMBER; rowCount++)
 8007800:	7b3b      	ldrb	r3, [r7, #12]
 8007802:	3301      	adds	r3, #1
 8007804:	733b      	strb	r3, [r7, #12]
 8007806:	7b3b      	ldrb	r3, [r7, #12]
 8007808:	2b03      	cmp	r3, #3
 800780a:	d9d8      	bls.n	80077be <keypad3x4w_readKeypad+0x5e>
      for (uint8_t columnCount = 0; columnCount < KEYPAD_COLUMN_NUMBER; columnCount++)
 800780c:	7b7b      	ldrb	r3, [r7, #13]
 800780e:	3301      	adds	r3, #1
 8007810:	737b      	strb	r3, [r7, #13]
 8007812:	7b7b      	ldrb	r3, [r7, #13]
 8007814:	2b02      	cmp	r3, #2
 8007816:	d9c8      	bls.n	80077aa <keypad3x4w_readKeypad+0x4a>
  for (uint8_t rowCount = 0; rowCount < KEYPAD_ROW_NUMBER; rowCount++)
 8007818:	7bbb      	ldrb	r3, [r7, #14]
 800781a:	3301      	adds	r3, #1
 800781c:	73bb      	strb	r3, [r7, #14]
 800781e:	7bbb      	ldrb	r3, [r7, #14]
 8007820:	2b03      	cmp	r3, #3
 8007822:	d9ab      	bls.n	800777c <keypad3x4w_readKeypad+0x1c>
        }
      }
    }
  }

  return isPressed;
 8007824:	7bfb      	ldrb	r3, [r7, #15]
 }
 8007826:	4618      	mov	r0, r3
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	0800cff8 	.word	0x0800cff8

08007834 <dateTime_display_init>:

} DateTime_Display_Config;


DateTime_Display_Config_t * dateTime_display_init(I2C_HandleTypeDef* const hi2c, const uint8_t addrs)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	460b      	mov	r3, r1
 800783e:	70fb      	strb	r3, [r7, #3]
  DateTime_Display_Config_t* pConfig = malloc(sizeof(DateTime_Display_Config_t));
 8007840:	2018      	movs	r0, #24
 8007842:	f004 f979 	bl	800bb38 <malloc>
 8007846:	4603      	mov	r3, r0
 8007848:	60fb      	str	r3, [r7, #12]
  pConfig->i2cAddrs = addrs;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	78fa      	ldrb	r2, [r7, #3]
 800784e:	711a      	strb	r2, [r3, #4]
  pConfig->hi2c = hi2c;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	601a      	str	r2, [r3, #0]
  pConfig->hDisplayDriver = ht16k33_init(hi2c, addrs);
 8007856:	78fb      	ldrb	r3, [r7, #3]
 8007858:	4619      	mov	r1, r3
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f7ff fe0c 	bl	8007478 <ht16k33_init>
 8007860:	4602      	mov	r2, r0
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	609a      	str	r2, [r3, #8]

  dateTime_clearDisplay(pConfig);
 8007866:	68f8      	ldr	r0, [r7, #12]
 8007868:	f000 f9f1 	bl	8007c4e <dateTime_clearDisplay>

  ht16k33_setSystemSetup(pConfig->hDisplayDriver, Ht16k33_SystemOscillator_On);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	2101      	movs	r1, #1
 8007872:	4618      	mov	r0, r3
 8007874:	f7ff fe2f 	bl	80074d6 <ht16k33_setSystemSetup>
  ht16k33_setDisplaySetup(pConfig->hDisplayDriver, Ht16k33_DisplayStatus_On, Ht16k33_BlinkingFrequency_Off);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	2200      	movs	r2, #0
 800787e:	2101      	movs	r1, #1
 8007880:	4618      	mov	r0, r3
 8007882:	f7ff fe6c 	bl	800755e <ht16k33_setDisplaySetup>

  return pConfig;
 8007886:	68fb      	ldr	r3, [r7, #12]
}
 8007888:	4618      	mov	r0, r3
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <dateTime_setDateTimeMonth>:

DateTime_Display_Status_t dateTime_setDateTimeMonth(DateTime_Display_Config_t* const pConfig,
    const uint8_t* const inputDateTime)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
  //Extract and check input month
  pConfig->dateTimeData.Month = (inputDateTime[0]*10) + (inputDateTime[1]);
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	461a      	mov	r2, r3
 80078a0:	0092      	lsls	r2, r2, #2
 80078a2:	4413      	add	r3, r2
 80078a4:	005b      	lsls	r3, r3, #1
 80078a6:	b2da      	uxtb	r2, r3
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	3301      	adds	r3, #1
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	4413      	add	r3, r2
 80078b0:	b2da      	uxtb	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	731a      	strb	r2, [r3, #12]
  if ((pConfig->dateTimeData.Month >= 1) && (pConfig->dateTimeData.Month <= 12))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	7b1b      	ldrb	r3, [r3, #12]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d005      	beq.n	80078ca <dateTime_setDateTimeMonth+0x3a>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	7b1b      	ldrb	r3, [r3, #12]
 80078c2:	2b0c      	cmp	r3, #12
 80078c4:	d801      	bhi.n	80078ca <dateTime_setDateTimeMonth+0x3a>
  {
    return 1;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e000      	b.n	80078cc <dateTime_setDateTimeMonth+0x3c>
  }
  else
  {
    return 0;
 80078ca:	2300      	movs	r3, #0
  }
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <dateTime_setDateTimeDay>:

DateTime_Display_Status_t dateTime_setDateTimeDay(DateTime_Display_Config_t* const pConfig,
    const uint8_t* const inputDateTime)
{
 80078d8:	b480      	push	{r7}
 80078da:	b085      	sub	sp, #20
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  bool leapYear = false;
 80078e2:	2300      	movs	r3, #0
 80078e4:	73fb      	strb	r3, [r7, #15]

  //Extract input day and check for days per month
  pConfig->dateTimeData.Day = (inputDateTime[2]*10) + (inputDateTime[3]);
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	3302      	adds	r3, #2
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	461a      	mov	r2, r3
 80078ee:	0092      	lsls	r2, r2, #2
 80078f0:	4413      	add	r3, r2
 80078f2:	005b      	lsls	r3, r3, #1
 80078f4:	b2da      	uxtb	r2, r3
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	3303      	adds	r3, #3
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	4413      	add	r3, r2
 80078fe:	b2da      	uxtb	r2, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	735a      	strb	r2, [r3, #13]

  //Check for leap year
  if ((((pConfig->dateTimeData.Year % 4) == 0) && ((pConfig->dateTimeData.Year % 100) != 0)) ||
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	89db      	ldrh	r3, [r3, #14]
 8007908:	f003 0303 	and.w	r3, r3, #3
 800790c:	b29b      	uxth	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d10c      	bne.n	800792c <dateTime_setDateTimeDay+0x54>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	89db      	ldrh	r3, [r3, #14]
 8007916:	4a1a      	ldr	r2, [pc, #104]	@ (8007980 <dateTime_setDateTimeDay+0xa8>)
 8007918:	fba2 1203 	umull	r1, r2, r2, r3
 800791c:	0952      	lsrs	r2, r2, #5
 800791e:	2164      	movs	r1, #100	@ 0x64
 8007920:	fb01 f202 	mul.w	r2, r1, r2
 8007924:	1a9b      	subs	r3, r3, r2
 8007926:	b29b      	uxth	r3, r3
 8007928:	2b00      	cmp	r3, #0
 800792a:	d10d      	bne.n	8007948 <dateTime_setDateTimeDay+0x70>
      ((pConfig->dateTimeData.Year % 400) == 0))
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	89db      	ldrh	r3, [r3, #14]
 8007930:	4a13      	ldr	r2, [pc, #76]	@ (8007980 <dateTime_setDateTimeDay+0xa8>)
 8007932:	fba2 1203 	umull	r1, r2, r2, r3
 8007936:	09d2      	lsrs	r2, r2, #7
 8007938:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800793c:	fb01 f202 	mul.w	r2, r1, r2
 8007940:	1a9b      	subs	r3, r3, r2
 8007942:	b29b      	uxth	r3, r3
  if ((((pConfig->dateTimeData.Year % 4) == 0) && ((pConfig->dateTimeData.Year % 100) != 0)) ||
 8007944:	2b00      	cmp	r3, #0
 8007946:	d101      	bne.n	800794c <dateTime_setDateTimeDay+0x74>
  {
    leapYear = true;
 8007948:	2301      	movs	r3, #1
 800794a:	73fb      	strb	r3, [r7, #15]
  }

  if (pConfig->dateTimeData.Day <= (monthDaysCount[pConfig->dateTimeData.Month-1] + leapYear) &&
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	7b5b      	ldrb	r3, [r3, #13]
 8007950:	4619      	mov	r1, r3
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	7b1b      	ldrb	r3, [r3, #12]
 8007956:	3b01      	subs	r3, #1
 8007958:	4a0a      	ldr	r2, [pc, #40]	@ (8007984 <dateTime_setDateTimeDay+0xac>)
 800795a:	5cd3      	ldrb	r3, [r2, r3]
 800795c:	461a      	mov	r2, r3
 800795e:	7bfb      	ldrb	r3, [r7, #15]
 8007960:	4413      	add	r3, r2
 8007962:	4299      	cmp	r1, r3
 8007964:	dc05      	bgt.n	8007972 <dateTime_setDateTimeDay+0x9a>
      (pConfig->dateTimeData.Day > 0))
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	7b5b      	ldrb	r3, [r3, #13]
  if (pConfig->dateTimeData.Day <= (monthDaysCount[pConfig->dateTimeData.Month-1] + leapYear) &&
 800796a:	2b00      	cmp	r3, #0
 800796c:	d001      	beq.n	8007972 <dateTime_setDateTimeDay+0x9a>
  {
    return 1;
 800796e:	2301      	movs	r3, #1
 8007970:	e000      	b.n	8007974 <dateTime_setDateTimeDay+0x9c>
  }
  else
  {
    return 0;
 8007972:	2300      	movs	r3, #0
  }
}
 8007974:	4618      	mov	r0, r3
 8007976:	3714      	adds	r7, #20
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr
 8007980:	51eb851f 	.word	0x51eb851f
 8007984:	0800d074 	.word	0x0800d074

08007988 <dateTime_setDateTimeYear>:

DateTime_Display_Status_t dateTime_setDateTimeYear(DateTime_Display_Config_t* const pConfig,
    const uint8_t* const inputDateTime)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
  //Extract input year
  pConfig->dateTimeData.Year = (inputDateTime[4]*1000)+(inputDateTime[5]*100)
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	3304      	adds	r3, #4
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	461a      	mov	r2, r3
 800799a:	0152      	lsls	r2, r2, #5
 800799c:	1ad2      	subs	r2, r2, r3
 800799e:	0092      	lsls	r2, r2, #2
 80079a0:	4413      	add	r3, r2
 80079a2:	00db      	lsls	r3, r3, #3
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	3305      	adds	r3, #5
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	4619      	mov	r1, r3
 80079ae:	0089      	lsls	r1, r1, #2
 80079b0:	440b      	add	r3, r1
 80079b2:	4619      	mov	r1, r3
 80079b4:	0088      	lsls	r0, r1, #2
 80079b6:	4619      	mov	r1, r3
 80079b8:	4603      	mov	r3, r0
 80079ba:	440b      	add	r3, r1
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	b29b      	uxth	r3, r3
 80079c0:	4413      	add	r3, r2
 80079c2:	b29a      	uxth	r2, r3
      + (inputDateTime[6]*10) + (inputDateTime[7]);
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	3306      	adds	r3, #6
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	4619      	mov	r1, r3
 80079cc:	0089      	lsls	r1, r1, #2
 80079ce:	440b      	add	r3, r1
 80079d0:	005b      	lsls	r3, r3, #1
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	4413      	add	r3, r2
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	683a      	ldr	r2, [r7, #0]
 80079da:	3207      	adds	r2, #7
 80079dc:	7812      	ldrb	r2, [r2, #0]
 80079de:	4413      	add	r3, r2
 80079e0:	b29a      	uxth	r2, r3
  pConfig->dateTimeData.Year = (inputDateTime[4]*1000)+(inputDateTime[5]*100)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	81da      	strh	r2, [r3, #14]

  return 1;
 80079e6:	2301      	movs	r3, #1
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <dateTime_setDateTimeHour>:

DateTime_Display_Status_t dateTime_setDateTimeHour(DateTime_Display_Config_t* const pConfig,
    const uint8_t* const inputDateTime)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  DateTime_Display_Status_t isSuccess = 1;
 80079fe:	2301      	movs	r3, #1
 8007a00:	73fb      	strb	r3, [r7, #15]

  //Extract and check input hour
  pConfig->dateTimeData.Hour = (inputDateTime[8]*10) + (inputDateTime[9]);
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	3308      	adds	r3, #8
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	461a      	mov	r2, r3
 8007a0a:	0092      	lsls	r2, r2, #2
 8007a0c:	4413      	add	r3, r2
 8007a0e:	005b      	lsls	r3, r3, #1
 8007a10:	b2da      	uxtb	r2, r3
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	3309      	adds	r3, #9
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	4413      	add	r3, r2
 8007a1a:	b2da      	uxtb	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	741a      	strb	r2, [r3, #16]

  if ((pConfig->dateTimeData.Hour >= 0) && (pConfig->dateTimeData.Hour <= 24))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	7c1b      	ldrb	r3, [r3, #16]
 8007a24:	2b18      	cmp	r3, #24
 8007a26:	d827      	bhi.n	8007a78 <dateTime_setDateTimeHour+0x84>
  {
    //Convert to 12 hour time and set meridiem
    if ((pConfig->dateTimeData.Hour > 12))
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	7c1b      	ldrb	r3, [r3, #16]
 8007a2c:	2b0c      	cmp	r3, #12
 8007a2e:	d90f      	bls.n	8007a50 <dateTime_setDateTimeHour+0x5c>
    {
      pConfig->dateTimeData.Hour -= 12;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	7c1b      	ldrb	r3, [r3, #16]
 8007a34:	3b0c      	subs	r3, #12
 8007a36:	b2da      	uxtb	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	741a      	strb	r2, [r3, #16]
      pConfig->dateTimeData.Meridiem = (pConfig->dateTimeData.Hour == 12) ?
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	7c1b      	ldrb	r3, [r3, #16]
          DateTime_DisplayDataMeridiem_AM : DateTime_DisplayDataMeridiem_PM;
 8007a40:	2b0c      	cmp	r3, #12
 8007a42:	d101      	bne.n	8007a48 <dateTime_setDateTimeHour+0x54>
 8007a44:	2201      	movs	r2, #1
 8007a46:	e000      	b.n	8007a4a <dateTime_setDateTimeHour+0x56>
 8007a48:	2202      	movs	r2, #2
      pConfig->dateTimeData.Meridiem = (pConfig->dateTimeData.Hour == 12) ?
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	749a      	strb	r2, [r3, #18]
 8007a4e:	e015      	b.n	8007a7c <dateTime_setDateTimeHour+0x88>
    }
    else
    {
      pConfig->dateTimeData.Meridiem = (pConfig->dateTimeData.Hour == 12) ?
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	7c1b      	ldrb	r3, [r3, #16]
          DateTime_DisplayDataMeridiem_PM : DateTime_DisplayDataMeridiem_AM;
 8007a54:	2b0c      	cmp	r3, #12
 8007a56:	d101      	bne.n	8007a5c <dateTime_setDateTimeHour+0x68>
 8007a58:	2202      	movs	r2, #2
 8007a5a:	e000      	b.n	8007a5e <dateTime_setDateTimeHour+0x6a>
 8007a5c:	2201      	movs	r2, #1
      pConfig->dateTimeData.Meridiem = (pConfig->dateTimeData.Hour == 12) ?
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	749a      	strb	r2, [r3, #18]
      pConfig->dateTimeData.Hour = (pConfig->dateTimeData.Hour == 0) ? 12 : pConfig->dateTimeData.Hour;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	7c1b      	ldrb	r3, [r3, #16]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d002      	beq.n	8007a70 <dateTime_setDateTimeHour+0x7c>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	7c1a      	ldrb	r2, [r3, #16]
 8007a6e:	e000      	b.n	8007a72 <dateTime_setDateTimeHour+0x7e>
 8007a70:	220c      	movs	r2, #12
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	741a      	strb	r2, [r3, #16]
 8007a76:	e001      	b.n	8007a7c <dateTime_setDateTimeHour+0x88>
    }
  }
  else
  {
    isSuccess = 0;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	73fb      	strb	r3, [r7, #15]
  }

  return isSuccess;
 8007a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3714      	adds	r7, #20
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr

08007a8a <dateTime_setDateTimeMinute>:

DateTime_Display_Status_t dateTime_setDateTimeMinute(DateTime_Display_Config_t* const pConfig,
    const uint8_t* const inputDateTime)
{
 8007a8a:	b480      	push	{r7}
 8007a8c:	b083      	sub	sp, #12
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
 8007a92:	6039      	str	r1, [r7, #0]
  //Extract and check input month
  pConfig->dateTimeData.Minute = (inputDateTime[10]*10) + (inputDateTime[11]);
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	330a      	adds	r3, #10
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	0092      	lsls	r2, r2, #2
 8007a9e:	4413      	add	r3, r2
 8007aa0:	005b      	lsls	r3, r3, #1
 8007aa2:	b2da      	uxtb	r2, r3
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	330b      	adds	r3, #11
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	4413      	add	r3, r2
 8007aac:	b2da      	uxtb	r2, r3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	745a      	strb	r2, [r3, #17]
  if ((pConfig->dateTimeData.Minute >= 0) && (pConfig->dateTimeData.Minute < 60))
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	7c5b      	ldrb	r3, [r3, #17]
 8007ab6:	2b3b      	cmp	r3, #59	@ 0x3b
 8007ab8:	d801      	bhi.n	8007abe <dateTime_setDateTimeMinute+0x34>
  {
    return 1;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e000      	b.n	8007ac0 <dateTime_setDateTimeMinute+0x36>
  }
  else
  {
    return 0;
 8007abe:	2300      	movs	r3, #0

  }
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <dateTime_setDisplayData>:

DateTime_Display_Status_t dateTime_setDisplayData(DateTime_Display_Config_t* const pConfig,
    const uint8_t* const inputDateTime)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
  DateTime_Display_Status_t isSuccess = 1;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	73fb      	strb	r3, [r7, #15]

  isSuccess &= dateTime_setDateTimeMonth(pConfig, inputDateTime);
 8007ada:	6839      	ldr	r1, [r7, #0]
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f7ff fed7 	bl	8007890 <dateTime_setDateTimeMonth>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	7bfb      	ldrb	r3, [r7, #15]
 8007ae8:	4013      	ands	r3, r2
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	bf14      	ite	ne
 8007aee:	2301      	movne	r3, #1
 8007af0:	2300      	moveq	r3, #0
 8007af2:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_setDateTimeYear(pConfig, inputDateTime);
 8007af4:	6839      	ldr	r1, [r7, #0]
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f7ff ff46 	bl	8007988 <dateTime_setDateTimeYear>
 8007afc:	4603      	mov	r3, r0
 8007afe:	461a      	mov	r2, r3
 8007b00:	7bfb      	ldrb	r3, [r7, #15]
 8007b02:	4013      	ands	r3, r2
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	bf14      	ite	ne
 8007b08:	2301      	movne	r3, #1
 8007b0a:	2300      	moveq	r3, #0
 8007b0c:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_setDateTimeDay(pConfig, inputDateTime);
 8007b0e:	6839      	ldr	r1, [r7, #0]
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f7ff fee1 	bl	80078d8 <dateTime_setDateTimeDay>
 8007b16:	4603      	mov	r3, r0
 8007b18:	461a      	mov	r2, r3
 8007b1a:	7bfb      	ldrb	r3, [r7, #15]
 8007b1c:	4013      	ands	r3, r2
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	bf14      	ite	ne
 8007b22:	2301      	movne	r3, #1
 8007b24:	2300      	moveq	r3, #0
 8007b26:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_setDateTimeHour(pConfig, inputDateTime);
 8007b28:	6839      	ldr	r1, [r7, #0]
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f7ff ff62 	bl	80079f4 <dateTime_setDateTimeHour>
 8007b30:	4603      	mov	r3, r0
 8007b32:	461a      	mov	r2, r3
 8007b34:	7bfb      	ldrb	r3, [r7, #15]
 8007b36:	4013      	ands	r3, r2
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	bf14      	ite	ne
 8007b3c:	2301      	movne	r3, #1
 8007b3e:	2300      	moveq	r3, #0
 8007b40:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_setDateTimeMinute(pConfig, inputDateTime);
 8007b42:	6839      	ldr	r1, [r7, #0]
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f7ff ffa0 	bl	8007a8a <dateTime_setDateTimeMinute>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	7bfb      	ldrb	r3, [r7, #15]
 8007b50:	4013      	ands	r3, r2
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	bf14      	ite	ne
 8007b56:	2301      	movne	r3, #1
 8007b58:	2300      	moveq	r3, #0
 8007b5a:	73fb      	strb	r3, [r7, #15]

  return isSuccess;
 8007b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <dateTime_getRtcDateTimeData>:

DateTime_Display_Status_t   dateTime_getRtcDateTimeData(DateTime_Display_Config_t* const pConfig,
    RTC_DateTypeDef* const pRtcDate, RTC_TimeTypeDef* const pRtcTime)
{
 8007b66:	b480      	push	{r7}
 8007b68:	b087      	sub	sp, #28
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	60f8      	str	r0, [r7, #12]
 8007b6e:	60b9      	str	r1, [r7, #8]
 8007b70:	607a      	str	r2, [r7, #4]
  DateTime_Display_Status_t isSuccess = 1;
 8007b72:	2301      	movs	r3, #1
 8007b74:	75fb      	strb	r3, [r7, #23]

  pRtcDate->Date        = pConfig->dateTimeData.Day;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	7b5a      	ldrb	r2, [r3, #13]
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	709a      	strb	r2, [r3, #2]
  pRtcDate->Month       = pConfig->dateTimeData.Month;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	7b1a      	ldrb	r2, [r3, #12]
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	705a      	strb	r2, [r3, #1]
  pRtcDate->Year        = 0;                            //Set to zero because maximum value from RTC is 99 years
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	70da      	strb	r2, [r3, #3]
  pRtcTime->Hours       = pConfig->dateTimeData.Hour;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	7c1a      	ldrb	r2, [r3, #16]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	701a      	strb	r2, [r3, #0]
  pRtcTime->Minutes     = pConfig->dateTimeData.Minute;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	7c5a      	ldrb	r2, [r3, #17]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	705a      	strb	r2, [r3, #1]
  pRtcTime->TimeFormat  = pConfig->dateTimeData.Meridiem - 1; //RTC AM = 0, RTC PM = 1;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	7c9b      	ldrb	r3, [r3, #18]
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	b2da      	uxtb	r2, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	70da      	strb	r2, [r3, #3]
  pRtcTime->Seconds     = 0;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	709a      	strb	r2, [r3, #2]
  pRtcTime->SubSeconds  = 0;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	605a      	str	r2, [r3, #4]
  pConfig->orignalYear  = pConfig->dateTimeData.Year; //Hacky way to fix RTC year issue
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	89da      	ldrh	r2, [r3, #14]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	829a      	strh	r2, [r3, #20]
  return isSuccess;
 8007bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	371c      	adds	r7, #28
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr

08007bca <dateTime_setRtcDateTimeData>:

DateTime_Display_Status_t   dateTime_setRtcDateTimeData(DateTime_Display_Config_t* const pConfig,
    RTC_DateTypeDef* const pRtcDate, RTC_TimeTypeDef* const pRtcTime)
{
 8007bca:	b480      	push	{r7}
 8007bcc:	b087      	sub	sp, #28
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	60f8      	str	r0, [r7, #12]
 8007bd2:	60b9      	str	r1, [r7, #8]
 8007bd4:	607a      	str	r2, [r7, #4]
  DateTime_Display_Status_t isSuccess = 1;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	75fb      	strb	r3, [r7, #23]

  pConfig->dateTimeData.Day       = pRtcDate->Date;
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	789a      	ldrb	r2, [r3, #2]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	735a      	strb	r2, [r3, #13]
  pConfig->dateTimeData.Month     = pRtcDate->Month;
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	785a      	ldrb	r2, [r3, #1]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	731a      	strb	r2, [r3, #12]
  pConfig->dateTimeData.Year      = pConfig->orignalYear + pRtcDate->Year;  //Add years because maximum value from RTC is 99 years
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	8a9b      	ldrh	r3, [r3, #20]
 8007bee:	68ba      	ldr	r2, [r7, #8]
 8007bf0:	78d2      	ldrb	r2, [r2, #3]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	81da      	strh	r2, [r3, #14]
  pConfig->dateTimeData.Hour      = pRtcTime->Hours;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	781a      	ldrb	r2, [r3, #0]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	741a      	strb	r2, [r3, #16]
  pConfig->dateTimeData.Minute    = pRtcTime->Minutes;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	785a      	ldrb	r2, [r3, #1]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	745a      	strb	r2, [r3, #17]
  pConfig->dateTimeData.Meridiem  = pRtcTime->TimeFormat + 1; //RTC AM = 0, RTC PM = 1;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	78db      	ldrb	r3, [r3, #3]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	b2da      	uxtb	r2, r3
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	749a      	strb	r2, [r3, #18]

  return isSuccess;
 8007c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	371c      	adds	r7, #28
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <dateTime_copyDateTime>:

DateTime_Display_Status_t dateTime_copyDateTime(DateTime_Display_Config_t* const pDestConfig,
    DateTime_Display_Config_t* const pSourceConfig)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
  DateTime_Display_Status_t isSuccess = 1;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	73fb      	strb	r3, [r7, #15]

  memcpy(&pDestConfig->dateTimeData, &pSourceConfig->dateTimeData, sizeof(pDestConfig->dateTimeData));
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f103 000c 	add.w	r0, r3, #12
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	330c      	adds	r3, #12
 8007c3c:	2208      	movs	r2, #8
 8007c3e:	4619      	mov	r1, r3
 8007c40:	f004 fa3b 	bl	800c0ba <memcpy>

  return isSuccess;
 8007c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <dateTime_clearDisplay>:

DateTime_Display_Status_t dateTime_clearDisplay(DateTime_Display_Config_t* const pConfig)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b086      	sub	sp, #24
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
  uint8_t* clearBuffer = malloc (TOTAL_NUMBER_OF_ROWS);
 8007c56:	2010      	movs	r0, #16
 8007c58:	f003 ff6e 	bl	800bb38 <malloc>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	60fb      	str	r3, [r7, #12]
  DateTime_Display_Status_t isSuccess   = 0;
 8007c60:	2300      	movs	r3, #0
 8007c62:	75fb      	strb	r3, [r7, #23]

  for (int buffCount = 0; buffCount < TOTAL_NUMBER_OF_ROWS; buffCount++)
 8007c64:	2300      	movs	r3, #0
 8007c66:	613b      	str	r3, [r7, #16]
 8007c68:	e007      	b.n	8007c7a <dateTime_clearDisplay+0x2c>
  {
    clearBuffer[buffCount] = 0x00;
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	4413      	add	r3, r2
 8007c70:	2200      	movs	r2, #0
 8007c72:	701a      	strb	r2, [r3, #0]
  for (int buffCount = 0; buffCount < TOTAL_NUMBER_OF_ROWS; buffCount++)
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	3301      	adds	r3, #1
 8007c78:	613b      	str	r3, [r7, #16]
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	2b0f      	cmp	r3, #15
 8007c7e:	ddf4      	ble.n	8007c6a <dateTime_clearDisplay+0x1c>
  }

  isSuccess = ht16k33_updateDisplayData (pConfig->hDisplayDriver,DISPLAY_DATA_REG_ADDRESS, clearBuffer,
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6898      	ldr	r0, [r3, #8]
 8007c84:	2310      	movs	r3, #16
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	2100      	movs	r1, #0
 8007c8a:	f7ff fcc7 	bl	800761c <ht16k33_updateDisplayData>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	75fb      	strb	r3, [r7, #23]
      TOTAL_NUMBER_OF_ROWS);

  if (isSuccess)
 8007c92:	7dfb      	ldrb	r3, [r7, #23]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d010      	beq.n	8007cba <dateTime_clearDisplay+0x6c>
  {
    isSuccess |= ht16k33_setDisplaySetup(pConfig->hDisplayDriver, Ht16k33_DisplayStatus_On,
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	2101      	movs	r1, #1
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f7ff fc5c 	bl	800755e <ht16k33_setDisplaySetup>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	461a      	mov	r2, r3
 8007caa:	7dfb      	ldrb	r3, [r7, #23]
 8007cac:	4313      	orrs	r3, r2
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	bf14      	ite	ne
 8007cb4:	2301      	movne	r3, #1
 8007cb6:	2300      	moveq	r3, #0
 8007cb8:	75fb      	strb	r3, [r7, #23]
        Ht16k33_BlinkingFrequency_Off);
  }

  free(clearBuffer);
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f003 ff44 	bl	800bb48 <free>

  return isSuccess;
 8007cc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3718      	adds	r7, #24
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <dateTime_setLed>:
DateTime_Display_Status_t dateTime_setLed(DateTime_Display_Config_t* const pConfig, const uint8_t segmentNumber,
       const uint8_t ledState)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b086      	sub	sp, #24
 8007cce:	af02      	add	r7, sp, #8
 8007cd0:	6078      	str	r0, [r7, #4]
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	70fb      	strb	r3, [r7, #3]
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	70bb      	strb	r3, [r7, #2]
     DateTime_Display_Status_t isSuccess   = 0;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	73fb      	strb	r3, [r7, #15]
     uint8_t SegmentData = 0;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	73bb      	strb	r3, [r7, #14]
     uint8_t RequestData = segmentNumber;
 8007ce2:	78fb      	ldrb	r3, [r7, #3]
 8007ce4:	737b      	strb	r3, [r7, #13]

     isSuccess |= HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->i2cAddrs)<<1, &RequestData,  1, HAL_MAX_DELAY);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6818      	ldr	r0, [r3, #0]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	791b      	ldrb	r3, [r3, #4]
 8007cee:	005b      	lsls	r3, r3, #1
 8007cf0:	b299      	uxth	r1, r3
 8007cf2:	f107 020d 	add.w	r2, r7, #13
 8007cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8007cfa:	9300      	str	r3, [sp, #0]
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	f7fb f81d 	bl	8002d3c <HAL_I2C_Master_Transmit>
 8007d02:	4603      	mov	r3, r0
 8007d04:	461a      	mov	r2, r3
 8007d06:	7bfb      	ldrb	r3, [r7, #15]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	bf14      	ite	ne
 8007d0e:	2301      	movne	r3, #1
 8007d10:	2300      	moveq	r3, #0
 8007d12:	73fb      	strb	r3, [r7, #15]
     isSuccess |= HAL_I2C_Master_Receive(pConfig->hi2c, ((pConfig->i2cAddrs)<<1)|0x01, &SegmentData, 1, HAL_MAX_DELAY);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6818      	ldr	r0, [r3, #0]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	791b      	ldrb	r3, [r3, #4]
 8007d1c:	005b      	lsls	r3, r3, #1
 8007d1e:	b21b      	sxth	r3, r3
 8007d20:	f043 0301 	orr.w	r3, r3, #1
 8007d24:	b21b      	sxth	r3, r3
 8007d26:	b299      	uxth	r1, r3
 8007d28:	f107 020e 	add.w	r2, r7, #14
 8007d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8007d30:	9300      	str	r3, [sp, #0]
 8007d32:	2301      	movs	r3, #1
 8007d34:	f7fb f900 	bl	8002f38 <HAL_I2C_Master_Receive>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	7bfb      	ldrb	r3, [r7, #15]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	bf14      	ite	ne
 8007d44:	2301      	movne	r3, #1
 8007d46:	2300      	moveq	r3, #0
 8007d48:	73fb      	strb	r3, [r7, #15]
     SegmentData &= 0b00111111;
 8007d4a:	7bbb      	ldrb	r3, [r7, #14]
 8007d4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	73bb      	strb	r3, [r7, #14]
     SegmentData |= ledState;
 8007d54:	7bba      	ldrb	r2, [r7, #14]
 8007d56:	78bb      	ldrb	r3, [r7, #2]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	73bb      	strb	r3, [r7, #14]
     isSuccess |= ht16k33_updateDisplayData (pConfig->hDisplayDriver, RequestData, &SegmentData, 1);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6898      	ldr	r0, [r3, #8]
 8007d62:	7b79      	ldrb	r1, [r7, #13]
 8007d64:	f107 020e 	add.w	r2, r7, #14
 8007d68:	2301      	movs	r3, #1
 8007d6a:	f7ff fc57 	bl	800761c <ht16k33_updateDisplayData>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	461a      	mov	r2, r3
 8007d72:	7bfb      	ldrb	r3, [r7, #15]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	bf14      	ite	ne
 8007d7c:	2301      	movne	r3, #1
 8007d7e:	2300      	moveq	r3, #0
 8007d80:	73fb      	strb	r3, [r7, #15]

     return isSuccess;
 8007d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3710      	adds	r7, #16
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <dateTime_setDigitSegments>:
}

//Hacky way of fixing wiring issue of LED numerical digits
DateTime_Display_Status_t dateTime_setDigitSegments(DateTime_Display_Config_t* const pConfig, const uint8_t segmentNum,
    const char dispDigit)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b088      	sub	sp, #32
 8007d90:	af02      	add	r7, sp, #8
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	460b      	mov	r3, r1
 8007d96:	70fb      	strb	r3, [r7, #3]
 8007d98:	4613      	mov	r3, r2
 8007d9a:	70bb      	strb	r3, [r7, #2]
  uint8_t* displayBuffer = malloc (2);
 8007d9c:	2002      	movs	r0, #2
 8007d9e:	f003 fecb 	bl	800bb38 <malloc>
 8007da2:	4603      	mov	r3, r0
 8007da4:	617b      	str	r3, [r7, #20]
  uint8_t test[] = {0,0};
 8007da6:	2300      	movs	r3, #0
 8007da8:	823b      	strh	r3, [r7, #16]
  uint8_t boo[] = {0x00};
 8007daa:	2300      	movs	r3, #0
 8007dac:	733b      	strb	r3, [r7, #12]

  if (segmentNum % 2)
 8007dae:	78fb      	ldrb	r3, [r7, #3]
 8007db0:	f003 0301 	and.w	r3, r3, #1
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d047      	beq.n	8007e4a <dateTime_setDigitSegments+0xbe>
  {
    boo[0] = segmentNum - 0x01;
 8007dba:	78fb      	ldrb	r3, [r7, #3]
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->i2cAddrs)<<1, boo,  sizeof(boo), HAL_MAX_DELAY);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6818      	ldr	r0, [r3, #0]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	791b      	ldrb	r3, [r3, #4]
 8007dca:	005b      	lsls	r3, r3, #1
 8007dcc:	b299      	uxth	r1, r3
 8007dce:	f107 020c 	add.w	r2, r7, #12
 8007dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8007dd6:	9300      	str	r3, [sp, #0]
 8007dd8:	2301      	movs	r3, #1
 8007dda:	f7fa ffaf 	bl	8002d3c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(pConfig->hi2c, ((pConfig->i2cAddrs)<<1)|0x01, test, 1, HAL_MAX_DELAY);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6818      	ldr	r0, [r3, #0]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	791b      	ldrb	r3, [r3, #4]
 8007de6:	005b      	lsls	r3, r3, #1
 8007de8:	b21b      	sxth	r3, r3
 8007dea:	f043 0301 	orr.w	r3, r3, #1
 8007dee:	b21b      	sxth	r3, r3
 8007df0:	b299      	uxth	r1, r3
 8007df2:	f107 0210 	add.w	r2, r7, #16
 8007df6:	f04f 33ff 	mov.w	r3, #4294967295
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	f7fb f89b 	bl	8002f38 <HAL_I2C_Master_Receive>
    test[0] = 0x7F & test[0];
 8007e02:	7c3b      	ldrb	r3, [r7, #16]
 8007e04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	743b      	strb	r3, [r7, #16]
    test[0] |= (sevenSegmentChars[(dispDigit-'0')] & 0x01 )<< 7;
 8007e0c:	7c3b      	ldrb	r3, [r7, #16]
 8007e0e:	b25a      	sxtb	r2, r3
 8007e10:	78bb      	ldrb	r3, [r7, #2]
 8007e12:	3b30      	subs	r3, #48	@ 0x30
 8007e14:	492c      	ldr	r1, [pc, #176]	@ (8007ec8 <dateTime_setDigitSegments+0x13c>)
 8007e16:	5ccb      	ldrb	r3, [r1, r3]
 8007e18:	01db      	lsls	r3, r3, #7
 8007e1a:	b25b      	sxtb	r3, r3
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	b25b      	sxtb	r3, r3
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	743b      	strb	r3, [r7, #16]
    test[1] |= sevenSegmentChars[(dispDigit-'0')] >> 1;
 8007e24:	7c7a      	ldrb	r2, [r7, #17]
 8007e26:	78bb      	ldrb	r3, [r7, #2]
 8007e28:	3b30      	subs	r3, #48	@ 0x30
 8007e2a:	4927      	ldr	r1, [pc, #156]	@ (8007ec8 <dateTime_setDigitSegments+0x13c>)
 8007e2c:	5ccb      	ldrb	r3, [r1, r3]
 8007e2e:	085b      	lsrs	r3, r3, #1
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	4313      	orrs	r3, r2
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	747b      	strb	r3, [r7, #17]
    ht16k33_updateDisplayData (pConfig->hDisplayDriver, boo[0], test, 2);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6898      	ldr	r0, [r3, #8]
 8007e3c:	7b39      	ldrb	r1, [r7, #12]
 8007e3e:	f107 0210 	add.w	r2, r7, #16
 8007e42:	2302      	movs	r3, #2
 8007e44:	f7ff fbea 	bl	800761c <ht16k33_updateDisplayData>
 8007e48:	e036      	b.n	8007eb8 <dateTime_setDigitSegments+0x12c>
  }
  else
  {
    boo[0] = segmentNum;
 8007e4a:	78fb      	ldrb	r3, [r7, #3]
 8007e4c:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->i2cAddrs)<<1, boo,  1, HAL_MAX_DELAY);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6818      	ldr	r0, [r3, #0]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	791b      	ldrb	r3, [r3, #4]
 8007e56:	005b      	lsls	r3, r3, #1
 8007e58:	b299      	uxth	r1, r3
 8007e5a:	f107 020c 	add.w	r2, r7, #12
 8007e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e62:	9300      	str	r3, [sp, #0]
 8007e64:	2301      	movs	r3, #1
 8007e66:	f7fa ff69 	bl	8002d3c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(pConfig->hi2c, ((pConfig->i2cAddrs)<<1)|0x01, test, 1, HAL_MAX_DELAY);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6818      	ldr	r0, [r3, #0]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	791b      	ldrb	r3, [r3, #4]
 8007e72:	005b      	lsls	r3, r3, #1
 8007e74:	b21b      	sxth	r3, r3
 8007e76:	f043 0301 	orr.w	r3, r3, #1
 8007e7a:	b21b      	sxth	r3, r3
 8007e7c:	b299      	uxth	r1, r3
 8007e7e:	f107 0210 	add.w	r2, r7, #16
 8007e82:	f04f 33ff 	mov.w	r3, #4294967295
 8007e86:	9300      	str	r3, [sp, #0]
 8007e88:	2301      	movs	r3, #1
 8007e8a:	f7fb f855 	bl	8002f38 <HAL_I2C_Master_Receive>
    test[0] = 0x80 & test[0];
 8007e8e:	7c3b      	ldrb	r3, [r7, #16]
 8007e90:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	743b      	strb	r3, [r7, #16]
    displayBuffer[0] = test[0] | sevenSegmentChars[(dispDigit-'0')];
 8007e98:	7c3a      	ldrb	r2, [r7, #16]
 8007e9a:	78bb      	ldrb	r3, [r7, #2]
 8007e9c:	3b30      	subs	r3, #48	@ 0x30
 8007e9e:	490a      	ldr	r1, [pc, #40]	@ (8007ec8 <dateTime_setDigitSegments+0x13c>)
 8007ea0:	5ccb      	ldrb	r3, [r1, r3]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	b2da      	uxtb	r2, r3
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	701a      	strb	r2, [r3, #0]
    ht16k33_updateDisplayData (pConfig->hDisplayDriver, segmentNum, displayBuffer, 1);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6898      	ldr	r0, [r3, #8]
 8007eae:	78f9      	ldrb	r1, [r7, #3]
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	697a      	ldr	r2, [r7, #20]
 8007eb4:	f7ff fbb2 	bl	800761c <ht16k33_updateDisplayData>
  }

  free(displayBuffer);
 8007eb8:	6978      	ldr	r0, [r7, #20]
 8007eba:	f003 fe45 	bl	800bb48 <free>
  return 1;
 8007ebe:	2301      	movs	r3, #1
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3718      	adds	r7, #24
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	0800d044 	.word	0x0800d044

08007ecc <dateTime_setAlphaSegments>:

DateTime_Display_Status_t dateTime_setAlphaSegments(DateTime_Display_Config_t* const pConfig, const uint8_t segmentNum,
    const char dispAlpha)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	70fb      	strb	r3, [r7, #3]
 8007ed8:	4613      	mov	r3, r2
 8007eda:	70bb      	strb	r3, [r7, #2]
  uint8_t displayBuffer[2] = {0,0};
 8007edc:	2300      	movs	r3, #0
 8007ede:	81bb      	strh	r3, [r7, #12]

  displayBuffer[0] = (uint8_t)((fourteenSegmentChars[(uint8_t)(dispAlpha-0x41)]>>0) & 0xFF);
 8007ee0:	78bb      	ldrb	r3, [r7, #2]
 8007ee2:	3b41      	subs	r3, #65	@ 0x41
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	4b10      	ldr	r3, [pc, #64]	@ (8007f2c <dateTime_setAlphaSegments+0x60>)
 8007eea:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	733b      	strb	r3, [r7, #12]
  displayBuffer[1] = (uint8_t)((fourteenSegmentChars[(uint8_t)(dispAlpha-0x41)]>>8) & 0xFF);
 8007ef2:	78bb      	ldrb	r3, [r7, #2]
 8007ef4:	3b41      	subs	r3, #65	@ 0x41
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	461a      	mov	r2, r3
 8007efa:	4b0c      	ldr	r3, [pc, #48]	@ (8007f2c <dateTime_setAlphaSegments+0x60>)
 8007efc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007f00:	0a1b      	lsrs	r3, r3, #8
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	737b      	strb	r3, [r7, #13]
  ht16k33_updateDisplayData (pConfig->hDisplayDriver, (10 + (2*segmentNum)), displayBuffer, 2);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6898      	ldr	r0, [r3, #8]
 8007f0c:	78fb      	ldrb	r3, [r7, #3]
 8007f0e:	3305      	adds	r3, #5
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	005b      	lsls	r3, r3, #1
 8007f14:	b2d9      	uxtb	r1, r3
 8007f16:	f107 020c 	add.w	r2, r7, #12
 8007f1a:	2302      	movs	r3, #2
 8007f1c:	f7ff fb7e 	bl	800761c <ht16k33_updateDisplayData>

  return 1;
 8007f20:	2301      	movs	r3, #1
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3710      	adds	r7, #16
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	0800d010 	.word	0x0800d010

08007f30 <dateTime_updateDisplayGlitch>:

DateTime_Display_Status_t dateTime_updateDisplayGlitch(DateTime_Display_Config_t* const pConfig,
    const char* const pGlitchData)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b086      	sub	sp, #24
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  DateTime_Display_Status_t isSuccess           = 0;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	75fb      	strb	r3, [r7, #23]
  uint8_t                   segmentCount        = 0;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	75bb      	strb	r3, [r7, #22]
  char                      digitSegBuffer[11];

  memcpy(&digitSegBuffer, pGlitchData+3, sizeof(digitSegBuffer));
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	1cda      	adds	r2, r3, #3
 8007f46:	f107 0308 	add.w	r3, r7, #8
 8007f4a:	6810      	ldr	r0, [r2, #0]
 8007f4c:	6851      	ldr	r1, [r2, #4]
 8007f4e:	c303      	stmia	r3!, {r0, r1}
 8007f50:	8911      	ldrh	r1, [r2, #8]
 8007f52:	7a92      	ldrb	r2, [r2, #10]
 8007f54:	8019      	strh	r1, [r3, #0]
 8007f56:	709a      	strb	r2, [r3, #2]


  //Update glitch alphanumeric display
  for (segmentCount = 0; segmentCount <= 2; segmentCount++)
 8007f58:	2300      	movs	r3, #0
 8007f5a:	75bb      	strb	r3, [r7, #22]
 8007f5c:	e01e      	b.n	8007f9c <dateTime_updateDisplayGlitch+0x6c>
  {
    if (pGlitchData[segmentCount] !=' ')
 8007f5e:	7dbb      	ldrb	r3, [r7, #22]
 8007f60:	683a      	ldr	r2, [r7, #0]
 8007f62:	4413      	add	r3, r2
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	2b20      	cmp	r3, #32
 8007f68:	d015      	beq.n	8007f96 <dateTime_updateDisplayGlitch+0x66>
    {
      isSuccess |= dateTime_setAlphaSegments(pConfig, segmentCount, pGlitchData[2-segmentCount]);
 8007f6a:	7dbb      	ldrb	r3, [r7, #22]
 8007f6c:	f1c3 0302 	rsb	r3, r3, #2
 8007f70:	461a      	mov	r2, r3
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	4413      	add	r3, r2
 8007f76:	781a      	ldrb	r2, [r3, #0]
 8007f78:	7dbb      	ldrb	r3, [r7, #22]
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f7ff ffa5 	bl	8007ecc <dateTime_setAlphaSegments>
 8007f82:	4603      	mov	r3, r0
 8007f84:	461a      	mov	r2, r3
 8007f86:	7dfb      	ldrb	r3, [r7, #23]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	bf14      	ite	ne
 8007f90:	2301      	movne	r3, #1
 8007f92:	2300      	moveq	r3, #0
 8007f94:	75fb      	strb	r3, [r7, #23]
  for (segmentCount = 0; segmentCount <= 2; segmentCount++)
 8007f96:	7dbb      	ldrb	r3, [r7, #22]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	75bb      	strb	r3, [r7, #22]
 8007f9c:	7dbb      	ldrb	r3, [r7, #22]
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	d9dd      	bls.n	8007f5e <dateTime_updateDisplayGlitch+0x2e>
    }
  }

  //Update glitch digit display
  for (segmentCount = 0; segmentCount < (sizeof(digitSegBuffer)-1); segmentCount++)
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	75bb      	strb	r3, [r7, #22]
 8007fa6:	e018      	b.n	8007fda <dateTime_updateDisplayGlitch+0xaa>
  {
    isSuccess |= dateTime_setDigitSegments(pConfig, digitSegmentOrder[segmentCount], digitSegBuffer[segmentCount]);
 8007fa8:	7dbb      	ldrb	r3, [r7, #22]
 8007faa:	4a17      	ldr	r2, [pc, #92]	@ (8008008 <dateTime_updateDisplayGlitch+0xd8>)
 8007fac:	5cd1      	ldrb	r1, [r2, r3]
 8007fae:	7dbb      	ldrb	r3, [r7, #22]
 8007fb0:	3318      	adds	r3, #24
 8007fb2:	443b      	add	r3, r7
 8007fb4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8007fb8:	461a      	mov	r2, r3
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f7ff fee6 	bl	8007d8c <dateTime_setDigitSegments>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	7dfb      	ldrb	r3, [r7, #23]
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	bf14      	ite	ne
 8007fce:	2301      	movne	r3, #1
 8007fd0:	2300      	moveq	r3, #0
 8007fd2:	75fb      	strb	r3, [r7, #23]
  for (segmentCount = 0; segmentCount < (sizeof(digitSegBuffer)-1); segmentCount++)
 8007fd4:	7dbb      	ldrb	r3, [r7, #22]
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	75bb      	strb	r3, [r7, #22]
 8007fda:	7dbb      	ldrb	r3, [r7, #22]
 8007fdc:	2b09      	cmp	r3, #9
 8007fde:	d9e3      	bls.n	8007fa8 <dateTime_updateDisplayGlitch+0x78>
  }

  //Update Meridiem
  isSuccess |= dateTime_setLed(pConfig, MERIDIEM_LED_SEGMENT_ADDRESS, (DateTime_DisplayDataMeridiem_AM << 6));
 8007fe0:	2240      	movs	r2, #64	@ 0x40
 8007fe2:	2109      	movs	r1, #9
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f7ff fe70 	bl	8007cca <dateTime_setLed>
 8007fea:	4603      	mov	r3, r0
 8007fec:	461a      	mov	r2, r3
 8007fee:	7dfb      	ldrb	r3, [r7, #23]
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	bf14      	ite	ne
 8007ff8:	2301      	movne	r3, #1
 8007ffa:	2300      	moveq	r3, #0
 8007ffc:	75fb      	strb	r3, [r7, #23]

  return isSuccess;
 8007ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008000:	4618      	mov	r0, r3
 8008002:	3718      	adds	r7, #24
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}
 8008008:	0800d004 	.word	0x0800d004

0800800c <dateTime_convertDateTimeToChar>:

DateTime_Display_Status_t dateTime_convertDateTimeToChar(DateTime_Display_Config_t* const pConfig,
    char* const writeBuf, uint8_t bufferSize, uint8_t* pBufferCount)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b086      	sub	sp, #24
 8008010:	af00      	add	r7, sp, #0
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	603b      	str	r3, [r7, #0]
 8008018:	4613      	mov	r3, r2
 800801a:	71fb      	strb	r3, [r7, #7]
  DateTime_Display_Status_t isSuccess = 0;
 800801c:	2300      	movs	r3, #0
 800801e:	75bb      	strb	r3, [r7, #22]
  uint8_t convertedHour;

  *pBufferCount +=  snprintf(writeBuf+*pBufferCount, bufferSize-*pBufferCount,
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	461a      	mov	r2, r3
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	1898      	adds	r0, r3, r2
 800802a:	79fb      	ldrb	r3, [r7, #7]
 800802c:	683a      	ldr	r2, [r7, #0]
 800802e:	7812      	ldrb	r2, [r2, #0]
 8008030:	1a9b      	subs	r3, r3, r2
 8008032:	4619      	mov	r1, r3
      "%02d", pConfig->dateTimeData.Month);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	7b1b      	ldrb	r3, [r3, #12]
  *pBufferCount +=  snprintf(writeBuf+*pBufferCount, bufferSize-*pBufferCount,
 8008038:	4a45      	ldr	r2, [pc, #276]	@ (8008150 <dateTime_convertDateTimeToChar+0x144>)
 800803a:	f003 ff3b 	bl	800beb4 <sniprintf>
 800803e:	4601      	mov	r1, r0
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	781a      	ldrb	r2, [r3, #0]
 8008044:	b2cb      	uxtb	r3, r1
 8008046:	4413      	add	r3, r2
 8008048:	b2da      	uxtb	r2, r3
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	701a      	strb	r2, [r3, #0]
  *pBufferCount += snprintf(writeBuf+*pBufferCount, bufferSize-*pBufferCount,
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	461a      	mov	r2, r3
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	1898      	adds	r0, r3, r2
 8008058:	79fb      	ldrb	r3, [r7, #7]
 800805a:	683a      	ldr	r2, [r7, #0]
 800805c:	7812      	ldrb	r2, [r2, #0]
 800805e:	1a9b      	subs	r3, r3, r2
 8008060:	4619      	mov	r1, r3
      "%02d", pConfig->dateTimeData.Day);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	7b5b      	ldrb	r3, [r3, #13]
  *pBufferCount += snprintf(writeBuf+*pBufferCount, bufferSize-*pBufferCount,
 8008066:	4a3a      	ldr	r2, [pc, #232]	@ (8008150 <dateTime_convertDateTimeToChar+0x144>)
 8008068:	f003 ff24 	bl	800beb4 <sniprintf>
 800806c:	4601      	mov	r1, r0
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	781a      	ldrb	r2, [r3, #0]
 8008072:	b2cb      	uxtb	r3, r1
 8008074:	4413      	add	r3, r2
 8008076:	b2da      	uxtb	r2, r3
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	701a      	strb	r2, [r3, #0]
  *pBufferCount += snprintf(writeBuf+*pBufferCount, bufferSize-*pBufferCount,
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	461a      	mov	r2, r3
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	1898      	adds	r0, r3, r2
 8008086:	79fb      	ldrb	r3, [r7, #7]
 8008088:	683a      	ldr	r2, [r7, #0]
 800808a:	7812      	ldrb	r2, [r2, #0]
 800808c:	1a9b      	subs	r3, r3, r2
 800808e:	4619      	mov	r1, r3
      "%04d", pConfig->dateTimeData.Year);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	89db      	ldrh	r3, [r3, #14]
  *pBufferCount += snprintf(writeBuf+*pBufferCount, bufferSize-*pBufferCount,
 8008094:	4a2f      	ldr	r2, [pc, #188]	@ (8008154 <dateTime_convertDateTimeToChar+0x148>)
 8008096:	f003 ff0d 	bl	800beb4 <sniprintf>
 800809a:	4601      	mov	r1, r0
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	781a      	ldrb	r2, [r3, #0]
 80080a0:	b2cb      	uxtb	r3, r1
 80080a2:	4413      	add	r3, r2
 80080a4:	b2da      	uxtb	r2, r3
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	701a      	strb	r2, [r3, #0]
  switch (pConfig->dateTimeData.Meridiem)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	7c9b      	ldrb	r3, [r3, #18]
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d00e      	beq.n	80080d0 <dateTime_convertDateTimeToChar+0xc4>
 80080b2:	2b02      	cmp	r3, #2
 80080b4:	d119      	bne.n	80080ea <dateTime_convertDateTimeToChar+0xde>
  {
    case  DateTime_DisplayDataMeridiem_PM:
      convertedHour = (pConfig->dateTimeData.Hour == 12) ? (pConfig->dateTimeData.Hour) : (pConfig->dateTimeData.Hour + 12);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	7c1b      	ldrb	r3, [r3, #16]
 80080ba:	2b0c      	cmp	r3, #12
 80080bc:	d102      	bne.n	80080c4 <dateTime_convertDateTimeToChar+0xb8>
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	7c1b      	ldrb	r3, [r3, #16]
 80080c2:	e003      	b.n	80080cc <dateTime_convertDateTimeToChar+0xc0>
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	7c1b      	ldrb	r3, [r3, #16]
 80080c8:	330c      	adds	r3, #12
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	75fb      	strb	r3, [r7, #23]
      break;
 80080ce:	e00c      	b.n	80080ea <dateTime_convertDateTimeToChar+0xde>
    case  DateTime_DisplayDataMeridiem_AM:
      convertedHour = (pConfig->dateTimeData.Hour == 12) ? (pConfig->dateTimeData.Hour + 12) : (pConfig->dateTimeData.Hour);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	7c1b      	ldrb	r3, [r3, #16]
 80080d4:	2b0c      	cmp	r3, #12
 80080d6:	d104      	bne.n	80080e2 <dateTime_convertDateTimeToChar+0xd6>
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	7c1b      	ldrb	r3, [r3, #16]
 80080dc:	330c      	adds	r3, #12
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	e001      	b.n	80080e6 <dateTime_convertDateTimeToChar+0xda>
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	7c1b      	ldrb	r3, [r3, #16]
 80080e6:	75fb      	strb	r3, [r7, #23]
      break;
 80080e8:	bf00      	nop
  }
  *pBufferCount += snprintf(writeBuf+*pBufferCount, bufferSize-*pBufferCount,
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	461a      	mov	r2, r3
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	1898      	adds	r0, r3, r2
 80080f4:	79fb      	ldrb	r3, [r7, #7]
 80080f6:	683a      	ldr	r2, [r7, #0]
 80080f8:	7812      	ldrb	r2, [r2, #0]
 80080fa:	1a9b      	subs	r3, r3, r2
 80080fc:	4619      	mov	r1, r3
 80080fe:	7dfb      	ldrb	r3, [r7, #23]
 8008100:	4a13      	ldr	r2, [pc, #76]	@ (8008150 <dateTime_convertDateTimeToChar+0x144>)
 8008102:	f003 fed7 	bl	800beb4 <sniprintf>
 8008106:	4601      	mov	r1, r0
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	781a      	ldrb	r2, [r3, #0]
 800810c:	b2cb      	uxtb	r3, r1
 800810e:	4413      	add	r3, r2
 8008110:	b2da      	uxtb	r2, r3
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	701a      	strb	r2, [r3, #0]
      "%02d", convertedHour);
  *pBufferCount += snprintf(writeBuf+*pBufferCount, bufferSize-*pBufferCount,
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	461a      	mov	r2, r3
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	1898      	adds	r0, r3, r2
 8008120:	79fb      	ldrb	r3, [r7, #7]
 8008122:	683a      	ldr	r2, [r7, #0]
 8008124:	7812      	ldrb	r2, [r2, #0]
 8008126:	1a9b      	subs	r3, r3, r2
 8008128:	4619      	mov	r1, r3
      "%02d", pConfig->dateTimeData.Minute);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	7c5b      	ldrb	r3, [r3, #17]
  *pBufferCount += snprintf(writeBuf+*pBufferCount, bufferSize-*pBufferCount,
 800812e:	4a08      	ldr	r2, [pc, #32]	@ (8008150 <dateTime_convertDateTimeToChar+0x144>)
 8008130:	f003 fec0 	bl	800beb4 <sniprintf>
 8008134:	4601      	mov	r1, r0
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	781a      	ldrb	r2, [r3, #0]
 800813a:	b2cb      	uxtb	r3, r1
 800813c:	4413      	add	r3, r2
 800813e:	b2da      	uxtb	r2, r3
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	701a      	strb	r2, [r3, #0]

  return isSuccess;
 8008144:	7dbb      	ldrb	r3, [r7, #22]
}
 8008146:	4618      	mov	r0, r3
 8008148:	3718      	adds	r7, #24
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	0800cef0 	.word	0x0800cef0
 8008154:	0800cef8 	.word	0x0800cef8

08008158 <dateTime_updateDisplay>:
DateTime_Display_Status_t dateTime_updateDisplay(DateTime_Display_Config_t* const pConfig)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b086      	sub	sp, #24
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  DateTime_Display_Status_t isSuccess           = 0;
 8008160:	2300      	movs	r3, #0
 8008162:	75fb      	strb	r3, [r7, #23]
  uint8_t                   digitSegBufferCount = 0;
 8008164:	2300      	movs	r3, #0
 8008166:	757b      	strb	r3, [r7, #21]
  uint8_t                   segmentCount        = 0;
 8008168:	2300      	movs	r3, #0
 800816a:	75bb      	strb	r3, [r7, #22]
  char                      digitSegBuffer[11];

  //Update Month Display Characters
  for (segmentCount = 0; segmentCount <= 2; segmentCount++)
 800816c:	2300      	movs	r3, #0
 800816e:	75bb      	strb	r3, [r7, #22]
 8008170:	e01e      	b.n	80081b0 <dateTime_updateDisplay+0x58>
  {
    isSuccess |= dateTime_setAlphaSegments(pConfig, segmentCount,
        monthDisplayChars[(pConfig->dateTimeData.Month)-1][2-segmentCount]);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	7b1b      	ldrb	r3, [r3, #12]
 8008176:	1e5a      	subs	r2, r3, #1
 8008178:	7dbb      	ldrb	r3, [r7, #22]
 800817a:	f1c3 0102 	rsb	r1, r3, #2
 800817e:	4848      	ldr	r0, [pc, #288]	@ (80082a0 <dateTime_updateDisplay+0x148>)
 8008180:	4613      	mov	r3, r2
 8008182:	005b      	lsls	r3, r3, #1
 8008184:	4413      	add	r3, r2
 8008186:	4403      	add	r3, r0
 8008188:	440b      	add	r3, r1
 800818a:	781a      	ldrb	r2, [r3, #0]
    isSuccess |= dateTime_setAlphaSegments(pConfig, segmentCount,
 800818c:	7dbb      	ldrb	r3, [r7, #22]
 800818e:	4619      	mov	r1, r3
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f7ff fe9b 	bl	8007ecc <dateTime_setAlphaSegments>
 8008196:	4603      	mov	r3, r0
 8008198:	461a      	mov	r2, r3
 800819a:	7dfb      	ldrb	r3, [r7, #23]
 800819c:	4313      	orrs	r3, r2
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	bf14      	ite	ne
 80081a4:	2301      	movne	r3, #1
 80081a6:	2300      	moveq	r3, #0
 80081a8:	75fb      	strb	r3, [r7, #23]
  for (segmentCount = 0; segmentCount <= 2; segmentCount++)
 80081aa:	7dbb      	ldrb	r3, [r7, #22]
 80081ac:	3301      	adds	r3, #1
 80081ae:	75bb      	strb	r3, [r7, #22]
 80081b0:	7dbb      	ldrb	r3, [r7, #22]
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	d9dd      	bls.n	8008172 <dateTime_updateDisplay+0x1a>
  }

  //Update Day, Year and Time
  digitSegBufferCount = snprintf(digitSegBuffer, sizeof(digitSegBuffer), "%02d", pConfig->dateTimeData.Day);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	7b5b      	ldrb	r3, [r3, #13]
 80081ba:	f107 0008 	add.w	r0, r7, #8
 80081be:	4a39      	ldr	r2, [pc, #228]	@ (80082a4 <dateTime_updateDisplay+0x14c>)
 80081c0:	210b      	movs	r1, #11
 80081c2:	f003 fe77 	bl	800beb4 <sniprintf>
 80081c6:	4603      	mov	r3, r0
 80081c8:	757b      	strb	r3, [r7, #21]
  digitSegBufferCount += snprintf(digitSegBuffer+digitSegBufferCount, sizeof(digitSegBuffer)-digitSegBufferCount,
 80081ca:	7d7b      	ldrb	r3, [r7, #21]
 80081cc:	f107 0208 	add.w	r2, r7, #8
 80081d0:	18d0      	adds	r0, r2, r3
 80081d2:	7d7b      	ldrb	r3, [r7, #21]
 80081d4:	f1c3 010b 	rsb	r1, r3, #11
      "%04d", pConfig->dateTimeData.Year);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	89db      	ldrh	r3, [r3, #14]
  digitSegBufferCount += snprintf(digitSegBuffer+digitSegBufferCount, sizeof(digitSegBuffer)-digitSegBufferCount,
 80081dc:	4a32      	ldr	r2, [pc, #200]	@ (80082a8 <dateTime_updateDisplay+0x150>)
 80081de:	f003 fe69 	bl	800beb4 <sniprintf>
 80081e2:	4603      	mov	r3, r0
 80081e4:	b2da      	uxtb	r2, r3
 80081e6:	7d7b      	ldrb	r3, [r7, #21]
 80081e8:	4413      	add	r3, r2
 80081ea:	757b      	strb	r3, [r7, #21]
  digitSegBufferCount += snprintf(digitSegBuffer+digitSegBufferCount, sizeof(digitSegBuffer)-digitSegBufferCount,
 80081ec:	7d7b      	ldrb	r3, [r7, #21]
 80081ee:	f107 0208 	add.w	r2, r7, #8
 80081f2:	18d0      	adds	r0, r2, r3
 80081f4:	7d7b      	ldrb	r3, [r7, #21]
 80081f6:	f1c3 010b 	rsb	r1, r3, #11
      "%02d", pConfig->dateTimeData.Hour);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	7c1b      	ldrb	r3, [r3, #16]
  digitSegBufferCount += snprintf(digitSegBuffer+digitSegBufferCount, sizeof(digitSegBuffer)-digitSegBufferCount,
 80081fe:	4a29      	ldr	r2, [pc, #164]	@ (80082a4 <dateTime_updateDisplay+0x14c>)
 8008200:	f003 fe58 	bl	800beb4 <sniprintf>
 8008204:	4603      	mov	r3, r0
 8008206:	b2da      	uxtb	r2, r3
 8008208:	7d7b      	ldrb	r3, [r7, #21]
 800820a:	4413      	add	r3, r2
 800820c:	757b      	strb	r3, [r7, #21]
  digitSegBufferCount += snprintf(digitSegBuffer+digitSegBufferCount, sizeof(digitSegBuffer)-digitSegBufferCount,
 800820e:	7d7b      	ldrb	r3, [r7, #21]
 8008210:	f107 0208 	add.w	r2, r7, #8
 8008214:	18d0      	adds	r0, r2, r3
 8008216:	7d7b      	ldrb	r3, [r7, #21]
 8008218:	f1c3 010b 	rsb	r1, r3, #11
      "%02d", pConfig->dateTimeData.Minute);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	7c5b      	ldrb	r3, [r3, #17]
  digitSegBufferCount += snprintf(digitSegBuffer+digitSegBufferCount, sizeof(digitSegBuffer)-digitSegBufferCount,
 8008220:	4a20      	ldr	r2, [pc, #128]	@ (80082a4 <dateTime_updateDisplay+0x14c>)
 8008222:	f003 fe47 	bl	800beb4 <sniprintf>
 8008226:	4603      	mov	r3, r0
 8008228:	b2da      	uxtb	r2, r3
 800822a:	7d7b      	ldrb	r3, [r7, #21]
 800822c:	4413      	add	r3, r2
 800822e:	757b      	strb	r3, [r7, #21]

  for (segmentCount = 0; segmentCount < (sizeof(digitSegBuffer)-1); segmentCount++)
 8008230:	2300      	movs	r3, #0
 8008232:	75bb      	strb	r3, [r7, #22]
 8008234:	e018      	b.n	8008268 <dateTime_updateDisplay+0x110>
  {
    isSuccess |= dateTime_setDigitSegments(pConfig, digitSegmentOrder[segmentCount], digitSegBuffer[segmentCount]);
 8008236:	7dbb      	ldrb	r3, [r7, #22]
 8008238:	4a1c      	ldr	r2, [pc, #112]	@ (80082ac <dateTime_updateDisplay+0x154>)
 800823a:	5cd1      	ldrb	r1, [r2, r3]
 800823c:	7dbb      	ldrb	r3, [r7, #22]
 800823e:	3318      	adds	r3, #24
 8008240:	443b      	add	r3, r7
 8008242:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8008246:	461a      	mov	r2, r3
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f7ff fd9f 	bl	8007d8c <dateTime_setDigitSegments>
 800824e:	4603      	mov	r3, r0
 8008250:	461a      	mov	r2, r3
 8008252:	7dfb      	ldrb	r3, [r7, #23]
 8008254:	4313      	orrs	r3, r2
 8008256:	b2db      	uxtb	r3, r3
 8008258:	2b00      	cmp	r3, #0
 800825a:	bf14      	ite	ne
 800825c:	2301      	movne	r3, #1
 800825e:	2300      	moveq	r3, #0
 8008260:	75fb      	strb	r3, [r7, #23]
  for (segmentCount = 0; segmentCount < (sizeof(digitSegBuffer)-1); segmentCount++)
 8008262:	7dbb      	ldrb	r3, [r7, #22]
 8008264:	3301      	adds	r3, #1
 8008266:	75bb      	strb	r3, [r7, #22]
 8008268:	7dbb      	ldrb	r3, [r7, #22]
 800826a:	2b09      	cmp	r3, #9
 800826c:	d9e3      	bls.n	8008236 <dateTime_updateDisplay+0xde>
  }

  //Update Meridiem
  isSuccess |= dateTime_setLed(pConfig, MERIDIEM_LED_SEGMENT_ADDRESS, (pConfig->dateTimeData.Meridiem << 6));
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	7c9b      	ldrb	r3, [r3, #18]
 8008272:	019b      	lsls	r3, r3, #6
 8008274:	b2db      	uxtb	r3, r3
 8008276:	461a      	mov	r2, r3
 8008278:	2109      	movs	r1, #9
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f7ff fd25 	bl	8007cca <dateTime_setLed>
 8008280:	4603      	mov	r3, r0
 8008282:	461a      	mov	r2, r3
 8008284:	7dfb      	ldrb	r3, [r7, #23]
 8008286:	4313      	orrs	r3, r2
 8008288:	b2db      	uxtb	r3, r3
 800828a:	2b00      	cmp	r3, #0
 800828c:	bf14      	ite	ne
 800828e:	2301      	movne	r3, #1
 8008290:	2300      	moveq	r3, #0
 8008292:	75fb      	strb	r3, [r7, #23]

  return isSuccess;
 8008294:	7dfb      	ldrb	r3, [r7, #23]
}
 8008296:	4618      	mov	r0, r3
 8008298:	3718      	adds	r7, #24
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	0800d050 	.word	0x0800d050
 80082a4:	0800cef0 	.word	0x0800cef0
 80082a8:	0800cef8 	.word	0x0800cef8
 80082ac:	0800d004 	.word	0x0800d004

080082b0 <soundEffects_init>:
uint32_t gRecordingSize           = 0;
uint32_t gPlayedSize              = 0;
uint16_t gSamples[1000];

SoundEffects_Config_t * soundEffects_init(I2S_HandleTypeDef* hi2s, GPIO_TypeDef* const pGpioPort, const uint16_t* const pGpioPin)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b086      	sub	sp, #24
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	607a      	str	r2, [r7, #4]
  SoundEffects_Config_t* pConfig = malloc(sizeof(SoundEffects_Config_t));
 80082bc:	2014      	movs	r0, #20
 80082be:	f003 fc3b 	bl	800bb38 <malloc>
 80082c2:	4603      	mov	r3, r0
 80082c4:	617b      	str	r3, [r7, #20]
  pConfig->hi2s = hi2s;
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	601a      	str	r2, [r3, #0]
  pConfig->pMuteSwitchGpioPort = pGpioPort;
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	68ba      	ldr	r2, [r7, #8]
 80082d0:	605a      	str	r2, [r3, #4]
  pConfig->pMuteSwitchGpioPin = *pGpioPin;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	881a      	ldrh	r2, [r3, #0]
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	811a      	strh	r2, [r3, #8]

  return pConfig;
 80082da:	697b      	ldr	r3, [r7, #20]
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3718      	adds	r7, #24
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <soundEffects_playSound>:
  return 1;
}

SoundEffects_Status_t soundEffects_playSound(SoundEffects_Config_t* pSoundEffectConfig,
    StorageDevice_Config_t* pStorageDeviceConfig, const char* const filename)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	60b9      	str	r1, [r7, #8]
 80082ee:	607a      	str	r2, [r7, #4]

  if (gPlayedSize < gRecordingSize)
 80082f0:	4b18      	ldr	r3, [pc, #96]	@ (8008354 <soundEffects_playSound+0x70>)
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	4b18      	ldr	r3, [pc, #96]	@ (8008358 <soundEffects_playSound+0x74>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d207      	bcs.n	800830c <soundEffects_playSound+0x28>
  {
    HAL_I2S_DMAStop(pSoundEffectConfig->hi2s);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4618      	mov	r0, r3
 8008302:	f7fb fdb5 	bl	8003e70 <HAL_I2S_DMAStop>
    storageDevice_closeFile(pStorageDeviceConfig);
 8008306:	68b8      	ldr	r0, [r7, #8]
 8008308:	f000 f920 	bl	800854c <storageDevice_closeFile>
  }

  gFileReadSize            = 0;
 800830c:	4b13      	ldr	r3, [pc, #76]	@ (800835c <soundEffects_playSound+0x78>)
 800830e:	2200      	movs	r2, #0
 8008310:	601a      	str	r2, [r3, #0]
  gRecordingSize           = 0;
 8008312:	4b11      	ldr	r3, [pc, #68]	@ (8008358 <soundEffects_playSound+0x74>)
 8008314:	2200      	movs	r2, #0
 8008316:	601a      	str	r2, [r3, #0]
  gPlayedSize              = 0;
 8008318:	4b0e      	ldr	r3, [pc, #56]	@ (8008354 <soundEffects_playSound+0x70>)
 800831a:	2200      	movs	r2, #0
 800831c:	601a      	str	r2, [r3, #0]

  storageDevice_readWavDataSize(pStorageDeviceConfig, filename, &gRecordingSize, &gFileReadSize);
 800831e:	4b0f      	ldr	r3, [pc, #60]	@ (800835c <soundEffects_playSound+0x78>)
 8008320:	4a0d      	ldr	r2, [pc, #52]	@ (8008358 <soundEffects_playSound+0x74>)
 8008322:	6879      	ldr	r1, [r7, #4]
 8008324:	68b8      	ldr	r0, [r7, #8]
 8008326:	f000 f927 	bl	8008578 <storageDevice_readWavDataSize>
  storageDevice_readFileData(pStorageDeviceConfig, gSamples, 2000, &gFileReadSize);
 800832a:	4b0c      	ldr	r3, [pc, #48]	@ (800835c <soundEffects_playSound+0x78>)
 800832c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8008330:	490b      	ldr	r1, [pc, #44]	@ (8008360 <soundEffects_playSound+0x7c>)
 8008332:	68b8      	ldr	r0, [r7, #8]
 8008334:	f000 f953 	bl	80085de <storageDevice_readFileData>
  HAL_I2S_Transmit_DMA(pSoundEffectConfig->hi2s,(uint16_t *) gSamples, 1000);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008340:	4907      	ldr	r1, [pc, #28]	@ (8008360 <soundEffects_playSound+0x7c>)
 8008342:	4618      	mov	r0, r3
 8008344:	f7fb fcf0 	bl	8003d28 <HAL_I2S_Transmit_DMA>
  //soundEffects_update(pSoundEffectConfig, pStorageDeviceConfig);
  //storageDevice_closeFile(pStorageDeviceConfig);

  return 1;
 8008348:	2301      	movs	r3, #1
}
 800834a:	4618      	mov	r0, r3
 800834c:	3710      	adds	r7, #16
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	20000398 	.word	0x20000398
 8008358:	20000394 	.word	0x20000394
 800835c:	20000390 	.word	0x20000390
 8008360:	2000039c 	.word	0x2000039c

08008364 <soundEffects_update>:

SoundEffects_Status_t soundEffects_update(SoundEffects_Config_t* pSoundEffectConfig,
    StorageDevice_Config_t * pStorageDeviceConfig)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  if (gPlayedSize >= gRecordingSize)
 800836e:	4b17      	ldr	r3, [pc, #92]	@ (80083cc <soundEffects_update+0x68>)
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	4b17      	ldr	r3, [pc, #92]	@ (80083d0 <soundEffects_update+0x6c>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	429a      	cmp	r2, r3
 8008378:	d307      	bcc.n	800838a <soundEffects_update+0x26>
  {
    HAL_I2S_DMAStop(pSoundEffectConfig->hi2s);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4618      	mov	r0, r3
 8008380:	f7fb fd76 	bl	8003e70 <HAL_I2S_DMAStop>
    storageDevice_closeFile(pStorageDeviceConfig);
 8008384:	6838      	ldr	r0, [r7, #0]
 8008386:	f000 f8e1 	bl	800854c <storageDevice_closeFile>
  }

  if(gCallbackResult == HALF_COMPLETED)
 800838a:	4b12      	ldr	r3, [pc, #72]	@ (80083d4 <soundEffects_update+0x70>)
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	2b01      	cmp	r3, #1
 8008390:	d109      	bne.n	80083a6 <soundEffects_update+0x42>
  {

    storageDevice_readFileData(pStorageDeviceConfig, gSamples, 1000, &gFileReadSize);
 8008392:	4b11      	ldr	r3, [pc, #68]	@ (80083d8 <soundEffects_update+0x74>)
 8008394:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008398:	4910      	ldr	r1, [pc, #64]	@ (80083dc <soundEffects_update+0x78>)
 800839a:	6838      	ldr	r0, [r7, #0]
 800839c:	f000 f91f 	bl	80085de <storageDevice_readFileData>

    gCallbackResult = UNKNOWN;
 80083a0:	4b0c      	ldr	r3, [pc, #48]	@ (80083d4 <soundEffects_update+0x70>)
 80083a2:	2200      	movs	r2, #0
 80083a4:	701a      	strb	r2, [r3, #0]
  }

  if(gCallbackResult == FULL_COMPLETED)
 80083a6:	4b0b      	ldr	r3, [pc, #44]	@ (80083d4 <soundEffects_update+0x70>)
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	2b02      	cmp	r3, #2
 80083ac:	d109      	bne.n	80083c2 <soundEffects_update+0x5e>
  {
    storageDevice_readFileData(pStorageDeviceConfig, &gSamples[500], 1000, &gFileReadSize);
 80083ae:	4b0a      	ldr	r3, [pc, #40]	@ (80083d8 <soundEffects_update+0x74>)
 80083b0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80083b4:	490a      	ldr	r1, [pc, #40]	@ (80083e0 <soundEffects_update+0x7c>)
 80083b6:	6838      	ldr	r0, [r7, #0]
 80083b8:	f000 f911 	bl	80085de <storageDevice_readFileData>

    gCallbackResult = UNKNOWN;
 80083bc:	4b05      	ldr	r3, [pc, #20]	@ (80083d4 <soundEffects_update+0x70>)
 80083be:	2200      	movs	r2, #0
 80083c0:	701a      	strb	r2, [r3, #0]
  }

return 1;
 80083c2:	2301      	movs	r3, #1
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3708      	adds	r7, #8
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	20000398 	.word	0x20000398
 80083d0:	20000394 	.word	0x20000394
 80083d4:	2000038c 	.word	0x2000038c
 80083d8:	20000390 	.word	0x20000390
 80083dc:	2000039c 	.word	0x2000039c
 80083e0:	20000784 	.word	0x20000784

080083e4 <HAL_I2S_TxHalfCpltCallback>:



void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  gCallbackResult = HALF_COMPLETED;
 80083ec:	4b04      	ldr	r3, [pc, #16]	@ (8008400 <HAL_I2S_TxHalfCpltCallback+0x1c>)
 80083ee:	2201      	movs	r2, #1
 80083f0:	701a      	strb	r2, [r3, #0]
}
 80083f2:	bf00      	nop
 80083f4:	370c      	adds	r7, #12
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr
 80083fe:	bf00      	nop
 8008400:	2000038c 	.word	0x2000038c

08008404 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  gCallbackResult =   FULL_COMPLETED;
 800840c:	4b07      	ldr	r3, [pc, #28]	@ (800842c <HAL_I2S_TxCpltCallback+0x28>)
 800840e:	2202      	movs	r2, #2
 8008410:	701a      	strb	r2, [r3, #0]
  gPlayedSize     +=  1000;
 8008412:	4b07      	ldr	r3, [pc, #28]	@ (8008430 <HAL_I2S_TxCpltCallback+0x2c>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800841a:	4a05      	ldr	r2, [pc, #20]	@ (8008430 <HAL_I2S_TxCpltCallback+0x2c>)
 800841c:	6013      	str	r3, [r2, #0]

}
 800841e:	bf00      	nop
 8008420:	370c      	adds	r7, #12
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop
 800842c:	2000038c 	.word	0x2000038c
 8008430:	20000398 	.word	0x20000398

08008434 <storageDevice_init>:
//Private Function Definitions
StorageDevice_Status_t storageDevice_closeFile(StorageDevice_Config_t * pConfig);


StorageDevice_Config_t* storageDevice_init(SPI_HandleTypeDef * hspi)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  StorageDevice_Config_t* pConfig = malloc(sizeof(StorageDevice_Config_t));
 800843c:	f44f 608f 	mov.w	r0, #1144	@ 0x478
 8008440:	f003 fb7a 	bl	800bb38 <malloc>
 8008444:	4603      	mov	r3, r0
 8008446:	60fb      	str	r3, [r7, #12]
  pConfig->hspi = hspi;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	601a      	str	r2, [r3, #0]

//  storageDevice_demountDrive(pConfig);

  storageDevice_mountDrive(pConfig);
 800844e:	68f8      	ldr	r0, [r7, #12]
 8008450:	f000 f806 	bl	8008460 <storageDevice_mountDrive>

  return pConfig;
 8008454:	68fb      	ldr	r3, [r7, #12]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
	...

08008460 <storageDevice_mountDrive>:
  return isSuccess;

}

StorageDevice_Status_t storageDevice_mountDrive(StorageDevice_Config_t * pConfig)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  StorageDevice_Status_t isSuccess = true;
 8008468:	2301      	movs	r3, #1
 800846a:	73fb      	strb	r3, [r7, #15]

  //Recommended delay while SD Card Boots
  HAL_Delay(100);
 800846c:	2064      	movs	r0, #100	@ 0x64
 800846e:	f7f9 f8bb 	bl	80015e8 <HAL_Delay>

  pConfig->fres = f_mount(&pConfig->FatFs, "", 1); //1=mount now
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	3304      	adds	r3, #4
 8008476:	2201      	movs	r2, #1
 8008478:	4922      	ldr	r1, [pc, #136]	@ (8008504 <storageDevice_mountDrive+0xa4>)
 800847a:	4618      	mov	r0, r3
 800847c:	f002 fc5a 	bl	800ad34 <f_mount>
 8008480:	4603      	mov	r3, r0
 8008482:	461a      	mov	r2, r3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f883 2464 	strb.w	r2, [r3, #1124]	@ 0x464
  if (pConfig->fres != FR_OK) {
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f893 3464 	ldrb.w	r3, [r3, #1124]	@ 0x464
 8008490:	2b00      	cmp	r3, #0
 8008492:	d001      	beq.n	8008498 <storageDevice_mountDrive+0x38>
    isSuccess = 0;
 8008494:	2300      	movs	r3, #0
 8008496:	73fb      	strb	r3, [r7, #15]
  //while(1);
  }

  pConfig->fres = f_getfree("", &pConfig->free_clusters, &pConfig->getFreeFs);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f503 618d 	add.w	r1, r3, #1128	@ 0x468
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f203 4374 	addw	r3, r3, #1140	@ 0x474
 80084a4:	461a      	mov	r2, r3
 80084a6:	4817      	ldr	r0, [pc, #92]	@ (8008504 <storageDevice_mountDrive+0xa4>)
 80084a8:	f003 fa34 	bl	800b914 <f_getfree>
 80084ac:	4603      	mov	r3, r0
 80084ae:	461a      	mov	r2, r3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f883 2464 	strb.w	r2, [r3, #1124]	@ 0x464
  if (pConfig->fres != FR_OK) {
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f893 3464 	ldrb.w	r3, [r3, #1124]	@ 0x464
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d001      	beq.n	80084c4 <storageDevice_mountDrive+0x64>
    isSuccess = 0;
 80084c0:	2300      	movs	r3, #0
 80084c2:	73fb      	strb	r3, [r7, #15]
  //while(1);
  }

  pConfig->total_sectors = (pConfig->getFreeFs->n_fatent - 2) * pConfig->getFreeFs->csize;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 3474 	ldr.w	r3, [r3, #1140]	@ 0x474
 80084ca:	695b      	ldr	r3, [r3, #20]
 80084cc:	3b02      	subs	r3, #2
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	f8d2 2474 	ldr.w	r2, [r2, #1140]	@ 0x474
 80084d4:	8952      	ldrh	r2, [r2, #10]
 80084d6:	fb03 f202 	mul.w	r2, r3, r2
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f8c3 2470 	str.w	r2, [r3, #1136]	@ 0x470
  pConfig->free_sectors = pConfig->free_clusters * pConfig->getFreeFs->csize;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 3468 	ldr.w	r3, [r3, #1128]	@ 0x468
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	f8d2 2474 	ldr.w	r2, [r2, #1140]	@ 0x474
 80084ec:	8952      	ldrh	r2, [r2, #10]
 80084ee:	fb03 f202 	mul.w	r2, r3, r2
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8c3 246c 	str.w	r2, [r3, #1132]	@ 0x46c

  return isSuccess;
 80084f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	0800cf00 	.word	0x0800cf00

08008508 <storageDevice_openFile>:
  }
  return isSuccess;
}

StorageDevice_Status_t storageDevice_openFile(StorageDevice_Config_t * pConfig, TCHAR* const filename, BYTE mode)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b086      	sub	sp, #24
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	4613      	mov	r3, r2
 8008514:	71fb      	strb	r3, [r7, #7]
  StorageDevice_Status_t isSuccess = true;
 8008516:	2301      	movs	r3, #1
 8008518:	75fb      	strb	r3, [r7, #23]

  pConfig->fres = f_open(&pConfig->fil, filename, mode);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8008520:	79fa      	ldrb	r2, [r7, #7]
 8008522:	68b9      	ldr	r1, [r7, #8]
 8008524:	4618      	mov	r0, r3
 8008526:	f002 fc4b 	bl	800adc0 <f_open>
 800852a:	4603      	mov	r3, r0
 800852c:	461a      	mov	r2, r3
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f883 2464 	strb.w	r2, [r3, #1124]	@ 0x464
  if (pConfig->fres != FR_OK) {
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f893 3464 	ldrb.w	r3, [r3, #1124]	@ 0x464
 800853a:	2b00      	cmp	r3, #0
 800853c:	d001      	beq.n	8008542 <storageDevice_openFile+0x3a>
    isSuccess = false;
 800853e:	2300      	movs	r3, #0
 8008540:	75fb      	strb	r3, [r7, #23]
  //while(1);
  }

  return isSuccess;
 8008542:	7dfb      	ldrb	r3, [r7, #23]
}
 8008544:	4618      	mov	r0, r3
 8008546:	3718      	adds	r7, #24
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <storageDevice_closeFile>:

StorageDevice_Status_t storageDevice_closeFile(StorageDevice_Config_t * pConfig)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  StorageDevice_Status_t isSuccess = true;
 8008554:	2301      	movs	r3, #1
 8008556:	73fb      	strb	r3, [r7, #15]

  pConfig->fres = f_close(&pConfig->fil);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800855e:	4618      	mov	r0, r3
 8008560:	f002 ffa5 	bl	800b4ae <f_close>
 8008564:	4603      	mov	r3, r0
 8008566:	461a      	mov	r2, r3
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f883 2464 	strb.w	r2, [r3, #1124]	@ 0x464

  return isSuccess;
 800856e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008570:	4618      	mov	r0, r3
 8008572:	3710      	adds	r7, #16
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <storageDevice_readWavDataSize>:
  return isSuccess;
}

StorageDevice_Status_t storageDevice_readWavDataSize(StorageDevice_Config_t * pConfig, const char* const filename,
    uint32_t* pRecordingSize, uint32_t* pPlayedSize)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b086      	sub	sp, #24
 800857c:	af00      	add	r7, sp, #0
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	60b9      	str	r1, [r7, #8]
 8008582:	607a      	str	r2, [r7, #4]
 8008584:	603b      	str	r3, [r7, #0]
  StorageDevice_Status_t isSuccess = false;
 8008586:	2300      	movs	r3, #0
 8008588:	75fb      	strb	r3, [r7, #23]

  isSuccess = storageDevice_openFile(pConfig, (TCHAR*)filename, FA_READ);
 800858a:	2201      	movs	r2, #1
 800858c:	68b9      	ldr	r1, [r7, #8]
 800858e:	68f8      	ldr	r0, [r7, #12]
 8008590:	f7ff ffba 	bl	8008508 <storageDevice_openFile>
 8008594:	4603      	mov	r3, r0
 8008596:	75fb      	strb	r3, [r7, #23]

  pConfig->fres = f_lseek(&pConfig->fil, 40);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800859e:	2128      	movs	r1, #40	@ 0x28
 80085a0:	4618      	mov	r0, r3
 80085a2:	f002 ffae 	bl	800b502 <f_lseek>
 80085a6:	4603      	mov	r3, r0
 80085a8:	461a      	mov	r2, r3
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f883 2464 	strb.w	r2, [r3, #1124]	@ 0x464

  pConfig->fres = f_read(&pConfig->fil, pRecordingSize, 4, (UINT *) pPlayedSize);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f503 700d 	add.w	r0, r3, #564	@ 0x234
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	2204      	movs	r2, #4
 80085ba:	6879      	ldr	r1, [r7, #4]
 80085bc:	f002 fdba 	bl	800b134 <f_read>
 80085c0:	4603      	mov	r3, r0
 80085c2:	461a      	mov	r2, r3
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f883 2464 	strb.w	r2, [r3, #1124]	@ 0x464

  *pRecordingSize /= 2;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	085a      	lsrs	r2, r3, #1
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	601a      	str	r2, [r3, #0]

  return isSuccess;
 80085d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3718      	adds	r7, #24
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <storageDevice_readFileData>:

StorageDevice_Status_t storageDevice_readFileData(StorageDevice_Config_t * pConfig, uint16_t* dataBuffer,
    uint32_t bytesToRead, uint32_t* pBytesRead)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b086      	sub	sp, #24
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	60f8      	str	r0, [r7, #12]
 80085e6:	60b9      	str	r1, [r7, #8]
 80085e8:	607a      	str	r2, [r7, #4]
 80085ea:	603b      	str	r3, [r7, #0]
  StorageDevice_Status_t isSuccess = false;
 80085ec:	2300      	movs	r3, #0
 80085ee:	75fb      	strb	r3, [r7, #23]

  pConfig->fres = f_read(&pConfig->fil, dataBuffer, (UINT) bytesToRead, (UINT *) pBytesRead);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f503 700d 	add.w	r0, r3, #564	@ 0x234
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	68b9      	ldr	r1, [r7, #8]
 80085fc:	f002 fd9a 	bl	800b134 <f_read>
 8008600:	4603      	mov	r3, r0
 8008602:	461a      	mov	r2, r3
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f883 2464 	strb.w	r2, [r3, #1124]	@ 0x464

  return isSuccess;
 800860a:	7dfb      	ldrb	r3, [r7, #23]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3718      	adds	r7, #24
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <timeCircuit_control_init>:

TimeCircuit_Control_Status_t timeCircuit_control_clearDisplays(TimeCircuit_Control_Config_t* const pConfig);

TimeCircuit_Control_Config_t* timeCircuit_control_init(I2C_HandleTypeDef* const hi2c, RTC_HandleTypeDef* hrtc,
    SPI_HandleTypeDef* hspi, I2S_HandleTypeDef* hi2s)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b086      	sub	sp, #24
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	607a      	str	r2, [r7, #4]
 8008620:	603b      	str	r3, [r7, #0]
  TimeCircuit_Control_Config_t* pConfig = malloc(sizeof(TimeCircuit_Control_Config_t));
 8008622:	2050      	movs	r0, #80	@ 0x50
 8008624:	f003 fa88 	bl	800bb38 <malloc>
 8008628:	4603      	mov	r3, r0
 800862a:	617b      	str	r3, [r7, #20]
  pConfig->hi2c = hi2c;
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	601a      	str	r2, [r3, #0]
  pConfig->hrtc = hrtc;
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	68ba      	ldr	r2, [r7, #8]
 8008636:	605a      	str	r2, [r3, #4]
  pConfig->hspi = hspi;
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	609a      	str	r2, [r3, #8]
  pConfig->hi2s = hi2s;
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	683a      	ldr	r2, [r7, #0]
 8008642:	60da      	str	r2, [r3, #12]

  //Initialise the time circuit displays
  pConfig->pDestinationTime  = dateTime_display_init(hi2c, DESTINATION_DISPLAY_I2C_ADDRESS);
 8008644:	2171      	movs	r1, #113	@ 0x71
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	f7ff f8f4 	bl	8007834 <dateTime_display_init>
 800864c:	4602      	mov	r2, r0
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	611a      	str	r2, [r3, #16]
  pConfig->pPresentTime      = dateTime_display_init(hi2c, PRESENT_DISPLAY_I2C_ADDRESS);
 8008652:	2172      	movs	r1, #114	@ 0x72
 8008654:	68f8      	ldr	r0, [r7, #12]
 8008656:	f7ff f8ed 	bl	8007834 <dateTime_display_init>
 800865a:	4602      	mov	r2, r0
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	615a      	str	r2, [r3, #20]
  pConfig->pLastDepartedTime = dateTime_display_init(hi2c, DEPARTED_DISPLAY_I2C_ADDRESS);
 8008660:	2174      	movs	r1, #116	@ 0x74
 8008662:	68f8      	ldr	r0, [r7, #12]
 8008664:	f7ff f8e6 	bl	8007834 <dateTime_display_init>
 8008668:	4602      	mov	r2, r0
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	619a      	str	r2, [r3, #24]

  //Initialise SD Card
  pConfig->pStorageDeviceConfig = storageDevice_init(hspi);
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f7ff fee0 	bl	8008434 <storageDevice_init>
 8008674:	4602      	mov	r2, r0
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	649a      	str	r2, [r3, #72]	@ 0x48

  //Initialise Sound Effects
  pConfig->pSoundEffectConfig = soundEffects_init(hi2s, MUTE_SWITCH_GPIO_PORT, MUTE_SWITCH_PIN);
 800867a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800867e:	4911      	ldr	r1, [pc, #68]	@ (80086c4 <timeCircuit_control_init+0xb0>)
 8008680:	6838      	ldr	r0, [r7, #0]
 8008682:	f7ff fe15 	bl	80082b0 <soundEffects_init>
 8008686:	4602      	mov	r2, r0
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	64da      	str	r2, [r3, #76]	@ 0x4c

  //Initialise the time circuit keypad
  pConfig->pTimeCircuitKeypad = keypad3x4w_init(gKeypadPinConfig);
 800868c:	480e      	ldr	r0, [pc, #56]	@ (80086c8 <timeCircuit_control_init+0xb4>)
 800868e:	f7ff f826 	bl	80076de <keypad3x4w_init>
 8008692:	4602      	mov	r2, r0
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	61da      	str	r2, [r3, #28]

  //Play TC Start Up Sound
  soundEffects_playSound(pConfig->pSoundEffectConfig, pConfig->pStorageDeviceConfig, "enter.wav");
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086a0:	4a0a      	ldr	r2, [pc, #40]	@ (80086cc <timeCircuit_control_init+0xb8>)
 80086a2:	4619      	mov	r1, r3
 80086a4:	f7ff fe1e 	bl	80082e4 <soundEffects_playSound>

  //Set displays to last stored values or defaults
  timeCircuit_control_updateStartUpDateTimes(pConfig);
 80086a8:	6978      	ldr	r0, [r7, #20]
 80086aa:	f000 fa59 	bl	8008b60 <timeCircuit_control_updateStartUpDateTimes>

  //Update display with retrieved date times
  timeCircuit_control_updateDisplays(pConfig);
 80086ae:	6978      	ldr	r0, [r7, #20]
 80086b0:	f000 f882 	bl	80087b8 <timeCircuit_control_updateDisplays>

  //Update RTC with retrieved present date time
  timeCircuit_control_setRtcDateTime(pConfig);
 80086b4:	6978      	ldr	r0, [r7, #20]
 80086b6:	f000 f9d4 	bl	8008a62 <timeCircuit_control_setRtcDateTime>



  return pConfig;
 80086ba:	697b      	ldr	r3, [r7, #20]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3718      	adds	r7, #24
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	40020800 	.word	0x40020800
 80086c8:	0800d0d0 	.word	0x0800d0d0
 80086cc:	0800cf04 	.word	0x0800cf04

080086d0 <timeCircuit_control_clearDisplays>:
  free (pConfig);
  return 1;
}

TimeCircuit_Control_Status_t timeCircuit_control_clearDisplays(TimeCircuit_Control_Config_t* const pConfig)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = 1;
 80086d8:	2301      	movs	r3, #1
 80086da:	73fb      	strb	r3, [r7, #15]

  isSuccess &= dateTime_clearDisplay(pConfig->pDestinationTime);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	691b      	ldr	r3, [r3, #16]
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7ff fab4 	bl	8007c4e <dateTime_clearDisplay>
 80086e6:	4603      	mov	r3, r0
 80086e8:	461a      	mov	r2, r3
 80086ea:	7bfb      	ldrb	r3, [r7, #15]
 80086ec:	4013      	ands	r3, r2
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	bf14      	ite	ne
 80086f2:	2301      	movne	r3, #1
 80086f4:	2300      	moveq	r3, #0
 80086f6:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_clearDisplay(pConfig->pPresentTime);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	695b      	ldr	r3, [r3, #20]
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7ff faa6 	bl	8007c4e <dateTime_clearDisplay>
 8008702:	4603      	mov	r3, r0
 8008704:	461a      	mov	r2, r3
 8008706:	7bfb      	ldrb	r3, [r7, #15]
 8008708:	4013      	ands	r3, r2
 800870a:	2b00      	cmp	r3, #0
 800870c:	bf14      	ite	ne
 800870e:	2301      	movne	r3, #1
 8008710:	2300      	moveq	r3, #0
 8008712:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_clearDisplay(pConfig->pLastDepartedTime);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	699b      	ldr	r3, [r3, #24]
 8008718:	4618      	mov	r0, r3
 800871a:	f7ff fa98 	bl	8007c4e <dateTime_clearDisplay>
 800871e:	4603      	mov	r3, r0
 8008720:	461a      	mov	r2, r3
 8008722:	7bfb      	ldrb	r3, [r7, #15]
 8008724:	4013      	ands	r3, r2
 8008726:	2b00      	cmp	r3, #0
 8008728:	bf14      	ite	ne
 800872a:	2301      	movne	r3, #1
 800872c:	2300      	moveq	r3, #0
 800872e:	73fb      	strb	r3, [r7, #15]

  return isSuccess;
 8008730:	7bfb      	ldrb	r3, [r7, #15]
}
 8008732:	4618      	mov	r0, r3
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
	...

0800873c <timeCircuit_control_setDefaultDateTimes>:

TimeCircuit_Control_Status_t timeCircuit_control_setDefaultDateTimes(TimeCircuit_Control_Config_t* const pConfig)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = 1;
 8008744:	2301      	movs	r3, #1
 8008746:	73fb      	strb	r3, [r7, #15]

  isSuccess &= dateTime_setDisplayData(pConfig->pDestinationTime, gDefaultDestinationTime);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	691b      	ldr	r3, [r3, #16]
 800874c:	4917      	ldr	r1, [pc, #92]	@ (80087ac <timeCircuit_control_setDefaultDateTimes+0x70>)
 800874e:	4618      	mov	r0, r3
 8008750:	f7ff f9bc 	bl	8007acc <dateTime_setDisplayData>
 8008754:	4603      	mov	r3, r0
 8008756:	461a      	mov	r2, r3
 8008758:	7bfb      	ldrb	r3, [r7, #15]
 800875a:	4013      	ands	r3, r2
 800875c:	2b00      	cmp	r3, #0
 800875e:	bf14      	ite	ne
 8008760:	2301      	movne	r3, #1
 8008762:	2300      	moveq	r3, #0
 8008764:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_setDisplayData(pConfig->pPresentTime, gDefaultPresentTime);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	695b      	ldr	r3, [r3, #20]
 800876a:	4911      	ldr	r1, [pc, #68]	@ (80087b0 <timeCircuit_control_setDefaultDateTimes+0x74>)
 800876c:	4618      	mov	r0, r3
 800876e:	f7ff f9ad 	bl	8007acc <dateTime_setDisplayData>
 8008772:	4603      	mov	r3, r0
 8008774:	461a      	mov	r2, r3
 8008776:	7bfb      	ldrb	r3, [r7, #15]
 8008778:	4013      	ands	r3, r2
 800877a:	2b00      	cmp	r3, #0
 800877c:	bf14      	ite	ne
 800877e:	2301      	movne	r3, #1
 8008780:	2300      	moveq	r3, #0
 8008782:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_setDisplayData(pConfig->pLastDepartedTime, gDefaultLastDepartedTime);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	699b      	ldr	r3, [r3, #24]
 8008788:	490a      	ldr	r1, [pc, #40]	@ (80087b4 <timeCircuit_control_setDefaultDateTimes+0x78>)
 800878a:	4618      	mov	r0, r3
 800878c:	f7ff f99e 	bl	8007acc <dateTime_setDisplayData>
 8008790:	4603      	mov	r3, r0
 8008792:	461a      	mov	r2, r3
 8008794:	7bfb      	ldrb	r3, [r7, #15]
 8008796:	4013      	ands	r3, r2
 8008798:	2b00      	cmp	r3, #0
 800879a:	bf14      	ite	ne
 800879c:	2301      	movne	r3, #1
 800879e:	2300      	moveq	r3, #0
 80087a0:	73fb      	strb	r3, [r7, #15]

  return isSuccess;
 80087a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3710      	adds	r7, #16
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}
 80087ac:	0800d080 	.word	0x0800d080
 80087b0:	0800d08c 	.word	0x0800d08c
 80087b4:	0800d098 	.word	0x0800d098

080087b8 <timeCircuit_control_updateDisplays>:

TimeCircuit_Control_Status_t timeCircuit_control_updateDisplays(TimeCircuit_Control_Config_t* const pConfig)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = false;
 80087c0:	2300      	movs	r3, #0
 80087c2:	73fb      	strb	r3, [r7, #15]

  isSuccess = dateTime_updateDisplay(pConfig->pDestinationTime);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	691b      	ldr	r3, [r3, #16]
 80087c8:	4618      	mov	r0, r3
 80087ca:	f7ff fcc5 	bl	8008158 <dateTime_updateDisplay>
 80087ce:	4603      	mov	r3, r0
 80087d0:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_updateDisplay(pConfig->pPresentTime);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	695b      	ldr	r3, [r3, #20]
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7ff fcbe 	bl	8008158 <dateTime_updateDisplay>
 80087dc:	4603      	mov	r3, r0
 80087de:	461a      	mov	r2, r3
 80087e0:	7bfb      	ldrb	r3, [r7, #15]
 80087e2:	4013      	ands	r3, r2
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	bf14      	ite	ne
 80087e8:	2301      	movne	r3, #1
 80087ea:	2300      	moveq	r3, #0
 80087ec:	73fb      	strb	r3, [r7, #15]
  isSuccess &= dateTime_updateDisplay(pConfig->pLastDepartedTime);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	699b      	ldr	r3, [r3, #24]
 80087f2:	4618      	mov	r0, r3
 80087f4:	f7ff fcb0 	bl	8008158 <dateTime_updateDisplay>
 80087f8:	4603      	mov	r3, r0
 80087fa:	461a      	mov	r2, r3
 80087fc:	7bfb      	ldrb	r3, [r7, #15]
 80087fe:	4013      	ands	r3, r2
 8008800:	2b00      	cmp	r3, #0
 8008802:	bf14      	ite	ne
 8008804:	2301      	movne	r3, #1
 8008806:	2300      	moveq	r3, #0
 8008808:	73fb      	strb	r3, [r7, #15]

  return isSuccess;
 800880a:	7bfb      	ldrb	r3, [r7, #15]
}
 800880c:	4618      	mov	r0, r3
 800880e:	3710      	adds	r7, #16
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <timeCircuit_control_checkButtonActivation>:

TimeCircuit_Control_Status_t timeCircuit_control_checkButtonActivation(const bool* const isbuttonActivated,
    bool* hasButtonActivated, uint32_t* previousTimeMS)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b086      	sub	sp, #24
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	607a      	str	r2, [r7, #4]
  TimeCircuit_Control_Status_t hasStateChanged = 0;
 8008820:	2300      	movs	r3, #0
 8008822:	75fb      	strb	r3, [r7, #23]
  uint32_t currentTimeMS = HAL_GetTick();
 8008824:	f7f8 fed4 	bl	80015d0 <HAL_GetTick>
 8008828:	6138      	str	r0, [r7, #16]

  //Verify that the button state hasn't changed
  if (*isbuttonActivated != *hasButtonActivated)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	781a      	ldrb	r2, [r3, #0]
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	429a      	cmp	r2, r3
 8008834:	d00e      	beq.n	8008854 <timeCircuit_control_checkButtonActivation+0x40>
  {
    //Filter out false positive button activations
    if ((currentTimeMS - *previousTimeMS) > BUTTON_DEBOUNCE_TIME_MS)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	693a      	ldr	r2, [r7, #16]
 800883c:	1ad3      	subs	r3, r2, r3
 800883e:	2b64      	cmp	r3, #100	@ 0x64
 8008840:	d908      	bls.n	8008854 <timeCircuit_control_checkButtonActivation+0x40>
    {
      *previousTimeMS = currentTimeMS;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	693a      	ldr	r2, [r7, #16]
 8008846:	601a      	str	r2, [r3, #0]
      hasStateChanged = true;
 8008848:	2301      	movs	r3, #1
 800884a:	75fb      	strb	r3, [r7, #23]
      *hasButtonActivated = *isbuttonActivated;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	781a      	ldrb	r2, [r3, #0]
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	701a      	strb	r2, [r3, #0]
    }
  }
  return hasStateChanged;
 8008854:	7dfb      	ldrb	r3, [r7, #23]
}
 8008856:	4618      	mov	r0, r3
 8008858:	3718      	adds	r7, #24
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
	...

08008860 <timeCircuit_control_readInputDateTime>:

TimeCircuit_Control_Status_t timeCircuit_control_readInputDateTime(TimeCircuit_Control_Config_t * const pConfig)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = 1;
 8008868:	2301      	movs	r3, #1
 800886a:	73fb      	strb	r3, [r7, #15]
  bool isButtonActivated                  = false;
 800886c:	2300      	movs	r3, #0
 800886e:	737b      	strb	r3, [r7, #13]
  bool hasButtonStateChanged              = false;
 8008870:	2300      	movs	r3, #0
 8008872:	73bb      	strb	r3, [r7, #14]

  static bool hasButtonActivated          = false;
  static uint32_t previousTime            = 0;

  isButtonActivated  = keypad3x4w_readKeypad(pConfig->pTimeCircuitKeypad, &pConfig->keypadInputValue);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	69da      	ldr	r2, [r3, #28]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	3344      	adds	r3, #68	@ 0x44
 800887c:	4619      	mov	r1, r3
 800887e:	4610      	mov	r0, r2
 8008880:	f7fe ff6e 	bl	8007760 <keypad3x4w_readKeypad>
 8008884:	4603      	mov	r3, r0
 8008886:	737b      	strb	r3, [r7, #13]
  hasButtonStateChanged = timeCircuit_control_checkButtonActivation(&isButtonActivated, &hasButtonActivated,
 8008888:	f107 030d 	add.w	r3, r7, #13
 800888c:	4a52      	ldr	r2, [pc, #328]	@ (80089d8 <timeCircuit_control_readInputDateTime+0x178>)
 800888e:	4953      	ldr	r1, [pc, #332]	@ (80089dc <timeCircuit_control_readInputDateTime+0x17c>)
 8008890:	4618      	mov	r0, r3
 8008892:	f7ff ffbf 	bl	8008814 <timeCircuit_control_checkButtonActivation>
 8008896:	4603      	mov	r3, r0
 8008898:	73bb      	strb	r3, [r7, #14]
        &previousTime);

  if ((hasButtonStateChanged == true) && (isButtonActivated == true))
 800889a:	7bbb      	ldrb	r3, [r7, #14]
 800889c:	2b00      	cmp	r3, #0
 800889e:	f000 808d 	beq.w	80089bc <timeCircuit_control_readInputDateTime+0x15c>
 80088a2:	7b7b      	ldrb	r3, [r7, #13]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f000 8089 	beq.w	80089bc <timeCircuit_control_readInputDateTime+0x15c>
  {
    pConfig->keypadInput[pConfig->keypadInputCount] = pConfig->keypadInputValue;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80088b0:	4619      	mov	r1, r3
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	440b      	add	r3, r1
 80088bc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    pConfig->keypadInputCount++;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80088c6:	3301      	adds	r3, #1
 80088c8:	b2da      	uxtb	r2, r3
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    switch(pConfig->keypadInputValue)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80088d6:	2b09      	cmp	r3, #9
 80088d8:	d870      	bhi.n	80089bc <timeCircuit_control_readInputDateTime+0x15c>
 80088da:	a201      	add	r2, pc, #4	@ (adr r2, 80088e0 <timeCircuit_control_readInputDateTime+0x80>)
 80088dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e0:	08008909 	.word	0x08008909
 80088e4:	0800891b 	.word	0x0800891b
 80088e8:	0800892d 	.word	0x0800892d
 80088ec:	0800893f 	.word	0x0800893f
 80088f0:	08008951 	.word	0x08008951
 80088f4:	08008963 	.word	0x08008963
 80088f8:	08008975 	.word	0x08008975
 80088fc:	08008987 	.word	0x08008987
 8008900:	08008999 	.word	0x08008999
 8008904:	080089ab 	.word	0x080089ab
    {
      case 0:
        soundEffects_playSound(pConfig->pSoundEffectConfig, pConfig->pStorageDeviceConfig, "Dtmf-0.wav");
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008910:	4a33      	ldr	r2, [pc, #204]	@ (80089e0 <timeCircuit_control_readInputDateTime+0x180>)
 8008912:	4619      	mov	r1, r3
 8008914:	f7ff fce6 	bl	80082e4 <soundEffects_playSound>
        break;
 8008918:	e050      	b.n	80089bc <timeCircuit_control_readInputDateTime+0x15c>
      case 1:
        soundEffects_playSound(pConfig->pSoundEffectConfig, pConfig->pStorageDeviceConfig, "Dtmf-1.wav");
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008922:	4a30      	ldr	r2, [pc, #192]	@ (80089e4 <timeCircuit_control_readInputDateTime+0x184>)
 8008924:	4619      	mov	r1, r3
 8008926:	f7ff fcdd 	bl	80082e4 <soundEffects_playSound>
        break;
 800892a:	e047      	b.n	80089bc <timeCircuit_control_readInputDateTime+0x15c>
      case 2:
        soundEffects_playSound(pConfig->pSoundEffectConfig, pConfig->pStorageDeviceConfig, "Dtmf-2.wav");
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008934:	4a2c      	ldr	r2, [pc, #176]	@ (80089e8 <timeCircuit_control_readInputDateTime+0x188>)
 8008936:	4619      	mov	r1, r3
 8008938:	f7ff fcd4 	bl	80082e4 <soundEffects_playSound>
        break;
 800893c:	e03e      	b.n	80089bc <timeCircuit_control_readInputDateTime+0x15c>
      case 3:
        soundEffects_playSound(pConfig->pSoundEffectConfig, pConfig->pStorageDeviceConfig, "Dtmf-3.wav");
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008946:	4a29      	ldr	r2, [pc, #164]	@ (80089ec <timeCircuit_control_readInputDateTime+0x18c>)
 8008948:	4619      	mov	r1, r3
 800894a:	f7ff fccb 	bl	80082e4 <soundEffects_playSound>
        break;
 800894e:	e035      	b.n	80089bc <timeCircuit_control_readInputDateTime+0x15c>
      case 4:
        soundEffects_playSound(pConfig->pSoundEffectConfig, pConfig->pStorageDeviceConfig, "Dtmf-4.wav");
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008958:	4a25      	ldr	r2, [pc, #148]	@ (80089f0 <timeCircuit_control_readInputDateTime+0x190>)
 800895a:	4619      	mov	r1, r3
 800895c:	f7ff fcc2 	bl	80082e4 <soundEffects_playSound>
        break;
 8008960:	e02c      	b.n	80089bc <timeCircuit_control_readInputDateTime+0x15c>
      case 5:
        soundEffects_playSound(pConfig->pSoundEffectConfig, pConfig->pStorageDeviceConfig, "Dtmf-5.wav");
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800896a:	4a22      	ldr	r2, [pc, #136]	@ (80089f4 <timeCircuit_control_readInputDateTime+0x194>)
 800896c:	4619      	mov	r1, r3
 800896e:	f7ff fcb9 	bl	80082e4 <soundEffects_playSound>
        break;
 8008972:	e023      	b.n	80089bc <timeCircuit_control_readInputDateTime+0x15c>
      case 6:
        soundEffects_playSound(pConfig->pSoundEffectConfig, pConfig->pStorageDeviceConfig, "Dtmf-6.wav");
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800897c:	4a1e      	ldr	r2, [pc, #120]	@ (80089f8 <timeCircuit_control_readInputDateTime+0x198>)
 800897e:	4619      	mov	r1, r3
 8008980:	f7ff fcb0 	bl	80082e4 <soundEffects_playSound>
        break;
 8008984:	e01a      	b.n	80089bc <timeCircuit_control_readInputDateTime+0x15c>
      case 7:
        soundEffects_playSound(pConfig->pSoundEffectConfig, pConfig->pStorageDeviceConfig, "Dtmf-7.wav");
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800898e:	4a1b      	ldr	r2, [pc, #108]	@ (80089fc <timeCircuit_control_readInputDateTime+0x19c>)
 8008990:	4619      	mov	r1, r3
 8008992:	f7ff fca7 	bl	80082e4 <soundEffects_playSound>
        break;
 8008996:	e011      	b.n	80089bc <timeCircuit_control_readInputDateTime+0x15c>
      case 8:
        soundEffects_playSound(pConfig->pSoundEffectConfig, pConfig->pStorageDeviceConfig, "Dtmf-8.wav");
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089a0:	4a17      	ldr	r2, [pc, #92]	@ (8008a00 <timeCircuit_control_readInputDateTime+0x1a0>)
 80089a2:	4619      	mov	r1, r3
 80089a4:	f7ff fc9e 	bl	80082e4 <soundEffects_playSound>
        break;
 80089a8:	e008      	b.n	80089bc <timeCircuit_control_readInputDateTime+0x15c>
      case 9:
        soundEffects_playSound(pConfig->pSoundEffectConfig, pConfig->pStorageDeviceConfig, "Dtmf-9.wav");
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089b2:	4a14      	ldr	r2, [pc, #80]	@ (8008a04 <timeCircuit_control_readInputDateTime+0x1a4>)
 80089b4:	4619      	mov	r1, r3
 80089b6:	f7ff fc95 	bl	80082e4 <soundEffects_playSound>
        break;
 80089ba:	bf00      	nop

    }
  }

  if (pConfig->keypadInputCount >= 12)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80089c2:	2b0b      	cmp	r3, #11
 80089c4:	d903      	bls.n	80089ce <timeCircuit_control_readInputDateTime+0x16e>
  {
    pConfig->keypadInputCount = 0;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  return isSuccess;
 80089ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3710      	adds	r7, #16
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	20000b70 	.word	0x20000b70
 80089dc:	20000b6c 	.word	0x20000b6c
 80089e0:	0800cf10 	.word	0x0800cf10
 80089e4:	0800cf1c 	.word	0x0800cf1c
 80089e8:	0800cf28 	.word	0x0800cf28
 80089ec:	0800cf34 	.word	0x0800cf34
 80089f0:	0800cf40 	.word	0x0800cf40
 80089f4:	0800cf4c 	.word	0x0800cf4c
 80089f8:	0800cf58 	.word	0x0800cf58
 80089fc:	0800cf64 	.word	0x0800cf64
 8008a00:	0800cf70 	.word	0x0800cf70
 8008a04:	0800cf7c 	.word	0x0800cf7c

08008a08 <timeCircuit_control_getRtcDateTime>:

TimeCircuit_Control_Status_t timeCircuit_control_getRtcDateTime(TimeCircuit_Control_Config_t * const pConfig)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = 1;
 8008a10:	2301      	movs	r3, #1
 8008a12:	73fb      	strb	r3, [r7, #15]

  //Retrieve RTC Date Time Data
  isSuccess &= HAL_RTC_GetTime(pConfig->hrtc, &pConfig->hRtcTime, RTC_FORMAT_BIN);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6858      	ldr	r0, [r3, #4]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	3320      	adds	r3, #32
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	4619      	mov	r1, r3
 8008a20:	f7fc fedb 	bl	80057da <HAL_RTC_GetTime>
 8008a24:	4603      	mov	r3, r0
 8008a26:	461a      	mov	r2, r3
 8008a28:	7bfb      	ldrb	r3, [r7, #15]
 8008a2a:	4013      	ands	r3, r2
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	bf14      	ite	ne
 8008a30:	2301      	movne	r3, #1
 8008a32:	2300      	moveq	r3, #0
 8008a34:	73fb      	strb	r3, [r7, #15]
  isSuccess &= HAL_RTC_GetDate(pConfig->hrtc, &pConfig->hRtcDate, RTC_FORMAT_BIN);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6858      	ldr	r0, [r3, #4]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	3334      	adds	r3, #52	@ 0x34
 8008a3e:	2200      	movs	r2, #0
 8008a40:	4619      	mov	r1, r3
 8008a42:	f7fc ffac 	bl	800599e <HAL_RTC_GetDate>
 8008a46:	4603      	mov	r3, r0
 8008a48:	461a      	mov	r2, r3
 8008a4a:	7bfb      	ldrb	r3, [r7, #15]
 8008a4c:	4013      	ands	r3, r2
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	bf14      	ite	ne
 8008a52:	2301      	movne	r3, #1
 8008a54:	2300      	moveq	r3, #0
 8008a56:	73fb      	strb	r3, [r7, #15]

  return isSuccess;
 8008a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3710      	adds	r7, #16
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}

08008a62 <timeCircuit_control_setRtcDateTime>:

TimeCircuit_Control_Status_t timeCircuit_control_setRtcDateTime(TimeCircuit_Control_Config_t * const pConfig)
{
 8008a62:	b580      	push	{r7, lr}
 8008a64:	b084      	sub	sp, #16
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = 1;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	73fb      	strb	r3, [r7, #15]

  //Retrieve default RTC date time data
  isSuccess &= timeCircuit_control_getRtcDateTime(pConfig);
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f7ff ffca 	bl	8008a08 <timeCircuit_control_getRtcDateTime>
 8008a74:	4603      	mov	r3, r0
 8008a76:	461a      	mov	r2, r3
 8008a78:	7bfb      	ldrb	r3, [r7, #15]
 8008a7a:	4013      	ands	r3, r2
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	bf14      	ite	ne
 8008a80:	2301      	movne	r3, #1
 8008a82:	2300      	moveq	r3, #0
 8008a84:	73fb      	strb	r3, [r7, #15]

  //Get present date time for RTC date time
  isSuccess &= dateTime_getRtcDateTimeData(pConfig->pPresentTime, &pConfig->hRtcDate, &pConfig->hRtcTime);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6958      	ldr	r0, [r3, #20]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	3320      	adds	r3, #32
 8008a94:	461a      	mov	r2, r3
 8008a96:	f7ff f866 	bl	8007b66 <dateTime_getRtcDateTimeData>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	7bfb      	ldrb	r3, [r7, #15]
 8008aa0:	4013      	ands	r3, r2
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	bf14      	ite	ne
 8008aa6:	2301      	movne	r3, #1
 8008aa8:	2300      	moveq	r3, #0
 8008aaa:	73fb      	strb	r3, [r7, #15]

  //Set RTC with present time data
  isSuccess &= HAL_RTC_SetTime(pConfig->hrtc, &pConfig->hRtcTime, RTC_FORMAT_BIN);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6858      	ldr	r0, [r3, #4]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	3320      	adds	r3, #32
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	f7fc fdf5 	bl	80056a6 <HAL_RTC_SetTime>
 8008abc:	4603      	mov	r3, r0
 8008abe:	461a      	mov	r2, r3
 8008ac0:	7bfb      	ldrb	r3, [r7, #15]
 8008ac2:	4013      	ands	r3, r2
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	bf14      	ite	ne
 8008ac8:	2301      	movne	r3, #1
 8008aca:	2300      	moveq	r3, #0
 8008acc:	73fb      	strb	r3, [r7, #15]
  isSuccess &= HAL_RTC_SetDate(pConfig->hrtc, &pConfig->hRtcDate, RTC_FORMAT_BIN);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6858      	ldr	r0, [r3, #4]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	3334      	adds	r3, #52	@ 0x34
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	4619      	mov	r1, r3
 8008ada:	f7fc fedc 	bl	8005896 <HAL_RTC_SetDate>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	7bfb      	ldrb	r3, [r7, #15]
 8008ae4:	4013      	ands	r3, r2
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	bf14      	ite	ne
 8008aea:	2301      	movne	r3, #1
 8008aec:	2300      	moveq	r3, #0
 8008aee:	73fb      	strb	r3, [r7, #15]

  return isSuccess;
 8008af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3710      	adds	r7, #16
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <timeCircuit_control_saveDateTimes>:

TimeCircuit_Control_Status_t timeCircuit_control_saveDateTimes(TimeCircuit_Control_Config_t * const pConfig)
{
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b090      	sub	sp, #64	@ 0x40
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = false;
 8008b02:	2300      	movs	r3, #0
 8008b04:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

  char    writeBuf[(MAXIMUM_DATETIME_INPUT_CHARS * 3) + 1];
  uint8_t bufferCount = 0;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	75fb      	strb	r3, [r7, #23]
  DateTime_Display_Config_t* pDateTimeDisplays[] = {pConfig->pDestinationTime, pConfig->pPresentTime, pConfig->pLastDepartedTime};
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	691b      	ldr	r3, [r3, #16]
 8008b10:	60bb      	str	r3, [r7, #8]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	695b      	ldr	r3, [r3, #20]
 8008b16:	60fb      	str	r3, [r7, #12]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	699b      	ldr	r3, [r3, #24]
 8008b1c:	613b      	str	r3, [r7, #16]

    //Prepare buffer with datetimes
  for (uint8_t displayCount = 0; displayCount < 3; displayCount++)
 8008b1e:	2300      	movs	r3, #0
 8008b20:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8008b24:	e012      	b.n	8008b4c <timeCircuit_control_saveDateTimes+0x52>
  {
    dateTime_convertDateTimeToChar(pDateTimeDisplays[displayCount], writeBuf, sizeof(writeBuf), &bufferCount);
 8008b26:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	3340      	adds	r3, #64	@ 0x40
 8008b2e:	443b      	add	r3, r7
 8008b30:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8008b34:	f107 0317 	add.w	r3, r7, #23
 8008b38:	f107 0118 	add.w	r1, r7, #24
 8008b3c:	2225      	movs	r2, #37	@ 0x25
 8008b3e:	f7ff fa65 	bl	800800c <dateTime_convertDateTimeToChar>
  for (uint8_t displayCount = 0; displayCount < 3; displayCount++)
 8008b42:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008b46:	3301      	adds	r3, #1
 8008b48:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8008b4c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008b50:	2b02      	cmp	r3, #2
 8008b52:	d9e8      	bls.n	8008b26 <timeCircuit_control_saveDateTimes+0x2c>
  }

  //Write datetime data to SD card
  // isSuccess = storageDevice_writeFile(pConfig->pStorageDeviceConfig, writeBuf, sizeof(writeBuf), gStoredDateTimeFileName);

  return isSuccess;
 8008b54:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3740      	adds	r7, #64	@ 0x40
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <timeCircuit_control_updateStartUpDateTimes>:

TimeCircuit_Control_Status_t timeCircuit_control_updateStartUpDateTimes(TimeCircuit_Control_Config_t * const pConfig)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b092      	sub	sp, #72	@ 0x48
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = false;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

  //char* pReadBuf = malloc(MAXIMUM_DATETIME_INPUT_CHARS * 3);
  char pReadBuf[(MAXIMUM_DATETIME_INPUT_CHARS * 3) + 1];
  uint8_t pStartUpDateTime[MAXIMUM_DATETIME_INPUT_CHARS];

  DateTime_Display_Config_t* pDateTimeDisplays[] = {pConfig->pDestinationTime, pConfig->pPresentTime, pConfig->pLastDepartedTime};
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	691b      	ldr	r3, [r3, #16]
 8008b72:	60bb      	str	r3, [r7, #8]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	695b      	ldr	r3, [r3, #20]
 8008b78:	60fb      	str	r3, [r7, #12]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	699b      	ldr	r3, [r3, #24]
 8008b7e:	613b      	str	r3, [r7, #16]

  //Read datetime data from SD card
 // isSuccess = storageDevice_readFile(pConfig->pStorageDeviceConfig, pReadBuf, sizeof(pReadBuf), gStoredDateTimeFileName);

  //Check read was successful, if not set to default values
  if(isSuccess)
 8008b80:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d05b      	beq.n	8008c40 <timeCircuit_control_updateStartUpDateTimes+0xe0>
  {
    for (uint8_t displayCount = 0; displayCount < 3; displayCount++)
 8008b88:	2300      	movs	r3, #0
 8008b8a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8008b8e:	e03e      	b.n	8008c0e <timeCircuit_control_updateStartUpDateTimes+0xae>
    {
      for (uint8_t characterCount = 0; characterCount < MAXIMUM_DATETIME_INPUT_CHARS; characterCount++)
 8008b90:	2300      	movs	r3, #0
 8008b92:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8008b96:	e019      	b.n	8008bcc <timeCircuit_control_updateStartUpDateTimes+0x6c>
      {
        pStartUpDateTime[characterCount] = pReadBuf[characterCount + (displayCount * MAXIMUM_DATETIME_INPUT_CHARS)] - '0';
 8008b98:	f897 1045 	ldrb.w	r1, [r7, #69]	@ 0x45
 8008b9c:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	005b      	lsls	r3, r3, #1
 8008ba4:	4413      	add	r3, r2
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	440b      	add	r3, r1
 8008baa:	3348      	adds	r3, #72	@ 0x48
 8008bac:	443b      	add	r3, r7
 8008bae:	f813 2c28 	ldrb.w	r2, [r3, #-40]
 8008bb2:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8008bb6:	3a30      	subs	r2, #48	@ 0x30
 8008bb8:	b2d2      	uxtb	r2, r2
 8008bba:	3348      	adds	r3, #72	@ 0x48
 8008bbc:	443b      	add	r3, r7
 8008bbe:	f803 2c34 	strb.w	r2, [r3, #-52]
      for (uint8_t characterCount = 0; characterCount < MAXIMUM_DATETIME_INPUT_CHARS; characterCount++)
 8008bc2:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8008bcc:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8008bd0:	2b0b      	cmp	r3, #11
 8008bd2:	d9e1      	bls.n	8008b98 <timeCircuit_control_updateStartUpDateTimes+0x38>
      }
      isSuccess &= dateTime_setDisplayData((pDateTimeDisplays[displayCount]), pStartUpDateTime);
 8008bd4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	3348      	adds	r3, #72	@ 0x48
 8008bdc:	443b      	add	r3, r7
 8008bde:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8008be2:	f107 0214 	add.w	r2, r7, #20
 8008be6:	4611      	mov	r1, r2
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7fe ff6f 	bl	8007acc <dateTime_setDisplayData>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008bf6:	4013      	ands	r3, r2
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	bf14      	ite	ne
 8008bfc:	2301      	movne	r3, #1
 8008bfe:	2300      	moveq	r3, #0
 8008c00:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    for (uint8_t displayCount = 0; displayCount < 3; displayCount++)
 8008c04:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008c08:	3301      	adds	r3, #1
 8008c0a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8008c0e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008c12:	2b02      	cmp	r3, #2
 8008c14:	d9bc      	bls.n	8008b90 <timeCircuit_control_updateStartUpDateTimes+0x30>
    }
      if (isSuccess == false)
 8008c16:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008c1a:	f083 0301 	eor.w	r3, r3, #1
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d00d      	beq.n	8008c40 <timeCircuit_control_updateStartUpDateTimes+0xe0>
      {
      isSuccess &= timeCircuit_control_updateDisplays(pConfig);
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f7ff fdc7 	bl	80087b8 <timeCircuit_control_updateDisplays>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008c32:	4013      	ands	r3, r2
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	bf14      	ite	ne
 8008c38:	2301      	movne	r3, #1
 8008c3a:	2300      	moveq	r3, #0
 8008c3c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
  }

  //Set default values if SD Card values not read or invalid
  if (isSuccess == false)
 8008c40:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008c44:	f083 0301 	eor.w	r3, r3, #1
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d00d      	beq.n	8008c6a <timeCircuit_control_updateStartUpDateTimes+0x10a>
  {
    isSuccess &= timeCircuit_control_setDefaultDateTimes(pConfig);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f7ff fd74 	bl	800873c <timeCircuit_control_setDefaultDateTimes>
 8008c54:	4603      	mov	r3, r0
 8008c56:	461a      	mov	r2, r3
 8008c58:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008c5c:	4013      	ands	r3, r2
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	bf14      	ite	ne
 8008c62:	2301      	movne	r3, #1
 8008c64:	2300      	moveq	r3, #0
 8008c66:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  }


  //free(pReadBuf);
  return isSuccess;
 8008c6a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3748      	adds	r7, #72	@ 0x48
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
	...

08008c78 <timeCircuit_control_updatePresentDateTime>:

  return isSuccess;
}

TimeCircuit_Control_Status_t timeCircuit_control_updatePresentDateTime(TimeCircuit_Control_Config_t * const pConfig)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = 1;
 8008c80:	2301      	movs	r3, #1
 8008c82:	73fb      	strb	r3, [r7, #15]
  static uint8_t previousMinute = 0;
  isSuccess &= HAL_RTC_GetTime(pConfig->hrtc, &pConfig->hRtcTime, RTC_FORMAT_BIN);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6858      	ldr	r0, [r3, #4]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	3320      	adds	r3, #32
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	4619      	mov	r1, r3
 8008c90:	f7fc fda3 	bl	80057da <HAL_RTC_GetTime>
 8008c94:	4603      	mov	r3, r0
 8008c96:	461a      	mov	r2, r3
 8008c98:	7bfb      	ldrb	r3, [r7, #15]
 8008c9a:	4013      	ands	r3, r2
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	bf14      	ite	ne
 8008ca0:	2301      	movne	r3, #1
 8008ca2:	2300      	moveq	r3, #0
 8008ca4:	73fb      	strb	r3, [r7, #15]

  if (pConfig->hRtcTime.Minutes != previousMinute)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8008cac:	4b23      	ldr	r3, [pc, #140]	@ (8008d3c <timeCircuit_control_updatePresentDateTime+0xc4>)
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d03d      	beq.n	8008d30 <timeCircuit_control_updatePresentDateTime+0xb8>
  {
    //Retrieve RTC date time data
    isSuccess &= timeCircuit_control_getRtcDateTime(pConfig);
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f7ff fea7 	bl	8008a08 <timeCircuit_control_getRtcDateTime>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	7bfb      	ldrb	r3, [r7, #15]
 8008cc0:	4013      	ands	r3, r2
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	bf14      	ite	ne
 8008cc6:	2301      	movne	r3, #1
 8008cc8:	2300      	moveq	r3, #0
 8008cca:	73fb      	strb	r3, [r7, #15]

    //Set present date time to RTC date time
    isSuccess &= dateTime_setRtcDateTimeData(pConfig->pPresentTime, &pConfig->hRtcDate, &pConfig->hRtcTime);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6958      	ldr	r0, [r3, #20]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	3320      	adds	r3, #32
 8008cda:	461a      	mov	r2, r3
 8008cdc:	f7fe ff75 	bl	8007bca <dateTime_setRtcDateTimeData>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	7bfb      	ldrb	r3, [r7, #15]
 8008ce6:	4013      	ands	r3, r2
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	bf14      	ite	ne
 8008cec:	2301      	movne	r3, #1
 8008cee:	2300      	moveq	r3, #0
 8008cf0:	73fb      	strb	r3, [r7, #15]

    //Update present display
    isSuccess &= dateTime_updateDisplay(pConfig->pPresentTime);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	695b      	ldr	r3, [r3, #20]
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7ff fa2e 	bl	8008158 <dateTime_updateDisplay>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	461a      	mov	r2, r3
 8008d00:	7bfb      	ldrb	r3, [r7, #15]
 8008d02:	4013      	ands	r3, r2
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	bf14      	ite	ne
 8008d08:	2301      	movne	r3, #1
 8008d0a:	2300      	moveq	r3, #0
 8008d0c:	73fb      	strb	r3, [r7, #15]

    //Store new date time
    isSuccess &= timeCircuit_control_saveDateTimes(pConfig);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f7ff fef3 	bl	8008afa <timeCircuit_control_saveDateTimes>
 8008d14:	4603      	mov	r3, r0
 8008d16:	461a      	mov	r2, r3
 8008d18:	7bfb      	ldrb	r3, [r7, #15]
 8008d1a:	4013      	ands	r3, r2
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	bf14      	ite	ne
 8008d20:	2301      	movne	r3, #1
 8008d22:	2300      	moveq	r3, #0
 8008d24:	73fb      	strb	r3, [r7, #15]

    previousMinute = pConfig->hRtcTime.Minutes;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8008d2c:	4b03      	ldr	r3, [pc, #12]	@ (8008d3c <timeCircuit_control_updatePresentDateTime+0xc4>)
 8008d2e:	701a      	strb	r2, [r3, #0]
  }

  return isSuccess;
 8008d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	20000b74 	.word	0x20000b74

08008d40 <timeCircuit_control_updateTimeTravelDateTimes>:

TimeCircuit_Control_Status_t timeCircuit_control_updateTimeTravelDateTimes(TimeCircuit_Control_Config_t* const pConfig)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess  = true;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	73fb      	strb	r3, [r7, #15]
  bool isButtonActivated                  = false;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	737b      	strb	r3, [r7, #13]
  bool hasButtonStateChanged              = false;
 8008d50:	2300      	movs	r3, #0
 8008d52:	73bb      	strb	r3, [r7, #14]

  static bool hasButtonActivated          = false;
  static uint32_t previousTime            = 0;

  isButtonActivated  = HAL_GPIO_ReadPin(TIME_TRAVEL_SWITCH_GPIO_PORT, TIME_TRAVEL_SWITCH_PIN);
 8008d54:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008d58:	483d      	ldr	r0, [pc, #244]	@ (8008e50 <timeCircuit_control_updateTimeTravelDateTimes+0x110>)
 8008d5a:	f7f9 fe55 	bl	8002a08 <HAL_GPIO_ReadPin>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	bf14      	ite	ne
 8008d64:	2301      	movne	r3, #1
 8008d66:	2300      	moveq	r3, #0
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	737b      	strb	r3, [r7, #13]
  hasButtonStateChanged = timeCircuit_control_checkButtonActivation(&isButtonActivated, &hasButtonActivated,
 8008d6c:	f107 030d 	add.w	r3, r7, #13
 8008d70:	4a38      	ldr	r2, [pc, #224]	@ (8008e54 <timeCircuit_control_updateTimeTravelDateTimes+0x114>)
 8008d72:	4939      	ldr	r1, [pc, #228]	@ (8008e58 <timeCircuit_control_updateTimeTravelDateTimes+0x118>)
 8008d74:	4618      	mov	r0, r3
 8008d76:	f7ff fd4d 	bl	8008814 <timeCircuit_control_checkButtonActivation>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	73bb      	strb	r3, [r7, #14]
        &previousTime);

  if (hasButtonStateChanged == true)
 8008d7e:	7bbb      	ldrb	r3, [r7, #14]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d05f      	beq.n	8008e44 <timeCircuit_control_updateTimeTravelDateTimes+0x104>
  {
    if (isButtonActivated != true )
 8008d84:	7b7b      	ldrb	r3, [r7, #13]
 8008d86:	f083 0301 	eor.w	r3, r3, #1
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d059      	beq.n	8008e44 <timeCircuit_control_updateTimeTravelDateTimes+0x104>
    {
      //Clear displays
      isSuccess &= timeCircuit_control_clearDisplays(pConfig);
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f7ff fc9d 	bl	80086d0 <timeCircuit_control_clearDisplays>
 8008d96:	4603      	mov	r3, r0
 8008d98:	461a      	mov	r2, r3
 8008d9a:	7bfb      	ldrb	r3, [r7, #15]
 8008d9c:	4013      	ands	r3, r2
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	bf14      	ite	ne
 8008da2:	2301      	movne	r3, #1
 8008da4:	2300      	moveq	r3, #0
 8008da6:	73fb      	strb	r3, [r7, #15]

      //Play Sound
      soundEffects_playSound(pConfig->pSoundEffectConfig, pConfig->pStorageDeviceConfig, "enter.wav");
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008db0:	4a2a      	ldr	r2, [pc, #168]	@ (8008e5c <timeCircuit_control_updateTimeTravelDateTimes+0x11c>)
 8008db2:	4619      	mov	r1, r3
 8008db4:	f7ff fa96 	bl	80082e4 <soundEffects_playSound>


      //Copy last time departed time data to present time
      isSuccess &= dateTime_copyDateTime(pConfig->pLastDepartedTime, pConfig->pPresentTime);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	699a      	ldr	r2, [r3, #24]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	695b      	ldr	r3, [r3, #20]
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	4610      	mov	r0, r2
 8008dc4:	f7fe ff2e 	bl	8007c24 <dateTime_copyDateTime>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	461a      	mov	r2, r3
 8008dcc:	7bfb      	ldrb	r3, [r7, #15]
 8008dce:	4013      	ands	r3, r2
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	bf14      	ite	ne
 8008dd4:	2301      	movne	r3, #1
 8008dd6:	2300      	moveq	r3, #0
 8008dd8:	73fb      	strb	r3, [r7, #15]

      //Copy present time data to destination time
      isSuccess &= dateTime_copyDateTime(pConfig->pPresentTime, pConfig->pDestinationTime);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	695a      	ldr	r2, [r3, #20]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	691b      	ldr	r3, [r3, #16]
 8008de2:	4619      	mov	r1, r3
 8008de4:	4610      	mov	r0, r2
 8008de6:	f7fe ff1d 	bl	8007c24 <dateTime_copyDateTime>
 8008dea:	4603      	mov	r3, r0
 8008dec:	461a      	mov	r2, r3
 8008dee:	7bfb      	ldrb	r3, [r7, #15]
 8008df0:	4013      	ands	r3, r2
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	bf14      	ite	ne
 8008df6:	2301      	movne	r3, #1
 8008df8:	2300      	moveq	r3, #0
 8008dfa:	73fb      	strb	r3, [r7, #15]

      //Update displays with new date times
      isSuccess &= timeCircuit_control_updateDisplays(pConfig);
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f7ff fcdb 	bl	80087b8 <timeCircuit_control_updateDisplays>
 8008e02:	4603      	mov	r3, r0
 8008e04:	461a      	mov	r2, r3
 8008e06:	7bfb      	ldrb	r3, [r7, #15]
 8008e08:	4013      	ands	r3, r2
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	bf14      	ite	ne
 8008e0e:	2301      	movne	r3, #1
 8008e10:	2300      	moveq	r3, #0
 8008e12:	73fb      	strb	r3, [r7, #15]

      //Set the RTC with new present time
      isSuccess &= timeCircuit_control_setRtcDateTime(pConfig);
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f7ff fe24 	bl	8008a62 <timeCircuit_control_setRtcDateTime>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	7bfb      	ldrb	r3, [r7, #15]
 8008e20:	4013      	ands	r3, r2
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	bf14      	ite	ne
 8008e26:	2301      	movne	r3, #1
 8008e28:	2300      	moveq	r3, #0
 8008e2a:	73fb      	strb	r3, [r7, #15]

      //Store new date time
      isSuccess &= timeCircuit_control_saveDateTimes(pConfig);
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f7ff fe64 	bl	8008afa <timeCircuit_control_saveDateTimes>
 8008e32:	4603      	mov	r3, r0
 8008e34:	461a      	mov	r2, r3
 8008e36:	7bfb      	ldrb	r3, [r7, #15]
 8008e38:	4013      	ands	r3, r2
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	bf14      	ite	ne
 8008e3e:	2301      	movne	r3, #1
 8008e40:	2300      	moveq	r3, #0
 8008e42:	73fb      	strb	r3, [r7, #15]
    }
  }
  return isSuccess;
 8008e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3710      	adds	r7, #16
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	40020800 	.word	0x40020800
 8008e54:	20000b78 	.word	0x20000b78
 8008e58:	20000b75 	.word	0x20000b75
 8008e5c:	0800cf04 	.word	0x0800cf04

08008e60 <timeCircuit_control_updateDestinationDateTime>:

TimeCircuit_Control_Status_t timeCircuit_control_updateDestinationDateTime(TimeCircuit_Control_Config_t* const pConfig)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess  = true;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	73fb      	strb	r3, [r7, #15]
  bool isButtonActivated                  = false;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	737b      	strb	r3, [r7, #13]
  bool hasButtonStateChanged              = false;
 8008e70:	2300      	movs	r3, #0
 8008e72:	73bb      	strb	r3, [r7, #14]

  static bool hasButtonActivated          = false;
  static uint32_t previousTime            = 0;

  isButtonActivated  = !HAL_GPIO_ReadPin(KEYPAD_ENTER_SWITCH_GPIO_PORT, KEYPAD_ENTER_SWITCH_PIN);
 8008e74:	2102      	movs	r1, #2
 8008e76:	4834      	ldr	r0, [pc, #208]	@ (8008f48 <timeCircuit_control_updateDestinationDateTime+0xe8>)
 8008e78:	f7f9 fdc6 	bl	8002a08 <HAL_GPIO_ReadPin>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	bf0c      	ite	eq
 8008e82:	2301      	moveq	r3, #1
 8008e84:	2300      	movne	r3, #0
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	737b      	strb	r3, [r7, #13]
  hasButtonStateChanged = timeCircuit_control_checkButtonActivation(&isButtonActivated, &hasButtonActivated,
 8008e8a:	f107 030d 	add.w	r3, r7, #13
 8008e8e:	4a2f      	ldr	r2, [pc, #188]	@ (8008f4c <timeCircuit_control_updateDestinationDateTime+0xec>)
 8008e90:	492f      	ldr	r1, [pc, #188]	@ (8008f50 <timeCircuit_control_updateDestinationDateTime+0xf0>)
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7ff fcbe 	bl	8008814 <timeCircuit_control_checkButtonActivation>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	73bb      	strb	r3, [r7, #14]
      &previousTime);

  if (hasButtonStateChanged == true)
 8008e9c:	7bbb      	ldrb	r3, [r7, #14]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d04c      	beq.n	8008f3c <timeCircuit_control_updateDestinationDateTime+0xdc>
  {
    if (isButtonActivated == true )
 8008ea2:	7b7b      	ldrb	r3, [r7, #13]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d044      	beq.n	8008f32 <timeCircuit_control_updateDestinationDateTime+0xd2>
    {
      //Activate Keypad White Indicator
      HAL_GPIO_WritePin(KEYPAD_WHITE_INDICATOR_GPIO_PORT, KEYPAD_WHITE_INDICATOR_PIN, GPIO_PIN_SET);
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	2108      	movs	r1, #8
 8008eac:	4829      	ldr	r0, [pc, #164]	@ (8008f54 <timeCircuit_control_updateDestinationDateTime+0xf4>)
 8008eae:	f7f9 fdc3 	bl	8002a38 <HAL_GPIO_WritePin>
      //Clear destination date time
      isSuccess &= dateTime_clearDisplay(pConfig->pDestinationTime);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	691b      	ldr	r3, [r3, #16]
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7fe fec9 	bl	8007c4e <dateTime_clearDisplay>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	7bfb      	ldrb	r3, [r7, #15]
 8008ec2:	4013      	ands	r3, r2
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	bf14      	ite	ne
 8008ec8:	2301      	movne	r3, #1
 8008eca:	2300      	moveq	r3, #0
 8008ecc:	73fb      	strb	r3, [r7, #15]
      //Update date time if a valid entry has submitted
      if (dateTime_setDisplayData(pConfig->pDestinationTime,pConfig->keypadInput))
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	691a      	ldr	r2, [r3, #16]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	3338      	adds	r3, #56	@ 0x38
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	4610      	mov	r0, r2
 8008eda:	f7fe fdf7 	bl	8007acc <dateTime_setDisplayData>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d015      	beq.n	8008f10 <timeCircuit_control_updateDestinationDateTime+0xb0>
      {
        //Play sound
        soundEffects_playSound(pConfig->pSoundEffectConfig, pConfig->pStorageDeviceConfig, "enter.wav");
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008eec:	4a1a      	ldr	r2, [pc, #104]	@ (8008f58 <timeCircuit_control_updateDestinationDateTime+0xf8>)
 8008eee:	4619      	mov	r1, r3
 8008ef0:	f7ff f9f8 	bl	80082e4 <soundEffects_playSound>

        isSuccess &= dateTime_updateDisplay(pConfig->pDestinationTime);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	691b      	ldr	r3, [r3, #16]
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7ff f92d 	bl	8008158 <dateTime_updateDisplay>
 8008efe:	4603      	mov	r3, r0
 8008f00:	461a      	mov	r2, r3
 8008f02:	7bfb      	ldrb	r3, [r7, #15]
 8008f04:	4013      	ands	r3, r2
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	bf14      	ite	ne
 8008f0a:	2301      	movne	r3, #1
 8008f0c:	2300      	moveq	r3, #0
 8008f0e:	73fb      	strb	r3, [r7, #15]
      }
      pConfig->keypadInputCount = 0;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2200      	movs	r2, #0
 8008f14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      //Save new date times
      isSuccess &= timeCircuit_control_saveDateTimes(pConfig);
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f7ff fdee 	bl	8008afa <timeCircuit_control_saveDateTimes>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	461a      	mov	r2, r3
 8008f22:	7bfb      	ldrb	r3, [r7, #15]
 8008f24:	4013      	ands	r3, r2
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	bf14      	ite	ne
 8008f2a:	2301      	movne	r3, #1
 8008f2c:	2300      	moveq	r3, #0
 8008f2e:	73fb      	strb	r3, [r7, #15]
 8008f30:	e004      	b.n	8008f3c <timeCircuit_control_updateDestinationDateTime+0xdc>
    }
    else
    {
      //Deactivate Keypad White Indicator
      HAL_GPIO_WritePin(KEYPAD_WHITE_INDICATOR_GPIO_PORT, KEYPAD_WHITE_INDICATOR_PIN, GPIO_PIN_RESET);
 8008f32:	2200      	movs	r2, #0
 8008f34:	2108      	movs	r1, #8
 8008f36:	4807      	ldr	r0, [pc, #28]	@ (8008f54 <timeCircuit_control_updateDestinationDateTime+0xf4>)
 8008f38:	f7f9 fd7e 	bl	8002a38 <HAL_GPIO_WritePin>
    }

  }
  return isSuccess;
 8008f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3710      	adds	r7, #16
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	40020400 	.word	0x40020400
 8008f4c:	20000b80 	.word	0x20000b80
 8008f50:	20000b7c 	.word	0x20000b7c
 8008f54:	40020000 	.word	0x40020000
 8008f58:	0800cf04 	.word	0x0800cf04

08008f5c <timeCircuit_control_updateGlitch>:

TimeCircuit_Control_Status_t timeCircuit_control_updateGlitch(TimeCircuit_Control_Config_t* const pConfig)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess  = true;
 8008f64:	2301      	movs	r3, #1
 8008f66:	73fb      	strb	r3, [r7, #15]
  static uint32_t previousTime            = 0;
  static uint32_t randomFaultTime         = 0;
  static uint8_t  stateCount              = 0;

  bool bIsButtonActivated                 = false;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	737b      	strb	r3, [r7, #13]
  bool bHasButtonStateChanged              = false;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	73bb      	strb	r3, [r7, #14]

  static bool hasButtonActivated          = false;
  static uint32_t previousTimeMS          = 0;
  static uint32_t previousFaultTime       = 0;

  bIsButtonActivated  = !HAL_GPIO_ReadPin(GLITCH_SWITCH_GPIO_PORT, GLITCH_SWITCH_PIN);
 8008f70:	2120      	movs	r1, #32
 8008f72:	4864      	ldr	r0, [pc, #400]	@ (8009104 <timeCircuit_control_updateGlitch+0x1a8>)
 8008f74:	f7f9 fd48 	bl	8002a08 <HAL_GPIO_ReadPin>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	bf0c      	ite	eq
 8008f7e:	2301      	moveq	r3, #1
 8008f80:	2300      	movne	r3, #0
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	737b      	strb	r3, [r7, #13]
  bHasButtonStateChanged = timeCircuit_control_checkButtonActivation(&bIsButtonActivated, &hasButtonActivated,
 8008f86:	f107 030d 	add.w	r3, r7, #13
 8008f8a:	4a5f      	ldr	r2, [pc, #380]	@ (8009108 <timeCircuit_control_updateGlitch+0x1ac>)
 8008f8c:	495f      	ldr	r1, [pc, #380]	@ (800910c <timeCircuit_control_updateGlitch+0x1b0>)
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7ff fc40 	bl	8008814 <timeCircuit_control_checkButtonActivation>
 8008f94:	4603      	mov	r3, r0
 8008f96:	73bb      	strb	r3, [r7, #14]
      &previousTimeMS);

  if (bHasButtonStateChanged == true)
 8008f98:	7bbb      	ldrb	r3, [r7, #14]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d043      	beq.n	8009026 <timeCircuit_control_updateGlitch+0xca>
  {
    if (bIsButtonActivated == true )
 8008f9e:	7b7b      	ldrb	r3, [r7, #13]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d015      	beq.n	8008fd0 <timeCircuit_control_updateGlitch+0x74>
    {
      randomFaultTime = rand() % MAXIMUM_GLITCH_RANDOM_PERIOD_MS;
 8008fa4:	f002 fe86 	bl	800bcb4 <rand>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	4a59      	ldr	r2, [pc, #356]	@ (8009110 <timeCircuit_control_updateGlitch+0x1b4>)
 8008fac:	fb82 1203 	smull	r1, r2, r2, r3
 8008fb0:	1391      	asrs	r1, r2, #14
 8008fb2:	17da      	asrs	r2, r3, #31
 8008fb4:	1a8a      	subs	r2, r1, r2
 8008fb6:	f64e 2160 	movw	r1, #60000	@ 0xea60
 8008fba:	fb01 f202 	mul.w	r2, r1, r2
 8008fbe:	1a9a      	subs	r2, r3, r2
 8008fc0:	4b54      	ldr	r3, [pc, #336]	@ (8009114 <timeCircuit_control_updateGlitch+0x1b8>)
 8008fc2:	601a      	str	r2, [r3, #0]
      previousFaultTime = HAL_GetTick();
 8008fc4:	f7f8 fb04 	bl	80015d0 <HAL_GetTick>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	4a53      	ldr	r2, [pc, #332]	@ (8009118 <timeCircuit_control_updateGlitch+0x1bc>)
 8008fcc:	6013      	str	r3, [r2, #0]
 8008fce:	e02a      	b.n	8009026 <timeCircuit_control_updateGlitch+0xca>
    }
    else
    {
      //Clear glitching display
      isSuccess &= dateTime_clearDisplay(pConfig->pDestinationTime);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	691b      	ldr	r3, [r3, #16]
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f7fe fe3a 	bl	8007c4e <dateTime_clearDisplay>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	461a      	mov	r2, r3
 8008fde:	7bfb      	ldrb	r3, [r7, #15]
 8008fe0:	4013      	ands	r3, r2
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	bf14      	ite	ne
 8008fe6:	2301      	movne	r3, #1
 8008fe8:	2300      	moveq	r3, #0
 8008fea:	73fb      	strb	r3, [r7, #15]
      HAL_Delay(500);
 8008fec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008ff0:	f7f8 fafa 	bl	80015e8 <HAL_Delay>
      isSuccess &= dateTime_updateDisplayGlitch(pConfig->pDestinationTime, gGlitchDisplayChars);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	691b      	ldr	r3, [r3, #16]
 8008ff8:	4948      	ldr	r1, [pc, #288]	@ (800911c <timeCircuit_control_updateGlitch+0x1c0>)
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7fe ff98 	bl	8007f30 <dateTime_updateDisplayGlitch>
 8009000:	4603      	mov	r3, r0
 8009002:	461a      	mov	r2, r3
 8009004:	7bfb      	ldrb	r3, [r7, #15]
 8009006:	4013      	ands	r3, r2
 8009008:	2b00      	cmp	r3, #0
 800900a:	bf14      	ite	ne
 800900c:	2301      	movne	r3, #1
 800900e:	2300      	moveq	r3, #0
 8009010:	73fb      	strb	r3, [r7, #15]
      HAL_Delay(100);
 8009012:	2064      	movs	r0, #100	@ 0x64
 8009014:	f7f8 fae8 	bl	80015e8 <HAL_Delay>
      isSuccess = dateTime_updateDisplay(pConfig->pDestinationTime);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	691b      	ldr	r3, [r3, #16]
 800901c:	4618      	mov	r0, r3
 800901e:	f7ff f89b 	bl	8008158 <dateTime_updateDisplay>
 8009022:	4603      	mov	r3, r0
 8009024:	73fb      	strb	r3, [r7, #15]

    }
  }

  if (((HAL_GetTick() - previousTime) > gGlitchTimeDelay[stateCount]) && ((HAL_GetTick() - previousFaultTime) > randomFaultTime) &&(bIsButtonActivated == true))
 8009026:	f7f8 fad3 	bl	80015d0 <HAL_GetTick>
 800902a:	4602      	mov	r2, r0
 800902c:	4b3c      	ldr	r3, [pc, #240]	@ (8009120 <timeCircuit_control_updateGlitch+0x1c4>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	1ad2      	subs	r2, r2, r3
 8009032:	4b3c      	ldr	r3, [pc, #240]	@ (8009124 <timeCircuit_control_updateGlitch+0x1c8>)
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	4619      	mov	r1, r3
 8009038:	4b3b      	ldr	r3, [pc, #236]	@ (8009128 <timeCircuit_control_updateGlitch+0x1cc>)
 800903a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800903e:	429a      	cmp	r2, r3
 8009040:	d95a      	bls.n	80090f8 <timeCircuit_control_updateGlitch+0x19c>
 8009042:	f7f8 fac5 	bl	80015d0 <HAL_GetTick>
 8009046:	4602      	mov	r2, r0
 8009048:	4b33      	ldr	r3, [pc, #204]	@ (8009118 <timeCircuit_control_updateGlitch+0x1bc>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	1ad2      	subs	r2, r2, r3
 800904e:	4b31      	ldr	r3, [pc, #196]	@ (8009114 <timeCircuit_control_updateGlitch+0x1b8>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	429a      	cmp	r2, r3
 8009054:	d950      	bls.n	80090f8 <timeCircuit_control_updateGlitch+0x19c>
 8009056:	7b7b      	ldrb	r3, [r7, #13]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d04d      	beq.n	80090f8 <timeCircuit_control_updateGlitch+0x19c>
  {
    switch (stateCount)
 800905c:	4b31      	ldr	r3, [pc, #196]	@ (8009124 <timeCircuit_control_updateGlitch+0x1c8>)
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	2b02      	cmp	r3, #2
 8009062:	d031      	beq.n	80090c8 <timeCircuit_control_updateGlitch+0x16c>
 8009064:	2b02      	cmp	r3, #2
 8009066:	dc42      	bgt.n	80090ee <timeCircuit_control_updateGlitch+0x192>
 8009068:	2b00      	cmp	r3, #0
 800906a:	d002      	beq.n	8009072 <timeCircuit_control_updateGlitch+0x116>
 800906c:	2b01      	cmp	r3, #1
 800906e:	d015      	beq.n	800909c <timeCircuit_control_updateGlitch+0x140>
 8009070:	e03d      	b.n	80090ee <timeCircuit_control_updateGlitch+0x192>
    {
      case 0:
        isSuccess &= dateTime_clearDisplay(pConfig->pDestinationTime);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	691b      	ldr	r3, [r3, #16]
 8009076:	4618      	mov	r0, r3
 8009078:	f7fe fde9 	bl	8007c4e <dateTime_clearDisplay>
 800907c:	4603      	mov	r3, r0
 800907e:	461a      	mov	r2, r3
 8009080:	7bfb      	ldrb	r3, [r7, #15]
 8009082:	4013      	ands	r3, r2
 8009084:	2b00      	cmp	r3, #0
 8009086:	bf14      	ite	ne
 8009088:	2301      	movne	r3, #1
 800908a:	2300      	moveq	r3, #0
 800908c:	73fb      	strb	r3, [r7, #15]
        stateCount++;
 800908e:	4b25      	ldr	r3, [pc, #148]	@ (8009124 <timeCircuit_control_updateGlitch+0x1c8>)
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	3301      	adds	r3, #1
 8009094:	b2da      	uxtb	r2, r3
 8009096:	4b23      	ldr	r3, [pc, #140]	@ (8009124 <timeCircuit_control_updateGlitch+0x1c8>)
 8009098:	701a      	strb	r2, [r3, #0]
        break;
 800909a:	e028      	b.n	80090ee <timeCircuit_control_updateGlitch+0x192>
      case 1:
        isSuccess &= dateTime_updateDisplayGlitch(pConfig->pDestinationTime, gGlitchDisplayChars);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	691b      	ldr	r3, [r3, #16]
 80090a0:	491e      	ldr	r1, [pc, #120]	@ (800911c <timeCircuit_control_updateGlitch+0x1c0>)
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7fe ff44 	bl	8007f30 <dateTime_updateDisplayGlitch>
 80090a8:	4603      	mov	r3, r0
 80090aa:	461a      	mov	r2, r3
 80090ac:	7bfb      	ldrb	r3, [r7, #15]
 80090ae:	4013      	ands	r3, r2
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	bf14      	ite	ne
 80090b4:	2301      	movne	r3, #1
 80090b6:	2300      	moveq	r3, #0
 80090b8:	73fb      	strb	r3, [r7, #15]
        stateCount++;
 80090ba:	4b1a      	ldr	r3, [pc, #104]	@ (8009124 <timeCircuit_control_updateGlitch+0x1c8>)
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	3301      	adds	r3, #1
 80090c0:	b2da      	uxtb	r2, r3
 80090c2:	4b18      	ldr	r3, [pc, #96]	@ (8009124 <timeCircuit_control_updateGlitch+0x1c8>)
 80090c4:	701a      	strb	r2, [r3, #0]
        break;
 80090c6:	e012      	b.n	80090ee <timeCircuit_control_updateGlitch+0x192>
      case 2:
        isSuccess &= dateTime_updateDisplayGlitch(pConfig->pDestinationTime,gGlitchDisplayDate);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	691b      	ldr	r3, [r3, #16]
 80090cc:	4917      	ldr	r1, [pc, #92]	@ (800912c <timeCircuit_control_updateGlitch+0x1d0>)
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7fe ff2e 	bl	8007f30 <dateTime_updateDisplayGlitch>
 80090d4:	4603      	mov	r3, r0
 80090d6:	461a      	mov	r2, r3
 80090d8:	7bfb      	ldrb	r3, [r7, #15]
 80090da:	4013      	ands	r3, r2
 80090dc:	2b00      	cmp	r3, #0
 80090de:	bf14      	ite	ne
 80090e0:	2301      	movne	r3, #1
 80090e2:	2300      	moveq	r3, #0
 80090e4:	73fb      	strb	r3, [r7, #15]
        stateCount = 0;
 80090e6:	4b0f      	ldr	r3, [pc, #60]	@ (8009124 <timeCircuit_control_updateGlitch+0x1c8>)
 80090e8:	2200      	movs	r2, #0
 80090ea:	701a      	strb	r2, [r3, #0]
        break;
 80090ec:	bf00      	nop
    }
    previousTime = HAL_GetTick();
 80090ee:	f7f8 fa6f 	bl	80015d0 <HAL_GetTick>
 80090f2:	4603      	mov	r3, r0
 80090f4:	4a0a      	ldr	r2, [pc, #40]	@ (8009120 <timeCircuit_control_updateGlitch+0x1c4>)
 80090f6:	6013      	str	r3, [r2, #0]
  }


  return isSuccess;
 80090f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	40020400 	.word	0x40020400
 8009108:	20000b88 	.word	0x20000b88
 800910c:	20000b84 	.word	0x20000b84
 8009110:	45e7b273 	.word	0x45e7b273
 8009114:	20000b8c 	.word	0x20000b8c
 8009118:	20000b90 	.word	0x20000b90
 800911c:	0800d0b4 	.word	0x0800d0b4
 8009120:	20000b94 	.word	0x20000b94
 8009124:	20000b98 	.word	0x20000b98
 8009128:	0800d0c4 	.word	0x0800d0c4
 800912c:	0800d0a4 	.word	0x0800d0a4

08009130 <timeCircuit__toggleTimeColon>:

TimeCircuit_Control_Status_t timeCircuit__toggleTimeColon(TimeCircuit_Control_Config_t* const pConfig)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  static uint8_t toogleStatus = 0;
  static uint32_t previousTime = 0;
  DateTime_Display_Status_t isSuccess   = 0;
 8009138:	2300      	movs	r3, #0
 800913a:	73fb      	strb	r3, [r7, #15]

  if ((HAL_GetTick()-previousTime) >= COLON_TIME_DELAY_MS)
 800913c:	f7f8 fa48 	bl	80015d0 <HAL_GetTick>
 8009140:	4602      	mov	r2, r0
 8009142:	4b2a      	ldr	r3, [pc, #168]	@ (80091ec <timeCircuit__toggleTimeColon+0xbc>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	1ad3      	subs	r3, r2, r3
 8009148:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800914c:	d349      	bcc.n	80091e2 <timeCircuit__toggleTimeColon+0xb2>
  {
    toogleStatus = ((toogleStatus) == 0) ? 3 : 0;
 800914e:	4b28      	ldr	r3, [pc, #160]	@ (80091f0 <timeCircuit__toggleTimeColon+0xc0>)
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d101      	bne.n	800915a <timeCircuit__toggleTimeColon+0x2a>
 8009156:	2203      	movs	r2, #3
 8009158:	e000      	b.n	800915c <timeCircuit__toggleTimeColon+0x2c>
 800915a:	2200      	movs	r2, #0
 800915c:	4b24      	ldr	r3, [pc, #144]	@ (80091f0 <timeCircuit__toggleTimeColon+0xc0>)
 800915e:	701a      	strb	r2, [r3, #0]
    previousTime = HAL_GetTick();
 8009160:	f7f8 fa36 	bl	80015d0 <HAL_GetTick>
 8009164:	4603      	mov	r3, r0
 8009166:	4a21      	ldr	r2, [pc, #132]	@ (80091ec <timeCircuit__toggleTimeColon+0xbc>)
 8009168:	6013      	str	r3, [r2, #0]
    isSuccess |= dateTime_setLed(pConfig->pDestinationTime,   COLON_LED_SEGMENT_ADDRESS, (toogleStatus<<6));
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6918      	ldr	r0, [r3, #16]
 800916e:	4b20      	ldr	r3, [pc, #128]	@ (80091f0 <timeCircuit__toggleTimeColon+0xc0>)
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	019b      	lsls	r3, r3, #6
 8009174:	b2db      	uxtb	r3, r3
 8009176:	461a      	mov	r2, r3
 8009178:	2107      	movs	r1, #7
 800917a:	f7fe fda6 	bl	8007cca <dateTime_setLed>
 800917e:	4603      	mov	r3, r0
 8009180:	461a      	mov	r2, r3
 8009182:	7bfb      	ldrb	r3, [r7, #15]
 8009184:	4313      	orrs	r3, r2
 8009186:	b2db      	uxtb	r3, r3
 8009188:	2b00      	cmp	r3, #0
 800918a:	bf14      	ite	ne
 800918c:	2301      	movne	r3, #1
 800918e:	2300      	moveq	r3, #0
 8009190:	73fb      	strb	r3, [r7, #15]
    isSuccess |= dateTime_setLed(pConfig->pLastDepartedTime,  COLON_LED_SEGMENT_ADDRESS, (toogleStatus<<6));
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6998      	ldr	r0, [r3, #24]
 8009196:	4b16      	ldr	r3, [pc, #88]	@ (80091f0 <timeCircuit__toggleTimeColon+0xc0>)
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	019b      	lsls	r3, r3, #6
 800919c:	b2db      	uxtb	r3, r3
 800919e:	461a      	mov	r2, r3
 80091a0:	2107      	movs	r1, #7
 80091a2:	f7fe fd92 	bl	8007cca <dateTime_setLed>
 80091a6:	4603      	mov	r3, r0
 80091a8:	461a      	mov	r2, r3
 80091aa:	7bfb      	ldrb	r3, [r7, #15]
 80091ac:	4313      	orrs	r3, r2
 80091ae:	b2db      	uxtb	r3, r3
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	bf14      	ite	ne
 80091b4:	2301      	movne	r3, #1
 80091b6:	2300      	moveq	r3, #0
 80091b8:	73fb      	strb	r3, [r7, #15]
    isSuccess |= dateTime_setLed(pConfig->pPresentTime,       COLON_LED_SEGMENT_ADDRESS, (toogleStatus<<6));
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6958      	ldr	r0, [r3, #20]
 80091be:	4b0c      	ldr	r3, [pc, #48]	@ (80091f0 <timeCircuit__toggleTimeColon+0xc0>)
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	019b      	lsls	r3, r3, #6
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	461a      	mov	r2, r3
 80091c8:	2107      	movs	r1, #7
 80091ca:	f7fe fd7e 	bl	8007cca <dateTime_setLed>
 80091ce:	4603      	mov	r3, r0
 80091d0:	461a      	mov	r2, r3
 80091d2:	7bfb      	ldrb	r3, [r7, #15]
 80091d4:	4313      	orrs	r3, r2
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	2b00      	cmp	r3, #0
 80091da:	bf14      	ite	ne
 80091dc:	2301      	movne	r3, #1
 80091de:	2300      	moveq	r3, #0
 80091e0:	73fb      	strb	r3, [r7, #15]
//     // HAL_Delay(500);
//    }

  }

  return isSuccess;
 80091e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3710      	adds	r7, #16
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}
 80091ec:	20000b9c 	.word	0x20000b9c
 80091f0:	20000ba0 	.word	0x20000ba0

080091f4 <timeCircuit_control_update>:



TimeCircuit_Control_Status_t timeCircuit_control_update(TimeCircuit_Control_Config_t * const pConfig)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  TimeCircuit_Control_Status_t isSuccess = 1;
 80091fc:	2301      	movs	r3, #1
 80091fe:	73fb      	strb	r3, [r7, #15]

  //Update date times after time travel simulation event
  isSuccess &= timeCircuit_control_updateTimeTravelDateTimes(pConfig);
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f7ff fd9d 	bl	8008d40 <timeCircuit_control_updateTimeTravelDateTimes>
 8009206:	4603      	mov	r3, r0
 8009208:	461a      	mov	r2, r3
 800920a:	7bfb      	ldrb	r3, [r7, #15]
 800920c:	4013      	ands	r3, r2
 800920e:	2b00      	cmp	r3, #0
 8009210:	bf14      	ite	ne
 8009212:	2301      	movne	r3, #1
 8009214:	2300      	moveq	r3, #0
 8009216:	73fb      	strb	r3, [r7, #15]

  //Read user input date time
  isSuccess &= timeCircuit_control_readInputDateTime(pConfig);
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f7ff fb21 	bl	8008860 <timeCircuit_control_readInputDateTime>
 800921e:	4603      	mov	r3, r0
 8009220:	461a      	mov	r2, r3
 8009222:	7bfb      	ldrb	r3, [r7, #15]
 8009224:	4013      	ands	r3, r2
 8009226:	2b00      	cmp	r3, #0
 8009228:	bf14      	ite	ne
 800922a:	2301      	movne	r3, #1
 800922c:	2300      	moveq	r3, #0
 800922e:	73fb      	strb	r3, [r7, #15]

  //Update Destination Time from user input
  isSuccess &= timeCircuit_control_updateDestinationDateTime(pConfig);
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f7ff fe15 	bl	8008e60 <timeCircuit_control_updateDestinationDateTime>
 8009236:	4603      	mov	r3, r0
 8009238:	461a      	mov	r2, r3
 800923a:	7bfb      	ldrb	r3, [r7, #15]
 800923c:	4013      	ands	r3, r2
 800923e:	2b00      	cmp	r3, #0
 8009240:	bf14      	ite	ne
 8009242:	2301      	movne	r3, #1
 8009244:	2300      	moveq	r3, #0
 8009246:	73fb      	strb	r3, [r7, #15]

  //Update time circuit displays colons
  isSuccess &= timeCircuit__toggleTimeColon(pConfig);
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f7ff ff71 	bl	8009130 <timeCircuit__toggleTimeColon>
 800924e:	4603      	mov	r3, r0
 8009250:	461a      	mov	r2, r3
 8009252:	7bfb      	ldrb	r3, [r7, #15]
 8009254:	4013      	ands	r3, r2
 8009256:	2b00      	cmp	r3, #0
 8009258:	bf14      	ite	ne
 800925a:	2301      	movne	r3, #1
 800925c:	2300      	moveq	r3, #0
 800925e:	73fb      	strb	r3, [r7, #15]
  //isSuccess &= dateTime_toggleTimeColon(pConfig->pDestinationTime, pConfig->pPresentTime, pConfig->pLastDepartedTime);

  //Update Present Time from RTC
  isSuccess &= timeCircuit_control_updatePresentDateTime(pConfig);
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f7ff fd09 	bl	8008c78 <timeCircuit_control_updatePresentDateTime>
 8009266:	4603      	mov	r3, r0
 8009268:	461a      	mov	r2, r3
 800926a:	7bfb      	ldrb	r3, [r7, #15]
 800926c:	4013      	ands	r3, r2
 800926e:	2b00      	cmp	r3, #0
 8009270:	bf14      	ite	ne
 8009272:	2301      	movne	r3, #1
 8009274:	2300      	moveq	r3, #0
 8009276:	73fb      	strb	r3, [r7, #15]

  //Update Glitch
  isSuccess &= timeCircuit_control_updateGlitch(pConfig);
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f7ff fe6f 	bl	8008f5c <timeCircuit_control_updateGlitch>
 800927e:	4603      	mov	r3, r0
 8009280:	461a      	mov	r2, r3
 8009282:	7bfb      	ldrb	r3, [r7, #15]
 8009284:	4013      	ands	r3, r2
 8009286:	2b00      	cmp	r3, #0
 8009288:	bf14      	ite	ne
 800928a:	2301      	movne	r3, #1
 800928c:	2300      	moveq	r3, #0
 800928e:	73fb      	strb	r3, [r7, #15]

  //Update Sound Effects
  isSuccess &= soundEffects_update(pConfig->pSoundEffectConfig, pConfig->pStorageDeviceConfig);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009298:	4619      	mov	r1, r3
 800929a:	4610      	mov	r0, r2
 800929c:	f7ff f862 	bl	8008364 <soundEffects_update>
 80092a0:	4603      	mov	r3, r0
 80092a2:	461a      	mov	r2, r3
 80092a4:	7bfb      	ldrb	r3, [r7, #15]
 80092a6:	4013      	ands	r3, r2
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	bf14      	ite	ne
 80092ac:	2301      	movne	r3, #1
 80092ae:	2300      	moveq	r3, #0
 80092b0:	73fb      	strb	r3, [r7, #15]

  return isSuccess;
 80092b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3710      	adds	r7, #16
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	4603      	mov	r3, r0
 80092c4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80092c6:	79fb      	ldrb	r3, [r7, #7]
 80092c8:	4a08      	ldr	r2, [pc, #32]	@ (80092ec <disk_status+0x30>)
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	4413      	add	r3, r2
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	79fa      	ldrb	r2, [r7, #7]
 80092d4:	4905      	ldr	r1, [pc, #20]	@ (80092ec <disk_status+0x30>)
 80092d6:	440a      	add	r2, r1
 80092d8:	7a12      	ldrb	r2, [r2, #8]
 80092da:	4610      	mov	r0, r2
 80092dc:	4798      	blx	r3
 80092de:	4603      	mov	r3, r0
 80092e0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80092e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3710      	adds	r7, #16
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}
 80092ec:	20000bcc 	.word	0x20000bcc

080092f0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	4603      	mov	r3, r0
 80092f8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80092fa:	2300      	movs	r3, #0
 80092fc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80092fe:	79fb      	ldrb	r3, [r7, #7]
 8009300:	4a0e      	ldr	r2, [pc, #56]	@ (800933c <disk_initialize+0x4c>)
 8009302:	5cd3      	ldrb	r3, [r2, r3]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d114      	bne.n	8009332 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009308:	79fb      	ldrb	r3, [r7, #7]
 800930a:	4a0c      	ldr	r2, [pc, #48]	@ (800933c <disk_initialize+0x4c>)
 800930c:	009b      	lsls	r3, r3, #2
 800930e:	4413      	add	r3, r2
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	79fa      	ldrb	r2, [r7, #7]
 8009316:	4909      	ldr	r1, [pc, #36]	@ (800933c <disk_initialize+0x4c>)
 8009318:	440a      	add	r2, r1
 800931a:	7a12      	ldrb	r2, [r2, #8]
 800931c:	4610      	mov	r0, r2
 800931e:	4798      	blx	r3
 8009320:	4603      	mov	r3, r0
 8009322:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8009324:	7bfb      	ldrb	r3, [r7, #15]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d103      	bne.n	8009332 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800932a:	79fb      	ldrb	r3, [r7, #7]
 800932c:	4a03      	ldr	r2, [pc, #12]	@ (800933c <disk_initialize+0x4c>)
 800932e:	2101      	movs	r1, #1
 8009330:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8009332:	7bfb      	ldrb	r3, [r7, #15]
}
 8009334:	4618      	mov	r0, r3
 8009336:	3710      	adds	r7, #16
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	20000bcc 	.word	0x20000bcc

08009340 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009340:	b590      	push	{r4, r7, lr}
 8009342:	b087      	sub	sp, #28
 8009344:	af00      	add	r7, sp, #0
 8009346:	60b9      	str	r1, [r7, #8]
 8009348:	607a      	str	r2, [r7, #4]
 800934a:	603b      	str	r3, [r7, #0]
 800934c:	4603      	mov	r3, r0
 800934e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009350:	7bfb      	ldrb	r3, [r7, #15]
 8009352:	4a0a      	ldr	r2, [pc, #40]	@ (800937c <disk_read+0x3c>)
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	4413      	add	r3, r2
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	689c      	ldr	r4, [r3, #8]
 800935c:	7bfb      	ldrb	r3, [r7, #15]
 800935e:	4a07      	ldr	r2, [pc, #28]	@ (800937c <disk_read+0x3c>)
 8009360:	4413      	add	r3, r2
 8009362:	7a18      	ldrb	r0, [r3, #8]
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	687a      	ldr	r2, [r7, #4]
 8009368:	68b9      	ldr	r1, [r7, #8]
 800936a:	47a0      	blx	r4
 800936c:	4603      	mov	r3, r0
 800936e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009370:	7dfb      	ldrb	r3, [r7, #23]
}
 8009372:	4618      	mov	r0, r3
 8009374:	371c      	adds	r7, #28
 8009376:	46bd      	mov	sp, r7
 8009378:	bd90      	pop	{r4, r7, pc}
 800937a:	bf00      	nop
 800937c:	20000bcc 	.word	0x20000bcc

08009380 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009380:	b590      	push	{r4, r7, lr}
 8009382:	b087      	sub	sp, #28
 8009384:	af00      	add	r7, sp, #0
 8009386:	60b9      	str	r1, [r7, #8]
 8009388:	607a      	str	r2, [r7, #4]
 800938a:	603b      	str	r3, [r7, #0]
 800938c:	4603      	mov	r3, r0
 800938e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009390:	7bfb      	ldrb	r3, [r7, #15]
 8009392:	4a0a      	ldr	r2, [pc, #40]	@ (80093bc <disk_write+0x3c>)
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	4413      	add	r3, r2
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	68dc      	ldr	r4, [r3, #12]
 800939c:	7bfb      	ldrb	r3, [r7, #15]
 800939e:	4a07      	ldr	r2, [pc, #28]	@ (80093bc <disk_write+0x3c>)
 80093a0:	4413      	add	r3, r2
 80093a2:	7a18      	ldrb	r0, [r3, #8]
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	68b9      	ldr	r1, [r7, #8]
 80093aa:	47a0      	blx	r4
 80093ac:	4603      	mov	r3, r0
 80093ae:	75fb      	strb	r3, [r7, #23]
  return res;
 80093b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	371c      	adds	r7, #28
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd90      	pop	{r4, r7, pc}
 80093ba:	bf00      	nop
 80093bc:	20000bcc 	.word	0x20000bcc

080093c0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b084      	sub	sp, #16
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	4603      	mov	r3, r0
 80093c8:	603a      	str	r2, [r7, #0]
 80093ca:	71fb      	strb	r3, [r7, #7]
 80093cc:	460b      	mov	r3, r1
 80093ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80093d0:	79fb      	ldrb	r3, [r7, #7]
 80093d2:	4a09      	ldr	r2, [pc, #36]	@ (80093f8 <disk_ioctl+0x38>)
 80093d4:	009b      	lsls	r3, r3, #2
 80093d6:	4413      	add	r3, r2
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	691b      	ldr	r3, [r3, #16]
 80093dc:	79fa      	ldrb	r2, [r7, #7]
 80093de:	4906      	ldr	r1, [pc, #24]	@ (80093f8 <disk_ioctl+0x38>)
 80093e0:	440a      	add	r2, r1
 80093e2:	7a10      	ldrb	r0, [r2, #8]
 80093e4:	79b9      	ldrb	r1, [r7, #6]
 80093e6:	683a      	ldr	r2, [r7, #0]
 80093e8:	4798      	blx	r3
 80093ea:	4603      	mov	r3, r0
 80093ec:	73fb      	strb	r3, [r7, #15]
  return res;
 80093ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3710      	adds	r7, #16
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	20000bcc 	.word	0x20000bcc

080093fc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80093fc:	b480      	push	{r7}
 80093fe:	b085      	sub	sp, #20
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	3301      	adds	r3, #1
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800940c:	89fb      	ldrh	r3, [r7, #14]
 800940e:	021b      	lsls	r3, r3, #8
 8009410:	b21a      	sxth	r2, r3
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	781b      	ldrb	r3, [r3, #0]
 8009416:	b21b      	sxth	r3, r3
 8009418:	4313      	orrs	r3, r2
 800941a:	b21b      	sxth	r3, r3
 800941c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800941e:	89fb      	ldrh	r3, [r7, #14]
}
 8009420:	4618      	mov	r0, r3
 8009422:	3714      	adds	r7, #20
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr

0800942c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800942c:	b480      	push	{r7}
 800942e:	b085      	sub	sp, #20
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	3303      	adds	r3, #3
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	021b      	lsls	r3, r3, #8
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	3202      	adds	r2, #2
 8009444:	7812      	ldrb	r2, [r2, #0]
 8009446:	4313      	orrs	r3, r2
 8009448:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	021b      	lsls	r3, r3, #8
 800944e:	687a      	ldr	r2, [r7, #4]
 8009450:	3201      	adds	r2, #1
 8009452:	7812      	ldrb	r2, [r2, #0]
 8009454:	4313      	orrs	r3, r2
 8009456:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	021b      	lsls	r3, r3, #8
 800945c:	687a      	ldr	r2, [r7, #4]
 800945e:	7812      	ldrb	r2, [r2, #0]
 8009460:	4313      	orrs	r3, r2
 8009462:	60fb      	str	r3, [r7, #12]
	return rv;
 8009464:	68fb      	ldr	r3, [r7, #12]
}
 8009466:	4618      	mov	r0, r3
 8009468:	3714      	adds	r7, #20
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr

08009472 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009472:	b480      	push	{r7}
 8009474:	b083      	sub	sp, #12
 8009476:	af00      	add	r7, sp, #0
 8009478:	6078      	str	r0, [r7, #4]
 800947a:	460b      	mov	r3, r1
 800947c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	1c5a      	adds	r2, r3, #1
 8009482:	607a      	str	r2, [r7, #4]
 8009484:	887a      	ldrh	r2, [r7, #2]
 8009486:	b2d2      	uxtb	r2, r2
 8009488:	701a      	strb	r2, [r3, #0]
 800948a:	887b      	ldrh	r3, [r7, #2]
 800948c:	0a1b      	lsrs	r3, r3, #8
 800948e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	1c5a      	adds	r2, r3, #1
 8009494:	607a      	str	r2, [r7, #4]
 8009496:	887a      	ldrh	r2, [r7, #2]
 8009498:	b2d2      	uxtb	r2, r2
 800949a:	701a      	strb	r2, [r3, #0]
}
 800949c:	bf00      	nop
 800949e:	370c      	adds	r7, #12
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80094a8:	b480      	push	{r7}
 80094aa:	b083      	sub	sp, #12
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	1c5a      	adds	r2, r3, #1
 80094b6:	607a      	str	r2, [r7, #4]
 80094b8:	683a      	ldr	r2, [r7, #0]
 80094ba:	b2d2      	uxtb	r2, r2
 80094bc:	701a      	strb	r2, [r3, #0]
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	0a1b      	lsrs	r3, r3, #8
 80094c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	1c5a      	adds	r2, r3, #1
 80094c8:	607a      	str	r2, [r7, #4]
 80094ca:	683a      	ldr	r2, [r7, #0]
 80094cc:	b2d2      	uxtb	r2, r2
 80094ce:	701a      	strb	r2, [r3, #0]
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	0a1b      	lsrs	r3, r3, #8
 80094d4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	1c5a      	adds	r2, r3, #1
 80094da:	607a      	str	r2, [r7, #4]
 80094dc:	683a      	ldr	r2, [r7, #0]
 80094de:	b2d2      	uxtb	r2, r2
 80094e0:	701a      	strb	r2, [r3, #0]
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	0a1b      	lsrs	r3, r3, #8
 80094e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	1c5a      	adds	r2, r3, #1
 80094ec:	607a      	str	r2, [r7, #4]
 80094ee:	683a      	ldr	r2, [r7, #0]
 80094f0:	b2d2      	uxtb	r2, r2
 80094f2:	701a      	strb	r2, [r3, #0]
}
 80094f4:	bf00      	nop
 80094f6:	370c      	adds	r7, #12
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr

08009500 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009500:	b480      	push	{r7}
 8009502:	b087      	sub	sp, #28
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d00d      	beq.n	8009536 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800951a:	693a      	ldr	r2, [r7, #16]
 800951c:	1c53      	adds	r3, r2, #1
 800951e:	613b      	str	r3, [r7, #16]
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	1c59      	adds	r1, r3, #1
 8009524:	6179      	str	r1, [r7, #20]
 8009526:	7812      	ldrb	r2, [r2, #0]
 8009528:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	3b01      	subs	r3, #1
 800952e:	607b      	str	r3, [r7, #4]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d1f1      	bne.n	800951a <mem_cpy+0x1a>
	}
}
 8009536:	bf00      	nop
 8009538:	371c      	adds	r7, #28
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr

08009542 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009542:	b480      	push	{r7}
 8009544:	b087      	sub	sp, #28
 8009546:	af00      	add	r7, sp, #0
 8009548:	60f8      	str	r0, [r7, #12]
 800954a:	60b9      	str	r1, [r7, #8]
 800954c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	1c5a      	adds	r2, r3, #1
 8009556:	617a      	str	r2, [r7, #20]
 8009558:	68ba      	ldr	r2, [r7, #8]
 800955a:	b2d2      	uxtb	r2, r2
 800955c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	3b01      	subs	r3, #1
 8009562:	607b      	str	r3, [r7, #4]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d1f3      	bne.n	8009552 <mem_set+0x10>
}
 800956a:	bf00      	nop
 800956c:	bf00      	nop
 800956e:	371c      	adds	r7, #28
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr

08009578 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009578:	b480      	push	{r7}
 800957a:	b089      	sub	sp, #36	@ 0x24
 800957c:	af00      	add	r7, sp, #0
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	60b9      	str	r1, [r7, #8]
 8009582:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	61fb      	str	r3, [r7, #28]
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800958c:	2300      	movs	r3, #0
 800958e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009590:	69fb      	ldr	r3, [r7, #28]
 8009592:	1c5a      	adds	r2, r3, #1
 8009594:	61fa      	str	r2, [r7, #28]
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	4619      	mov	r1, r3
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	1c5a      	adds	r2, r3, #1
 800959e:	61ba      	str	r2, [r7, #24]
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	1acb      	subs	r3, r1, r3
 80095a4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	3b01      	subs	r3, #1
 80095aa:	607b      	str	r3, [r7, #4]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d002      	beq.n	80095b8 <mem_cmp+0x40>
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d0eb      	beq.n	8009590 <mem_cmp+0x18>

	return r;
 80095b8:	697b      	ldr	r3, [r7, #20]
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3724      	adds	r7, #36	@ 0x24
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr

080095c6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80095c6:	b480      	push	{r7}
 80095c8:	b083      	sub	sp, #12
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
 80095ce:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80095d0:	e002      	b.n	80095d8 <chk_chr+0x12>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	3301      	adds	r3, #1
 80095d6:	607b      	str	r3, [r7, #4]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d005      	beq.n	80095ec <chk_chr+0x26>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	461a      	mov	r2, r3
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d1f2      	bne.n	80095d2 <chk_chr+0xc>
	return *str;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	781b      	ldrb	r3, [r3, #0]
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b085      	sub	sp, #20
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009606:	2300      	movs	r3, #0
 8009608:	60bb      	str	r3, [r7, #8]
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	60fb      	str	r3, [r7, #12]
 800960e:	e029      	b.n	8009664 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009610:	4a27      	ldr	r2, [pc, #156]	@ (80096b0 <chk_lock+0xb4>)
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	011b      	lsls	r3, r3, #4
 8009616:	4413      	add	r3, r2
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d01d      	beq.n	800965a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800961e:	4a24      	ldr	r2, [pc, #144]	@ (80096b0 <chk_lock+0xb4>)
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	011b      	lsls	r3, r3, #4
 8009624:	4413      	add	r3, r2
 8009626:	681a      	ldr	r2, [r3, #0]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	429a      	cmp	r2, r3
 800962e:	d116      	bne.n	800965e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009630:	4a1f      	ldr	r2, [pc, #124]	@ (80096b0 <chk_lock+0xb4>)
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	011b      	lsls	r3, r3, #4
 8009636:	4413      	add	r3, r2
 8009638:	3304      	adds	r3, #4
 800963a:	681a      	ldr	r2, [r3, #0]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009640:	429a      	cmp	r2, r3
 8009642:	d10c      	bne.n	800965e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009644:	4a1a      	ldr	r2, [pc, #104]	@ (80096b0 <chk_lock+0xb4>)
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	011b      	lsls	r3, r3, #4
 800964a:	4413      	add	r3, r2
 800964c:	3308      	adds	r3, #8
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009654:	429a      	cmp	r2, r3
 8009656:	d102      	bne.n	800965e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009658:	e007      	b.n	800966a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800965a:	2301      	movs	r3, #1
 800965c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	3301      	adds	r3, #1
 8009662:	60fb      	str	r3, [r7, #12]
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2b01      	cmp	r3, #1
 8009668:	d9d2      	bls.n	8009610 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2b02      	cmp	r3, #2
 800966e:	d109      	bne.n	8009684 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d102      	bne.n	800967c <chk_lock+0x80>
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	2b02      	cmp	r3, #2
 800967a:	d101      	bne.n	8009680 <chk_lock+0x84>
 800967c:	2300      	movs	r3, #0
 800967e:	e010      	b.n	80096a2 <chk_lock+0xa6>
 8009680:	2312      	movs	r3, #18
 8009682:	e00e      	b.n	80096a2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d108      	bne.n	800969c <chk_lock+0xa0>
 800968a:	4a09      	ldr	r2, [pc, #36]	@ (80096b0 <chk_lock+0xb4>)
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	011b      	lsls	r3, r3, #4
 8009690:	4413      	add	r3, r2
 8009692:	330c      	adds	r3, #12
 8009694:	881b      	ldrh	r3, [r3, #0]
 8009696:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800969a:	d101      	bne.n	80096a0 <chk_lock+0xa4>
 800969c:	2310      	movs	r3, #16
 800969e:	e000      	b.n	80096a2 <chk_lock+0xa6>
 80096a0:	2300      	movs	r3, #0
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3714      	adds	r7, #20
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr
 80096ae:	bf00      	nop
 80096b0:	20000bac 	.word	0x20000bac

080096b4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80096b4:	b480      	push	{r7}
 80096b6:	b083      	sub	sp, #12
 80096b8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80096ba:	2300      	movs	r3, #0
 80096bc:	607b      	str	r3, [r7, #4]
 80096be:	e002      	b.n	80096c6 <enq_lock+0x12>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	3301      	adds	r3, #1
 80096c4:	607b      	str	r3, [r7, #4]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d806      	bhi.n	80096da <enq_lock+0x26>
 80096cc:	4a09      	ldr	r2, [pc, #36]	@ (80096f4 <enq_lock+0x40>)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	011b      	lsls	r3, r3, #4
 80096d2:	4413      	add	r3, r2
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d1f2      	bne.n	80096c0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2b02      	cmp	r3, #2
 80096de:	bf14      	ite	ne
 80096e0:	2301      	movne	r3, #1
 80096e2:	2300      	moveq	r3, #0
 80096e4:	b2db      	uxtb	r3, r3
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	370c      	adds	r7, #12
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr
 80096f2:	bf00      	nop
 80096f4:	20000bac 	.word	0x20000bac

080096f8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009702:	2300      	movs	r3, #0
 8009704:	60fb      	str	r3, [r7, #12]
 8009706:	e01f      	b.n	8009748 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009708:	4a41      	ldr	r2, [pc, #260]	@ (8009810 <inc_lock+0x118>)
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	011b      	lsls	r3, r3, #4
 800970e:	4413      	add	r3, r2
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	429a      	cmp	r2, r3
 8009718:	d113      	bne.n	8009742 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800971a:	4a3d      	ldr	r2, [pc, #244]	@ (8009810 <inc_lock+0x118>)
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	011b      	lsls	r3, r3, #4
 8009720:	4413      	add	r3, r2
 8009722:	3304      	adds	r3, #4
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800972a:	429a      	cmp	r2, r3
 800972c:	d109      	bne.n	8009742 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800972e:	4a38      	ldr	r2, [pc, #224]	@ (8009810 <inc_lock+0x118>)
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	011b      	lsls	r3, r3, #4
 8009734:	4413      	add	r3, r2
 8009736:	3308      	adds	r3, #8
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800973e:	429a      	cmp	r2, r3
 8009740:	d006      	beq.n	8009750 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	3301      	adds	r3, #1
 8009746:	60fb      	str	r3, [r7, #12]
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2b01      	cmp	r3, #1
 800974c:	d9dc      	bls.n	8009708 <inc_lock+0x10>
 800974e:	e000      	b.n	8009752 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009750:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2b02      	cmp	r3, #2
 8009756:	d132      	bne.n	80097be <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009758:	2300      	movs	r3, #0
 800975a:	60fb      	str	r3, [r7, #12]
 800975c:	e002      	b.n	8009764 <inc_lock+0x6c>
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	3301      	adds	r3, #1
 8009762:	60fb      	str	r3, [r7, #12]
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2b01      	cmp	r3, #1
 8009768:	d806      	bhi.n	8009778 <inc_lock+0x80>
 800976a:	4a29      	ldr	r2, [pc, #164]	@ (8009810 <inc_lock+0x118>)
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	011b      	lsls	r3, r3, #4
 8009770:	4413      	add	r3, r2
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d1f2      	bne.n	800975e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2b02      	cmp	r3, #2
 800977c:	d101      	bne.n	8009782 <inc_lock+0x8a>
 800977e:	2300      	movs	r3, #0
 8009780:	e040      	b.n	8009804 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681a      	ldr	r2, [r3, #0]
 8009786:	4922      	ldr	r1, [pc, #136]	@ (8009810 <inc_lock+0x118>)
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	011b      	lsls	r3, r3, #4
 800978c:	440b      	add	r3, r1
 800978e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	689a      	ldr	r2, [r3, #8]
 8009794:	491e      	ldr	r1, [pc, #120]	@ (8009810 <inc_lock+0x118>)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	011b      	lsls	r3, r3, #4
 800979a:	440b      	add	r3, r1
 800979c:	3304      	adds	r3, #4
 800979e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	695a      	ldr	r2, [r3, #20]
 80097a4:	491a      	ldr	r1, [pc, #104]	@ (8009810 <inc_lock+0x118>)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	011b      	lsls	r3, r3, #4
 80097aa:	440b      	add	r3, r1
 80097ac:	3308      	adds	r3, #8
 80097ae:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80097b0:	4a17      	ldr	r2, [pc, #92]	@ (8009810 <inc_lock+0x118>)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	011b      	lsls	r3, r3, #4
 80097b6:	4413      	add	r3, r2
 80097b8:	330c      	adds	r3, #12
 80097ba:	2200      	movs	r2, #0
 80097bc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d009      	beq.n	80097d8 <inc_lock+0xe0>
 80097c4:	4a12      	ldr	r2, [pc, #72]	@ (8009810 <inc_lock+0x118>)
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	011b      	lsls	r3, r3, #4
 80097ca:	4413      	add	r3, r2
 80097cc:	330c      	adds	r3, #12
 80097ce:	881b      	ldrh	r3, [r3, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d001      	beq.n	80097d8 <inc_lock+0xe0>
 80097d4:	2300      	movs	r3, #0
 80097d6:	e015      	b.n	8009804 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d108      	bne.n	80097f0 <inc_lock+0xf8>
 80097de:	4a0c      	ldr	r2, [pc, #48]	@ (8009810 <inc_lock+0x118>)
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	011b      	lsls	r3, r3, #4
 80097e4:	4413      	add	r3, r2
 80097e6:	330c      	adds	r3, #12
 80097e8:	881b      	ldrh	r3, [r3, #0]
 80097ea:	3301      	adds	r3, #1
 80097ec:	b29a      	uxth	r2, r3
 80097ee:	e001      	b.n	80097f4 <inc_lock+0xfc>
 80097f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80097f4:	4906      	ldr	r1, [pc, #24]	@ (8009810 <inc_lock+0x118>)
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	011b      	lsls	r3, r3, #4
 80097fa:	440b      	add	r3, r1
 80097fc:	330c      	adds	r3, #12
 80097fe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	3301      	adds	r3, #1
}
 8009804:	4618      	mov	r0, r3
 8009806:	3714      	adds	r7, #20
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr
 8009810:	20000bac 	.word	0x20000bac

08009814 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009814:	b480      	push	{r7}
 8009816:	b085      	sub	sp, #20
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	3b01      	subs	r3, #1
 8009820:	607b      	str	r3, [r7, #4]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2b01      	cmp	r3, #1
 8009826:	d825      	bhi.n	8009874 <dec_lock+0x60>
		n = Files[i].ctr;
 8009828:	4a17      	ldr	r2, [pc, #92]	@ (8009888 <dec_lock+0x74>)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	011b      	lsls	r3, r3, #4
 800982e:	4413      	add	r3, r2
 8009830:	330c      	adds	r3, #12
 8009832:	881b      	ldrh	r3, [r3, #0]
 8009834:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009836:	89fb      	ldrh	r3, [r7, #14]
 8009838:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800983c:	d101      	bne.n	8009842 <dec_lock+0x2e>
 800983e:	2300      	movs	r3, #0
 8009840:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009842:	89fb      	ldrh	r3, [r7, #14]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d002      	beq.n	800984e <dec_lock+0x3a>
 8009848:	89fb      	ldrh	r3, [r7, #14]
 800984a:	3b01      	subs	r3, #1
 800984c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800984e:	4a0e      	ldr	r2, [pc, #56]	@ (8009888 <dec_lock+0x74>)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	011b      	lsls	r3, r3, #4
 8009854:	4413      	add	r3, r2
 8009856:	330c      	adds	r3, #12
 8009858:	89fa      	ldrh	r2, [r7, #14]
 800985a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800985c:	89fb      	ldrh	r3, [r7, #14]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d105      	bne.n	800986e <dec_lock+0x5a>
 8009862:	4a09      	ldr	r2, [pc, #36]	@ (8009888 <dec_lock+0x74>)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	011b      	lsls	r3, r3, #4
 8009868:	4413      	add	r3, r2
 800986a:	2200      	movs	r2, #0
 800986c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800986e:	2300      	movs	r3, #0
 8009870:	737b      	strb	r3, [r7, #13]
 8009872:	e001      	b.n	8009878 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009874:	2302      	movs	r3, #2
 8009876:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009878:	7b7b      	ldrb	r3, [r7, #13]
}
 800987a:	4618      	mov	r0, r3
 800987c:	3714      	adds	r7, #20
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr
 8009886:	bf00      	nop
 8009888:	20000bac 	.word	0x20000bac

0800988c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800988c:	b480      	push	{r7}
 800988e:	b085      	sub	sp, #20
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009894:	2300      	movs	r3, #0
 8009896:	60fb      	str	r3, [r7, #12]
 8009898:	e010      	b.n	80098bc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800989a:	4a0d      	ldr	r2, [pc, #52]	@ (80098d0 <clear_lock+0x44>)
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	011b      	lsls	r3, r3, #4
 80098a0:	4413      	add	r3, r2
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d105      	bne.n	80098b6 <clear_lock+0x2a>
 80098aa:	4a09      	ldr	r2, [pc, #36]	@ (80098d0 <clear_lock+0x44>)
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	011b      	lsls	r3, r3, #4
 80098b0:	4413      	add	r3, r2
 80098b2:	2200      	movs	r2, #0
 80098b4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	3301      	adds	r3, #1
 80098ba:	60fb      	str	r3, [r7, #12]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2b01      	cmp	r3, #1
 80098c0:	d9eb      	bls.n	800989a <clear_lock+0xe>
	}
}
 80098c2:	bf00      	nop
 80098c4:	bf00      	nop
 80098c6:	3714      	adds	r7, #20
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr
 80098d0:	20000bac 	.word	0x20000bac

080098d4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b086      	sub	sp, #24
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80098dc:	2300      	movs	r3, #0
 80098de:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	78db      	ldrb	r3, [r3, #3]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d034      	beq.n	8009952 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	7858      	ldrb	r0, [r3, #1]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80098f8:	2301      	movs	r3, #1
 80098fa:	697a      	ldr	r2, [r7, #20]
 80098fc:	f7ff fd40 	bl	8009380 <disk_write>
 8009900:	4603      	mov	r3, r0
 8009902:	2b00      	cmp	r3, #0
 8009904:	d002      	beq.n	800990c <sync_window+0x38>
			res = FR_DISK_ERR;
 8009906:	2301      	movs	r3, #1
 8009908:	73fb      	strb	r3, [r7, #15]
 800990a:	e022      	b.n	8009952 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2200      	movs	r2, #0
 8009910:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6a1b      	ldr	r3, [r3, #32]
 8009916:	697a      	ldr	r2, [r7, #20]
 8009918:	1ad2      	subs	r2, r2, r3
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	699b      	ldr	r3, [r3, #24]
 800991e:	429a      	cmp	r2, r3
 8009920:	d217      	bcs.n	8009952 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	789b      	ldrb	r3, [r3, #2]
 8009926:	613b      	str	r3, [r7, #16]
 8009928:	e010      	b.n	800994c <sync_window+0x78>
					wsect += fs->fsize;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	699b      	ldr	r3, [r3, #24]
 800992e:	697a      	ldr	r2, [r7, #20]
 8009930:	4413      	add	r3, r2
 8009932:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	7858      	ldrb	r0, [r3, #1]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800993e:	2301      	movs	r3, #1
 8009940:	697a      	ldr	r2, [r7, #20]
 8009942:	f7ff fd1d 	bl	8009380 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	3b01      	subs	r3, #1
 800994a:	613b      	str	r3, [r7, #16]
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	2b01      	cmp	r3, #1
 8009950:	d8eb      	bhi.n	800992a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009952:	7bfb      	ldrb	r3, [r7, #15]
}
 8009954:	4618      	mov	r0, r3
 8009956:	3718      	adds	r7, #24
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009966:	2300      	movs	r3, #0
 8009968:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800996e:	683a      	ldr	r2, [r7, #0]
 8009970:	429a      	cmp	r2, r3
 8009972:	d01b      	beq.n	80099ac <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f7ff ffad 	bl	80098d4 <sync_window>
 800997a:	4603      	mov	r3, r0
 800997c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800997e:	7bfb      	ldrb	r3, [r7, #15]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d113      	bne.n	80099ac <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	7858      	ldrb	r0, [r3, #1]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800998e:	2301      	movs	r3, #1
 8009990:	683a      	ldr	r2, [r7, #0]
 8009992:	f7ff fcd5 	bl	8009340 <disk_read>
 8009996:	4603      	mov	r3, r0
 8009998:	2b00      	cmp	r3, #0
 800999a:	d004      	beq.n	80099a6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800999c:	f04f 33ff 	mov.w	r3, #4294967295
 80099a0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80099a2:	2301      	movs	r3, #1
 80099a4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	683a      	ldr	r2, [r7, #0]
 80099aa:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 80099ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
	...

080099b8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b084      	sub	sp, #16
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f7ff ff87 	bl	80098d4 <sync_window>
 80099c6:	4603      	mov	r3, r0
 80099c8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80099ca:	7bfb      	ldrb	r3, [r7, #15]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d158      	bne.n	8009a82 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	2b03      	cmp	r3, #3
 80099d6:	d148      	bne.n	8009a6a <sync_fs+0xb2>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	791b      	ldrb	r3, [r3, #4]
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d144      	bne.n	8009a6a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	3330      	adds	r3, #48	@ 0x30
 80099e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80099e8:	2100      	movs	r1, #0
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7ff fda9 	bl	8009542 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	3330      	adds	r3, #48	@ 0x30
 80099f4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80099f8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7ff fd38 	bl	8009472 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	3330      	adds	r3, #48	@ 0x30
 8009a06:	4921      	ldr	r1, [pc, #132]	@ (8009a8c <sync_fs+0xd4>)
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f7ff fd4d 	bl	80094a8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	3330      	adds	r3, #48	@ 0x30
 8009a12:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009a16:	491e      	ldr	r1, [pc, #120]	@ (8009a90 <sync_fs+0xd8>)
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f7ff fd45 	bl	80094a8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	3330      	adds	r3, #48	@ 0x30
 8009a22:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	691b      	ldr	r3, [r3, #16]
 8009a2a:	4619      	mov	r1, r3
 8009a2c:	4610      	mov	r0, r2
 8009a2e:	f7ff fd3b 	bl	80094a8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	3330      	adds	r3, #48	@ 0x30
 8009a36:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	68db      	ldr	r3, [r3, #12]
 8009a3e:	4619      	mov	r1, r3
 8009a40:	4610      	mov	r0, r2
 8009a42:	f7ff fd31 	bl	80094a8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	69db      	ldr	r3, [r3, #28]
 8009a4a:	1c5a      	adds	r2, r3, #1
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	7858      	ldrb	r0, [r3, #1]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a5e:	2301      	movs	r3, #1
 8009a60:	f7ff fc8e 	bl	8009380 <disk_write>
			fs->fsi_flag = 0;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2200      	movs	r2, #0
 8009a68:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	785b      	ldrb	r3, [r3, #1]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	2100      	movs	r1, #0
 8009a72:	4618      	mov	r0, r3
 8009a74:	f7ff fca4 	bl	80093c0 <disk_ioctl>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d001      	beq.n	8009a82 <sync_fs+0xca>
 8009a7e:	2301      	movs	r3, #1
 8009a80:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3710      	adds	r7, #16
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	41615252 	.word	0x41615252
 8009a90:	61417272 	.word	0x61417272

08009a94 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	3b02      	subs	r3, #2
 8009aa2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	695b      	ldr	r3, [r3, #20]
 8009aa8:	3b02      	subs	r3, #2
 8009aaa:	683a      	ldr	r2, [r7, #0]
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d301      	bcc.n	8009ab4 <clust2sect+0x20>
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	e008      	b.n	8009ac6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	895b      	ldrh	r3, [r3, #10]
 8009ab8:	461a      	mov	r2, r3
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	fb03 f202 	mul.w	r2, r3, r2
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ac4:	4413      	add	r3, r2
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	370c      	adds	r7, #12
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr

08009ad2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009ad2:	b580      	push	{r7, lr}
 8009ad4:	b086      	sub	sp, #24
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
 8009ada:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d904      	bls.n	8009af2 <get_fat+0x20>
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	695b      	ldr	r3, [r3, #20]
 8009aec:	683a      	ldr	r2, [r7, #0]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d302      	bcc.n	8009af8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009af2:	2301      	movs	r3, #1
 8009af4:	617b      	str	r3, [r7, #20]
 8009af6:	e08e      	b.n	8009c16 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009af8:	f04f 33ff 	mov.w	r3, #4294967295
 8009afc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	2b03      	cmp	r3, #3
 8009b04:	d061      	beq.n	8009bca <get_fat+0xf8>
 8009b06:	2b03      	cmp	r3, #3
 8009b08:	dc7b      	bgt.n	8009c02 <get_fat+0x130>
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d002      	beq.n	8009b14 <get_fat+0x42>
 8009b0e:	2b02      	cmp	r3, #2
 8009b10:	d041      	beq.n	8009b96 <get_fat+0xc4>
 8009b12:	e076      	b.n	8009c02 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	60fb      	str	r3, [r7, #12]
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	085b      	lsrs	r3, r3, #1
 8009b1c:	68fa      	ldr	r2, [r7, #12]
 8009b1e:	4413      	add	r3, r2
 8009b20:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	6a1a      	ldr	r2, [r3, #32]
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	0a5b      	lsrs	r3, r3, #9
 8009b2a:	4413      	add	r3, r2
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	6938      	ldr	r0, [r7, #16]
 8009b30:	f7ff ff14 	bl	800995c <move_window>
 8009b34:	4603      	mov	r3, r0
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d166      	bne.n	8009c08 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	1c5a      	adds	r2, r3, #1
 8009b3e:	60fa      	str	r2, [r7, #12]
 8009b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b44:	693a      	ldr	r2, [r7, #16]
 8009b46:	4413      	add	r3, r2
 8009b48:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009b4c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	6a1a      	ldr	r2, [r3, #32]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	0a5b      	lsrs	r3, r3, #9
 8009b56:	4413      	add	r3, r2
 8009b58:	4619      	mov	r1, r3
 8009b5a:	6938      	ldr	r0, [r7, #16]
 8009b5c:	f7ff fefe 	bl	800995c <move_window>
 8009b60:	4603      	mov	r3, r0
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d152      	bne.n	8009c0c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b6c:	693a      	ldr	r2, [r7, #16]
 8009b6e:	4413      	add	r3, r2
 8009b70:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009b74:	021b      	lsls	r3, r3, #8
 8009b76:	68ba      	ldr	r2, [r7, #8]
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	f003 0301 	and.w	r3, r3, #1
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d002      	beq.n	8009b8c <get_fat+0xba>
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	091b      	lsrs	r3, r3, #4
 8009b8a:	e002      	b.n	8009b92 <get_fat+0xc0>
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009b92:	617b      	str	r3, [r7, #20]
			break;
 8009b94:	e03f      	b.n	8009c16 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	6a1a      	ldr	r2, [r3, #32]
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	0a1b      	lsrs	r3, r3, #8
 8009b9e:	4413      	add	r3, r2
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	6938      	ldr	r0, [r7, #16]
 8009ba4:	f7ff feda 	bl	800995c <move_window>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d130      	bne.n	8009c10 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	005b      	lsls	r3, r3, #1
 8009bb8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8009bbc:	4413      	add	r3, r2
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f7ff fc1c 	bl	80093fc <ld_word>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	617b      	str	r3, [r7, #20]
			break;
 8009bc8:	e025      	b.n	8009c16 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	6a1a      	ldr	r2, [r3, #32]
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	09db      	lsrs	r3, r3, #7
 8009bd2:	4413      	add	r3, r2
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	6938      	ldr	r0, [r7, #16]
 8009bd8:	f7ff fec0 	bl	800995c <move_window>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d118      	bne.n	8009c14 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8009bf0:	4413      	add	r3, r2
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f7ff fc1a 	bl	800942c <ld_dword>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009bfe:	617b      	str	r3, [r7, #20]
			break;
 8009c00:	e009      	b.n	8009c16 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009c02:	2301      	movs	r3, #1
 8009c04:	617b      	str	r3, [r7, #20]
 8009c06:	e006      	b.n	8009c16 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009c08:	bf00      	nop
 8009c0a:	e004      	b.n	8009c16 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009c0c:	bf00      	nop
 8009c0e:	e002      	b.n	8009c16 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009c10:	bf00      	nop
 8009c12:	e000      	b.n	8009c16 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009c14:	bf00      	nop
		}
	}

	return val;
 8009c16:	697b      	ldr	r3, [r7, #20]
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3718      	adds	r7, #24
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009c20:	b590      	push	{r4, r7, lr}
 8009c22:	b089      	sub	sp, #36	@ 0x24
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	60f8      	str	r0, [r7, #12]
 8009c28:	60b9      	str	r1, [r7, #8]
 8009c2a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009c2c:	2302      	movs	r3, #2
 8009c2e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	f240 80d9 	bls.w	8009dea <put_fat+0x1ca>
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	695b      	ldr	r3, [r3, #20]
 8009c3c:	68ba      	ldr	r2, [r7, #8]
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	f080 80d3 	bcs.w	8009dea <put_fat+0x1ca>
		switch (fs->fs_type) {
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	781b      	ldrb	r3, [r3, #0]
 8009c48:	2b03      	cmp	r3, #3
 8009c4a:	f000 8096 	beq.w	8009d7a <put_fat+0x15a>
 8009c4e:	2b03      	cmp	r3, #3
 8009c50:	f300 80cb 	bgt.w	8009dea <put_fat+0x1ca>
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d002      	beq.n	8009c5e <put_fat+0x3e>
 8009c58:	2b02      	cmp	r3, #2
 8009c5a:	d06e      	beq.n	8009d3a <put_fat+0x11a>
 8009c5c:	e0c5      	b.n	8009dea <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	61bb      	str	r3, [r7, #24]
 8009c62:	69bb      	ldr	r3, [r7, #24]
 8009c64:	085b      	lsrs	r3, r3, #1
 8009c66:	69ba      	ldr	r2, [r7, #24]
 8009c68:	4413      	add	r3, r2
 8009c6a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	6a1a      	ldr	r2, [r3, #32]
 8009c70:	69bb      	ldr	r3, [r7, #24]
 8009c72:	0a5b      	lsrs	r3, r3, #9
 8009c74:	4413      	add	r3, r2
 8009c76:	4619      	mov	r1, r3
 8009c78:	68f8      	ldr	r0, [r7, #12]
 8009c7a:	f7ff fe6f 	bl	800995c <move_window>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009c82:	7ffb      	ldrb	r3, [r7, #31]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	f040 80a9 	bne.w	8009ddc <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009c90:	69bb      	ldr	r3, [r7, #24]
 8009c92:	1c59      	adds	r1, r3, #1
 8009c94:	61b9      	str	r1, [r7, #24]
 8009c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c9a:	4413      	add	r3, r2
 8009c9c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	f003 0301 	and.w	r3, r3, #1
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d00d      	beq.n	8009cc4 <put_fat+0xa4>
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	b25b      	sxtb	r3, r3
 8009cae:	f003 030f 	and.w	r3, r3, #15
 8009cb2:	b25a      	sxtb	r2, r3
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	011b      	lsls	r3, r3, #4
 8009cba:	b25b      	sxtb	r3, r3
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	b25b      	sxtb	r3, r3
 8009cc0:	b2db      	uxtb	r3, r3
 8009cc2:	e001      	b.n	8009cc8 <put_fat+0xa8>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	697a      	ldr	r2, [r7, #20]
 8009cca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2201      	movs	r2, #1
 8009cd0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	6a1a      	ldr	r2, [r3, #32]
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	0a5b      	lsrs	r3, r3, #9
 8009cda:	4413      	add	r3, r2
 8009cdc:	4619      	mov	r1, r3
 8009cde:	68f8      	ldr	r0, [r7, #12]
 8009ce0:	f7ff fe3c 	bl	800995c <move_window>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009ce8:	7ffb      	ldrb	r3, [r7, #31]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d178      	bne.n	8009de0 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009cf4:	69bb      	ldr	r3, [r7, #24]
 8009cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cfa:	4413      	add	r3, r2
 8009cfc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	f003 0301 	and.w	r3, r3, #1
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d003      	beq.n	8009d10 <put_fat+0xf0>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	091b      	lsrs	r3, r3, #4
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	e00e      	b.n	8009d2e <put_fat+0x10e>
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	b25b      	sxtb	r3, r3
 8009d16:	f023 030f 	bic.w	r3, r3, #15
 8009d1a:	b25a      	sxtb	r2, r3
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	0a1b      	lsrs	r3, r3, #8
 8009d20:	b25b      	sxtb	r3, r3
 8009d22:	f003 030f 	and.w	r3, r3, #15
 8009d26:	b25b      	sxtb	r3, r3
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	b25b      	sxtb	r3, r3
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	697a      	ldr	r2, [r7, #20]
 8009d30:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2201      	movs	r2, #1
 8009d36:	70da      	strb	r2, [r3, #3]
			break;
 8009d38:	e057      	b.n	8009dea <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	6a1a      	ldr	r2, [r3, #32]
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	0a1b      	lsrs	r3, r3, #8
 8009d42:	4413      	add	r3, r2
 8009d44:	4619      	mov	r1, r3
 8009d46:	68f8      	ldr	r0, [r7, #12]
 8009d48:	f7ff fe08 	bl	800995c <move_window>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009d50:	7ffb      	ldrb	r3, [r7, #31]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d146      	bne.n	8009de4 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	005b      	lsls	r3, r3, #1
 8009d60:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8009d64:	4413      	add	r3, r2
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	b292      	uxth	r2, r2
 8009d6a:	4611      	mov	r1, r2
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f7ff fb80 	bl	8009472 <st_word>
			fs->wflag = 1;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2201      	movs	r2, #1
 8009d76:	70da      	strb	r2, [r3, #3]
			break;
 8009d78:	e037      	b.n	8009dea <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	6a1a      	ldr	r2, [r3, #32]
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	09db      	lsrs	r3, r3, #7
 8009d82:	4413      	add	r3, r2
 8009d84:	4619      	mov	r1, r3
 8009d86:	68f8      	ldr	r0, [r7, #12]
 8009d88:	f7ff fde8 	bl	800995c <move_window>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009d90:	7ffb      	ldrb	r3, [r7, #31]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d128      	bne.n	8009de8 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	009b      	lsls	r3, r3, #2
 8009da6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8009daa:	4413      	add	r3, r2
 8009dac:	4618      	mov	r0, r3
 8009dae:	f7ff fb3d 	bl	800942c <ld_dword>
 8009db2:	4603      	mov	r3, r0
 8009db4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009db8:	4323      	orrs	r3, r4
 8009dba:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8009dca:	4413      	add	r3, r2
 8009dcc:	6879      	ldr	r1, [r7, #4]
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7ff fb6a 	bl	80094a8 <st_dword>
			fs->wflag = 1;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	70da      	strb	r2, [r3, #3]
			break;
 8009dda:	e006      	b.n	8009dea <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009ddc:	bf00      	nop
 8009dde:	e004      	b.n	8009dea <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009de0:	bf00      	nop
 8009de2:	e002      	b.n	8009dea <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009de4:	bf00      	nop
 8009de6:	e000      	b.n	8009dea <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009de8:	bf00      	nop
		}
	}
	return res;
 8009dea:	7ffb      	ldrb	r3, [r7, #31]
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3724      	adds	r7, #36	@ 0x24
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd90      	pop	{r4, r7, pc}

08009df4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b088      	sub	sp, #32
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	60f8      	str	r0, [r7, #12]
 8009dfc:	60b9      	str	r1, [r7, #8]
 8009dfe:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009e00:	2300      	movs	r3, #0
 8009e02:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d904      	bls.n	8009e1a <remove_chain+0x26>
 8009e10:	69bb      	ldr	r3, [r7, #24]
 8009e12:	695b      	ldr	r3, [r3, #20]
 8009e14:	68ba      	ldr	r2, [r7, #8]
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d301      	bcc.n	8009e1e <remove_chain+0x2a>
 8009e1a:	2302      	movs	r3, #2
 8009e1c:	e04b      	b.n	8009eb6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d00c      	beq.n	8009e3e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009e24:	f04f 32ff 	mov.w	r2, #4294967295
 8009e28:	6879      	ldr	r1, [r7, #4]
 8009e2a:	69b8      	ldr	r0, [r7, #24]
 8009e2c:	f7ff fef8 	bl	8009c20 <put_fat>
 8009e30:	4603      	mov	r3, r0
 8009e32:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009e34:	7ffb      	ldrb	r3, [r7, #31]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d001      	beq.n	8009e3e <remove_chain+0x4a>
 8009e3a:	7ffb      	ldrb	r3, [r7, #31]
 8009e3c:	e03b      	b.n	8009eb6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009e3e:	68b9      	ldr	r1, [r7, #8]
 8009e40:	68f8      	ldr	r0, [r7, #12]
 8009e42:	f7ff fe46 	bl	8009ad2 <get_fat>
 8009e46:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d031      	beq.n	8009eb2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d101      	bne.n	8009e58 <remove_chain+0x64>
 8009e54:	2302      	movs	r3, #2
 8009e56:	e02e      	b.n	8009eb6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e5e:	d101      	bne.n	8009e64 <remove_chain+0x70>
 8009e60:	2301      	movs	r3, #1
 8009e62:	e028      	b.n	8009eb6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009e64:	2200      	movs	r2, #0
 8009e66:	68b9      	ldr	r1, [r7, #8]
 8009e68:	69b8      	ldr	r0, [r7, #24]
 8009e6a:	f7ff fed9 	bl	8009c20 <put_fat>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009e72:	7ffb      	ldrb	r3, [r7, #31]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d001      	beq.n	8009e7c <remove_chain+0x88>
 8009e78:	7ffb      	ldrb	r3, [r7, #31]
 8009e7a:	e01c      	b.n	8009eb6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009e7c:	69bb      	ldr	r3, [r7, #24]
 8009e7e:	691a      	ldr	r2, [r3, #16]
 8009e80:	69bb      	ldr	r3, [r7, #24]
 8009e82:	695b      	ldr	r3, [r3, #20]
 8009e84:	3b02      	subs	r3, #2
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d20b      	bcs.n	8009ea2 <remove_chain+0xae>
			fs->free_clst++;
 8009e8a:	69bb      	ldr	r3, [r7, #24]
 8009e8c:	691b      	ldr	r3, [r3, #16]
 8009e8e:	1c5a      	adds	r2, r3, #1
 8009e90:	69bb      	ldr	r3, [r7, #24]
 8009e92:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8009e94:	69bb      	ldr	r3, [r7, #24]
 8009e96:	791b      	ldrb	r3, [r3, #4]
 8009e98:	f043 0301 	orr.w	r3, r3, #1
 8009e9c:	b2da      	uxtb	r2, r3
 8009e9e:	69bb      	ldr	r3, [r7, #24]
 8009ea0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009ea6:	69bb      	ldr	r3, [r7, #24]
 8009ea8:	695b      	ldr	r3, [r3, #20]
 8009eaa:	68ba      	ldr	r2, [r7, #8]
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d3c6      	bcc.n	8009e3e <remove_chain+0x4a>
 8009eb0:	e000      	b.n	8009eb4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009eb2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009eb4:	2300      	movs	r3, #0
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3720      	adds	r7, #32
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}

08009ebe <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b088      	sub	sp, #32
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
 8009ec6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d10d      	bne.n	8009ef0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	68db      	ldr	r3, [r3, #12]
 8009ed8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009eda:	69bb      	ldr	r3, [r7, #24]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d004      	beq.n	8009eea <create_chain+0x2c>
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	695b      	ldr	r3, [r3, #20]
 8009ee4:	69ba      	ldr	r2, [r7, #24]
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d31b      	bcc.n	8009f22 <create_chain+0x64>
 8009eea:	2301      	movs	r3, #1
 8009eec:	61bb      	str	r3, [r7, #24]
 8009eee:	e018      	b.n	8009f22 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009ef0:	6839      	ldr	r1, [r7, #0]
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f7ff fded 	bl	8009ad2 <get_fat>
 8009ef8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d801      	bhi.n	8009f04 <create_chain+0x46>
 8009f00:	2301      	movs	r3, #1
 8009f02:	e070      	b.n	8009fe6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f0a:	d101      	bne.n	8009f10 <create_chain+0x52>
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	e06a      	b.n	8009fe6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	695b      	ldr	r3, [r3, #20]
 8009f14:	68fa      	ldr	r2, [r7, #12]
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d201      	bcs.n	8009f1e <create_chain+0x60>
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	e063      	b.n	8009fe6 <create_chain+0x128>
		scl = clst;
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009f22:	69bb      	ldr	r3, [r7, #24]
 8009f24:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009f26:	69fb      	ldr	r3, [r7, #28]
 8009f28:	3301      	adds	r3, #1
 8009f2a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	695b      	ldr	r3, [r3, #20]
 8009f30:	69fa      	ldr	r2, [r7, #28]
 8009f32:	429a      	cmp	r2, r3
 8009f34:	d307      	bcc.n	8009f46 <create_chain+0x88>
				ncl = 2;
 8009f36:	2302      	movs	r3, #2
 8009f38:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009f3a:	69fa      	ldr	r2, [r7, #28]
 8009f3c:	69bb      	ldr	r3, [r7, #24]
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d901      	bls.n	8009f46 <create_chain+0x88>
 8009f42:	2300      	movs	r3, #0
 8009f44:	e04f      	b.n	8009fe6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009f46:	69f9      	ldr	r1, [r7, #28]
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f7ff fdc2 	bl	8009ad2 <get_fat>
 8009f4e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d00e      	beq.n	8009f74 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	d003      	beq.n	8009f64 <create_chain+0xa6>
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f62:	d101      	bne.n	8009f68 <create_chain+0xaa>
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	e03e      	b.n	8009fe6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009f68:	69fa      	ldr	r2, [r7, #28]
 8009f6a:	69bb      	ldr	r3, [r7, #24]
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	d1da      	bne.n	8009f26 <create_chain+0x68>
 8009f70:	2300      	movs	r3, #0
 8009f72:	e038      	b.n	8009fe6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009f74:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009f76:	f04f 32ff 	mov.w	r2, #4294967295
 8009f7a:	69f9      	ldr	r1, [r7, #28]
 8009f7c:	6938      	ldr	r0, [r7, #16]
 8009f7e:	f7ff fe4f 	bl	8009c20 <put_fat>
 8009f82:	4603      	mov	r3, r0
 8009f84:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009f86:	7dfb      	ldrb	r3, [r7, #23]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d109      	bne.n	8009fa0 <create_chain+0xe2>
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d006      	beq.n	8009fa0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009f92:	69fa      	ldr	r2, [r7, #28]
 8009f94:	6839      	ldr	r1, [r7, #0]
 8009f96:	6938      	ldr	r0, [r7, #16]
 8009f98:	f7ff fe42 	bl	8009c20 <put_fat>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009fa0:	7dfb      	ldrb	r3, [r7, #23]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d116      	bne.n	8009fd4 <create_chain+0x116>
		fs->last_clst = ncl;
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	69fa      	ldr	r2, [r7, #28]
 8009faa:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	691a      	ldr	r2, [r3, #16]
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	695b      	ldr	r3, [r3, #20]
 8009fb4:	3b02      	subs	r3, #2
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d804      	bhi.n	8009fc4 <create_chain+0x106>
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	691b      	ldr	r3, [r3, #16]
 8009fbe:	1e5a      	subs	r2, r3, #1
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	791b      	ldrb	r3, [r3, #4]
 8009fc8:	f043 0301 	orr.w	r3, r3, #1
 8009fcc:	b2da      	uxtb	r2, r3
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	711a      	strb	r2, [r3, #4]
 8009fd2:	e007      	b.n	8009fe4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009fd4:	7dfb      	ldrb	r3, [r7, #23]
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d102      	bne.n	8009fe0 <create_chain+0x122>
 8009fda:	f04f 33ff 	mov.w	r3, #4294967295
 8009fde:	e000      	b.n	8009fe2 <create_chain+0x124>
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009fe4:	69fb      	ldr	r3, [r7, #28]
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3720      	adds	r7, #32
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}

08009fee <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009fee:	b480      	push	{r7}
 8009ff0:	b087      	sub	sp, #28
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
 8009ff6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a002:	3304      	adds	r3, #4
 800a004:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	0a5b      	lsrs	r3, r3, #9
 800a00a:	68fa      	ldr	r2, [r7, #12]
 800a00c:	8952      	ldrh	r2, [r2, #10]
 800a00e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a012:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	1d1a      	adds	r2, r3, #4
 800a018:	613a      	str	r2, [r7, #16]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d101      	bne.n	800a028 <clmt_clust+0x3a>
 800a024:	2300      	movs	r3, #0
 800a026:	e010      	b.n	800a04a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a028:	697a      	ldr	r2, [r7, #20]
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d307      	bcc.n	800a040 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a030:	697a      	ldr	r2, [r7, #20]
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	1ad3      	subs	r3, r2, r3
 800a036:	617b      	str	r3, [r7, #20]
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	3304      	adds	r3, #4
 800a03c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a03e:	e7e9      	b.n	800a014 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a040:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	681a      	ldr	r2, [r3, #0]
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	4413      	add	r3, r2
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	371c      	adds	r7, #28
 800a04e:	46bd      	mov	sp, r7
 800a050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a054:	4770      	bx	lr

0800a056 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a056:	b580      	push	{r7, lr}
 800a058:	b086      	sub	sp, #24
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
 800a05e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a06c:	d204      	bcs.n	800a078 <dir_sdi+0x22>
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	f003 031f 	and.w	r3, r3, #31
 800a074:	2b00      	cmp	r3, #0
 800a076:	d001      	beq.n	800a07c <dir_sdi+0x26>
		return FR_INT_ERR;
 800a078:	2302      	movs	r3, #2
 800a07a:	e063      	b.n	800a144 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	683a      	ldr	r2, [r7, #0]
 800a080:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	689b      	ldr	r3, [r3, #8]
 800a086:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d106      	bne.n	800a09c <dir_sdi+0x46>
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	2b02      	cmp	r3, #2
 800a094:	d902      	bls.n	800a09c <dir_sdi+0x46>
		clst = fs->dirbase;
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a09a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d10c      	bne.n	800a0bc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	095b      	lsrs	r3, r3, #5
 800a0a6:	693a      	ldr	r2, [r7, #16]
 800a0a8:	8912      	ldrh	r2, [r2, #8]
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d301      	bcc.n	800a0b2 <dir_sdi+0x5c>
 800a0ae:	2302      	movs	r3, #2
 800a0b0:	e048      	b.n	800a144 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	61da      	str	r2, [r3, #28]
 800a0ba:	e029      	b.n	800a110 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	895b      	ldrh	r3, [r3, #10]
 800a0c0:	025b      	lsls	r3, r3, #9
 800a0c2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a0c4:	e019      	b.n	800a0fa <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6979      	ldr	r1, [r7, #20]
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f7ff fd01 	bl	8009ad2 <get_fat>
 800a0d0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0d8:	d101      	bne.n	800a0de <dir_sdi+0x88>
 800a0da:	2301      	movs	r3, #1
 800a0dc:	e032      	b.n	800a144 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d904      	bls.n	800a0ee <dir_sdi+0x98>
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	695b      	ldr	r3, [r3, #20]
 800a0e8:	697a      	ldr	r2, [r7, #20]
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d301      	bcc.n	800a0f2 <dir_sdi+0x9c>
 800a0ee:	2302      	movs	r3, #2
 800a0f0:	e028      	b.n	800a144 <dir_sdi+0xee>
			ofs -= csz;
 800a0f2:	683a      	ldr	r2, [r7, #0]
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	1ad3      	subs	r3, r2, r3
 800a0f8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a0fa:	683a      	ldr	r2, [r7, #0]
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d2e1      	bcs.n	800a0c6 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a102:	6979      	ldr	r1, [r7, #20]
 800a104:	6938      	ldr	r0, [r7, #16]
 800a106:	f7ff fcc5 	bl	8009a94 <clust2sect>
 800a10a:	4602      	mov	r2, r0
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	697a      	ldr	r2, [r7, #20]
 800a114:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	69db      	ldr	r3, [r3, #28]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d101      	bne.n	800a122 <dir_sdi+0xcc>
 800a11e:	2302      	movs	r3, #2
 800a120:	e010      	b.n	800a144 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	69da      	ldr	r2, [r3, #28]
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	0a5b      	lsrs	r3, r3, #9
 800a12a:	441a      	add	r2, r3
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a13c:	441a      	add	r2, r3
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a142:	2300      	movs	r3, #0
}
 800a144:	4618      	mov	r0, r3
 800a146:	3718      	adds	r7, #24
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b086      	sub	sp, #24
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	695b      	ldr	r3, [r3, #20]
 800a160:	3320      	adds	r3, #32
 800a162:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	69db      	ldr	r3, [r3, #28]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d003      	beq.n	800a174 <dir_next+0x28>
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a172:	d301      	bcc.n	800a178 <dir_next+0x2c>
 800a174:	2304      	movs	r3, #4
 800a176:	e0aa      	b.n	800a2ce <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a17e:	2b00      	cmp	r3, #0
 800a180:	f040 8098 	bne.w	800a2b4 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	69db      	ldr	r3, [r3, #28]
 800a188:	1c5a      	adds	r2, r3, #1
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	699b      	ldr	r3, [r3, #24]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d10b      	bne.n	800a1ae <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	095b      	lsrs	r3, r3, #5
 800a19a:	68fa      	ldr	r2, [r7, #12]
 800a19c:	8912      	ldrh	r2, [r2, #8]
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	f0c0 8088 	bcc.w	800a2b4 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	61da      	str	r2, [r3, #28]
 800a1aa:	2304      	movs	r3, #4
 800a1ac:	e08f      	b.n	800a2ce <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	0a5b      	lsrs	r3, r3, #9
 800a1b2:	68fa      	ldr	r2, [r7, #12]
 800a1b4:	8952      	ldrh	r2, [r2, #10]
 800a1b6:	3a01      	subs	r2, #1
 800a1b8:	4013      	ands	r3, r2
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d17a      	bne.n	800a2b4 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	699b      	ldr	r3, [r3, #24]
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	4610      	mov	r0, r2
 800a1c8:	f7ff fc83 	bl	8009ad2 <get_fat>
 800a1cc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	2b01      	cmp	r3, #1
 800a1d2:	d801      	bhi.n	800a1d8 <dir_next+0x8c>
 800a1d4:	2302      	movs	r3, #2
 800a1d6:	e07a      	b.n	800a2ce <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1de:	d101      	bne.n	800a1e4 <dir_next+0x98>
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	e074      	b.n	800a2ce <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	695b      	ldr	r3, [r3, #20]
 800a1e8:	697a      	ldr	r2, [r7, #20]
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d358      	bcc.n	800a2a0 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d104      	bne.n	800a1fe <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	61da      	str	r2, [r3, #28]
 800a1fa:	2304      	movs	r3, #4
 800a1fc:	e067      	b.n	800a2ce <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a1fe:	687a      	ldr	r2, [r7, #4]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	699b      	ldr	r3, [r3, #24]
 800a204:	4619      	mov	r1, r3
 800a206:	4610      	mov	r0, r2
 800a208:	f7ff fe59 	bl	8009ebe <create_chain>
 800a20c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d101      	bne.n	800a218 <dir_next+0xcc>
 800a214:	2307      	movs	r3, #7
 800a216:	e05a      	b.n	800a2ce <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d101      	bne.n	800a222 <dir_next+0xd6>
 800a21e:	2302      	movs	r3, #2
 800a220:	e055      	b.n	800a2ce <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a228:	d101      	bne.n	800a22e <dir_next+0xe2>
 800a22a:	2301      	movs	r3, #1
 800a22c:	e04f      	b.n	800a2ce <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a22e:	68f8      	ldr	r0, [r7, #12]
 800a230:	f7ff fb50 	bl	80098d4 <sync_window>
 800a234:	4603      	mov	r3, r0
 800a236:	2b00      	cmp	r3, #0
 800a238:	d001      	beq.n	800a23e <dir_next+0xf2>
 800a23a:	2301      	movs	r3, #1
 800a23c:	e047      	b.n	800a2ce <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	3330      	adds	r3, #48	@ 0x30
 800a242:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a246:	2100      	movs	r1, #0
 800a248:	4618      	mov	r0, r3
 800a24a:	f7ff f97a 	bl	8009542 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a24e:	2300      	movs	r3, #0
 800a250:	613b      	str	r3, [r7, #16]
 800a252:	6979      	ldr	r1, [r7, #20]
 800a254:	68f8      	ldr	r0, [r7, #12]
 800a256:	f7ff fc1d 	bl	8009a94 <clust2sect>
 800a25a:	4602      	mov	r2, r0
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a260:	e012      	b.n	800a288 <dir_next+0x13c>
						fs->wflag = 1;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	2201      	movs	r2, #1
 800a266:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a268:	68f8      	ldr	r0, [r7, #12]
 800a26a:	f7ff fb33 	bl	80098d4 <sync_window>
 800a26e:	4603      	mov	r3, r0
 800a270:	2b00      	cmp	r3, #0
 800a272:	d001      	beq.n	800a278 <dir_next+0x12c>
 800a274:	2301      	movs	r3, #1
 800a276:	e02a      	b.n	800a2ce <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	3301      	adds	r3, #1
 800a27c:	613b      	str	r3, [r7, #16]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a282:	1c5a      	adds	r2, r3, #1
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	895b      	ldrh	r3, [r3, #10]
 800a28c:	461a      	mov	r2, r3
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	4293      	cmp	r3, r2
 800a292:	d3e6      	bcc.n	800a262 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	1ad2      	subs	r2, r2, r3
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	697a      	ldr	r2, [r7, #20]
 800a2a4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a2a6:	6979      	ldr	r1, [r7, #20]
 800a2a8:	68f8      	ldr	r0, [r7, #12]
 800a2aa:	f7ff fbf3 	bl	8009a94 <clust2sect>
 800a2ae:	4602      	mov	r2, r0
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	68ba      	ldr	r2, [r7, #8]
 800a2b8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2c6:	441a      	add	r2, r3
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a2cc:	2300      	movs	r3, #0
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3718      	adds	r7, #24
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}

0800a2d6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a2d6:	b580      	push	{r7, lr}
 800a2d8:	b086      	sub	sp, #24
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
 800a2de:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a2e6:	2100      	movs	r1, #0
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f7ff feb4 	bl	800a056 <dir_sdi>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a2f2:	7dfb      	ldrb	r3, [r7, #23]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d12b      	bne.n	800a350 <dir_alloc+0x7a>
		n = 0;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	69db      	ldr	r3, [r3, #28]
 800a300:	4619      	mov	r1, r3
 800a302:	68f8      	ldr	r0, [r7, #12]
 800a304:	f7ff fb2a 	bl	800995c <move_window>
 800a308:	4603      	mov	r3, r0
 800a30a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a30c:	7dfb      	ldrb	r3, [r7, #23]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d11d      	bne.n	800a34e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6a1b      	ldr	r3, [r3, #32]
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	2be5      	cmp	r3, #229	@ 0xe5
 800a31a:	d004      	beq.n	800a326 <dir_alloc+0x50>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6a1b      	ldr	r3, [r3, #32]
 800a320:	781b      	ldrb	r3, [r3, #0]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d107      	bne.n	800a336 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	3301      	adds	r3, #1
 800a32a:	613b      	str	r3, [r7, #16]
 800a32c:	693a      	ldr	r2, [r7, #16]
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	429a      	cmp	r2, r3
 800a332:	d102      	bne.n	800a33a <dir_alloc+0x64>
 800a334:	e00c      	b.n	800a350 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a336:	2300      	movs	r3, #0
 800a338:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a33a:	2101      	movs	r1, #1
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f7ff ff05 	bl	800a14c <dir_next>
 800a342:	4603      	mov	r3, r0
 800a344:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a346:	7dfb      	ldrb	r3, [r7, #23]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d0d7      	beq.n	800a2fc <dir_alloc+0x26>
 800a34c:	e000      	b.n	800a350 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a34e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a350:	7dfb      	ldrb	r3, [r7, #23]
 800a352:	2b04      	cmp	r3, #4
 800a354:	d101      	bne.n	800a35a <dir_alloc+0x84>
 800a356:	2307      	movs	r3, #7
 800a358:	75fb      	strb	r3, [r7, #23]
	return res;
 800a35a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3718      	adds	r7, #24
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b084      	sub	sp, #16
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	331a      	adds	r3, #26
 800a372:	4618      	mov	r0, r3
 800a374:	f7ff f842 	bl	80093fc <ld_word>
 800a378:	4603      	mov	r3, r0
 800a37a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	2b03      	cmp	r3, #3
 800a382:	d109      	bne.n	800a398 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	3314      	adds	r3, #20
 800a388:	4618      	mov	r0, r3
 800a38a:	f7ff f837 	bl	80093fc <ld_word>
 800a38e:	4603      	mov	r3, r0
 800a390:	041b      	lsls	r3, r3, #16
 800a392:	68fa      	ldr	r2, [r7, #12]
 800a394:	4313      	orrs	r3, r2
 800a396:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a398:	68fb      	ldr	r3, [r7, #12]
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3710      	adds	r7, #16
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}

0800a3a2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a3a2:	b580      	push	{r7, lr}
 800a3a4:	b084      	sub	sp, #16
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	60f8      	str	r0, [r7, #12]
 800a3aa:	60b9      	str	r1, [r7, #8]
 800a3ac:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	331a      	adds	r3, #26
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	b292      	uxth	r2, r2
 800a3b6:	4611      	mov	r1, r2
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f7ff f85a 	bl	8009472 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	781b      	ldrb	r3, [r3, #0]
 800a3c2:	2b03      	cmp	r3, #3
 800a3c4:	d109      	bne.n	800a3da <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	f103 0214 	add.w	r2, r3, #20
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	0c1b      	lsrs	r3, r3, #16
 800a3d0:	b29b      	uxth	r3, r3
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	4610      	mov	r0, r2
 800a3d6:	f7ff f84c 	bl	8009472 <st_word>
	}
}
 800a3da:	bf00      	nop
 800a3dc:	3710      	adds	r7, #16
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}

0800a3e2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a3e2:	b580      	push	{r7, lr}
 800a3e4:	b086      	sub	sp, #24
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a3f0:	2100      	movs	r1, #0
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f7ff fe2f 	bl	800a056 <dir_sdi>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a3fc:	7dfb      	ldrb	r3, [r7, #23]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d001      	beq.n	800a406 <dir_find+0x24>
 800a402:	7dfb      	ldrb	r3, [r7, #23]
 800a404:	e03e      	b.n	800a484 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	69db      	ldr	r3, [r3, #28]
 800a40a:	4619      	mov	r1, r3
 800a40c:	6938      	ldr	r0, [r7, #16]
 800a40e:	f7ff faa5 	bl	800995c <move_window>
 800a412:	4603      	mov	r3, r0
 800a414:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a416:	7dfb      	ldrb	r3, [r7, #23]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d12f      	bne.n	800a47c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6a1b      	ldr	r3, [r3, #32]
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a424:	7bfb      	ldrb	r3, [r7, #15]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d102      	bne.n	800a430 <dir_find+0x4e>
 800a42a:	2304      	movs	r3, #4
 800a42c:	75fb      	strb	r3, [r7, #23]
 800a42e:	e028      	b.n	800a482 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6a1b      	ldr	r3, [r3, #32]
 800a434:	330b      	adds	r3, #11
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a43c:	b2da      	uxtb	r2, r3
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6a1b      	ldr	r3, [r3, #32]
 800a446:	330b      	adds	r3, #11
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	f003 0308 	and.w	r3, r3, #8
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d10a      	bne.n	800a468 <dir_find+0x86>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6a18      	ldr	r0, [r3, #32]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	3324      	adds	r3, #36	@ 0x24
 800a45a:	220b      	movs	r2, #11
 800a45c:	4619      	mov	r1, r3
 800a45e:	f7ff f88b 	bl	8009578 <mem_cmp>
 800a462:	4603      	mov	r3, r0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d00b      	beq.n	800a480 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a468:	2100      	movs	r1, #0
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f7ff fe6e 	bl	800a14c <dir_next>
 800a470:	4603      	mov	r3, r0
 800a472:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a474:	7dfb      	ldrb	r3, [r7, #23]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d0c5      	beq.n	800a406 <dir_find+0x24>
 800a47a:	e002      	b.n	800a482 <dir_find+0xa0>
		if (res != FR_OK) break;
 800a47c:	bf00      	nop
 800a47e:	e000      	b.n	800a482 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a480:	bf00      	nop

	return res;
 800a482:	7dfb      	ldrb	r3, [r7, #23]
}
 800a484:	4618      	mov	r0, r3
 800a486:	3718      	adds	r7, #24
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a49a:	2101      	movs	r1, #1
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f7ff ff1a 	bl	800a2d6 <dir_alloc>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a4a6:	7bfb      	ldrb	r3, [r7, #15]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d11c      	bne.n	800a4e6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	69db      	ldr	r3, [r3, #28]
 800a4b0:	4619      	mov	r1, r3
 800a4b2:	68b8      	ldr	r0, [r7, #8]
 800a4b4:	f7ff fa52 	bl	800995c <move_window>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a4bc:	7bfb      	ldrb	r3, [r7, #15]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d111      	bne.n	800a4e6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6a1b      	ldr	r3, [r3, #32]
 800a4c6:	2220      	movs	r2, #32
 800a4c8:	2100      	movs	r1, #0
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f7ff f839 	bl	8009542 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6a18      	ldr	r0, [r3, #32]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	3324      	adds	r3, #36	@ 0x24
 800a4d8:	220b      	movs	r2, #11
 800a4da:	4619      	mov	r1, r3
 800a4dc:	f7ff f810 	bl	8009500 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a4e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3710      	adds	r7, #16
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b088      	sub	sp, #32
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	60fb      	str	r3, [r7, #12]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	3324      	adds	r3, #36	@ 0x24
 800a504:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a506:	220b      	movs	r2, #11
 800a508:	2120      	movs	r1, #32
 800a50a:	68b8      	ldr	r0, [r7, #8]
 800a50c:	f7ff f819 	bl	8009542 <mem_set>
	si = i = 0; ni = 8;
 800a510:	2300      	movs	r3, #0
 800a512:	613b      	str	r3, [r7, #16]
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	61fb      	str	r3, [r7, #28]
 800a518:	2308      	movs	r3, #8
 800a51a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a51c:	69fb      	ldr	r3, [r7, #28]
 800a51e:	1c5a      	adds	r2, r3, #1
 800a520:	61fa      	str	r2, [r7, #28]
 800a522:	68fa      	ldr	r2, [r7, #12]
 800a524:	4413      	add	r3, r2
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a52a:	7efb      	ldrb	r3, [r7, #27]
 800a52c:	2b20      	cmp	r3, #32
 800a52e:	d94e      	bls.n	800a5ce <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a530:	7efb      	ldrb	r3, [r7, #27]
 800a532:	2b2f      	cmp	r3, #47	@ 0x2f
 800a534:	d006      	beq.n	800a544 <create_name+0x54>
 800a536:	7efb      	ldrb	r3, [r7, #27]
 800a538:	2b5c      	cmp	r3, #92	@ 0x5c
 800a53a:	d110      	bne.n	800a55e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a53c:	e002      	b.n	800a544 <create_name+0x54>
 800a53e:	69fb      	ldr	r3, [r7, #28]
 800a540:	3301      	adds	r3, #1
 800a542:	61fb      	str	r3, [r7, #28]
 800a544:	68fa      	ldr	r2, [r7, #12]
 800a546:	69fb      	ldr	r3, [r7, #28]
 800a548:	4413      	add	r3, r2
 800a54a:	781b      	ldrb	r3, [r3, #0]
 800a54c:	2b2f      	cmp	r3, #47	@ 0x2f
 800a54e:	d0f6      	beq.n	800a53e <create_name+0x4e>
 800a550:	68fa      	ldr	r2, [r7, #12]
 800a552:	69fb      	ldr	r3, [r7, #28]
 800a554:	4413      	add	r3, r2
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	2b5c      	cmp	r3, #92	@ 0x5c
 800a55a:	d0f0      	beq.n	800a53e <create_name+0x4e>
			break;
 800a55c:	e038      	b.n	800a5d0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a55e:	7efb      	ldrb	r3, [r7, #27]
 800a560:	2b2e      	cmp	r3, #46	@ 0x2e
 800a562:	d003      	beq.n	800a56c <create_name+0x7c>
 800a564:	693a      	ldr	r2, [r7, #16]
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	429a      	cmp	r2, r3
 800a56a:	d30c      	bcc.n	800a586 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	2b0b      	cmp	r3, #11
 800a570:	d002      	beq.n	800a578 <create_name+0x88>
 800a572:	7efb      	ldrb	r3, [r7, #27]
 800a574:	2b2e      	cmp	r3, #46	@ 0x2e
 800a576:	d001      	beq.n	800a57c <create_name+0x8c>
 800a578:	2306      	movs	r3, #6
 800a57a:	e044      	b.n	800a606 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a57c:	2308      	movs	r3, #8
 800a57e:	613b      	str	r3, [r7, #16]
 800a580:	230b      	movs	r3, #11
 800a582:	617b      	str	r3, [r7, #20]
			continue;
 800a584:	e022      	b.n	800a5cc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a586:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	da04      	bge.n	800a598 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a58e:	7efb      	ldrb	r3, [r7, #27]
 800a590:	3b80      	subs	r3, #128	@ 0x80
 800a592:	4a1f      	ldr	r2, [pc, #124]	@ (800a610 <create_name+0x120>)
 800a594:	5cd3      	ldrb	r3, [r2, r3]
 800a596:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a598:	7efb      	ldrb	r3, [r7, #27]
 800a59a:	4619      	mov	r1, r3
 800a59c:	481d      	ldr	r0, [pc, #116]	@ (800a614 <create_name+0x124>)
 800a59e:	f7ff f812 	bl	80095c6 <chk_chr>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d001      	beq.n	800a5ac <create_name+0xbc>
 800a5a8:	2306      	movs	r3, #6
 800a5aa:	e02c      	b.n	800a606 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a5ac:	7efb      	ldrb	r3, [r7, #27]
 800a5ae:	2b60      	cmp	r3, #96	@ 0x60
 800a5b0:	d905      	bls.n	800a5be <create_name+0xce>
 800a5b2:	7efb      	ldrb	r3, [r7, #27]
 800a5b4:	2b7a      	cmp	r3, #122	@ 0x7a
 800a5b6:	d802      	bhi.n	800a5be <create_name+0xce>
 800a5b8:	7efb      	ldrb	r3, [r7, #27]
 800a5ba:	3b20      	subs	r3, #32
 800a5bc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	1c5a      	adds	r2, r3, #1
 800a5c2:	613a      	str	r2, [r7, #16]
 800a5c4:	68ba      	ldr	r2, [r7, #8]
 800a5c6:	4413      	add	r3, r2
 800a5c8:	7efa      	ldrb	r2, [r7, #27]
 800a5ca:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a5cc:	e7a6      	b.n	800a51c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a5ce:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a5d0:	68fa      	ldr	r2, [r7, #12]
 800a5d2:	69fb      	ldr	r3, [r7, #28]
 800a5d4:	441a      	add	r2, r3
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d101      	bne.n	800a5e4 <create_name+0xf4>
 800a5e0:	2306      	movs	r3, #6
 800a5e2:	e010      	b.n	800a606 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	781b      	ldrb	r3, [r3, #0]
 800a5e8:	2be5      	cmp	r3, #229	@ 0xe5
 800a5ea:	d102      	bne.n	800a5f2 <create_name+0x102>
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	2205      	movs	r2, #5
 800a5f0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a5f2:	7efb      	ldrb	r3, [r7, #27]
 800a5f4:	2b20      	cmp	r3, #32
 800a5f6:	d801      	bhi.n	800a5fc <create_name+0x10c>
 800a5f8:	2204      	movs	r2, #4
 800a5fa:	e000      	b.n	800a5fe <create_name+0x10e>
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	330b      	adds	r3, #11
 800a602:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a604:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a606:	4618      	mov	r0, r3
 800a608:	3720      	adds	r7, #32
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
 800a60e:	bf00      	nop
 800a610:	0800d0fc 	.word	0x0800d0fc
 800a614:	0800cf88 	.word	0x0800cf88

0800a618 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b086      	sub	sp, #24
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a62c:	e002      	b.n	800a634 <follow_path+0x1c>
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	3301      	adds	r3, #1
 800a632:	603b      	str	r3, [r7, #0]
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	2b2f      	cmp	r3, #47	@ 0x2f
 800a63a:	d0f8      	beq.n	800a62e <follow_path+0x16>
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	781b      	ldrb	r3, [r3, #0]
 800a640:	2b5c      	cmp	r3, #92	@ 0x5c
 800a642:	d0f4      	beq.n	800a62e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	2200      	movs	r2, #0
 800a648:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	781b      	ldrb	r3, [r3, #0]
 800a64e:	2b1f      	cmp	r3, #31
 800a650:	d80a      	bhi.n	800a668 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2280      	movs	r2, #128	@ 0x80
 800a656:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800a65a:	2100      	movs	r1, #0
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f7ff fcfa 	bl	800a056 <dir_sdi>
 800a662:	4603      	mov	r3, r0
 800a664:	75fb      	strb	r3, [r7, #23]
 800a666:	e043      	b.n	800a6f0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a668:	463b      	mov	r3, r7
 800a66a:	4619      	mov	r1, r3
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f7ff ff3f 	bl	800a4f0 <create_name>
 800a672:	4603      	mov	r3, r0
 800a674:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a676:	7dfb      	ldrb	r3, [r7, #23]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d134      	bne.n	800a6e6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f7ff feb0 	bl	800a3e2 <dir_find>
 800a682:	4603      	mov	r3, r0
 800a684:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a68c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a68e:	7dfb      	ldrb	r3, [r7, #23]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d00a      	beq.n	800a6aa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a694:	7dfb      	ldrb	r3, [r7, #23]
 800a696:	2b04      	cmp	r3, #4
 800a698:	d127      	bne.n	800a6ea <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a69a:	7afb      	ldrb	r3, [r7, #11]
 800a69c:	f003 0304 	and.w	r3, r3, #4
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d122      	bne.n	800a6ea <follow_path+0xd2>
 800a6a4:	2305      	movs	r3, #5
 800a6a6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a6a8:	e01f      	b.n	800a6ea <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a6aa:	7afb      	ldrb	r3, [r7, #11]
 800a6ac:	f003 0304 	and.w	r3, r3, #4
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d11c      	bne.n	800a6ee <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	799b      	ldrb	r3, [r3, #6]
 800a6b8:	f003 0310 	and.w	r3, r3, #16
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d102      	bne.n	800a6c6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a6c0:	2305      	movs	r3, #5
 800a6c2:	75fb      	strb	r3, [r7, #23]
 800a6c4:	e014      	b.n	800a6f0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	695b      	ldr	r3, [r3, #20]
 800a6d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6d4:	4413      	add	r3, r2
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	68f8      	ldr	r0, [r7, #12]
 800a6da:	f7ff fe43 	bl	800a364 <ld_clust>
 800a6de:	4602      	mov	r2, r0
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a6e4:	e7c0      	b.n	800a668 <follow_path+0x50>
			if (res != FR_OK) break;
 800a6e6:	bf00      	nop
 800a6e8:	e002      	b.n	800a6f0 <follow_path+0xd8>
				break;
 800a6ea:	bf00      	nop
 800a6ec:	e000      	b.n	800a6f0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a6ee:	bf00      	nop
			}
		}
	}

	return res;
 800a6f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3718      	adds	r7, #24
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}

0800a6fa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a6fa:	b480      	push	{r7}
 800a6fc:	b087      	sub	sp, #28
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a702:	f04f 33ff 	mov.w	r3, #4294967295
 800a706:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d031      	beq.n	800a774 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	617b      	str	r3, [r7, #20]
 800a716:	e002      	b.n	800a71e <get_ldnumber+0x24>
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	3301      	adds	r3, #1
 800a71c:	617b      	str	r3, [r7, #20]
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	781b      	ldrb	r3, [r3, #0]
 800a722:	2b20      	cmp	r3, #32
 800a724:	d903      	bls.n	800a72e <get_ldnumber+0x34>
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	781b      	ldrb	r3, [r3, #0]
 800a72a:	2b3a      	cmp	r3, #58	@ 0x3a
 800a72c:	d1f4      	bne.n	800a718 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	781b      	ldrb	r3, [r3, #0]
 800a732:	2b3a      	cmp	r3, #58	@ 0x3a
 800a734:	d11c      	bne.n	800a770 <get_ldnumber+0x76>
			tp = *path;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	1c5a      	adds	r2, r3, #1
 800a740:	60fa      	str	r2, [r7, #12]
 800a742:	781b      	ldrb	r3, [r3, #0]
 800a744:	3b30      	subs	r3, #48	@ 0x30
 800a746:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	2b09      	cmp	r3, #9
 800a74c:	d80e      	bhi.n	800a76c <get_ldnumber+0x72>
 800a74e:	68fa      	ldr	r2, [r7, #12]
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	429a      	cmp	r2, r3
 800a754:	d10a      	bne.n	800a76c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d107      	bne.n	800a76c <get_ldnumber+0x72>
					vol = (int)i;
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	3301      	adds	r3, #1
 800a764:	617b      	str	r3, [r7, #20]
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	697a      	ldr	r2, [r7, #20]
 800a76a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	e002      	b.n	800a776 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a770:	2300      	movs	r3, #0
 800a772:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a774:	693b      	ldr	r3, [r7, #16]
}
 800a776:	4618      	mov	r0, r3
 800a778:	371c      	adds	r7, #28
 800a77a:	46bd      	mov	sp, r7
 800a77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a780:	4770      	bx	lr
	...

0800a784 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b082      	sub	sp, #8
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2200      	movs	r2, #0
 800a792:	70da      	strb	r2, [r3, #3]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f04f 32ff 	mov.w	r2, #4294967295
 800a79a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a79c:	6839      	ldr	r1, [r7, #0]
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f7ff f8dc 	bl	800995c <move_window>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d001      	beq.n	800a7ae <check_fs+0x2a>
 800a7aa:	2304      	movs	r3, #4
 800a7ac:	e038      	b.n	800a820 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	3330      	adds	r3, #48	@ 0x30
 800a7b2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f7fe fe20 	bl	80093fc <ld_word>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	461a      	mov	r2, r3
 800a7c0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d001      	beq.n	800a7cc <check_fs+0x48>
 800a7c8:	2303      	movs	r3, #3
 800a7ca:	e029      	b.n	800a820 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a7d2:	2be9      	cmp	r3, #233	@ 0xe9
 800a7d4:	d009      	beq.n	800a7ea <check_fs+0x66>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a7dc:	2beb      	cmp	r3, #235	@ 0xeb
 800a7de:	d11e      	bne.n	800a81e <check_fs+0x9a>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a7e6:	2b90      	cmp	r3, #144	@ 0x90
 800a7e8:	d119      	bne.n	800a81e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	3330      	adds	r3, #48	@ 0x30
 800a7ee:	3336      	adds	r3, #54	@ 0x36
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f7fe fe1b 	bl	800942c <ld_dword>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a7fc:	4a0a      	ldr	r2, [pc, #40]	@ (800a828 <check_fs+0xa4>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d101      	bne.n	800a806 <check_fs+0x82>
 800a802:	2300      	movs	r3, #0
 800a804:	e00c      	b.n	800a820 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	3330      	adds	r3, #48	@ 0x30
 800a80a:	3352      	adds	r3, #82	@ 0x52
 800a80c:	4618      	mov	r0, r3
 800a80e:	f7fe fe0d 	bl	800942c <ld_dword>
 800a812:	4603      	mov	r3, r0
 800a814:	4a05      	ldr	r2, [pc, #20]	@ (800a82c <check_fs+0xa8>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d101      	bne.n	800a81e <check_fs+0x9a>
 800a81a:	2300      	movs	r3, #0
 800a81c:	e000      	b.n	800a820 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a81e:	2302      	movs	r3, #2
}
 800a820:	4618      	mov	r0, r3
 800a822:	3708      	adds	r7, #8
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}
 800a828:	00544146 	.word	0x00544146
 800a82c:	33544146 	.word	0x33544146

0800a830 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b096      	sub	sp, #88	@ 0x58
 800a834:	af00      	add	r7, sp, #0
 800a836:	60f8      	str	r0, [r7, #12]
 800a838:	60b9      	str	r1, [r7, #8]
 800a83a:	4613      	mov	r3, r2
 800a83c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	2200      	movs	r2, #0
 800a842:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a844:	68f8      	ldr	r0, [r7, #12]
 800a846:	f7ff ff58 	bl	800a6fa <get_ldnumber>
 800a84a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a84c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a84e:	2b00      	cmp	r3, #0
 800a850:	da01      	bge.n	800a856 <find_volume+0x26>
 800a852:	230b      	movs	r3, #11
 800a854:	e22d      	b.n	800acb2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a856:	4aa1      	ldr	r2, [pc, #644]	@ (800aadc <find_volume+0x2ac>)
 800a858:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a85a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a85e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a862:	2b00      	cmp	r3, #0
 800a864:	d101      	bne.n	800a86a <find_volume+0x3a>
 800a866:	230c      	movs	r3, #12
 800a868:	e223      	b.n	800acb2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a86e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a870:	79fb      	ldrb	r3, [r7, #7]
 800a872:	f023 0301 	bic.w	r3, r3, #1
 800a876:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a87a:	781b      	ldrb	r3, [r3, #0]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d01a      	beq.n	800a8b6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a882:	785b      	ldrb	r3, [r3, #1]
 800a884:	4618      	mov	r0, r3
 800a886:	f7fe fd19 	bl	80092bc <disk_status>
 800a88a:	4603      	mov	r3, r0
 800a88c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a890:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a894:	f003 0301 	and.w	r3, r3, #1
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d10c      	bne.n	800a8b6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a89c:	79fb      	ldrb	r3, [r7, #7]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d007      	beq.n	800a8b2 <find_volume+0x82>
 800a8a2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a8a6:	f003 0304 	and.w	r3, r3, #4
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d001      	beq.n	800a8b2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a8ae:	230a      	movs	r3, #10
 800a8b0:	e1ff      	b.n	800acb2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	e1fd      	b.n	800acb2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a8b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a8bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8be:	b2da      	uxtb	r2, r3
 800a8c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8c2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a8c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8c6:	785b      	ldrb	r3, [r3, #1]
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f7fe fd11 	bl	80092f0 <disk_initialize>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a8d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a8d8:	f003 0301 	and.w	r3, r3, #1
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d001      	beq.n	800a8e4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a8e0:	2303      	movs	r3, #3
 800a8e2:	e1e6      	b.n	800acb2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a8e4:	79fb      	ldrb	r3, [r7, #7]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d007      	beq.n	800a8fa <find_volume+0xca>
 800a8ea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a8ee:	f003 0304 	and.w	r3, r3, #4
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d001      	beq.n	800a8fa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a8f6:	230a      	movs	r3, #10
 800a8f8:	e1db      	b.n	800acb2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a8fe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a900:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a902:	f7ff ff3f 	bl	800a784 <check_fs>
 800a906:	4603      	mov	r3, r0
 800a908:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a90c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a910:	2b02      	cmp	r3, #2
 800a912:	d149      	bne.n	800a9a8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a914:	2300      	movs	r3, #0
 800a916:	643b      	str	r3, [r7, #64]	@ 0x40
 800a918:	e01e      	b.n	800a958 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a91a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a91c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a920:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a922:	011b      	lsls	r3, r3, #4
 800a924:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800a928:	4413      	add	r3, r2
 800a92a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a92c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a92e:	3304      	adds	r3, #4
 800a930:	781b      	ldrb	r3, [r3, #0]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d006      	beq.n	800a944 <find_volume+0x114>
 800a936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a938:	3308      	adds	r3, #8
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7fe fd76 	bl	800942c <ld_dword>
 800a940:	4602      	mov	r2, r0
 800a942:	e000      	b.n	800a946 <find_volume+0x116>
 800a944:	2200      	movs	r2, #0
 800a946:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a948:	009b      	lsls	r3, r3, #2
 800a94a:	3358      	adds	r3, #88	@ 0x58
 800a94c:	443b      	add	r3, r7
 800a94e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a952:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a954:	3301      	adds	r3, #1
 800a956:	643b      	str	r3, [r7, #64]	@ 0x40
 800a958:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a95a:	2b03      	cmp	r3, #3
 800a95c:	d9dd      	bls.n	800a91a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a95e:	2300      	movs	r3, #0
 800a960:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800a962:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a964:	2b00      	cmp	r3, #0
 800a966:	d002      	beq.n	800a96e <find_volume+0x13e>
 800a968:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a96a:	3b01      	subs	r3, #1
 800a96c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a96e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a970:	009b      	lsls	r3, r3, #2
 800a972:	3358      	adds	r3, #88	@ 0x58
 800a974:	443b      	add	r3, r7
 800a976:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a97a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a97c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d005      	beq.n	800a98e <find_volume+0x15e>
 800a982:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a984:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a986:	f7ff fefd 	bl	800a784 <check_fs>
 800a98a:	4603      	mov	r3, r0
 800a98c:	e000      	b.n	800a990 <find_volume+0x160>
 800a98e:	2303      	movs	r3, #3
 800a990:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a994:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a998:	2b01      	cmp	r3, #1
 800a99a:	d905      	bls.n	800a9a8 <find_volume+0x178>
 800a99c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a99e:	3301      	adds	r3, #1
 800a9a0:	643b      	str	r3, [r7, #64]	@ 0x40
 800a9a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9a4:	2b03      	cmp	r3, #3
 800a9a6:	d9e2      	bls.n	800a96e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a9a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a9ac:	2b04      	cmp	r3, #4
 800a9ae:	d101      	bne.n	800a9b4 <find_volume+0x184>
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	e17e      	b.n	800acb2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a9b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a9b8:	2b01      	cmp	r3, #1
 800a9ba:	d901      	bls.n	800a9c0 <find_volume+0x190>
 800a9bc:	230d      	movs	r3, #13
 800a9be:	e178      	b.n	800acb2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a9c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9c2:	3330      	adds	r3, #48	@ 0x30
 800a9c4:	330b      	adds	r3, #11
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f7fe fd18 	bl	80093fc <ld_word>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9d2:	d001      	beq.n	800a9d8 <find_volume+0x1a8>
 800a9d4:	230d      	movs	r3, #13
 800a9d6:	e16c      	b.n	800acb2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a9d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9da:	3330      	adds	r3, #48	@ 0x30
 800a9dc:	3316      	adds	r3, #22
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f7fe fd0c 	bl	80093fc <ld_word>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a9e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d106      	bne.n	800a9fc <find_volume+0x1cc>
 800a9ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9f0:	3330      	adds	r3, #48	@ 0x30
 800a9f2:	3324      	adds	r3, #36	@ 0x24
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f7fe fd19 	bl	800942c <ld_dword>
 800a9fa:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800a9fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800aa00:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800aa02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa04:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800aa08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa0a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800aa0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa0e:	789b      	ldrb	r3, [r3, #2]
 800aa10:	2b01      	cmp	r3, #1
 800aa12:	d005      	beq.n	800aa20 <find_volume+0x1f0>
 800aa14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa16:	789b      	ldrb	r3, [r3, #2]
 800aa18:	2b02      	cmp	r3, #2
 800aa1a:	d001      	beq.n	800aa20 <find_volume+0x1f0>
 800aa1c:	230d      	movs	r3, #13
 800aa1e:	e148      	b.n	800acb2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800aa20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa22:	789b      	ldrb	r3, [r3, #2]
 800aa24:	461a      	mov	r2, r3
 800aa26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa28:	fb02 f303 	mul.w	r3, r2, r3
 800aa2c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800aa2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa34:	461a      	mov	r2, r3
 800aa36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa38:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800aa3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa3c:	895b      	ldrh	r3, [r3, #10]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d008      	beq.n	800aa54 <find_volume+0x224>
 800aa42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa44:	895b      	ldrh	r3, [r3, #10]
 800aa46:	461a      	mov	r2, r3
 800aa48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa4a:	895b      	ldrh	r3, [r3, #10]
 800aa4c:	3b01      	subs	r3, #1
 800aa4e:	4013      	ands	r3, r2
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d001      	beq.n	800aa58 <find_volume+0x228>
 800aa54:	230d      	movs	r3, #13
 800aa56:	e12c      	b.n	800acb2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800aa58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa5a:	3330      	adds	r3, #48	@ 0x30
 800aa5c:	3311      	adds	r3, #17
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f7fe fccc 	bl	80093fc <ld_word>
 800aa64:	4603      	mov	r3, r0
 800aa66:	461a      	mov	r2, r3
 800aa68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa6a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800aa6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa6e:	891b      	ldrh	r3, [r3, #8]
 800aa70:	f003 030f 	and.w	r3, r3, #15
 800aa74:	b29b      	uxth	r3, r3
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d001      	beq.n	800aa7e <find_volume+0x24e>
 800aa7a:	230d      	movs	r3, #13
 800aa7c:	e119      	b.n	800acb2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800aa7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa80:	3330      	adds	r3, #48	@ 0x30
 800aa82:	3313      	adds	r3, #19
 800aa84:	4618      	mov	r0, r3
 800aa86:	f7fe fcb9 	bl	80093fc <ld_word>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800aa8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d106      	bne.n	800aaa2 <find_volume+0x272>
 800aa94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa96:	3330      	adds	r3, #48	@ 0x30
 800aa98:	3320      	adds	r3, #32
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f7fe fcc6 	bl	800942c <ld_dword>
 800aaa0:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800aaa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaa4:	3330      	adds	r3, #48	@ 0x30
 800aaa6:	330e      	adds	r3, #14
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f7fe fca7 	bl	80093fc <ld_word>
 800aaae:	4603      	mov	r3, r0
 800aab0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800aab2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d101      	bne.n	800aabc <find_volume+0x28c>
 800aab8:	230d      	movs	r3, #13
 800aaba:	e0fa      	b.n	800acb2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800aabc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800aabe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aac0:	4413      	add	r3, r2
 800aac2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aac4:	8912      	ldrh	r2, [r2, #8]
 800aac6:	0912      	lsrs	r2, r2, #4
 800aac8:	b292      	uxth	r2, r2
 800aaca:	4413      	add	r3, r2
 800aacc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800aace:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d204      	bcs.n	800aae0 <find_volume+0x2b0>
 800aad6:	230d      	movs	r3, #13
 800aad8:	e0eb      	b.n	800acb2 <find_volume+0x482>
 800aada:	bf00      	nop
 800aadc:	20000ba4 	.word	0x20000ba4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800aae0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aae4:	1ad3      	subs	r3, r2, r3
 800aae6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aae8:	8952      	ldrh	r2, [r2, #10]
 800aaea:	fbb3 f3f2 	udiv	r3, r3, r2
 800aaee:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800aaf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d101      	bne.n	800aafa <find_volume+0x2ca>
 800aaf6:	230d      	movs	r3, #13
 800aaf8:	e0db      	b.n	800acb2 <find_volume+0x482>
		fmt = FS_FAT32;
 800aafa:	2303      	movs	r3, #3
 800aafc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ab00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab02:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d802      	bhi.n	800ab10 <find_volume+0x2e0>
 800ab0a:	2302      	movs	r3, #2
 800ab0c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ab10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab12:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d802      	bhi.n	800ab20 <find_volume+0x2f0>
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ab20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab22:	1c9a      	adds	r2, r3, #2
 800ab24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab26:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800ab28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab2a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ab2c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ab2e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ab30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab32:	441a      	add	r2, r3
 800ab34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab36:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800ab38:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ab3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab3c:	441a      	add	r2, r3
 800ab3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab40:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800ab42:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ab46:	2b03      	cmp	r3, #3
 800ab48:	d11e      	bne.n	800ab88 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ab4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab4c:	3330      	adds	r3, #48	@ 0x30
 800ab4e:	332a      	adds	r3, #42	@ 0x2a
 800ab50:	4618      	mov	r0, r3
 800ab52:	f7fe fc53 	bl	80093fc <ld_word>
 800ab56:	4603      	mov	r3, r0
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d001      	beq.n	800ab60 <find_volume+0x330>
 800ab5c:	230d      	movs	r3, #13
 800ab5e:	e0a8      	b.n	800acb2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ab60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab62:	891b      	ldrh	r3, [r3, #8]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d001      	beq.n	800ab6c <find_volume+0x33c>
 800ab68:	230d      	movs	r3, #13
 800ab6a:	e0a2      	b.n	800acb2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ab6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab6e:	3330      	adds	r3, #48	@ 0x30
 800ab70:	332c      	adds	r3, #44	@ 0x2c
 800ab72:	4618      	mov	r0, r3
 800ab74:	f7fe fc5a 	bl	800942c <ld_dword>
 800ab78:	4602      	mov	r2, r0
 800ab7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab7c:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ab7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab80:	695b      	ldr	r3, [r3, #20]
 800ab82:	009b      	lsls	r3, r3, #2
 800ab84:	647b      	str	r3, [r7, #68]	@ 0x44
 800ab86:	e01f      	b.n	800abc8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ab88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab8a:	891b      	ldrh	r3, [r3, #8]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d101      	bne.n	800ab94 <find_volume+0x364>
 800ab90:	230d      	movs	r3, #13
 800ab92:	e08e      	b.n	800acb2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ab94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab96:	6a1a      	ldr	r2, [r3, #32]
 800ab98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab9a:	441a      	add	r2, r3
 800ab9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab9e:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800aba0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800aba4:	2b02      	cmp	r3, #2
 800aba6:	d103      	bne.n	800abb0 <find_volume+0x380>
 800aba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abaa:	695b      	ldr	r3, [r3, #20]
 800abac:	005b      	lsls	r3, r3, #1
 800abae:	e00a      	b.n	800abc6 <find_volume+0x396>
 800abb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abb2:	695a      	ldr	r2, [r3, #20]
 800abb4:	4613      	mov	r3, r2
 800abb6:	005b      	lsls	r3, r3, #1
 800abb8:	4413      	add	r3, r2
 800abba:	085a      	lsrs	r2, r3, #1
 800abbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abbe:	695b      	ldr	r3, [r3, #20]
 800abc0:	f003 0301 	and.w	r3, r3, #1
 800abc4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800abc6:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800abc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abca:	699a      	ldr	r2, [r3, #24]
 800abcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abce:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800abd2:	0a5b      	lsrs	r3, r3, #9
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d201      	bcs.n	800abdc <find_volume+0x3ac>
 800abd8:	230d      	movs	r3, #13
 800abda:	e06a      	b.n	800acb2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800abdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abde:	f04f 32ff 	mov.w	r2, #4294967295
 800abe2:	611a      	str	r2, [r3, #16]
 800abe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abe6:	691a      	ldr	r2, [r3, #16]
 800abe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abea:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800abec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abee:	2280      	movs	r2, #128	@ 0x80
 800abf0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800abf2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800abf6:	2b03      	cmp	r3, #3
 800abf8:	d149      	bne.n	800ac8e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800abfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abfc:	3330      	adds	r3, #48	@ 0x30
 800abfe:	3330      	adds	r3, #48	@ 0x30
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7fe fbfb 	bl	80093fc <ld_word>
 800ac06:	4603      	mov	r3, r0
 800ac08:	2b01      	cmp	r3, #1
 800ac0a:	d140      	bne.n	800ac8e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ac0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac0e:	3301      	adds	r3, #1
 800ac10:	4619      	mov	r1, r3
 800ac12:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ac14:	f7fe fea2 	bl	800995c <move_window>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d137      	bne.n	800ac8e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800ac1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac20:	2200      	movs	r2, #0
 800ac22:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ac24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac26:	3330      	adds	r3, #48	@ 0x30
 800ac28:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f7fe fbe5 	bl	80093fc <ld_word>
 800ac32:	4603      	mov	r3, r0
 800ac34:	461a      	mov	r2, r3
 800ac36:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ac3a:	429a      	cmp	r2, r3
 800ac3c:	d127      	bne.n	800ac8e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ac3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac40:	3330      	adds	r3, #48	@ 0x30
 800ac42:	4618      	mov	r0, r3
 800ac44:	f7fe fbf2 	bl	800942c <ld_dword>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	4a1c      	ldr	r2, [pc, #112]	@ (800acbc <find_volume+0x48c>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d11e      	bne.n	800ac8e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ac50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac52:	3330      	adds	r3, #48	@ 0x30
 800ac54:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f7fe fbe7 	bl	800942c <ld_dword>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	4a17      	ldr	r2, [pc, #92]	@ (800acc0 <find_volume+0x490>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d113      	bne.n	800ac8e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ac66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac68:	3330      	adds	r3, #48	@ 0x30
 800ac6a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7fe fbdc 	bl	800942c <ld_dword>
 800ac74:	4602      	mov	r2, r0
 800ac76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac78:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ac7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac7c:	3330      	adds	r3, #48	@ 0x30
 800ac7e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800ac82:	4618      	mov	r0, r3
 800ac84:	f7fe fbd2 	bl	800942c <ld_dword>
 800ac88:	4602      	mov	r2, r0
 800ac8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac8c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ac8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac90:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800ac94:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ac96:	4b0b      	ldr	r3, [pc, #44]	@ (800acc4 <find_volume+0x494>)
 800ac98:	881b      	ldrh	r3, [r3, #0]
 800ac9a:	3301      	adds	r3, #1
 800ac9c:	b29a      	uxth	r2, r3
 800ac9e:	4b09      	ldr	r3, [pc, #36]	@ (800acc4 <find_volume+0x494>)
 800aca0:	801a      	strh	r2, [r3, #0]
 800aca2:	4b08      	ldr	r3, [pc, #32]	@ (800acc4 <find_volume+0x494>)
 800aca4:	881a      	ldrh	r2, [r3, #0]
 800aca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aca8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800acaa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800acac:	f7fe fdee 	bl	800988c <clear_lock>
#endif
	return FR_OK;
 800acb0:	2300      	movs	r3, #0
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3758      	adds	r7, #88	@ 0x58
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}
 800acba:	bf00      	nop
 800acbc:	41615252 	.word	0x41615252
 800acc0:	61417272 	.word	0x61417272
 800acc4:	20000ba8 	.word	0x20000ba8

0800acc8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b084      	sub	sp, #16
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800acd2:	2309      	movs	r3, #9
 800acd4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d01c      	beq.n	800ad16 <validate+0x4e>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d018      	beq.n	800ad16 <validate+0x4e>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	781b      	ldrb	r3, [r3, #0]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d013      	beq.n	800ad16 <validate+0x4e>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	889a      	ldrh	r2, [r3, #4]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	88db      	ldrh	r3, [r3, #6]
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d10c      	bne.n	800ad16 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	785b      	ldrb	r3, [r3, #1]
 800ad02:	4618      	mov	r0, r3
 800ad04:	f7fe fada 	bl	80092bc <disk_status>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	f003 0301 	and.w	r3, r3, #1
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d101      	bne.n	800ad16 <validate+0x4e>
			res = FR_OK;
 800ad12:	2300      	movs	r3, #0
 800ad14:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ad16:	7bfb      	ldrb	r3, [r7, #15]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d102      	bne.n	800ad22 <validate+0x5a>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	e000      	b.n	800ad24 <validate+0x5c>
 800ad22:	2300      	movs	r3, #0
 800ad24:	683a      	ldr	r2, [r7, #0]
 800ad26:	6013      	str	r3, [r2, #0]
	return res;
 800ad28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3710      	adds	r7, #16
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
	...

0800ad34 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b088      	sub	sp, #32
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	60f8      	str	r0, [r7, #12]
 800ad3c:	60b9      	str	r1, [r7, #8]
 800ad3e:	4613      	mov	r3, r2
 800ad40:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ad46:	f107 0310 	add.w	r3, r7, #16
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f7ff fcd5 	bl	800a6fa <get_ldnumber>
 800ad50:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ad52:	69fb      	ldr	r3, [r7, #28]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	da01      	bge.n	800ad5c <f_mount+0x28>
 800ad58:	230b      	movs	r3, #11
 800ad5a:	e02b      	b.n	800adb4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ad5c:	4a17      	ldr	r2, [pc, #92]	@ (800adbc <f_mount+0x88>)
 800ad5e:	69fb      	ldr	r3, [r7, #28]
 800ad60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad64:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ad66:	69bb      	ldr	r3, [r7, #24]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d005      	beq.n	800ad78 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ad6c:	69b8      	ldr	r0, [r7, #24]
 800ad6e:	f7fe fd8d 	bl	800988c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ad72:	69bb      	ldr	r3, [r7, #24]
 800ad74:	2200      	movs	r2, #0
 800ad76:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d002      	beq.n	800ad84 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	2200      	movs	r2, #0
 800ad82:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ad84:	68fa      	ldr	r2, [r7, #12]
 800ad86:	490d      	ldr	r1, [pc, #52]	@ (800adbc <f_mount+0x88>)
 800ad88:	69fb      	ldr	r3, [r7, #28]
 800ad8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d002      	beq.n	800ad9a <f_mount+0x66>
 800ad94:	79fb      	ldrb	r3, [r7, #7]
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d001      	beq.n	800ad9e <f_mount+0x6a>
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	e00a      	b.n	800adb4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ad9e:	f107 010c 	add.w	r1, r7, #12
 800ada2:	f107 0308 	add.w	r3, r7, #8
 800ada6:	2200      	movs	r2, #0
 800ada8:	4618      	mov	r0, r3
 800adaa:	f7ff fd41 	bl	800a830 <find_volume>
 800adae:	4603      	mov	r3, r0
 800adb0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800adb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3720      	adds	r7, #32
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}
 800adbc:	20000ba4 	.word	0x20000ba4

0800adc0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b098      	sub	sp, #96	@ 0x60
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	60f8      	str	r0, [r7, #12]
 800adc8:	60b9      	str	r1, [r7, #8]
 800adca:	4613      	mov	r3, r2
 800adcc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d101      	bne.n	800add8 <f_open+0x18>
 800add4:	2309      	movs	r3, #9
 800add6:	e1a9      	b.n	800b12c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800add8:	79fb      	ldrb	r3, [r7, #7]
 800adda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800adde:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ade0:	79fa      	ldrb	r2, [r7, #7]
 800ade2:	f107 0110 	add.w	r1, r7, #16
 800ade6:	f107 0308 	add.w	r3, r7, #8
 800adea:	4618      	mov	r0, r3
 800adec:	f7ff fd20 	bl	800a830 <find_volume>
 800adf0:	4603      	mov	r3, r0
 800adf2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800adf6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	f040 818d 	bne.w	800b11a <f_open+0x35a>
		dj.obj.fs = fs;
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ae04:	68ba      	ldr	r2, [r7, #8]
 800ae06:	f107 0314 	add.w	r3, r7, #20
 800ae0a:	4611      	mov	r1, r2
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f7ff fc03 	bl	800a618 <follow_path>
 800ae12:	4603      	mov	r3, r0
 800ae14:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ae18:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d118      	bne.n	800ae52 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ae20:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ae24:	b25b      	sxtb	r3, r3
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	da03      	bge.n	800ae32 <f_open+0x72>
				res = FR_INVALID_NAME;
 800ae2a:	2306      	movs	r3, #6
 800ae2c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ae30:	e00f      	b.n	800ae52 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ae32:	79fb      	ldrb	r3, [r7, #7]
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	bf8c      	ite	hi
 800ae38:	2301      	movhi	r3, #1
 800ae3a:	2300      	movls	r3, #0
 800ae3c:	b2db      	uxtb	r3, r3
 800ae3e:	461a      	mov	r2, r3
 800ae40:	f107 0314 	add.w	r3, r7, #20
 800ae44:	4611      	mov	r1, r2
 800ae46:	4618      	mov	r0, r3
 800ae48:	f7fe fbd8 	bl	80095fc <chk_lock>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ae52:	79fb      	ldrb	r3, [r7, #7]
 800ae54:	f003 031c 	and.w	r3, r3, #28
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d07f      	beq.n	800af5c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800ae5c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d017      	beq.n	800ae94 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ae64:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ae68:	2b04      	cmp	r3, #4
 800ae6a:	d10e      	bne.n	800ae8a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ae6c:	f7fe fc22 	bl	80096b4 <enq_lock>
 800ae70:	4603      	mov	r3, r0
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d006      	beq.n	800ae84 <f_open+0xc4>
 800ae76:	f107 0314 	add.w	r3, r7, #20
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f7ff fb06 	bl	800a48c <dir_register>
 800ae80:	4603      	mov	r3, r0
 800ae82:	e000      	b.n	800ae86 <f_open+0xc6>
 800ae84:	2312      	movs	r3, #18
 800ae86:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ae8a:	79fb      	ldrb	r3, [r7, #7]
 800ae8c:	f043 0308 	orr.w	r3, r3, #8
 800ae90:	71fb      	strb	r3, [r7, #7]
 800ae92:	e010      	b.n	800aeb6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ae94:	7ebb      	ldrb	r3, [r7, #26]
 800ae96:	f003 0311 	and.w	r3, r3, #17
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d003      	beq.n	800aea6 <f_open+0xe6>
					res = FR_DENIED;
 800ae9e:	2307      	movs	r3, #7
 800aea0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800aea4:	e007      	b.n	800aeb6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800aea6:	79fb      	ldrb	r3, [r7, #7]
 800aea8:	f003 0304 	and.w	r3, r3, #4
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d002      	beq.n	800aeb6 <f_open+0xf6>
 800aeb0:	2308      	movs	r3, #8
 800aeb2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800aeb6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d168      	bne.n	800af90 <f_open+0x1d0>
 800aebe:	79fb      	ldrb	r3, [r7, #7]
 800aec0:	f003 0308 	and.w	r3, r3, #8
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d063      	beq.n	800af90 <f_open+0x1d0>
				dw = GET_FATTIME();
 800aec8:	f7fb fd9e 	bl	8006a08 <get_fattime>
 800aecc:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800aece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aed0:	330e      	adds	r3, #14
 800aed2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800aed4:	4618      	mov	r0, r3
 800aed6:	f7fe fae7 	bl	80094a8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800aeda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aedc:	3316      	adds	r3, #22
 800aede:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800aee0:	4618      	mov	r0, r3
 800aee2:	f7fe fae1 	bl	80094a8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800aee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aee8:	330b      	adds	r3, #11
 800aeea:	2220      	movs	r2, #32
 800aeec:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aef2:	4611      	mov	r1, r2
 800aef4:	4618      	mov	r0, r3
 800aef6:	f7ff fa35 	bl	800a364 <ld_clust>
 800aefa:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800af00:	2200      	movs	r2, #0
 800af02:	4618      	mov	r0, r3
 800af04:	f7ff fa4d 	bl	800a3a2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800af08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af0a:	331c      	adds	r3, #28
 800af0c:	2100      	movs	r1, #0
 800af0e:	4618      	mov	r0, r3
 800af10:	f7fe faca 	bl	80094a8 <st_dword>
					fs->wflag = 1;
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	2201      	movs	r2, #1
 800af18:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800af1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d037      	beq.n	800af90 <f_open+0x1d0>
						dw = fs->winsect;
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af24:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800af26:	f107 0314 	add.w	r3, r7, #20
 800af2a:	2200      	movs	r2, #0
 800af2c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800af2e:	4618      	mov	r0, r3
 800af30:	f7fe ff60 	bl	8009df4 <remove_chain>
 800af34:	4603      	mov	r3, r0
 800af36:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800af3a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d126      	bne.n	800af90 <f_open+0x1d0>
							res = move_window(fs, dw);
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800af46:	4618      	mov	r0, r3
 800af48:	f7fe fd08 	bl	800995c <move_window>
 800af4c:	4603      	mov	r3, r0
 800af4e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800af56:	3a01      	subs	r2, #1
 800af58:	60da      	str	r2, [r3, #12]
 800af5a:	e019      	b.n	800af90 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800af5c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800af60:	2b00      	cmp	r3, #0
 800af62:	d115      	bne.n	800af90 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800af64:	7ebb      	ldrb	r3, [r7, #26]
 800af66:	f003 0310 	and.w	r3, r3, #16
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d003      	beq.n	800af76 <f_open+0x1b6>
					res = FR_NO_FILE;
 800af6e:	2304      	movs	r3, #4
 800af70:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800af74:	e00c      	b.n	800af90 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800af76:	79fb      	ldrb	r3, [r7, #7]
 800af78:	f003 0302 	and.w	r3, r3, #2
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d007      	beq.n	800af90 <f_open+0x1d0>
 800af80:	7ebb      	ldrb	r3, [r7, #26]
 800af82:	f003 0301 	and.w	r3, r3, #1
 800af86:	2b00      	cmp	r3, #0
 800af88:	d002      	beq.n	800af90 <f_open+0x1d0>
						res = FR_DENIED;
 800af8a:	2307      	movs	r3, #7
 800af8c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800af90:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800af94:	2b00      	cmp	r3, #0
 800af96:	d126      	bne.n	800afe6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800af98:	79fb      	ldrb	r3, [r7, #7]
 800af9a:	f003 0308 	and.w	r3, r3, #8
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d003      	beq.n	800afaa <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800afa2:	79fb      	ldrb	r3, [r7, #7]
 800afa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afa8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800afb2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800afb8:	79fb      	ldrb	r3, [r7, #7]
 800afba:	2b01      	cmp	r3, #1
 800afbc:	bf8c      	ite	hi
 800afbe:	2301      	movhi	r3, #1
 800afc0:	2300      	movls	r3, #0
 800afc2:	b2db      	uxtb	r3, r3
 800afc4:	461a      	mov	r2, r3
 800afc6:	f107 0314 	add.w	r3, r7, #20
 800afca:	4611      	mov	r1, r2
 800afcc:	4618      	mov	r0, r3
 800afce:	f7fe fb93 	bl	80096f8 <inc_lock>
 800afd2:	4602      	mov	r2, r0
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	691b      	ldr	r3, [r3, #16]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d102      	bne.n	800afe6 <f_open+0x226>
 800afe0:	2302      	movs	r3, #2
 800afe2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800afe6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800afea:	2b00      	cmp	r3, #0
 800afec:	f040 8095 	bne.w	800b11a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aff4:	4611      	mov	r1, r2
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7ff f9b4 	bl	800a364 <ld_clust>
 800affc:	4602      	mov	r2, r0
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b004:	331c      	adds	r3, #28
 800b006:	4618      	mov	r0, r3
 800b008:	f7fe fa10 	bl	800942c <ld_dword>
 800b00c:	4602      	mov	r2, r0
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2200      	movs	r2, #0
 800b016:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b018:	693a      	ldr	r2, [r7, #16]
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	88da      	ldrh	r2, [r3, #6]
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	79fa      	ldrb	r2, [r7, #7]
 800b02a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	2200      	movs	r2, #0
 800b030:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2200      	movs	r2, #0
 800b036:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	2200      	movs	r2, #0
 800b03c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	3330      	adds	r3, #48	@ 0x30
 800b042:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b046:	2100      	movs	r1, #0
 800b048:	4618      	mov	r0, r3
 800b04a:	f7fe fa7a 	bl	8009542 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b04e:	79fb      	ldrb	r3, [r7, #7]
 800b050:	f003 0320 	and.w	r3, r3, #32
 800b054:	2b00      	cmp	r3, #0
 800b056:	d060      	beq.n	800b11a <f_open+0x35a>
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	68db      	ldr	r3, [r3, #12]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d05c      	beq.n	800b11a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	68da      	ldr	r2, [r3, #12]
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b068:	693b      	ldr	r3, [r7, #16]
 800b06a:	895b      	ldrh	r3, [r3, #10]
 800b06c:	025b      	lsls	r3, r3, #9
 800b06e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	689b      	ldr	r3, [r3, #8]
 800b074:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	68db      	ldr	r3, [r3, #12]
 800b07a:	657b      	str	r3, [r7, #84]	@ 0x54
 800b07c:	e016      	b.n	800b0ac <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b082:	4618      	mov	r0, r3
 800b084:	f7fe fd25 	bl	8009ad2 <get_fat>
 800b088:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b08a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b08c:	2b01      	cmp	r3, #1
 800b08e:	d802      	bhi.n	800b096 <f_open+0x2d6>
 800b090:	2302      	movs	r3, #2
 800b092:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b096:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b09c:	d102      	bne.n	800b0a4 <f_open+0x2e4>
 800b09e:	2301      	movs	r3, #1
 800b0a0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b0a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b0a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b0a8:	1ad3      	subs	r3, r2, r3
 800b0aa:	657b      	str	r3, [r7, #84]	@ 0x54
 800b0ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d103      	bne.n	800b0bc <f_open+0x2fc>
 800b0b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b0b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d8e0      	bhi.n	800b07e <f_open+0x2be>
				}
				fp->clust = clst;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b0c0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b0c2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d127      	bne.n	800b11a <f_open+0x35a>
 800b0ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b0cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d022      	beq.n	800b11a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f7fe fcdb 	bl	8009a94 <clust2sect>
 800b0de:	6478      	str	r0, [r7, #68]	@ 0x44
 800b0e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d103      	bne.n	800b0ee <f_open+0x32e>
						res = FR_INT_ERR;
 800b0e6:	2302      	movs	r3, #2
 800b0e8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b0ec:	e015      	b.n	800b11a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b0ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b0f0:	0a5a      	lsrs	r2, r3, #9
 800b0f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b0f4:	441a      	add	r2, r3
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	7858      	ldrb	r0, [r3, #1]
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	6a1a      	ldr	r2, [r3, #32]
 800b108:	2301      	movs	r3, #1
 800b10a:	f7fe f919 	bl	8009340 <disk_read>
 800b10e:	4603      	mov	r3, r0
 800b110:	2b00      	cmp	r3, #0
 800b112:	d002      	beq.n	800b11a <f_open+0x35a>
 800b114:	2301      	movs	r3, #1
 800b116:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b11a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d002      	beq.n	800b128 <f_open+0x368>
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2200      	movs	r2, #0
 800b126:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b128:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3760      	adds	r7, #96	@ 0x60
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b08e      	sub	sp, #56	@ 0x38
 800b138:	af00      	add	r7, sp, #0
 800b13a:	60f8      	str	r0, [r7, #12]
 800b13c:	60b9      	str	r1, [r7, #8]
 800b13e:	607a      	str	r2, [r7, #4]
 800b140:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	2200      	movs	r2, #0
 800b14a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	f107 0214 	add.w	r2, r7, #20
 800b152:	4611      	mov	r1, r2
 800b154:	4618      	mov	r0, r3
 800b156:	f7ff fdb7 	bl	800acc8 <validate>
 800b15a:	4603      	mov	r3, r0
 800b15c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b160:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b164:	2b00      	cmp	r3, #0
 800b166:	d107      	bne.n	800b178 <f_read+0x44>
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	7d5b      	ldrb	r3, [r3, #21]
 800b16c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b170:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b174:	2b00      	cmp	r3, #0
 800b176:	d002      	beq.n	800b17e <f_read+0x4a>
 800b178:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b17c:	e115      	b.n	800b3aa <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	7d1b      	ldrb	r3, [r3, #20]
 800b182:	f003 0301 	and.w	r3, r3, #1
 800b186:	2b00      	cmp	r3, #0
 800b188:	d101      	bne.n	800b18e <f_read+0x5a>
 800b18a:	2307      	movs	r3, #7
 800b18c:	e10d      	b.n	800b3aa <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	68da      	ldr	r2, [r3, #12]
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	699b      	ldr	r3, [r3, #24]
 800b196:	1ad3      	subs	r3, r2, r3
 800b198:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800b19a:	687a      	ldr	r2, [r7, #4]
 800b19c:	6a3b      	ldr	r3, [r7, #32]
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	f240 80fe 	bls.w	800b3a0 <f_read+0x26c>
 800b1a4:	6a3b      	ldr	r3, [r7, #32]
 800b1a6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800b1a8:	e0fa      	b.n	800b3a0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	699b      	ldr	r3, [r3, #24]
 800b1ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	f040 80c6 	bne.w	800b344 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	699b      	ldr	r3, [r3, #24]
 800b1bc:	0a5b      	lsrs	r3, r3, #9
 800b1be:	697a      	ldr	r2, [r7, #20]
 800b1c0:	8952      	ldrh	r2, [r2, #10]
 800b1c2:	3a01      	subs	r2, #1
 800b1c4:	4013      	ands	r3, r2
 800b1c6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800b1c8:	69fb      	ldr	r3, [r7, #28]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d12f      	bne.n	800b22e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	699b      	ldr	r3, [r3, #24]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d103      	bne.n	800b1de <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	689b      	ldr	r3, [r3, #8]
 800b1da:	633b      	str	r3, [r7, #48]	@ 0x30
 800b1dc:	e013      	b.n	800b206 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d007      	beq.n	800b1f6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	699b      	ldr	r3, [r3, #24]
 800b1ea:	4619      	mov	r1, r3
 800b1ec:	68f8      	ldr	r0, [r7, #12]
 800b1ee:	f7fe fefe 	bl	8009fee <clmt_clust>
 800b1f2:	6338      	str	r0, [r7, #48]	@ 0x30
 800b1f4:	e007      	b.n	800b206 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800b1f6:	68fa      	ldr	r2, [r7, #12]
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	69db      	ldr	r3, [r3, #28]
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	4610      	mov	r0, r2
 800b200:	f7fe fc67 	bl	8009ad2 <get_fat>
 800b204:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800b206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b208:	2b01      	cmp	r3, #1
 800b20a:	d804      	bhi.n	800b216 <f_read+0xe2>
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	2202      	movs	r2, #2
 800b210:	755a      	strb	r2, [r3, #21]
 800b212:	2302      	movs	r3, #2
 800b214:	e0c9      	b.n	800b3aa <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b21c:	d104      	bne.n	800b228 <f_read+0xf4>
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2201      	movs	r2, #1
 800b222:	755a      	strb	r2, [r3, #21]
 800b224:	2301      	movs	r3, #1
 800b226:	e0c0      	b.n	800b3aa <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b22c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b22e:	697a      	ldr	r2, [r7, #20]
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	69db      	ldr	r3, [r3, #28]
 800b234:	4619      	mov	r1, r3
 800b236:	4610      	mov	r0, r2
 800b238:	f7fe fc2c 	bl	8009a94 <clust2sect>
 800b23c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b23e:	69bb      	ldr	r3, [r7, #24]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d104      	bne.n	800b24e <f_read+0x11a>
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	2202      	movs	r2, #2
 800b248:	755a      	strb	r2, [r3, #21]
 800b24a:	2302      	movs	r3, #2
 800b24c:	e0ad      	b.n	800b3aa <f_read+0x276>
			sect += csect;
 800b24e:	69ba      	ldr	r2, [r7, #24]
 800b250:	69fb      	ldr	r3, [r7, #28]
 800b252:	4413      	add	r3, r2
 800b254:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	0a5b      	lsrs	r3, r3, #9
 800b25a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800b25c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d039      	beq.n	800b2d6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b262:	69fa      	ldr	r2, [r7, #28]
 800b264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b266:	4413      	add	r3, r2
 800b268:	697a      	ldr	r2, [r7, #20]
 800b26a:	8952      	ldrh	r2, [r2, #10]
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d905      	bls.n	800b27c <f_read+0x148>
					cc = fs->csize - csect;
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	895b      	ldrh	r3, [r3, #10]
 800b274:	461a      	mov	r2, r3
 800b276:	69fb      	ldr	r3, [r7, #28]
 800b278:	1ad3      	subs	r3, r2, r3
 800b27a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	7858      	ldrb	r0, [r3, #1]
 800b280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b282:	69ba      	ldr	r2, [r7, #24]
 800b284:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b286:	f7fe f85b 	bl	8009340 <disk_read>
 800b28a:	4603      	mov	r3, r0
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d004      	beq.n	800b29a <f_read+0x166>
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	2201      	movs	r2, #1
 800b294:	755a      	strb	r2, [r3, #21]
 800b296:	2301      	movs	r3, #1
 800b298:	e087      	b.n	800b3aa <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	7d1b      	ldrb	r3, [r3, #20]
 800b29e:	b25b      	sxtb	r3, r3
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	da14      	bge.n	800b2ce <f_read+0x19a>
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	6a1a      	ldr	r2, [r3, #32]
 800b2a8:	69bb      	ldr	r3, [r7, #24]
 800b2aa:	1ad3      	subs	r3, r2, r3
 800b2ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b2ae:	429a      	cmp	r2, r3
 800b2b0:	d90d      	bls.n	800b2ce <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	6a1a      	ldr	r2, [r3, #32]
 800b2b6:	69bb      	ldr	r3, [r7, #24]
 800b2b8:	1ad3      	subs	r3, r2, r3
 800b2ba:	025b      	lsls	r3, r3, #9
 800b2bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b2be:	18d0      	adds	r0, r2, r3
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	3330      	adds	r3, #48	@ 0x30
 800b2c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	f7fe f919 	bl	8009500 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800b2ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2d0:	025b      	lsls	r3, r3, #9
 800b2d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800b2d4:	e050      	b.n	800b378 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	6a1b      	ldr	r3, [r3, #32]
 800b2da:	69ba      	ldr	r2, [r7, #24]
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	d02e      	beq.n	800b33e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	7d1b      	ldrb	r3, [r3, #20]
 800b2e4:	b25b      	sxtb	r3, r3
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	da18      	bge.n	800b31c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	7858      	ldrb	r0, [r3, #1]
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	6a1a      	ldr	r2, [r3, #32]
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	f7fe f841 	bl	8009380 <disk_write>
 800b2fe:	4603      	mov	r3, r0
 800b300:	2b00      	cmp	r3, #0
 800b302:	d004      	beq.n	800b30e <f_read+0x1da>
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2201      	movs	r2, #1
 800b308:	755a      	strb	r2, [r3, #21]
 800b30a:	2301      	movs	r3, #1
 800b30c:	e04d      	b.n	800b3aa <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	7d1b      	ldrb	r3, [r3, #20]
 800b312:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b316:	b2da      	uxtb	r2, r3
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	7858      	ldrb	r0, [r3, #1]
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b326:	2301      	movs	r3, #1
 800b328:	69ba      	ldr	r2, [r7, #24]
 800b32a:	f7fe f809 	bl	8009340 <disk_read>
 800b32e:	4603      	mov	r3, r0
 800b330:	2b00      	cmp	r3, #0
 800b332:	d004      	beq.n	800b33e <f_read+0x20a>
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2201      	movs	r2, #1
 800b338:	755a      	strb	r2, [r3, #21]
 800b33a:	2301      	movs	r3, #1
 800b33c:	e035      	b.n	800b3aa <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	69ba      	ldr	r2, [r7, #24]
 800b342:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	699b      	ldr	r3, [r3, #24]
 800b348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b34c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800b350:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800b352:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	429a      	cmp	r2, r3
 800b358:	d901      	bls.n	800b35e <f_read+0x22a>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	699b      	ldr	r3, [r3, #24]
 800b368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b36c:	4413      	add	r3, r2
 800b36e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b370:	4619      	mov	r1, r3
 800b372:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b374:	f7fe f8c4 	bl	8009500 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800b378:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b37a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b37c:	4413      	add	r3, r2
 800b37e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	699a      	ldr	r2, [r3, #24]
 800b384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b386:	441a      	add	r2, r3
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	619a      	str	r2, [r3, #24]
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	681a      	ldr	r2, [r3, #0]
 800b390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b392:	441a      	add	r2, r3
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	601a      	str	r2, [r3, #0]
 800b398:	687a      	ldr	r2, [r7, #4]
 800b39a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b39c:	1ad3      	subs	r3, r2, r3
 800b39e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	f47f af01 	bne.w	800b1aa <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800b3a8:	2300      	movs	r3, #0
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3738      	adds	r7, #56	@ 0x38
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}

0800b3b2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b3b2:	b580      	push	{r7, lr}
 800b3b4:	b086      	sub	sp, #24
 800b3b6:	af00      	add	r7, sp, #0
 800b3b8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f107 0208 	add.w	r2, r7, #8
 800b3c0:	4611      	mov	r1, r2
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f7ff fc80 	bl	800acc8 <validate>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b3cc:	7dfb      	ldrb	r3, [r7, #23]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d168      	bne.n	800b4a4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	7d1b      	ldrb	r3, [r3, #20]
 800b3d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d062      	beq.n	800b4a4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	7d1b      	ldrb	r3, [r3, #20]
 800b3e2:	b25b      	sxtb	r3, r3
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	da15      	bge.n	800b414 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	7858      	ldrb	r0, [r3, #1]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6a1a      	ldr	r2, [r3, #32]
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	f7fd ffc2 	bl	8009380 <disk_write>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d001      	beq.n	800b406 <f_sync+0x54>
 800b402:	2301      	movs	r3, #1
 800b404:	e04f      	b.n	800b4a6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	7d1b      	ldrb	r3, [r3, #20]
 800b40a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b40e:	b2da      	uxtb	r2, r3
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b414:	f7fb faf8 	bl	8006a08 <get_fattime>
 800b418:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b41a:	68ba      	ldr	r2, [r7, #8]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b420:	4619      	mov	r1, r3
 800b422:	4610      	mov	r0, r2
 800b424:	f7fe fa9a 	bl	800995c <move_window>
 800b428:	4603      	mov	r3, r0
 800b42a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b42c:	7dfb      	ldrb	r3, [r7, #23]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d138      	bne.n	800b4a4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b436:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	330b      	adds	r3, #11
 800b43c:	781a      	ldrb	r2, [r3, #0]
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	330b      	adds	r3, #11
 800b442:	f042 0220 	orr.w	r2, r2, #32
 800b446:	b2d2      	uxtb	r2, r2
 800b448:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6818      	ldr	r0, [r3, #0]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	689b      	ldr	r3, [r3, #8]
 800b452:	461a      	mov	r2, r3
 800b454:	68f9      	ldr	r1, [r7, #12]
 800b456:	f7fe ffa4 	bl	800a3a2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	f103 021c 	add.w	r2, r3, #28
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	68db      	ldr	r3, [r3, #12]
 800b464:	4619      	mov	r1, r3
 800b466:	4610      	mov	r0, r2
 800b468:	f7fe f81e 	bl	80094a8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	3316      	adds	r3, #22
 800b470:	6939      	ldr	r1, [r7, #16]
 800b472:	4618      	mov	r0, r3
 800b474:	f7fe f818 	bl	80094a8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	3312      	adds	r3, #18
 800b47c:	2100      	movs	r1, #0
 800b47e:	4618      	mov	r0, r3
 800b480:	f7fd fff7 	bl	8009472 <st_word>
					fs->wflag = 1;
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	2201      	movs	r2, #1
 800b488:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	4618      	mov	r0, r3
 800b48e:	f7fe fa93 	bl	80099b8 <sync_fs>
 800b492:	4603      	mov	r3, r0
 800b494:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	7d1b      	ldrb	r3, [r3, #20]
 800b49a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b49e:	b2da      	uxtb	r2, r3
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b4a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3718      	adds	r7, #24
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}

0800b4ae <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b4ae:	b580      	push	{r7, lr}
 800b4b0:	b084      	sub	sp, #16
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f7ff ff7b 	bl	800b3b2 <f_sync>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b4c0:	7bfb      	ldrb	r3, [r7, #15]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d118      	bne.n	800b4f8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f107 0208 	add.w	r2, r7, #8
 800b4cc:	4611      	mov	r1, r2
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f7ff fbfa 	bl	800acc8 <validate>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b4d8:	7bfb      	ldrb	r3, [r7, #15]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d10c      	bne.n	800b4f8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	691b      	ldr	r3, [r3, #16]
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f7fe f996 	bl	8009814 <dec_lock>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b4ec:	7bfb      	ldrb	r3, [r7, #15]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d102      	bne.n	800b4f8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b4f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3710      	adds	r7, #16
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}

0800b502 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800b502:	b580      	push	{r7, lr}
 800b504:	b090      	sub	sp, #64	@ 0x40
 800b506:	af00      	add	r7, sp, #0
 800b508:	6078      	str	r0, [r7, #4]
 800b50a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f107 0208 	add.w	r2, r7, #8
 800b512:	4611      	mov	r1, r2
 800b514:	4618      	mov	r0, r3
 800b516:	f7ff fbd7 	bl	800acc8 <validate>
 800b51a:	4603      	mov	r3, r0
 800b51c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800b520:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b524:	2b00      	cmp	r3, #0
 800b526:	d103      	bne.n	800b530 <f_lseek+0x2e>
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	7d5b      	ldrb	r3, [r3, #21]
 800b52c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800b530:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b534:	2b00      	cmp	r3, #0
 800b536:	d002      	beq.n	800b53e <f_lseek+0x3c>
 800b538:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b53c:	e1e6      	b.n	800b90c <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b542:	2b00      	cmp	r3, #0
 800b544:	f000 80d1 	beq.w	800b6ea <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b54e:	d15a      	bne.n	800b606 <f_lseek+0x104>
			tbl = fp->cltbl;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b554:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800b556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b558:	1d1a      	adds	r2, r3, #4
 800b55a:	627a      	str	r2, [r7, #36]	@ 0x24
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	617b      	str	r3, [r7, #20]
 800b560:	2302      	movs	r3, #2
 800b562:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	689b      	ldr	r3, [r3, #8]
 800b568:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800b56a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d03a      	beq.n	800b5e6 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800b570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b572:	613b      	str	r3, [r7, #16]
 800b574:	2300      	movs	r3, #0
 800b576:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b57a:	3302      	adds	r3, #2
 800b57c:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800b57e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b580:	60fb      	str	r3, [r7, #12]
 800b582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b584:	3301      	adds	r3, #1
 800b586:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b58c:	4618      	mov	r0, r3
 800b58e:	f7fe faa0 	bl	8009ad2 <get_fat>
 800b592:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800b594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b596:	2b01      	cmp	r3, #1
 800b598:	d804      	bhi.n	800b5a4 <f_lseek+0xa2>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2202      	movs	r2, #2
 800b59e:	755a      	strb	r2, [r3, #21]
 800b5a0:	2302      	movs	r3, #2
 800b5a2:	e1b3      	b.n	800b90c <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b5a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5aa:	d104      	bne.n	800b5b6 <f_lseek+0xb4>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2201      	movs	r2, #1
 800b5b0:	755a      	strb	r2, [r3, #21]
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	e1aa      	b.n	800b90c <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	3301      	adds	r3, #1
 800b5ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d0de      	beq.n	800b57e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800b5c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d809      	bhi.n	800b5dc <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800b5c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5ca:	1d1a      	adds	r2, r3, #4
 800b5cc:	627a      	str	r2, [r7, #36]	@ 0x24
 800b5ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b5d0:	601a      	str	r2, [r3, #0]
 800b5d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5d4:	1d1a      	adds	r2, r3, #4
 800b5d6:	627a      	str	r2, [r7, #36]	@ 0x24
 800b5d8:	693a      	ldr	r2, [r7, #16]
 800b5da:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	695b      	ldr	r3, [r3, #20]
 800b5e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	d3c4      	bcc.n	800b570 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b5ec:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800b5ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b5f0:	697b      	ldr	r3, [r7, #20]
 800b5f2:	429a      	cmp	r2, r3
 800b5f4:	d803      	bhi.n	800b5fe <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800b5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	601a      	str	r2, [r3, #0]
 800b5fc:	e184      	b.n	800b908 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800b5fe:	2311      	movs	r3, #17
 800b600:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800b604:	e180      	b.n	800b908 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	68db      	ldr	r3, [r3, #12]
 800b60a:	683a      	ldr	r2, [r7, #0]
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d902      	bls.n	800b616 <f_lseek+0x114>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	68db      	ldr	r3, [r3, #12]
 800b614:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	683a      	ldr	r2, [r7, #0]
 800b61a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	f000 8172 	beq.w	800b908 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	3b01      	subs	r3, #1
 800b628:	4619      	mov	r1, r3
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f7fe fcdf 	bl	8009fee <clmt_clust>
 800b630:	4602      	mov	r2, r0
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800b636:	68ba      	ldr	r2, [r7, #8]
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	69db      	ldr	r3, [r3, #28]
 800b63c:	4619      	mov	r1, r3
 800b63e:	4610      	mov	r0, r2
 800b640:	f7fe fa28 	bl	8009a94 <clust2sect>
 800b644:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800b646:	69bb      	ldr	r3, [r7, #24]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d104      	bne.n	800b656 <f_lseek+0x154>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2202      	movs	r2, #2
 800b650:	755a      	strb	r2, [r3, #21]
 800b652:	2302      	movs	r3, #2
 800b654:	e15a      	b.n	800b90c <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	3b01      	subs	r3, #1
 800b65a:	0a5b      	lsrs	r3, r3, #9
 800b65c:	68ba      	ldr	r2, [r7, #8]
 800b65e:	8952      	ldrh	r2, [r2, #10]
 800b660:	3a01      	subs	r2, #1
 800b662:	4013      	ands	r3, r2
 800b664:	69ba      	ldr	r2, [r7, #24]
 800b666:	4413      	add	r3, r2
 800b668:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	699b      	ldr	r3, [r3, #24]
 800b66e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b672:	2b00      	cmp	r3, #0
 800b674:	f000 8148 	beq.w	800b908 <f_lseek+0x406>
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6a1b      	ldr	r3, [r3, #32]
 800b67c:	69ba      	ldr	r2, [r7, #24]
 800b67e:	429a      	cmp	r2, r3
 800b680:	f000 8142 	beq.w	800b908 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	7d1b      	ldrb	r3, [r3, #20]
 800b688:	b25b      	sxtb	r3, r3
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	da18      	bge.n	800b6c0 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	7858      	ldrb	r0, [r3, #1]
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6a1a      	ldr	r2, [r3, #32]
 800b69c:	2301      	movs	r3, #1
 800b69e:	f7fd fe6f 	bl	8009380 <disk_write>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d004      	beq.n	800b6b2 <f_lseek+0x1b0>
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	755a      	strb	r2, [r3, #21]
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	e12c      	b.n	800b90c <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	7d1b      	ldrb	r3, [r3, #20]
 800b6b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6ba:	b2da      	uxtb	r2, r3
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	7858      	ldrb	r0, [r3, #1]
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	69ba      	ldr	r2, [r7, #24]
 800b6ce:	f7fd fe37 	bl	8009340 <disk_read>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d004      	beq.n	800b6e2 <f_lseek+0x1e0>
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2201      	movs	r2, #1
 800b6dc:	755a      	strb	r2, [r3, #21]
 800b6de:	2301      	movs	r3, #1
 800b6e0:	e114      	b.n	800b90c <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	69ba      	ldr	r2, [r7, #24]
 800b6e6:	621a      	str	r2, [r3, #32]
 800b6e8:	e10e      	b.n	800b908 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	68db      	ldr	r3, [r3, #12]
 800b6ee:	683a      	ldr	r2, [r7, #0]
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	d908      	bls.n	800b706 <f_lseek+0x204>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	7d1b      	ldrb	r3, [r3, #20]
 800b6f8:	f003 0302 	and.w	r3, r3, #2
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d102      	bne.n	800b706 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	68db      	ldr	r3, [r3, #12]
 800b704:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	699b      	ldr	r3, [r3, #24]
 800b70a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800b70c:	2300      	movs	r3, #0
 800b70e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b714:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	f000 80a7 	beq.w	800b86c <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	895b      	ldrh	r3, [r3, #10]
 800b722:	025b      	lsls	r3, r3, #9
 800b724:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800b726:	6a3b      	ldr	r3, [r7, #32]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d01b      	beq.n	800b764 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	1e5a      	subs	r2, r3, #1
 800b730:	69fb      	ldr	r3, [r7, #28]
 800b732:	fbb2 f2f3 	udiv	r2, r2, r3
 800b736:	6a3b      	ldr	r3, [r7, #32]
 800b738:	1e59      	subs	r1, r3, #1
 800b73a:	69fb      	ldr	r3, [r7, #28]
 800b73c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800b740:	429a      	cmp	r2, r3
 800b742:	d30f      	bcc.n	800b764 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800b744:	6a3b      	ldr	r3, [r7, #32]
 800b746:	1e5a      	subs	r2, r3, #1
 800b748:	69fb      	ldr	r3, [r7, #28]
 800b74a:	425b      	negs	r3, r3
 800b74c:	401a      	ands	r2, r3
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	699b      	ldr	r3, [r3, #24]
 800b756:	683a      	ldr	r2, [r7, #0]
 800b758:	1ad3      	subs	r3, r2, r3
 800b75a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	69db      	ldr	r3, [r3, #28]
 800b760:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b762:	e022      	b.n	800b7aa <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	689b      	ldr	r3, [r3, #8]
 800b768:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800b76a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d119      	bne.n	800b7a4 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2100      	movs	r1, #0
 800b774:	4618      	mov	r0, r3
 800b776:	f7fe fba2 	bl	8009ebe <create_chain>
 800b77a:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b77c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b77e:	2b01      	cmp	r3, #1
 800b780:	d104      	bne.n	800b78c <f_lseek+0x28a>
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2202      	movs	r2, #2
 800b786:	755a      	strb	r2, [r3, #21]
 800b788:	2302      	movs	r3, #2
 800b78a:	e0bf      	b.n	800b90c <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b78c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b78e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b792:	d104      	bne.n	800b79e <f_lseek+0x29c>
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2201      	movs	r2, #1
 800b798:	755a      	strb	r2, [r3, #21]
 800b79a:	2301      	movs	r3, #1
 800b79c:	e0b6      	b.n	800b90c <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b7a2:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b7a8:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800b7aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d05d      	beq.n	800b86c <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800b7b0:	e03a      	b.n	800b828 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800b7b2:	683a      	ldr	r2, [r7, #0]
 800b7b4:	69fb      	ldr	r3, [r7, #28]
 800b7b6:	1ad3      	subs	r3, r2, r3
 800b7b8:	603b      	str	r3, [r7, #0]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	699a      	ldr	r2, [r3, #24]
 800b7be:	69fb      	ldr	r3, [r7, #28]
 800b7c0:	441a      	add	r2, r3
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	7d1b      	ldrb	r3, [r3, #20]
 800b7ca:	f003 0302 	and.w	r3, r3, #2
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d00b      	beq.n	800b7ea <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f7fe fb71 	bl	8009ebe <create_chain>
 800b7dc:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800b7de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d108      	bne.n	800b7f6 <f_lseek+0x2f4>
							ofs = 0; break;
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	603b      	str	r3, [r7, #0]
 800b7e8:	e022      	b.n	800b830 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f7fe f96f 	bl	8009ad2 <get_fat>
 800b7f4:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b7f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7fc:	d104      	bne.n	800b808 <f_lseek+0x306>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2201      	movs	r2, #1
 800b802:	755a      	strb	r2, [r3, #21]
 800b804:	2301      	movs	r3, #1
 800b806:	e081      	b.n	800b90c <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800b808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b80a:	2b01      	cmp	r3, #1
 800b80c:	d904      	bls.n	800b818 <f_lseek+0x316>
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	695b      	ldr	r3, [r3, #20]
 800b812:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b814:	429a      	cmp	r2, r3
 800b816:	d304      	bcc.n	800b822 <f_lseek+0x320>
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2202      	movs	r2, #2
 800b81c:	755a      	strb	r2, [r3, #21]
 800b81e:	2302      	movs	r3, #2
 800b820:	e074      	b.n	800b90c <f_lseek+0x40a>
					fp->clust = clst;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b826:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800b828:	683a      	ldr	r2, [r7, #0]
 800b82a:	69fb      	ldr	r3, [r7, #28]
 800b82c:	429a      	cmp	r2, r3
 800b82e:	d8c0      	bhi.n	800b7b2 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	699a      	ldr	r2, [r3, #24]
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	441a      	add	r2, r3
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b842:	2b00      	cmp	r3, #0
 800b844:	d012      	beq.n	800b86c <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b84a:	4618      	mov	r0, r3
 800b84c:	f7fe f922 	bl	8009a94 <clust2sect>
 800b850:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800b852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b854:	2b00      	cmp	r3, #0
 800b856:	d104      	bne.n	800b862 <f_lseek+0x360>
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2202      	movs	r2, #2
 800b85c:	755a      	strb	r2, [r3, #21]
 800b85e:	2302      	movs	r3, #2
 800b860:	e054      	b.n	800b90c <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	0a5b      	lsrs	r3, r3, #9
 800b866:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b868:	4413      	add	r3, r2
 800b86a:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	699a      	ldr	r2, [r3, #24]
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	68db      	ldr	r3, [r3, #12]
 800b874:	429a      	cmp	r2, r3
 800b876:	d90a      	bls.n	800b88e <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	699a      	ldr	r2, [r3, #24]
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	7d1b      	ldrb	r3, [r3, #20]
 800b884:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b888:	b2da      	uxtb	r2, r3
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	699b      	ldr	r3, [r3, #24]
 800b892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b896:	2b00      	cmp	r3, #0
 800b898:	d036      	beq.n	800b908 <f_lseek+0x406>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6a1b      	ldr	r3, [r3, #32]
 800b89e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b8a0:	429a      	cmp	r2, r3
 800b8a2:	d031      	beq.n	800b908 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	7d1b      	ldrb	r3, [r3, #20]
 800b8a8:	b25b      	sxtb	r3, r3
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	da18      	bge.n	800b8e0 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	7858      	ldrb	r0, [r3, #1]
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6a1a      	ldr	r2, [r3, #32]
 800b8bc:	2301      	movs	r3, #1
 800b8be:	f7fd fd5f 	bl	8009380 <disk_write>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d004      	beq.n	800b8d2 <f_lseek+0x3d0>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	755a      	strb	r2, [r3, #21]
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	e01c      	b.n	800b90c <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	7d1b      	ldrb	r3, [r3, #20]
 800b8d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b8da:	b2da      	uxtb	r2, r3
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	7858      	ldrb	r0, [r3, #1]
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b8ee:	f7fd fd27 	bl	8009340 <disk_read>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d004      	beq.n	800b902 <f_lseek+0x400>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	755a      	strb	r2, [r3, #21]
 800b8fe:	2301      	movs	r3, #1
 800b900:	e004      	b.n	800b90c <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b906:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800b908:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3740      	adds	r7, #64	@ 0x40
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}

0800b914 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b092      	sub	sp, #72	@ 0x48
 800b918:	af00      	add	r7, sp, #0
 800b91a:	60f8      	str	r0, [r7, #12]
 800b91c:	60b9      	str	r1, [r7, #8]
 800b91e:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800b920:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800b924:	f107 030c 	add.w	r3, r7, #12
 800b928:	2200      	movs	r2, #0
 800b92a:	4618      	mov	r0, r3
 800b92c:	f7fe ff80 	bl	800a830 <find_volume>
 800b930:	4603      	mov	r3, r0
 800b932:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800b936:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	f040 8099 	bne.w	800ba72 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800b940:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800b946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b948:	691a      	ldr	r2, [r3, #16]
 800b94a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b94c:	695b      	ldr	r3, [r3, #20]
 800b94e:	3b02      	subs	r3, #2
 800b950:	429a      	cmp	r2, r3
 800b952:	d804      	bhi.n	800b95e <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800b954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b956:	691a      	ldr	r2, [r3, #16]
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	601a      	str	r2, [r3, #0]
 800b95c:	e089      	b.n	800ba72 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800b95e:	2300      	movs	r3, #0
 800b960:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800b962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	2b01      	cmp	r3, #1
 800b968:	d128      	bne.n	800b9bc <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800b96a:	2302      	movs	r3, #2
 800b96c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b96e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b970:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800b972:	f107 0314 	add.w	r3, r7, #20
 800b976:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b978:	4618      	mov	r0, r3
 800b97a:	f7fe f8aa 	bl	8009ad2 <get_fat>
 800b97e:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800b980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b982:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b986:	d103      	bne.n	800b990 <f_getfree+0x7c>
 800b988:	2301      	movs	r3, #1
 800b98a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b98e:	e063      	b.n	800ba58 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800b990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b992:	2b01      	cmp	r3, #1
 800b994:	d103      	bne.n	800b99e <f_getfree+0x8a>
 800b996:	2302      	movs	r3, #2
 800b998:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b99c:	e05c      	b.n	800ba58 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800b99e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d102      	bne.n	800b9aa <f_getfree+0x96>
 800b9a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b9a6:	3301      	adds	r3, #1
 800b9a8:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800b9aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9ac:	3301      	adds	r3, #1
 800b9ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b9b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9b2:	695b      	ldr	r3, [r3, #20]
 800b9b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d3db      	bcc.n	800b972 <f_getfree+0x5e>
 800b9ba:	e04d      	b.n	800ba58 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800b9bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9be:	695b      	ldr	r3, [r3, #20]
 800b9c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b9c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9c4:	6a1b      	ldr	r3, [r3, #32]
 800b9c6:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800b9d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d113      	bne.n	800b9fe <f_getfree+0xea>
							res = move_window(fs, sect++);
 800b9d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b9d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9da:	1c5a      	adds	r2, r3, #1
 800b9dc:	63ba      	str	r2, [r7, #56]	@ 0x38
 800b9de:	4619      	mov	r1, r3
 800b9e0:	f7fd ffbc 	bl	800995c <move_window>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800b9ea:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d131      	bne.n	800ba56 <f_getfree+0x142>
							p = fs->win;
 800b9f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9f4:	3330      	adds	r3, #48	@ 0x30
 800b9f6:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800b9f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b9fc:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800b9fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba00:	781b      	ldrb	r3, [r3, #0]
 800ba02:	2b02      	cmp	r3, #2
 800ba04:	d10f      	bne.n	800ba26 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800ba06:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ba08:	f7fd fcf8 	bl	80093fc <ld_word>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d102      	bne.n	800ba18 <f_getfree+0x104>
 800ba12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba14:	3301      	adds	r3, #1
 800ba16:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800ba18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba1a:	3302      	adds	r3, #2
 800ba1c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ba1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba20:	3b02      	subs	r3, #2
 800ba22:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba24:	e010      	b.n	800ba48 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800ba26:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ba28:	f7fd fd00 	bl	800942c <ld_dword>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d102      	bne.n	800ba3c <f_getfree+0x128>
 800ba36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba38:	3301      	adds	r3, #1
 800ba3a:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800ba3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba3e:	3304      	adds	r3, #4
 800ba40:	633b      	str	r3, [r7, #48]	@ 0x30
 800ba42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba44:	3b04      	subs	r3, #4
 800ba46:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800ba48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba4a:	3b01      	subs	r3, #1
 800ba4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d1bd      	bne.n	800b9d0 <f_getfree+0xbc>
 800ba54:	e000      	b.n	800ba58 <f_getfree+0x144>
							if (res != FR_OK) break;
 800ba56:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ba5c:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800ba5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ba62:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800ba64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba66:	791a      	ldrb	r2, [r3, #4]
 800ba68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba6a:	f042 0201 	orr.w	r2, r2, #1
 800ba6e:	b2d2      	uxtb	r2, r2
 800ba70:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800ba72:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3748      	adds	r7, #72	@ 0x48
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}
	...

0800ba80 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ba80:	b480      	push	{r7}
 800ba82:	b087      	sub	sp, #28
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	60f8      	str	r0, [r7, #12]
 800ba88:	60b9      	str	r1, [r7, #8]
 800ba8a:	4613      	mov	r3, r2
 800ba8c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ba8e:	2301      	movs	r3, #1
 800ba90:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ba92:	2300      	movs	r3, #0
 800ba94:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ba96:	4b1f      	ldr	r3, [pc, #124]	@ (800bb14 <FATFS_LinkDriverEx+0x94>)
 800ba98:	7a5b      	ldrb	r3, [r3, #9]
 800ba9a:	b2db      	uxtb	r3, r3
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d131      	bne.n	800bb04 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800baa0:	4b1c      	ldr	r3, [pc, #112]	@ (800bb14 <FATFS_LinkDriverEx+0x94>)
 800baa2:	7a5b      	ldrb	r3, [r3, #9]
 800baa4:	b2db      	uxtb	r3, r3
 800baa6:	461a      	mov	r2, r3
 800baa8:	4b1a      	ldr	r3, [pc, #104]	@ (800bb14 <FATFS_LinkDriverEx+0x94>)
 800baaa:	2100      	movs	r1, #0
 800baac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800baae:	4b19      	ldr	r3, [pc, #100]	@ (800bb14 <FATFS_LinkDriverEx+0x94>)
 800bab0:	7a5b      	ldrb	r3, [r3, #9]
 800bab2:	b2db      	uxtb	r3, r3
 800bab4:	4a17      	ldr	r2, [pc, #92]	@ (800bb14 <FATFS_LinkDriverEx+0x94>)
 800bab6:	009b      	lsls	r3, r3, #2
 800bab8:	4413      	add	r3, r2
 800baba:	68fa      	ldr	r2, [r7, #12]
 800babc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800babe:	4b15      	ldr	r3, [pc, #84]	@ (800bb14 <FATFS_LinkDriverEx+0x94>)
 800bac0:	7a5b      	ldrb	r3, [r3, #9]
 800bac2:	b2db      	uxtb	r3, r3
 800bac4:	461a      	mov	r2, r3
 800bac6:	4b13      	ldr	r3, [pc, #76]	@ (800bb14 <FATFS_LinkDriverEx+0x94>)
 800bac8:	4413      	add	r3, r2
 800baca:	79fa      	ldrb	r2, [r7, #7]
 800bacc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bace:	4b11      	ldr	r3, [pc, #68]	@ (800bb14 <FATFS_LinkDriverEx+0x94>)
 800bad0:	7a5b      	ldrb	r3, [r3, #9]
 800bad2:	b2db      	uxtb	r3, r3
 800bad4:	1c5a      	adds	r2, r3, #1
 800bad6:	b2d1      	uxtb	r1, r2
 800bad8:	4a0e      	ldr	r2, [pc, #56]	@ (800bb14 <FATFS_LinkDriverEx+0x94>)
 800bada:	7251      	strb	r1, [r2, #9]
 800badc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bade:	7dbb      	ldrb	r3, [r7, #22]
 800bae0:	3330      	adds	r3, #48	@ 0x30
 800bae2:	b2da      	uxtb	r2, r3
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	3301      	adds	r3, #1
 800baec:	223a      	movs	r2, #58	@ 0x3a
 800baee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	3302      	adds	r3, #2
 800baf4:	222f      	movs	r2, #47	@ 0x2f
 800baf6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	3303      	adds	r3, #3
 800bafc:	2200      	movs	r2, #0
 800bafe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bb00:	2300      	movs	r3, #0
 800bb02:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bb04:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	371c      	adds	r7, #28
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb10:	4770      	bx	lr
 800bb12:	bf00      	nop
 800bb14:	20000bcc 	.word	0x20000bcc

0800bb18 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b082      	sub	sp, #8
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
 800bb20:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bb22:	2200      	movs	r2, #0
 800bb24:	6839      	ldr	r1, [r7, #0]
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f7ff ffaa 	bl	800ba80 <FATFS_LinkDriverEx>
 800bb2c:	4603      	mov	r3, r0
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3708      	adds	r7, #8
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}
	...

0800bb38 <malloc>:
 800bb38:	4b02      	ldr	r3, [pc, #8]	@ (800bb44 <malloc+0xc>)
 800bb3a:	4601      	mov	r1, r0
 800bb3c:	6818      	ldr	r0, [r3, #0]
 800bb3e:	f000 b82d 	b.w	800bb9c <_malloc_r>
 800bb42:	bf00      	nop
 800bb44:	20000030 	.word	0x20000030

0800bb48 <free>:
 800bb48:	4b02      	ldr	r3, [pc, #8]	@ (800bb54 <free+0xc>)
 800bb4a:	4601      	mov	r1, r0
 800bb4c:	6818      	ldr	r0, [r3, #0]
 800bb4e:	f000 bae1 	b.w	800c114 <_free_r>
 800bb52:	bf00      	nop
 800bb54:	20000030 	.word	0x20000030

0800bb58 <sbrk_aligned>:
 800bb58:	b570      	push	{r4, r5, r6, lr}
 800bb5a:	4e0f      	ldr	r6, [pc, #60]	@ (800bb98 <sbrk_aligned+0x40>)
 800bb5c:	460c      	mov	r4, r1
 800bb5e:	6831      	ldr	r1, [r6, #0]
 800bb60:	4605      	mov	r5, r0
 800bb62:	b911      	cbnz	r1, 800bb6a <sbrk_aligned+0x12>
 800bb64:	f000 fa5a 	bl	800c01c <_sbrk_r>
 800bb68:	6030      	str	r0, [r6, #0]
 800bb6a:	4621      	mov	r1, r4
 800bb6c:	4628      	mov	r0, r5
 800bb6e:	f000 fa55 	bl	800c01c <_sbrk_r>
 800bb72:	1c43      	adds	r3, r0, #1
 800bb74:	d103      	bne.n	800bb7e <sbrk_aligned+0x26>
 800bb76:	f04f 34ff 	mov.w	r4, #4294967295
 800bb7a:	4620      	mov	r0, r4
 800bb7c:	bd70      	pop	{r4, r5, r6, pc}
 800bb7e:	1cc4      	adds	r4, r0, #3
 800bb80:	f024 0403 	bic.w	r4, r4, #3
 800bb84:	42a0      	cmp	r0, r4
 800bb86:	d0f8      	beq.n	800bb7a <sbrk_aligned+0x22>
 800bb88:	1a21      	subs	r1, r4, r0
 800bb8a:	4628      	mov	r0, r5
 800bb8c:	f000 fa46 	bl	800c01c <_sbrk_r>
 800bb90:	3001      	adds	r0, #1
 800bb92:	d1f2      	bne.n	800bb7a <sbrk_aligned+0x22>
 800bb94:	e7ef      	b.n	800bb76 <sbrk_aligned+0x1e>
 800bb96:	bf00      	nop
 800bb98:	20000bd8 	.word	0x20000bd8

0800bb9c <_malloc_r>:
 800bb9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bba0:	1ccd      	adds	r5, r1, #3
 800bba2:	f025 0503 	bic.w	r5, r5, #3
 800bba6:	3508      	adds	r5, #8
 800bba8:	2d0c      	cmp	r5, #12
 800bbaa:	bf38      	it	cc
 800bbac:	250c      	movcc	r5, #12
 800bbae:	2d00      	cmp	r5, #0
 800bbb0:	4606      	mov	r6, r0
 800bbb2:	db01      	blt.n	800bbb8 <_malloc_r+0x1c>
 800bbb4:	42a9      	cmp	r1, r5
 800bbb6:	d904      	bls.n	800bbc2 <_malloc_r+0x26>
 800bbb8:	230c      	movs	r3, #12
 800bbba:	6033      	str	r3, [r6, #0]
 800bbbc:	2000      	movs	r0, #0
 800bbbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bc98 <_malloc_r+0xfc>
 800bbc6:	f000 f869 	bl	800bc9c <__malloc_lock>
 800bbca:	f8d8 3000 	ldr.w	r3, [r8]
 800bbce:	461c      	mov	r4, r3
 800bbd0:	bb44      	cbnz	r4, 800bc24 <_malloc_r+0x88>
 800bbd2:	4629      	mov	r1, r5
 800bbd4:	4630      	mov	r0, r6
 800bbd6:	f7ff ffbf 	bl	800bb58 <sbrk_aligned>
 800bbda:	1c43      	adds	r3, r0, #1
 800bbdc:	4604      	mov	r4, r0
 800bbde:	d158      	bne.n	800bc92 <_malloc_r+0xf6>
 800bbe0:	f8d8 4000 	ldr.w	r4, [r8]
 800bbe4:	4627      	mov	r7, r4
 800bbe6:	2f00      	cmp	r7, #0
 800bbe8:	d143      	bne.n	800bc72 <_malloc_r+0xd6>
 800bbea:	2c00      	cmp	r4, #0
 800bbec:	d04b      	beq.n	800bc86 <_malloc_r+0xea>
 800bbee:	6823      	ldr	r3, [r4, #0]
 800bbf0:	4639      	mov	r1, r7
 800bbf2:	4630      	mov	r0, r6
 800bbf4:	eb04 0903 	add.w	r9, r4, r3
 800bbf8:	f000 fa10 	bl	800c01c <_sbrk_r>
 800bbfc:	4581      	cmp	r9, r0
 800bbfe:	d142      	bne.n	800bc86 <_malloc_r+0xea>
 800bc00:	6821      	ldr	r1, [r4, #0]
 800bc02:	1a6d      	subs	r5, r5, r1
 800bc04:	4629      	mov	r1, r5
 800bc06:	4630      	mov	r0, r6
 800bc08:	f7ff ffa6 	bl	800bb58 <sbrk_aligned>
 800bc0c:	3001      	adds	r0, #1
 800bc0e:	d03a      	beq.n	800bc86 <_malloc_r+0xea>
 800bc10:	6823      	ldr	r3, [r4, #0]
 800bc12:	442b      	add	r3, r5
 800bc14:	6023      	str	r3, [r4, #0]
 800bc16:	f8d8 3000 	ldr.w	r3, [r8]
 800bc1a:	685a      	ldr	r2, [r3, #4]
 800bc1c:	bb62      	cbnz	r2, 800bc78 <_malloc_r+0xdc>
 800bc1e:	f8c8 7000 	str.w	r7, [r8]
 800bc22:	e00f      	b.n	800bc44 <_malloc_r+0xa8>
 800bc24:	6822      	ldr	r2, [r4, #0]
 800bc26:	1b52      	subs	r2, r2, r5
 800bc28:	d420      	bmi.n	800bc6c <_malloc_r+0xd0>
 800bc2a:	2a0b      	cmp	r2, #11
 800bc2c:	d917      	bls.n	800bc5e <_malloc_r+0xc2>
 800bc2e:	1961      	adds	r1, r4, r5
 800bc30:	42a3      	cmp	r3, r4
 800bc32:	6025      	str	r5, [r4, #0]
 800bc34:	bf18      	it	ne
 800bc36:	6059      	strne	r1, [r3, #4]
 800bc38:	6863      	ldr	r3, [r4, #4]
 800bc3a:	bf08      	it	eq
 800bc3c:	f8c8 1000 	streq.w	r1, [r8]
 800bc40:	5162      	str	r2, [r4, r5]
 800bc42:	604b      	str	r3, [r1, #4]
 800bc44:	4630      	mov	r0, r6
 800bc46:	f000 f82f 	bl	800bca8 <__malloc_unlock>
 800bc4a:	f104 000b 	add.w	r0, r4, #11
 800bc4e:	1d23      	adds	r3, r4, #4
 800bc50:	f020 0007 	bic.w	r0, r0, #7
 800bc54:	1ac2      	subs	r2, r0, r3
 800bc56:	bf1c      	itt	ne
 800bc58:	1a1b      	subne	r3, r3, r0
 800bc5a:	50a3      	strne	r3, [r4, r2]
 800bc5c:	e7af      	b.n	800bbbe <_malloc_r+0x22>
 800bc5e:	6862      	ldr	r2, [r4, #4]
 800bc60:	42a3      	cmp	r3, r4
 800bc62:	bf0c      	ite	eq
 800bc64:	f8c8 2000 	streq.w	r2, [r8]
 800bc68:	605a      	strne	r2, [r3, #4]
 800bc6a:	e7eb      	b.n	800bc44 <_malloc_r+0xa8>
 800bc6c:	4623      	mov	r3, r4
 800bc6e:	6864      	ldr	r4, [r4, #4]
 800bc70:	e7ae      	b.n	800bbd0 <_malloc_r+0x34>
 800bc72:	463c      	mov	r4, r7
 800bc74:	687f      	ldr	r7, [r7, #4]
 800bc76:	e7b6      	b.n	800bbe6 <_malloc_r+0x4a>
 800bc78:	461a      	mov	r2, r3
 800bc7a:	685b      	ldr	r3, [r3, #4]
 800bc7c:	42a3      	cmp	r3, r4
 800bc7e:	d1fb      	bne.n	800bc78 <_malloc_r+0xdc>
 800bc80:	2300      	movs	r3, #0
 800bc82:	6053      	str	r3, [r2, #4]
 800bc84:	e7de      	b.n	800bc44 <_malloc_r+0xa8>
 800bc86:	230c      	movs	r3, #12
 800bc88:	6033      	str	r3, [r6, #0]
 800bc8a:	4630      	mov	r0, r6
 800bc8c:	f000 f80c 	bl	800bca8 <__malloc_unlock>
 800bc90:	e794      	b.n	800bbbc <_malloc_r+0x20>
 800bc92:	6005      	str	r5, [r0, #0]
 800bc94:	e7d6      	b.n	800bc44 <_malloc_r+0xa8>
 800bc96:	bf00      	nop
 800bc98:	20000bdc 	.word	0x20000bdc

0800bc9c <__malloc_lock>:
 800bc9c:	4801      	ldr	r0, [pc, #4]	@ (800bca4 <__malloc_lock+0x8>)
 800bc9e:	f000 ba0a 	b.w	800c0b6 <__retarget_lock_acquire_recursive>
 800bca2:	bf00      	nop
 800bca4:	20000d20 	.word	0x20000d20

0800bca8 <__malloc_unlock>:
 800bca8:	4801      	ldr	r0, [pc, #4]	@ (800bcb0 <__malloc_unlock+0x8>)
 800bcaa:	f000 ba05 	b.w	800c0b8 <__retarget_lock_release_recursive>
 800bcae:	bf00      	nop
 800bcb0:	20000d20 	.word	0x20000d20

0800bcb4 <rand>:
 800bcb4:	4b16      	ldr	r3, [pc, #88]	@ (800bd10 <rand+0x5c>)
 800bcb6:	b510      	push	{r4, lr}
 800bcb8:	681c      	ldr	r4, [r3, #0]
 800bcba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800bcbc:	b9b3      	cbnz	r3, 800bcec <rand+0x38>
 800bcbe:	2018      	movs	r0, #24
 800bcc0:	f7ff ff3a 	bl	800bb38 <malloc>
 800bcc4:	4602      	mov	r2, r0
 800bcc6:	6320      	str	r0, [r4, #48]	@ 0x30
 800bcc8:	b920      	cbnz	r0, 800bcd4 <rand+0x20>
 800bcca:	4b12      	ldr	r3, [pc, #72]	@ (800bd14 <rand+0x60>)
 800bccc:	4812      	ldr	r0, [pc, #72]	@ (800bd18 <rand+0x64>)
 800bcce:	2152      	movs	r1, #82	@ 0x52
 800bcd0:	f000 fa02 	bl	800c0d8 <__assert_func>
 800bcd4:	4911      	ldr	r1, [pc, #68]	@ (800bd1c <rand+0x68>)
 800bcd6:	4b12      	ldr	r3, [pc, #72]	@ (800bd20 <rand+0x6c>)
 800bcd8:	e9c0 1300 	strd	r1, r3, [r0]
 800bcdc:	4b11      	ldr	r3, [pc, #68]	@ (800bd24 <rand+0x70>)
 800bcde:	6083      	str	r3, [r0, #8]
 800bce0:	230b      	movs	r3, #11
 800bce2:	8183      	strh	r3, [r0, #12]
 800bce4:	2100      	movs	r1, #0
 800bce6:	2001      	movs	r0, #1
 800bce8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800bcec:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800bcee:	480e      	ldr	r0, [pc, #56]	@ (800bd28 <rand+0x74>)
 800bcf0:	690b      	ldr	r3, [r1, #16]
 800bcf2:	694c      	ldr	r4, [r1, #20]
 800bcf4:	4a0d      	ldr	r2, [pc, #52]	@ (800bd2c <rand+0x78>)
 800bcf6:	4358      	muls	r0, r3
 800bcf8:	fb02 0004 	mla	r0, r2, r4, r0
 800bcfc:	fba3 3202 	umull	r3, r2, r3, r2
 800bd00:	3301      	adds	r3, #1
 800bd02:	eb40 0002 	adc.w	r0, r0, r2
 800bd06:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800bd0a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800bd0e:	bd10      	pop	{r4, pc}
 800bd10:	20000030 	.word	0x20000030
 800bd14:	0800d17c 	.word	0x0800d17c
 800bd18:	0800d193 	.word	0x0800d193
 800bd1c:	abcd330e 	.word	0xabcd330e
 800bd20:	e66d1234 	.word	0xe66d1234
 800bd24:	0005deec 	.word	0x0005deec
 800bd28:	5851f42d 	.word	0x5851f42d
 800bd2c:	4c957f2d 	.word	0x4c957f2d

0800bd30 <std>:
 800bd30:	2300      	movs	r3, #0
 800bd32:	b510      	push	{r4, lr}
 800bd34:	4604      	mov	r4, r0
 800bd36:	e9c0 3300 	strd	r3, r3, [r0]
 800bd3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd3e:	6083      	str	r3, [r0, #8]
 800bd40:	8181      	strh	r1, [r0, #12]
 800bd42:	6643      	str	r3, [r0, #100]	@ 0x64
 800bd44:	81c2      	strh	r2, [r0, #14]
 800bd46:	6183      	str	r3, [r0, #24]
 800bd48:	4619      	mov	r1, r3
 800bd4a:	2208      	movs	r2, #8
 800bd4c:	305c      	adds	r0, #92	@ 0x5c
 800bd4e:	f000 f928 	bl	800bfa2 <memset>
 800bd52:	4b0d      	ldr	r3, [pc, #52]	@ (800bd88 <std+0x58>)
 800bd54:	6263      	str	r3, [r4, #36]	@ 0x24
 800bd56:	4b0d      	ldr	r3, [pc, #52]	@ (800bd8c <std+0x5c>)
 800bd58:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bd5a:	4b0d      	ldr	r3, [pc, #52]	@ (800bd90 <std+0x60>)
 800bd5c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bd5e:	4b0d      	ldr	r3, [pc, #52]	@ (800bd94 <std+0x64>)
 800bd60:	6323      	str	r3, [r4, #48]	@ 0x30
 800bd62:	4b0d      	ldr	r3, [pc, #52]	@ (800bd98 <std+0x68>)
 800bd64:	6224      	str	r4, [r4, #32]
 800bd66:	429c      	cmp	r4, r3
 800bd68:	d006      	beq.n	800bd78 <std+0x48>
 800bd6a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bd6e:	4294      	cmp	r4, r2
 800bd70:	d002      	beq.n	800bd78 <std+0x48>
 800bd72:	33d0      	adds	r3, #208	@ 0xd0
 800bd74:	429c      	cmp	r4, r3
 800bd76:	d105      	bne.n	800bd84 <std+0x54>
 800bd78:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bd7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd80:	f000 b998 	b.w	800c0b4 <__retarget_lock_init_recursive>
 800bd84:	bd10      	pop	{r4, pc}
 800bd86:	bf00      	nop
 800bd88:	0800bf1d 	.word	0x0800bf1d
 800bd8c:	0800bf3f 	.word	0x0800bf3f
 800bd90:	0800bf77 	.word	0x0800bf77
 800bd94:	0800bf9b 	.word	0x0800bf9b
 800bd98:	20000be0 	.word	0x20000be0

0800bd9c <stdio_exit_handler>:
 800bd9c:	4a02      	ldr	r2, [pc, #8]	@ (800bda8 <stdio_exit_handler+0xc>)
 800bd9e:	4903      	ldr	r1, [pc, #12]	@ (800bdac <stdio_exit_handler+0x10>)
 800bda0:	4803      	ldr	r0, [pc, #12]	@ (800bdb0 <stdio_exit_handler+0x14>)
 800bda2:	f000 b869 	b.w	800be78 <_fwalk_sglue>
 800bda6:	bf00      	nop
 800bda8:	20000024 	.word	0x20000024
 800bdac:	0800c87d 	.word	0x0800c87d
 800bdb0:	20000034 	.word	0x20000034

0800bdb4 <cleanup_stdio>:
 800bdb4:	6841      	ldr	r1, [r0, #4]
 800bdb6:	4b0c      	ldr	r3, [pc, #48]	@ (800bde8 <cleanup_stdio+0x34>)
 800bdb8:	4299      	cmp	r1, r3
 800bdba:	b510      	push	{r4, lr}
 800bdbc:	4604      	mov	r4, r0
 800bdbe:	d001      	beq.n	800bdc4 <cleanup_stdio+0x10>
 800bdc0:	f000 fd5c 	bl	800c87c <_fflush_r>
 800bdc4:	68a1      	ldr	r1, [r4, #8]
 800bdc6:	4b09      	ldr	r3, [pc, #36]	@ (800bdec <cleanup_stdio+0x38>)
 800bdc8:	4299      	cmp	r1, r3
 800bdca:	d002      	beq.n	800bdd2 <cleanup_stdio+0x1e>
 800bdcc:	4620      	mov	r0, r4
 800bdce:	f000 fd55 	bl	800c87c <_fflush_r>
 800bdd2:	68e1      	ldr	r1, [r4, #12]
 800bdd4:	4b06      	ldr	r3, [pc, #24]	@ (800bdf0 <cleanup_stdio+0x3c>)
 800bdd6:	4299      	cmp	r1, r3
 800bdd8:	d004      	beq.n	800bde4 <cleanup_stdio+0x30>
 800bdda:	4620      	mov	r0, r4
 800bddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bde0:	f000 bd4c 	b.w	800c87c <_fflush_r>
 800bde4:	bd10      	pop	{r4, pc}
 800bde6:	bf00      	nop
 800bde8:	20000be0 	.word	0x20000be0
 800bdec:	20000c48 	.word	0x20000c48
 800bdf0:	20000cb0 	.word	0x20000cb0

0800bdf4 <global_stdio_init.part.0>:
 800bdf4:	b510      	push	{r4, lr}
 800bdf6:	4b0b      	ldr	r3, [pc, #44]	@ (800be24 <global_stdio_init.part.0+0x30>)
 800bdf8:	4c0b      	ldr	r4, [pc, #44]	@ (800be28 <global_stdio_init.part.0+0x34>)
 800bdfa:	4a0c      	ldr	r2, [pc, #48]	@ (800be2c <global_stdio_init.part.0+0x38>)
 800bdfc:	601a      	str	r2, [r3, #0]
 800bdfe:	4620      	mov	r0, r4
 800be00:	2200      	movs	r2, #0
 800be02:	2104      	movs	r1, #4
 800be04:	f7ff ff94 	bl	800bd30 <std>
 800be08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800be0c:	2201      	movs	r2, #1
 800be0e:	2109      	movs	r1, #9
 800be10:	f7ff ff8e 	bl	800bd30 <std>
 800be14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800be18:	2202      	movs	r2, #2
 800be1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be1e:	2112      	movs	r1, #18
 800be20:	f7ff bf86 	b.w	800bd30 <std>
 800be24:	20000d18 	.word	0x20000d18
 800be28:	20000be0 	.word	0x20000be0
 800be2c:	0800bd9d 	.word	0x0800bd9d

0800be30 <__sfp_lock_acquire>:
 800be30:	4801      	ldr	r0, [pc, #4]	@ (800be38 <__sfp_lock_acquire+0x8>)
 800be32:	f000 b940 	b.w	800c0b6 <__retarget_lock_acquire_recursive>
 800be36:	bf00      	nop
 800be38:	20000d21 	.word	0x20000d21

0800be3c <__sfp_lock_release>:
 800be3c:	4801      	ldr	r0, [pc, #4]	@ (800be44 <__sfp_lock_release+0x8>)
 800be3e:	f000 b93b 	b.w	800c0b8 <__retarget_lock_release_recursive>
 800be42:	bf00      	nop
 800be44:	20000d21 	.word	0x20000d21

0800be48 <__sinit>:
 800be48:	b510      	push	{r4, lr}
 800be4a:	4604      	mov	r4, r0
 800be4c:	f7ff fff0 	bl	800be30 <__sfp_lock_acquire>
 800be50:	6a23      	ldr	r3, [r4, #32]
 800be52:	b11b      	cbz	r3, 800be5c <__sinit+0x14>
 800be54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be58:	f7ff bff0 	b.w	800be3c <__sfp_lock_release>
 800be5c:	4b04      	ldr	r3, [pc, #16]	@ (800be70 <__sinit+0x28>)
 800be5e:	6223      	str	r3, [r4, #32]
 800be60:	4b04      	ldr	r3, [pc, #16]	@ (800be74 <__sinit+0x2c>)
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d1f5      	bne.n	800be54 <__sinit+0xc>
 800be68:	f7ff ffc4 	bl	800bdf4 <global_stdio_init.part.0>
 800be6c:	e7f2      	b.n	800be54 <__sinit+0xc>
 800be6e:	bf00      	nop
 800be70:	0800bdb5 	.word	0x0800bdb5
 800be74:	20000d18 	.word	0x20000d18

0800be78 <_fwalk_sglue>:
 800be78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be7c:	4607      	mov	r7, r0
 800be7e:	4688      	mov	r8, r1
 800be80:	4614      	mov	r4, r2
 800be82:	2600      	movs	r6, #0
 800be84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800be88:	f1b9 0901 	subs.w	r9, r9, #1
 800be8c:	d505      	bpl.n	800be9a <_fwalk_sglue+0x22>
 800be8e:	6824      	ldr	r4, [r4, #0]
 800be90:	2c00      	cmp	r4, #0
 800be92:	d1f7      	bne.n	800be84 <_fwalk_sglue+0xc>
 800be94:	4630      	mov	r0, r6
 800be96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be9a:	89ab      	ldrh	r3, [r5, #12]
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d907      	bls.n	800beb0 <_fwalk_sglue+0x38>
 800bea0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bea4:	3301      	adds	r3, #1
 800bea6:	d003      	beq.n	800beb0 <_fwalk_sglue+0x38>
 800bea8:	4629      	mov	r1, r5
 800beaa:	4638      	mov	r0, r7
 800beac:	47c0      	blx	r8
 800beae:	4306      	orrs	r6, r0
 800beb0:	3568      	adds	r5, #104	@ 0x68
 800beb2:	e7e9      	b.n	800be88 <_fwalk_sglue+0x10>

0800beb4 <sniprintf>:
 800beb4:	b40c      	push	{r2, r3}
 800beb6:	b530      	push	{r4, r5, lr}
 800beb8:	4b17      	ldr	r3, [pc, #92]	@ (800bf18 <sniprintf+0x64>)
 800beba:	1e0c      	subs	r4, r1, #0
 800bebc:	681d      	ldr	r5, [r3, #0]
 800bebe:	b09d      	sub	sp, #116	@ 0x74
 800bec0:	da08      	bge.n	800bed4 <sniprintf+0x20>
 800bec2:	238b      	movs	r3, #139	@ 0x8b
 800bec4:	602b      	str	r3, [r5, #0]
 800bec6:	f04f 30ff 	mov.w	r0, #4294967295
 800beca:	b01d      	add	sp, #116	@ 0x74
 800becc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bed0:	b002      	add	sp, #8
 800bed2:	4770      	bx	lr
 800bed4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bed8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bedc:	bf14      	ite	ne
 800bede:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bee2:	4623      	moveq	r3, r4
 800bee4:	9304      	str	r3, [sp, #16]
 800bee6:	9307      	str	r3, [sp, #28]
 800bee8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800beec:	9002      	str	r0, [sp, #8]
 800beee:	9006      	str	r0, [sp, #24]
 800bef0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bef4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bef6:	ab21      	add	r3, sp, #132	@ 0x84
 800bef8:	a902      	add	r1, sp, #8
 800befa:	4628      	mov	r0, r5
 800befc:	9301      	str	r3, [sp, #4]
 800befe:	f000 f9af 	bl	800c260 <_svfiprintf_r>
 800bf02:	1c43      	adds	r3, r0, #1
 800bf04:	bfbc      	itt	lt
 800bf06:	238b      	movlt	r3, #139	@ 0x8b
 800bf08:	602b      	strlt	r3, [r5, #0]
 800bf0a:	2c00      	cmp	r4, #0
 800bf0c:	d0dd      	beq.n	800beca <sniprintf+0x16>
 800bf0e:	9b02      	ldr	r3, [sp, #8]
 800bf10:	2200      	movs	r2, #0
 800bf12:	701a      	strb	r2, [r3, #0]
 800bf14:	e7d9      	b.n	800beca <sniprintf+0x16>
 800bf16:	bf00      	nop
 800bf18:	20000030 	.word	0x20000030

0800bf1c <__sread>:
 800bf1c:	b510      	push	{r4, lr}
 800bf1e:	460c      	mov	r4, r1
 800bf20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf24:	f000 f868 	bl	800bff8 <_read_r>
 800bf28:	2800      	cmp	r0, #0
 800bf2a:	bfab      	itete	ge
 800bf2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bf2e:	89a3      	ldrhlt	r3, [r4, #12]
 800bf30:	181b      	addge	r3, r3, r0
 800bf32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bf36:	bfac      	ite	ge
 800bf38:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bf3a:	81a3      	strhlt	r3, [r4, #12]
 800bf3c:	bd10      	pop	{r4, pc}

0800bf3e <__swrite>:
 800bf3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf42:	461f      	mov	r7, r3
 800bf44:	898b      	ldrh	r3, [r1, #12]
 800bf46:	05db      	lsls	r3, r3, #23
 800bf48:	4605      	mov	r5, r0
 800bf4a:	460c      	mov	r4, r1
 800bf4c:	4616      	mov	r6, r2
 800bf4e:	d505      	bpl.n	800bf5c <__swrite+0x1e>
 800bf50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf54:	2302      	movs	r3, #2
 800bf56:	2200      	movs	r2, #0
 800bf58:	f000 f83c 	bl	800bfd4 <_lseek_r>
 800bf5c:	89a3      	ldrh	r3, [r4, #12]
 800bf5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bf66:	81a3      	strh	r3, [r4, #12]
 800bf68:	4632      	mov	r2, r6
 800bf6a:	463b      	mov	r3, r7
 800bf6c:	4628      	mov	r0, r5
 800bf6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf72:	f000 b863 	b.w	800c03c <_write_r>

0800bf76 <__sseek>:
 800bf76:	b510      	push	{r4, lr}
 800bf78:	460c      	mov	r4, r1
 800bf7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf7e:	f000 f829 	bl	800bfd4 <_lseek_r>
 800bf82:	1c43      	adds	r3, r0, #1
 800bf84:	89a3      	ldrh	r3, [r4, #12]
 800bf86:	bf15      	itete	ne
 800bf88:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bf8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bf8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bf92:	81a3      	strheq	r3, [r4, #12]
 800bf94:	bf18      	it	ne
 800bf96:	81a3      	strhne	r3, [r4, #12]
 800bf98:	bd10      	pop	{r4, pc}

0800bf9a <__sclose>:
 800bf9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf9e:	f000 b809 	b.w	800bfb4 <_close_r>

0800bfa2 <memset>:
 800bfa2:	4402      	add	r2, r0
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	d100      	bne.n	800bfac <memset+0xa>
 800bfaa:	4770      	bx	lr
 800bfac:	f803 1b01 	strb.w	r1, [r3], #1
 800bfb0:	e7f9      	b.n	800bfa6 <memset+0x4>
	...

0800bfb4 <_close_r>:
 800bfb4:	b538      	push	{r3, r4, r5, lr}
 800bfb6:	4d06      	ldr	r5, [pc, #24]	@ (800bfd0 <_close_r+0x1c>)
 800bfb8:	2300      	movs	r3, #0
 800bfba:	4604      	mov	r4, r0
 800bfbc:	4608      	mov	r0, r1
 800bfbe:	602b      	str	r3, [r5, #0]
 800bfc0:	f7f5 f988 	bl	80012d4 <_close>
 800bfc4:	1c43      	adds	r3, r0, #1
 800bfc6:	d102      	bne.n	800bfce <_close_r+0x1a>
 800bfc8:	682b      	ldr	r3, [r5, #0]
 800bfca:	b103      	cbz	r3, 800bfce <_close_r+0x1a>
 800bfcc:	6023      	str	r3, [r4, #0]
 800bfce:	bd38      	pop	{r3, r4, r5, pc}
 800bfd0:	20000d1c 	.word	0x20000d1c

0800bfd4 <_lseek_r>:
 800bfd4:	b538      	push	{r3, r4, r5, lr}
 800bfd6:	4d07      	ldr	r5, [pc, #28]	@ (800bff4 <_lseek_r+0x20>)
 800bfd8:	4604      	mov	r4, r0
 800bfda:	4608      	mov	r0, r1
 800bfdc:	4611      	mov	r1, r2
 800bfde:	2200      	movs	r2, #0
 800bfe0:	602a      	str	r2, [r5, #0]
 800bfe2:	461a      	mov	r2, r3
 800bfe4:	f7f5 f99d 	bl	8001322 <_lseek>
 800bfe8:	1c43      	adds	r3, r0, #1
 800bfea:	d102      	bne.n	800bff2 <_lseek_r+0x1e>
 800bfec:	682b      	ldr	r3, [r5, #0]
 800bfee:	b103      	cbz	r3, 800bff2 <_lseek_r+0x1e>
 800bff0:	6023      	str	r3, [r4, #0]
 800bff2:	bd38      	pop	{r3, r4, r5, pc}
 800bff4:	20000d1c 	.word	0x20000d1c

0800bff8 <_read_r>:
 800bff8:	b538      	push	{r3, r4, r5, lr}
 800bffa:	4d07      	ldr	r5, [pc, #28]	@ (800c018 <_read_r+0x20>)
 800bffc:	4604      	mov	r4, r0
 800bffe:	4608      	mov	r0, r1
 800c000:	4611      	mov	r1, r2
 800c002:	2200      	movs	r2, #0
 800c004:	602a      	str	r2, [r5, #0]
 800c006:	461a      	mov	r2, r3
 800c008:	f7f5 f92b 	bl	8001262 <_read>
 800c00c:	1c43      	adds	r3, r0, #1
 800c00e:	d102      	bne.n	800c016 <_read_r+0x1e>
 800c010:	682b      	ldr	r3, [r5, #0]
 800c012:	b103      	cbz	r3, 800c016 <_read_r+0x1e>
 800c014:	6023      	str	r3, [r4, #0]
 800c016:	bd38      	pop	{r3, r4, r5, pc}
 800c018:	20000d1c 	.word	0x20000d1c

0800c01c <_sbrk_r>:
 800c01c:	b538      	push	{r3, r4, r5, lr}
 800c01e:	4d06      	ldr	r5, [pc, #24]	@ (800c038 <_sbrk_r+0x1c>)
 800c020:	2300      	movs	r3, #0
 800c022:	4604      	mov	r4, r0
 800c024:	4608      	mov	r0, r1
 800c026:	602b      	str	r3, [r5, #0]
 800c028:	f7f5 f988 	bl	800133c <_sbrk>
 800c02c:	1c43      	adds	r3, r0, #1
 800c02e:	d102      	bne.n	800c036 <_sbrk_r+0x1a>
 800c030:	682b      	ldr	r3, [r5, #0]
 800c032:	b103      	cbz	r3, 800c036 <_sbrk_r+0x1a>
 800c034:	6023      	str	r3, [r4, #0]
 800c036:	bd38      	pop	{r3, r4, r5, pc}
 800c038:	20000d1c 	.word	0x20000d1c

0800c03c <_write_r>:
 800c03c:	b538      	push	{r3, r4, r5, lr}
 800c03e:	4d07      	ldr	r5, [pc, #28]	@ (800c05c <_write_r+0x20>)
 800c040:	4604      	mov	r4, r0
 800c042:	4608      	mov	r0, r1
 800c044:	4611      	mov	r1, r2
 800c046:	2200      	movs	r2, #0
 800c048:	602a      	str	r2, [r5, #0]
 800c04a:	461a      	mov	r2, r3
 800c04c:	f7f5 f926 	bl	800129c <_write>
 800c050:	1c43      	adds	r3, r0, #1
 800c052:	d102      	bne.n	800c05a <_write_r+0x1e>
 800c054:	682b      	ldr	r3, [r5, #0]
 800c056:	b103      	cbz	r3, 800c05a <_write_r+0x1e>
 800c058:	6023      	str	r3, [r4, #0]
 800c05a:	bd38      	pop	{r3, r4, r5, pc}
 800c05c:	20000d1c 	.word	0x20000d1c

0800c060 <__errno>:
 800c060:	4b01      	ldr	r3, [pc, #4]	@ (800c068 <__errno+0x8>)
 800c062:	6818      	ldr	r0, [r3, #0]
 800c064:	4770      	bx	lr
 800c066:	bf00      	nop
 800c068:	20000030 	.word	0x20000030

0800c06c <__libc_init_array>:
 800c06c:	b570      	push	{r4, r5, r6, lr}
 800c06e:	4d0d      	ldr	r5, [pc, #52]	@ (800c0a4 <__libc_init_array+0x38>)
 800c070:	4c0d      	ldr	r4, [pc, #52]	@ (800c0a8 <__libc_init_array+0x3c>)
 800c072:	1b64      	subs	r4, r4, r5
 800c074:	10a4      	asrs	r4, r4, #2
 800c076:	2600      	movs	r6, #0
 800c078:	42a6      	cmp	r6, r4
 800c07a:	d109      	bne.n	800c090 <__libc_init_array+0x24>
 800c07c:	4d0b      	ldr	r5, [pc, #44]	@ (800c0ac <__libc_init_array+0x40>)
 800c07e:	4c0c      	ldr	r4, [pc, #48]	@ (800c0b0 <__libc_init_array+0x44>)
 800c080:	f000 ff2a 	bl	800ced8 <_init>
 800c084:	1b64      	subs	r4, r4, r5
 800c086:	10a4      	asrs	r4, r4, #2
 800c088:	2600      	movs	r6, #0
 800c08a:	42a6      	cmp	r6, r4
 800c08c:	d105      	bne.n	800c09a <__libc_init_array+0x2e>
 800c08e:	bd70      	pop	{r4, r5, r6, pc}
 800c090:	f855 3b04 	ldr.w	r3, [r5], #4
 800c094:	4798      	blx	r3
 800c096:	3601      	adds	r6, #1
 800c098:	e7ee      	b.n	800c078 <__libc_init_array+0xc>
 800c09a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c09e:	4798      	blx	r3
 800c0a0:	3601      	adds	r6, #1
 800c0a2:	e7f2      	b.n	800c08a <__libc_init_array+0x1e>
 800c0a4:	0800d264 	.word	0x0800d264
 800c0a8:	0800d264 	.word	0x0800d264
 800c0ac:	0800d264 	.word	0x0800d264
 800c0b0:	0800d268 	.word	0x0800d268

0800c0b4 <__retarget_lock_init_recursive>:
 800c0b4:	4770      	bx	lr

0800c0b6 <__retarget_lock_acquire_recursive>:
 800c0b6:	4770      	bx	lr

0800c0b8 <__retarget_lock_release_recursive>:
 800c0b8:	4770      	bx	lr

0800c0ba <memcpy>:
 800c0ba:	440a      	add	r2, r1
 800c0bc:	4291      	cmp	r1, r2
 800c0be:	f100 33ff 	add.w	r3, r0, #4294967295
 800c0c2:	d100      	bne.n	800c0c6 <memcpy+0xc>
 800c0c4:	4770      	bx	lr
 800c0c6:	b510      	push	{r4, lr}
 800c0c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c0d0:	4291      	cmp	r1, r2
 800c0d2:	d1f9      	bne.n	800c0c8 <memcpy+0xe>
 800c0d4:	bd10      	pop	{r4, pc}
	...

0800c0d8 <__assert_func>:
 800c0d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c0da:	4614      	mov	r4, r2
 800c0dc:	461a      	mov	r2, r3
 800c0de:	4b09      	ldr	r3, [pc, #36]	@ (800c104 <__assert_func+0x2c>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	4605      	mov	r5, r0
 800c0e4:	68d8      	ldr	r0, [r3, #12]
 800c0e6:	b954      	cbnz	r4, 800c0fe <__assert_func+0x26>
 800c0e8:	4b07      	ldr	r3, [pc, #28]	@ (800c108 <__assert_func+0x30>)
 800c0ea:	461c      	mov	r4, r3
 800c0ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c0f0:	9100      	str	r1, [sp, #0]
 800c0f2:	462b      	mov	r3, r5
 800c0f4:	4905      	ldr	r1, [pc, #20]	@ (800c10c <__assert_func+0x34>)
 800c0f6:	f000 fbe9 	bl	800c8cc <fiprintf>
 800c0fa:	f000 fc13 	bl	800c924 <abort>
 800c0fe:	4b04      	ldr	r3, [pc, #16]	@ (800c110 <__assert_func+0x38>)
 800c100:	e7f4      	b.n	800c0ec <__assert_func+0x14>
 800c102:	bf00      	nop
 800c104:	20000030 	.word	0x20000030
 800c108:	0800d226 	.word	0x0800d226
 800c10c:	0800d1f8 	.word	0x0800d1f8
 800c110:	0800d1eb 	.word	0x0800d1eb

0800c114 <_free_r>:
 800c114:	b538      	push	{r3, r4, r5, lr}
 800c116:	4605      	mov	r5, r0
 800c118:	2900      	cmp	r1, #0
 800c11a:	d041      	beq.n	800c1a0 <_free_r+0x8c>
 800c11c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c120:	1f0c      	subs	r4, r1, #4
 800c122:	2b00      	cmp	r3, #0
 800c124:	bfb8      	it	lt
 800c126:	18e4      	addlt	r4, r4, r3
 800c128:	f7ff fdb8 	bl	800bc9c <__malloc_lock>
 800c12c:	4a1d      	ldr	r2, [pc, #116]	@ (800c1a4 <_free_r+0x90>)
 800c12e:	6813      	ldr	r3, [r2, #0]
 800c130:	b933      	cbnz	r3, 800c140 <_free_r+0x2c>
 800c132:	6063      	str	r3, [r4, #4]
 800c134:	6014      	str	r4, [r2, #0]
 800c136:	4628      	mov	r0, r5
 800c138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c13c:	f7ff bdb4 	b.w	800bca8 <__malloc_unlock>
 800c140:	42a3      	cmp	r3, r4
 800c142:	d908      	bls.n	800c156 <_free_r+0x42>
 800c144:	6820      	ldr	r0, [r4, #0]
 800c146:	1821      	adds	r1, r4, r0
 800c148:	428b      	cmp	r3, r1
 800c14a:	bf01      	itttt	eq
 800c14c:	6819      	ldreq	r1, [r3, #0]
 800c14e:	685b      	ldreq	r3, [r3, #4]
 800c150:	1809      	addeq	r1, r1, r0
 800c152:	6021      	streq	r1, [r4, #0]
 800c154:	e7ed      	b.n	800c132 <_free_r+0x1e>
 800c156:	461a      	mov	r2, r3
 800c158:	685b      	ldr	r3, [r3, #4]
 800c15a:	b10b      	cbz	r3, 800c160 <_free_r+0x4c>
 800c15c:	42a3      	cmp	r3, r4
 800c15e:	d9fa      	bls.n	800c156 <_free_r+0x42>
 800c160:	6811      	ldr	r1, [r2, #0]
 800c162:	1850      	adds	r0, r2, r1
 800c164:	42a0      	cmp	r0, r4
 800c166:	d10b      	bne.n	800c180 <_free_r+0x6c>
 800c168:	6820      	ldr	r0, [r4, #0]
 800c16a:	4401      	add	r1, r0
 800c16c:	1850      	adds	r0, r2, r1
 800c16e:	4283      	cmp	r3, r0
 800c170:	6011      	str	r1, [r2, #0]
 800c172:	d1e0      	bne.n	800c136 <_free_r+0x22>
 800c174:	6818      	ldr	r0, [r3, #0]
 800c176:	685b      	ldr	r3, [r3, #4]
 800c178:	6053      	str	r3, [r2, #4]
 800c17a:	4408      	add	r0, r1
 800c17c:	6010      	str	r0, [r2, #0]
 800c17e:	e7da      	b.n	800c136 <_free_r+0x22>
 800c180:	d902      	bls.n	800c188 <_free_r+0x74>
 800c182:	230c      	movs	r3, #12
 800c184:	602b      	str	r3, [r5, #0]
 800c186:	e7d6      	b.n	800c136 <_free_r+0x22>
 800c188:	6820      	ldr	r0, [r4, #0]
 800c18a:	1821      	adds	r1, r4, r0
 800c18c:	428b      	cmp	r3, r1
 800c18e:	bf04      	itt	eq
 800c190:	6819      	ldreq	r1, [r3, #0]
 800c192:	685b      	ldreq	r3, [r3, #4]
 800c194:	6063      	str	r3, [r4, #4]
 800c196:	bf04      	itt	eq
 800c198:	1809      	addeq	r1, r1, r0
 800c19a:	6021      	streq	r1, [r4, #0]
 800c19c:	6054      	str	r4, [r2, #4]
 800c19e:	e7ca      	b.n	800c136 <_free_r+0x22>
 800c1a0:	bd38      	pop	{r3, r4, r5, pc}
 800c1a2:	bf00      	nop
 800c1a4:	20000bdc 	.word	0x20000bdc

0800c1a8 <__ssputs_r>:
 800c1a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1ac:	688e      	ldr	r6, [r1, #8]
 800c1ae:	461f      	mov	r7, r3
 800c1b0:	42be      	cmp	r6, r7
 800c1b2:	680b      	ldr	r3, [r1, #0]
 800c1b4:	4682      	mov	sl, r0
 800c1b6:	460c      	mov	r4, r1
 800c1b8:	4690      	mov	r8, r2
 800c1ba:	d82d      	bhi.n	800c218 <__ssputs_r+0x70>
 800c1bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c1c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c1c4:	d026      	beq.n	800c214 <__ssputs_r+0x6c>
 800c1c6:	6965      	ldr	r5, [r4, #20]
 800c1c8:	6909      	ldr	r1, [r1, #16]
 800c1ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c1ce:	eba3 0901 	sub.w	r9, r3, r1
 800c1d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c1d6:	1c7b      	adds	r3, r7, #1
 800c1d8:	444b      	add	r3, r9
 800c1da:	106d      	asrs	r5, r5, #1
 800c1dc:	429d      	cmp	r5, r3
 800c1de:	bf38      	it	cc
 800c1e0:	461d      	movcc	r5, r3
 800c1e2:	0553      	lsls	r3, r2, #21
 800c1e4:	d527      	bpl.n	800c236 <__ssputs_r+0x8e>
 800c1e6:	4629      	mov	r1, r5
 800c1e8:	f7ff fcd8 	bl	800bb9c <_malloc_r>
 800c1ec:	4606      	mov	r6, r0
 800c1ee:	b360      	cbz	r0, 800c24a <__ssputs_r+0xa2>
 800c1f0:	6921      	ldr	r1, [r4, #16]
 800c1f2:	464a      	mov	r2, r9
 800c1f4:	f7ff ff61 	bl	800c0ba <memcpy>
 800c1f8:	89a3      	ldrh	r3, [r4, #12]
 800c1fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c1fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c202:	81a3      	strh	r3, [r4, #12]
 800c204:	6126      	str	r6, [r4, #16]
 800c206:	6165      	str	r5, [r4, #20]
 800c208:	444e      	add	r6, r9
 800c20a:	eba5 0509 	sub.w	r5, r5, r9
 800c20e:	6026      	str	r6, [r4, #0]
 800c210:	60a5      	str	r5, [r4, #8]
 800c212:	463e      	mov	r6, r7
 800c214:	42be      	cmp	r6, r7
 800c216:	d900      	bls.n	800c21a <__ssputs_r+0x72>
 800c218:	463e      	mov	r6, r7
 800c21a:	6820      	ldr	r0, [r4, #0]
 800c21c:	4632      	mov	r2, r6
 800c21e:	4641      	mov	r1, r8
 800c220:	f000 fb66 	bl	800c8f0 <memmove>
 800c224:	68a3      	ldr	r3, [r4, #8]
 800c226:	1b9b      	subs	r3, r3, r6
 800c228:	60a3      	str	r3, [r4, #8]
 800c22a:	6823      	ldr	r3, [r4, #0]
 800c22c:	4433      	add	r3, r6
 800c22e:	6023      	str	r3, [r4, #0]
 800c230:	2000      	movs	r0, #0
 800c232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c236:	462a      	mov	r2, r5
 800c238:	f000 fb7b 	bl	800c932 <_realloc_r>
 800c23c:	4606      	mov	r6, r0
 800c23e:	2800      	cmp	r0, #0
 800c240:	d1e0      	bne.n	800c204 <__ssputs_r+0x5c>
 800c242:	6921      	ldr	r1, [r4, #16]
 800c244:	4650      	mov	r0, sl
 800c246:	f7ff ff65 	bl	800c114 <_free_r>
 800c24a:	230c      	movs	r3, #12
 800c24c:	f8ca 3000 	str.w	r3, [sl]
 800c250:	89a3      	ldrh	r3, [r4, #12]
 800c252:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c256:	81a3      	strh	r3, [r4, #12]
 800c258:	f04f 30ff 	mov.w	r0, #4294967295
 800c25c:	e7e9      	b.n	800c232 <__ssputs_r+0x8a>
	...

0800c260 <_svfiprintf_r>:
 800c260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c264:	4698      	mov	r8, r3
 800c266:	898b      	ldrh	r3, [r1, #12]
 800c268:	061b      	lsls	r3, r3, #24
 800c26a:	b09d      	sub	sp, #116	@ 0x74
 800c26c:	4607      	mov	r7, r0
 800c26e:	460d      	mov	r5, r1
 800c270:	4614      	mov	r4, r2
 800c272:	d510      	bpl.n	800c296 <_svfiprintf_r+0x36>
 800c274:	690b      	ldr	r3, [r1, #16]
 800c276:	b973      	cbnz	r3, 800c296 <_svfiprintf_r+0x36>
 800c278:	2140      	movs	r1, #64	@ 0x40
 800c27a:	f7ff fc8f 	bl	800bb9c <_malloc_r>
 800c27e:	6028      	str	r0, [r5, #0]
 800c280:	6128      	str	r0, [r5, #16]
 800c282:	b930      	cbnz	r0, 800c292 <_svfiprintf_r+0x32>
 800c284:	230c      	movs	r3, #12
 800c286:	603b      	str	r3, [r7, #0]
 800c288:	f04f 30ff 	mov.w	r0, #4294967295
 800c28c:	b01d      	add	sp, #116	@ 0x74
 800c28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c292:	2340      	movs	r3, #64	@ 0x40
 800c294:	616b      	str	r3, [r5, #20]
 800c296:	2300      	movs	r3, #0
 800c298:	9309      	str	r3, [sp, #36]	@ 0x24
 800c29a:	2320      	movs	r3, #32
 800c29c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c2a0:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2a4:	2330      	movs	r3, #48	@ 0x30
 800c2a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c444 <_svfiprintf_r+0x1e4>
 800c2aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c2ae:	f04f 0901 	mov.w	r9, #1
 800c2b2:	4623      	mov	r3, r4
 800c2b4:	469a      	mov	sl, r3
 800c2b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2ba:	b10a      	cbz	r2, 800c2c0 <_svfiprintf_r+0x60>
 800c2bc:	2a25      	cmp	r2, #37	@ 0x25
 800c2be:	d1f9      	bne.n	800c2b4 <_svfiprintf_r+0x54>
 800c2c0:	ebba 0b04 	subs.w	fp, sl, r4
 800c2c4:	d00b      	beq.n	800c2de <_svfiprintf_r+0x7e>
 800c2c6:	465b      	mov	r3, fp
 800c2c8:	4622      	mov	r2, r4
 800c2ca:	4629      	mov	r1, r5
 800c2cc:	4638      	mov	r0, r7
 800c2ce:	f7ff ff6b 	bl	800c1a8 <__ssputs_r>
 800c2d2:	3001      	adds	r0, #1
 800c2d4:	f000 80a7 	beq.w	800c426 <_svfiprintf_r+0x1c6>
 800c2d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c2da:	445a      	add	r2, fp
 800c2dc:	9209      	str	r2, [sp, #36]	@ 0x24
 800c2de:	f89a 3000 	ldrb.w	r3, [sl]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	f000 809f 	beq.w	800c426 <_svfiprintf_r+0x1c6>
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	f04f 32ff 	mov.w	r2, #4294967295
 800c2ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2f2:	f10a 0a01 	add.w	sl, sl, #1
 800c2f6:	9304      	str	r3, [sp, #16]
 800c2f8:	9307      	str	r3, [sp, #28]
 800c2fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c2fe:	931a      	str	r3, [sp, #104]	@ 0x68
 800c300:	4654      	mov	r4, sl
 800c302:	2205      	movs	r2, #5
 800c304:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c308:	484e      	ldr	r0, [pc, #312]	@ (800c444 <_svfiprintf_r+0x1e4>)
 800c30a:	f7f3 ff61 	bl	80001d0 <memchr>
 800c30e:	9a04      	ldr	r2, [sp, #16]
 800c310:	b9d8      	cbnz	r0, 800c34a <_svfiprintf_r+0xea>
 800c312:	06d0      	lsls	r0, r2, #27
 800c314:	bf44      	itt	mi
 800c316:	2320      	movmi	r3, #32
 800c318:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c31c:	0711      	lsls	r1, r2, #28
 800c31e:	bf44      	itt	mi
 800c320:	232b      	movmi	r3, #43	@ 0x2b
 800c322:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c326:	f89a 3000 	ldrb.w	r3, [sl]
 800c32a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c32c:	d015      	beq.n	800c35a <_svfiprintf_r+0xfa>
 800c32e:	9a07      	ldr	r2, [sp, #28]
 800c330:	4654      	mov	r4, sl
 800c332:	2000      	movs	r0, #0
 800c334:	f04f 0c0a 	mov.w	ip, #10
 800c338:	4621      	mov	r1, r4
 800c33a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c33e:	3b30      	subs	r3, #48	@ 0x30
 800c340:	2b09      	cmp	r3, #9
 800c342:	d94b      	bls.n	800c3dc <_svfiprintf_r+0x17c>
 800c344:	b1b0      	cbz	r0, 800c374 <_svfiprintf_r+0x114>
 800c346:	9207      	str	r2, [sp, #28]
 800c348:	e014      	b.n	800c374 <_svfiprintf_r+0x114>
 800c34a:	eba0 0308 	sub.w	r3, r0, r8
 800c34e:	fa09 f303 	lsl.w	r3, r9, r3
 800c352:	4313      	orrs	r3, r2
 800c354:	9304      	str	r3, [sp, #16]
 800c356:	46a2      	mov	sl, r4
 800c358:	e7d2      	b.n	800c300 <_svfiprintf_r+0xa0>
 800c35a:	9b03      	ldr	r3, [sp, #12]
 800c35c:	1d19      	adds	r1, r3, #4
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	9103      	str	r1, [sp, #12]
 800c362:	2b00      	cmp	r3, #0
 800c364:	bfbb      	ittet	lt
 800c366:	425b      	neglt	r3, r3
 800c368:	f042 0202 	orrlt.w	r2, r2, #2
 800c36c:	9307      	strge	r3, [sp, #28]
 800c36e:	9307      	strlt	r3, [sp, #28]
 800c370:	bfb8      	it	lt
 800c372:	9204      	strlt	r2, [sp, #16]
 800c374:	7823      	ldrb	r3, [r4, #0]
 800c376:	2b2e      	cmp	r3, #46	@ 0x2e
 800c378:	d10a      	bne.n	800c390 <_svfiprintf_r+0x130>
 800c37a:	7863      	ldrb	r3, [r4, #1]
 800c37c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c37e:	d132      	bne.n	800c3e6 <_svfiprintf_r+0x186>
 800c380:	9b03      	ldr	r3, [sp, #12]
 800c382:	1d1a      	adds	r2, r3, #4
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	9203      	str	r2, [sp, #12]
 800c388:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c38c:	3402      	adds	r4, #2
 800c38e:	9305      	str	r3, [sp, #20]
 800c390:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c454 <_svfiprintf_r+0x1f4>
 800c394:	7821      	ldrb	r1, [r4, #0]
 800c396:	2203      	movs	r2, #3
 800c398:	4650      	mov	r0, sl
 800c39a:	f7f3 ff19 	bl	80001d0 <memchr>
 800c39e:	b138      	cbz	r0, 800c3b0 <_svfiprintf_r+0x150>
 800c3a0:	9b04      	ldr	r3, [sp, #16]
 800c3a2:	eba0 000a 	sub.w	r0, r0, sl
 800c3a6:	2240      	movs	r2, #64	@ 0x40
 800c3a8:	4082      	lsls	r2, r0
 800c3aa:	4313      	orrs	r3, r2
 800c3ac:	3401      	adds	r4, #1
 800c3ae:	9304      	str	r3, [sp, #16]
 800c3b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3b4:	4824      	ldr	r0, [pc, #144]	@ (800c448 <_svfiprintf_r+0x1e8>)
 800c3b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c3ba:	2206      	movs	r2, #6
 800c3bc:	f7f3 ff08 	bl	80001d0 <memchr>
 800c3c0:	2800      	cmp	r0, #0
 800c3c2:	d036      	beq.n	800c432 <_svfiprintf_r+0x1d2>
 800c3c4:	4b21      	ldr	r3, [pc, #132]	@ (800c44c <_svfiprintf_r+0x1ec>)
 800c3c6:	bb1b      	cbnz	r3, 800c410 <_svfiprintf_r+0x1b0>
 800c3c8:	9b03      	ldr	r3, [sp, #12]
 800c3ca:	3307      	adds	r3, #7
 800c3cc:	f023 0307 	bic.w	r3, r3, #7
 800c3d0:	3308      	adds	r3, #8
 800c3d2:	9303      	str	r3, [sp, #12]
 800c3d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3d6:	4433      	add	r3, r6
 800c3d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3da:	e76a      	b.n	800c2b2 <_svfiprintf_r+0x52>
 800c3dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3e0:	460c      	mov	r4, r1
 800c3e2:	2001      	movs	r0, #1
 800c3e4:	e7a8      	b.n	800c338 <_svfiprintf_r+0xd8>
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	3401      	adds	r4, #1
 800c3ea:	9305      	str	r3, [sp, #20]
 800c3ec:	4619      	mov	r1, r3
 800c3ee:	f04f 0c0a 	mov.w	ip, #10
 800c3f2:	4620      	mov	r0, r4
 800c3f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3f8:	3a30      	subs	r2, #48	@ 0x30
 800c3fa:	2a09      	cmp	r2, #9
 800c3fc:	d903      	bls.n	800c406 <_svfiprintf_r+0x1a6>
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d0c6      	beq.n	800c390 <_svfiprintf_r+0x130>
 800c402:	9105      	str	r1, [sp, #20]
 800c404:	e7c4      	b.n	800c390 <_svfiprintf_r+0x130>
 800c406:	fb0c 2101 	mla	r1, ip, r1, r2
 800c40a:	4604      	mov	r4, r0
 800c40c:	2301      	movs	r3, #1
 800c40e:	e7f0      	b.n	800c3f2 <_svfiprintf_r+0x192>
 800c410:	ab03      	add	r3, sp, #12
 800c412:	9300      	str	r3, [sp, #0]
 800c414:	462a      	mov	r2, r5
 800c416:	4b0e      	ldr	r3, [pc, #56]	@ (800c450 <_svfiprintf_r+0x1f0>)
 800c418:	a904      	add	r1, sp, #16
 800c41a:	4638      	mov	r0, r7
 800c41c:	f3af 8000 	nop.w
 800c420:	1c42      	adds	r2, r0, #1
 800c422:	4606      	mov	r6, r0
 800c424:	d1d6      	bne.n	800c3d4 <_svfiprintf_r+0x174>
 800c426:	89ab      	ldrh	r3, [r5, #12]
 800c428:	065b      	lsls	r3, r3, #25
 800c42a:	f53f af2d 	bmi.w	800c288 <_svfiprintf_r+0x28>
 800c42e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c430:	e72c      	b.n	800c28c <_svfiprintf_r+0x2c>
 800c432:	ab03      	add	r3, sp, #12
 800c434:	9300      	str	r3, [sp, #0]
 800c436:	462a      	mov	r2, r5
 800c438:	4b05      	ldr	r3, [pc, #20]	@ (800c450 <_svfiprintf_r+0x1f0>)
 800c43a:	a904      	add	r1, sp, #16
 800c43c:	4638      	mov	r0, r7
 800c43e:	f000 f879 	bl	800c534 <_printf_i>
 800c442:	e7ed      	b.n	800c420 <_svfiprintf_r+0x1c0>
 800c444:	0800d227 	.word	0x0800d227
 800c448:	0800d231 	.word	0x0800d231
 800c44c:	00000000 	.word	0x00000000
 800c450:	0800c1a9 	.word	0x0800c1a9
 800c454:	0800d22d 	.word	0x0800d22d

0800c458 <_printf_common>:
 800c458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c45c:	4616      	mov	r6, r2
 800c45e:	4698      	mov	r8, r3
 800c460:	688a      	ldr	r2, [r1, #8]
 800c462:	690b      	ldr	r3, [r1, #16]
 800c464:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c468:	4293      	cmp	r3, r2
 800c46a:	bfb8      	it	lt
 800c46c:	4613      	movlt	r3, r2
 800c46e:	6033      	str	r3, [r6, #0]
 800c470:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c474:	4607      	mov	r7, r0
 800c476:	460c      	mov	r4, r1
 800c478:	b10a      	cbz	r2, 800c47e <_printf_common+0x26>
 800c47a:	3301      	adds	r3, #1
 800c47c:	6033      	str	r3, [r6, #0]
 800c47e:	6823      	ldr	r3, [r4, #0]
 800c480:	0699      	lsls	r1, r3, #26
 800c482:	bf42      	ittt	mi
 800c484:	6833      	ldrmi	r3, [r6, #0]
 800c486:	3302      	addmi	r3, #2
 800c488:	6033      	strmi	r3, [r6, #0]
 800c48a:	6825      	ldr	r5, [r4, #0]
 800c48c:	f015 0506 	ands.w	r5, r5, #6
 800c490:	d106      	bne.n	800c4a0 <_printf_common+0x48>
 800c492:	f104 0a19 	add.w	sl, r4, #25
 800c496:	68e3      	ldr	r3, [r4, #12]
 800c498:	6832      	ldr	r2, [r6, #0]
 800c49a:	1a9b      	subs	r3, r3, r2
 800c49c:	42ab      	cmp	r3, r5
 800c49e:	dc26      	bgt.n	800c4ee <_printf_common+0x96>
 800c4a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c4a4:	6822      	ldr	r2, [r4, #0]
 800c4a6:	3b00      	subs	r3, #0
 800c4a8:	bf18      	it	ne
 800c4aa:	2301      	movne	r3, #1
 800c4ac:	0692      	lsls	r2, r2, #26
 800c4ae:	d42b      	bmi.n	800c508 <_printf_common+0xb0>
 800c4b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c4b4:	4641      	mov	r1, r8
 800c4b6:	4638      	mov	r0, r7
 800c4b8:	47c8      	blx	r9
 800c4ba:	3001      	adds	r0, #1
 800c4bc:	d01e      	beq.n	800c4fc <_printf_common+0xa4>
 800c4be:	6823      	ldr	r3, [r4, #0]
 800c4c0:	6922      	ldr	r2, [r4, #16]
 800c4c2:	f003 0306 	and.w	r3, r3, #6
 800c4c6:	2b04      	cmp	r3, #4
 800c4c8:	bf02      	ittt	eq
 800c4ca:	68e5      	ldreq	r5, [r4, #12]
 800c4cc:	6833      	ldreq	r3, [r6, #0]
 800c4ce:	1aed      	subeq	r5, r5, r3
 800c4d0:	68a3      	ldr	r3, [r4, #8]
 800c4d2:	bf0c      	ite	eq
 800c4d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c4d8:	2500      	movne	r5, #0
 800c4da:	4293      	cmp	r3, r2
 800c4dc:	bfc4      	itt	gt
 800c4de:	1a9b      	subgt	r3, r3, r2
 800c4e0:	18ed      	addgt	r5, r5, r3
 800c4e2:	2600      	movs	r6, #0
 800c4e4:	341a      	adds	r4, #26
 800c4e6:	42b5      	cmp	r5, r6
 800c4e8:	d11a      	bne.n	800c520 <_printf_common+0xc8>
 800c4ea:	2000      	movs	r0, #0
 800c4ec:	e008      	b.n	800c500 <_printf_common+0xa8>
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	4652      	mov	r2, sl
 800c4f2:	4641      	mov	r1, r8
 800c4f4:	4638      	mov	r0, r7
 800c4f6:	47c8      	blx	r9
 800c4f8:	3001      	adds	r0, #1
 800c4fa:	d103      	bne.n	800c504 <_printf_common+0xac>
 800c4fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c504:	3501      	adds	r5, #1
 800c506:	e7c6      	b.n	800c496 <_printf_common+0x3e>
 800c508:	18e1      	adds	r1, r4, r3
 800c50a:	1c5a      	adds	r2, r3, #1
 800c50c:	2030      	movs	r0, #48	@ 0x30
 800c50e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c512:	4422      	add	r2, r4
 800c514:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c518:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c51c:	3302      	adds	r3, #2
 800c51e:	e7c7      	b.n	800c4b0 <_printf_common+0x58>
 800c520:	2301      	movs	r3, #1
 800c522:	4622      	mov	r2, r4
 800c524:	4641      	mov	r1, r8
 800c526:	4638      	mov	r0, r7
 800c528:	47c8      	blx	r9
 800c52a:	3001      	adds	r0, #1
 800c52c:	d0e6      	beq.n	800c4fc <_printf_common+0xa4>
 800c52e:	3601      	adds	r6, #1
 800c530:	e7d9      	b.n	800c4e6 <_printf_common+0x8e>
	...

0800c534 <_printf_i>:
 800c534:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c538:	7e0f      	ldrb	r7, [r1, #24]
 800c53a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c53c:	2f78      	cmp	r7, #120	@ 0x78
 800c53e:	4691      	mov	r9, r2
 800c540:	4680      	mov	r8, r0
 800c542:	460c      	mov	r4, r1
 800c544:	469a      	mov	sl, r3
 800c546:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c54a:	d807      	bhi.n	800c55c <_printf_i+0x28>
 800c54c:	2f62      	cmp	r7, #98	@ 0x62
 800c54e:	d80a      	bhi.n	800c566 <_printf_i+0x32>
 800c550:	2f00      	cmp	r7, #0
 800c552:	f000 80d2 	beq.w	800c6fa <_printf_i+0x1c6>
 800c556:	2f58      	cmp	r7, #88	@ 0x58
 800c558:	f000 80b9 	beq.w	800c6ce <_printf_i+0x19a>
 800c55c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c560:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c564:	e03a      	b.n	800c5dc <_printf_i+0xa8>
 800c566:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c56a:	2b15      	cmp	r3, #21
 800c56c:	d8f6      	bhi.n	800c55c <_printf_i+0x28>
 800c56e:	a101      	add	r1, pc, #4	@ (adr r1, 800c574 <_printf_i+0x40>)
 800c570:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c574:	0800c5cd 	.word	0x0800c5cd
 800c578:	0800c5e1 	.word	0x0800c5e1
 800c57c:	0800c55d 	.word	0x0800c55d
 800c580:	0800c55d 	.word	0x0800c55d
 800c584:	0800c55d 	.word	0x0800c55d
 800c588:	0800c55d 	.word	0x0800c55d
 800c58c:	0800c5e1 	.word	0x0800c5e1
 800c590:	0800c55d 	.word	0x0800c55d
 800c594:	0800c55d 	.word	0x0800c55d
 800c598:	0800c55d 	.word	0x0800c55d
 800c59c:	0800c55d 	.word	0x0800c55d
 800c5a0:	0800c6e1 	.word	0x0800c6e1
 800c5a4:	0800c60b 	.word	0x0800c60b
 800c5a8:	0800c69b 	.word	0x0800c69b
 800c5ac:	0800c55d 	.word	0x0800c55d
 800c5b0:	0800c55d 	.word	0x0800c55d
 800c5b4:	0800c703 	.word	0x0800c703
 800c5b8:	0800c55d 	.word	0x0800c55d
 800c5bc:	0800c60b 	.word	0x0800c60b
 800c5c0:	0800c55d 	.word	0x0800c55d
 800c5c4:	0800c55d 	.word	0x0800c55d
 800c5c8:	0800c6a3 	.word	0x0800c6a3
 800c5cc:	6833      	ldr	r3, [r6, #0]
 800c5ce:	1d1a      	adds	r2, r3, #4
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	6032      	str	r2, [r6, #0]
 800c5d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c5d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c5dc:	2301      	movs	r3, #1
 800c5de:	e09d      	b.n	800c71c <_printf_i+0x1e8>
 800c5e0:	6833      	ldr	r3, [r6, #0]
 800c5e2:	6820      	ldr	r0, [r4, #0]
 800c5e4:	1d19      	adds	r1, r3, #4
 800c5e6:	6031      	str	r1, [r6, #0]
 800c5e8:	0606      	lsls	r6, r0, #24
 800c5ea:	d501      	bpl.n	800c5f0 <_printf_i+0xbc>
 800c5ec:	681d      	ldr	r5, [r3, #0]
 800c5ee:	e003      	b.n	800c5f8 <_printf_i+0xc4>
 800c5f0:	0645      	lsls	r5, r0, #25
 800c5f2:	d5fb      	bpl.n	800c5ec <_printf_i+0xb8>
 800c5f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c5f8:	2d00      	cmp	r5, #0
 800c5fa:	da03      	bge.n	800c604 <_printf_i+0xd0>
 800c5fc:	232d      	movs	r3, #45	@ 0x2d
 800c5fe:	426d      	negs	r5, r5
 800c600:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c604:	4859      	ldr	r0, [pc, #356]	@ (800c76c <_printf_i+0x238>)
 800c606:	230a      	movs	r3, #10
 800c608:	e011      	b.n	800c62e <_printf_i+0xfa>
 800c60a:	6821      	ldr	r1, [r4, #0]
 800c60c:	6833      	ldr	r3, [r6, #0]
 800c60e:	0608      	lsls	r0, r1, #24
 800c610:	f853 5b04 	ldr.w	r5, [r3], #4
 800c614:	d402      	bmi.n	800c61c <_printf_i+0xe8>
 800c616:	0649      	lsls	r1, r1, #25
 800c618:	bf48      	it	mi
 800c61a:	b2ad      	uxthmi	r5, r5
 800c61c:	2f6f      	cmp	r7, #111	@ 0x6f
 800c61e:	4853      	ldr	r0, [pc, #332]	@ (800c76c <_printf_i+0x238>)
 800c620:	6033      	str	r3, [r6, #0]
 800c622:	bf14      	ite	ne
 800c624:	230a      	movne	r3, #10
 800c626:	2308      	moveq	r3, #8
 800c628:	2100      	movs	r1, #0
 800c62a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c62e:	6866      	ldr	r6, [r4, #4]
 800c630:	60a6      	str	r6, [r4, #8]
 800c632:	2e00      	cmp	r6, #0
 800c634:	bfa2      	ittt	ge
 800c636:	6821      	ldrge	r1, [r4, #0]
 800c638:	f021 0104 	bicge.w	r1, r1, #4
 800c63c:	6021      	strge	r1, [r4, #0]
 800c63e:	b90d      	cbnz	r5, 800c644 <_printf_i+0x110>
 800c640:	2e00      	cmp	r6, #0
 800c642:	d04b      	beq.n	800c6dc <_printf_i+0x1a8>
 800c644:	4616      	mov	r6, r2
 800c646:	fbb5 f1f3 	udiv	r1, r5, r3
 800c64a:	fb03 5711 	mls	r7, r3, r1, r5
 800c64e:	5dc7      	ldrb	r7, [r0, r7]
 800c650:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c654:	462f      	mov	r7, r5
 800c656:	42bb      	cmp	r3, r7
 800c658:	460d      	mov	r5, r1
 800c65a:	d9f4      	bls.n	800c646 <_printf_i+0x112>
 800c65c:	2b08      	cmp	r3, #8
 800c65e:	d10b      	bne.n	800c678 <_printf_i+0x144>
 800c660:	6823      	ldr	r3, [r4, #0]
 800c662:	07df      	lsls	r7, r3, #31
 800c664:	d508      	bpl.n	800c678 <_printf_i+0x144>
 800c666:	6923      	ldr	r3, [r4, #16]
 800c668:	6861      	ldr	r1, [r4, #4]
 800c66a:	4299      	cmp	r1, r3
 800c66c:	bfde      	ittt	le
 800c66e:	2330      	movle	r3, #48	@ 0x30
 800c670:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c674:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c678:	1b92      	subs	r2, r2, r6
 800c67a:	6122      	str	r2, [r4, #16]
 800c67c:	f8cd a000 	str.w	sl, [sp]
 800c680:	464b      	mov	r3, r9
 800c682:	aa03      	add	r2, sp, #12
 800c684:	4621      	mov	r1, r4
 800c686:	4640      	mov	r0, r8
 800c688:	f7ff fee6 	bl	800c458 <_printf_common>
 800c68c:	3001      	adds	r0, #1
 800c68e:	d14a      	bne.n	800c726 <_printf_i+0x1f2>
 800c690:	f04f 30ff 	mov.w	r0, #4294967295
 800c694:	b004      	add	sp, #16
 800c696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c69a:	6823      	ldr	r3, [r4, #0]
 800c69c:	f043 0320 	orr.w	r3, r3, #32
 800c6a0:	6023      	str	r3, [r4, #0]
 800c6a2:	4833      	ldr	r0, [pc, #204]	@ (800c770 <_printf_i+0x23c>)
 800c6a4:	2778      	movs	r7, #120	@ 0x78
 800c6a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c6aa:	6823      	ldr	r3, [r4, #0]
 800c6ac:	6831      	ldr	r1, [r6, #0]
 800c6ae:	061f      	lsls	r7, r3, #24
 800c6b0:	f851 5b04 	ldr.w	r5, [r1], #4
 800c6b4:	d402      	bmi.n	800c6bc <_printf_i+0x188>
 800c6b6:	065f      	lsls	r7, r3, #25
 800c6b8:	bf48      	it	mi
 800c6ba:	b2ad      	uxthmi	r5, r5
 800c6bc:	6031      	str	r1, [r6, #0]
 800c6be:	07d9      	lsls	r1, r3, #31
 800c6c0:	bf44      	itt	mi
 800c6c2:	f043 0320 	orrmi.w	r3, r3, #32
 800c6c6:	6023      	strmi	r3, [r4, #0]
 800c6c8:	b11d      	cbz	r5, 800c6d2 <_printf_i+0x19e>
 800c6ca:	2310      	movs	r3, #16
 800c6cc:	e7ac      	b.n	800c628 <_printf_i+0xf4>
 800c6ce:	4827      	ldr	r0, [pc, #156]	@ (800c76c <_printf_i+0x238>)
 800c6d0:	e7e9      	b.n	800c6a6 <_printf_i+0x172>
 800c6d2:	6823      	ldr	r3, [r4, #0]
 800c6d4:	f023 0320 	bic.w	r3, r3, #32
 800c6d8:	6023      	str	r3, [r4, #0]
 800c6da:	e7f6      	b.n	800c6ca <_printf_i+0x196>
 800c6dc:	4616      	mov	r6, r2
 800c6de:	e7bd      	b.n	800c65c <_printf_i+0x128>
 800c6e0:	6833      	ldr	r3, [r6, #0]
 800c6e2:	6825      	ldr	r5, [r4, #0]
 800c6e4:	6961      	ldr	r1, [r4, #20]
 800c6e6:	1d18      	adds	r0, r3, #4
 800c6e8:	6030      	str	r0, [r6, #0]
 800c6ea:	062e      	lsls	r6, r5, #24
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	d501      	bpl.n	800c6f4 <_printf_i+0x1c0>
 800c6f0:	6019      	str	r1, [r3, #0]
 800c6f2:	e002      	b.n	800c6fa <_printf_i+0x1c6>
 800c6f4:	0668      	lsls	r0, r5, #25
 800c6f6:	d5fb      	bpl.n	800c6f0 <_printf_i+0x1bc>
 800c6f8:	8019      	strh	r1, [r3, #0]
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	6123      	str	r3, [r4, #16]
 800c6fe:	4616      	mov	r6, r2
 800c700:	e7bc      	b.n	800c67c <_printf_i+0x148>
 800c702:	6833      	ldr	r3, [r6, #0]
 800c704:	1d1a      	adds	r2, r3, #4
 800c706:	6032      	str	r2, [r6, #0]
 800c708:	681e      	ldr	r6, [r3, #0]
 800c70a:	6862      	ldr	r2, [r4, #4]
 800c70c:	2100      	movs	r1, #0
 800c70e:	4630      	mov	r0, r6
 800c710:	f7f3 fd5e 	bl	80001d0 <memchr>
 800c714:	b108      	cbz	r0, 800c71a <_printf_i+0x1e6>
 800c716:	1b80      	subs	r0, r0, r6
 800c718:	6060      	str	r0, [r4, #4]
 800c71a:	6863      	ldr	r3, [r4, #4]
 800c71c:	6123      	str	r3, [r4, #16]
 800c71e:	2300      	movs	r3, #0
 800c720:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c724:	e7aa      	b.n	800c67c <_printf_i+0x148>
 800c726:	6923      	ldr	r3, [r4, #16]
 800c728:	4632      	mov	r2, r6
 800c72a:	4649      	mov	r1, r9
 800c72c:	4640      	mov	r0, r8
 800c72e:	47d0      	blx	sl
 800c730:	3001      	adds	r0, #1
 800c732:	d0ad      	beq.n	800c690 <_printf_i+0x15c>
 800c734:	6823      	ldr	r3, [r4, #0]
 800c736:	079b      	lsls	r3, r3, #30
 800c738:	d413      	bmi.n	800c762 <_printf_i+0x22e>
 800c73a:	68e0      	ldr	r0, [r4, #12]
 800c73c:	9b03      	ldr	r3, [sp, #12]
 800c73e:	4298      	cmp	r0, r3
 800c740:	bfb8      	it	lt
 800c742:	4618      	movlt	r0, r3
 800c744:	e7a6      	b.n	800c694 <_printf_i+0x160>
 800c746:	2301      	movs	r3, #1
 800c748:	4632      	mov	r2, r6
 800c74a:	4649      	mov	r1, r9
 800c74c:	4640      	mov	r0, r8
 800c74e:	47d0      	blx	sl
 800c750:	3001      	adds	r0, #1
 800c752:	d09d      	beq.n	800c690 <_printf_i+0x15c>
 800c754:	3501      	adds	r5, #1
 800c756:	68e3      	ldr	r3, [r4, #12]
 800c758:	9903      	ldr	r1, [sp, #12]
 800c75a:	1a5b      	subs	r3, r3, r1
 800c75c:	42ab      	cmp	r3, r5
 800c75e:	dcf2      	bgt.n	800c746 <_printf_i+0x212>
 800c760:	e7eb      	b.n	800c73a <_printf_i+0x206>
 800c762:	2500      	movs	r5, #0
 800c764:	f104 0619 	add.w	r6, r4, #25
 800c768:	e7f5      	b.n	800c756 <_printf_i+0x222>
 800c76a:	bf00      	nop
 800c76c:	0800d238 	.word	0x0800d238
 800c770:	0800d249 	.word	0x0800d249

0800c774 <__sflush_r>:
 800c774:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c77c:	0716      	lsls	r6, r2, #28
 800c77e:	4605      	mov	r5, r0
 800c780:	460c      	mov	r4, r1
 800c782:	d454      	bmi.n	800c82e <__sflush_r+0xba>
 800c784:	684b      	ldr	r3, [r1, #4]
 800c786:	2b00      	cmp	r3, #0
 800c788:	dc02      	bgt.n	800c790 <__sflush_r+0x1c>
 800c78a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	dd48      	ble.n	800c822 <__sflush_r+0xae>
 800c790:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c792:	2e00      	cmp	r6, #0
 800c794:	d045      	beq.n	800c822 <__sflush_r+0xae>
 800c796:	2300      	movs	r3, #0
 800c798:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c79c:	682f      	ldr	r7, [r5, #0]
 800c79e:	6a21      	ldr	r1, [r4, #32]
 800c7a0:	602b      	str	r3, [r5, #0]
 800c7a2:	d030      	beq.n	800c806 <__sflush_r+0x92>
 800c7a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c7a6:	89a3      	ldrh	r3, [r4, #12]
 800c7a8:	0759      	lsls	r1, r3, #29
 800c7aa:	d505      	bpl.n	800c7b8 <__sflush_r+0x44>
 800c7ac:	6863      	ldr	r3, [r4, #4]
 800c7ae:	1ad2      	subs	r2, r2, r3
 800c7b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c7b2:	b10b      	cbz	r3, 800c7b8 <__sflush_r+0x44>
 800c7b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c7b6:	1ad2      	subs	r2, r2, r3
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c7bc:	6a21      	ldr	r1, [r4, #32]
 800c7be:	4628      	mov	r0, r5
 800c7c0:	47b0      	blx	r6
 800c7c2:	1c43      	adds	r3, r0, #1
 800c7c4:	89a3      	ldrh	r3, [r4, #12]
 800c7c6:	d106      	bne.n	800c7d6 <__sflush_r+0x62>
 800c7c8:	6829      	ldr	r1, [r5, #0]
 800c7ca:	291d      	cmp	r1, #29
 800c7cc:	d82b      	bhi.n	800c826 <__sflush_r+0xb2>
 800c7ce:	4a2a      	ldr	r2, [pc, #168]	@ (800c878 <__sflush_r+0x104>)
 800c7d0:	410a      	asrs	r2, r1
 800c7d2:	07d6      	lsls	r6, r2, #31
 800c7d4:	d427      	bmi.n	800c826 <__sflush_r+0xb2>
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	6062      	str	r2, [r4, #4]
 800c7da:	04d9      	lsls	r1, r3, #19
 800c7dc:	6922      	ldr	r2, [r4, #16]
 800c7de:	6022      	str	r2, [r4, #0]
 800c7e0:	d504      	bpl.n	800c7ec <__sflush_r+0x78>
 800c7e2:	1c42      	adds	r2, r0, #1
 800c7e4:	d101      	bne.n	800c7ea <__sflush_r+0x76>
 800c7e6:	682b      	ldr	r3, [r5, #0]
 800c7e8:	b903      	cbnz	r3, 800c7ec <__sflush_r+0x78>
 800c7ea:	6560      	str	r0, [r4, #84]	@ 0x54
 800c7ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c7ee:	602f      	str	r7, [r5, #0]
 800c7f0:	b1b9      	cbz	r1, 800c822 <__sflush_r+0xae>
 800c7f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c7f6:	4299      	cmp	r1, r3
 800c7f8:	d002      	beq.n	800c800 <__sflush_r+0x8c>
 800c7fa:	4628      	mov	r0, r5
 800c7fc:	f7ff fc8a 	bl	800c114 <_free_r>
 800c800:	2300      	movs	r3, #0
 800c802:	6363      	str	r3, [r4, #52]	@ 0x34
 800c804:	e00d      	b.n	800c822 <__sflush_r+0xae>
 800c806:	2301      	movs	r3, #1
 800c808:	4628      	mov	r0, r5
 800c80a:	47b0      	blx	r6
 800c80c:	4602      	mov	r2, r0
 800c80e:	1c50      	adds	r0, r2, #1
 800c810:	d1c9      	bne.n	800c7a6 <__sflush_r+0x32>
 800c812:	682b      	ldr	r3, [r5, #0]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d0c6      	beq.n	800c7a6 <__sflush_r+0x32>
 800c818:	2b1d      	cmp	r3, #29
 800c81a:	d001      	beq.n	800c820 <__sflush_r+0xac>
 800c81c:	2b16      	cmp	r3, #22
 800c81e:	d11e      	bne.n	800c85e <__sflush_r+0xea>
 800c820:	602f      	str	r7, [r5, #0]
 800c822:	2000      	movs	r0, #0
 800c824:	e022      	b.n	800c86c <__sflush_r+0xf8>
 800c826:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c82a:	b21b      	sxth	r3, r3
 800c82c:	e01b      	b.n	800c866 <__sflush_r+0xf2>
 800c82e:	690f      	ldr	r7, [r1, #16]
 800c830:	2f00      	cmp	r7, #0
 800c832:	d0f6      	beq.n	800c822 <__sflush_r+0xae>
 800c834:	0793      	lsls	r3, r2, #30
 800c836:	680e      	ldr	r6, [r1, #0]
 800c838:	bf08      	it	eq
 800c83a:	694b      	ldreq	r3, [r1, #20]
 800c83c:	600f      	str	r7, [r1, #0]
 800c83e:	bf18      	it	ne
 800c840:	2300      	movne	r3, #0
 800c842:	eba6 0807 	sub.w	r8, r6, r7
 800c846:	608b      	str	r3, [r1, #8]
 800c848:	f1b8 0f00 	cmp.w	r8, #0
 800c84c:	dde9      	ble.n	800c822 <__sflush_r+0xae>
 800c84e:	6a21      	ldr	r1, [r4, #32]
 800c850:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c852:	4643      	mov	r3, r8
 800c854:	463a      	mov	r2, r7
 800c856:	4628      	mov	r0, r5
 800c858:	47b0      	blx	r6
 800c85a:	2800      	cmp	r0, #0
 800c85c:	dc08      	bgt.n	800c870 <__sflush_r+0xfc>
 800c85e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c862:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c866:	81a3      	strh	r3, [r4, #12]
 800c868:	f04f 30ff 	mov.w	r0, #4294967295
 800c86c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c870:	4407      	add	r7, r0
 800c872:	eba8 0800 	sub.w	r8, r8, r0
 800c876:	e7e7      	b.n	800c848 <__sflush_r+0xd4>
 800c878:	dfbffffe 	.word	0xdfbffffe

0800c87c <_fflush_r>:
 800c87c:	b538      	push	{r3, r4, r5, lr}
 800c87e:	690b      	ldr	r3, [r1, #16]
 800c880:	4605      	mov	r5, r0
 800c882:	460c      	mov	r4, r1
 800c884:	b913      	cbnz	r3, 800c88c <_fflush_r+0x10>
 800c886:	2500      	movs	r5, #0
 800c888:	4628      	mov	r0, r5
 800c88a:	bd38      	pop	{r3, r4, r5, pc}
 800c88c:	b118      	cbz	r0, 800c896 <_fflush_r+0x1a>
 800c88e:	6a03      	ldr	r3, [r0, #32]
 800c890:	b90b      	cbnz	r3, 800c896 <_fflush_r+0x1a>
 800c892:	f7ff fad9 	bl	800be48 <__sinit>
 800c896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d0f3      	beq.n	800c886 <_fflush_r+0xa>
 800c89e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c8a0:	07d0      	lsls	r0, r2, #31
 800c8a2:	d404      	bmi.n	800c8ae <_fflush_r+0x32>
 800c8a4:	0599      	lsls	r1, r3, #22
 800c8a6:	d402      	bmi.n	800c8ae <_fflush_r+0x32>
 800c8a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c8aa:	f7ff fc04 	bl	800c0b6 <__retarget_lock_acquire_recursive>
 800c8ae:	4628      	mov	r0, r5
 800c8b0:	4621      	mov	r1, r4
 800c8b2:	f7ff ff5f 	bl	800c774 <__sflush_r>
 800c8b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c8b8:	07da      	lsls	r2, r3, #31
 800c8ba:	4605      	mov	r5, r0
 800c8bc:	d4e4      	bmi.n	800c888 <_fflush_r+0xc>
 800c8be:	89a3      	ldrh	r3, [r4, #12]
 800c8c0:	059b      	lsls	r3, r3, #22
 800c8c2:	d4e1      	bmi.n	800c888 <_fflush_r+0xc>
 800c8c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c8c6:	f7ff fbf7 	bl	800c0b8 <__retarget_lock_release_recursive>
 800c8ca:	e7dd      	b.n	800c888 <_fflush_r+0xc>

0800c8cc <fiprintf>:
 800c8cc:	b40e      	push	{r1, r2, r3}
 800c8ce:	b503      	push	{r0, r1, lr}
 800c8d0:	4601      	mov	r1, r0
 800c8d2:	ab03      	add	r3, sp, #12
 800c8d4:	4805      	ldr	r0, [pc, #20]	@ (800c8ec <fiprintf+0x20>)
 800c8d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8da:	6800      	ldr	r0, [r0, #0]
 800c8dc:	9301      	str	r3, [sp, #4]
 800c8de:	f000 f87f 	bl	800c9e0 <_vfiprintf_r>
 800c8e2:	b002      	add	sp, #8
 800c8e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8e8:	b003      	add	sp, #12
 800c8ea:	4770      	bx	lr
 800c8ec:	20000030 	.word	0x20000030

0800c8f0 <memmove>:
 800c8f0:	4288      	cmp	r0, r1
 800c8f2:	b510      	push	{r4, lr}
 800c8f4:	eb01 0402 	add.w	r4, r1, r2
 800c8f8:	d902      	bls.n	800c900 <memmove+0x10>
 800c8fa:	4284      	cmp	r4, r0
 800c8fc:	4623      	mov	r3, r4
 800c8fe:	d807      	bhi.n	800c910 <memmove+0x20>
 800c900:	1e43      	subs	r3, r0, #1
 800c902:	42a1      	cmp	r1, r4
 800c904:	d008      	beq.n	800c918 <memmove+0x28>
 800c906:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c90a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c90e:	e7f8      	b.n	800c902 <memmove+0x12>
 800c910:	4402      	add	r2, r0
 800c912:	4601      	mov	r1, r0
 800c914:	428a      	cmp	r2, r1
 800c916:	d100      	bne.n	800c91a <memmove+0x2a>
 800c918:	bd10      	pop	{r4, pc}
 800c91a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c91e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c922:	e7f7      	b.n	800c914 <memmove+0x24>

0800c924 <abort>:
 800c924:	b508      	push	{r3, lr}
 800c926:	2006      	movs	r0, #6
 800c928:	f000 fa2e 	bl	800cd88 <raise>
 800c92c:	2001      	movs	r0, #1
 800c92e:	f7f4 fc8d 	bl	800124c <_exit>

0800c932 <_realloc_r>:
 800c932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c936:	4680      	mov	r8, r0
 800c938:	4615      	mov	r5, r2
 800c93a:	460c      	mov	r4, r1
 800c93c:	b921      	cbnz	r1, 800c948 <_realloc_r+0x16>
 800c93e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c942:	4611      	mov	r1, r2
 800c944:	f7ff b92a 	b.w	800bb9c <_malloc_r>
 800c948:	b92a      	cbnz	r2, 800c956 <_realloc_r+0x24>
 800c94a:	f7ff fbe3 	bl	800c114 <_free_r>
 800c94e:	2400      	movs	r4, #0
 800c950:	4620      	mov	r0, r4
 800c952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c956:	f000 fa33 	bl	800cdc0 <_malloc_usable_size_r>
 800c95a:	4285      	cmp	r5, r0
 800c95c:	4606      	mov	r6, r0
 800c95e:	d802      	bhi.n	800c966 <_realloc_r+0x34>
 800c960:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c964:	d8f4      	bhi.n	800c950 <_realloc_r+0x1e>
 800c966:	4629      	mov	r1, r5
 800c968:	4640      	mov	r0, r8
 800c96a:	f7ff f917 	bl	800bb9c <_malloc_r>
 800c96e:	4607      	mov	r7, r0
 800c970:	2800      	cmp	r0, #0
 800c972:	d0ec      	beq.n	800c94e <_realloc_r+0x1c>
 800c974:	42b5      	cmp	r5, r6
 800c976:	462a      	mov	r2, r5
 800c978:	4621      	mov	r1, r4
 800c97a:	bf28      	it	cs
 800c97c:	4632      	movcs	r2, r6
 800c97e:	f7ff fb9c 	bl	800c0ba <memcpy>
 800c982:	4621      	mov	r1, r4
 800c984:	4640      	mov	r0, r8
 800c986:	f7ff fbc5 	bl	800c114 <_free_r>
 800c98a:	463c      	mov	r4, r7
 800c98c:	e7e0      	b.n	800c950 <_realloc_r+0x1e>

0800c98e <__sfputc_r>:
 800c98e:	6893      	ldr	r3, [r2, #8]
 800c990:	3b01      	subs	r3, #1
 800c992:	2b00      	cmp	r3, #0
 800c994:	b410      	push	{r4}
 800c996:	6093      	str	r3, [r2, #8]
 800c998:	da08      	bge.n	800c9ac <__sfputc_r+0x1e>
 800c99a:	6994      	ldr	r4, [r2, #24]
 800c99c:	42a3      	cmp	r3, r4
 800c99e:	db01      	blt.n	800c9a4 <__sfputc_r+0x16>
 800c9a0:	290a      	cmp	r1, #10
 800c9a2:	d103      	bne.n	800c9ac <__sfputc_r+0x1e>
 800c9a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9a8:	f000 b932 	b.w	800cc10 <__swbuf_r>
 800c9ac:	6813      	ldr	r3, [r2, #0]
 800c9ae:	1c58      	adds	r0, r3, #1
 800c9b0:	6010      	str	r0, [r2, #0]
 800c9b2:	7019      	strb	r1, [r3, #0]
 800c9b4:	4608      	mov	r0, r1
 800c9b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9ba:	4770      	bx	lr

0800c9bc <__sfputs_r>:
 800c9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9be:	4606      	mov	r6, r0
 800c9c0:	460f      	mov	r7, r1
 800c9c2:	4614      	mov	r4, r2
 800c9c4:	18d5      	adds	r5, r2, r3
 800c9c6:	42ac      	cmp	r4, r5
 800c9c8:	d101      	bne.n	800c9ce <__sfputs_r+0x12>
 800c9ca:	2000      	movs	r0, #0
 800c9cc:	e007      	b.n	800c9de <__sfputs_r+0x22>
 800c9ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9d2:	463a      	mov	r2, r7
 800c9d4:	4630      	mov	r0, r6
 800c9d6:	f7ff ffda 	bl	800c98e <__sfputc_r>
 800c9da:	1c43      	adds	r3, r0, #1
 800c9dc:	d1f3      	bne.n	800c9c6 <__sfputs_r+0xa>
 800c9de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c9e0 <_vfiprintf_r>:
 800c9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9e4:	460d      	mov	r5, r1
 800c9e6:	b09d      	sub	sp, #116	@ 0x74
 800c9e8:	4614      	mov	r4, r2
 800c9ea:	4698      	mov	r8, r3
 800c9ec:	4606      	mov	r6, r0
 800c9ee:	b118      	cbz	r0, 800c9f8 <_vfiprintf_r+0x18>
 800c9f0:	6a03      	ldr	r3, [r0, #32]
 800c9f2:	b90b      	cbnz	r3, 800c9f8 <_vfiprintf_r+0x18>
 800c9f4:	f7ff fa28 	bl	800be48 <__sinit>
 800c9f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c9fa:	07d9      	lsls	r1, r3, #31
 800c9fc:	d405      	bmi.n	800ca0a <_vfiprintf_r+0x2a>
 800c9fe:	89ab      	ldrh	r3, [r5, #12]
 800ca00:	059a      	lsls	r2, r3, #22
 800ca02:	d402      	bmi.n	800ca0a <_vfiprintf_r+0x2a>
 800ca04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca06:	f7ff fb56 	bl	800c0b6 <__retarget_lock_acquire_recursive>
 800ca0a:	89ab      	ldrh	r3, [r5, #12]
 800ca0c:	071b      	lsls	r3, r3, #28
 800ca0e:	d501      	bpl.n	800ca14 <_vfiprintf_r+0x34>
 800ca10:	692b      	ldr	r3, [r5, #16]
 800ca12:	b99b      	cbnz	r3, 800ca3c <_vfiprintf_r+0x5c>
 800ca14:	4629      	mov	r1, r5
 800ca16:	4630      	mov	r0, r6
 800ca18:	f000 f938 	bl	800cc8c <__swsetup_r>
 800ca1c:	b170      	cbz	r0, 800ca3c <_vfiprintf_r+0x5c>
 800ca1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca20:	07dc      	lsls	r4, r3, #31
 800ca22:	d504      	bpl.n	800ca2e <_vfiprintf_r+0x4e>
 800ca24:	f04f 30ff 	mov.w	r0, #4294967295
 800ca28:	b01d      	add	sp, #116	@ 0x74
 800ca2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca2e:	89ab      	ldrh	r3, [r5, #12]
 800ca30:	0598      	lsls	r0, r3, #22
 800ca32:	d4f7      	bmi.n	800ca24 <_vfiprintf_r+0x44>
 800ca34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca36:	f7ff fb3f 	bl	800c0b8 <__retarget_lock_release_recursive>
 800ca3a:	e7f3      	b.n	800ca24 <_vfiprintf_r+0x44>
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca40:	2320      	movs	r3, #32
 800ca42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ca46:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca4a:	2330      	movs	r3, #48	@ 0x30
 800ca4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cbfc <_vfiprintf_r+0x21c>
 800ca50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ca54:	f04f 0901 	mov.w	r9, #1
 800ca58:	4623      	mov	r3, r4
 800ca5a:	469a      	mov	sl, r3
 800ca5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca60:	b10a      	cbz	r2, 800ca66 <_vfiprintf_r+0x86>
 800ca62:	2a25      	cmp	r2, #37	@ 0x25
 800ca64:	d1f9      	bne.n	800ca5a <_vfiprintf_r+0x7a>
 800ca66:	ebba 0b04 	subs.w	fp, sl, r4
 800ca6a:	d00b      	beq.n	800ca84 <_vfiprintf_r+0xa4>
 800ca6c:	465b      	mov	r3, fp
 800ca6e:	4622      	mov	r2, r4
 800ca70:	4629      	mov	r1, r5
 800ca72:	4630      	mov	r0, r6
 800ca74:	f7ff ffa2 	bl	800c9bc <__sfputs_r>
 800ca78:	3001      	adds	r0, #1
 800ca7a:	f000 80a7 	beq.w	800cbcc <_vfiprintf_r+0x1ec>
 800ca7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca80:	445a      	add	r2, fp
 800ca82:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca84:	f89a 3000 	ldrb.w	r3, [sl]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	f000 809f 	beq.w	800cbcc <_vfiprintf_r+0x1ec>
 800ca8e:	2300      	movs	r3, #0
 800ca90:	f04f 32ff 	mov.w	r2, #4294967295
 800ca94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca98:	f10a 0a01 	add.w	sl, sl, #1
 800ca9c:	9304      	str	r3, [sp, #16]
 800ca9e:	9307      	str	r3, [sp, #28]
 800caa0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800caa4:	931a      	str	r3, [sp, #104]	@ 0x68
 800caa6:	4654      	mov	r4, sl
 800caa8:	2205      	movs	r2, #5
 800caaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caae:	4853      	ldr	r0, [pc, #332]	@ (800cbfc <_vfiprintf_r+0x21c>)
 800cab0:	f7f3 fb8e 	bl	80001d0 <memchr>
 800cab4:	9a04      	ldr	r2, [sp, #16]
 800cab6:	b9d8      	cbnz	r0, 800caf0 <_vfiprintf_r+0x110>
 800cab8:	06d1      	lsls	r1, r2, #27
 800caba:	bf44      	itt	mi
 800cabc:	2320      	movmi	r3, #32
 800cabe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cac2:	0713      	lsls	r3, r2, #28
 800cac4:	bf44      	itt	mi
 800cac6:	232b      	movmi	r3, #43	@ 0x2b
 800cac8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cacc:	f89a 3000 	ldrb.w	r3, [sl]
 800cad0:	2b2a      	cmp	r3, #42	@ 0x2a
 800cad2:	d015      	beq.n	800cb00 <_vfiprintf_r+0x120>
 800cad4:	9a07      	ldr	r2, [sp, #28]
 800cad6:	4654      	mov	r4, sl
 800cad8:	2000      	movs	r0, #0
 800cada:	f04f 0c0a 	mov.w	ip, #10
 800cade:	4621      	mov	r1, r4
 800cae0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cae4:	3b30      	subs	r3, #48	@ 0x30
 800cae6:	2b09      	cmp	r3, #9
 800cae8:	d94b      	bls.n	800cb82 <_vfiprintf_r+0x1a2>
 800caea:	b1b0      	cbz	r0, 800cb1a <_vfiprintf_r+0x13a>
 800caec:	9207      	str	r2, [sp, #28]
 800caee:	e014      	b.n	800cb1a <_vfiprintf_r+0x13a>
 800caf0:	eba0 0308 	sub.w	r3, r0, r8
 800caf4:	fa09 f303 	lsl.w	r3, r9, r3
 800caf8:	4313      	orrs	r3, r2
 800cafa:	9304      	str	r3, [sp, #16]
 800cafc:	46a2      	mov	sl, r4
 800cafe:	e7d2      	b.n	800caa6 <_vfiprintf_r+0xc6>
 800cb00:	9b03      	ldr	r3, [sp, #12]
 800cb02:	1d19      	adds	r1, r3, #4
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	9103      	str	r1, [sp, #12]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	bfbb      	ittet	lt
 800cb0c:	425b      	neglt	r3, r3
 800cb0e:	f042 0202 	orrlt.w	r2, r2, #2
 800cb12:	9307      	strge	r3, [sp, #28]
 800cb14:	9307      	strlt	r3, [sp, #28]
 800cb16:	bfb8      	it	lt
 800cb18:	9204      	strlt	r2, [sp, #16]
 800cb1a:	7823      	ldrb	r3, [r4, #0]
 800cb1c:	2b2e      	cmp	r3, #46	@ 0x2e
 800cb1e:	d10a      	bne.n	800cb36 <_vfiprintf_r+0x156>
 800cb20:	7863      	ldrb	r3, [r4, #1]
 800cb22:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb24:	d132      	bne.n	800cb8c <_vfiprintf_r+0x1ac>
 800cb26:	9b03      	ldr	r3, [sp, #12]
 800cb28:	1d1a      	adds	r2, r3, #4
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	9203      	str	r2, [sp, #12]
 800cb2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cb32:	3402      	adds	r4, #2
 800cb34:	9305      	str	r3, [sp, #20]
 800cb36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cc0c <_vfiprintf_r+0x22c>
 800cb3a:	7821      	ldrb	r1, [r4, #0]
 800cb3c:	2203      	movs	r2, #3
 800cb3e:	4650      	mov	r0, sl
 800cb40:	f7f3 fb46 	bl	80001d0 <memchr>
 800cb44:	b138      	cbz	r0, 800cb56 <_vfiprintf_r+0x176>
 800cb46:	9b04      	ldr	r3, [sp, #16]
 800cb48:	eba0 000a 	sub.w	r0, r0, sl
 800cb4c:	2240      	movs	r2, #64	@ 0x40
 800cb4e:	4082      	lsls	r2, r0
 800cb50:	4313      	orrs	r3, r2
 800cb52:	3401      	adds	r4, #1
 800cb54:	9304      	str	r3, [sp, #16]
 800cb56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb5a:	4829      	ldr	r0, [pc, #164]	@ (800cc00 <_vfiprintf_r+0x220>)
 800cb5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cb60:	2206      	movs	r2, #6
 800cb62:	f7f3 fb35 	bl	80001d0 <memchr>
 800cb66:	2800      	cmp	r0, #0
 800cb68:	d03f      	beq.n	800cbea <_vfiprintf_r+0x20a>
 800cb6a:	4b26      	ldr	r3, [pc, #152]	@ (800cc04 <_vfiprintf_r+0x224>)
 800cb6c:	bb1b      	cbnz	r3, 800cbb6 <_vfiprintf_r+0x1d6>
 800cb6e:	9b03      	ldr	r3, [sp, #12]
 800cb70:	3307      	adds	r3, #7
 800cb72:	f023 0307 	bic.w	r3, r3, #7
 800cb76:	3308      	adds	r3, #8
 800cb78:	9303      	str	r3, [sp, #12]
 800cb7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb7c:	443b      	add	r3, r7
 800cb7e:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb80:	e76a      	b.n	800ca58 <_vfiprintf_r+0x78>
 800cb82:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb86:	460c      	mov	r4, r1
 800cb88:	2001      	movs	r0, #1
 800cb8a:	e7a8      	b.n	800cade <_vfiprintf_r+0xfe>
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	3401      	adds	r4, #1
 800cb90:	9305      	str	r3, [sp, #20]
 800cb92:	4619      	mov	r1, r3
 800cb94:	f04f 0c0a 	mov.w	ip, #10
 800cb98:	4620      	mov	r0, r4
 800cb9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb9e:	3a30      	subs	r2, #48	@ 0x30
 800cba0:	2a09      	cmp	r2, #9
 800cba2:	d903      	bls.n	800cbac <_vfiprintf_r+0x1cc>
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d0c6      	beq.n	800cb36 <_vfiprintf_r+0x156>
 800cba8:	9105      	str	r1, [sp, #20]
 800cbaa:	e7c4      	b.n	800cb36 <_vfiprintf_r+0x156>
 800cbac:	fb0c 2101 	mla	r1, ip, r1, r2
 800cbb0:	4604      	mov	r4, r0
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	e7f0      	b.n	800cb98 <_vfiprintf_r+0x1b8>
 800cbb6:	ab03      	add	r3, sp, #12
 800cbb8:	9300      	str	r3, [sp, #0]
 800cbba:	462a      	mov	r2, r5
 800cbbc:	4b12      	ldr	r3, [pc, #72]	@ (800cc08 <_vfiprintf_r+0x228>)
 800cbbe:	a904      	add	r1, sp, #16
 800cbc0:	4630      	mov	r0, r6
 800cbc2:	f3af 8000 	nop.w
 800cbc6:	4607      	mov	r7, r0
 800cbc8:	1c78      	adds	r0, r7, #1
 800cbca:	d1d6      	bne.n	800cb7a <_vfiprintf_r+0x19a>
 800cbcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cbce:	07d9      	lsls	r1, r3, #31
 800cbd0:	d405      	bmi.n	800cbde <_vfiprintf_r+0x1fe>
 800cbd2:	89ab      	ldrh	r3, [r5, #12]
 800cbd4:	059a      	lsls	r2, r3, #22
 800cbd6:	d402      	bmi.n	800cbde <_vfiprintf_r+0x1fe>
 800cbd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cbda:	f7ff fa6d 	bl	800c0b8 <__retarget_lock_release_recursive>
 800cbde:	89ab      	ldrh	r3, [r5, #12]
 800cbe0:	065b      	lsls	r3, r3, #25
 800cbe2:	f53f af1f 	bmi.w	800ca24 <_vfiprintf_r+0x44>
 800cbe6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cbe8:	e71e      	b.n	800ca28 <_vfiprintf_r+0x48>
 800cbea:	ab03      	add	r3, sp, #12
 800cbec:	9300      	str	r3, [sp, #0]
 800cbee:	462a      	mov	r2, r5
 800cbf0:	4b05      	ldr	r3, [pc, #20]	@ (800cc08 <_vfiprintf_r+0x228>)
 800cbf2:	a904      	add	r1, sp, #16
 800cbf4:	4630      	mov	r0, r6
 800cbf6:	f7ff fc9d 	bl	800c534 <_printf_i>
 800cbfa:	e7e4      	b.n	800cbc6 <_vfiprintf_r+0x1e6>
 800cbfc:	0800d227 	.word	0x0800d227
 800cc00:	0800d231 	.word	0x0800d231
 800cc04:	00000000 	.word	0x00000000
 800cc08:	0800c9bd 	.word	0x0800c9bd
 800cc0c:	0800d22d 	.word	0x0800d22d

0800cc10 <__swbuf_r>:
 800cc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc12:	460e      	mov	r6, r1
 800cc14:	4614      	mov	r4, r2
 800cc16:	4605      	mov	r5, r0
 800cc18:	b118      	cbz	r0, 800cc22 <__swbuf_r+0x12>
 800cc1a:	6a03      	ldr	r3, [r0, #32]
 800cc1c:	b90b      	cbnz	r3, 800cc22 <__swbuf_r+0x12>
 800cc1e:	f7ff f913 	bl	800be48 <__sinit>
 800cc22:	69a3      	ldr	r3, [r4, #24]
 800cc24:	60a3      	str	r3, [r4, #8]
 800cc26:	89a3      	ldrh	r3, [r4, #12]
 800cc28:	071a      	lsls	r2, r3, #28
 800cc2a:	d501      	bpl.n	800cc30 <__swbuf_r+0x20>
 800cc2c:	6923      	ldr	r3, [r4, #16]
 800cc2e:	b943      	cbnz	r3, 800cc42 <__swbuf_r+0x32>
 800cc30:	4621      	mov	r1, r4
 800cc32:	4628      	mov	r0, r5
 800cc34:	f000 f82a 	bl	800cc8c <__swsetup_r>
 800cc38:	b118      	cbz	r0, 800cc42 <__swbuf_r+0x32>
 800cc3a:	f04f 37ff 	mov.w	r7, #4294967295
 800cc3e:	4638      	mov	r0, r7
 800cc40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc42:	6823      	ldr	r3, [r4, #0]
 800cc44:	6922      	ldr	r2, [r4, #16]
 800cc46:	1a98      	subs	r0, r3, r2
 800cc48:	6963      	ldr	r3, [r4, #20]
 800cc4a:	b2f6      	uxtb	r6, r6
 800cc4c:	4283      	cmp	r3, r0
 800cc4e:	4637      	mov	r7, r6
 800cc50:	dc05      	bgt.n	800cc5e <__swbuf_r+0x4e>
 800cc52:	4621      	mov	r1, r4
 800cc54:	4628      	mov	r0, r5
 800cc56:	f7ff fe11 	bl	800c87c <_fflush_r>
 800cc5a:	2800      	cmp	r0, #0
 800cc5c:	d1ed      	bne.n	800cc3a <__swbuf_r+0x2a>
 800cc5e:	68a3      	ldr	r3, [r4, #8]
 800cc60:	3b01      	subs	r3, #1
 800cc62:	60a3      	str	r3, [r4, #8]
 800cc64:	6823      	ldr	r3, [r4, #0]
 800cc66:	1c5a      	adds	r2, r3, #1
 800cc68:	6022      	str	r2, [r4, #0]
 800cc6a:	701e      	strb	r6, [r3, #0]
 800cc6c:	6962      	ldr	r2, [r4, #20]
 800cc6e:	1c43      	adds	r3, r0, #1
 800cc70:	429a      	cmp	r2, r3
 800cc72:	d004      	beq.n	800cc7e <__swbuf_r+0x6e>
 800cc74:	89a3      	ldrh	r3, [r4, #12]
 800cc76:	07db      	lsls	r3, r3, #31
 800cc78:	d5e1      	bpl.n	800cc3e <__swbuf_r+0x2e>
 800cc7a:	2e0a      	cmp	r6, #10
 800cc7c:	d1df      	bne.n	800cc3e <__swbuf_r+0x2e>
 800cc7e:	4621      	mov	r1, r4
 800cc80:	4628      	mov	r0, r5
 800cc82:	f7ff fdfb 	bl	800c87c <_fflush_r>
 800cc86:	2800      	cmp	r0, #0
 800cc88:	d0d9      	beq.n	800cc3e <__swbuf_r+0x2e>
 800cc8a:	e7d6      	b.n	800cc3a <__swbuf_r+0x2a>

0800cc8c <__swsetup_r>:
 800cc8c:	b538      	push	{r3, r4, r5, lr}
 800cc8e:	4b29      	ldr	r3, [pc, #164]	@ (800cd34 <__swsetup_r+0xa8>)
 800cc90:	4605      	mov	r5, r0
 800cc92:	6818      	ldr	r0, [r3, #0]
 800cc94:	460c      	mov	r4, r1
 800cc96:	b118      	cbz	r0, 800cca0 <__swsetup_r+0x14>
 800cc98:	6a03      	ldr	r3, [r0, #32]
 800cc9a:	b90b      	cbnz	r3, 800cca0 <__swsetup_r+0x14>
 800cc9c:	f7ff f8d4 	bl	800be48 <__sinit>
 800cca0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cca4:	0719      	lsls	r1, r3, #28
 800cca6:	d422      	bmi.n	800ccee <__swsetup_r+0x62>
 800cca8:	06da      	lsls	r2, r3, #27
 800ccaa:	d407      	bmi.n	800ccbc <__swsetup_r+0x30>
 800ccac:	2209      	movs	r2, #9
 800ccae:	602a      	str	r2, [r5, #0]
 800ccb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ccb4:	81a3      	strh	r3, [r4, #12]
 800ccb6:	f04f 30ff 	mov.w	r0, #4294967295
 800ccba:	e033      	b.n	800cd24 <__swsetup_r+0x98>
 800ccbc:	0758      	lsls	r0, r3, #29
 800ccbe:	d512      	bpl.n	800cce6 <__swsetup_r+0x5a>
 800ccc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ccc2:	b141      	cbz	r1, 800ccd6 <__swsetup_r+0x4a>
 800ccc4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ccc8:	4299      	cmp	r1, r3
 800ccca:	d002      	beq.n	800ccd2 <__swsetup_r+0x46>
 800cccc:	4628      	mov	r0, r5
 800ccce:	f7ff fa21 	bl	800c114 <_free_r>
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	6363      	str	r3, [r4, #52]	@ 0x34
 800ccd6:	89a3      	ldrh	r3, [r4, #12]
 800ccd8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ccdc:	81a3      	strh	r3, [r4, #12]
 800ccde:	2300      	movs	r3, #0
 800cce0:	6063      	str	r3, [r4, #4]
 800cce2:	6923      	ldr	r3, [r4, #16]
 800cce4:	6023      	str	r3, [r4, #0]
 800cce6:	89a3      	ldrh	r3, [r4, #12]
 800cce8:	f043 0308 	orr.w	r3, r3, #8
 800ccec:	81a3      	strh	r3, [r4, #12]
 800ccee:	6923      	ldr	r3, [r4, #16]
 800ccf0:	b94b      	cbnz	r3, 800cd06 <__swsetup_r+0x7a>
 800ccf2:	89a3      	ldrh	r3, [r4, #12]
 800ccf4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ccf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ccfc:	d003      	beq.n	800cd06 <__swsetup_r+0x7a>
 800ccfe:	4621      	mov	r1, r4
 800cd00:	4628      	mov	r0, r5
 800cd02:	f000 f88b 	bl	800ce1c <__smakebuf_r>
 800cd06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd0a:	f013 0201 	ands.w	r2, r3, #1
 800cd0e:	d00a      	beq.n	800cd26 <__swsetup_r+0x9a>
 800cd10:	2200      	movs	r2, #0
 800cd12:	60a2      	str	r2, [r4, #8]
 800cd14:	6962      	ldr	r2, [r4, #20]
 800cd16:	4252      	negs	r2, r2
 800cd18:	61a2      	str	r2, [r4, #24]
 800cd1a:	6922      	ldr	r2, [r4, #16]
 800cd1c:	b942      	cbnz	r2, 800cd30 <__swsetup_r+0xa4>
 800cd1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cd22:	d1c5      	bne.n	800ccb0 <__swsetup_r+0x24>
 800cd24:	bd38      	pop	{r3, r4, r5, pc}
 800cd26:	0799      	lsls	r1, r3, #30
 800cd28:	bf58      	it	pl
 800cd2a:	6962      	ldrpl	r2, [r4, #20]
 800cd2c:	60a2      	str	r2, [r4, #8]
 800cd2e:	e7f4      	b.n	800cd1a <__swsetup_r+0x8e>
 800cd30:	2000      	movs	r0, #0
 800cd32:	e7f7      	b.n	800cd24 <__swsetup_r+0x98>
 800cd34:	20000030 	.word	0x20000030

0800cd38 <_raise_r>:
 800cd38:	291f      	cmp	r1, #31
 800cd3a:	b538      	push	{r3, r4, r5, lr}
 800cd3c:	4605      	mov	r5, r0
 800cd3e:	460c      	mov	r4, r1
 800cd40:	d904      	bls.n	800cd4c <_raise_r+0x14>
 800cd42:	2316      	movs	r3, #22
 800cd44:	6003      	str	r3, [r0, #0]
 800cd46:	f04f 30ff 	mov.w	r0, #4294967295
 800cd4a:	bd38      	pop	{r3, r4, r5, pc}
 800cd4c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cd4e:	b112      	cbz	r2, 800cd56 <_raise_r+0x1e>
 800cd50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cd54:	b94b      	cbnz	r3, 800cd6a <_raise_r+0x32>
 800cd56:	4628      	mov	r0, r5
 800cd58:	f000 f830 	bl	800cdbc <_getpid_r>
 800cd5c:	4622      	mov	r2, r4
 800cd5e:	4601      	mov	r1, r0
 800cd60:	4628      	mov	r0, r5
 800cd62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd66:	f000 b817 	b.w	800cd98 <_kill_r>
 800cd6a:	2b01      	cmp	r3, #1
 800cd6c:	d00a      	beq.n	800cd84 <_raise_r+0x4c>
 800cd6e:	1c59      	adds	r1, r3, #1
 800cd70:	d103      	bne.n	800cd7a <_raise_r+0x42>
 800cd72:	2316      	movs	r3, #22
 800cd74:	6003      	str	r3, [r0, #0]
 800cd76:	2001      	movs	r0, #1
 800cd78:	e7e7      	b.n	800cd4a <_raise_r+0x12>
 800cd7a:	2100      	movs	r1, #0
 800cd7c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cd80:	4620      	mov	r0, r4
 800cd82:	4798      	blx	r3
 800cd84:	2000      	movs	r0, #0
 800cd86:	e7e0      	b.n	800cd4a <_raise_r+0x12>

0800cd88 <raise>:
 800cd88:	4b02      	ldr	r3, [pc, #8]	@ (800cd94 <raise+0xc>)
 800cd8a:	4601      	mov	r1, r0
 800cd8c:	6818      	ldr	r0, [r3, #0]
 800cd8e:	f7ff bfd3 	b.w	800cd38 <_raise_r>
 800cd92:	bf00      	nop
 800cd94:	20000030 	.word	0x20000030

0800cd98 <_kill_r>:
 800cd98:	b538      	push	{r3, r4, r5, lr}
 800cd9a:	4d07      	ldr	r5, [pc, #28]	@ (800cdb8 <_kill_r+0x20>)
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	4604      	mov	r4, r0
 800cda0:	4608      	mov	r0, r1
 800cda2:	4611      	mov	r1, r2
 800cda4:	602b      	str	r3, [r5, #0]
 800cda6:	f7f4 fa41 	bl	800122c <_kill>
 800cdaa:	1c43      	adds	r3, r0, #1
 800cdac:	d102      	bne.n	800cdb4 <_kill_r+0x1c>
 800cdae:	682b      	ldr	r3, [r5, #0]
 800cdb0:	b103      	cbz	r3, 800cdb4 <_kill_r+0x1c>
 800cdb2:	6023      	str	r3, [r4, #0]
 800cdb4:	bd38      	pop	{r3, r4, r5, pc}
 800cdb6:	bf00      	nop
 800cdb8:	20000d1c 	.word	0x20000d1c

0800cdbc <_getpid_r>:
 800cdbc:	f7f4 ba2e 	b.w	800121c <_getpid>

0800cdc0 <_malloc_usable_size_r>:
 800cdc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdc4:	1f18      	subs	r0, r3, #4
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	bfbc      	itt	lt
 800cdca:	580b      	ldrlt	r3, [r1, r0]
 800cdcc:	18c0      	addlt	r0, r0, r3
 800cdce:	4770      	bx	lr

0800cdd0 <__swhatbuf_r>:
 800cdd0:	b570      	push	{r4, r5, r6, lr}
 800cdd2:	460c      	mov	r4, r1
 800cdd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdd8:	2900      	cmp	r1, #0
 800cdda:	b096      	sub	sp, #88	@ 0x58
 800cddc:	4615      	mov	r5, r2
 800cdde:	461e      	mov	r6, r3
 800cde0:	da0d      	bge.n	800cdfe <__swhatbuf_r+0x2e>
 800cde2:	89a3      	ldrh	r3, [r4, #12]
 800cde4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cde8:	f04f 0100 	mov.w	r1, #0
 800cdec:	bf14      	ite	ne
 800cdee:	2340      	movne	r3, #64	@ 0x40
 800cdf0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cdf4:	2000      	movs	r0, #0
 800cdf6:	6031      	str	r1, [r6, #0]
 800cdf8:	602b      	str	r3, [r5, #0]
 800cdfa:	b016      	add	sp, #88	@ 0x58
 800cdfc:	bd70      	pop	{r4, r5, r6, pc}
 800cdfe:	466a      	mov	r2, sp
 800ce00:	f000 f848 	bl	800ce94 <_fstat_r>
 800ce04:	2800      	cmp	r0, #0
 800ce06:	dbec      	blt.n	800cde2 <__swhatbuf_r+0x12>
 800ce08:	9901      	ldr	r1, [sp, #4]
 800ce0a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ce0e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ce12:	4259      	negs	r1, r3
 800ce14:	4159      	adcs	r1, r3
 800ce16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce1a:	e7eb      	b.n	800cdf4 <__swhatbuf_r+0x24>

0800ce1c <__smakebuf_r>:
 800ce1c:	898b      	ldrh	r3, [r1, #12]
 800ce1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce20:	079d      	lsls	r5, r3, #30
 800ce22:	4606      	mov	r6, r0
 800ce24:	460c      	mov	r4, r1
 800ce26:	d507      	bpl.n	800ce38 <__smakebuf_r+0x1c>
 800ce28:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ce2c:	6023      	str	r3, [r4, #0]
 800ce2e:	6123      	str	r3, [r4, #16]
 800ce30:	2301      	movs	r3, #1
 800ce32:	6163      	str	r3, [r4, #20]
 800ce34:	b003      	add	sp, #12
 800ce36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce38:	ab01      	add	r3, sp, #4
 800ce3a:	466a      	mov	r2, sp
 800ce3c:	f7ff ffc8 	bl	800cdd0 <__swhatbuf_r>
 800ce40:	9f00      	ldr	r7, [sp, #0]
 800ce42:	4605      	mov	r5, r0
 800ce44:	4639      	mov	r1, r7
 800ce46:	4630      	mov	r0, r6
 800ce48:	f7fe fea8 	bl	800bb9c <_malloc_r>
 800ce4c:	b948      	cbnz	r0, 800ce62 <__smakebuf_r+0x46>
 800ce4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce52:	059a      	lsls	r2, r3, #22
 800ce54:	d4ee      	bmi.n	800ce34 <__smakebuf_r+0x18>
 800ce56:	f023 0303 	bic.w	r3, r3, #3
 800ce5a:	f043 0302 	orr.w	r3, r3, #2
 800ce5e:	81a3      	strh	r3, [r4, #12]
 800ce60:	e7e2      	b.n	800ce28 <__smakebuf_r+0xc>
 800ce62:	89a3      	ldrh	r3, [r4, #12]
 800ce64:	6020      	str	r0, [r4, #0]
 800ce66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce6a:	81a3      	strh	r3, [r4, #12]
 800ce6c:	9b01      	ldr	r3, [sp, #4]
 800ce6e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ce72:	b15b      	cbz	r3, 800ce8c <__smakebuf_r+0x70>
 800ce74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce78:	4630      	mov	r0, r6
 800ce7a:	f000 f81d 	bl	800ceb8 <_isatty_r>
 800ce7e:	b128      	cbz	r0, 800ce8c <__smakebuf_r+0x70>
 800ce80:	89a3      	ldrh	r3, [r4, #12]
 800ce82:	f023 0303 	bic.w	r3, r3, #3
 800ce86:	f043 0301 	orr.w	r3, r3, #1
 800ce8a:	81a3      	strh	r3, [r4, #12]
 800ce8c:	89a3      	ldrh	r3, [r4, #12]
 800ce8e:	431d      	orrs	r5, r3
 800ce90:	81a5      	strh	r5, [r4, #12]
 800ce92:	e7cf      	b.n	800ce34 <__smakebuf_r+0x18>

0800ce94 <_fstat_r>:
 800ce94:	b538      	push	{r3, r4, r5, lr}
 800ce96:	4d07      	ldr	r5, [pc, #28]	@ (800ceb4 <_fstat_r+0x20>)
 800ce98:	2300      	movs	r3, #0
 800ce9a:	4604      	mov	r4, r0
 800ce9c:	4608      	mov	r0, r1
 800ce9e:	4611      	mov	r1, r2
 800cea0:	602b      	str	r3, [r5, #0]
 800cea2:	f7f4 fa23 	bl	80012ec <_fstat>
 800cea6:	1c43      	adds	r3, r0, #1
 800cea8:	d102      	bne.n	800ceb0 <_fstat_r+0x1c>
 800ceaa:	682b      	ldr	r3, [r5, #0]
 800ceac:	b103      	cbz	r3, 800ceb0 <_fstat_r+0x1c>
 800ceae:	6023      	str	r3, [r4, #0]
 800ceb0:	bd38      	pop	{r3, r4, r5, pc}
 800ceb2:	bf00      	nop
 800ceb4:	20000d1c 	.word	0x20000d1c

0800ceb8 <_isatty_r>:
 800ceb8:	b538      	push	{r3, r4, r5, lr}
 800ceba:	4d06      	ldr	r5, [pc, #24]	@ (800ced4 <_isatty_r+0x1c>)
 800cebc:	2300      	movs	r3, #0
 800cebe:	4604      	mov	r4, r0
 800cec0:	4608      	mov	r0, r1
 800cec2:	602b      	str	r3, [r5, #0]
 800cec4:	f7f4 fa22 	bl	800130c <_isatty>
 800cec8:	1c43      	adds	r3, r0, #1
 800ceca:	d102      	bne.n	800ced2 <_isatty_r+0x1a>
 800cecc:	682b      	ldr	r3, [r5, #0]
 800cece:	b103      	cbz	r3, 800ced2 <_isatty_r+0x1a>
 800ced0:	6023      	str	r3, [r4, #0]
 800ced2:	bd38      	pop	{r3, r4, r5, pc}
 800ced4:	20000d1c 	.word	0x20000d1c

0800ced8 <_init>:
 800ced8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceda:	bf00      	nop
 800cedc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cede:	bc08      	pop	{r3}
 800cee0:	469e      	mov	lr, r3
 800cee2:	4770      	bx	lr

0800cee4 <_fini>:
 800cee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cee6:	bf00      	nop
 800cee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceea:	bc08      	pop	{r3}
 800ceec:	469e      	mov	lr, r3
 800ceee:	4770      	bx	lr
